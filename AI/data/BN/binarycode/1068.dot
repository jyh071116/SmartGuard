digraph G {
// Function: 1068.sol-CAE4DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_556(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_555'] 
TMP_557(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_558(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_557'] 
TMP_559(uint256) = TMP_558 / 2
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_556', 'TMP_559'] 
TMP_561(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_562(uint256) = TMP_560 / TMP_561
RETURN TMP_562"];
}
// Function: 1068.sol-CAE4DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_545(uint256) = INTERNAL_CALL, CAE4DKeysCalcLong.eth(uint256)(_curKeys)
TMP_546(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_547(uint256) = INTERNAL_CALL, CAE4DKeysCalcLong.eth(uint256)(TMP_546)
TMP_548(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_545', 'TMP_547'] 
RETURN TMP_548"];
}
// Function: 1068.sol-CAE4DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_549(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_550(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_549', '312500000000000000000000000'] 
TMP_551(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_550', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_552(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_551'] 
TMP_553(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_552', '74999921875000000000000000000000'] 
TMP_554(uint256) = TMP_553 / 156250000
RETURN TMP_554"];
}
// Function: 1068.sol-CAE4DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_541(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_542(uint256) = INTERNAL_CALL, CAE4DKeysCalcLong.keys(uint256)(TMP_541)
TMP_543(uint256) = INTERNAL_CALL, CAE4DKeysCalcLong.keys(uint256)(_curEth)
TMP_544(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_542', 'TMP_543'] 
RETURN TMP_544"];
}
// Function: 1068.sol-CAE4Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0xe1A375cd31baF61D2fDAbd93F85c22A49a3795aF || msg.sender == 0xbD63f951D2FbbA361b2B48F65fce7E227EFD0CAC,only team just can activate)

IRs:
TMP_415(bool) = msg.sender == 1288168206864166550060108163053918990709483345327
TMP_416(bool) = msg.sender == 1081228748262873853109746832553272713600680397996
TMP_417(bool) = TMP_415 || TMP_416
TMP_418(None) = SOLIDITY_CALL require(bool,string)(TMP_417,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_419(bool) = activated_ == False
TMP_420(None) = SOLIDITY_CALL require(bool,string)(TMP_419,fomo3d already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_701(CAE4Ddatasets.Round) -> round_[1]
REF_702(uint256) -> REF_701.strt
TMP_421(uint256) = now + rndExtra_
TMP_422(uint256) = TMP_421 - rndGap_
REF_702(uint256) (->round_) := TMP_422(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_703(CAE4Ddatasets.Round) -> round_[1]
REF_704(uint256) -> REF_703.end
TMP_423(uint256) = now + rndInit_
TMP_424(uint256) = TMP_423 + rndExtra_
REF_704(uint256) (->round_) := TMP_424(uint256)"];
}
// Function: 1068.sol-CAE4Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_339(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_340(bytes32) = SOLIDITY_CALL keccak256()(TMP_339)
TMP_341 = CONVERT TMP_340 to uint256
TMP_342(uint256) = TMP_341 / now
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_338', 'TMP_342'] 
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_343', 'block.gaslimit'] 
TMP_345(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_346(bytes32) = SOLIDITY_CALL keccak256()(TMP_345)
TMP_347 = CONVERT TMP_346 to uint256
TMP_348(uint256) = TMP_347 / now
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_344', 'TMP_348'] 
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_349', 'block.number'] 
TMP_351(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_350)
TMP_352(bytes32) = SOLIDITY_CALL keccak256()(TMP_351)
TMP_353 = CONVERT TMP_352 to uint256
seed(uint256) := TMP_353(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_354(uint256) = seed / 1000
TMP_355(uint256) = TMP_354 * 1000
TMP_356(uint256) = seed - TMP_355
TMP_357(bool) = TMP_356 < airDropTracker_
CONDITION TMP_357"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1068.sol-CAE4Dlong-buyCore(uint256,uint256,uint256,CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_267(CAE4Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.strt
TMP_154(uint256) = REF_268 + rndGap_
TMP_155(bool) = _now > TMP_154
REF_269(CAE4Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.end
TMP_156(bool) = _now <= REF_270
REF_271(CAE4Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.end
TMP_157(bool) = _now > REF_272
REF_273(CAE4Ddatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.plyr
TMP_158(bool) = REF_274 == 0
TMP_159(bool) = TMP_157 && TMP_158
TMP_160(bool) = TMP_156 || TMP_159
TMP_161(bool) = TMP_155 && TMP_160
CONDITION TMP_161"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.core(uint256,uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_275(CAE4Ddatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.end
TMP_163(bool) = _now > REF_276
REF_277(CAE4Ddatasets.Round) -> round_[_rID]
REF_278(bool) -> REF_277.ended
TMP_164(bool) = REF_278 == False
TMP_165(bool) = TMP_163 && TMP_164
CONDITION TMP_165"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_279(CAE4Ddatasets.Round) -> round_[_rID]
REF_280(bool) -> REF_279.ended
REF_280(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_166(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.endRound(CAE4Ddatasets.EventReturns)(_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_166(CAE4Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_281(uint256) -> _eventData_.compressedData
REF_282(uint256) -> _eventData_.compressedData
TMP_167(uint256) = _now * 1000000000000000000
TMP_168(uint256) = REF_282 + TMP_167
REF_281(uint256) (->_eventData_) := TMP_168(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_283(uint256) -> _eventData_.compressedIDs
REF_284(uint256) -> _eventData_.compressedIDs
TMP_169(uint256) = REF_284 + _pID
REF_283(uint256) (->_eventData_) := TMP_169(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
CAE4Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_286(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_287(bytes32) -> REF_286.name
REF_288(uint256) -> _eventData_.compressedData
REF_289(uint256) -> _eventData_.compressedIDs
REF_290(address) -> _eventData_.winnerAddr
REF_291(bytes32) -> _eventData_.winnerName
REF_292(uint256) -> _eventData_.amountWon
REF_293(uint256) -> _eventData_.newPot
REF_294(uint256) -> _eventData_.P3DAmount
REF_295(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_287,msg.value,REF_288,REF_289,REF_290,REF_291,REF_292,REF_293,REF_294,REF_295)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_296(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_297(uint256) -> REF_296.gen
REF_298(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_299(uint256) -> REF_298.gen
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_299', 'msg.value'] 
REF_297(uint256) (->plyr_) := TMP_171(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1068.sol-CAE4Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.determinePID(CAE4Ddatasets.EventReturns)(_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_23(CAE4Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, CAE4Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.buyCore(uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, CAE4Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1068.sol-CAE4Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.determinePID(CAE4Ddatasets.EventReturns)(_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_13(CAE4Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, CAE4Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.buyCore(uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, CAE4Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 1068.sol-CAE4Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.determinePID(CAE4Ddatasets.EventReturns)(_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_34(CAE4Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_35(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_36(bool) = _affCode == REF_36
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_38(bool) = _affID != REF_41
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, CAE4Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.buyCore(uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, CAE4Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1068.sol-CAE4Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_416(CAE4Ddatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.strt
TMP_237(uint256) = REF_417 + rndGap_
TMP_238(bool) = _now > TMP_237
REF_418(CAE4Ddatasets.Round) -> round_[_rID]
REF_419(uint256) -> REF_418.end
TMP_239(bool) = _now <= REF_419
REF_420(CAE4Ddatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.end
TMP_240(bool) = _now > REF_421
REF_422(CAE4Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.plyr
TMP_241(bool) = REF_423 == 0
TMP_242(bool) = TMP_240 && TMP_241
TMP_243(bool) = TMP_239 || TMP_242
TMP_244(bool) = TMP_238 && TMP_243
CONDITION TMP_244"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_424(CAE4Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.eth
TMP_245(uint256) = LIBRARY_CALL, dest:CAE4DKeysCalcLong, function:CAE4DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_425', '_eth'] 
RETURN TMP_245"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_246(uint256) = LIBRARY_CALL, dest:CAE4DKeysCalcLong, function:CAE4DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_246"];
}
// Function: 1068.sol-CAE4Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_406(CAE4Ddatasets.Round) -> round_[_rIDlast]
REF_407(uint256) -> REF_406.mask
REF_409(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_410(CAE4Ddatasets.PlayerRounds) -> REF_409[_rIDlast]
REF_411(uint256) -> REF_410.keys
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_407', 'REF_411'] 
TMP_235(uint256) = TMP_234 / 1000000000000000000
REF_413(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_414(CAE4Ddatasets.PlayerRounds) -> REF_413[_rIDlast]
REF_415(uint256) -> REF_414.mask
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_235', 'REF_415'] 
RETURN TMP_236"];
}
// Function: 1068.sol-CAE4Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = CAE4Ddatasets.TeamFee(20,60,15,5)

IRs:
REF_0(CAE4Ddatasets.TeamFee) -> fees_[0]
TMP_0(CAE4Ddatasets.TeamFee) = new TeamFee(20,60,15,5)
REF_0(CAE4Ddatasets.TeamFee) (->fees_) := TMP_0(CAE4Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = CAE4Ddatasets.TeamFee(41,24,30,5)

IRs:
REF_2(CAE4Ddatasets.TeamFee) -> fees_[1]
TMP_1(CAE4Ddatasets.TeamFee) = new TeamFee(41,24,30,5)
REF_2(CAE4Ddatasets.TeamFee) (->fees_) := TMP_1(CAE4Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = CAE4Ddatasets.TeamFee(55,30,10,5)

IRs:
REF_4(CAE4Ddatasets.TeamFee) -> fees_[2]
TMP_2(CAE4Ddatasets.TeamFee) = new TeamFee(55,30,10,5)
REF_4(CAE4Ddatasets.TeamFee) (->fees_) := TMP_2(CAE4Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = CAE4Ddatasets.TeamFee(50,20,25,5)

IRs:
REF_6(CAE4Ddatasets.TeamFee) -> fees_[3]
TMP_3(CAE4Ddatasets.TeamFee) = new TeamFee(50,20,25,5)
REF_6(CAE4Ddatasets.TeamFee) (->fees_) := TMP_3(CAE4Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = CAE4Ddatasets.PotSplit(10,75,13,2)

IRs:
REF_8(CAE4Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(CAE4Ddatasets.PotSplit) = new PotSplit(10,75,13,2)
REF_8(CAE4Ddatasets.PotSplit) (->potSplit_) := TMP_4(CAE4Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = CAE4Ddatasets.PotSplit(20,65,13,2)

IRs:
REF_10(CAE4Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(CAE4Ddatasets.PotSplit) = new PotSplit(20,65,13,2)
REF_10(CAE4Ddatasets.PotSplit) (->potSplit_) := TMP_5(CAE4Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = CAE4Ddatasets.PotSplit(25,65,8,2)

IRs:
REF_12(CAE4Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(CAE4Ddatasets.PotSplit) = new PotSplit(25,65,8,2)
REF_12(CAE4Ddatasets.PotSplit) (->potSplit_) := TMP_6(CAE4Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = CAE4Ddatasets.PotSplit(40,45,13,2)

IRs:
REF_14(CAE4Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(CAE4Ddatasets.PotSplit) = new PotSplit(40,45,13,2)
REF_14(CAE4Ddatasets.PotSplit) (->potSplit_) := TMP_7(CAE4Ddatasets.PotSplit)"];
}
// Function: 1068.sol-CAE4Dlong-core(uint256,uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_333(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_334(CAE4Ddatasets.PlayerRounds) -> REF_333[_rID]
REF_335(uint256) -> REF_334.keys
TMP_191(bool) = REF_335 == 0
CONDITION TMP_191"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_192(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.managePlayer(uint256,CAE4Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_192(CAE4Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_eth > 1000000000

IRs:
TMP_193(bool) = _eth > 1000000000
CONDITION TMP_193"];
4->5[label="True"];
4->52[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_336(CAE4Ddatasets.Round) -> round_[_rID]
REF_337(uint256) -> REF_336.eth
TMP_194(uint256) = LIBRARY_CALL, dest:CAE4DKeysCalcLong, function:CAE4DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_337', '_eth'] 
_keys(uint256) := TMP_194(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_195(bool) = _keys >= 1000000000000000000
CONDITION TMP_195"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, CAE4Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_339(CAE4Ddatasets.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.plyr
TMP_197(bool) = REF_340 != _pID
CONDITION TMP_197"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_341(CAE4Ddatasets.Round) -> round_[_rID]
REF_342(uint256) -> REF_341.plyr
REF_342(uint256) (->round_) := _pID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_343(CAE4Ddatasets.Round) -> round_[_rID]
REF_344(uint256) -> REF_343.team
TMP_198(bool) = REF_344 != _team
CONDITION TMP_198"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_345(CAE4Ddatasets.Round) -> round_[_rID]
REF_346(uint256) -> REF_345.team
REF_346(uint256) (->round_) := _team(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_347(uint256) -> _eventData_.compressedData
REF_348(uint256) -> _eventData_.compressedData
TMP_199(uint256) = REF_348 + 100
REF_347(uint256) (->_eventData_) := TMP_199(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_200(bool) = _eth >= 100000000000000000
CONDITION TMP_200"];
16->17[label="True"];
16->42[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_201(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
airdrop() == true

IRs:
TMP_202(bool) = INTERNAL_CALL, CAE4Dlong.airdrop()()
TMP_203(bool) = TMP_202 == True
CONDITION TMP_203"];
18->19[label="True"];
18->41[label="False"];
19[label="Node Type: NEW VARIABLE 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_204(bool) = _eth >= 10000000000000000000
CONDITION TMP_204"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_206(uint256) = TMP_205 / 100
_prize(uint256) := TMP_206(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_350(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_351(uint256) -> REF_350.win
REF_352(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_353(uint256) -> REF_352.win
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_353', '_prize'] 
REF_351(uint256) (->plyr_) := TMP_207(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_208(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_356(uint256) -> _eventData_.compressedData
REF_356(-> _eventData_) = REF_356 + 300000000000000000000000000000000"];
24->37;
25[label="Node Type: IF 25

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_209(bool) = _eth >= 1000000000000000000
TMP_210(bool) = _eth < 10000000000000000000
TMP_211(bool) = TMP_209 && TMP_210
CONDITION TMP_211"];
25->26[label="True"];
25->30[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_213(uint256) = TMP_212 / 100
_prize(uint256) := TMP_213(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_358(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.win
REF_360(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.win
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_361', '_prize'] 
REF_359(uint256) (->plyr_) := TMP_214(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_215(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_364(uint256) -> _eventData_.compressedData
REF_364(-> _eventData_) = REF_364 + 200000000000000000000000000000000"];
29->36;
30[label="Node Type: IF 30

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_216(bool) = _eth >= 100000000000000000
TMP_217(bool) = _eth < 1000000000000000000
TMP_218(bool) = TMP_216 && TMP_217
CONDITION TMP_218"];
30->31[label="True"];
30->35[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_220(uint256) = TMP_219 / 100
_prize(uint256) := TMP_220(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_366(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_367(uint256) -> REF_366.win
REF_368(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_369(uint256) -> REF_368.win
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_369', '_prize'] 
REF_367(uint256) (->plyr_) := TMP_221(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_222(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_372(uint256) -> _eventData_.compressedData
REF_372(-> _eventData_) = REF_372 + 300000000000000000000000000000000"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_373(uint256) -> _eventData_.compressedData
REF_373(-> _eventData_) = REF_373 + 10000000000000000000000000000000"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_374(uint256) -> _eventData_.compressedData
TMP_223(uint256) = _prize * 1000000000000000000000000000000000
REF_374(-> _eventData_) = REF_374 + TMP_223"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_375(uint256) -> _eventData_.compressedData
REF_376(uint256) -> _eventData_.compressedData
TMP_224(uint256) = airDropTracker_ * 1000
TMP_225(uint256) = REF_376 + TMP_224
REF_375(uint256) (->_eventData_) := TMP_225(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_377(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_378(CAE4Ddatasets.PlayerRounds) -> REF_377[_rID]
REF_379(uint256) -> REF_378.keys
REF_381(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_382(CAE4Ddatasets.PlayerRounds) -> REF_381[_rID]
REF_383(uint256) -> REF_382.keys
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_383'] 
REF_379(uint256) (->plyrRnds_) := TMP_226(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_384(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_385(CAE4Ddatasets.PlayerRounds) -> REF_384[_rID]
REF_386(uint256) -> REF_385.eth
REF_388(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_389(CAE4Ddatasets.PlayerRounds) -> REF_388[_rID]
REF_390(uint256) -> REF_389.eth
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_390'] 
REF_386(uint256) (->plyrRnds_) := TMP_227(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_391(CAE4Ddatasets.Round) -> round_[_rID]
REF_392(uint256) -> REF_391.keys
REF_394(CAE4Ddatasets.Round) -> round_[_rID]
REF_395(uint256) -> REF_394.keys
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_395'] 
REF_392(uint256) (->round_) := TMP_228(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_396(CAE4Ddatasets.Round) -> round_[_rID]
REF_397(uint256) -> REF_396.eth
REF_399(CAE4Ddatasets.Round) -> round_[_rID]
REF_400(uint256) -> REF_399.eth
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_400'] 
REF_397(uint256) (->round_) := TMP_229(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_401(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_402(uint256) -> REF_401[_team]
REF_404(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_405(uint256) -> REF_404[_team]
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_405'] 
REF_402(uint256) (->rndTmEth_) := TMP_230(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_231(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_231(CAE4Ddatasets.EventReturns)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_232(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_232(CAE4Ddatasets.EventReturns)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.endTx(uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
51->52;
52[label="Node Type: END_IF 52
"];
}
// Function: 1068.sol-CAE4Dlong-determinePID(CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_465(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_465(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_271(bool) = _pID == 0
CONDITION TMP_271"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_272(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_272(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_273(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_273(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_274(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_274(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_469(uint256) -> pIDxAddr_[msg.sender]
REF_469(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_470(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_471(address) -> REF_470.addr
REF_471(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_275(bool) = _name != 
CONDITION TMP_275"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_472(uint256) -> pIDxName_[_name]
REF_472(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_473(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_474(bytes32) -> REF_473.name
REF_474(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_475(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_476(bool) -> REF_475[_name]
REF_476(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_276(bool) = _laff != 0
TMP_277(bool) = _laff != _pID
TMP_278(bool) = TMP_276 && TMP_277
CONDITION TMP_278"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_477(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_478(uint256) -> REF_477.laff
REF_478(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_479(uint256) -> _eventData_.compressedData
REF_480(uint256) -> _eventData_.compressedData
TMP_279(uint256) = REF_480 + 1
REF_479(uint256) (->_eventData_) := TMP_279(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1068.sol-CAE4Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth.mul(fees_[_team].com) / 100

IRs:
REF_593(CAE4Ddatasets.TeamFee) -> fees_[_team]
REF_594(uint256) -> REF_593.com
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_594'] 
TMP_359(uint256) = TMP_358 / 100
_com(uint256) := TMP_359(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth.mul(fees_[_team].aff) / 100

IRs:
REF_596(CAE4Ddatasets.TeamFee) -> fees_[_team]
REF_597(uint256) -> REF_596.aff
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_597'] 
TMP_361(uint256) = TMP_360 / 100
_aff(uint256) := TMP_361(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_362(bool) = _affID != _pID
REF_598(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_599(bytes32) -> REF_598.name
TMP_363(bool) = REF_599 != 
TMP_364(bool) = TMP_362 && TMP_363
CONDITION TMP_364"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_600(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_601(uint256) -> REF_600.aff
REF_603(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_604(uint256) -> REF_603.aff
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_604'] 
REF_601(uint256) (->plyr_) := TMP_365(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
CAE4Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_606(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_607(address) -> REF_606.addr
REF_608(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_609(bytes32) -> REF_608.name
Emit onAffiliatePayout(_affID,REF_607,REF_609,_rID,_pID,_aff,now)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_com = _com.add(_aff)

IRs:
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_aff'] 
_com(uint256) := TMP_367(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! address(Jekyll_Island_Inc).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_368 = CONVERT Jekyll_Island_Inc to address
TMP_370(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_371 = CONVERT TMP_370 to bytes4
TMP_372(bool) = LOW_LEVEL_CALL, dest:TMP_368, function:call, arguments:['TMP_371'] value:_com 
TMP_373 = UnaryType.BANG TMP_372 
CONDITION TMP_373"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[rID_].pot = round_[rID_].pot.add(_com)

IRs:
REF_613(CAE4Ddatasets.Round) -> round_[rID_]
REF_614(uint256) -> REF_613.pot
REF_615(CAE4Ddatasets.Round) -> round_[rID_]
REF_616(uint256) -> REF_615.pot
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_616', '_com'] 
REF_614(uint256) (->round_) := TMP_374(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1068.sol-CAE4Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_625(CAE4Ddatasets.TeamFee) -> fees_[_team]
REF_626(uint256) -> REF_625.gen
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_626'] 
TMP_379(uint256) = TMP_378 / 100
_gen(uint256) := TMP_379(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eth = _eth.sub((_eth.mul(fees_[_team].com + fees_[_team].aff)) / 100)

IRs:
REF_629(CAE4Ddatasets.TeamFee) -> fees_[_team]
REF_630(uint256) -> REF_629.com
REF_631(CAE4Ddatasets.TeamFee) -> fees_[_team]
REF_632(uint256) -> REF_631.aff
TMP_380(uint256) = REF_630 + REF_632
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'TMP_380'] 
TMP_382(uint256) = TMP_381 / 100
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_382'] 
_eth(uint256) := TMP_383(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_384(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_385(uint256) = INTERNAL_CALL, CAE4Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_385(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_dust > 0

IRs:
TMP_386(bool) = _dust > 0
CONDITION TMP_386"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_387(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_635(CAE4Ddatasets.Round) -> round_[_rID]
REF_636(uint256) -> REF_635.pot
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_639(CAE4Ddatasets.Round) -> round_[_rID]
REF_640(uint256) -> REF_639.pot
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_388', 'REF_640'] 
REF_636(uint256) (->round_) := TMP_389(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_641(uint256) -> _eventData_.genAmount
REF_643(uint256) -> _eventData_.genAmount
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_643'] 
REF_641(uint256) (->_eventData_) := TMP_390(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_644(uint256) -> _eventData_.potAmount
REF_644(uint256) (->_eventData_) := _pot(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1068.sol-CAE4Dlong-endRound(CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_489(CAE4Ddatasets.Round) -> round_[_rID]
REF_490(uint256) -> REF_489.plyr
_winPID(uint256) := REF_490(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_491(CAE4Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.team
_winTID(uint256) := REF_492(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_493(CAE4Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.pot
_pot(uint256) := REF_494(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(potSplit_[_winTID].win)) / 100

IRs:
REF_496(CAE4Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_497(uint256) -> REF_496.win
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_497'] 
TMP_287(uint256) = TMP_286 / 100
_win(uint256) := TMP_287(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot.mul(potSplit_[_winTID].com)) / 100

IRs:
REF_499(CAE4Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_500(uint256) -> REF_499.com
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_500'] 
TMP_289(uint256) = TMP_288 / 100
_com(uint256) := TMP_289(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_502(CAE4Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_503(uint256) -> REF_502.gen
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_503'] 
TMP_291(uint256) = TMP_290 / 100
_gen(uint256) := TMP_291(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_res = ((_pot.sub(_win)).sub(_com)).sub(_gen)

IRs:
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_292', '_com'] 
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_293', '_gen'] 
_res(uint256) := TMP_294(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_508(CAE4Ddatasets.Round) -> round_[_rID]
REF_509(uint256) -> REF_508.keys
TMP_296(uint256) = TMP_295 / REF_509
_ppt(uint256) := TMP_296(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_512(CAE4Ddatasets.Round) -> round_[_rID]
REF_513(uint256) -> REF_512.keys
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_513'] 
TMP_298(uint256) = TMP_297 / 1000000000000000000
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_298'] 
_dust(uint256) := TMP_299(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_dust > 0

IRs:
TMP_300(bool) = _dust > 0
CONDITION TMP_300"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_301(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_302(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_516(CAE4Ddatasets.Player) -> plyr_[_winPID]
REF_517(uint256) -> REF_516.win
REF_519(CAE4Ddatasets.Player) -> plyr_[_winPID]
REF_520(uint256) -> REF_519.win
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_520'] 
REF_517(uint256) (->plyr_) := TMP_303(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
! address(Jekyll_Island_Inc).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_304 = CONVERT Jekyll_Island_Inc to address
TMP_306(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_307 = CONVERT TMP_306 to bytes4
TMP_308(bool) = LOW_LEVEL_CALL, dest:TMP_304, function:call, arguments:['TMP_307'] value:_com 
TMP_309 = UnaryType.BANG TMP_308 
CONDITION TMP_309"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_res = _res.add(_com)

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_com'] 
_res(uint256) := TMP_310(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_524(CAE4Ddatasets.Round) -> round_[_rID]
REF_525(uint256) -> REF_524.mask
REF_527(CAE4Ddatasets.Round) -> round_[_rID]
REF_528(uint256) -> REF_527.mask
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_528'] 
REF_525(uint256) (->round_) := TMP_311(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_529(uint256) -> _eventData_.compressedData
REF_530(uint256) -> _eventData_.compressedData
REF_531(CAE4Ddatasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.end
TMP_312(uint256) = REF_532 * 1000000
TMP_313(uint256) = REF_530 + TMP_312
REF_529(uint256) (->_eventData_) := TMP_313(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_533(uint256) -> _eventData_.compressedIDs
REF_534(uint256) -> _eventData_.compressedIDs
TMP_314(uint256) = _winPID * 100000000000000000000000000
TMP_315(uint256) = REF_534 + TMP_314
TMP_316(uint256) = _winTID * 100000000000000000
TMP_317(uint256) = TMP_315 + TMP_316
REF_533(uint256) (->_eventData_) := TMP_317(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_535(address) -> _eventData_.winnerAddr
REF_536(CAE4Ddatasets.Player) -> plyr_[_winPID]
REF_537(address) -> REF_536.addr
REF_535(address) (->_eventData_) := REF_537(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_538(bytes32) -> _eventData_.winnerName
REF_539(CAE4Ddatasets.Player) -> plyr_[_winPID]
REF_540(bytes32) -> REF_539.name
REF_538(bytes32) (->_eventData_) := REF_540(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_541(uint256) -> _eventData_.amountWon
REF_541(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_542(uint256) -> _eventData_.genAmount
REF_542(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_543(uint256) -> _eventData_.newPot
REF_543(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_318(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_319(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_544(CAE4Ddatasets.Round) -> round_[_rID]
REF_545(uint256) -> REF_544.strt
REF_545(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_546(CAE4Ddatasets.Round) -> round_[_rID]
REF_547(uint256) -> REF_546.end
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_320', 'rndGap_'] 
REF_547(uint256) (->round_) := TMP_321(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_550(CAE4Ddatasets.Round) -> round_[_rID]
REF_551(uint256) -> REF_550.pot
REF_551(uint256) (->round_) := _res(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].initPot = round_[_rID].pot

IRs:
REF_552(CAE4Ddatasets.Round) -> round_[_rID]
REF_553(uint256) -> REF_552.initPot
REF_554(CAE4Ddatasets.Round) -> round_[_rID]
REF_555(uint256) -> REF_554.pot
REF_553(uint256) (->round_) := REF_555(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1068.sol-CAE4Dlong-endTx(uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_685(uint256) -> _eventData_.compressedData
REF_686(uint256) -> _eventData_.compressedData
TMP_407(uint256) = now * 1000000000000000000
TMP_408(uint256) = REF_686 + TMP_407
TMP_409(uint256) = _team * 100000000000000000000000000000
TMP_410(uint256) = TMP_408 + TMP_409
REF_685(uint256) (->_eventData_) := TMP_410(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_687(uint256) -> _eventData_.compressedIDs
REF_688(uint256) -> _eventData_.compressedIDs
TMP_411(uint256) = REF_688 + _pID
TMP_412(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_413(uint256) = TMP_411 + TMP_412
REF_687(uint256) (->_eventData_) := TMP_413(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CAE4Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_690(uint256) -> _eventData_.compressedData
REF_691(uint256) -> _eventData_.compressedIDs
REF_692(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_693(bytes32) -> REF_692.name
REF_694(address) -> _eventData_.winnerAddr
REF_695(bytes32) -> _eventData_.winnerName
REF_696(uint256) -> _eventData_.amountWon
REF_697(uint256) -> _eventData_.newPot
REF_698(uint256) -> _eventData_.P3DAmount
REF_699(uint256) -> _eventData_.genAmount
REF_700(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_690,REF_691,REF_693,msg.sender,_eth,_keys,REF_694,REF_695,REF_696,REF_697,REF_698,REF_699,REF_700,airDropPot_)"];
}
// Function: 1068.sol-CAE4Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.determinePID(CAE4Ddatasets.EventReturns)(_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_8(CAE4Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, CAE4Dlong.buyCore(uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, CAE4Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1068.sol-CAE4Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_129(CAE4Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.strt
TMP_103(uint256) = REF_130 + rndGap_
TMP_104(bool) = _now > TMP_103
REF_131(CAE4Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_105(bool) = _now <= REF_132
REF_133(CAE4Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.end
TMP_106(bool) = _now > REF_134
REF_135(CAE4Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.plyr
TMP_107(bool) = REF_136 == 0
TMP_108(bool) = TMP_106 && TMP_107
TMP_109(bool) = TMP_105 || TMP_108
TMP_110(bool) = TMP_104 && TMP_109
CONDITION TMP_110"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_137(CAE4Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.keys
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_138', '1000000000000000000'] 
TMP_112(uint256) = LIBRARY_CALL, dest:CAE4DKeysCalcLong, function:CAE4DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_111', '1000000000000000000'] 
RETURN TMP_112"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 1068.sol-CAE4Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].eth,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_211(CAE4Ddatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.eth
REF_213(CAE4Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.keys
REF_215(CAE4Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.end
REF_217(CAE4Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.strt
REF_219(CAE4Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.pot
REF_221(CAE4Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.team
REF_223(CAE4Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.plyr
TMP_143(uint256) = REF_224 * 10
TMP_144(uint256) = REF_222 + TMP_143
REF_225(CAE4Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.plyr
REF_227(CAE4Ddatasets.Player) -> plyr_[REF_226]
REF_228(address) -> REF_227.addr
REF_229(CAE4Ddatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.plyr
REF_231(CAE4Ddatasets.Player) -> plyr_[REF_230]
REF_232(bytes32) -> REF_231.name
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[0]
REF_235(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_236(uint256) -> REF_235[1]
REF_237(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_238(uint256) -> REF_237[2]
REF_239(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_240(uint256) -> REF_239[3]
TMP_145(uint256) = airDropPot_ * 1000
TMP_146(uint256) = airDropTracker_ + TMP_145
RETURN REF_212,_rID,REF_214,REF_216,REF_218,REF_220,TMP_144,REF_228,REF_232,REF_234,REF_236,REF_238,REF_240,TMP_146"];
}
// Function: 1068.sol-CAE4Dlong-getCurrentRoundRewards()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].eth.add(round_[_rID].initPot).sub(round_[_rID].pot))

IRs:
REF_241(CAE4Ddatasets.Round) -> round_[_rID]
REF_242(uint256) -> REF_241.eth
REF_244(CAE4Ddatasets.Round) -> round_[_rID]
REF_245(uint256) -> REF_244.initPot
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_242', 'REF_245'] 
REF_247(CAE4Ddatasets.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.pot
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_147', 'REF_248'] 
RETURN TMP_148"];
}
// Function: 1068.sol-CAE4Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_149 = CONVERT 0 to address
TMP_150(bool) = _addr == TMP_149
CONDITION TMP_150"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_151(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_249(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_249(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_250(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_251(bytes32) -> REF_250.name
REF_252(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_253(CAE4Ddatasets.PlayerRounds) -> REF_252[_rID]
REF_254(uint256) -> REF_253.keys
REF_255(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_256(uint256) -> REF_255.win
REF_257(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_258(uint256) -> REF_257.gen
REF_260(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_261(uint256) -> REF_260.lrnd
TMP_152(uint256) = INTERNAL_CALL, CAE4Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_261)
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_258', 'TMP_152'] 
REF_262(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_263(uint256) -> REF_262.aff
REF_264(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_265(CAE4Ddatasets.PlayerRounds) -> REF_264[_rID]
REF_266(uint256) -> REF_265.eth
RETURN _pID,REF_251,REF_254,REF_256,TMP_153,REF_263,REF_266"];
}
// Function: 1068.sol-CAE4Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_151(CAE4Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_119(bool) = now > REF_152
REF_153(CAE4Ddatasets.Round) -> round_[_rID]
REF_154(bool) -> REF_153.ended
TMP_120(bool) = REF_154 == False
TMP_121(bool) = TMP_119 && TMP_120
REF_155(CAE4Ddatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.plyr
TMP_122(bool) = REF_156 != 0
TMP_123(bool) = TMP_121 && TMP_122
CONDITION TMP_123"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_157(CAE4Ddatasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.plyr
TMP_124(bool) = REF_158 == _pID
CONDITION TMP_124"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_159(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.win
REF_162(CAE4Ddatasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.pot
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_163', '48'] 
TMP_126(uint256) = TMP_125 / 100
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_126'] 
REF_165(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.gen
TMP_128(uint256) = INTERNAL_CALL, CAE4Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_169(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_170(CAE4Ddatasets.PlayerRounds) -> REF_169[_rID]
REF_171(uint256) -> REF_170.mask
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_128', 'REF_171'] 
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_166', 'TMP_129'] 
REF_172(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.aff
RETURN TMP_127,TMP_130,REF_173"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_174(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.win
REF_176(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.gen
TMP_131(uint256) = INTERNAL_CALL, CAE4Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_180(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_181(CAE4Ddatasets.PlayerRounds) -> REF_180[_rID]
REF_182(uint256) -> REF_181.mask
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_131', 'REF_182'] 
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_177', 'TMP_132'] 
REF_183(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.aff
RETURN REF_175,TMP_133,REF_184"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_185(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.win
REF_187(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.gen
REF_190(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.lrnd
TMP_134(uint256) = INTERNAL_CALL, CAE4Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_191)
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', 'TMP_134'] 
REF_192(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.aff
RETURN REF_186,TMP_135,REF_193"];
}
// Function: 1068.sol-CAE4Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_194(CAE4Ddatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.mask
REF_197(CAE4Ddatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.pot
REF_200(CAE4Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.team
REF_202(CAE4Ddatasets.PotSplit) -> potSplit_[REF_201]
REF_203(uint256) -> REF_202.gen
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_198', 'REF_203'] 
TMP_137(uint256) = TMP_136 / 100
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_137', '1000000000000000000'] 
REF_205(CAE4Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.keys
TMP_139(uint256) = TMP_138 / REF_206
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_195', 'TMP_139'] 
REF_208(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_209(CAE4Ddatasets.PlayerRounds) -> REF_208[_rID]
REF_210(uint256) -> REF_209.keys
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_140', 'REF_210'] 
TMP_142(uint256) = TMP_141 / 1000000000000000000
RETURN TMP_142"];
}
// Function: 1068.sol-CAE4Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_141(CAE4Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_113(bool) = _now < REF_142
CONDITION TMP_113"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_143(CAE4Ddatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.strt
TMP_114(uint256) = REF_144 + rndGap_
TMP_115(bool) = _now > TMP_114
CONDITION TMP_115"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_145(CAE4Ddatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_146', '_now'] 
RETURN TMP_116"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_148(CAE4Ddatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.strt
TMP_117(uint256) = REF_149 + rndGap_
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', '_now'] 
RETURN TMP_118"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1068.sol-CAE4Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_428(CAE4Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.strt
TMP_247(uint256) = REF_429 + rndGap_
TMP_248(bool) = _now > TMP_247
REF_430(CAE4Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.end
TMP_249(bool) = _now <= REF_431
REF_432(CAE4Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.end
TMP_250(bool) = _now > REF_433
REF_434(CAE4Ddatasets.Round) -> round_[_rID]
REF_435(uint256) -> REF_434.plyr
TMP_251(bool) = REF_435 == 0
TMP_252(bool) = TMP_250 && TMP_251
TMP_253(bool) = TMP_249 || TMP_252
TMP_254(bool) = TMP_248 && TMP_253
CONDITION TMP_254"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_436(CAE4Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.keys
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_437', '_keys'] 
TMP_256(uint256) = LIBRARY_CALL, dest:CAE4DKeysCalcLong, function:CAE4DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_255', '_keys'] 
RETURN TMP_256"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_257(uint256) = LIBRARY_CALL, dest:CAE4DKeysCalcLong, function:CAE4DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_257"];
}
// Function: 1068.sol-CAE4Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_427(bool) = activated_ == True
TMP_428(None) = SOLIDITY_CALL require(bool,string)(TMP_427,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1068.sol-CAE4Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_429(bool) = _codeLength == 0
TMP_430(None) = SOLIDITY_CALL require(bool,string)(TMP_429,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1068.sol-CAE4Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_431(bool) = _eth >= 1000000000
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_433(bool) = _eth <= 100000000000000000000000
TMP_434(None) = SOLIDITY_CALL require(bool,string)(TMP_433,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1068.sol-CAE4Dlong-managePlayer(uint256,CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_481(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_482(uint256) -> REF_481.lrnd
TMP_283(bool) = REF_482 != 0
CONDITION TMP_283"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_483(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_484(uint256) -> REF_483.lrnd
INTERNAL_CALL, CAE4Dlong.updateGenVault(uint256,uint256)(_pID,REF_484)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_485(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.lrnd
REF_486(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_487(uint256) -> _eventData_.compressedData
REF_488(uint256) -> _eventData_.compressedData
TMP_285(uint256) = REF_488 + 10
REF_487(uint256) (->_eventData_) := TMP_285(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1068.sol-CAE4Dlong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_375(uint256) = rID_ + 1
_rID(uint256) := TMP_375(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_618(CAE4Ddatasets.Round) -> round_[_rID]
REF_619(uint256) -> REF_618.pot
REF_620(CAE4Ddatasets.Round) -> round_[_rID]
REF_621(uint256) -> REF_620.pot
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_621', 'msg.value'] 
REF_619(uint256) (->round_) := TMP_376(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CAE4Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 1068.sol-CAE4Dlong-reLoadCore(uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_301(CAE4Ddatasets.Round) -> round_[_rID]
REF_302(uint256) -> REF_301.strt
TMP_172(uint256) = REF_302 + rndGap_
TMP_173(bool) = _now > TMP_172
REF_303(CAE4Ddatasets.Round) -> round_[_rID]
REF_304(uint256) -> REF_303.end
TMP_174(bool) = _now <= REF_304
REF_305(CAE4Ddatasets.Round) -> round_[_rID]
REF_306(uint256) -> REF_305.end
TMP_175(bool) = _now > REF_306
REF_307(CAE4Ddatasets.Round) -> round_[_rID]
REF_308(uint256) -> REF_307.plyr
TMP_176(bool) = REF_308 == 0
TMP_177(bool) = TMP_175 && TMP_176
TMP_178(bool) = TMP_174 || TMP_177
TMP_179(bool) = TMP_173 && TMP_178
CONDITION TMP_179"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_309(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_310(uint256) -> REF_309.gen
TMP_180(uint256) = INTERNAL_CALL, CAE4Dlong.withdrawEarnings(uint256)(_pID)
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_180', '_eth'] 
REF_310(uint256) (->plyr_) := TMP_181(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.core(uint256,uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_312(CAE4Ddatasets.Round) -> round_[_rID]
REF_313(uint256) -> REF_312.end
TMP_183(bool) = _now > REF_313
REF_314(CAE4Ddatasets.Round) -> round_[_rID]
REF_315(bool) -> REF_314.ended
TMP_184(bool) = REF_315 == False
TMP_185(bool) = TMP_183 && TMP_184
CONDITION TMP_185"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_316(CAE4Ddatasets.Round) -> round_[_rID]
REF_317(bool) -> REF_316.ended
REF_317(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_186(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.endRound(CAE4Ddatasets.EventReturns)(_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_186(CAE4Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_318(uint256) -> _eventData_.compressedData
REF_319(uint256) -> _eventData_.compressedData
TMP_187(uint256) = _now * 1000000000000000000
TMP_188(uint256) = REF_319 + TMP_187
REF_318(uint256) (->_eventData_) := TMP_188(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_320(uint256) -> _eventData_.compressedIDs
REF_321(uint256) -> _eventData_.compressedIDs
TMP_189(uint256) = REF_321 + _pID
REF_320(uint256) (->_eventData_) := TMP_189(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
CAE4Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_323(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_324(bytes32) -> REF_323.name
REF_325(uint256) -> _eventData_.compressedData
REF_326(uint256) -> _eventData_.compressedIDs
REF_327(address) -> _eventData_.winnerAddr
REF_328(bytes32) -> _eventData_.winnerName
REF_329(uint256) -> _eventData_.amountWon
REF_330(uint256) -> _eventData_.newPot
REF_331(uint256) -> _eventData_.P3DAmount
REF_332(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_324,REF_325,REF_326,REF_327,REF_328,REF_329,REF_330,REF_331,REF_332)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1068.sol-CAE4Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_57(bool) = _affID != REF_56
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, CAE4Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.reLoadCore(uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, CAE4Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1068.sol-CAE4Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_47(bool) = _affCode != REF_48
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, CAE4Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.reLoadCore(uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, CAE4Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 1068.sol-CAE4Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_60(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_64(bool) = _affCode == REF_61
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_66(bool) = _affID != REF_66
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, CAE4Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, CAE4Dlong.reLoadCore(uint256,uint256,uint256,uint256,CAE4Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, CAE4Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1068.sol-CAE4Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_258 = CONVERT PlayerBook to address
TMP_259(bool) = msg.sender == TMP_258
TMP_260(None) = SOLIDITY_CALL require(bool,string)(TMP_259,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_441(uint256) -> pIDxAddr_[_addr]
TMP_261(bool) = REF_441 != _pID
CONDITION TMP_261"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_442(uint256) -> pIDxAddr_[_addr]
REF_442(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_443(uint256) -> pIDxName_[_name]
TMP_262(bool) = REF_443 != _pID
CONDITION TMP_262"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_444(uint256) -> pIDxName_[_name]
REF_444(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_445(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_446(address) -> REF_445.addr
TMP_263(bool) = REF_446 != _addr
CONDITION TMP_263"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_447(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_448(address) -> REF_447.addr
REF_448(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_449(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_450(bytes32) -> REF_449.name
TMP_264(bool) = REF_450 != _name
CONDITION TMP_264"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_451(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_452(bytes32) -> REF_451.name
REF_452(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_453(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_454(uint256) -> REF_453.laff
TMP_265(bool) = REF_454 != _laff
CONDITION TMP_265"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_455(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_456(uint256) -> REF_455.laff
REF_456(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_457(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_458(bool) -> REF_457[_name]
TMP_266(bool) = REF_458 == False
CONDITION TMP_266"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_459(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_460(bool) -> REF_459[_name]
REF_460(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1068.sol-CAE4Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_267 = CONVERT PlayerBook to address
TMP_268(bool) = msg.sender == TMP_267
TMP_269(None) = SOLIDITY_CALL require(bool,string)(TMP_268,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_461(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_462(bool) -> REF_461[_name]
TMP_270(bool) = REF_462 == False
CONDITION TMP_270"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_463(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_464(bool) -> REF_463[_name]
REF_464(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1068.sol-CAE4Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_91(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_91(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_105(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_105(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
CAE4Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_107(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_108(address) -> REF_107.addr
REF_109(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_110(bytes32) -> REF_109.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_108,REF_110,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
9->1;
}
// Function: 1068.sol-CAE4Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_95(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_95(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_114(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_114(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
CAE4Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_116(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_117(address) -> REF_116.addr
REF_118(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_119(bytes32) -> REF_118.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_117,REF_119,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
9->1;
}
// Function: 1068.sol-CAE4Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_99(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_99(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_123(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_123(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
CAE4Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_125(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_126(address) -> REF_125.addr
REF_127(CAE4Ddatasets.Player) -> plyr_[_affID]
REF_128(bytes32) -> REF_127.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_126,REF_128,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
9->1;
}
// Function: 1068.sol-CAE4Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Jekyll_Island_Inc = JIincForwarderInterface(0xBE207a22b2dcabB7AAd232d8F631cBEda56E379d)

IRs:
TMP_425 = CONVERT 1085432509809115011009080343850296435246977922973 to JIincForwarderInterface
Jekyll_Island_Inc(JIincForwarderInterface) := TMP_425(JIincForwarderInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PlayerBook = PlayerBookInterface(0xBCE0e39E0b9CbD62fde3B490523231eA2827Df1d)

IRs:
TMP_426 = CONVERT 1078305460108308520705716571367150207661142171421 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_426(PlayerBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = CAE4D

IRs:
name(string) := CAE4D(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = CAE4D

IRs:
symbol(string) := CAE4D(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 1068.sol-CAE4Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 30

IRs:
rndExtra_(uint256) := 30(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 30

IRs:
rndGap_(uint256) := 30(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 1068.sol-CAE4Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_322(uint256) = INTERNAL_CALL, CAE4Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_322(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_323(bool) = _earnings > 0
CONDITION TMP_323"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_556(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_557(uint256) -> REF_556.gen
REF_559(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_560(uint256) -> REF_559.gen
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_560'] 
REF_557(uint256) (->plyr_) := TMP_324(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_561(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_562(CAE4Ddatasets.PlayerRounds) -> REF_561[_rIDlast]
REF_563(uint256) -> REF_562.mask
REF_565(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_566(CAE4Ddatasets.PlayerRounds) -> REF_565[_rIDlast]
REF_567(uint256) -> REF_566.mask
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_567'] 
REF_563(uint256) (->plyrRnds_) := TMP_325(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1068.sol-CAE4Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_646(CAE4Ddatasets.Round) -> round_[_rID]
REF_647(uint256) -> REF_646.keys
TMP_392(uint256) = TMP_391 / REF_647
_ppt(uint256) := TMP_392(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_648(CAE4Ddatasets.Round) -> round_[_rID]
REF_649(uint256) -> REF_648.mask
REF_651(CAE4Ddatasets.Round) -> round_[_rID]
REF_652(uint256) -> REF_651.mask
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_652'] 
REF_649(uint256) (->round_) := TMP_393(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_395(uint256) = TMP_394 / 1000000000000000000
_pearn(uint256) := TMP_395(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_654(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_655(CAE4Ddatasets.PlayerRounds) -> REF_654[_rID]
REF_656(uint256) -> REF_655.mask
REF_657(CAE4Ddatasets.Round) -> round_[_rID]
REF_658(uint256) -> REF_657.mask
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_658', '_keys'] 
TMP_397(uint256) = TMP_396 / 1000000000000000000
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_397', '_pearn'] 
REF_662(mapping(uint256 => CAE4Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_663(CAE4Ddatasets.PlayerRounds) -> REF_662[_rID]
REF_664(uint256) -> REF_663.mask
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_398', 'REF_664'] 
REF_656(uint256) (->plyrRnds_) := TMP_399(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_667(CAE4Ddatasets.Round) -> round_[_rID]
REF_668(uint256) -> REF_667.keys
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_668'] 
TMP_401(uint256) = TMP_400 / 1000000000000000000
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_401'] 
RETURN TMP_402"];
}
// Function: 1068.sol-CAE4Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_568(CAE4Ddatasets.Round) -> round_[_rID]
REF_569(uint256) -> REF_568.end
TMP_326(bool) = _now > REF_569
REF_570(CAE4Ddatasets.Round) -> round_[_rID]
REF_571(uint256) -> REF_570.plyr
TMP_327(bool) = REF_571 == 0
TMP_328(bool) = TMP_326 && TMP_327
CONDITION TMP_328"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_329(uint256) = _keys / 1000000000000000000
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_329', 'rndInc_'] 
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_330', '_now'] 
_newTime(uint256) := TMP_331(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_332(uint256) = _keys / 1000000000000000000
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_332', 'rndInc_'] 
REF_576(CAE4Ddatasets.Round) -> round_[_rID]
REF_577(uint256) -> REF_576.end
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_333', 'REF_577'] 
_newTime(uint256) := TMP_334(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_336(bool) = _newTime < TMP_335
CONDITION TMP_336"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_579(CAE4Ddatasets.Round) -> round_[_rID]
REF_580(uint256) -> REF_579.end
REF_580(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_581(CAE4Ddatasets.Round) -> round_[_rID]
REF_582(uint256) -> REF_581.end
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_582(uint256) (->round_) := TMP_337(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1068.sol-CAE4Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_280(bool) = _team < 0
TMP_281(bool) = _team > 3
TMP_282(bool) = TMP_280 || TMP_281
CONDITION TMP_282"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 1068.sol-CAE4Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(CAE4Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_72(bool) = _now > REF_71
REF_72(CAE4Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_73(bool) = REF_73 == False
TMP_74(bool) = TMP_72 && TMP_73
REF_74(CAE4Ddatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_75(bool) = REF_75 != 0
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(CAE4Ddatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_77(CAE4Ddatasets.EventReturns) = INTERNAL_CALL, CAE4Dlong.endRound(CAE4Ddatasets.EventReturns)(_eventData_)
_eventData_(CAE4Ddatasets.EventReturns) := TMP_77(CAE4Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_78(uint256) = INTERNAL_CALL, CAE4Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_78(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_79(bool) = _eth > 0
CONDITION TMP_79"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_78(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_79(address) -> REF_78.addr
Transfer dest:REF_79 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_81(uint256) -> _eventData_.compressedData
REF_82(uint256) -> _eventData_.compressedData
TMP_81(uint256) = _now * 1000000000000000000
TMP_82(uint256) = REF_82 + TMP_81
REF_81(uint256) (->_eventData_) := TMP_82(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_83(uint256) -> _eventData_.compressedIDs
REF_84(uint256) -> _eventData_.compressedIDs
TMP_83(uint256) = REF_84 + _pID
REF_83(uint256) (->_eventData_) := TMP_83(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
CAE4Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_86(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_87(bytes32) -> REF_86.name
REF_88(uint256) -> _eventData_.compressedData
REF_89(uint256) -> _eventData_.compressedIDs
REF_90(address) -> _eventData_.winnerAddr
REF_91(bytes32) -> _eventData_.winnerName
REF_92(uint256) -> _eventData_.amountWon
REF_93(uint256) -> _eventData_.newPot
REF_94(uint256) -> _eventData_.P3DAmount
REF_95(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_87,_eth,REF_88,REF_89,REF_90,REF_91,REF_92,REF_93,REF_94,REF_95)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_85(uint256) = INTERNAL_CALL, CAE4Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_85(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_86(bool) = _eth > 0
CONDITION TMP_86"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_96(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_97(address) -> REF_96.addr
Transfer dest:REF_97 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
CAE4Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_100(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_101(bytes32) -> REF_100.name
Emit onWithdraw(_pID,msg.sender,REF_101,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, CAE4Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CAE4Dlong.isHuman()()"];
23->1;
}
// Function: 1068.sol-CAE4Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_669(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_670(uint256) -> REF_669.lrnd
INTERNAL_CALL, CAE4Dlong.updateGenVault(uint256,uint256)(_pID,REF_670)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_671(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_672(uint256) -> REF_671.win
REF_674(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_675(uint256) -> REF_674.gen
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_672', 'REF_675'] 
REF_677(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_678(uint256) -> REF_677.aff
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_404', 'REF_678'] 
_earnings(uint256) := TMP_405(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_406(bool) = _earnings > 0
CONDITION TMP_406"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_679(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_680(uint256) -> REF_679.win
REF_680(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_681(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_682(uint256) -> REF_681.gen
REF_682(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_683(CAE4Ddatasets.Player) -> plyr_[_pID]
REF_684(uint256) -> REF_683.aff
REF_684(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1068.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 1068.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 1068.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 1068.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 1068.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 1068.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 1068.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_435 = CONVERT _input to bytes
_temp(bytes) := TMP_435(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_705 -> LENGTH _temp
_length(uint256) := REF_705(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_436(bool) = _length <= 32
TMP_437(bool) = _length > 0
TMP_438(bool) = TMP_436 && TMP_437
TMP_439(None) = SOLIDITY_CALL require(bool,string)(TMP_438,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_706(None) -> _temp[0]
TMP_440(bool) = REF_706 != 32
TMP_441(uint256) = _length - 1
REF_707(None) -> _temp[TMP_441]
TMP_442(bool) = REF_707 != 32
TMP_443(bool) = TMP_440 && TMP_442
TMP_444(None) = SOLIDITY_CALL require(bool,string)(TMP_443,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_708(None) -> _temp[0]
TMP_445(bool) = REF_708 == 48
CONDITION TMP_445"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_709(None) -> _temp[1]
TMP_446(bool) = REF_709 != 120
TMP_447(None) = SOLIDITY_CALL require(bool,string)(TMP_446,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_710(None) -> _temp[1]
TMP_448(bool) = REF_710 != 88
TMP_449(None) = SOLIDITY_CALL require(bool,string)(TMP_448,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_450(bool) = i < _length
CONDITION TMP_450"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_711(None) -> _temp[i]
TMP_451(bool) = REF_711 > 64
REF_712(None) -> _temp[i]
TMP_452(bool) = REF_712 < 91
TMP_453(bool) = TMP_451 && TMP_452
CONDITION TMP_453"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_713(bytes1) -> _temp[i]
REF_714(None) -> _temp[i]
TMP_454 = CONVERT REF_714 to uint256
TMP_455(uint256) = TMP_454 + 32
TMP_456 = CONVERT TMP_455 to bytes1
REF_713(bytes1) (->_temp) := TMP_456(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_457(bool) = _hasNonNumber == False
CONDITION TMP_457"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_715(None) -> _temp[i]
TMP_458(bool) = REF_715 == 32
REF_716(None) -> _temp[i]
TMP_459(bool) = REF_716 > 96
REF_717(None) -> _temp[i]
TMP_460(bool) = REF_717 < 123
TMP_461(bool) = TMP_459 && TMP_460
TMP_462(bool) = TMP_458 || TMP_461
REF_718(None) -> _temp[i]
TMP_463(bool) = REF_718 > 47
REF_719(None) -> _temp[i]
TMP_464(bool) = REF_719 < 58
TMP_465(bool) = TMP_463 && TMP_464
TMP_466(bool) = TMP_462 || TMP_465
TMP_467(None) = SOLIDITY_CALL require(bool,string)(TMP_466,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_720(None) -> _temp[i]
TMP_468(bool) = REF_720 == 32
CONDITION TMP_468"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_469(uint256) = i + 1
REF_721(None) -> _temp[TMP_469]
TMP_470(bool) = REF_721 != 32
TMP_471(None) = SOLIDITY_CALL require(bool,string)(TMP_470,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_472(bool) = _hasNonNumber == False
REF_722(None) -> _temp[i]
TMP_473(bool) = REF_722 < 48
REF_723(None) -> _temp[i]
TMP_474(bool) = REF_723 > 57
TMP_475(bool) = TMP_473 || TMP_474
TMP_476(bool) = TMP_472 && TMP_475
CONDITION TMP_476"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_477(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_478(bool) = _hasNonNumber == True
TMP_479(None) = SOLIDITY_CALL require(bool,string)(TMP_478,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1068.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1068.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1068.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1068.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1068.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1068.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1068.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1068.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1068.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_489(uint256) = a + b
c(uint256) := TMP_489(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_490(bool) = c >= a
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1068.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_485(uint256) = a / b
c(uint256) := TMP_485(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1068.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_480(bool) = a == 0
CONDITION TMP_480"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_481(uint256) = a * b
c(uint256) := TMP_481(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_482(uint256) = c / a
TMP_483(bool) = TMP_482 == b
TMP_484(None) = SOLIDITY_CALL require(bool,string)(TMP_483,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1068.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_499(bool) = x == 0
CONDITION TMP_499"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_500(bool) = y == 0
CONDITION TMP_500"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_501(bool) = i < y
CONDITION TMP_501"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_502(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_502(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_503(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1068.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_498(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_498"];
}
// Function: 1068.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_492(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_493(uint256) = TMP_492 / 2
z(uint256) := TMP_493(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_494(bool) = z < y
CONDITION TMP_494"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_495(uint256) = x / z
TMP_496(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_495,z)
TMP_497(uint256) = TMP_496 / 2
z(uint256) := TMP_497(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1068.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_486(bool) = b <= a
TMP_487(None) = SOLIDITY_CALL require(bool,string)(TMP_486,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_488(uint256) = a - b
RETURN TMP_488"];
}
// Function: 1068.sol-UintCompressor-exponent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((10).pwr(_position))

IRs:
TMP_540(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.pwr(uint256,uint256), arguments:['10', '_position'] 
RETURN TMP_540"];
}
// Function: 1068.sol-UintCompressor-extract(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_525(bool) = _end < 77
TMP_526(bool) = _start < 77
TMP_527(bool) = TMP_525 && TMP_526
TMP_528(None) = SOLIDITY_CALL require(bool,string)(TMP_527,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_529(bool) = _end >= _start
TMP_530(None) = SOLIDITY_CALL require(bool,string)(TMP_529,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_531(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_532(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_531', '10'] 
_end(uint256) := TMP_532(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_533(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_533(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start)

IRs:
TMP_534(uint256) = _input / _start
TMP_535(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_534', '_start'] 
TMP_536(uint256) = _input / _end
TMP_537(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_536', '_end'] 
TMP_538(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_535', 'TMP_537'] 
TMP_539(uint256) = TMP_538 / _start
RETURN TMP_539"];
}
// Function: 1068.sol-UintCompressor-insert(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_504(bool) = _end < 77
TMP_505(bool) = _start < 77
TMP_506(bool) = TMP_504 && TMP_505
TMP_507(None) = SOLIDITY_CALL require(bool,string)(TMP_506,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_508(bool) = _end >= _start
TMP_509(None) = SOLIDITY_CALL require(bool,string)(TMP_508,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_510(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_511(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_510', '10'] 
_end(uint256) := TMP_511(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_512(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_512(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_include < (_end / _start))

IRs:
TMP_513(uint256) = _end / _start
TMP_514(bool) = _include < TMP_513
TMP_515(None) = SOLIDITY_CALL require(bool)(TMP_514)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_include > 0

IRs:
TMP_516(bool) = _include > 0
CONDITION TMP_516"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_include = _include.mul(_start)

IRs:
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_include', '_start'] 
_include(uint256) := TMP_517(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)))

IRs:
TMP_518(uint256) = _var / _start
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_518', '_start'] 
TMP_520(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_var', 'TMP_519'] 
TMP_521(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_520', '_include'] 
TMP_522(uint256) = _var / _end
TMP_523(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_522', '_end'] 
TMP_524(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_521', 'TMP_523'] 
RETURN TMP_524"];
}
}
