digraph G {
// Function: 1123.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_82'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_84'] 
TMP_86(uint256) = TMP_85 / 2
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_83', 'TMP_86'] 
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_89(uint256) = TMP_87 / TMP_88
RETURN TMP_89"];
}
// Function: 1123.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_72(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_74(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_73)
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_72', 'TMP_74'] 
RETURN TMP_75"];
}
// Function: 1123.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_76', '312500000000000000000000000'] 
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_77', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_78'] 
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_79', '74999921875000000000000000000000'] 
TMP_81(uint256) = TMP_80 / 156250000
RETURN TMP_81"];
}
// Function: 1123.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_69(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_68)
TMP_70(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_69', 'TMP_70'] 
RETURN TMP_71"];
}
// Function: 1123.sol-FoMo3DFast-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_613(bool) = msg.sender == admin
TMP_614(None) = SOLIDITY_CALL require(bool,string)(TMP_613,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_615(bool) = activated_ == False
TMP_616(None) = SOLIDITY_CALL require(bool,string)(TMP_615,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_907(F3Ddatasets.Round) -> round_[1]
REF_908(uint256) -> REF_907.strt
TMP_617(uint256) = now + rndExtra_
TMP_618(uint256) = TMP_617 - rndGap_
REF_908(uint256) (->round_) := TMP_618(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_909(F3Ddatasets.Round) -> round_[1]
REF_910(uint256) -> REF_909.end
TMP_619(uint256) = now + rndInit_
TMP_620(uint256) = TMP_619 + rndExtra_
REF_910(uint256) (->round_) := TMP_620(uint256)"];
}
// Function: 1123.sol-FoMo3DFast-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_522(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_523(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_524(bytes32) = SOLIDITY_CALL keccak256()(TMP_523)
TMP_525 = CONVERT TMP_524 to uint256
TMP_526(uint256) = TMP_525 / now
TMP_527(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_522', 'TMP_526'] 
TMP_528(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_527', 'block.gaslimit'] 
TMP_529(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_530(bytes32) = SOLIDITY_CALL keccak256()(TMP_529)
TMP_531 = CONVERT TMP_530 to uint256
TMP_532(uint256) = TMP_531 / now
TMP_533(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_528', 'TMP_532'] 
TMP_534(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_533', 'block.number'] 
TMP_535(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_534)
TMP_536(bytes32) = SOLIDITY_CALL keccak256()(TMP_535)
TMP_537 = CONVERT TMP_536 to uint256
seed(uint256) := TMP_537(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_538(uint256) = seed / 1000
TMP_539(uint256) = TMP_538 * 1000
TMP_540(uint256) = seed - TMP_539
TMP_541(bool) = TMP_540 < airDropTracker_
CONDITION TMP_541"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1123.sol-FoMo3DFast-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_309(F3Ddatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.strt
TMP_257(uint256) = REF_310 + rndGap_
TMP_258(bool) = _now > TMP_257
REF_311(F3Ddatasets.Round) -> round_[_rID]
REF_312(uint256) -> REF_311.end
TMP_259(bool) = _now <= REF_312
REF_313(F3Ddatasets.Round) -> round_[_rID]
REF_314(uint256) -> REF_313.end
TMP_260(bool) = _now > REF_314
REF_315(F3Ddatasets.Round) -> round_[_rID]
REF_316(uint256) -> REF_315.plyr
TMP_261(bool) = REF_316 == 0
TMP_262(bool) = TMP_260 && TMP_261
TMP_263(bool) = TMP_259 || TMP_262
TMP_264(bool) = TMP_258 && TMP_263
CONDITION TMP_264"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_317(F3Ddatasets.Round) -> round_[_rID]
REF_318(uint256) -> REF_317.end
TMP_266(bool) = _now > REF_318
REF_319(F3Ddatasets.Round) -> round_[_rID]
REF_320(bool) -> REF_319.ended
TMP_267(bool) = REF_320 == False
TMP_268(bool) = TMP_266 && TMP_267
CONDITION TMP_268"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_321(F3Ddatasets.Round) -> round_[_rID]
REF_322(bool) -> REF_321.ended
REF_322(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_269(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_269(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_323(uint256) -> _eventData_.compressedData
REF_324(uint256) -> _eventData_.compressedData
TMP_270(uint256) = _now * 1000000000000000000
TMP_271(uint256) = REF_324 + TMP_270
REF_323(uint256) (->_eventData_) := TMP_271(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_325(uint256) -> _eventData_.compressedIDs
REF_326(uint256) -> _eventData_.compressedIDs
TMP_272(uint256) = REF_326 + _pID
REF_325(uint256) (->_eventData_) := TMP_272(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_328(F3Ddatasets.Player) -> plyr_[_pID]
REF_329(bytes32) -> REF_328.name
REF_330(uint256) -> _eventData_.compressedData
REF_331(uint256) -> _eventData_.compressedIDs
REF_332(address) -> _eventData_.winnerAddr
REF_333(bytes32) -> _eventData_.winnerName
REF_334(uint256) -> _eventData_.amountWon
REF_335(uint256) -> _eventData_.newPot
REF_336(uint256) -> _eventData_.P3DAmount
REF_337(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_329,msg.value,REF_330,REF_331,REF_332,REF_333,REF_334,REF_335,REF_336,REF_337)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_338(F3Ddatasets.Player) -> plyr_[_pID]
REF_339(uint256) -> REF_338.gen
REF_340(F3Ddatasets.Player) -> plyr_[_pID]
REF_341(uint256) -> REF_340.gen
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_341', 'msg.value'] 
REF_339(uint256) (->plyr_) := TMP_274(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1123.sol-FoMo3DFast-buyCoreQR(address,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_343(F3Ddatasets.Round) -> round_[_rID]
REF_344(uint256) -> REF_343.strt
TMP_275(uint256) = REF_344 + rndGap_
TMP_276(bool) = _now > TMP_275
REF_345(F3Ddatasets.Round) -> round_[_rID]
REF_346(uint256) -> REF_345.end
TMP_277(bool) = _now <= REF_346
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.end
TMP_278(bool) = _now > REF_348
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.plyr
TMP_279(bool) = REF_350 == 0
TMP_280(bool) = TMP_278 && TMP_279
TMP_281(bool) = TMP_277 || TMP_280
TMP_282(bool) = TMP_276 && TMP_281
CONDITION TMP_282"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
coreQR(_realSender,_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.coreQR(address,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_realSender,_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_351(F3Ddatasets.Round) -> round_[_rID]
REF_352(uint256) -> REF_351.end
TMP_284(bool) = _now > REF_352
REF_353(F3Ddatasets.Round) -> round_[_rID]
REF_354(bool) -> REF_353.ended
TMP_285(bool) = REF_354 == False
TMP_286(bool) = TMP_284 && TMP_285
CONDITION TMP_286"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_355(F3Ddatasets.Round) -> round_[_rID]
REF_356(bool) -> REF_355.ended
REF_356(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_287(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_287(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_357(uint256) -> _eventData_.compressedData
REF_358(uint256) -> _eventData_.compressedData
TMP_288(uint256) = _now * 1000000000000000000
TMP_289(uint256) = REF_358 + TMP_288
REF_357(uint256) (->_eventData_) := TMP_289(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_359(uint256) -> _eventData_.compressedIDs
REF_360(uint256) -> _eventData_.compressedIDs
TMP_290(uint256) = REF_360 + _pID
REF_359(uint256) (->_eventData_) := TMP_290(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(_realSender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_362(F3Ddatasets.Player) -> plyr_[_pID]
REF_363(bytes32) -> REF_362.name
REF_364(uint256) -> _eventData_.compressedData
REF_365(uint256) -> _eventData_.compressedIDs
REF_366(address) -> _eventData_.winnerAddr
REF_367(bytes32) -> _eventData_.winnerName
REF_368(uint256) -> _eventData_.amountWon
REF_369(uint256) -> _eventData_.newPot
REF_370(uint256) -> _eventData_.P3DAmount
REF_371(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(_realSender,REF_363,msg.value,REF_364,REF_365,REF_366,REF_367,REF_368,REF_369,REF_370,REF_371)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_372(F3Ddatasets.Player) -> plyr_[_pID]
REF_373(uint256) -> REF_372.gen
REF_374(F3Ddatasets.Player) -> plyr_[_pID]
REF_375(uint256) -> REF_374.gen
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_375', 'msg.value'] 
REF_373(uint256) (->plyr_) := TMP_292(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1123.sol-FoMo3DFast-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_113(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_113(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_60(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_60(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _affCode == TMP_114
TMP_116(bool) = _affCode == msg.sender
TMP_117(bool) = TMP_115 || TMP_116
CONDITION TMP_117"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
_affID(uint256) := REF_62(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_63(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_63(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_64(F3Ddatasets.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.laff
TMP_118(bool) = _affID != REF_65
CONDITION TMP_118"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
REF_67(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_119(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_119(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1123.sol-FoMo3DFast-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_103(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_103(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_104(bool) = _affCode == 0
TMP_105(bool) = _affCode == _pID
TMP_106(bool) = TMP_104 || TMP_105
CONDITION TMP_106"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_54(F3Ddatasets.Player) -> plyr_[_pID]
REF_55(uint256) -> REF_54.laff
_affCode(uint256) := REF_55(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
TMP_107(bool) = _affCode != REF_57
CONDITION TMP_107"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
REF_59(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_108(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_108(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 1123.sol-FoMo3DFast-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_124(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_124(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_68(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_68(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_125(bool) = _affCode == 
REF_69(F3Ddatasets.Player) -> plyr_[_pID]
REF_70(bytes32) -> REF_69.name
TMP_126(bool) = _affCode == REF_70
TMP_127(bool) = TMP_125 || TMP_126
CONDITION TMP_127"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
_affID(uint256) := REF_72(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_73(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_73(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
TMP_128(bool) = _affID != REF_75
CONDITION TMP_128"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
REF_77(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_129(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_129(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1123.sol-FoMo3DFast-buyXnameQR(address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePIDQR(_realSender,_eventData_)

IRs:
TMP_134(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePIDQR(address,F3Ddatasets.EventReturns)(_realSender,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_134(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_realSender]

IRs:
REF_78(uint256) -> pIDxAddr_[_realSender]
_pID(uint256) := REF_78(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_135(bool) = _affCode == 
REF_79(F3Ddatasets.Player) -> plyr_[_pID]
REF_80(bytes32) -> REF_79.name
TMP_136(bool) = _affCode == REF_80
TMP_137(bool) = TMP_135 || TMP_136
CONDITION TMP_137"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
_affID(uint256) := REF_82(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_83(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_83(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_84(F3Ddatasets.Player) -> plyr_[_pID]
REF_85(uint256) -> REF_84.laff
TMP_138(bool) = _affID != REF_85
CONDITION TMP_138"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.laff
REF_87(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_139(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_139(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCoreQR(_realSender,_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCoreQR(address,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_realSender,_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 1123.sol-FoMo3DFast-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_597(F3Ddatasets.Round) -> round_[_rID]
REF_598(uint256) -> REF_597.strt
TMP_415(uint256) = REF_598 + rndGap_
TMP_416(bool) = _now > TMP_415
REF_599(F3Ddatasets.Round) -> round_[_rID]
REF_600(uint256) -> REF_599.end
TMP_417(bool) = _now <= REF_600
REF_601(F3Ddatasets.Round) -> round_[_rID]
REF_602(uint256) -> REF_601.end
TMP_418(bool) = _now > REF_602
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(uint256) -> REF_603.plyr
TMP_419(bool) = REF_604 == 0
TMP_420(bool) = TMP_418 && TMP_419
TMP_421(bool) = TMP_417 || TMP_420
TMP_422(bool) = TMP_416 && TMP_421
CONDITION TMP_422"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_605(F3Ddatasets.Round) -> round_[_rID]
REF_606(uint256) -> REF_605.eth
TMP_423(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_606', '_eth'] 
RETURN TMP_423"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_424(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_424"];
}
// Function: 1123.sol-FoMo3DFast-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_587(F3Ddatasets.Round) -> round_[_rIDlast]
REF_588(uint256) -> REF_587.mask
REF_590(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_591(F3Ddatasets.PlayerRounds) -> REF_590[_rIDlast]
REF_592(uint256) -> REF_591.keys
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_588', 'REF_592'] 
TMP_413(uint256) = TMP_412 / 1000000000000000000
REF_594(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_595(F3Ddatasets.PlayerRounds) -> REF_594[_rIDlast]
REF_596(uint256) -> REF_595.mask
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_413', 'REF_596'] 
RETURN TMP_414"];
}
// Function: 1123.sol-FoMo3DFast-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_34(F3Ddatasets.TeamFee) -> fees_[0]
TMP_90(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_34(F3Ddatasets.TeamFee) (->fees_) := TMP_90(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_36(F3Ddatasets.TeamFee) -> fees_[1]
TMP_91(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_36(F3Ddatasets.TeamFee) (->fees_) := TMP_91(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_38(F3Ddatasets.TeamFee) -> fees_[2]
TMP_92(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_38(F3Ddatasets.TeamFee) (->fees_) := TMP_92(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_40(F3Ddatasets.TeamFee) -> fees_[3]
TMP_93(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_40(F3Ddatasets.TeamFee) (->fees_) := TMP_93(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_42(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_94(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_42(F3Ddatasets.PotSplit) (->potSplit_) := TMP_94(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_44(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_95(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_44(F3Ddatasets.PotSplit) (->potSplit_) := TMP_95(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_46(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_96(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_46(F3Ddatasets.PotSplit) (->potSplit_) := TMP_96(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_48(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_97(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_48(F3Ddatasets.PotSplit) (->potSplit_) := TMP_97(F3Ddatasets.PotSplit)"];
}
// Function: 1123.sol-FoMo3DFast-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_409(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_410(F3Ddatasets.PlayerRounds) -> REF_409[_rID]
REF_411(uint256) -> REF_410.keys
TMP_312(bool) = REF_411 == 0
CONDITION TMP_312"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_313(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_313(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 400000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 4000000000000000000

IRs:
REF_412(F3Ddatasets.Round) -> round_[_rID]
REF_413(uint256) -> REF_412.eth
TMP_314(bool) = REF_413 < 400000000000000000000
REF_414(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_415(F3Ddatasets.PlayerRounds) -> REF_414[_rID]
REF_416(uint256) -> REF_415.eth
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_416', '_eth'] 
TMP_316(bool) = TMP_315 > 4000000000000000000
TMP_317(bool) = TMP_314 && TMP_316
CONDITION TMP_317"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (4000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_419(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_420(F3Ddatasets.PlayerRounds) -> REF_419[_rID]
REF_421(uint256) -> REF_420.eth
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['4000000000000000000', 'REF_421'] 
_availableLimit(uint256) := TMP_318(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_319(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_423(F3Ddatasets.Player) -> plyr_[_pID]
REF_424(uint256) -> REF_423.gen
REF_425(F3Ddatasets.Player) -> plyr_[_pID]
REF_426(uint256) -> REF_425.gen
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_426', '_refund'] 
REF_424(uint256) (->plyr_) := TMP_320(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_321(bool) = _eth > 1000000000
CONDITION TMP_321"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_428(F3Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.eth
TMP_322(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_429', '_eth'] 
_keys(uint256) := TMP_322(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_323(bool) = _keys >= 1000000000000000000
CONDITION TMP_323"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DFast.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_431(F3Ddatasets.Round) -> round_[_rID]
REF_432(uint256) -> REF_431.plyr
TMP_325(bool) = REF_432 != _pID
CONDITION TMP_325"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_433(F3Ddatasets.Round) -> round_[_rID]
REF_434(uint256) -> REF_433.plyr
REF_434(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_435(F3Ddatasets.Round) -> round_[_rID]
REF_436(uint256) -> REF_435.team
TMP_326(bool) = REF_436 != _team
CONDITION TMP_326"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_437(F3Ddatasets.Round) -> round_[_rID]
REF_438(uint256) -> REF_437.team
REF_438(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_439(uint256) -> _eventData_.compressedData
REF_440(uint256) -> _eventData_.compressedData
TMP_327(uint256) = REF_440 + 100
REF_439(uint256) (->_eventData_) := TMP_327(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_328(bool) = _eth >= 100000000000000000
CONDITION TMP_328"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_329(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_330(bool) = INTERNAL_CALL, FoMo3DFast.airdrop()()
TMP_331(bool) = TMP_330 == True
CONDITION TMP_331"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_332(bool) = _eth >= 10000000000000000000
CONDITION TMP_332"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_334(uint256) = TMP_333 / 100
_prize(uint256) := TMP_334(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_442(F3Ddatasets.Player) -> plyr_[_pID]
REF_443(uint256) -> REF_442.win
REF_444(F3Ddatasets.Player) -> plyr_[_pID]
REF_445(uint256) -> REF_444.win
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_445', '_prize'] 
REF_443(uint256) (->plyr_) := TMP_335(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_336(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_448(uint256) -> _eventData_.compressedData
REF_448(-> _eventData_) = REF_448 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_337(bool) = _eth >= 1000000000000000000
TMP_338(bool) = _eth < 10000000000000000000
TMP_339(bool) = TMP_337 && TMP_338
CONDITION TMP_339"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_341(uint256) = TMP_340 / 100
_prize(uint256) := TMP_341(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_450(F3Ddatasets.Player) -> plyr_[_pID]
REF_451(uint256) -> REF_450.win
REF_452(F3Ddatasets.Player) -> plyr_[_pID]
REF_453(uint256) -> REF_452.win
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_453', '_prize'] 
REF_451(uint256) (->plyr_) := TMP_342(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_343(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_456(uint256) -> _eventData_.compressedData
REF_456(-> _eventData_) = REF_456 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_344(bool) = _eth >= 100000000000000000
TMP_345(bool) = _eth < 1000000000000000000
TMP_346(bool) = TMP_344 && TMP_345
CONDITION TMP_346"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_348(uint256) = TMP_347 / 100
_prize(uint256) := TMP_348(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_458(F3Ddatasets.Player) -> plyr_[_pID]
REF_459(uint256) -> REF_458.win
REF_460(F3Ddatasets.Player) -> plyr_[_pID]
REF_461(uint256) -> REF_460.win
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_461', '_prize'] 
REF_459(uint256) (->plyr_) := TMP_349(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_350(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_464(uint256) -> _eventData_.compressedData
REF_464(-> _eventData_) = REF_464 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_465(uint256) -> _eventData_.compressedData
REF_465(-> _eventData_) = REF_465 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_466(uint256) -> _eventData_.compressedData
TMP_351(uint256) = _prize * 1000000000000000000000000000000000
REF_466(-> _eventData_) = REF_466 + TMP_351"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_467(uint256) -> _eventData_.compressedData
REF_468(uint256) -> _eventData_.compressedData
TMP_352(uint256) = airDropTracker_ * 1000
TMP_353(uint256) = REF_468 + TMP_352
REF_467(uint256) (->_eventData_) := TMP_353(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_469(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_470(F3Ddatasets.PlayerRounds) -> REF_469[_rID]
REF_471(uint256) -> REF_470.keys
REF_473(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_474(F3Ddatasets.PlayerRounds) -> REF_473[_rID]
REF_475(uint256) -> REF_474.keys
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_475'] 
REF_471(uint256) (->plyrRnds_) := TMP_354(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_476(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_477(F3Ddatasets.PlayerRounds) -> REF_476[_rID]
REF_478(uint256) -> REF_477.eth
REF_480(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_481(F3Ddatasets.PlayerRounds) -> REF_480[_rID]
REF_482(uint256) -> REF_481.eth
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_482'] 
REF_478(uint256) (->plyrRnds_) := TMP_355(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_483(F3Ddatasets.Round) -> round_[_rID]
REF_484(uint256) -> REF_483.keys
REF_486(F3Ddatasets.Round) -> round_[_rID]
REF_487(uint256) -> REF_486.keys
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_487'] 
REF_484(uint256) (->round_) := TMP_356(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_488(F3Ddatasets.Round) -> round_[_rID]
REF_489(uint256) -> REF_488.eth
REF_491(F3Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.eth
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_492'] 
REF_489(uint256) (->round_) := TMP_357(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_493(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_494(uint256) -> REF_493[_team]
REF_496(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_497(uint256) -> REF_496[_team]
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_497'] 
REF_494(uint256) (->rndTmEth_) := TMP_358(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_359(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_359(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_360(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_360(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 1123.sol-FoMo3DFast-coreQR(address,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_498(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_499(F3Ddatasets.PlayerRounds) -> REF_498[_rID]
REF_500(uint256) -> REF_499.keys
TMP_362(bool) = REF_500 == 0
CONDITION TMP_362"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_363(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_363(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 400000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 4000000000000000000

IRs:
REF_501(F3Ddatasets.Round) -> round_[_rID]
REF_502(uint256) -> REF_501.eth
TMP_364(bool) = REF_502 < 400000000000000000000
REF_503(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_504(F3Ddatasets.PlayerRounds) -> REF_503[_rID]
REF_505(uint256) -> REF_504.eth
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_505', '_eth'] 
TMP_366(bool) = TMP_365 > 4000000000000000000
TMP_367(bool) = TMP_364 && TMP_366
CONDITION TMP_367"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (4000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_508(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_509(F3Ddatasets.PlayerRounds) -> REF_508[_rID]
REF_510(uint256) -> REF_509.eth
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['4000000000000000000', 'REF_510'] 
_availableLimit(uint256) := TMP_368(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_369(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_512(F3Ddatasets.Player) -> plyr_[_pID]
REF_513(uint256) -> REF_512.gen
REF_514(F3Ddatasets.Player) -> plyr_[_pID]
REF_515(uint256) -> REF_514.gen
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_515', '_refund'] 
REF_513(uint256) (->plyr_) := TMP_370(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_371(bool) = _eth > 1000000000
CONDITION TMP_371"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_517(F3Ddatasets.Round) -> round_[_rID]
REF_518(uint256) -> REF_517.eth
TMP_372(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_518', '_eth'] 
_keys(uint256) := TMP_372(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_373(bool) = _keys >= 1000000000000000000
CONDITION TMP_373"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DFast.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_520(F3Ddatasets.Round) -> round_[_rID]
REF_521(uint256) -> REF_520.plyr
TMP_375(bool) = REF_521 != _pID
CONDITION TMP_375"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_522(F3Ddatasets.Round) -> round_[_rID]
REF_523(uint256) -> REF_522.plyr
REF_523(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_524(F3Ddatasets.Round) -> round_[_rID]
REF_525(uint256) -> REF_524.team
TMP_376(bool) = REF_525 != _team
CONDITION TMP_376"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_526(F3Ddatasets.Round) -> round_[_rID]
REF_527(uint256) -> REF_526.team
REF_527(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_528(uint256) -> _eventData_.compressedData
REF_529(uint256) -> _eventData_.compressedData
TMP_377(uint256) = REF_529 + 100
REF_528(uint256) (->_eventData_) := TMP_377(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_378(bool) = _eth >= 100000000000000000
CONDITION TMP_378"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_379(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_380(bool) = INTERNAL_CALL, FoMo3DFast.airdrop()()
TMP_381(bool) = TMP_380 == True
CONDITION TMP_381"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_382(bool) = _eth >= 10000000000000000000
CONDITION TMP_382"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_384(uint256) = TMP_383 / 100
_prize(uint256) := TMP_384(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_531(F3Ddatasets.Player) -> plyr_[_pID]
REF_532(uint256) -> REF_531.win
REF_533(F3Ddatasets.Player) -> plyr_[_pID]
REF_534(uint256) -> REF_533.win
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_534', '_prize'] 
REF_532(uint256) (->plyr_) := TMP_385(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_386(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_537(uint256) -> _eventData_.compressedData
REF_537(-> _eventData_) = REF_537 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_387(bool) = _eth >= 1000000000000000000
TMP_388(bool) = _eth < 10000000000000000000
TMP_389(bool) = TMP_387 && TMP_388
CONDITION TMP_389"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_391(uint256) = TMP_390 / 100
_prize(uint256) := TMP_391(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_539(F3Ddatasets.Player) -> plyr_[_pID]
REF_540(uint256) -> REF_539.win
REF_541(F3Ddatasets.Player) -> plyr_[_pID]
REF_542(uint256) -> REF_541.win
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_542', '_prize'] 
REF_540(uint256) (->plyr_) := TMP_392(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_393(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_545(uint256) -> _eventData_.compressedData
REF_545(-> _eventData_) = REF_545 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_394(bool) = _eth >= 100000000000000000
TMP_395(bool) = _eth < 1000000000000000000
TMP_396(bool) = TMP_394 && TMP_395
CONDITION TMP_396"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_398(uint256) = TMP_397 / 100
_prize(uint256) := TMP_398(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_547(F3Ddatasets.Player) -> plyr_[_pID]
REF_548(uint256) -> REF_547.win
REF_549(F3Ddatasets.Player) -> plyr_[_pID]
REF_550(uint256) -> REF_549.win
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_550', '_prize'] 
REF_548(uint256) (->plyr_) := TMP_399(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_400(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_553(uint256) -> _eventData_.compressedData
REF_553(-> _eventData_) = REF_553 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_554(uint256) -> _eventData_.compressedData
REF_554(-> _eventData_) = REF_554 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_555(uint256) -> _eventData_.compressedData
TMP_401(uint256) = _prize * 1000000000000000000000000000000000
REF_555(-> _eventData_) = REF_555 + TMP_401"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_556(uint256) -> _eventData_.compressedData
REF_557(uint256) -> _eventData_.compressedData
TMP_402(uint256) = airDropTracker_ * 1000
TMP_403(uint256) = REF_557 + TMP_402
REF_556(uint256) (->_eventData_) := TMP_403(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_558(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_559(F3Ddatasets.PlayerRounds) -> REF_558[_rID]
REF_560(uint256) -> REF_559.keys
REF_562(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_563(F3Ddatasets.PlayerRounds) -> REF_562[_rID]
REF_564(uint256) -> REF_563.keys
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_564'] 
REF_560(uint256) (->plyrRnds_) := TMP_404(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_565(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_566(F3Ddatasets.PlayerRounds) -> REF_565[_rID]
REF_567(uint256) -> REF_566.eth
REF_569(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_570(F3Ddatasets.PlayerRounds) -> REF_569[_rID]
REF_571(uint256) -> REF_570.eth
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_571'] 
REF_567(uint256) (->plyrRnds_) := TMP_405(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_572(F3Ddatasets.Round) -> round_[_rID]
REF_573(uint256) -> REF_572.keys
REF_575(F3Ddatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.keys
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_576'] 
REF_573(uint256) (->round_) := TMP_406(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_577(F3Ddatasets.Round) -> round_[_rID]
REF_578(uint256) -> REF_577.eth
REF_580(F3Ddatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.eth
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_581'] 
REF_578(uint256) (->round_) := TMP_407(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_582(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_583(uint256) -> REF_582[_team]
REF_585(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_586(uint256) -> REF_585[_team]
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_586'] 
REF_583(uint256) (->rndTmEth_) := TMP_408(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_409(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_409(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_410(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_410(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTxQR(_realSender,_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.endTxQR(address,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_realSender,_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 1123.sol-FoMo3DFast-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_646(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_646(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_449(bool) = _pID == 0
CONDITION TMP_449"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_450(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_450(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_451(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_451(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_452(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_452(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_650(uint256) -> pIDxAddr_[msg.sender]
REF_650(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_651(F3Ddatasets.Player) -> plyr_[_pID]
REF_652(address) -> REF_651.addr
REF_652(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_453(bool) = _name != 
CONDITION TMP_453"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_653(uint256) -> pIDxName_[_name]
REF_653(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_654(F3Ddatasets.Player) -> plyr_[_pID]
REF_655(bytes32) -> REF_654.name
REF_655(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_656(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_657(bool) -> REF_656[_name]
REF_657(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_454(bool) = _laff != 0
TMP_455(bool) = _laff != _pID
TMP_456(bool) = TMP_454 && TMP_455
CONDITION TMP_456"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_658(F3Ddatasets.Player) -> plyr_[_pID]
REF_659(uint256) -> REF_658.laff
REF_659(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_660(uint256) -> _eventData_.compressedData
REF_661(uint256) -> _eventData_.compressedData
TMP_457(uint256) = REF_661 + 1
REF_660(uint256) (->_eventData_) := TMP_457(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1123.sol-FoMo3DFast-determinePIDQR(address,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[_realSender]

IRs:
REF_662(uint256) -> pIDxAddr_[_realSender]
_pID(uint256) := REF_662(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_458(bool) = _pID == 0
CONDITION TMP_458"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(_realSender)

IRs:
TMP_459(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['_realSender']  
_pID(uint256) := TMP_459(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_460(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_460(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_461(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_461(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[_realSender] = _pID

IRs:
REF_666(uint256) -> pIDxAddr_[_realSender]
REF_666(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = _realSender

IRs:
REF_667(F3Ddatasets.Player) -> plyr_[_pID]
REF_668(address) -> REF_667.addr
REF_668(address) (->plyr_) := _realSender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_462(bool) = _name != 
CONDITION TMP_462"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_669(uint256) -> pIDxName_[_name]
REF_669(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_670(F3Ddatasets.Player) -> plyr_[_pID]
REF_671(bytes32) -> REF_670.name
REF_671(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_672(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_673(bool) -> REF_672[_name]
REF_673(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_463(bool) = _laff != 0
TMP_464(bool) = _laff != _pID
TMP_465(bool) = TMP_463 && TMP_464
CONDITION TMP_465"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_674(F3Ddatasets.Player) -> plyr_[_pID]
REF_675(uint256) -> REF_674.laff
REF_675(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_676(uint256) -> _eventData_.compressedData
REF_677(uint256) -> _eventData_.compressedData
TMP_466(uint256) = REF_677 + 1
REF_676(uint256) (->_eventData_) := TMP_466(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1123.sol-FoMo3DFast-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_542(uint256) = _eth / 100
_p1(uint256) := TMP_542(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_543(uint256) = _eth / 50
_com(uint256) := TMP_543(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_544(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_544(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_545 = CONVERT admin to address
TMP_547(bool) = LOW_LEVEL_CALL, dest:TMP_545, function:call, arguments:[] value:_com 
TMP_548 = UnaryType.BANG TMP_547 
CONDITION TMP_548"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_549(uint256) = _eth / 10
_aff(uint256) := TMP_549(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_550(bool) = _affID != _pID
REF_787(F3Ddatasets.Player) -> plyr_[_affID]
REF_788(bytes32) -> REF_787.name
TMP_551(bool) = REF_788 != 
TMP_552(bool) = TMP_550 && TMP_551
CONDITION TMP_552"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_789(F3Ddatasets.Player) -> plyr_[_affID]
REF_790(uint256) -> REF_789.aff
REF_792(F3Ddatasets.Player) -> plyr_[_affID]
REF_793(uint256) -> REF_792.aff
TMP_553(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_793'] 
REF_790(uint256) (->plyr_) := TMP_553(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_795(F3Ddatasets.Player) -> plyr_[_affID]
REF_796(address) -> REF_795.addr
REF_797(F3Ddatasets.Player) -> plyr_[_affID]
REF_798(bytes32) -> REF_797.name
Emit onAffiliatePayout(_affID,REF_796,REF_798,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_801(F3Ddatasets.TeamFee) -> fees_[_team]
REF_802(uint256) -> REF_801.p3d
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_802'] 
TMP_556(uint256) = TMP_555 / 100
TMP_557(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_556'] 
_p3d(uint256) := TMP_557(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_558(bool) = _p3d > 0
CONDITION TMP_558"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_p3d)

IRs:
Transfer dest:admin value:_p3d"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_804(uint256) -> _eventData_.P3DAmount
REF_806(uint256) -> _eventData_.P3DAmount
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_806'] 
REF_804(uint256) (->_eventData_) := TMP_560(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1123.sol-FoMo3DFast-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_814(F3Ddatasets.TeamFee) -> fees_[_team]
REF_815(uint256) -> REF_814.gen
TMP_564(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_815'] 
TMP_565(uint256) = TMP_564 / 100
_gen(uint256) := TMP_565(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_566(uint256) = _eth / 100
_air(uint256) := TMP_566(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_567(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_567(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_568(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_569(uint256) = TMP_568 / 100
REF_821(F3Ddatasets.TeamFee) -> fees_[_team]
REF_822(uint256) -> REF_821.p3d
TMP_570(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_822'] 
TMP_571(uint256) = TMP_570 / 100
TMP_572(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_569', 'TMP_571'] 
TMP_573(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_572'] 
_eth(uint256) := TMP_573(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_574(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_574(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_575(uint256) = INTERNAL_CALL, FoMo3DFast.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_575(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_576(bool) = _dust > 0
CONDITION TMP_576"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_577(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_577(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_825(F3Ddatasets.Round) -> round_[_rID]
REF_826(uint256) -> REF_825.pot
TMP_578(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_829(F3Ddatasets.Round) -> round_[_rID]
REF_830(uint256) -> REF_829.pot
TMP_579(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_578', 'REF_830'] 
REF_826(uint256) (->round_) := TMP_579(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_831(uint256) -> _eventData_.genAmount
REF_833(uint256) -> _eventData_.genAmount
TMP_580(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_833'] 
REF_831(uint256) (->_eventData_) := TMP_580(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_834(uint256) -> _eventData_.potAmount
REF_834(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1123.sol-FoMo3DFast-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_686(F3Ddatasets.Round) -> round_[_rID]
REF_687(uint256) -> REF_686.plyr
_winPID(uint256) := REF_687(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_688(F3Ddatasets.Round) -> round_[_rID]
REF_689(uint256) -> REF_688.team
_winTID(uint256) := REF_689(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_690(F3Ddatasets.Round) -> round_[_rID]
REF_691(uint256) -> REF_690.pot
_pot(uint256) := REF_691(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_474(uint256) = TMP_473 / 100
_win(uint256) := TMP_474(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_475(uint256) = _pot / 50
_com(uint256) := TMP_475(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_694(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_695(uint256) -> REF_694.gen
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_695'] 
TMP_477(uint256) = TMP_476 / 100
_gen(uint256) := TMP_477(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_697(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_698(uint256) -> REF_697.p3d
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_698'] 
TMP_479(uint256) = TMP_478 / 100
_p3d(uint256) := TMP_479(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_480', '_com'] 
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_481', '_gen'] 
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_482', '_p3d'] 
_res(uint256) := TMP_483(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_704(F3Ddatasets.Round) -> round_[_rID]
REF_705(uint256) -> REF_704.keys
TMP_485(uint256) = TMP_484 / REF_705
_ppt(uint256) := TMP_485(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_708(F3Ddatasets.Round) -> round_[_rID]
REF_709(uint256) -> REF_708.keys
TMP_486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_709'] 
TMP_487(uint256) = TMP_486 / 1000000000000000000
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_487'] 
_dust(uint256) := TMP_488(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_489(bool) = _dust > 0
CONDITION TMP_489"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_490(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_490(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_491(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_712(F3Ddatasets.Player) -> plyr_[_winPID]
REF_713(uint256) -> REF_712.win
REF_715(F3Ddatasets.Player) -> plyr_[_winPID]
REF_716(uint256) -> REF_715.win
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_716'] 
REF_713(uint256) (->plyr_) := TMP_492(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d)

IRs:
Transfer dest:admin value:_p3d"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_719(F3Ddatasets.Round) -> round_[_rID]
REF_720(uint256) -> REF_719.mask
REF_722(F3Ddatasets.Round) -> round_[_rID]
REF_723(uint256) -> REF_722.mask
TMP_495(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_723'] 
REF_720(uint256) (->round_) := TMP_495(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_724(uint256) -> _eventData_.compressedData
REF_725(uint256) -> _eventData_.compressedData
REF_726(F3Ddatasets.Round) -> round_[_rID]
REF_727(uint256) -> REF_726.end
TMP_496(uint256) = REF_727 * 1000000
TMP_497(uint256) = REF_725 + TMP_496
REF_724(uint256) (->_eventData_) := TMP_497(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_728(uint256) -> _eventData_.compressedIDs
REF_729(uint256) -> _eventData_.compressedIDs
TMP_498(uint256) = _winPID * 100000000000000000000000000
TMP_499(uint256) = REF_729 + TMP_498
TMP_500(uint256) = _winTID * 100000000000000000
TMP_501(uint256) = TMP_499 + TMP_500
REF_728(uint256) (->_eventData_) := TMP_501(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_730(address) -> _eventData_.winnerAddr
REF_731(F3Ddatasets.Player) -> plyr_[_winPID]
REF_732(address) -> REF_731.addr
REF_730(address) (->_eventData_) := REF_732(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_733(bytes32) -> _eventData_.winnerName
REF_734(F3Ddatasets.Player) -> plyr_[_winPID]
REF_735(bytes32) -> REF_734.name
REF_733(bytes32) (->_eventData_) := REF_735(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_736(uint256) -> _eventData_.amountWon
REF_736(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_737(uint256) -> _eventData_.genAmount
REF_737(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_738(uint256) -> _eventData_.P3DAmount
REF_738(uint256) (->_eventData_) := _p3d(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_739(uint256) -> _eventData_.newPot
REF_739(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_502(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_503(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_740(F3Ddatasets.Round) -> round_[_rID]
REF_741(uint256) -> REF_740.strt
REF_741(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_742(F3Ddatasets.Round) -> round_[_rID]
REF_743(uint256) -> REF_742.end
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_504', 'rndGap_'] 
REF_743(uint256) (->round_) := TMP_505(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_746(F3Ddatasets.Round) -> round_[_rID]
REF_747(uint256) -> REF_746.pot
REF_747(uint256) (->round_) := _res(uint256)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1123.sol-FoMo3DFast-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_875(uint256) -> _eventData_.compressedData
REF_876(uint256) -> _eventData_.compressedData
TMP_597(uint256) = now * 1000000000000000000
TMP_598(uint256) = REF_876 + TMP_597
TMP_599(uint256) = _team * 100000000000000000000000000000
TMP_600(uint256) = TMP_598 + TMP_599
REF_875(uint256) (->_eventData_) := TMP_600(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_877(uint256) -> _eventData_.compressedIDs
REF_878(uint256) -> _eventData_.compressedIDs
TMP_601(uint256) = REF_878 + _pID
TMP_602(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_603(uint256) = TMP_601 + TMP_602
REF_877(uint256) (->_eventData_) := TMP_603(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_880(uint256) -> _eventData_.compressedData
REF_881(uint256) -> _eventData_.compressedIDs
REF_882(F3Ddatasets.Player) -> plyr_[_pID]
REF_883(bytes32) -> REF_882.name
REF_884(address) -> _eventData_.winnerAddr
REF_885(bytes32) -> _eventData_.winnerName
REF_886(uint256) -> _eventData_.amountWon
REF_887(uint256) -> _eventData_.newPot
REF_888(uint256) -> _eventData_.P3DAmount
REF_889(uint256) -> _eventData_.genAmount
REF_890(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_880,REF_881,REF_883,msg.sender,_eth,_keys,REF_884,REF_885,REF_886,REF_887,REF_888,REF_889,REF_890,airDropPot_)"];
}
// Function: 1123.sol-FoMo3DFast-endTxQR(address,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_891(uint256) -> _eventData_.compressedData
REF_892(uint256) -> _eventData_.compressedData
TMP_605(uint256) = now * 1000000000000000000
TMP_606(uint256) = REF_892 + TMP_605
TMP_607(uint256) = _team * 100000000000000000000000000000
TMP_608(uint256) = TMP_606 + TMP_607
REF_891(uint256) (->_eventData_) := TMP_608(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_893(uint256) -> _eventData_.compressedIDs
REF_894(uint256) -> _eventData_.compressedIDs
TMP_609(uint256) = REF_894 + _pID
TMP_610(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_611(uint256) = TMP_609 + TMP_610
REF_893(uint256) (->_eventData_) := TMP_611(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,_realSender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_896(uint256) -> _eventData_.compressedData
REF_897(uint256) -> _eventData_.compressedIDs
REF_898(F3Ddatasets.Player) -> plyr_[_pID]
REF_899(bytes32) -> REF_898.name
REF_900(address) -> _eventData_.winnerAddr
REF_901(bytes32) -> _eventData_.winnerName
REF_902(uint256) -> _eventData_.amountWon
REF_903(uint256) -> _eventData_.newPot
REF_904(uint256) -> _eventData_.P3DAmount
REF_905(uint256) -> _eventData_.genAmount
REF_906(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_896,REF_897,REF_899,_realSender,_eth,_keys,REF_900,REF_901,REF_902,REF_903,REF_904,REF_905,REF_906,airDropPot_)"];
}
// Function: 1123.sol-FoMo3DFast-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_98(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_98(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_50(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_50(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_52,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1123.sol-FoMo3DFast-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_179(F3Ddatasets.Round) -> round_[_rID]
REF_180(uint256) -> REF_179.strt
TMP_208(uint256) = REF_180 + rndGap_
TMP_209(bool) = _now > TMP_208
REF_181(F3Ddatasets.Round) -> round_[_rID]
REF_182(uint256) -> REF_181.end
TMP_210(bool) = _now <= REF_182
REF_183(F3Ddatasets.Round) -> round_[_rID]
REF_184(uint256) -> REF_183.end
TMP_211(bool) = _now > REF_184
REF_185(F3Ddatasets.Round) -> round_[_rID]
REF_186(uint256) -> REF_185.plyr
TMP_212(bool) = REF_186 == 0
TMP_213(bool) = TMP_211 && TMP_212
TMP_214(bool) = TMP_210 || TMP_213
TMP_215(bool) = TMP_209 && TMP_214
CONDITION TMP_215"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_187(F3Ddatasets.Round) -> round_[_rID]
REF_188(uint256) -> REF_187.keys
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', '1000000000000000000'] 
TMP_217(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_216', '1000000000000000000'] 
RETURN TMP_217"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 1123.sol-FoMo3DFast-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.ico
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.keys
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.end
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.strt
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.pot
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.team
REF_273(F3Ddatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.plyr
TMP_248(uint256) = REF_274 * 10
TMP_249(uint256) = REF_272 + TMP_248
REF_275(F3Ddatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.plyr
REF_277(F3Ddatasets.Player) -> plyr_[REF_276]
REF_278(address) -> REF_277.addr
REF_279(F3Ddatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.plyr
REF_281(F3Ddatasets.Player) -> plyr_[REF_280]
REF_282(bytes32) -> REF_281.name
REF_283(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_284(uint256) -> REF_283[0]
REF_285(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_286(uint256) -> REF_285[1]
REF_287(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_288(uint256) -> REF_287[2]
REF_289(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_290(uint256) -> REF_289[3]
TMP_250(uint256) = airDropPot_ * 1000
TMP_251(uint256) = airDropTracker_ + TMP_250
RETURN REF_262,_rID,REF_264,REF_266,REF_268,REF_270,TMP_249,REF_278,REF_282,REF_284,REF_286,REF_288,REF_290,TMP_251"];
}
// Function: 1123.sol-FoMo3DFast-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_252 = CONVERT 0 to address
TMP_253(bool) = _addr == TMP_252
CONDITION TMP_253"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_254(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_291(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_291(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_292(F3Ddatasets.Player) -> plyr_[_pID]
REF_293(bytes32) -> REF_292.name
REF_294(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_295(F3Ddatasets.PlayerRounds) -> REF_294[_rID]
REF_296(uint256) -> REF_295.keys
REF_297(F3Ddatasets.Player) -> plyr_[_pID]
REF_298(uint256) -> REF_297.win
REF_299(F3Ddatasets.Player) -> plyr_[_pID]
REF_300(uint256) -> REF_299.gen
REF_302(F3Ddatasets.Player) -> plyr_[_pID]
REF_303(uint256) -> REF_302.lrnd
TMP_255(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_303)
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_300', 'TMP_255'] 
REF_304(F3Ddatasets.Player) -> plyr_[_pID]
REF_305(uint256) -> REF_304.aff
REF_306(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_307(F3Ddatasets.PlayerRounds) -> REF_306[_rID]
REF_308(uint256) -> REF_307.eth
RETURN _pID,REF_293,REF_296,REF_298,TMP_256,REF_305,REF_308"];
}
// Function: 1123.sol-FoMo3DFast-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_201(F3Ddatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.end
TMP_224(bool) = now > REF_202
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(bool) -> REF_203.ended
TMP_225(bool) = REF_204 == False
TMP_226(bool) = TMP_224 && TMP_225
REF_205(F3Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.plyr
TMP_227(bool) = REF_206 != 0
TMP_228(bool) = TMP_226 && TMP_227
CONDITION TMP_228"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_207(F3Ddatasets.Round) -> round_[_rID]
REF_208(uint256) -> REF_207.plyr
TMP_229(bool) = REF_208 == _pID
CONDITION TMP_229"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_209(F3Ddatasets.Player) -> plyr_[_pID]
REF_210(uint256) -> REF_209.win
REF_212(F3Ddatasets.Round) -> round_[_rID]
REF_213(uint256) -> REF_212.pot
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_213', '48'] 
TMP_231(uint256) = TMP_230 / 100
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_210', 'TMP_231'] 
REF_215(F3Ddatasets.Player) -> plyr_[_pID]
REF_216(uint256) -> REF_215.gen
TMP_233(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_219(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_220(F3Ddatasets.PlayerRounds) -> REF_219[_rID]
REF_221(uint256) -> REF_220.mask
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_233', 'REF_221'] 
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_216', 'TMP_234'] 
REF_222(F3Ddatasets.Player) -> plyr_[_pID]
REF_223(uint256) -> REF_222.aff
RETURN TMP_232,TMP_235,REF_223"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_224(F3Ddatasets.Player) -> plyr_[_pID]
REF_225(uint256) -> REF_224.win
REF_226(F3Ddatasets.Player) -> plyr_[_pID]
REF_227(uint256) -> REF_226.gen
TMP_236(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_230(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_231(F3Ddatasets.PlayerRounds) -> REF_230[_rID]
REF_232(uint256) -> REF_231.mask
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_236', 'REF_232'] 
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_227', 'TMP_237'] 
REF_233(F3Ddatasets.Player) -> plyr_[_pID]
REF_234(uint256) -> REF_233.aff
RETURN REF_225,TMP_238,REF_234"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_235(F3Ddatasets.Player) -> plyr_[_pID]
REF_236(uint256) -> REF_235.win
REF_237(F3Ddatasets.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.gen
REF_240(F3Ddatasets.Player) -> plyr_[_pID]
REF_241(uint256) -> REF_240.lrnd
TMP_239(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_241)
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_238', 'TMP_239'] 
REF_242(F3Ddatasets.Player) -> plyr_[_pID]
REF_243(uint256) -> REF_242.aff
RETURN REF_236,TMP_240,REF_243"];
}
// Function: 1123.sol-FoMo3DFast-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_244(F3Ddatasets.Round) -> round_[_rID]
REF_245(uint256) -> REF_244.mask
REF_247(F3Ddatasets.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.pot
REF_250(F3Ddatasets.Round) -> round_[_rID]
REF_251(uint256) -> REF_250.team
REF_252(F3Ddatasets.PotSplit) -> potSplit_[REF_251]
REF_253(uint256) -> REF_252.gen
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_248', 'REF_253'] 
TMP_242(uint256) = TMP_241 / 100
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_242', '1000000000000000000'] 
REF_255(F3Ddatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.keys
TMP_244(uint256) = TMP_243 / REF_256
TMP_245(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_245', 'TMP_244'] 
REF_258(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_259(F3Ddatasets.PlayerRounds) -> REF_258[_rID]
REF_260(uint256) -> REF_259.keys
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_245', 'REF_260'] 
TMP_247(uint256) = TMP_246 / 1000000000000000000
RETURN TMP_247"];
}
// Function: 1123.sol-FoMo3DFast-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_191(F3Ddatasets.Round) -> round_[_rID]
REF_192(uint256) -> REF_191.end
TMP_218(bool) = _now < REF_192
CONDITION TMP_218"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_193(F3Ddatasets.Round) -> round_[_rID]
REF_194(uint256) -> REF_193.strt
TMP_219(uint256) = REF_194 + rndGap_
TMP_220(bool) = _now > TMP_219
CONDITION TMP_220"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_195(F3Ddatasets.Round) -> round_[_rID]
REF_196(uint256) -> REF_195.end
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_196', '_now'] 
RETURN TMP_221"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_198(F3Ddatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.strt
TMP_222(uint256) = REF_199 + rndGap_
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_222', '_now'] 
RETURN TMP_223"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1123.sol-FoMo3DFast-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_609(F3Ddatasets.Round) -> round_[_rID]
REF_610(uint256) -> REF_609.strt
TMP_425(uint256) = REF_610 + rndGap_
TMP_426(bool) = _now > TMP_425
REF_611(F3Ddatasets.Round) -> round_[_rID]
REF_612(uint256) -> REF_611.end
TMP_427(bool) = _now <= REF_612
REF_613(F3Ddatasets.Round) -> round_[_rID]
REF_614(uint256) -> REF_613.end
TMP_428(bool) = _now > REF_614
REF_615(F3Ddatasets.Round) -> round_[_rID]
REF_616(uint256) -> REF_615.plyr
TMP_429(bool) = REF_616 == 0
TMP_430(bool) = TMP_428 && TMP_429
TMP_431(bool) = TMP_427 || TMP_430
TMP_432(bool) = TMP_426 && TMP_431
CONDITION TMP_432"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_617(F3Ddatasets.Round) -> round_[_rID]
REF_618(uint256) -> REF_617.keys
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_618', '_keys'] 
TMP_434(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_433', '_keys'] 
RETURN TMP_434"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_435(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_435"];
}
// Function: 1123.sol-FoMo3DFast-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_622(bool) = activated_ == True
TMP_623(None) = SOLIDITY_CALL require(bool,string)(TMP_622,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1123.sol-FoMo3DFast-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_624(bool) = _codeLength == 0
TMP_625(None) = SOLIDITY_CALL require(bool,string)(TMP_624,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1123.sol-FoMo3DFast-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_626(bool) = _eth >= 1000000000
TMP_627(None) = SOLIDITY_CALL require(bool,string)(TMP_626,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_628(bool) = _eth <= 100000000000000000000000
TMP_629(None) = SOLIDITY_CALL require(bool,string)(TMP_628,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1123.sol-FoMo3DFast-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_678(F3Ddatasets.Player) -> plyr_[_pID]
REF_679(uint256) -> REF_678.lrnd
TMP_470(bool) = REF_679 != 0
CONDITION TMP_470"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_680(F3Ddatasets.Player) -> plyr_[_pID]
REF_681(uint256) -> REF_680.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_681)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_682(F3Ddatasets.Player) -> plyr_[_pID]
REF_683(uint256) -> REF_682.lrnd
REF_683(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_684(uint256) -> _eventData_.compressedData
REF_685(uint256) -> _eventData_.compressedData
TMP_472(uint256) = REF_685 + 10
REF_684(uint256) (->_eventData_) := TMP_472(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1123.sol-FoMo3DFast-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_561(uint256) = rID_ + 1
_rID(uint256) := TMP_561(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_807(F3Ddatasets.Round) -> round_[_rID]
REF_808(uint256) -> REF_807.pot
REF_809(F3Ddatasets.Round) -> round_[_rID]
REF_810(uint256) -> REF_809.pot
TMP_562(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_810', 'msg.value'] 
REF_808(uint256) (->round_) := TMP_562(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 1123.sol-FoMo3DFast-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_377(F3Ddatasets.Round) -> round_[_rID]
REF_378(uint256) -> REF_377.strt
TMP_293(uint256) = REF_378 + rndGap_
TMP_294(bool) = _now > TMP_293
REF_379(F3Ddatasets.Round) -> round_[_rID]
REF_380(uint256) -> REF_379.end
TMP_295(bool) = _now <= REF_380
REF_381(F3Ddatasets.Round) -> round_[_rID]
REF_382(uint256) -> REF_381.end
TMP_296(bool) = _now > REF_382
REF_383(F3Ddatasets.Round) -> round_[_rID]
REF_384(uint256) -> REF_383.plyr
TMP_297(bool) = REF_384 == 0
TMP_298(bool) = TMP_296 && TMP_297
TMP_299(bool) = TMP_295 || TMP_298
TMP_300(bool) = TMP_294 && TMP_299
CONDITION TMP_300"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_385(F3Ddatasets.Player) -> plyr_[_pID]
REF_386(uint256) -> REF_385.gen
TMP_301(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_301', '_eth'] 
REF_386(uint256) (->plyr_) := TMP_302(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_388(F3Ddatasets.Round) -> round_[_rID]
REF_389(uint256) -> REF_388.end
TMP_304(bool) = _now > REF_389
REF_390(F3Ddatasets.Round) -> round_[_rID]
REF_391(bool) -> REF_390.ended
TMP_305(bool) = REF_391 == False
TMP_306(bool) = TMP_304 && TMP_305
CONDITION TMP_306"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_392(F3Ddatasets.Round) -> round_[_rID]
REF_393(bool) -> REF_392.ended
REF_393(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_307(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_307(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_394(uint256) -> _eventData_.compressedData
REF_395(uint256) -> _eventData_.compressedData
TMP_308(uint256) = _now * 1000000000000000000
TMP_309(uint256) = REF_395 + TMP_308
REF_394(uint256) (->_eventData_) := TMP_309(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_396(uint256) -> _eventData_.compressedIDs
REF_397(uint256) -> _eventData_.compressedIDs
TMP_310(uint256) = REF_397 + _pID
REF_396(uint256) (->_eventData_) := TMP_310(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_399(F3Ddatasets.Player) -> plyr_[_pID]
REF_400(bytes32) -> REF_399.name
REF_401(uint256) -> _eventData_.compressedData
REF_402(uint256) -> _eventData_.compressedIDs
REF_403(address) -> _eventData_.winnerAddr
REF_404(bytes32) -> _eventData_.winnerName
REF_405(uint256) -> _eventData_.amountWon
REF_406(uint256) -> _eventData_.newPot
REF_407(uint256) -> _eventData_.P3DAmount
REF_408(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_400,REF_401,REF_402,REF_403,REF_404,REF_405,REF_406,REF_407,REF_408)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1123.sol-FoMo3DFast-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_95(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_95(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_152 = CONVERT 0 to address
TMP_153(bool) = _affCode == TMP_152
TMP_154(bool) = _affCode == msg.sender
TMP_155(bool) = TMP_153 || TMP_154
CONDITION TMP_155"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(uint256) -> REF_96.laff
_affID(uint256) := REF_97(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_98(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_98(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_99(F3Ddatasets.Player) -> plyr_[_pID]
REF_100(uint256) -> REF_99.laff
TMP_156(bool) = _affID != REF_100
CONDITION TMP_156"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_pID]
REF_102(uint256) -> REF_101.laff
REF_102(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_157(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_157(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1123.sol-FoMo3DFast-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_88(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_88(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_143(bool) = _affCode == 0
TMP_144(bool) = _affCode == _pID
TMP_145(bool) = TMP_143 || TMP_144
CONDITION TMP_145"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_89(F3Ddatasets.Player) -> plyr_[_pID]
REF_90(uint256) -> REF_89.laff
_affCode(uint256) := REF_90(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_91(F3Ddatasets.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.laff
TMP_146(bool) = _affCode != REF_92
CONDITION TMP_146"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_93(F3Ddatasets.Player) -> plyr_[_pID]
REF_94(uint256) -> REF_93.laff
REF_94(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_147(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_147(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 1123.sol-FoMo3DFast-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_103(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_103(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_162(bool) = _affCode == 
REF_104(F3Ddatasets.Player) -> plyr_[_pID]
REF_105(bytes32) -> REF_104.name
TMP_163(bool) = _affCode == REF_105
TMP_164(bool) = TMP_162 || TMP_163
CONDITION TMP_164"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_106(F3Ddatasets.Player) -> plyr_[_pID]
REF_107(uint256) -> REF_106.laff
_affID(uint256) := REF_107(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_108(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_108(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_109(F3Ddatasets.Player) -> plyr_[_pID]
REF_110(uint256) -> REF_109.laff
TMP_165(bool) = _affID != REF_110
CONDITION TMP_165"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_111(F3Ddatasets.Player) -> plyr_[_pID]
REF_112(uint256) -> REF_111.laff
REF_112(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_166(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_166(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1123.sol-FoMo3DFast-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_436 = CONVERT PlayerBook to address
TMP_437(bool) = msg.sender == TMP_436
TMP_438(None) = SOLIDITY_CALL require(bool,string)(TMP_437,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_622(uint256) -> pIDxAddr_[_addr]
TMP_439(bool) = REF_622 != _pID
CONDITION TMP_439"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_623(uint256) -> pIDxAddr_[_addr]
REF_623(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_624(uint256) -> pIDxName_[_name]
TMP_440(bool) = REF_624 != _pID
CONDITION TMP_440"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_625(uint256) -> pIDxName_[_name]
REF_625(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_626(F3Ddatasets.Player) -> plyr_[_pID]
REF_627(address) -> REF_626.addr
TMP_441(bool) = REF_627 != _addr
CONDITION TMP_441"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_628(F3Ddatasets.Player) -> plyr_[_pID]
REF_629(address) -> REF_628.addr
REF_629(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_630(F3Ddatasets.Player) -> plyr_[_pID]
REF_631(bytes32) -> REF_630.name
TMP_442(bool) = REF_631 != _name
CONDITION TMP_442"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_632(F3Ddatasets.Player) -> plyr_[_pID]
REF_633(bytes32) -> REF_632.name
REF_633(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_634(F3Ddatasets.Player) -> plyr_[_pID]
REF_635(uint256) -> REF_634.laff
TMP_443(bool) = REF_635 != _laff
CONDITION TMP_443"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_636(F3Ddatasets.Player) -> plyr_[_pID]
REF_637(uint256) -> REF_636.laff
REF_637(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_638(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_639(bool) -> REF_638[_name]
TMP_444(bool) = REF_639 == False
CONDITION TMP_444"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_640(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_641(bool) -> REF_640[_name]
REF_641(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1123.sol-FoMo3DFast-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_445 = CONVERT PlayerBook to address
TMP_446(bool) = msg.sender == TMP_445
TMP_447(None) = SOLIDITY_CALL require(bool,string)(TMP_446,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_642(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_643(bool) -> REF_642[_name]
TMP_448(bool) = REF_643 == False
CONDITION TMP_448"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_644(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_645(bool) -> REF_644[_name]
REF_645(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1123.sol-FoMo3DFast-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x27D5C0C175C1Ba67986319ac297d2F4D3bC2b7b2)

IRs:
TMP_621 = CONVERT 227417490179338047419100242872154449937023809458 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_621(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = FOMO Test

IRs:
name(string) := FOMO Test(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = Test

IRs:
symbol(string) := Test(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 20

IRs:
rndInc_(uint256) := 20(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 28800

IRs:
rndMax_(uint256) := 28800(uint256)"];
}
// Function: 1123.sol-FoMo3DFast-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndExtra_ = 1800

IRs:
rndExtra_(uint256) := 1800(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndGap_ = 1800

IRs:
rndGap_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
}
// Function: 1123.sol-FoMo3DFast-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_506(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_506(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_507(bool) = _earnings > 0
CONDITION TMP_507"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_748(F3Ddatasets.Player) -> plyr_[_pID]
REF_749(uint256) -> REF_748.gen
REF_751(F3Ddatasets.Player) -> plyr_[_pID]
REF_752(uint256) -> REF_751.gen
TMP_508(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_752'] 
REF_749(uint256) (->plyr_) := TMP_508(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_753(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_754(F3Ddatasets.PlayerRounds) -> REF_753[_rIDlast]
REF_755(uint256) -> REF_754.mask
REF_757(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_758(F3Ddatasets.PlayerRounds) -> REF_757[_rIDlast]
REF_759(uint256) -> REF_758.mask
TMP_509(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_759'] 
REF_755(uint256) (->plyrRnds_) := TMP_509(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1123.sol-FoMo3DFast-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_581(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_836(F3Ddatasets.Round) -> round_[_rID]
REF_837(uint256) -> REF_836.keys
TMP_582(uint256) = TMP_581 / REF_837
_ppt(uint256) := TMP_582(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_838(F3Ddatasets.Round) -> round_[_rID]
REF_839(uint256) -> REF_838.mask
REF_841(F3Ddatasets.Round) -> round_[_rID]
REF_842(uint256) -> REF_841.mask
TMP_583(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_842'] 
REF_839(uint256) (->round_) := TMP_583(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_584(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_585(uint256) = TMP_584 / 1000000000000000000
_pearn(uint256) := TMP_585(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_844(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_845(F3Ddatasets.PlayerRounds) -> REF_844[_rID]
REF_846(uint256) -> REF_845.mask
REF_847(F3Ddatasets.Round) -> round_[_rID]
REF_848(uint256) -> REF_847.mask
TMP_586(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_848', '_keys'] 
TMP_587(uint256) = TMP_586 / 1000000000000000000
TMP_588(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_587', '_pearn'] 
REF_852(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_853(F3Ddatasets.PlayerRounds) -> REF_852[_rID]
REF_854(uint256) -> REF_853.mask
TMP_589(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_588', 'REF_854'] 
REF_846(uint256) (->plyrRnds_) := TMP_589(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_857(F3Ddatasets.Round) -> round_[_rID]
REF_858(uint256) -> REF_857.keys
TMP_590(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_858'] 
TMP_591(uint256) = TMP_590 / 1000000000000000000
TMP_592(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_591'] 
RETURN TMP_592"];
}
// Function: 1123.sol-FoMo3DFast-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_760(F3Ddatasets.Round) -> round_[_rID]
REF_761(uint256) -> REF_760.end
TMP_510(bool) = _now > REF_761
REF_762(F3Ddatasets.Round) -> round_[_rID]
REF_763(uint256) -> REF_762.plyr
TMP_511(bool) = REF_763 == 0
TMP_512(bool) = TMP_510 && TMP_511
CONDITION TMP_512"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_513(uint256) = _keys / 1000000000000000000
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_513', 'rndInc_'] 
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_514', '_now'] 
_newTime(uint256) := TMP_515(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_516(uint256) = _keys / 1000000000000000000
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_516', 'rndInc_'] 
REF_768(F3Ddatasets.Round) -> round_[_rID]
REF_769(uint256) -> REF_768.end
TMP_518(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_517', 'REF_769'] 
_newTime(uint256) := TMP_518(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_520(bool) = _newTime < TMP_519
CONDITION TMP_520"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_771(F3Ddatasets.Round) -> round_[_rID]
REF_772(uint256) -> REF_771.end
REF_772(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_773(F3Ddatasets.Round) -> round_[_rID]
REF_774(uint256) -> REF_773.end
TMP_521(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_774(uint256) (->round_) := TMP_521(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1123.sol-FoMo3DFast-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_467(bool) = _team < 0
TMP_468(bool) = _team > 3
TMP_469(bool) = TMP_467 || TMP_468
CONDITION TMP_469"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 1123.sol-FoMo3DFast-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_113(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_113(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_114(F3Ddatasets.Round) -> round_[_rID]
REF_115(uint256) -> REF_114.end
TMP_171(bool) = _now > REF_115
REF_116(F3Ddatasets.Round) -> round_[_rID]
REF_117(bool) -> REF_116.ended
TMP_172(bool) = REF_117 == False
TMP_173(bool) = TMP_171 && TMP_172
REF_118(F3Ddatasets.Round) -> round_[_rID]
REF_119(uint256) -> REF_118.plyr
TMP_174(bool) = REF_119 != 0
TMP_175(bool) = TMP_173 && TMP_174
CONDITION TMP_175"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_120(F3Ddatasets.Round) -> round_[_rID]
REF_121(bool) -> REF_120.ended
REF_121(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_176(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_176(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_177(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_177(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_178(bool) = _eth > 0
CONDITION TMP_178"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_122(F3Ddatasets.Player) -> plyr_[_pID]
REF_123(address) -> REF_122.addr
Transfer dest:REF_123 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_125(uint256) -> _eventData_.compressedData
REF_126(uint256) -> _eventData_.compressedData
TMP_180(uint256) = _now * 1000000000000000000
TMP_181(uint256) = REF_126 + TMP_180
REF_125(uint256) (->_eventData_) := TMP_181(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_127(uint256) -> _eventData_.compressedIDs
REF_128(uint256) -> _eventData_.compressedIDs
TMP_182(uint256) = REF_128 + _pID
REF_127(uint256) (->_eventData_) := TMP_182(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_130(F3Ddatasets.Player) -> plyr_[_pID]
REF_131(bytes32) -> REF_130.name
REF_132(uint256) -> _eventData_.compressedData
REF_133(uint256) -> _eventData_.compressedIDs
REF_134(address) -> _eventData_.winnerAddr
REF_135(bytes32) -> _eventData_.winnerName
REF_136(uint256) -> _eventData_.amountWon
REF_137(uint256) -> _eventData_.newPot
REF_138(uint256) -> _eventData_.P3DAmount
REF_139(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_131,_eth,REF_132,REF_133,REF_134,REF_135,REF_136,REF_137,REF_138,REF_139)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_184(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_184(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_185(bool) = _eth > 0
CONDITION TMP_185"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_140(F3Ddatasets.Player) -> plyr_[_pID]
REF_141(address) -> REF_140.addr
Transfer dest:REF_141 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_144(F3Ddatasets.Player) -> plyr_[_pID]
REF_145(bytes32) -> REF_144.name
Emit onWithdraw(_pID,msg.sender,REF_145,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
23->1;
}
// Function: 1123.sol-FoMo3DFast-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_859(F3Ddatasets.Player) -> plyr_[_pID]
REF_860(uint256) -> REF_859.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_860)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_861(F3Ddatasets.Player) -> plyr_[_pID]
REF_862(uint256) -> REF_861.win
REF_864(F3Ddatasets.Player) -> plyr_[_pID]
REF_865(uint256) -> REF_864.gen
TMP_594(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_862', 'REF_865'] 
REF_867(F3Ddatasets.Player) -> plyr_[_pID]
REF_868(uint256) -> REF_867.aff
TMP_595(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_594', 'REF_868'] 
_earnings(uint256) := TMP_595(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_596(bool) = _earnings > 0
CONDITION TMP_596"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_869(F3Ddatasets.Player) -> plyr_[_pID]
REF_870(uint256) -> REF_869.win
REF_870(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_871(F3Ddatasets.Player) -> plyr_[_pID]
REF_872(uint256) -> REF_871.gen
REF_872(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_873(F3Ddatasets.Player) -> plyr_[_pID]
REF_874(uint256) -> REF_873.aff
REF_874(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1123.sol-FoMo3DFast-withdrawQR(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_realSender]

IRs:
REF_146(uint256) -> pIDxAddr_[_realSender]
_pID(uint256) := REF_146(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.end
TMP_190(bool) = _now > REF_148
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(bool) -> REF_149.ended
TMP_191(bool) = REF_150 == False
TMP_192(bool) = TMP_190 && TMP_191
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.plyr
TMP_193(bool) = REF_152 != 0
TMP_194(bool) = TMP_192 && TMP_193
CONDITION TMP_194"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(bool) -> REF_153.ended
REF_154(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_195(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_195(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_196(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_196(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_197(bool) = _eth > 0
CONDITION TMP_197"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_155(F3Ddatasets.Player) -> plyr_[_pID]
REF_156(address) -> REF_155.addr
Transfer dest:REF_156 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_158(uint256) -> _eventData_.compressedData
REF_159(uint256) -> _eventData_.compressedData
TMP_199(uint256) = _now * 1000000000000000000
TMP_200(uint256) = REF_159 + TMP_199
REF_158(uint256) (->_eventData_) := TMP_200(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_160(uint256) -> _eventData_.compressedIDs
REF_161(uint256) -> _eventData_.compressedIDs
TMP_201(uint256) = REF_161 + _pID
REF_160(uint256) (->_eventData_) := TMP_201(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(_realSender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_163(F3Ddatasets.Player) -> plyr_[_pID]
REF_164(bytes32) -> REF_163.name
REF_165(uint256) -> _eventData_.compressedData
REF_166(uint256) -> _eventData_.compressedIDs
REF_167(address) -> _eventData_.winnerAddr
REF_168(bytes32) -> _eventData_.winnerName
REF_169(uint256) -> _eventData_.amountWon
REF_170(uint256) -> _eventData_.newPot
REF_171(uint256) -> _eventData_.P3DAmount
REF_172(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(_realSender,REF_164,_eth,REF_165,REF_166,REF_167,REF_168,REF_169,REF_170,REF_171,REF_172)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_203(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_203(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_204(bool) = _eth > 0
CONDITION TMP_204"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_173(F3Ddatasets.Player) -> plyr_[_pID]
REF_174(address) -> REF_173.addr
Transfer dest:REF_174 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,_realSender,plyr_[_pID].name,_eth,_now)

IRs:
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(bytes32) -> REF_177.name
Emit onWithdraw(_pID,_realSender,REF_178,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
22->1;
}
// Function: 1123.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_23 = CONVERT _input to bytes
_temp(bytes) := TMP_23(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_24(bool) = _length <= 32
TMP_25(bool) = _length > 0
TMP_26(bool) = TMP_24 && TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_28(bool) = REF_1 != 32
TMP_29(uint256) = _length - 1
REF_2(None) -> _temp[TMP_29]
TMP_30(bool) = REF_2 != 32
TMP_31(bool) = TMP_28 && TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_33(bool) = REF_3 == 48
CONDITION TMP_33"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_34(bool) = REF_4 != 120
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_36(bool) = REF_5 != 88
TMP_37(None) = SOLIDITY_CALL require(bool,string)(TMP_36,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_38(bool) = i < _length
CONDITION TMP_38"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_39(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_40(bool) = REF_7 < 91
TMP_41(bool) = TMP_39 && TMP_40
CONDITION TMP_41"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_42 = CONVERT REF_9 to uint256
TMP_43(uint256) = TMP_42 + 32
TMP_44 = CONVERT TMP_43 to bytes1
REF_8(bytes1) (->_temp) := TMP_44(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_45(bool) = _hasNonNumber == False
CONDITION TMP_45"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_46(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_47(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_48(bool) = REF_12 < 123
TMP_49(bool) = TMP_47 && TMP_48
TMP_50(bool) = TMP_46 || TMP_49
REF_13(None) -> _temp[i]
TMP_51(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_52(bool) = REF_14 < 58
TMP_53(bool) = TMP_51 && TMP_52
TMP_54(bool) = TMP_50 || TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_56(bool) = REF_15 == 32
CONDITION TMP_56"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_57(uint256) = i + 1
REF_16(None) -> _temp[TMP_57]
TMP_58(bool) = REF_16 != 32
TMP_59(None) = SOLIDITY_CALL require(bool,string)(TMP_58,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_60(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_61(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_62(bool) = REF_18 > 57
TMP_63(bool) = TMP_61 || TMP_62
TMP_64(bool) = TMP_60 && TMP_63
CONDITION TMP_64"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_65(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_66(bool) = _hasNonNumber == True
TMP_67(None) = SOLIDITY_CALL require(bool,string)(TMP_66,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1123.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1123.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1123.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1123.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1123.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1123.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1123.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1123.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1123.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_8(uint256) = a + b
c(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_9(bool) = c >= a
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1123.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1123.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_18(bool) = x == 0
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_19(bool) = y == 0
CONDITION TMP_19"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_20(bool) = i < y
CONDITION TMP_20"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_21(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_21(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_22(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1123.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_17(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_17"];
}
// Function: 1123.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_11(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_12(uint256) = TMP_11 / 2
z(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_13(bool) = z < y
CONDITION TMP_13"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_14(uint256) = x / z
TMP_15(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_14,z)
TMP_16(uint256) = TMP_15 / 2
z(uint256) := TMP_16(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1123.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_5(bool) = b <= a
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_7(uint256) = a - b
RETURN TMP_7"];
}
}
