digraph G {
// Function: 1162.sol-GoalbonanzaBookInterface-getNameFee()
digraph{
}
// Function: 1162.sol-GoalbonanzaBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1162.sol-GoalbonanzaBookInterface-getPlayerID(address)
digraph{
}
// Function: 1162.sol-GoalbonanzaBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1162.sol-GoalbonanzaBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1162.sol-GoalbonanzaBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1162.sol-GoalbonanzaBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1162.sol-GoalbonanzaBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1162.sol-GoalbonanzaInterfaceForForwarder-deposit()
digraph{
}
// Function: 1162.sol-GoalbonanzaPlus-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)((msg.sender == 0xcd0fce8d255349092496f131f2900df25f0569f8),only owner can activate)

IRs:
TMP_388(bool) = msg.sender == 1170695612357194618101628829010923719316111452664
TMP_389(None) = SOLIDITY_CALL require(bool,string)(TMP_388,only owner can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,GoalbonanzaPlus already activated)

IRs:
TMP_390(bool) = activated_ == False
TMP_391(None) = SOLIDITY_CALL require(bool,string)(TMP_390,GoalbonanzaPlus already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now - rndGap_

IRs:
REF_626(RSdatasets.Round) -> round_[1]
REF_627(uint256) -> REF_626.strt
TMP_392(uint256) = now - rndGap_
REF_627(uint256) (->round_) := TMP_392(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_

IRs:
REF_628(RSdatasets.Round) -> round_[1]
REF_629(uint256) -> REF_628.end
TMP_393(uint256) = now + rndInit_
REF_629(uint256) (->round_) := TMP_393(uint256)"];
}
// Function: 1162.sol-GoalbonanzaPlus-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_321(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_322(bytes32) = SOLIDITY_CALL keccak256()(TMP_321)
TMP_323 = CONVERT TMP_322 to uint256
TMP_324(uint256) = TMP_323 / now
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_320', 'TMP_324'] 
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_325', 'block.gaslimit'] 
TMP_327(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_328(bytes32) = SOLIDITY_CALL keccak256()(TMP_327)
TMP_329 = CONVERT TMP_328 to uint256
TMP_330(uint256) = TMP_329 / now
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_326', 'TMP_330'] 
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_331', 'block.number'] 
TMP_333(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_332)
TMP_334(bytes32) = SOLIDITY_CALL keccak256()(TMP_333)
TMP_335 = CONVERT TMP_334 to uint256
seed(uint256) := TMP_335(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_336(uint256) = seed / 1000
TMP_337(uint256) = TMP_336 * 1000
TMP_338(uint256) = seed - TMP_337
TMP_339(bool) = TMP_338 < airDropTracker_
CONDITION TMP_339"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1162.sol-GoalbonanzaPlus-buyCore(uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_226(RSdatasets.Round) -> round_[_rID]
REF_227(uint256) -> REF_226.strt
TMP_137(uint256) = REF_227 + rndGap_
TMP_138(bool) = _now > TMP_137
REF_228(RSdatasets.Round) -> round_[_rID]
REF_229(uint256) -> REF_228.end
TMP_139(bool) = _now <= REF_229
REF_230(RSdatasets.Round) -> round_[_rID]
REF_231(uint256) -> REF_230.end
TMP_140(bool) = _now > REF_231
REF_232(RSdatasets.Round) -> round_[_rID]
REF_233(uint256) -> REF_232.plyr
TMP_141(bool) = REF_233 == 0
TMP_142(bool) = TMP_140 && TMP_141
TMP_143(bool) = TMP_139 || TMP_142
TMP_144(bool) = TMP_138 && TMP_143
CONDITION TMP_144"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.core(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,msg.value,_affID,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_234(RSdatasets.Round) -> round_[_rID]
REF_235(uint256) -> REF_234.end
TMP_146(bool) = _now > REF_235
REF_236(RSdatasets.Round) -> round_[_rID]
REF_237(bool) -> REF_236.ended
TMP_147(bool) = REF_237 == False
TMP_148(bool) = TMP_146 && TMP_147
CONDITION TMP_148"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_238(RSdatasets.Round) -> round_[_rID]
REF_239(bool) -> REF_238.ended
REF_239(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_149(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_149(RSdatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_240(uint256) -> _eventData_.compressedData
REF_241(uint256) -> _eventData_.compressedData
TMP_150(uint256) = _now * 1000000000000000000
TMP_151(uint256) = REF_241 + TMP_150
REF_240(uint256) (->_eventData_) := TMP_151(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_242(uint256) -> _eventData_.compressedIDs
REF_243(uint256) -> _eventData_.compressedIDs
TMP_152(uint256) = REF_243 + _pID
REF_242(uint256) (->_eventData_) := TMP_152(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
RSEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_245(RSdatasets.Player) -> plyr_[_pID]
REF_246(bytes32) -> REF_245.name
REF_247(uint256) -> _eventData_.compressedData
REF_248(uint256) -> _eventData_.compressedIDs
REF_249(address) -> _eventData_.winnerAddr
REF_250(bytes32) -> _eventData_.winnerName
REF_251(uint256) -> _eventData_.amountWon
REF_252(uint256) -> _eventData_.newPot
REF_253(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_246,msg.value,REF_247,REF_248,REF_249,REF_250,REF_251,REF_252,REF_253)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_254(RSdatasets.Player) -> plyr_[_pID]
REF_255(uint256) -> REF_254.gen
REF_256(RSdatasets.Player) -> plyr_[_pID]
REF_257(uint256) -> REF_256.gen
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_257', 'msg.value'] 
REF_255(uint256) (->plyr_) := TMP_154(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1162.sol-GoalbonanzaPlus-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_14(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_14(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_10(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_10(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_15 = CONVERT 0 to address
TMP_16(bool) = _affCode == TMP_15
TMP_17(bool) = _affCode == msg.sender
TMP_18(bool) = TMP_16 || TMP_17
CONDITION TMP_18"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_11(RSdatasets.Player) -> plyr_[_pID]
REF_12(uint256) -> REF_11.laff
_affID(uint256) := REF_12(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_13(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_13(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_14(RSdatasets.Player) -> plyr_[_pID]
REF_15(uint256) -> REF_14.laff
TMP_19(bool) = _affID != REF_15
CONDITION TMP_19"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_16(RSdatasets.Player) -> plyr_[_pID]
REF_17(uint256) -> REF_16.laff
REF_17(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 1162.sol-GoalbonanzaPlus-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_5(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_5(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_3(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_3(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_6(bool) = _affCode == 0
TMP_7(bool) = _affCode == _pID
TMP_8(bool) = TMP_6 || TMP_7
CONDITION TMP_8"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_4(RSdatasets.Player) -> plyr_[_pID]
REF_5(uint256) -> REF_4.laff
_affCode(uint256) := REF_5(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_6(RSdatasets.Player) -> plyr_[_pID]
REF_7(uint256) -> REF_6.laff
TMP_9(bool) = _affCode != REF_7
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_8(RSdatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
REF_9(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 1162.sol-GoalbonanzaPlus-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_24(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_24(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_18(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_18(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_25(bool) = _affCode == 
REF_19(RSdatasets.Player) -> plyr_[_pID]
REF_20(bytes32) -> REF_19.name
TMP_26(bool) = _affCode == REF_20
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_21(RSdatasets.Player) -> plyr_[_pID]
REF_22(uint256) -> REF_21.laff
_affID(uint256) := REF_22(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_23(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_23(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_24(RSdatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
TMP_28(bool) = _affID != REF_25
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_26(RSdatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
REF_27(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 1162.sol-GoalbonanzaPlus-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_380(RSdatasets.Round) -> round_[_rID]
REF_381(uint256) -> REF_380.strt
TMP_225(uint256) = REF_381 + rndGap_
TMP_226(bool) = _now > TMP_225
REF_382(RSdatasets.Round) -> round_[_rID]
REF_383(uint256) -> REF_382.end
TMP_227(bool) = _now <= REF_383
REF_384(RSdatasets.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.end
TMP_228(bool) = _now > REF_385
REF_386(RSdatasets.Round) -> round_[_rID]
REF_387(uint256) -> REF_386.plyr
TMP_229(bool) = REF_387 == 0
TMP_230(bool) = TMP_228 && TMP_229
TMP_231(bool) = TMP_227 || TMP_230
TMP_232(bool) = TMP_226 && TMP_231
CONDITION TMP_232"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_388(RSdatasets.Round) -> round_[_rID]
REF_389(uint256) -> REF_388.eth
TMP_233(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_389', '_eth'] 
RETURN TMP_233"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_234(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_234"];
}
// Function: 1162.sol-GoalbonanzaPlus-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_370(RSdatasets.Round) -> round_[_rIDlast]
REF_371(uint256) -> REF_370.mask
REF_373(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_374(RSdatasets.PlayerRounds) -> REF_373[_rIDlast]
REF_375(uint256) -> REF_374.keys
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_371', 'REF_375'] 
TMP_223(uint256) = TMP_222 / 1000000000000000000
REF_377(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_378(RSdatasets.PlayerRounds) -> REF_377[_rIDlast]
REF_379(uint256) -> REF_378.mask
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_223', 'REF_379'] 
RETURN TMP_224"];
}
// Function: 1162.sol-GoalbonanzaPlus-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1162.sol-GoalbonanzaPlus-core(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_290(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_291(RSdatasets.PlayerRounds) -> REF_290[_rID]
REF_292(uint256) -> REF_291.keys
TMP_174(bool) = REF_292 == 0
CONDITION TMP_174"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_175(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.managePlayer(uint256,RSdatasets.EventReturns)(_pID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_175(RSdatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 10000000000000000000

IRs:
REF_293(RSdatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.eth
TMP_176(bool) = REF_294 < 100000000000000000000
REF_295(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_296(RSdatasets.PlayerRounds) -> REF_295[_rID]
REF_297(uint256) -> REF_296.eth
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_297', '_eth'] 
TMP_178(bool) = TMP_177 > 10000000000000000000
TMP_179(bool) = TMP_176 && TMP_178
CONDITION TMP_179"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (10000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_300(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_301(RSdatasets.PlayerRounds) -> REF_300[_rID]
REF_302(uint256) -> REF_301.eth
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['10000000000000000000', 'REF_302'] 
_availableLimit(uint256) := TMP_180(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_181(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_304(RSdatasets.Player) -> plyr_[_pID]
REF_305(uint256) -> REF_304.gen
REF_306(RSdatasets.Player) -> plyr_[_pID]
REF_307(uint256) -> REF_306.gen
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_307', '_refund'] 
REF_305(uint256) (->plyr_) := TMP_182(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_183(bool) = _eth > 1000000000
CONDITION TMP_183"];
10->11[label="True"];
10->54[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_309(RSdatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.eth
TMP_184(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_310', '_eth'] 
_keys(uint256) := TMP_184(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_185(bool) = _keys >= 1000000000000000000
CONDITION TMP_185"];
12->13[label="True"];
12->18[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_312(RSdatasets.Round) -> round_[_rID]
REF_313(uint256) -> REF_312.plyr
TMP_187(bool) = REF_313 != _pID
CONDITION TMP_187"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_314(RSdatasets.Round) -> round_[_rID]
REF_315(uint256) -> REF_314.plyr
REF_315(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_316(uint256) -> _eventData_.compressedData
REF_317(uint256) -> _eventData_.compressedData
TMP_188(uint256) = REF_317 + 100
REF_316(uint256) (->_eventData_) := TMP_188(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_189(bool) = _eth >= 100000000000000000
CONDITION TMP_189"];
19->20[label="True"];
19->45[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_190(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
airdrop() == true

IRs:
TMP_191(bool) = INTERNAL_CALL, GoalbonanzaPlus.airdrop()()
TMP_192(bool) = TMP_191 == True
CONDITION TMP_192"];
21->22[label="True"];
21->44[label="False"];
22[label="Node Type: NEW VARIABLE 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_193(bool) = _eth >= 10000000000000000000
CONDITION TMP_193"];
23->24[label="True"];
23->28[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_195(uint256) = TMP_194 / 100
_prize(uint256) := TMP_195(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_319(RSdatasets.Player) -> plyr_[_pID]
REF_320(uint256) -> REF_319.win
REF_321(RSdatasets.Player) -> plyr_[_pID]
REF_322(uint256) -> REF_321.win
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_322', '_prize'] 
REF_320(uint256) (->plyr_) := TMP_196(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_197(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_325(uint256) -> _eventData_.compressedData
REF_325(-> _eventData_) = REF_325 + 300000000000000000000000000000000"];
27->40;
28[label="Node Type: IF 28

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_198(bool) = _eth >= 1000000000000000000
TMP_199(bool) = _eth < 10000000000000000000
TMP_200(bool) = TMP_198 && TMP_199
CONDITION TMP_200"];
28->29[label="True"];
28->33[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_202(uint256) = TMP_201 / 100
_prize(uint256) := TMP_202(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_327(RSdatasets.Player) -> plyr_[_pID]
REF_328(uint256) -> REF_327.win
REF_329(RSdatasets.Player) -> plyr_[_pID]
REF_330(uint256) -> REF_329.win
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_330', '_prize'] 
REF_328(uint256) (->plyr_) := TMP_203(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_204(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_333(uint256) -> _eventData_.compressedData
REF_333(-> _eventData_) = REF_333 + 200000000000000000000000000000000"];
32->39;
33[label="Node Type: IF 33

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_205(bool) = _eth >= 100000000000000000
TMP_206(bool) = _eth < 1000000000000000000
TMP_207(bool) = TMP_205 && TMP_206
CONDITION TMP_207"];
33->34[label="True"];
33->38[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_209(uint256) = TMP_208 / 100
_prize(uint256) := TMP_209(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_335(RSdatasets.Player) -> plyr_[_pID]
REF_336(uint256) -> REF_335.win
REF_337(RSdatasets.Player) -> plyr_[_pID]
REF_338(uint256) -> REF_337.win
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_338', '_prize'] 
REF_336(uint256) (->plyr_) := TMP_210(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_211(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_eventData_.compressedData += 100000000000000000000000000000000

IRs:
REF_341(uint256) -> _eventData_.compressedData
REF_341(-> _eventData_) = REF_341 + 100000000000000000000000000000000"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_342(uint256) -> _eventData_.compressedData
REF_342(-> _eventData_) = REF_342 + 10000000000000000000000000000000"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_343(uint256) -> _eventData_.compressedData
TMP_212(uint256) = _prize * 1000000000000000000000000000000000
REF_343(-> _eventData_) = REF_343 + TMP_212"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_344(uint256) -> _eventData_.compressedData
REF_345(uint256) -> _eventData_.compressedData
TMP_213(uint256) = airDropTracker_ * 1000
TMP_214(uint256) = REF_345 + TMP_213
REF_344(uint256) (->_eventData_) := TMP_214(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_346(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_347(RSdatasets.PlayerRounds) -> REF_346[_rID]
REF_348(uint256) -> REF_347.keys
REF_350(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_351(RSdatasets.PlayerRounds) -> REF_350[_rID]
REF_352(uint256) -> REF_351.keys
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_352'] 
REF_348(uint256) (->plyrRnds_) := TMP_215(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_353(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_354(RSdatasets.PlayerRounds) -> REF_353[_rID]
REF_355(uint256) -> REF_354.eth
REF_357(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_358(RSdatasets.PlayerRounds) -> REF_357[_rID]
REF_359(uint256) -> REF_358.eth
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_359'] 
REF_355(uint256) (->plyrRnds_) := TMP_216(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_360(RSdatasets.Round) -> round_[_rID]
REF_361(uint256) -> REF_360.keys
REF_363(RSdatasets.Round) -> round_[_rID]
REF_364(uint256) -> REF_363.keys
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_364'] 
REF_361(uint256) (->round_) := TMP_217(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_365(RSdatasets.Round) -> round_[_rID]
REF_366(uint256) -> REF_365.eth
REF_368(RSdatasets.Round) -> round_[_rID]
REF_369(uint256) -> REF_368.eth
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_369'] 
REF_366(uint256) (->round_) := TMP_218(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_eventData_)

IRs:
TMP_219(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.distributeExternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,_eth,_affID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_219(RSdatasets.EventReturns)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_keys,_eventData_)

IRs:
TMP_220(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.distributeInternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,_eth,_keys,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_220(RSdatasets.EventReturns)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
endTx(_pID,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.endTx(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_keys,_eventData_)"];
53->54;
54[label="Node Type: END_IF 54
"];
}
// Function: 1162.sol-GoalbonanzaPlus-determinePID(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_429(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_429(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_259(bool) = _pID == 0
CONDITION TMP_259"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = GoalbonanzaBook.getPlayerID(msg.sender)

IRs:
TMP_260(uint256) = HIGH_LEVEL_CALL, dest:GoalbonanzaBook(GoalbonanzaBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_260(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = GoalbonanzaBook.getPlayerName(_pID)

IRs:
TMP_261(bytes32) = HIGH_LEVEL_CALL, dest:GoalbonanzaBook(GoalbonanzaBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_261(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = GoalbonanzaBook.getPlayerLAff(_pID)

IRs:
TMP_262(uint256) = HIGH_LEVEL_CALL, dest:GoalbonanzaBook(GoalbonanzaBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_262(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_433(uint256) -> pIDxAddr_[msg.sender]
REF_433(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_434(RSdatasets.Player) -> plyr_[_pID]
REF_435(address) -> REF_434.addr
REF_435(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_263(bool) = _name != 
CONDITION TMP_263"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_436(uint256) -> pIDxName_[_name]
REF_436(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_437(RSdatasets.Player) -> plyr_[_pID]
REF_438(bytes32) -> REF_437.name
REF_438(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_439(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_440(bool) -> REF_439[_name]
REF_440(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_264(bool) = _laff != 0
TMP_265(bool) = _laff != _pID
TMP_266(bool) = TMP_264 && TMP_265
CONDITION TMP_266"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_441(RSdatasets.Player) -> plyr_[_pID]
REF_442(uint256) -> REF_441.laff
REF_442(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_443(uint256) -> _eventData_.compressedData
REF_444(uint256) -> _eventData_.compressedData
TMP_267(uint256) = REF_444 + 1
REF_443(uint256) (->_eventData_) := TMP_267(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1162.sol-GoalbonanzaPlus-distributeExternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth * 15 / 100

IRs:
TMP_340(uint256) = _eth * 15
TMP_341(uint256) = TMP_340 / 100
_com(uint256) := TMP_341(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_342(uint256) = _eth / 10
_aff(uint256) := TMP_342(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_343(bool) = _affID != _pID
REF_543(RSdatasets.Player) -> plyr_[_affID]
REF_544(bytes32) -> REF_543.name
TMP_344(bool) = REF_544 != 
TMP_345(bool) = TMP_343 && TMP_344
CONDITION TMP_345"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_545(RSdatasets.Player) -> plyr_[_affID]
REF_546(uint256) -> REF_545.aff
REF_548(RSdatasets.Player) -> plyr_[_affID]
REF_549(uint256) -> REF_548.aff
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_549'] 
REF_546(uint256) (->plyr_) := TMP_346(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
RSEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_551(RSdatasets.Player) -> plyr_[_affID]
REF_552(address) -> REF_551.addr
REF_553(RSdatasets.Player) -> plyr_[_affID]
REF_554(bytes32) -> REF_553.name
Emit onAffiliatePayout(_affID,REF_552,REF_554,_rID,_pID,_aff,now)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_com += _aff

IRs:
_com(uint256) = _com + _aff"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! address(TeamGoalbonanza).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_348 = CONVERT TeamGoalbonanza to address
TMP_350(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_351 = CONVERT TMP_350 to bytes4
TMP_352(bool) = LOW_LEVEL_CALL, dest:TMP_348, function:call, arguments:['TMP_351'] value:_com 
TMP_353 = UnaryType.BANG TMP_352 
CONDITION TMP_353"];
8->9[label="True"];
8->9[label="False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1162.sol-GoalbonanzaPlus-distributeInternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_)) / 100

IRs:
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'fees_'] 
TMP_355(uint256) = TMP_354 / 100
_gen(uint256) := TMP_355(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 1000)

IRs:
TMP_356(uint256) = _eth / 1000
_air(uint256) := TMP_356(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_357(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = (_eth.mul(249) / 1000)

IRs:
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '249'] 
TMP_359(uint256) = TMP_358 / 1000
_pot(uint256) := TMP_359(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_360(uint256) = INTERNAL_CALL, GoalbonanzaPlus.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_360(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_361(bool) = _dust > 0
CONDITION TMP_361"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_362(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_561(RSdatasets.Round) -> round_[_rID]
REF_562(uint256) -> REF_561.pot
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_565(RSdatasets.Round) -> round_[_rID]
REF_566(uint256) -> REF_565.pot
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_363', 'REF_566'] 
REF_562(uint256) (->round_) := TMP_364(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_567(uint256) -> _eventData_.genAmount
REF_569(uint256) -> _eventData_.genAmount
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_569'] 
REF_567(uint256) (->_eventData_) := TMP_365(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_570(uint256) -> _eventData_.potAmount
REF_570(uint256) (->_eventData_) := _pot(uint256)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1162.sol-GoalbonanzaPlus-endRound(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_453(RSdatasets.Round) -> round_[_rID]
REF_454(uint256) -> REF_453.plyr
_winPID(uint256) := REF_454(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_455(RSdatasets.Round) -> round_[_rID]
REF_456(uint256) -> REF_455.pot
_pot(uint256) := REF_456(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_win = (_pot.mul(45)) / 100

IRs:
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '45'] 
TMP_272(uint256) = TMP_271 / 100
_win(uint256) := TMP_272(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_com = (_pot / 10)

IRs:
TMP_273(uint256) = _pot / 10
_com(uint256) := TMP_273(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_gen = (_pot.mul(potSplit_)) / 100

IRs:
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'potSplit_'] 
TMP_275(uint256) = TMP_274 / 100
_gen(uint256) := TMP_275(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen))

IRs:
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_276', '_com'] 
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_277', '_gen'] 
_res(uint256) := TMP_278(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_463(RSdatasets.Round) -> round_[_rID]
REF_464(uint256) -> REF_463.keys
TMP_280(uint256) = TMP_279 / REF_464
_ppt(uint256) := TMP_280(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_467(RSdatasets.Round) -> round_[_rID]
REF_468(uint256) -> REF_467.keys
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_468'] 
TMP_282(uint256) = TMP_281 / 1000000000000000000
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_282'] 
_dust(uint256) := TMP_283(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_dust > 0

IRs:
TMP_284(bool) = _dust > 0
CONDITION TMP_284"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_285(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_res = _com.add(_dust)

IRs:
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_dust'] 
_res(uint256) := TMP_286(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_471(RSdatasets.Player) -> plyr_[_winPID]
REF_472(uint256) -> REF_471.win
REF_474(RSdatasets.Player) -> plyr_[_winPID]
REF_475(uint256) -> REF_474.win
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_475'] 
REF_472(uint256) (->plyr_) := TMP_287(uint256)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
! address(TeamGoalbonanza).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_288 = CONVERT TeamGoalbonanza to address
TMP_290(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_291 = CONVERT TMP_290 to bytes4
TMP_292(bool) = LOW_LEVEL_CALL, dest:TMP_288, function:call, arguments:['TMP_291'] value:_com 
TMP_293 = UnaryType.BANG TMP_292 
CONDITION TMP_293"];
15->16[label="True"];
15->18[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_gen = _gen.add(_com)

IRs:
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', '_com'] 
_gen(uint256) := TMP_294(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_479(RSdatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.mask
REF_482(RSdatasets.Round) -> round_[_rID]
REF_483(uint256) -> REF_482.mask
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_483'] 
REF_480(uint256) (->round_) := TMP_295(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_484(uint256) -> _eventData_.compressedData
REF_485(uint256) -> _eventData_.compressedData
REF_486(RSdatasets.Round) -> round_[_rID]
REF_487(uint256) -> REF_486.end
TMP_296(uint256) = REF_487 * 1000000
TMP_297(uint256) = REF_485 + TMP_296
REF_484(uint256) (->_eventData_) := TMP_297(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000)

IRs:
REF_488(uint256) -> _eventData_.compressedIDs
REF_489(uint256) -> _eventData_.compressedIDs
TMP_298(uint256) = _winPID * 100000000000000000000000000
TMP_299(uint256) = REF_489 + TMP_298
REF_488(uint256) (->_eventData_) := TMP_299(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_490(address) -> _eventData_.winnerAddr
REF_491(RSdatasets.Player) -> plyr_[_winPID]
REF_492(address) -> REF_491.addr
REF_490(address) (->_eventData_) := REF_492(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_493(bytes32) -> _eventData_.winnerName
REF_494(RSdatasets.Player) -> plyr_[_winPID]
REF_495(bytes32) -> REF_494.name
REF_493(bytes32) (->_eventData_) := REF_495(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_496(uint256) -> _eventData_.amountWon
REF_496(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_497(uint256) -> _eventData_.genAmount
REF_497(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_498(uint256) -> _eventData_.newPot
REF_498(uint256) (->_eventData_) := _res(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
rID_ ++

IRs:
TMP_300(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_rID ++

IRs:
TMP_301(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_499(RSdatasets.Round) -> round_[_rID]
REF_500(uint256) -> REF_499.strt
REF_500(uint256) (->round_) := now(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_501(RSdatasets.Round) -> round_[_rID]
REF_502(uint256) -> REF_501.end
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_302', 'rndGap_'] 
REF_502(uint256) (->round_) := TMP_303(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_505(RSdatasets.Round) -> round_[_rID]
REF_506(uint256) -> REF_505.pot
REF_506(uint256) (->round_) := _res(uint256)"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1162.sol-GoalbonanzaPlus-endTx(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000)

IRs:
REF_611(uint256) -> _eventData_.compressedData
REF_612(uint256) -> _eventData_.compressedData
TMP_382(uint256) = now * 1000000000000000000
TMP_383(uint256) = REF_612 + TMP_382
REF_611(uint256) (->_eventData_) := TMP_383(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_613(uint256) -> _eventData_.compressedIDs
REF_614(uint256) -> _eventData_.compressedIDs
TMP_384(uint256) = REF_614 + _pID
TMP_385(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_386(uint256) = TMP_384 + TMP_385
REF_613(uint256) (->_eventData_) := TMP_386(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RSEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_616(uint256) -> _eventData_.compressedData
REF_617(uint256) -> _eventData_.compressedIDs
REF_618(RSdatasets.Player) -> plyr_[_pID]
REF_619(bytes32) -> REF_618.name
REF_620(address) -> _eventData_.winnerAddr
REF_621(bytes32) -> _eventData_.winnerName
REF_622(uint256) -> _eventData_.amountWon
REF_623(uint256) -> _eventData_.newPot
REF_624(uint256) -> _eventData_.genAmount
REF_625(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_616,REF_617,REF_619,msg.sender,_eth,_keys,REF_620,REF_621,REF_622,REF_623,REF_624,REF_625,airDropPot_)"];
}
// Function: 1162.sol-GoalbonanzaPlus-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_0(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_0(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_0(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_1(RSdatasets.Player) -> plyr_[_pID]
REF_2(uint256) -> REF_1.laff
INTERNAL_CALL, GoalbonanzaPlus.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,REF_2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1162.sol-GoalbonanzaPlus-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_112(RSdatasets.Round) -> round_[_rID]
REF_113(uint256) -> REF_112.strt
TMP_89(uint256) = REF_113 + rndGap_
TMP_90(bool) = _now > TMP_89
REF_114(RSdatasets.Round) -> round_[_rID]
REF_115(uint256) -> REF_114.end
TMP_91(bool) = _now <= REF_115
REF_116(RSdatasets.Round) -> round_[_rID]
REF_117(uint256) -> REF_116.end
TMP_92(bool) = _now > REF_117
REF_118(RSdatasets.Round) -> round_[_rID]
REF_119(uint256) -> REF_118.plyr
TMP_93(bool) = REF_119 == 0
TMP_94(bool) = TMP_92 && TMP_93
TMP_95(bool) = TMP_91 || TMP_94
TMP_96(bool) = TMP_90 && TMP_95
CONDITION TMP_96"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_120(RSdatasets.Round) -> round_[_rID]
REF_121(uint256) -> REF_120.keys
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_121', '1000000000000000000'] 
TMP_98(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_97', '1000000000000000000'] 
RETURN TMP_98"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 1162.sol-GoalbonanzaPlus-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].plyr * 10),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_190(RSdatasets.Round) -> round_[_rID]
REF_191(uint256) -> REF_190.keys
REF_192(RSdatasets.Round) -> round_[_rID]
REF_193(uint256) -> REF_192.end
REF_194(RSdatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.strt
REF_196(RSdatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.pot
REF_198(RSdatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.plyr
TMP_129(uint256) = REF_199 * 10
REF_200(RSdatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.plyr
REF_202(RSdatasets.Player) -> plyr_[REF_201]
REF_203(address) -> REF_202.addr
REF_204(RSdatasets.Round) -> round_[_rID]
REF_205(uint256) -> REF_204.plyr
REF_206(RSdatasets.Player) -> plyr_[REF_205]
REF_207(bytes32) -> REF_206.name
TMP_130(uint256) = airDropPot_ * 1000
TMP_131(uint256) = airDropTracker_ + TMP_130
RETURN REF_191,REF_193,REF_195,REF_197,TMP_129,REF_203,REF_207,TMP_131"];
}
// Function: 1162.sol-GoalbonanzaPlus-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_132 = CONVERT 0 to address
TMP_133(bool) = _addr == TMP_132
CONDITION TMP_133"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_134(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_208(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_208(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_209(RSdatasets.Player) -> plyr_[_pID]
REF_210(bytes32) -> REF_209.name
REF_211(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_212(RSdatasets.PlayerRounds) -> REF_211[_rID]
REF_213(uint256) -> REF_212.keys
REF_214(RSdatasets.Player) -> plyr_[_pID]
REF_215(uint256) -> REF_214.win
REF_216(RSdatasets.Player) -> plyr_[_pID]
REF_217(uint256) -> REF_216.gen
REF_219(RSdatasets.Player) -> plyr_[_pID]
REF_220(uint256) -> REF_219.lrnd
TMP_135(uint256) = INTERNAL_CALL, GoalbonanzaPlus.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_220)
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_217', 'TMP_135'] 
REF_221(RSdatasets.Player) -> plyr_[_pID]
REF_222(uint256) -> REF_221.aff
REF_223(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_224(RSdatasets.PlayerRounds) -> REF_223[_rID]
REF_225(uint256) -> REF_224.eth
RETURN _pID,REF_210,REF_213,REF_215,TMP_136,REF_222,REF_225"];
}
// Function: 1162.sol-GoalbonanzaPlus-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_134(RSdatasets.Round) -> round_[_rID]
REF_135(uint256) -> REF_134.end
TMP_105(bool) = now > REF_135
REF_136(RSdatasets.Round) -> round_[_rID]
REF_137(bool) -> REF_136.ended
TMP_106(bool) = REF_137 == False
TMP_107(bool) = TMP_105 && TMP_106
REF_138(RSdatasets.Round) -> round_[_rID]
REF_139(uint256) -> REF_138.plyr
TMP_108(bool) = REF_139 != 0
TMP_109(bool) = TMP_107 && TMP_108
CONDITION TMP_109"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_140(RSdatasets.Round) -> round_[_rID]
REF_141(uint256) -> REF_140.plyr
TMP_110(bool) = REF_141 == _pID
CONDITION TMP_110"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_142(RSdatasets.Player) -> plyr_[_pID]
REF_143(uint256) -> REF_142.win
REF_145(RSdatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.pot
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_146', '48'] 
TMP_112(uint256) = TMP_111 / 100
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_143', 'TMP_112'] 
REF_148(RSdatasets.Player) -> plyr_[_pID]
REF_149(uint256) -> REF_148.gen
TMP_114(uint256) = INTERNAL_CALL, GoalbonanzaPlus.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_152(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_153(RSdatasets.PlayerRounds) -> REF_152[_rID]
REF_154(uint256) -> REF_153.mask
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_114', 'REF_154'] 
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_149', 'TMP_115'] 
REF_155(RSdatasets.Player) -> plyr_[_pID]
REF_156(uint256) -> REF_155.aff
RETURN TMP_113,TMP_116,REF_156"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_157(RSdatasets.Player) -> plyr_[_pID]
REF_158(uint256) -> REF_157.win
REF_159(RSdatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.gen
TMP_117(uint256) = INTERNAL_CALL, GoalbonanzaPlus.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_163(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_164(RSdatasets.PlayerRounds) -> REF_163[_rID]
REF_165(uint256) -> REF_164.mask
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', 'REF_165'] 
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_118'] 
REF_166(RSdatasets.Player) -> plyr_[_pID]
REF_167(uint256) -> REF_166.aff
RETURN REF_158,TMP_119,REF_167"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_168(RSdatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.win
REF_170(RSdatasets.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.gen
REF_173(RSdatasets.Player) -> plyr_[_pID]
REF_174(uint256) -> REF_173.lrnd
TMP_120(uint256) = INTERNAL_CALL, GoalbonanzaPlus.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_174)
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_171', 'TMP_120'] 
REF_175(RSdatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.aff
RETURN REF_169,TMP_121,REF_176"];
}
// Function: 1162.sol-GoalbonanzaPlus-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_177(RSdatasets.Round) -> round_[_rID]
REF_178(uint256) -> REF_177.mask
REF_180(RSdatasets.Round) -> round_[_rID]
REF_181(uint256) -> REF_180.pot
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_181', 'potSplit_'] 
TMP_123(uint256) = TMP_122 / 100
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', '1000000000000000000'] 
REF_184(RSdatasets.Round) -> round_[_rID]
REF_185(uint256) -> REF_184.keys
TMP_125(uint256) = TMP_124 / REF_185
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_178', 'TMP_125'] 
REF_187(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_188(RSdatasets.PlayerRounds) -> REF_187[_rID]
REF_189(uint256) -> REF_188.keys
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_126', 'REF_189'] 
TMP_128(uint256) = TMP_127 / 1000000000000000000
RETURN TMP_128"];
}
// Function: 1162.sol-GoalbonanzaPlus-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_124(RSdatasets.Round) -> round_[_rID]
REF_125(uint256) -> REF_124.end
TMP_99(bool) = _now < REF_125
CONDITION TMP_99"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_126(RSdatasets.Round) -> round_[_rID]
REF_127(uint256) -> REF_126.strt
TMP_100(uint256) = REF_127 + rndGap_
TMP_101(bool) = _now > TMP_100
CONDITION TMP_101"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_128(RSdatasets.Round) -> round_[_rID]
REF_129(uint256) -> REF_128.end
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_129', '_now'] 
RETURN TMP_102"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_131(RSdatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.strt
TMP_103(uint256) = REF_132 + rndGap_
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_103', '_now'] 
RETURN TMP_104"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1162.sol-GoalbonanzaPlus-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_392(RSdatasets.Round) -> round_[_rID]
REF_393(uint256) -> REF_392.strt
TMP_235(uint256) = REF_393 + rndGap_
TMP_236(bool) = _now > TMP_235
REF_394(RSdatasets.Round) -> round_[_rID]
REF_395(uint256) -> REF_394.end
TMP_237(bool) = _now <= REF_395
REF_396(RSdatasets.Round) -> round_[_rID]
REF_397(uint256) -> REF_396.end
TMP_238(bool) = _now > REF_397
REF_398(RSdatasets.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.plyr
TMP_239(bool) = REF_399 == 0
TMP_240(bool) = TMP_238 && TMP_239
TMP_241(bool) = TMP_237 || TMP_240
TMP_242(bool) = TMP_236 && TMP_241
CONDITION TMP_242"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_400(RSdatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.keys
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_401', '_keys'] 
TMP_244(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_243', '_keys'] 
RETURN TMP_244"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_245(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_245"];
}
// Function: 1162.sol-GoalbonanzaPlus-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet)

IRs:
TMP_396(bool) = activated_ == True
TMP_397(None) = SOLIDITY_CALL require(bool,string)(TMP_396,its not ready yet)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1162.sol-GoalbonanzaPlus-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_398(bool) = _addr == tx.origin
TMP_399(None) = SOLIDITY_CALL require(bool)(TMP_398)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_400(bool) = _codeLength == 0
TMP_401(None) = SOLIDITY_CALL require(bool,string)(TMP_400,sorry humans only)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 1162.sol-GoalbonanzaPlus-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,too little money)

IRs:
TMP_402(bool) = _eth >= 1000000000
TMP_403(None) = SOLIDITY_CALL require(bool,string)(TMP_402,too little money)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,too much money)

IRs:
TMP_404(bool) = _eth <= 100000000000000000000000
TMP_405(None) = SOLIDITY_CALL require(bool,string)(TMP_404,too much money)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1162.sol-GoalbonanzaPlus-managePlayer(uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_445(RSdatasets.Player) -> plyr_[_pID]
REF_446(uint256) -> REF_445.lrnd
TMP_268(bool) = REF_446 != 0
CONDITION TMP_268"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_447(RSdatasets.Player) -> plyr_[_pID]
REF_448(uint256) -> REF_447.lrnd
INTERNAL_CALL, GoalbonanzaPlus.updateGenVault(uint256,uint256)(_pID,REF_448)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_449(RSdatasets.Player) -> plyr_[_pID]
REF_450(uint256) -> REF_449.lrnd
REF_450(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_451(uint256) -> _eventData_.compressedData
REF_452(uint256) -> _eventData_.compressedData
TMP_270(uint256) = REF_452 + 10
REF_451(uint256) (->_eventData_) := TMP_270(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1162.sol-GoalbonanzaPlus-reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_259(RSdatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.strt
TMP_155(uint256) = REF_260 + rndGap_
TMP_156(bool) = _now > TMP_155
REF_261(RSdatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_157(bool) = _now <= REF_262
REF_263(RSdatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.end
TMP_158(bool) = _now > REF_264
REF_265(RSdatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.plyr
TMP_159(bool) = REF_266 == 0
TMP_160(bool) = TMP_158 && TMP_159
TMP_161(bool) = TMP_157 || TMP_160
TMP_162(bool) = TMP_156 && TMP_161
CONDITION TMP_162"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_267(RSdatasets.Player) -> plyr_[_pID]
REF_268(uint256) -> REF_267.gen
TMP_163(uint256) = INTERNAL_CALL, GoalbonanzaPlus.withdrawEarnings(uint256)(_pID)
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_163', '_eth'] 
REF_268(uint256) (->plyr_) := TMP_164(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.core(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,_eth,_affID,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_270(RSdatasets.Round) -> round_[_rID]
REF_271(uint256) -> REF_270.end
TMP_166(bool) = _now > REF_271
REF_272(RSdatasets.Round) -> round_[_rID]
REF_273(bool) -> REF_272.ended
TMP_167(bool) = REF_273 == False
TMP_168(bool) = TMP_166 && TMP_167
CONDITION TMP_168"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_274(RSdatasets.Round) -> round_[_rID]
REF_275(bool) -> REF_274.ended
REF_275(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_169(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_169(RSdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_276(uint256) -> _eventData_.compressedData
REF_277(uint256) -> _eventData_.compressedData
TMP_170(uint256) = _now * 1000000000000000000
TMP_171(uint256) = REF_277 + TMP_170
REF_276(uint256) (->_eventData_) := TMP_171(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_278(uint256) -> _eventData_.compressedIDs
REF_279(uint256) -> _eventData_.compressedIDs
TMP_172(uint256) = REF_279 + _pID
REF_278(uint256) (->_eventData_) := TMP_172(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
RSEvents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_281(RSdatasets.Player) -> plyr_[_pID]
REF_282(bytes32) -> REF_281.name
REF_283(uint256) -> _eventData_.compressedData
REF_284(uint256) -> _eventData_.compressedIDs
REF_285(address) -> _eventData_.winnerAddr
REF_286(bytes32) -> _eventData_.winnerName
REF_287(uint256) -> _eventData_.amountWon
REF_288(uint256) -> _eventData_.newPot
REF_289(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_282,REF_283,REF_284,REF_285,REF_286,REF_287,REF_288,REF_289)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1162.sol-GoalbonanzaPlus-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _affCode == TMP_41
TMP_43(bool) = _affCode == msg.sender
TMP_44(bool) = TMP_42 || TMP_43
CONDITION TMP_44"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_36(RSdatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
_affID(uint256) := REF_37(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_38(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_38(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_39(RSdatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
TMP_45(bool) = _affID != REF_40
CONDITION TMP_45"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_41(RSdatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
REF_42(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 1162.sol-GoalbonanzaPlus-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_33(bool) = _affCode == 0
TMP_34(bool) = _affCode == _pID
TMP_35(bool) = TMP_33 || TMP_34
CONDITION TMP_35"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_29(RSdatasets.Player) -> plyr_[_pID]
REF_30(uint256) -> REF_29.laff
_affCode(uint256) := REF_30(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_31(RSdatasets.Player) -> plyr_[_pID]
REF_32(uint256) -> REF_31.laff
TMP_36(bool) = _affCode != REF_32
CONDITION TMP_36"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_33(RSdatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
REF_34(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 1162.sol-GoalbonanzaPlus-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_43(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_43(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_50(bool) = _affCode == 
REF_44(RSdatasets.Player) -> plyr_[_pID]
REF_45(bytes32) -> REF_44.name
TMP_51(bool) = _affCode == REF_45
TMP_52(bool) = TMP_50 || TMP_51
CONDITION TMP_52"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_46(RSdatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
_affID(uint256) := REF_47(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_48(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_48(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_49(RSdatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
TMP_53(bool) = _affID != REF_50
CONDITION TMP_53"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_51(RSdatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
REF_52(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, GoalbonanzaPlus.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 1162.sol-GoalbonanzaPlus-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(GoalbonanzaBook),only GoalbonanzaBook can call this function)

IRs:
TMP_246 = CONVERT GoalbonanzaBook to address
TMP_247(bool) = msg.sender == TMP_246
TMP_248(None) = SOLIDITY_CALL require(bool,string)(TMP_247,only GoalbonanzaBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_405(uint256) -> pIDxAddr_[_addr]
TMP_249(bool) = REF_405 != _pID
CONDITION TMP_249"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_406(uint256) -> pIDxAddr_[_addr]
REF_406(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_407(uint256) -> pIDxName_[_name]
TMP_250(bool) = REF_407 != _pID
CONDITION TMP_250"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_408(uint256) -> pIDxName_[_name]
REF_408(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_409(RSdatasets.Player) -> plyr_[_pID]
REF_410(address) -> REF_409.addr
TMP_251(bool) = REF_410 != _addr
CONDITION TMP_251"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_411(RSdatasets.Player) -> plyr_[_pID]
REF_412(address) -> REF_411.addr
REF_412(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_413(RSdatasets.Player) -> plyr_[_pID]
REF_414(bytes32) -> REF_413.name
TMP_252(bool) = REF_414 != _name
CONDITION TMP_252"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_415(RSdatasets.Player) -> plyr_[_pID]
REF_416(bytes32) -> REF_415.name
REF_416(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_417(RSdatasets.Player) -> plyr_[_pID]
REF_418(uint256) -> REF_417.laff
TMP_253(bool) = REF_418 != _laff
CONDITION TMP_253"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_419(RSdatasets.Player) -> plyr_[_pID]
REF_420(uint256) -> REF_419.laff
REF_420(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_421(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_422(bool) -> REF_421[_name]
TMP_254(bool) = REF_422 == False
CONDITION TMP_254"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_423(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_424(bool) -> REF_423[_name]
REF_424(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1162.sol-GoalbonanzaPlus-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(GoalbonanzaBook),only GoalbonanzaBook can call this function)

IRs:
TMP_255 = CONVERT GoalbonanzaBook to address
TMP_256(bool) = msg.sender == TMP_255
TMP_257(None) = SOLIDITY_CALL require(bool,string)(TMP_256,only GoalbonanzaBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_425(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_426(bool) -> REF_425[_name]
TMP_258(bool) = REF_426 == False
CONDITION TMP_258"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_427(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_428(bool) -> REF_427[_name]
REF_428(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1162.sol-GoalbonanzaPlus-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_77(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_77(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = GoalbonanzaBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:GoalbonanzaBook(GoalbonanzaBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_88(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_88(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_90(RSdatasets.Player) -> plyr_[_affID]
REF_91(address) -> REF_90.addr
REF_92(RSdatasets.Player) -> plyr_[_affID]
REF_93(bytes32) -> REF_92.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_91,REF_93,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
9->1;
}
// Function: 1162.sol-GoalbonanzaPlus-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_81(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = GoalbonanzaBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:GoalbonanzaBook(GoalbonanzaBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_97(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_97(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_99(RSdatasets.Player) -> plyr_[_affID]
REF_100(address) -> REF_99.addr
REF_101(RSdatasets.Player) -> plyr_[_affID]
REF_102(bytes32) -> REF_101.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_100,REF_102,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
9->1;
}
// Function: 1162.sol-GoalbonanzaPlus-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_85(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = GoalbonanzaBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:GoalbonanzaBook(GoalbonanzaBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_106(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_106(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_108(RSdatasets.Player) -> plyr_[_affID]
REF_109(address) -> REF_108.addr
REF_110(RSdatasets.Player) -> plyr_[_affID]
REF_111(bytes32) -> REF_110.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_109,REF_111,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
9->1;
}
// Function: 1162.sol-GoalbonanzaPlus-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TeamGoalbonanza = GoalbonanzaInterfaceForForwarder(0xffcbd472aa93a45f2f9e61945b2b190d0795317b)

IRs:
TMP_394 = CONVERT 1460338204658923518114685381070673885515474088315 to GoalbonanzaInterfaceForForwarder
TeamGoalbonanza(GoalbonanzaInterfaceForForwarder) := TMP_394(GoalbonanzaInterfaceForForwarder)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
GoalbonanzaBook = GoalbonanzaBookInterface(0x0376a6E256DD4B2419973964fCd5d3CB49B53Aef)

IRs:
TMP_395 = CONVERT 19772997904640357720529759126053811982022556399 to GoalbonanzaBookInterface
GoalbonanzaBook(GoalbonanzaBookInterface) := TMP_395(GoalbonanzaBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = GoalbonanzaPlus Multiple Rounds

IRs:
name(string) := GoalbonanzaPlus Multiple Rounds(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = GB+

IRs:
symbol(string) := GB+(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 1800

IRs:
rndMax_(uint256) := 1800(uint256)"];
}
// Function: 1162.sol-GoalbonanzaPlus-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
fees_ = 50

IRs:
fees_(uint256) := 50(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
potSplit_ = 45

IRs:
potSplit_(uint256) := 45(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 1162.sol-GoalbonanzaPlus-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_304(uint256) = INTERNAL_CALL, GoalbonanzaPlus.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_304(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_305(bool) = _earnings > 0
CONDITION TMP_305"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_507(RSdatasets.Player) -> plyr_[_pID]
REF_508(uint256) -> REF_507.gen
REF_510(RSdatasets.Player) -> plyr_[_pID]
REF_511(uint256) -> REF_510.gen
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_511'] 
REF_508(uint256) (->plyr_) := TMP_306(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_512(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_513(RSdatasets.PlayerRounds) -> REF_512[_rIDlast]
REF_514(uint256) -> REF_513.mask
REF_516(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_517(RSdatasets.PlayerRounds) -> REF_516[_rIDlast]
REF_518(uint256) -> REF_517.mask
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_518'] 
REF_514(uint256) (->plyrRnds_) := TMP_307(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1162.sol-GoalbonanzaPlus-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_572(RSdatasets.Round) -> round_[_rID]
REF_573(uint256) -> REF_572.keys
TMP_367(uint256) = TMP_366 / REF_573
_ppt(uint256) := TMP_367(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_574(RSdatasets.Round) -> round_[_rID]
REF_575(uint256) -> REF_574.mask
REF_577(RSdatasets.Round) -> round_[_rID]
REF_578(uint256) -> REF_577.mask
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_578'] 
REF_575(uint256) (->round_) := TMP_368(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_370(uint256) = TMP_369 / 1000000000000000000
_pearn(uint256) := TMP_370(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_580(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_581(RSdatasets.PlayerRounds) -> REF_580[_rID]
REF_582(uint256) -> REF_581.mask
REF_583(RSdatasets.Round) -> round_[_rID]
REF_584(uint256) -> REF_583.mask
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_584', '_keys'] 
TMP_372(uint256) = TMP_371 / 1000000000000000000
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_372', '_pearn'] 
REF_588(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_589(RSdatasets.PlayerRounds) -> REF_588[_rID]
REF_590(uint256) -> REF_589.mask
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_373', 'REF_590'] 
REF_582(uint256) (->plyrRnds_) := TMP_374(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_593(RSdatasets.Round) -> round_[_rID]
REF_594(uint256) -> REF_593.keys
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_594'] 
TMP_376(uint256) = TMP_375 / 1000000000000000000
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_376'] 
RETURN TMP_377"];
}
// Function: 1162.sol-GoalbonanzaPlus-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_519(RSdatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.end
TMP_308(bool) = _now > REF_520
REF_521(RSdatasets.Round) -> round_[_rID]
REF_522(uint256) -> REF_521.plyr
TMP_309(bool) = REF_522 == 0
TMP_310(bool) = TMP_308 && TMP_309
CONDITION TMP_310"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_311(uint256) = _keys / 1000000000000000000
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_311', 'rndInc_'] 
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_312', '_now'] 
_newTime(uint256) := TMP_313(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_314(uint256) = _keys / 1000000000000000000
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_314', 'rndInc_'] 
REF_527(RSdatasets.Round) -> round_[_rID]
REF_528(uint256) -> REF_527.end
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_315', 'REF_528'] 
_newTime(uint256) := TMP_316(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_318(bool) = _newTime < TMP_317
CONDITION TMP_318"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_530(RSdatasets.Round) -> round_[_rID]
REF_531(uint256) -> REF_530.end
REF_531(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_532(RSdatasets.Round) -> round_[_rID]
REF_533(uint256) -> REF_532.end
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_533(uint256) (->round_) := TMP_319(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1162.sol-GoalbonanzaPlus-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_54(RSdatasets.Round) -> round_[_rID]
REF_55(uint256) -> REF_54.end
TMP_58(bool) = _now > REF_55
REF_56(RSdatasets.Round) -> round_[_rID]
REF_57(bool) -> REF_56.ended
TMP_59(bool) = REF_57 == False
TMP_60(bool) = TMP_58 && TMP_59
REF_58(RSdatasets.Round) -> round_[_rID]
REF_59(uint256) -> REF_58.plyr
TMP_61(bool) = REF_59 != 0
TMP_62(bool) = TMP_60 && TMP_61
CONDITION TMP_62"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_60(RSdatasets.Round) -> round_[_rID]
REF_61(bool) -> REF_60.ended
REF_61(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_63(RSdatasets.EventReturns) = INTERNAL_CALL, GoalbonanzaPlus.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_63(RSdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_64(uint256) = INTERNAL_CALL, GoalbonanzaPlus.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_64(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_65(bool) = _eth > 0
CONDITION TMP_65"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_62(RSdatasets.Player) -> plyr_[_pID]
REF_63(address) -> REF_62.addr
Transfer dest:REF_63 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_65(uint256) -> _eventData_.compressedData
REF_66(uint256) -> _eventData_.compressedData
TMP_67(uint256) = _now * 1000000000000000000
TMP_68(uint256) = REF_66 + TMP_67
REF_65(uint256) (->_eventData_) := TMP_68(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_67(uint256) -> _eventData_.compressedIDs
REF_68(uint256) -> _eventData_.compressedIDs
TMP_69(uint256) = REF_68 + _pID
REF_67(uint256) (->_eventData_) := TMP_69(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
RSEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_70(RSdatasets.Player) -> plyr_[_pID]
REF_71(bytes32) -> REF_70.name
REF_72(uint256) -> _eventData_.compressedData
REF_73(uint256) -> _eventData_.compressedIDs
REF_74(address) -> _eventData_.winnerAddr
REF_75(bytes32) -> _eventData_.winnerName
REF_76(uint256) -> _eventData_.amountWon
REF_77(uint256) -> _eventData_.newPot
REF_78(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_71,_eth,REF_72,REF_73,REF_74,REF_75,REF_76,REF_77,REF_78)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_71(uint256) = INTERNAL_CALL, GoalbonanzaPlus.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_71(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_72(bool) = _eth > 0
CONDITION TMP_72"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_79(RSdatasets.Player) -> plyr_[_pID]
REF_80(address) -> REF_79.addr
Transfer dest:REF_80 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
RSEvents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_83(RSdatasets.Player) -> plyr_[_pID]
REF_84(bytes32) -> REF_83.name
Emit onWithdraw(_pID,msg.sender,REF_84,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GoalbonanzaPlus.isHuman()()"];
23->1;
}
// Function: 1162.sol-GoalbonanzaPlus-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_595(RSdatasets.Player) -> plyr_[_pID]
REF_596(uint256) -> REF_595.lrnd
INTERNAL_CALL, GoalbonanzaPlus.updateGenVault(uint256,uint256)(_pID,REF_596)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_597(RSdatasets.Player) -> plyr_[_pID]
REF_598(uint256) -> REF_597.win
REF_600(RSdatasets.Player) -> plyr_[_pID]
REF_601(uint256) -> REF_600.gen
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_598', 'REF_601'] 
REF_603(RSdatasets.Player) -> plyr_[_pID]
REF_604(uint256) -> REF_603.aff
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_379', 'REF_604'] 
_earnings(uint256) := TMP_380(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_381(bool) = _earnings > 0
CONDITION TMP_381"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_605(RSdatasets.Player) -> plyr_[_pID]
REF_606(uint256) -> REF_605.win
REF_606(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_607(RSdatasets.Player) -> plyr_[_pID]
REF_608(uint256) -> REF_607.gen
REF_608(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_609(RSdatasets.Player) -> plyr_[_pID]
REF_610(uint256) -> REF_609.aff
REF_610(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1162.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_428 = CONVERT _input to bytes
_temp(bytes) := TMP_428(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_645 -> LENGTH _temp
_length(uint256) := REF_645(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_429(bool) = _length <= 32
TMP_430(bool) = _length > 0
TMP_431(bool) = TMP_429 && TMP_430
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_646(None) -> _temp[0]
TMP_433(bool) = REF_646 != 32
TMP_434(uint256) = _length - 1
REF_647(None) -> _temp[TMP_434]
TMP_435(bool) = REF_647 != 32
TMP_436(bool) = TMP_433 && TMP_435
TMP_437(None) = SOLIDITY_CALL require(bool,string)(TMP_436,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_648(None) -> _temp[0]
TMP_438(bool) = REF_648 == 48
CONDITION TMP_438"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_649(None) -> _temp[1]
TMP_439(bool) = REF_649 != 120
TMP_440(None) = SOLIDITY_CALL require(bool,string)(TMP_439,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_650(None) -> _temp[1]
TMP_441(bool) = REF_650 != 88
TMP_442(None) = SOLIDITY_CALL require(bool,string)(TMP_441,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_443(bool) = i < _length
CONDITION TMP_443"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_651(None) -> _temp[i]
TMP_444(bool) = REF_651 > 64
REF_652(None) -> _temp[i]
TMP_445(bool) = REF_652 < 91
TMP_446(bool) = TMP_444 && TMP_445
CONDITION TMP_446"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_653(bytes1) -> _temp[i]
REF_654(None) -> _temp[i]
TMP_447 = CONVERT REF_654 to uint256
TMP_448(uint256) = TMP_447 + 32
TMP_449 = CONVERT TMP_448 to bytes1
REF_653(bytes1) (->_temp) := TMP_449(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_450(bool) = _hasNonNumber == False
CONDITION TMP_450"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_655(None) -> _temp[i]
TMP_451(bool) = REF_655 == 32
REF_656(None) -> _temp[i]
TMP_452(bool) = REF_656 > 96
REF_657(None) -> _temp[i]
TMP_453(bool) = REF_657 < 123
TMP_454(bool) = TMP_452 && TMP_453
TMP_455(bool) = TMP_451 || TMP_454
REF_658(None) -> _temp[i]
TMP_456(bool) = REF_658 > 47
REF_659(None) -> _temp[i]
TMP_457(bool) = REF_659 < 58
TMP_458(bool) = TMP_456 && TMP_457
TMP_459(bool) = TMP_455 || TMP_458
TMP_460(None) = SOLIDITY_CALL require(bool,string)(TMP_459,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_660(None) -> _temp[i]
TMP_461(bool) = REF_660 == 32
CONDITION TMP_461"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_462(uint256) = i + 1
REF_661(None) -> _temp[TMP_462]
TMP_463(bool) = REF_661 != 32
TMP_464(None) = SOLIDITY_CALL require(bool,string)(TMP_463,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_465(bool) = _hasNonNumber == False
REF_662(None) -> _temp[i]
TMP_466(bool) = REF_662 < 48
REF_663(None) -> _temp[i]
TMP_467(bool) = REF_663 > 57
TMP_468(bool) = TMP_466 || TMP_467
TMP_469(bool) = TMP_465 && TMP_468
CONDITION TMP_469"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_470(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_471(bool) = _hasNonNumber == True
TMP_472(None) = SOLIDITY_CALL require(bool,string)(TMP_471,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1162.sol-RSKeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_420'] 
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_422'] 
TMP_424(uint256) = TMP_423 / 2
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_421', 'TMP_424'] 
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_427(uint256) = TMP_425 / TMP_426
RETURN TMP_427"];
}
// Function: 1162.sol-RSKeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_410(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(_curKeys)
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_412(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(TMP_411)
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_410', 'TMP_412'] 
RETURN TMP_413"];
}
// Function: 1162.sol-RSKeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_414', '312500000000000000000000000'] 
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_415', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_416'] 
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_417', '74999921875000000000000000000000'] 
TMP_419(uint256) = TMP_418 / 156250000
RETURN TMP_419"];
}
// Function: 1162.sol-RSKeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_407(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(TMP_406)
TMP_408(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(_curEth)
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_407', 'TMP_408'] 
RETURN TMP_409"];
}
// Function: 1162.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_481(uint256) = a + b
c(uint256) := TMP_481(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_482(bool) = c >= a
TMP_483(None) = SOLIDITY_CALL require(bool,string)(TMP_482,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1162.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_473(bool) = a == 0
CONDITION TMP_473"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_474(uint256) = a * b
c(uint256) := TMP_474(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_475(uint256) = c / a
TMP_476(bool) = TMP_475 == b
TMP_477(None) = SOLIDITY_CALL require(bool,string)(TMP_476,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1162.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_490(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_490"];
}
// Function: 1162.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_484(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_485(uint256) = TMP_484 / 2
z(uint256) := TMP_485(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_486(bool) = z < y
CONDITION TMP_486"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_487(uint256) = x / z
TMP_488(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_487,z)
TMP_489(uint256) = TMP_488 / 2
z(uint256) := TMP_489(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1162.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_478(bool) = b <= a
TMP_479(None) = SOLIDITY_CALL require(bool,string)(TMP_478,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_480(uint256) = a - b
RETURN TMP_480"];
}
}
