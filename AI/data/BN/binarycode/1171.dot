digraph G {
// Function: 1171.sol-ERC20Token-allowance(address,address)
digraph{
}
// Function: 1171.sol-ERC20Token-approve(address,uint256)
digraph{
}
// Function: 1171.sol-ERC20Token-balanceOf(address)
digraph{
}
// Function: 1171.sol-ERC20Token-transfer(address,uint256)
digraph{
}
// Function: 1171.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1171.sol-ExchangeUST-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1171.sol-ExchangeUST-acceptNewOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_51(bool) = msg.sender == newOwner
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateOwner(owner,newOwner)

IRs:
Emit updateOwner(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1171.sol-ExchangeUST-allowance(address,address)
digraph{
}
// Function: 1171.sol-ExchangeUST-approve(address,uint256)
digraph{
}
// Function: 1171.sol-ExchangeUST-balanceOf(address)
digraph{
}
// Function: 1171.sol-ExchangeUST-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner != _newOwner)

IRs:
TMP_48(bool) = owner != _newOwner
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1171.sol-ExchangeUST-chgExchangeRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_exchangeRate != exchangeRate)

IRs:
TMP_68(bool) = _exchangeRate != exchangeRate
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_exchangeRate != 0)

IRs:
TMP_70(bool) = _exchangeRate != 0
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
exchangeRate = _exchangeRate

IRs:
exchangeRate(uint256) := _exchangeRate(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1171.sol-ExchangeUST-exerciseOption(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now < ExerciseEndTime)

IRs:
TMP_73(bool) = now < ExerciseEndTime
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_pustBalance <= balances[msg.sender])

IRs:
REF_38(uint256) -> balances[msg.sender]
TMP_75(bool) = _pustBalance <= REF_38
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_ether = _pustBalance * 10 ** 18

IRs:
TMP_77(uint256) = 10 ** 18
TMP_78(uint256) = _pustBalance * TMP_77
_ether(uint256) := TMP_78(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(address(this).balance >= _ether)

IRs:
TMP_79 = CONVERT this to address
TMP_80(uint256) = SOLIDITY_CALL balance(address)(TMP_79)
TMP_81(bool) = TMP_80 >= _ether
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_amount = _pustBalance * exchangeRate * 10 ** 18

IRs:
TMP_83(uint256) = _pustBalance * exchangeRate
TMP_84(uint256) = 10 ** 18
TMP_85(uint256) = TMP_83 * TMP_84
_amount(uint256) := TMP_85(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(PUST(ustAddress).transferFrom(msg.sender,officialAddress,_amount) == true)

IRs:
TMP_86 = CONVERT ustAddress to PUST
TMP_87(bool) = HIGH_LEVEL_CALL, dest:TMP_86(PUST), function:transferFrom, arguments:['msg.sender', 'officialAddress', '_amount']  
TMP_88(bool) = TMP_87 == True
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_pustBalance)

IRs:
REF_40(uint256) -> balances[msg.sender]
REF_41(uint256) -> balances[msg.sender]
TMP_90(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_41,_pustBalance)
REF_40(uint256) (->balances) := TMP_90(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply = safeSub(totalSupply,_pustBalance)

IRs:
TMP_91(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,_pustBalance)
totalSupply(uint256) := TMP_91(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
msg.sender.transfer(_ether)

IRs:
Transfer dest:msg.sender value:_ether"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
exchange(address(this),msg.sender,_pustBalance)

IRs:
TMP_93 = CONVERT this to address
Emit exchange(TMP_93,msg.sender,_pustBalance)"];
}
// Function: 1171.sol-ExchangeUST-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_97(bool) = msg.sender == owner
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1171.sol-ExchangeUST-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_63(uint256) = a + b
c(uint256) := TMP_63(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_64(bool) = c >= a
TMP_65(bool) = c >= b
TMP_66(bool) = TMP_64 && TMP_65
TMP_67(None) = SOLIDITY_CALL assert(bool)(TMP_66)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1171.sol-ExchangeUST-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_54(uint256) = a * b
c(uint256) := TMP_54(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_55(bool) = a == 0
TMP_56(uint256) = c / a
TMP_57(bool) = TMP_56 == b
TMP_58(bool) = TMP_55 || TMP_57
TMP_59(None) = SOLIDITY_CALL assert(bool)(TMP_58)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1171.sol-ExchangeUST-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_60(bool) = b <= a
TMP_61(None) = SOLIDITY_CALL assert(bool)(TMP_60)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_62(uint256) = a - b
RETURN TMP_62"];
}
// Function: 1171.sol-ExchangeUST-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = UST Put Option

IRs:
name(string) := UST Put Option(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = PUST

IRs:
symbol(string) := PUST(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
topTotalSupply = 0

IRs:
topTotalSupply(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ExerciseEndTime = 1546272000

IRs:
ExerciseEndTime(uint256) := 1546272000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
exchangeRate = 100000

IRs:
exchangeRate(uint256) := 100000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
ustAddress = address(0xFa55951f84Bfbe2E6F95aA74B58cc7047f9F0644)

IRs:
TMP_95 = CONVERT 1429156246503645872331602207594699223504095479364 to address
ustAddress(address) := TMP_95(address)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
officialAddress = address(0x472fc5B96afDbD1ebC5Ae22Ea10bafe45225Bdc6)

IRs:
TMP_96 = CONVERT 406403703967605637119373932511595591069317053894 to address
officialAddress(address) := TMP_96(address)"];
}
// Function: 1171.sol-ExchangeUST-transfer(address,uint256)
digraph{
}
// Function: 1171.sol-ExchangeUST-transferFrom(address,address,uint256)
digraph{
}
// Function: 1171.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1171.sol-Owned-acceptNewOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_3(bool) = msg.sender == newOwner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateOwner(owner,newOwner)

IRs:
Emit updateOwner(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1171.sol-Owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner != _newOwner)

IRs:
TMP_0(bool) = owner != _newOwner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1171.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_6(bool) = msg.sender == owner
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1171.sol-PUST-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowances[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1171.sol-PUST-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowances[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowances[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowances) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1171.sol-PUST-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_14(uint256) -> balances[_owner]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1171.sol-PUST-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = UST Put Option

IRs:
name(string) := UST Put Option(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = PUST

IRs:
symbol(string) := PUST(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
topTotalSupply = 0

IRs:
topTotalSupply(uint256) := 0(uint256)"];
}
// Function: 1171.sol-PUST-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_22(bool) = REF_0 >= _value
REF_1(uint256) -> balances[_to]
TMP_23(uint256) = REF_1 + _value
REF_2(uint256) -> balances[_to]
TMP_24(bool) = TMP_23 >= REF_2
TMP_25(bool) = TMP_22 && TMP_24
CONDITION TMP_25"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1171.sol-PUST-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowances[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]

IRs:
REF_5(uint256) -> balances[_from]
TMP_27(bool) = REF_5 >= _value
REF_6(mapping(address => uint256)) -> allowances[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_28(bool) = REF_7 >= _value
TMP_29(bool) = TMP_27 && TMP_28
REF_8(uint256) -> balances[_to]
TMP_30(uint256) = REF_8 + _value
REF_9(uint256) -> balances[_to]
TMP_31(bool) = TMP_30 >= REF_9
TMP_32(bool) = TMP_29 && TMP_31
CONDITION TMP_32"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_10(uint256) -> balances[_to]
REF_10(-> balances) = REF_10 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowances[_from][msg.sender] -= _value

IRs:
REF_12(mapping(address => uint256)) -> allowances[_from]
REF_13(uint256) -> REF_12[msg.sender]
REF_13(-> allowances) = REF_13 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1171.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1171.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_8(uint256) = a * b
c(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_9(bool) = a == 0
TMP_10(uint256) = c / a
TMP_11(bool) = TMP_10 == b
TMP_12(bool) = TMP_9 || TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1171.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 1171.sol-USTputOption-DepositETH()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == officialAddress)

IRs:
TMP_239(bool) = msg.sender == officialAddress
TMP_240(None) = SOLIDITY_CALL require(bool)(TMP_239)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
topTotalSupply += msg.value / 10 ** 18

IRs:
TMP_241(uint256) = 10 ** 18
TMP_242(uint256) = msg.value / TMP_241
topTotalSupply(uint256) = topTotalSupply + TMP_242"];
}
// Function: 1171.sol-USTputOption-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1171.sol-USTputOption-WithdrawETH()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= ExerciseEndTime)

IRs:
TMP_243(bool) = now >= ExerciseEndTime
TMP_244(None) = SOLIDITY_CALL require(bool)(TMP_243)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
officialAddress.transfer(address(this).balance)

IRs:
TMP_245 = CONVERT this to address
TMP_246(uint256) = SOLIDITY_CALL balance(address)(TMP_245)
Transfer dest:officialAddress value:TMP_246"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 1171.sol-USTputOption-acceptNewOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_142(bool) = msg.sender == newOwner
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateOwner(owner,newOwner)

IRs:
Emit updateOwner(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1171.sol-USTputOption-allocLastTxRewardByHand()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lastEpochBlock = safeAdd(block.number,initBlockEpoch)

IRs:
TMP_249(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(block.number,initBlockEpoch)
lastEpochBlock(uint256) := TMP_249(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
doReward()

IRs:
TMP_250(bool) = INTERNAL_CALL, USTputOption.doReward()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1171.sol-USTputOption-allowance(address,address)
digraph{
}
// Function: 1171.sol-USTputOption-approve(address,uint256)
digraph{
}
// Function: 1171.sol-USTputOption-balanceOf(address)
digraph{
}
// Function: 1171.sol-USTputOption-calcpustprice(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_epochNow - _epochLast > 0)

IRs:
TMP_204(uint256) = _epochNow - _epochLast
TMP_205(bool) = TMP_204 > 0
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
dif = _epochNow - _epochLast

IRs:
TMP_207(uint256) = _epochNow - _epochLast
dif(uint256) := TMP_207(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
dif100 = dif / 100

IRs:
TMP_208(uint256) = dif / 100
dif100(uint256) := TMP_208(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dif = dif - dif100 * 100

IRs:
TMP_209(uint256) = dif100 * 100
TMP_210(uint256) = dif - TMP_209
dif(uint256) := TMP_210(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->12;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < dif100

IRs:
TMP_211(bool) = i < dif100
CONDITION TMP_211"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
price1 = price1 - price1 * 5 / 100

IRs:
TMP_212(uint256) = price1 * 5
TMP_213(uint256) = TMP_212 / 100
TMP_214(uint256) = price1 - TMP_213
price1(uint256) := TMP_214(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
price2 = price2 - price2 * 7 / 1000

IRs:
TMP_215(uint256) = price2 * 7
TMP_216(uint256) = TMP_215 / 1000
TMP_217(uint256) = price2 - TMP_216
price2(uint256) := TMP_217(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_218(uint256) := i(uint256)
i(uint256) = i + 1"];
11->8;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
price1 = price1 - price1 * 5 * dif / 10000

IRs:
TMP_219(uint256) = price1 * 5
TMP_220(uint256) = TMP_219 * dif
TMP_221(uint256) = TMP_220 / 10000
TMP_222(uint256) = price1 - TMP_221
price1(uint256) := TMP_222(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
price2 = price2 - price2 * 7 * dif / 100000

IRs:
TMP_223(uint256) = price2 * 7
TMP_224(uint256) = TMP_223 * dif
TMP_225(uint256) = TMP_224 / 100000
TMP_226(uint256) = price2 - TMP_225
price2(uint256) := TMP_226(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eachPUSTprice = price1 + price2

IRs:
TMP_227(uint256) = price1 + price2
_eachPUSTprice(uint256) := TMP_227(uint256)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
_eachPUSTprice

IRs:
RETURN _eachPUSTprice"];
}
// Function: 1171.sol-USTputOption-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner != _newOwner)

IRs:
TMP_139(bool) = owner != _newOwner
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1171.sol-USTputOption-chgExchangeRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_exchangeRate != exchangeRate)

IRs:
TMP_99(bool) = _exchangeRate != exchangeRate
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_exchangeRate != 0)

IRs:
TMP_101(bool) = _exchangeRate != 0
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
exchangeRate = _exchangeRate

IRs:
exchangeRate(uint256) := _exchangeRate(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1171.sol-USTputOption-doReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
lastEpochTX == 1

IRs:
TMP_228(bool) = lastEpochTX == 1
CONDITION TMP_228"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_lastReward = 0

IRs:
_lastReward(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
lastCallPUST != 0

IRs:
TMP_229(bool) = lastCallPUST != 0
CONDITION TMP_229"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_lastReward = (lastCallPUST - 1) * 2 / 10 + 1

IRs:
TMP_230(uint256) = lastCallPUST - 1
TMP_231(uint256) = TMP_230 * 2
TMP_232(uint256) = TMP_231 / 10
TMP_233(uint256) = TMP_232 + 1
_lastReward(uint256) := TMP_233(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
safeAdd(totalSupply,_lastReward) > topTotalSupply

IRs:
TMP_234(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply,_lastReward)
TMP_235(bool) = TMP_234 > topTotalSupply
CONDITION TMP_235"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_lastReward = safeSub(topTotalSupply,totalSupply)

IRs:
TMP_236(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(topTotalSupply,totalSupply)
_lastReward(uint256) := TMP_236(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[lastCallAddress] = safeAdd(balances[lastCallAddress],_lastReward)

IRs:
REF_72(uint256) -> balances[lastCallAddress]
REF_73(uint256) -> balances[lastCallAddress]
TMP_237(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_73,_lastReward)
REF_72(uint256) (->balances) := TMP_237(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
totalSupply = safeAdd(totalSupply,_lastReward)

IRs:
TMP_238(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply,_lastReward)
totalSupply(uint256) := TMP_238(uint256)"];
}
// Function: 1171.sol-USTputOption-exerciseOption(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now < ExerciseEndTime)

IRs:
TMP_104(bool) = now < ExerciseEndTime
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_pustBalance <= balances[msg.sender])

IRs:
REF_43(uint256) -> balances[msg.sender]
TMP_106(bool) = _pustBalance <= REF_43
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_ether = _pustBalance * 10 ** 18

IRs:
TMP_108(uint256) = 10 ** 18
TMP_109(uint256) = _pustBalance * TMP_108
_ether(uint256) := TMP_109(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(address(this).balance >= _ether)

IRs:
TMP_110 = CONVERT this to address
TMP_111(uint256) = SOLIDITY_CALL balance(address)(TMP_110)
TMP_112(bool) = TMP_111 >= _ether
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_amount = _pustBalance * exchangeRate * 10 ** 18

IRs:
TMP_114(uint256) = _pustBalance * exchangeRate
TMP_115(uint256) = 10 ** 18
TMP_116(uint256) = TMP_114 * TMP_115
_amount(uint256) := TMP_116(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(PUST(ustAddress).transferFrom(msg.sender,officialAddress,_amount) == true)

IRs:
TMP_117 = CONVERT ustAddress to PUST
TMP_118(bool) = HIGH_LEVEL_CALL, dest:TMP_117(PUST), function:transferFrom, arguments:['msg.sender', 'officialAddress', '_amount']  
TMP_119(bool) = TMP_118 == True
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_pustBalance)

IRs:
REF_45(uint256) -> balances[msg.sender]
REF_46(uint256) -> balances[msg.sender]
TMP_121(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_46,_pustBalance)
REF_45(uint256) (->balances) := TMP_121(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply = safeSub(totalSupply,_pustBalance)

IRs:
TMP_122(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,_pustBalance)
totalSupply(uint256) := TMP_122(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
msg.sender.transfer(_ether)

IRs:
Transfer dest:msg.sender value:_ether"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
exchange(address(this),msg.sender,_pustBalance)

IRs:
TMP_124 = CONVERT this to address
Emit exchange(TMP_124,msg.sender,_pustBalance)"];
}
// Function: 1171.sol-USTputOption-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now < ExerciseEndTime)

IRs:
TMP_159(bool) = now < ExerciseEndTime
TMP_160(None) = SOLIDITY_CALL require(bool)(TMP_159)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(topTotalSupply > totalSupply)

IRs:
TMP_161(bool) = topTotalSupply > totalSupply
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
firstCallReward = false

IRs:
firstCallReward(bool) := False(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
epochNow = whichEpoch(block.number)

IRs:
TMP_163(uint256) = INTERNAL_CALL, USTputOption.whichEpoch(uint256)(block.number)
epochNow(uint256) := TMP_163(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
epochNow != epochLast

IRs:
TMP_164(bool) = epochNow != epochLast
CONDITION TMP_164"];
5->6[label="True"];
5->12[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastEpochBlock = safeAdd(lastEpochBlock,((block.number - lastEpochBlock) / initBlockEpoch + 1) * initBlockEpoch)

IRs:
TMP_165(uint256) = block.number - lastEpochBlock
TMP_166(uint256) = TMP_165 / initBlockEpoch
TMP_167(uint256) = TMP_166 + 1
TMP_168(uint256) = TMP_167 * initBlockEpoch
TMP_169(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(lastEpochBlock,TMP_168)
lastEpochBlock(uint256) := TMP_169(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
doReward()

IRs:
TMP_170(bool) = INTERNAL_CALL, USTputOption.doReward()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
eachPUSTprice = calcpustprice(epochNow,epochLast)

IRs:
TMP_171(uint256) = INTERNAL_CALL, USTputOption.calcpustprice(uint256,uint256)(epochNow,epochLast)
eachPUSTprice(uint256) := TMP_171(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
epochLast = epochNow

IRs:
epochLast(uint256) := epochNow(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
firstCallReward = true

IRs:
firstCallReward(bool) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lastEpochTX = 0

IRs:
lastEpochTX(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_value = msg.value

IRs:
_value(uint256) := msg.value(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_PUST = _value / eachPUSTprice

IRs:
TMP_172(uint256) = _value / eachPUSTprice
_PUST(uint256) := TMP_172(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
require(bool)(_PUST > 0)

IRs:
TMP_173(bool) = _PUST > 0
TMP_174(None) = SOLIDITY_CALL require(bool)(TMP_173)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
safeAdd(totalSupply,_PUST) > topTotalSupply

IRs:
TMP_175(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply,_PUST)
TMP_176(bool) = TMP_175 > topTotalSupply
CONDITION TMP_176"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_PUST = safeSub(topTotalSupply,totalSupply)

IRs:
TMP_177(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(topTotalSupply,totalSupply)
_PUST(uint256) := TMP_177(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
_refound = _value - _PUST * eachPUSTprice

IRs:
TMP_178(uint256) = _PUST * eachPUSTprice
TMP_179(uint256) = _value - TMP_178
_refound(uint256) := TMP_179(uint256)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_refound > 0

IRs:
TMP_180(bool) = _refound > 0
CONDITION TMP_180"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
msg.sender.transfer(_refound)

IRs:
Transfer dest:msg.sender value:_refound"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
balances[msg.sender] = safeAdd(balances[msg.sender],_PUST)

IRs:
REF_68(uint256) -> balances[msg.sender]
REF_69(uint256) -> balances[msg.sender]
TMP_182(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_69,_PUST)
REF_68(uint256) (->balances) := TMP_182(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
totalSupply = safeAdd(totalSupply,_PUST)

IRs:
TMP_183(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply,_PUST)
totalSupply(uint256) := TMP_183(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
buyPUST(msg.sender,_PUST)

IRs:
Emit buyPUST(msg.sender,_PUST)"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
lastCallAddress == address(0) && epochLast == 0

IRs:
TMP_185 = CONVERT 0 to address
TMP_186(bool) = lastCallAddress == TMP_185
TMP_187(bool) = epochLast == 0
TMP_188(bool) = TMP_186 && TMP_187
CONDITION TMP_188"];
26->27[label="True"];
26->28[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
firstCallReward = true

IRs:
firstCallReward(bool) := True(bool)"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
firstCallReward

IRs:
CONDITION firstCallReward"];
29->30[label="True"];
29->37[label="False"];
30[label="Node Type: NEW VARIABLE 30

EXPRESSION:
_firstReward = 0

IRs:
_firstReward(uint256) := 0(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_firstReward = (_PUST - 1) * 2 / 10 + 1

IRs:
TMP_189(uint256) = _PUST - 1
TMP_190(uint256) = TMP_189 * 2
TMP_191(uint256) = TMP_190 / 10
TMP_192(uint256) = TMP_191 + 1
_firstReward(uint256) := TMP_192(uint256)"];
31->32;
32[label="Node Type: IF 32

EXPRESSION:
safeAdd(totalSupply,_firstReward) > topTotalSupply

IRs:
TMP_193(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply,_firstReward)
TMP_194(bool) = TMP_193 > topTotalSupply
CONDITION TMP_194"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_firstReward = safeSub(topTotalSupply,totalSupply)

IRs:
TMP_195(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(topTotalSupply,totalSupply)
_firstReward(uint256) := TMP_195(uint256)"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
balances[msg.sender] = safeAdd(balances[msg.sender],_firstReward)

IRs:
REF_70(uint256) -> balances[msg.sender]
REF_71(uint256) -> balances[msg.sender]
TMP_196(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_71,_firstReward)
REF_70(uint256) (->balances) := TMP_196(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
totalSupply = safeAdd(totalSupply,_firstReward)

IRs:
TMP_197(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply,_firstReward)
totalSupply(uint256) := TMP_197(uint256)"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
lastEpochTX += 1

IRs:
lastEpochTX(uint256) = lastEpochTX + 1"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
lastCallAddress = msg.sender

IRs:
lastCallAddress(address) := msg.sender(address)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
lastCallPUST = _PUST

IRs:
lastCallPUST(uint256) := _PUST(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
lastEpochBlock = safeAdd(lastEpochBlock,eachUserWeight)

IRs:
TMP_198(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(lastEpochBlock,eachUserWeight)
lastEpochBlock(uint256) := TMP_198(uint256)"];
}
// Function: 1171.sol-USTputOption-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_264(bool) = msg.sender == owner
TMP_265(None) = SOLIDITY_CALL require(bool)(TMP_264)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1171.sol-USTputOption-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_154(uint256) = a + b
c(uint256) := TMP_154(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_155(bool) = c >= a
TMP_156(bool) = c >= b
TMP_157(bool) = TMP_155 && TMP_156
TMP_158(None) = SOLIDITY_CALL assert(bool)(TMP_157)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1171.sol-USTputOption-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_145(uint256) = a * b
c(uint256) := TMP_145(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_146(bool) = a == 0
TMP_147(uint256) = c / a
TMP_148(bool) = TMP_147 == b
TMP_149(bool) = TMP_146 || TMP_148
TMP_150(None) = SOLIDITY_CALL assert(bool)(TMP_149)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1171.sol-USTputOption-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_151(bool) = b <= a
TMP_152(None) = SOLIDITY_CALL assert(bool)(TMP_151)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_153(uint256) = a - b
RETURN TMP_153"];
}
// Function: 1171.sol-USTputOption-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = UST Put Option

IRs:
name(string) := UST Put Option(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = PUST

IRs:
symbol(string) := PUST(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
topTotalSupply = 0

IRs:
topTotalSupply(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ExerciseEndTime = 1546272000

IRs:
ExerciseEndTime(uint256) := 1546272000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
exchangeRate = 100000

IRs:
exchangeRate(uint256) := 100000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
ustAddress = address(0xFa55951f84Bfbe2E6F95aA74B58cc7047f9F0644)

IRs:
TMP_252 = CONVERT 1429156246503645872331602207594699223504095479364 to address
ustAddress(address) := TMP_252(address)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
officialAddress = address(0x472fc5B96afDbD1ebC5Ae22Ea10bafe45225Bdc6)

IRs:
TMP_253 = CONVERT 406403703967605637119373932511595591069317053894 to address
officialAddress(address) := TMP_253(address)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
initBlockEpoch = 40

IRs:
initBlockEpoch(uint256) := 40(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
eachUserWeight = 10

IRs:
eachUserWeight(uint256) := 10(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
initEachPUST = 5 * 10 ** 17

IRs:
TMP_254(uint256) = 10 ** 17
TMP_255(uint256) = 5 * TMP_254
initEachPUST(uint256) := TMP_255(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
lastEpochBlock = block.number + initBlockEpoch

IRs:
TMP_256(uint256) = block.number + initBlockEpoch
lastEpochBlock(uint256) := TMP_256(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
price1 = 4 * 9995 * 10 ** 17 / 10000

IRs:
TMP_257(uint256) = 4 * 9995
TMP_258(uint256) = 10 ** 17
TMP_259(uint256) = TMP_257 * TMP_258
TMP_260(uint256) = TMP_259 / 10000
price1(uint256) := TMP_260(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
price2 = 99993 * 10 ** 17 / 100000

IRs:
TMP_261(uint256) = 10 ** 17
TMP_262(uint256) = 99993 * TMP_261
TMP_263(uint256) = TMP_262 / 100000
price2(uint256) := TMP_263(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
eachPUSTprice = initEachPUST

IRs:
eachPUSTprice(uint256) := initEachPUST(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
lastEpochTX = 0

IRs:
lastEpochTX(uint256) := 0(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
epochLast = 0

IRs:
epochLast(uint256) := 0(uint256)"];
}
// Function: 1171.sol-USTputOption-transfer(address,uint256)
digraph{
}
// Function: 1171.sol-USTputOption-transferFrom(address,address,uint256)
digraph{
}
// Function: 1171.sol-USTputOption-whichEpoch(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
lastEpochBlock >= _blocknumber

IRs:
TMP_199(bool) = lastEpochBlock >= _blocknumber
CONDITION TMP_199"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_epochNow = epochLast

IRs:
_epochNow(uint256) := epochLast(uint256)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_epochNow = epochLast + (_blocknumber - lastEpochBlock) / initBlockEpoch + 1

IRs:
TMP_200(uint256) = _blocknumber - lastEpochBlock
TMP_201(uint256) = TMP_200 / initBlockEpoch
TMP_202(uint256) = epochLast + TMP_201
TMP_203(uint256) = TMP_202 + 1
_epochNow(uint256) := TMP_203(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_epochNow

IRs:
RETURN _epochNow"];
}
}
