digraph G {
// Function: 1297.sol-BREBuy-addPlayer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == curConfig.singlePrice)

IRs:
REF_22(uint256) -> curConfig.singlePrice
TMP_18(bool) = msg.value == REF_22
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalPrice = totalPrice + msg.value

IRs:
TMP_20(uint256) = totalPrice + msg.value
totalPrice(uint256) := TMP_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addressArray.push(msg.sender)

IRs:
REF_24 -> LENGTH addressArray
TMP_22(uint256) := REF_24(uint256)
TMP_23(uint256) = TMP_22 + 1
REF_24(uint256) (->addressArray) := TMP_23(uint256)
REF_25(address) -> addressArray[TMP_22]
REF_25(address) (->addressArray) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
addPlayerEvent(gameIndex,msg.sender)

IRs:
Emit addPlayerEvent(gameIndex,msg.sender)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
addressArray.length >= curConfig.totalSize

IRs:
REF_26 -> LENGTH addressArray
REF_27(uint32) -> curConfig.totalSize
TMP_25(bool) = REF_26 >= REF_27
CONDITION TMP_25"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameResult()

IRs:
INTERNAL_CALL, BREBuy.gameResult()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startNewGame()

IRs:
INTERNAL_CALL, BREBuy.startNewGame()()"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 1297.sol-BREBuy-changeConfig(uint32,uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
curConfig.hasChange = true

IRs:
REF_0(bool) -> curConfig.hasChange
REF_0(bool) (->curConfig) := True(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
setConfig.totalSize != _totalSize

IRs:
REF_1(uint32) -> setConfig.totalSize
TMP_8(bool) = REF_1 != _totalSize
CONDITION TMP_8"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setConfig.totalSize = _totalSize

IRs:
REF_2(uint32) -> setConfig.totalSize
REF_2(uint32) (->setConfig) := _totalSize(uint32)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
setConfig.pumpRate != _pumpRate

IRs:
REF_3(uint8) -> setConfig.pumpRate
TMP_9(bool) = REF_3 != _pumpRate
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setConfig.pumpRate = _pumpRate

IRs:
REF_4(uint8) -> setConfig.pumpRate
REF_4(uint8) (->setConfig) := _pumpRate(uint8)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
setConfig.singlePrice != _singlePrice * 1000000000000000

IRs:
REF_5(uint256) -> setConfig.singlePrice
TMP_10(uint256) = _singlePrice * 1000000000000000
TMP_11(bool) = REF_5 != TMP_10
CONDITION TMP_11"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
setConfig.singlePrice = _singlePrice * 1000000000000000

IRs:
REF_6(uint256) -> setConfig.singlePrice
TMP_12(uint256) = _singlePrice * 1000000000000000
REF_6(uint256) (->setConfig) := TMP_12(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BREBuy.onlyOwner()()"];
11->1;
}
// Function: 1297.sol-BREBuy-constructor(uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setConfig = ContractParam(_totalSize,_singlePrice * 1000000000000000,5,false)

IRs:
TMP_0(uint256) = _singlePrice * 1000000000000000
TMP_1(BREBuy.ContractParam) = new ContractParam(_totalSize,TMP_0,5,False)
setConfig(BREBuy.ContractParam) := TMP_1(BREBuy.ContractParam)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
curConfig = ContractParam(_totalSize,_singlePrice * 1000000000000000,5,false)

IRs:
TMP_2(uint256) = _singlePrice * 1000000000000000
TMP_3(BREBuy.ContractParam) = new ContractParam(_totalSize,TMP_2,5,False)
curConfig(BREBuy.ContractParam) := TMP_3(BREBuy.ContractParam)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startNewGame()

IRs:
INTERNAL_CALL, BREBuy.startNewGame()()"];
}
// Function: 1297.sol-BREBuy-gameResult()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
index = getRamdon()

IRs:
TMP_32(uint256) = INTERNAL_CALL, BREBuy.getRamdon()()
index(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lastAddress = addressArray[index]

IRs:
REF_33(address) -> addressArray[index]
lastAddress(address) := REF_33(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
totalBalace = address(this).balance

IRs:
TMP_33 = CONVERT this to address
TMP_34(uint256) = SOLIDITY_CALL balance(address)(TMP_33)
totalBalace(uint256) := TMP_34(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
giveToOwn = totalBalace * curConfig.pumpRate / 100

IRs:
REF_34(uint8) -> curConfig.pumpRate
TMP_35(uint256) = totalBalace * REF_34
TMP_36(uint256) = TMP_35 / 100
giveToOwn(uint256) := TMP_36(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
giveToActor = totalBalace - giveToOwn

IRs:
TMP_37(uint256) = totalBalace - giveToOwn
giveToActor(uint256) := TMP_37(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owner.transfer(giveToOwn)

IRs:
Transfer dest:owner value:giveToOwn"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
lastAddress.transfer(giveToActor)

IRs:
Transfer dest:lastAddress value:giveToActor"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
GameOverEvent(gameIndex,curConfig.totalSize,curConfig.singlePrice,curConfig.pumpRate,lastAddress,now)

IRs:
REF_37(uint32) -> curConfig.totalSize
REF_38(uint256) -> curConfig.singlePrice
REF_39(uint8) -> curConfig.pumpRate
Emit GameOverEvent(gameIndex,REF_37,REF_38,REF_39,lastAddress,now)"];
}
// Function: 1297.sol-BREBuy-getGameInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(gameIndex,curConfig.totalSize,curConfig.singlePrice,curConfig.pumpRate,addressArray,totalPrice)

IRs:
REF_28(uint32) -> curConfig.totalSize
REF_29(uint256) -> curConfig.singlePrice
REF_30(uint8) -> curConfig.pumpRate
RETURN gameIndex,REF_28,REF_29,REF_30,addressArray,totalPrice"];
}
// Function: 1297.sol-BREBuy-getRamdon()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ramdon = keccak256()(abi.encodePacked(ramdon,now,blockhash(uint256)(block.number - 1)))

IRs:
TMP_41(uint256) = block.number - 1
TMP_42(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_41)
TMP_43(bytes) = SOLIDITY_CALL abi.encodePacked()(ramdon,now,TMP_42)
TMP_44(bytes32) = SOLIDITY_CALL keccak256()(TMP_43)
ramdon(bytes32) := TMP_44(bytes32)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < addressArray.length

IRs:
REF_41 -> LENGTH addressArray
TMP_45(bool) = i < REF_41
CONDITION TMP_45"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ramdon = keccak256()(abi.encodePacked(ramdon,now,addressArray[i]))

IRs:
REF_43(address) -> addressArray[i]
TMP_46(bytes) = SOLIDITY_CALL abi.encodePacked()(ramdon,now,REF_43)
TMP_47(bytes32) = SOLIDITY_CALL keccak256()(TMP_46)
ramdon(bytes32) := TMP_47(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_48(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
index = uint256(ramdon) % addressArray.length

IRs:
TMP_49 = CONVERT ramdon to uint256
REF_44 -> LENGTH addressArray
TMP_50(uint256) = TMP_49 % REF_44
index(uint256) := TMP_50(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
index

IRs:
RETURN index"];
}
// Function: 1297.sol-BREBuy-getSelfCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = 0

IRs:
count(uint32) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < addressArray.length

IRs:
REF_31 -> LENGTH addressArray
TMP_28(bool) = i < REF_31
CONDITION TMP_28"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
msg.sender == addressArray[i]

IRs:
REF_32(address) -> addressArray[i]
TMP_29(bool) = msg.sender == REF_32
CONDITION TMP_29"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count ++

IRs:
TMP_30(uint32) := count(uint32)
count(uint32) = count + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_31(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 1297.sol-BREBuy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_53(bool) = msg.sender == owner
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1297.sol-BREBuy-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = 0x0

IRs:
owner(address) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
gameIndex = 0

IRs:
gameIndex(uint32) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalPrice = 0

IRs:
totalPrice(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
addressArray = new address[](0)

IRs:
TMP_52(address[])  = new address[](0)
addressArray(address[]) = ['TMP_52(address[])']"];
}
// Function: 1297.sol-BREBuy-startNewGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameIndex ++

IRs:
TMP_14(uint32) := gameIndex(uint32)
gameIndex(uint32) = gameIndex + 1"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
curConfig.hasChange

IRs:
REF_7(bool) -> curConfig.hasChange
CONDITION REF_7"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
curConfig.totalSize != setConfig.totalSize

IRs:
REF_8(uint32) -> curConfig.totalSize
REF_9(uint32) -> setConfig.totalSize
TMP_15(bool) = REF_8 != REF_9
CONDITION TMP_15"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
curConfig.totalSize = setConfig.totalSize

IRs:
REF_10(uint32) -> curConfig.totalSize
REF_11(uint32) -> setConfig.totalSize
REF_10(uint32) (->curConfig) := REF_11(uint32)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
curConfig.singlePrice != setConfig.singlePrice

IRs:
REF_12(uint256) -> curConfig.singlePrice
REF_13(uint256) -> setConfig.singlePrice
TMP_16(bool) = REF_12 != REF_13
CONDITION TMP_16"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
curConfig.singlePrice = setConfig.singlePrice

IRs:
REF_14(uint256) -> curConfig.singlePrice
REF_15(uint256) -> setConfig.singlePrice
REF_14(uint256) (->curConfig) := REF_15(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
curConfig.pumpRate != setConfig.pumpRate

IRs:
REF_16(uint8) -> curConfig.pumpRate
REF_17(uint8) -> setConfig.pumpRate
TMP_17(bool) = REF_16 != REF_17
CONDITION TMP_17"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
curConfig.pumpRate = setConfig.pumpRate

IRs:
REF_18(uint8) -> curConfig.pumpRate
REF_19(uint8) -> setConfig.pumpRate
REF_18(uint8) (->curConfig) := REF_19(uint8)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
curConfig.hasChange = false

IRs:
REF_20(bool) -> curConfig.hasChange
REF_20(bool) (->curConfig) := False(bool)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
addressArray.length = 0

IRs:
REF_21 -> LENGTH addressArray
REF_21(uint256) (->addressArray) := 0(uint256)"];
}
// Function: 1297.sol-BREBuy-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = newOwner != TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BREBuy.onlyOwner()()"];
4->1;
}
}
