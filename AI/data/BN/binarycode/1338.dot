digraph G {
// Function: 1338.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 1338.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 1338.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 1338.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 1338.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 1338.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 1338.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 1338.sol-ERC918Interface-getChallengeNumber()
digraph{
}
// Function: 1338.sol-ERC918Interface-getMiningDifficulty()
digraph{
}
// Function: 1338.sol-ERC918Interface-getMiningReward()
digraph{
}
// Function: 1338.sol-ERC918Interface-getMiningTarget()
digraph{
}
// Function: 1338.sol-ERC918Interface-mint(uint256,bytes32)
digraph{
}
// Function: 1338.sol-ExtendedMath-limitLessThan(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a > b

IRs:
TMP_15(bool) = a > b
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
b

IRs:
RETURN b"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a

IRs:
RETURN a"];
5[label="Node Type: RETURN 5

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1338.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1338.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_17(bool) = msg.sender == newOwner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_20 = CONVERT 0 to address
newOwner(address) := TMP_20(address)"];
}
// Function: 1338.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_21(bool) = msg.sender == owner
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1338.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1338.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1338.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1338.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1338.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1338.sol-_0xGoldToken-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1338.sol-_0xGoldToken-_0xGoldToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = 0xGOLD

IRs:
symbol(string) := 0xGOLD(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = 0xGold Token

IRs:
name(string) := 0xGold Token(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 10

IRs:
decimals(uint8) := 10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 5000000 * 10 ** uint256(decimals)

IRs:
TMP_28 = CONVERT decimals to uint256
TMP_29(uint256) = 10 ** TMP_28
TMP_30(uint256) = 5000000 * TMP_29
_totalSupply(uint256) := TMP_30(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
locked

IRs:
CONDITION locked"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_31(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
locked = true

IRs:
locked(bool) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokensMinted = 500000000000000

IRs:
tokensMinted(uint256) := 500000000000000(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
rewardEra = 0

IRs:
rewardEra(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
maxSupplyForEra = _totalSupply.div(2)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_totalSupply', '2'] 
maxSupplyForEra(uint256) := TMP_32(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
miningTarget = _MAXIMUM_TARGET

IRs:
miningTarget(uint256) := _MAXIMUM_TARGET(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
latestDifficultyPeriodStarted = block.number

IRs:
latestDifficultyPeriodStarted(uint256) := block.number(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_startNewMiningEpoch()

IRs:
INTERNAL_CALL, _0xGoldToken._startNewMiningEpoch()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
parentAddress = 0xB6eD7644C69416d67B522e20bC294A9a9B405B31

IRs:
parentAddress(address) := 1044331899554887515734376529790704924017018559281(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[owner] = tokensMinted

IRs:
REF_1(uint256) -> balances[owner]
REF_1(uint256) (->balances) := tokensMinted(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Transfer(address(0),owner,tokensMinted)

IRs:
TMP_34 = CONVERT 0 to address
Emit Transfer(TMP_34,owner,tokensMinted)"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
18->1;
}
// Function: 1338.sol-_0xGoldToken-_reAdjustDifficulty()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted

IRs:
TMP_68(uint256) = block.number - latestDifficultyPeriodStarted
ethBlocksSinceLastDifficultyPeriod(uint256) := TMP_68(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
epochsMined = _BLOCKS_PER_READJUSTMENT

IRs:
epochsMined(uint256) := _BLOCKS_PER_READJUSTMENT(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
targetEthBlocksPerDiffPeriod = epochsMined * 28

IRs:
TMP_69(uint256) = epochsMined * 28
targetEthBlocksPerDiffPeriod(uint256) := TMP_69(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod

IRs:
TMP_70(bool) = ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod
CONDITION TMP_70"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod)

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['targetEthBlocksPerDiffPeriod', '100'] 
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_71', 'ethBlocksSinceLastDifficultyPeriod'] 
excess_block_pct(uint256) := TMP_72(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000)

IRs:
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['excess_block_pct', '100'] 
TMP_74(uint256) = LIBRARY_CALL, dest:ExtendedMath, function:ExtendedMath.limitLessThan(uint256,uint256), arguments:['TMP_73', '1000'] 
excess_block_pct_extra(uint256) := TMP_74(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra))

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['miningTarget', '2000'] 
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_75', 'excess_block_pct_extra'] 
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['miningTarget', 'TMP_76'] 
miningTarget(uint256) := TMP_77(uint256)"];
7->11;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod)

IRs:
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['ethBlocksSinceLastDifficultyPeriod', '100'] 
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_78', 'targetEthBlocksPerDiffPeriod'] 
shortage_block_pct(uint256) := TMP_79(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000)

IRs:
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['shortage_block_pct', '100'] 
TMP_81(uint256) = LIBRARY_CALL, dest:ExtendedMath, function:ExtendedMath.limitLessThan(uint256,uint256), arguments:['TMP_80', '1000'] 
shortage_block_pct_extra(uint256) := TMP_81(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra))

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['miningTarget', '2000'] 
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_82', 'shortage_block_pct_extra'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['miningTarget', 'TMP_83'] 
miningTarget(uint256) := TMP_84(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
latestDifficultyPeriodStarted = block.number

IRs:
latestDifficultyPeriodStarted(uint256) := block.number(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
miningTarget < _MINIMUM_TARGET

IRs:
TMP_85(bool) = miningTarget < _MINIMUM_TARGET
CONDITION TMP_85"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
miningTarget = _MINIMUM_TARGET

IRs:
miningTarget(uint256) := _MINIMUM_TARGET(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
miningTarget > _MAXIMUM_TARGET

IRs:
TMP_86(bool) = miningTarget > _MAXIMUM_TARGET
CONDITION TMP_86"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
miningTarget = _MAXIMUM_TARGET

IRs:
miningTarget(uint256) := _MAXIMUM_TARGET(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
}
// Function: 1338.sol-_0xGoldToken-_startNewMiningEpoch()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 2

IRs:
TMP_52(uint256) = INTERNAL_CALL, _0xGoldToken.getMiningReward()()
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'TMP_52'] 
TMP_54(bool) = TMP_53 > maxSupplyForEra
TMP_55(bool) = rewardEra < 2
TMP_56(bool) = TMP_54 && TMP_55
CONDITION TMP_56"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rewardEra = rewardEra + 1

IRs:
TMP_57(uint256) = rewardEra + 1
rewardEra(uint256) := TMP_57(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1))

IRs:
TMP_58(uint256) = rewardEra + 1
TMP_59(uint256) = 2 ** TMP_58
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_totalSupply', 'TMP_59'] 
TMP_61(uint256) = _totalSupply - TMP_60
maxSupplyForEra(uint256) := TMP_61(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
epochCount = epochCount.add(1)

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['epochCount', '1'] 
epochCount(uint256) := TMP_62(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
epochCount % _BLOCKS_PER_READJUSTMENT == 0

IRs:
TMP_63(uint256) = epochCount % _BLOCKS_PER_READJUSTMENT
TMP_64(bool) = TMP_63 == 0
CONDITION TMP_64"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_reAdjustDifficulty()

IRs:
INTERNAL_CALL, _0xGoldToken._reAdjustDifficulty()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
challengeNumber = block.blockhash(block.number - 1)

IRs:
TMP_66(uint256) = block.number - 1
TMP_67(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_66)
challengeNumber(bytes32) := TMP_67(uint256)"];
}
// Function: 1338.sol-_0xGoldToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_24(bool) = msg.sender == newOwner
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_27 = CONVERT 0 to address
newOwner(address) := TMP_27(address)"];
}
// Function: 1338.sol-_0xGoldToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_48(mapping(address => uint256)) -> allowed[tokenOwner]
REF_49(uint256) -> REF_48[spender]
RETURN REF_49"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1338.sol-_0xGoldToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[spender]
REF_36(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_50(mapping(address => uint256)) -> allowed[msg.sender]
REF_51(uint256) -> REF_50[spender]
REF_51(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_110 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_110(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_28(uint256) -> balances[tokenOwner]
RETURN REF_28"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1338.sol-_0xGoldToken-checkMintSolution(uint256,bytes32,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
digest = keccak256()(challenge_number,msg.sender,nonce)

IRs:
TMP_94(bytes32) = SOLIDITY_CALL keccak256()(challenge_number,msg.sender,nonce)
digest(bytes32) := TMP_94(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
uint256(digest) > testTarget

IRs:
TMP_95 = CONVERT digest to uint256
TMP_96(bool) = TMP_95 > testTarget
CONDITION TMP_96"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_97(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(digest == challenge_digest)

IRs:
TMP_98(bool) = digest == challenge_digest
RETURN TMP_98"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_112(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1338.sol-_0xGoldToken-getChallengeNumber()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
challengeNumber

IRs:
RETURN challengeNumber"];
}
// Function: 1338.sol-_0xGoldToken-getMiningDifficulty()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_MAXIMUM_TARGET.div(miningTarget)

IRs:
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_MAXIMUM_TARGET', 'miningTarget'] 
RETURN TMP_87"];
}
// Function: 1338.sol-_0xGoldToken-getMiningReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(16 * 10 ** uint256(decimals)).div(2 ** rewardEra)

IRs:
TMP_88 = CONVERT decimals to uint256
TMP_89(uint256) = 10 ** TMP_88
TMP_90(uint256) = 16 * TMP_89
TMP_91(uint256) = 2 ** rewardEra
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_90', 'TMP_91'] 
RETURN TMP_92"];
}
// Function: 1338.sol-_0xGoldToken-getMiningTarget()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
miningTarget

IRs:
RETURN miningTarget"];
}
// Function: 1338.sol-_0xGoldToken-getMintDigest(uint256,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
digest = keccak256()(challenge_number,msg.sender,nonce)

IRs:
TMP_93(bytes32) = SOLIDITY_CALL keccak256()(challenge_number,msg.sender,nonce)
digest(bytes32) := TMP_93(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
digest

IRs:
RETURN digest"];
3[label="Node Type: RETURN 3

EXPRESSION:
digesttest

IRs:
RETURN digesttest"];
}
// Function: 1338.sol-_0xGoldToken-merge()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
future_challengeNumber = block.blockhash(block.number - 1)

IRs:
TMP_116(uint256) = block.number - 1
TMP_117(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_116)
future_challengeNumber(bytes32) := TMP_117(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
challengeNumber == future_challengeNumber

IRs:
TMP_118(bool) = challengeNumber == future_challengeNumber
CONDITION TMP_118"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
ERC918Interface(parentAddress).lastRewardTo() != msg.sender

IRs:
TMP_119 = CONVERT parentAddress to ERC918Interface
TMP_120(address) = HIGH_LEVEL_CALL, dest:TMP_119(ERC918Interface), function:lastRewardTo, arguments:[]  
TMP_121(bool) = TMP_120 != msg.sender
CONDITION TMP_121"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
ERC918Interface(parentAddress).lastRewardEthBlockNumber() != block.number

IRs:
TMP_122 = CONVERT parentAddress to ERC918Interface
TMP_123(uint256) = HIGH_LEVEL_CALL, dest:TMP_122(ERC918Interface), function:lastRewardEthBlockNumber, arguments:[]  
TMP_124(bool) = TMP_123 != block.number
CONDITION TMP_124"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
parentChallengeNumber = ERC918Interface(parentAddress).challengeNumber()

IRs:
TMP_125 = CONVERT parentAddress to ERC918Interface
TMP_126(bytes32) = HIGH_LEVEL_CALL, dest:TMP_125(ERC918Interface), function:challengeNumber, arguments:[]  
parentChallengeNumber(bytes32) := TMP_126(bytes32)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
solution = solutionForChallenge[parentChallengeNumber]

IRs:
REF_57(bytes32) -> solutionForChallenge[parentChallengeNumber]
solution(bytes32) := REF_57(bytes32)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
solution != 0x0

IRs:
TMP_127(bool) = solution != 0
CONDITION TMP_127"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
false

IRs:
RETURN False"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
digest = merge

IRs:
digest(bytes32) := merge(string)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
solutionForChallenge[parentChallengeNumber] = digest

IRs:
REF_58(bytes32) -> solutionForChallenge[parentChallengeNumber]
REF_58(bytes32) (->solutionForChallenge) := digest(bytes32)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
reward_amount = getMiningReward()

IRs:
TMP_128(uint256) = INTERNAL_CALL, _0xGoldToken.getMiningReward()()
reward_amount(uint256) := TMP_128(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(reward_amount)

IRs:
REF_59(uint256) -> balances[msg.sender]
REF_60(uint256) -> balances[msg.sender]
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_60', 'reward_amount'] 
REF_59(uint256) (->balances) := TMP_129(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
tokensMinted = tokensMinted.add(reward_amount)

IRs:
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'reward_amount'] 
tokensMinted(uint256) := TMP_130(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
assert(bool)(tokensMinted <= maxSupplyForEra)

IRs:
TMP_131(bool) = tokensMinted <= maxSupplyForEra
TMP_132(None) = SOLIDITY_CALL assert(bool)(TMP_131)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
lastRewardTo = msg.sender

IRs:
lastRewardTo(address) := msg.sender(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
lastRewardAmount = reward_amount

IRs:
lastRewardAmount(uint256) := reward_amount(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
lastRewardEthBlockNumber = block.number

IRs:
lastRewardEthBlockNumber(uint256) := block.number(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_startNewMiningEpoch()

IRs:
INTERNAL_CALL, _0xGoldToken._startNewMiningEpoch()()"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
Mint(msg.sender,reward_amount,epochCount,0)

IRs:
Emit Mint(msg.sender,reward_amount,epochCount,0)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: RETURN 28

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-mint(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
digest = keccak256()(challengeNumber,msg.sender,nonce)

IRs:
TMP_37(bytes32) = SOLIDITY_CALL keccak256()(challengeNumber,msg.sender,nonce)
digest(bytes32) := TMP_37(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
digest != challenge_digest

IRs:
TMP_38(bool) = digest != challenge_digest
CONDITION TMP_38"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_39(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
uint256(digest) > miningTarget

IRs:
TMP_40 = CONVERT digest to uint256
TMP_41(bool) = TMP_40 > miningTarget
CONDITION TMP_41"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_42(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
solution = solutionForChallenge[challengeNumber]

IRs:
REF_2(bytes32) -> solutionForChallenge[challengeNumber]
solution(bytes32) := REF_2(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
solutionForChallenge[challengeNumber] = digest

IRs:
REF_3(bytes32) -> solutionForChallenge[challengeNumber]
REF_3(bytes32) (->solutionForChallenge) := digest(bytes32)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
solution != 0x0

IRs:
TMP_43(bool) = solution != 0
CONDITION TMP_43"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_44(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
reward_amount = getMiningReward()

IRs:
TMP_45(uint256) = INTERNAL_CALL, _0xGoldToken.getMiningReward()()
reward_amount(uint256) := TMP_45(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(reward_amount)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', 'reward_amount'] 
REF_4(uint256) (->balances) := TMP_46(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokensMinted = tokensMinted.add(reward_amount)

IRs:
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'reward_amount'] 
tokensMinted(uint256) := TMP_47(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
assert(bool)(tokensMinted <= maxSupplyForEra)

IRs:
TMP_48(bool) = tokensMinted <= maxSupplyForEra
TMP_49(None) = SOLIDITY_CALL assert(bool)(TMP_48)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lastRewardTo = msg.sender

IRs:
lastRewardTo(address) := msg.sender(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
lastRewardAmount = reward_amount

IRs:
lastRewardAmount(uint256) := reward_amount(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lastRewardEthBlockNumber = block.number

IRs:
lastRewardEthBlockNumber(uint256) := block.number(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_startNewMiningEpoch()

IRs:
INTERNAL_CALL, _0xGoldToken._startNewMiningEpoch()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Mint(msg.sender,reward_amount,epochCount,challengeNumber)

IRs:
Emit Mint(msg.sender,reward_amount,epochCount,challengeNumber)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
23[label="Node Type: RETURN 23

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_137(bool) = msg.sender == owner
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1338.sol-_0xGoldToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_BLOCKS_PER_READJUSTMENT = 100

IRs:
_BLOCKS_PER_READJUSTMENT(uint256) := 100(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
_MINIMUM_TARGET = 2 ** 16

IRs:
TMP_135(uint256) = 2 ** 16
_MINIMUM_TARGET(uint256) := TMP_135(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
_MAXIMUM_TARGET = 2 ** 234

IRs:
TMP_136(uint256) = 2 ** 234
_MAXIMUM_TARGET(uint256) := TMP_136(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
}
// Function: 1338.sol-_0xGoldToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply - balances[address(0)]

IRs:
TMP_99 = CONVERT 0 to address
REF_27(uint256) -> balances[TMP_99]
TMP_100(uint256) = _totalSupply - REF_27
RETURN TMP_100"];
}
// Function: 1338.sol-_0xGoldToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(tokens)

IRs:
REF_29(uint256) -> balances[msg.sender]
REF_30(uint256) -> balances[msg.sender]
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', 'tokens'] 
REF_29(uint256) (->balances) := TMP_101(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_32(uint256) -> balances[to]
REF_33(uint256) -> balances[to]
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_33', 'tokens'] 
REF_32(uint256) (->balances) := TMP_102(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_113 = CONVERT tokenAddress to ERC20Interface
TMP_114(bool) = HIGH_LEVEL_CALL, dest:TMP_113(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_114"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_37(uint256) -> balances[from]
REF_38(uint256) -> balances[from]
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_38', 'tokens'] 
REF_37(uint256) (->balances) := TMP_105(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_40(mapping(address => uint256)) -> allowed[from]
REF_41(uint256) -> REF_40[msg.sender]
REF_42(mapping(address => uint256)) -> allowed[from]
REF_43(uint256) -> REF_42[msg.sender]
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_43', 'tokens'] 
REF_41(uint256) (->allowed) := TMP_106(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_45(uint256) -> balances[to]
REF_46(uint256) -> balances[to]
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_46', 'tokens'] 
REF_45(uint256) (->balances) := TMP_107(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1338.sol-_0xGoldToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
}
