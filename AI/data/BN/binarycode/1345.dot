digraph G {
// Function: 1345.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_171(uint256) = a + b
c(uint256) := TMP_171(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_172(bool) = c >= a
TMP_173(None) = SOLIDITY_CALL assert(bool)(TMP_172)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1345.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_167(uint256) = a / b
c(uint256) := TMP_167(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1345.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_162(bool) = a == 0
CONDITION TMP_162"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_163(uint256) = a * b
c(uint256) := TMP_163(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_164(uint256) = c / a
TMP_165(bool) = TMP_164 == b
TMP_166(None) = SOLIDITY_CALL assert(bool)(TMP_165)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1345.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_168(bool) = b <= a
TMP_169(None) = SOLIDITY_CALL assert(bool)(TMP_168)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_170(uint256) = a - b
RETURN TMP_170"];
}
// Function: 1345.sol-ZethrBankrollBridge-RequestBankrollPayment(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tier = ZethrTierLibrary.getTier(userDivRate)

IRs:
TMP_13(uint256) = LIBRARY_CALL, dest:ZethrTierLibrary, function:ZethrTierLibrary.getTier(uint256), arguments:['userDivRate'] 
tier(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenBankrollAddress = UsedBankrollAddresses[tier]

IRs:
REF_4(address) -> UsedBankrollAddresses[tier]
tokenBankrollAddress(address) := REF_4(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ZethrTokenBankroll(tokenBankrollAddress).gameRequestTokens(to,tokens)

IRs:
TMP_14 = CONVERT tokenBankrollAddress to ZethrTokenBankroll
HIGH_LEVEL_CALL, dest:TMP_14(ZethrTokenBankroll), function:gameRequestTokens, arguments:['to', 'tokens']  "];
}
// Function: 1345.sol-ZethrBankrollBridge-fromBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(ValidBankrollAddress[msg.sender],msg.sender should be a valid bankroll)

IRs:
REF_6(bool) -> ValidBankrollAddress[msg.sender]
TMP_16(None) = SOLIDITY_CALL require(bool,string)(REF_6,msg.sender should be a valid bankroll)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1345.sol-ZethrBankrollBridge-setupBankrollInterface(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
UsedBankrollAddresses = ZethrMainBankroll(ZethrMainBankrollAddress).gameGetTokenBankrollList()

IRs:
TMP_9 = CONVERT ZethrMainBankrollAddress to ZethrMainBankroll
TMP_10(address[7]) = HIGH_LEVEL_CALL, dest:TMP_9(ZethrMainBankroll), function:gameGetTokenBankrollList, arguments:[]  
UsedBankrollAddresses(address[7]) = ['TMP_10(address[7])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < 7

IRs:
TMP_11(bool) = i < 7
CONDITION TMP_11"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ValidBankrollAddress[UsedBankrollAddresses[i]] = true

IRs:
REF_1(address) -> UsedBankrollAddresses[i]
REF_2(bool) -> ValidBankrollAddress[REF_1]
REF_2(bool) (->ValidBankrollAddress) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_12(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
}
// Function: 1345.sol-ZethrInterface-withdraw()
digraph{
}
// Function: 1345.sol-ZethrMainBankroll-gameGetTokenBankrollList()
digraph{
}
// Function: 1345.sol-ZethrShell-RequestBankrollPayment(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tier = ZethrTierLibrary.getTier(userDivRate)

IRs:
TMP_21(uint256) = LIBRARY_CALL, dest:ZethrTierLibrary, function:ZethrTierLibrary.getTier(uint256), arguments:['userDivRate'] 
tier(uint256) := TMP_21(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenBankrollAddress = UsedBankrollAddresses[tier]

IRs:
REF_11(address) -> UsedBankrollAddresses[tier]
tokenBankrollAddress(address) := REF_11(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ZethrTokenBankroll(tokenBankrollAddress).gameRequestTokens(to,tokens)

IRs:
TMP_22 = CONVERT tokenBankrollAddress to ZethrTokenBankroll
HIGH_LEVEL_CALL, dest:TMP_22(ZethrTokenBankroll), function:gameRequestTokens, arguments:['to', 'tokens']  "];
}
// Function: 1345.sol-ZethrShell-WithdrawAndTransferToBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Zethr.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:Zethr(ZethrInterface), function:withdraw, arguments:[]  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WithdrawToBankroll()

IRs:
INTERNAL_CALL, ZethrShell.WithdrawToBankroll()()"];
}
// Function: 1345.sol-ZethrShell-WithdrawToBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
address(UsedBankrollAddresses[0]).transfer(address(this).balance)

IRs:
REF_13(address) -> UsedBankrollAddresses[0]
TMP_24 = CONVERT REF_13 to address
TMP_25 = CONVERT this to address
TMP_26(uint256) = SOLIDITY_CALL balance(address)(TMP_25)
Transfer dest:TMP_24 value:TMP_26"];
}
// Function: 1345.sol-ZethrShell-fromBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(ValidBankrollAddress[msg.sender],msg.sender should be a valid bankroll)

IRs:
REF_16(bool) -> ValidBankrollAddress[msg.sender]
TMP_30(None) = SOLIDITY_CALL require(bool,string)(REF_16,msg.sender should be a valid bankroll)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1345.sol-ZethrShell-setupBankrollInterface(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
UsedBankrollAddresses = ZethrMainBankroll(ZethrMainBankrollAddress).gameGetTokenBankrollList()

IRs:
TMP_17 = CONVERT ZethrMainBankrollAddress to ZethrMainBankroll
TMP_18(address[7]) = HIGH_LEVEL_CALL, dest:TMP_17(ZethrMainBankroll), function:gameGetTokenBankrollList, arguments:[]  
UsedBankrollAddresses(address[7]) = ['TMP_18(address[7])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < 7

IRs:
TMP_19(bool) = i < 7
CONDITION TMP_19"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ValidBankrollAddress[UsedBankrollAddresses[i]] = true

IRs:
REF_8(address) -> UsedBankrollAddresses[i]
REF_9(bool) -> ValidBankrollAddress[REF_8]
REF_9(bool) (->ValidBankrollAddress) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_20(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
}
// Function: 1345.sol-ZethrTierLibrary-getTier(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
actualDiv = divRate

IRs:
actualDiv(uint256) := divRate(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
actualDiv >= 30

IRs:
TMP_0(bool) = actualDiv >= 30
CONDITION TMP_0"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
6

IRs:
RETURN 6"];
4[label="Node Type: IF 4

EXPRESSION:
actualDiv >= 25

IRs:
TMP_1(bool) = actualDiv >= 25
CONDITION TMP_1"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
5

IRs:
RETURN 5"];
6[label="Node Type: IF 6

EXPRESSION:
actualDiv >= 20

IRs:
TMP_2(bool) = actualDiv >= 20
CONDITION TMP_2"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
4

IRs:
RETURN 4"];
8[label="Node Type: IF 8

EXPRESSION:
actualDiv >= 15

IRs:
TMP_3(bool) = actualDiv >= 15
CONDITION TMP_3"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
3

IRs:
RETURN 3"];
10[label="Node Type: IF 10

EXPRESSION:
actualDiv >= 10

IRs:
TMP_4(bool) = actualDiv >= 10
CONDITION TMP_4"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
2

IRs:
RETURN 2"];
12[label="Node Type: IF 12

EXPRESSION:
actualDiv >= 5

IRs:
TMP_5(bool) = actualDiv >= 5
CONDITION TMP_5"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
1

IRs:
RETURN 1"];
14[label="Node Type: IF 14

EXPRESSION:
actualDiv >= 2

IRs:
TMP_6(bool) = actualDiv >= 2
CONDITION TMP_6"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
0

IRs:
RETURN 0"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
revert()()

IRs:
TMP_7(None) = SOLIDITY_CALL revert()()"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 1345.sol-ZethrTierLibrary-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
magnitude = 2 ** 64

IRs:
TMP_8(uint256) = 2 ** 64
magnitude(uint256) := TMP_8(uint256)"];
}
// Function: 1345.sol-ZethrTokenBankroll-gameRequestTokens(address,uint256)
digraph{
}
// Function: 1345.sol-Zethroll-RequestBankrollPayment(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tier = ZethrTierLibrary.getTier(userDivRate)

IRs:
TMP_41(uint256) = LIBRARY_CALL, dest:ZethrTierLibrary, function:ZethrTierLibrary.getTier(uint256), arguments:['userDivRate'] 
tier(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenBankrollAddress = UsedBankrollAddresses[tier]

IRs:
REF_24(address) -> UsedBankrollAddresses[tier]
tokenBankrollAddress(address) := REF_24(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ZethrTokenBankroll(tokenBankrollAddress).gameRequestTokens(to,tokens)

IRs:
TMP_42 = CONVERT tokenBankrollAddress to ZethrTokenBankroll
HIGH_LEVEL_CALL, dest:TMP_42(ZethrTokenBankroll), function:gameRequestTokens, arguments:['to', 'tokens']  "];
}
// Function: 1345.sol-Zethroll-WithdrawAndTransferToBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Zethr.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:Zethr(ZethrInterface), function:withdraw, arguments:[]  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WithdrawToBankroll()

IRs:
INTERNAL_CALL, ZethrShell.WithdrawToBankroll()()"];
}
// Function: 1345.sol-Zethroll-WithdrawToBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
address(UsedBankrollAddresses[0]).transfer(address(this).balance)

IRs:
REF_17(address) -> UsedBankrollAddresses[0]
TMP_31 = CONVERT REF_17 to address
TMP_32 = CONVERT this to address
TMP_33(uint256) = SOLIDITY_CALL balance(address)(TMP_32)
Transfer dest:TMP_31 value:TMP_33"];
}
// Function: 1345.sol-Zethroll-_finishBet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
roll = playerRolls[target]

IRs:
REF_46(Zethroll.playerRoll) -> playerRolls[target]
roll(Zethroll.playerRoll) := REF_46(Zethroll.playerRoll)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(roll.tokenValue > 0)

IRs:
REF_47(uint192) -> roll.tokenValue
TMP_87(bool) = REF_47 > 0
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(roll.blockn != block.number)

IRs:
REF_48(uint48) -> roll.blockn
TMP_89(bool) = REF_48 != block.number
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
block.number - roll.blockn > 255

IRs:
REF_49(uint48) -> roll.blockn
TMP_91(uint256) = block.number - REF_49
TMP_92(bool) = TMP_91 > 255
CONDITION TMP_92"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
result = 1000

IRs:
result(uint256) := 1000(uint256)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
result = random(100,roll.blockn,target) + 1

IRs:
REF_50(uint48) -> roll.blockn
TMP_93(uint256) = INTERNAL_CALL, Zethroll.random(uint256,uint256,address)(100,REF_50,target)
TMP_94(uint256) = TMP_93 + 1
result(uint256) := TMP_94(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
rollUnder = roll.rollUnder

IRs:
REF_51(uint8) -> roll.rollUnder
rollUnder(uint256) := REF_51(uint8)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
result < rollUnder

IRs:
TMP_95(bool) = result < rollUnder
CONDITION TMP_95"];
10->11[label="True"];
10->22[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
profit = calculateProfit(roll.tokenValue,rollUnder)

IRs:
REF_52(uint192) -> roll.tokenValue
TMP_96(uint256) = INTERNAL_CALL, Zethroll.calculateProfit(uint256,uint256)(REF_52,rollUnder)
profit(uint256) := TMP_96(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
mProfit = getMaxProfit(roll.divRate)

IRs:
REF_53(uint8) -> roll.divRate
TMP_97(uint256) = INTERNAL_CALL, Zethroll.getMaxProfit(uint256)(REF_53)
mProfit(uint256) := TMP_97(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
profit > mProfit

IRs:
TMP_98(bool) = profit > mProfit
CONDITION TMP_98"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
profit = mProfit

IRs:
profit(uint256) := mProfit(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subContractBalance(roll.divRate,profit)

IRs:
REF_54(uint8) -> roll.divRate
INTERNAL_CALL, Zethroll.subContractBalance(uint256,uint256)(REF_54,profit)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
LogResult(target,result,rollUnder,profit,roll.tokenValue,true)

IRs:
REF_55(uint192) -> roll.tokenValue
Emit LogResult(target,result,rollUnder,profit,REF_55,True)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
setMaxProfit(roll.divRate)

IRs:
REF_56(uint8) -> roll.divRate
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(REF_56)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
playerRolls[target] = playerRoll(uint192(0),uint48(0),uint8(0),uint8(0))

IRs:
REF_57(Zethroll.playerRoll) -> playerRolls[target]
TMP_102 = CONVERT 0 to uint192
TMP_103 = CONVERT 0 to uint48
TMP_104 = CONVERT 0 to uint8
TMP_105 = CONVERT 0 to uint8
TMP_106(Zethroll.playerRoll) = new playerRoll(TMP_102,TMP_103,TMP_104,TMP_105)
REF_57(Zethroll.playerRoll) (->playerRolls) := TMP_106(Zethroll.playerRoll)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
RequestBankrollPayment(target,profit + roll.tokenValue,roll.divRate)

IRs:
REF_58(uint192) -> roll.tokenValue
TMP_107(uint256) = profit + REF_58
REF_59(uint8) -> roll.divRate
INTERNAL_CALL, ZethrBankrollBridge.RequestBankrollPayment(address,uint256,uint256)(target,TMP_107,REF_59)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
result

IRs:
RETURN result"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
LogResult(target,result,rollUnder,profit,roll.tokenValue,false)

IRs:
REF_60(uint192) -> roll.tokenValue
Emit LogResult(target,result,rollUnder,profit,REF_60,False)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
addContractBalance(roll.divRate,roll.tokenValue)

IRs:
REF_61(uint8) -> roll.divRate
REF_62(uint192) -> roll.tokenValue
INTERNAL_CALL, Zethroll.addContractBalance(uint256,uint256)(REF_61,REF_62)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
playerRolls[target] = playerRoll(uint192(0),uint48(0),uint8(0),uint8(0))

IRs:
REF_63(Zethroll.playerRoll) -> playerRolls[target]
TMP_111 = CONVERT 0 to uint192
TMP_112 = CONVERT 0 to uint48
TMP_113 = CONVERT 0 to uint8
TMP_114 = CONVERT 0 to uint8
TMP_115(Zethroll.playerRoll) = new playerRoll(TMP_111,TMP_112,TMP_113,TMP_114)
REF_63(Zethroll.playerRoll) (->playerRolls) := TMP_115(Zethroll.playerRoll)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
setMaxProfit(roll.divRate)

IRs:
REF_64(uint8) -> roll.divRate
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(REF_64)"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 1345.sol-Zethroll-_playerRollDice(uint256,Zethroll.TKN,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tkn.value < ((2 ** 192) - 1))

IRs:
REF_29(uint256) -> _tkn.value
TMP_62(uint256) = 2 ** 192
TMP_63(uint256) = TMP_62 - 1
TMP_64(bool) = REF_29 < TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.number < ((2 ** 48) - 1))

IRs:
TMP_66(uint256) = 2 ** 48
TMP_67(uint256) = TMP_66 - 1
TMP_68(bool) = block.number < TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(userDivRate < (2 ** 8 - 1))

IRs:
TMP_70(uint256) = 2 ** 8
TMP_71(uint256) = TMP_70 - 1
TMP_72(bool) = userDivRate < TMP_71
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
roll = playerRolls[_tkn.sender]

IRs:
REF_30(address) -> _tkn.sender
REF_31(Zethroll.playerRoll) -> playerRolls[REF_30]
roll(Zethroll.playerRoll) := REF_31(Zethroll.playerRoll)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(block.number != roll.blockn)

IRs:
REF_32(uint48) -> roll.blockn
TMP_74(bool) = block.number != REF_32
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
roll.blockn != 0

IRs:
REF_33(uint48) -> roll.blockn
TMP_76(bool) = REF_33 != 0
CONDITION TMP_76"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_finishBet(_tkn.sender)

IRs:
REF_34(address) -> _tkn.sender
TMP_77(uint256) = INTERNAL_CALL, Zethroll._finishBet(address)(REF_34)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
roll.blockn = uint48(block.number)

IRs:
REF_35(uint48) -> roll.blockn
TMP_78 = CONVERT block.number to uint48
REF_35(uint48) (->roll) := TMP_78(uint48)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
roll.tokenValue = uint192(_tkn.value)

IRs:
REF_36(uint192) -> roll.tokenValue
REF_37(uint256) -> _tkn.value
TMP_79 = CONVERT REF_37 to uint192
REF_36(uint192) (->roll) := TMP_79(uint192)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
roll.rollUnder = uint8(_rollUnder)

IRs:
REF_38(uint8) -> roll.rollUnder
TMP_80 = CONVERT _rollUnder to uint8
REF_38(uint8) (->roll) := TMP_80(uint8)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
roll.divRate = uint8(userDivRate)

IRs:
REF_39(uint8) -> roll.divRate
TMP_81 = CONVERT userDivRate to uint8
REF_39(uint8) (->roll) := TMP_81(uint8)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
playerRolls[_tkn.sender] = roll

IRs:
REF_40(address) -> _tkn.sender
REF_41(Zethroll.playerRoll) -> playerRolls[REF_40]
REF_41(Zethroll.playerRoll) (->playerRolls) := roll(Zethroll.playerRoll)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
LogBet(_tkn.sender,_tkn.value,_rollUnder)

IRs:
REF_42(address) -> _tkn.sender
REF_43(uint256) -> _tkn.value
Emit LogBet(REF_42,REF_43,_rollUnder)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
totalBets += 1

IRs:
totalBets(uint256) = totalBets + 1"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
totalZTHWagered += _tkn.value

IRs:
REF_44(uint256) -> _tkn.value
totalZTHWagered(uint256) = totalZTHWagered + REF_44"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zethroll.gameIsActive()()"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
betIsValid(_tkn.value,_rollUnder,userDivRate)

IRs:
REF_45(uint256) -> _tkn.value
MODIFIER_CALL, Zethroll.betIsValid(uint256,uint256,uint256)(REF_45,_rollUnder,userDivRate)"];
18->1;
}
// Function: 1345.sol-Zethroll-addContractBalance(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance[divRate] = contractBalance[divRate].add(add)

IRs:
REF_74(uint256) -> contractBalance[divRate]
REF_75(uint256) -> contractBalance[divRate]
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_75', 'add'] 
REF_74(uint256) (->contractBalance) := TMP_126(uint256)"];
}
// Function: 1345.sol-Zethroll-bankrollExternalUpdateTokens(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance[divRate] = newBalance

IRs:
REF_78(uint256) -> contractBalance[divRate]
REF_78(uint256) (->contractBalance) := newBalance(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setMaxProfit(divRate)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(divRate)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fromBankroll()

IRs:
MODIFIER_CALL, ZethrBankrollBridge.fromBankroll()()"];
3->1;
}
// Function: 1345.sol-Zethroll-betIsValid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(calculateProfit(_betSize,_playerNumber) < getMaxProfit(divRate) && _betSize >= minBet && _playerNumber >= minNumber && _playerNumber <= maxNumber)

IRs:
TMP_148(uint256) = INTERNAL_CALL, Zethroll.calculateProfit(uint256,uint256)(_betSize,_playerNumber)
TMP_149(uint256) = INTERNAL_CALL, Zethroll.getMaxProfit(uint256)(divRate)
TMP_150(bool) = TMP_148 < TMP_149
TMP_151(bool) = _betSize >= minBet
TMP_152(bool) = TMP_150 && TMP_151
TMP_153(bool) = _playerNumber >= minNumber
TMP_154(bool) = TMP_152 && TMP_153
TMP_155(bool) = _playerNumber <= maxNumber
TMP_156(bool) = TMP_154 && TMP_155
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1345.sol-Zethroll-calculateProfit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((_initBet * (100 - (_roll.sub(1)))) / (_roll.sub(1)) + _initBet)) * houseEdge / houseEdgeDivisor) - _initBet

IRs:
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_roll', '1'] 
TMP_54(uint256) = 100 - TMP_53
TMP_55(uint256) = _initBet * TMP_54
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_roll', '1'] 
TMP_57(uint256) = TMP_55 / TMP_56
TMP_58(uint256) = TMP_57 + _initBet
TMP_59(uint256) = TMP_58 * houseEdge
TMP_60(uint256) = TMP_59 / houseEdgeDivisor
TMP_61(uint256) = TMP_60 - _initBet
RETURN TMP_61"];
}
// Function: 1345.sol-Zethroll-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setupBankrollInterface(ZethrMainBankrollAddress)

IRs:
INTERNAL_CALL, ZethrBankrollBridge.setupBankrollInterface(address)(ZethrMainBankrollAddress)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
houseEdge = 990

IRs:
houseEdge(uint256) := 990(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerSetMaxProfitAsPercentOfHouse(10000)

IRs:
INTERNAL_CALL, Zethroll.ownerSetMaxProfitAsPercentOfHouse(uint256)(10000)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerSetMinBet(1e18)

IRs:
INTERNAL_CALL, Zethroll.ownerSetMinBet(uint256)(1000000000000000000)"];
}
// Function: 1345.sol-Zethroll-execute(address,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_tkn.sender = _from

IRs:
REF_65(address) -> _tkn.sender
REF_65(address) (->_tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_tkn.value = _value

IRs:
REF_66(uint256) -> _tkn.value
REF_66(uint256) (->_tkn) := _value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
chosenNumber = uint8(_data[0])

IRs:
REF_67(None) -> _data[0]
TMP_117 = CONVERT REF_67 to uint8
chosenNumber(uint8) := TMP_117(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_playerRollDice(chosenNumber,_tkn,userDivRate)

IRs:
INTERNAL_CALL, Zethroll._playerRollDice(uint256,Zethroll.TKN,uint256)(chosenNumber,_tkn,userDivRate)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
fromBankroll()

IRs:
MODIFIER_CALL, ZethrBankrollBridge.fromBankroll()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zethroll.gameIsActive()()"];
8->1;
}
// Function: 1345.sol-Zethroll-finishBet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_finishBet(msg.sender)

IRs:
TMP_85(uint256) = INTERNAL_CALL, Zethroll._finishBet(address)(msg.sender)
RETURN TMP_85"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zethroll.gameIsActive()()"];
2->1;
}
// Function: 1345.sol-Zethroll-fromBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(ValidBankrollAddress[msg.sender],msg.sender should be a valid bankroll)

IRs:
REF_79(bool) -> ValidBankrollAddress[msg.sender]
TMP_147(None) = SOLIDITY_CALL require(bool,string)(REF_79,msg.sender should be a valid bankroll)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1345.sol-Zethroll-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gamePaused == false)

IRs:
TMP_158(bool) = gamePaused == False
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1345.sol-Zethroll-getMaxProfit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(contractBalance[divRate] * maxProfitAsPercentOfHouse) / maxProfitDivisor

IRs:
REF_70(uint256) -> contractBalance[divRate]
TMP_123(uint256) = REF_70 * maxProfitAsPercentOfHouse
TMP_124(uint256) = TMP_123 / maxProfitDivisor
RETURN TMP_124"];
}
// Function: 1345.sol-Zethroll-maxRandom(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(abi.encodePacked(blockhash(uint256)(blockn),entropy)))

IRs:
TMP_47(uint256) = SOLIDITY_CALL blockhash(uint256)(blockn)
TMP_48(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_47,entropy)
TMP_49(bytes32) = SOLIDITY_CALL keccak256()(TMP_48)
TMP_50 = CONVERT TMP_49 to uint256
RETURN TMP_50"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1345.sol-Zethroll-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_160(bool) = msg.sender == owner
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1345.sol-Zethroll-ownerChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1345.sol-Zethroll-ownerPauseGame(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gamePaused = newStatus

IRs:
gamePaused(bool) := newStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1345.sol-Zethroll-ownerSetMaxProfitAsPercentOfHouse(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newMaxProfitAsPercent <= 200000)

IRs:
TMP_130(bool) = newMaxProfitAsPercent <= 200000
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxProfitAsPercentOfHouse = newMaxProfitAsPercent

IRs:
maxProfitAsPercentOfHouse(uint256) := newMaxProfitAsPercent(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setMaxProfit(2)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(2)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setMaxProfit(5)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(5)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
setMaxProfit(10)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(10)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setMaxProfit(15)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(15)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
setMaxProfit(20)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(20)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
setMaxProfit(25)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(25)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
setMaxProfit(33)

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit(uint256)(33)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
10->1;
}
// Function: 1345.sol-Zethroll-ownerSetMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minBet = newMinimumBet

IRs:
minBet(uint256) := newMinimumBet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1345.sol-Zethroll-ownerUpdateContractBalance(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance[divRate] = newContractBalance

IRs:
REF_77(uint256) -> contractBalance[divRate]
REF_77(uint256) (->contractBalance) := newContractBalance(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1345.sol-Zethroll-ownerkill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_143(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1345.sol-Zethroll-random(uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxRandom(blockn,entropy) % upper

IRs:
TMP_51(uint256) = INTERNAL_CALL, Zethroll.maxRandom(uint256,address)(blockn,entropy)
TMP_52(uint256) = TMP_51 % upper
RETURN TMP_52"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1345.sol-Zethroll-setMaxProfit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxProfit[divRate] = (contractBalance[divRate] * maxProfitAsPercentOfHouse) / maxProfitDivisor

IRs:
REF_68(uint256) -> maxProfit[divRate]
REF_69(uint256) -> contractBalance[divRate]
TMP_121(uint256) = REF_69 * maxProfitAsPercentOfHouse
TMP_122(uint256) = TMP_121 / maxProfitDivisor
REF_68(uint256) (->maxProfit) := TMP_122(uint256)"];
}
// Function: 1345.sol-Zethroll-setupBankrollInterface(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
UsedBankrollAddresses = ZethrMainBankroll(ZethrMainBankrollAddress).gameGetTokenBankrollList()

IRs:
TMP_37 = CONVERT ZethrMainBankrollAddress to ZethrMainBankroll
TMP_38(address[7]) = HIGH_LEVEL_CALL, dest:TMP_37(ZethrMainBankroll), function:gameGetTokenBankrollList, arguments:[]  
UsedBankrollAddresses(address[7]) = ['TMP_38(address[7])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < 7

IRs:
TMP_39(bool) = i < 7
CONDITION TMP_39"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ValidBankrollAddress[UsedBankrollAddresses[i]] = true

IRs:
REF_21(address) -> UsedBankrollAddresses[i]
REF_22(bool) -> ValidBankrollAddress[REF_21]
REF_22(bool) (->ValidBankrollAddress) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_40(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
}
// Function: 1345.sol-Zethroll-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_INT = 2 ** 256 - 1

IRs:
TMP_145(uint256) = 2 ** 256
TMP_146(uint256) = TMP_145 - 1
MAX_INT(uint256) := TMP_146(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
maxProfitDivisor = 1000000

IRs:
maxProfitDivisor(uint256) := 1000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
maxNumber = 100

IRs:
maxNumber(uint256) := 100(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
minNumber = 2

IRs:
minNumber(uint256) := 2(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
houseEdgeDivisor = 1000

IRs:
houseEdgeDivisor(uint256) := 1000(uint256)"];
}
// Function: 1345.sol-Zethroll-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
minBet = 0

IRs:
minBet(uint256) := 0(uint256)"];
}
// Function: 1345.sol-Zethroll-subContractBalance(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance[divRate] = contractBalance[divRate].sub(sub)

IRs:
REF_71(uint256) -> contractBalance[divRate]
REF_72(uint256) -> contractBalance[divRate]
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_72', 'sub'] 
REF_71(uint256) (->contractBalance) := TMP_125(uint256)"];
}
}
