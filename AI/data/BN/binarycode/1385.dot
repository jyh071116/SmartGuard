digraph G {
// Function: 1385.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1385.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1385.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1385.sol-ERC20-totalSupply()
digraph{
}
// Function: 1385.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1385.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1385.sol-NTech3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_83'] 
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_85'] 
TMP_87(uint256) = TMP_86 / 2
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_84', 'TMP_87'] 
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_90(uint256) = TMP_88 / TMP_89
RETURN TMP_90"];
}
// Function: 1385.sol-NTech3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_73(uint256) = INTERNAL_CALL, NTech3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_75(uint256) = INTERNAL_CALL, NTech3DKeysCalcLong.eth(uint256)(TMP_74)
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_73', 'TMP_75'] 
RETURN TMP_76"];
}
// Function: 1385.sol-NTech3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_77', '312500000000000000000000000'] 
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_78', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_79'] 
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_80', '74999921875000000000000000000000'] 
TMP_82(uint256) = TMP_81 / 156250000
RETURN TMP_82"];
}
// Function: 1385.sol-NTech3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_70(uint256) = INTERNAL_CALL, NTech3DKeysCalcLong.keys(uint256)(TMP_69)
TMP_71(uint256) = INTERNAL_CALL, NTech3DKeysCalcLong.keys(uint256)(_curEth)
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_70', 'TMP_71'] 
RETURN TMP_72"];
}
// Function: 1385.sol-NTech3DLong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(NTToken_) != address(0x0),Must setup NTToken.)

IRs:
TMP_101 = CONVERT NTToken_ to address
TMP_102 = CONVERT 0 to address
TMP_103(bool) = TMP_101 != TMP_102
TMP_104(None) = SOLIDITY_CALL require(bool,string)(TMP_103,Must setup NTToken.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(communityAddr_) != address(0x0),Must setup CommunityAddr_.)

IRs:
TMP_105 = CONVERT communityAddr_ to address
TMP_106 = CONVERT 0 to address
TMP_107(bool) = TMP_105 != TMP_106
TMP_108(None) = SOLIDITY_CALL require(bool,string)(TMP_107,Must setup CommunityAddr_.)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(address(NTTokenSeller_) != address(0x0),Must setup NTTokenSeller.)

IRs:
TMP_109 = CONVERT NTTokenSeller_ to address
TMP_110 = CONVERT 0 to address
TMP_111(bool) = TMP_109 != TMP_110
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,Must setup NTTokenSeller.)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(address(NTFoundationAddr_) != address(0x0),Must setup NTFoundationAddr.)

IRs:
TMP_113 = CONVERT NTFoundationAddr_ to address
TMP_114 = CONVERT 0 to address
TMP_115(bool) = TMP_113 != TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool,string)(TMP_115,Must setup NTFoundationAddr.)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(activated_ == false,Only once)

IRs:
TMP_117(bool) = activated_ == False
TMP_118(None) = SOLIDITY_CALL require(bool,string)(TMP_117,Only once)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[1].strt = now

IRs:
REF_37(NTech3DDatasets.Round) -> round_[1]
REF_38(uint256) -> REF_37.strt
REF_38(uint256) (->round_) := now(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[1].end = now + rndMax_

IRs:
REF_39(NTech3DDatasets.Round) -> round_[1]
REF_40(uint256) -> REF_39.end
TMP_119(uint256) = now + rndMax_
REF_40(uint256) (->round_) := TMP_119(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, NTech3DLong.isAdmin()()"];
10->1;
}
// Function: 1385.sol-NTech3DLong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_477(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_478(bytes32) = SOLIDITY_CALL keccak256()(TMP_477)
TMP_479 = CONVERT TMP_478 to uint256
TMP_480(uint256) = TMP_479 / now
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_476', 'TMP_480'] 
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_481', 'block.gaslimit'] 
TMP_483(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_484(bytes32) = SOLIDITY_CALL keccak256()(TMP_483)
TMP_485 = CONVERT TMP_484 to uint256
TMP_486(uint256) = TMP_485 / now
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_482', 'TMP_486'] 
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_487', 'block.number'] 
TMP_489(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_488)
TMP_490(bytes32) = SOLIDITY_CALL keccak256()(TMP_489)
TMP_491 = CONVERT TMP_490 to uint256
seed(uint256) := TMP_491(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_492(uint256) = seed / 1000
TMP_493(uint256) = TMP_492 * 1000
TMP_494(uint256) = seed - TMP_493
TMP_495(bool) = TMP_494 < airDropTracker_
CONDITION TMP_495"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1385.sol-NTech3DLong-buyCore(uint256,uint256,uint256,NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_298(NTech3DDatasets.Round) -> round_[_rID]
REF_299(uint256) -> REF_298.strt
TMP_283(bool) = _now > REF_299
REF_300(NTech3DDatasets.Round) -> round_[_rID]
REF_301(uint256) -> REF_300.end
TMP_284(bool) = _now <= REF_301
REF_302(NTech3DDatasets.Round) -> round_[_rID]
REF_303(uint256) -> REF_302.end
TMP_285(bool) = _now > REF_303
REF_304(NTech3DDatasets.Round) -> round_[_rID]
REF_305(uint256) -> REF_304.plyr
TMP_286(bool) = REF_305 == 0
TMP_287(bool) = TMP_285 && TMP_286
TMP_288(bool) = TMP_284 || TMP_287
TMP_289(bool) = TMP_283 && TMP_288
CONDITION TMP_289"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.core(uint256,uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_306(NTech3DDatasets.Round) -> round_[_rID]
REF_307(uint256) -> REF_306.end
TMP_291(bool) = _now > REF_307
REF_308(NTech3DDatasets.Round) -> round_[_rID]
REF_309(bool) -> REF_308.ended
TMP_292(bool) = REF_309 == False
TMP_293(bool) = TMP_291 && TMP_292
CONDITION TMP_293"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_310(NTech3DDatasets.Round) -> round_[_rID]
REF_311(bool) -> REF_310.ended
REF_311(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_294(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.endRound(NTech3DDatasets.EventReturns)(_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_294(NTech3DDatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_312(uint256) -> _eventData_.compressedData
REF_313(uint256) -> _eventData_.compressedData
TMP_295(uint256) = _now * 1000000000000000000
TMP_296(uint256) = REF_313 + TMP_295
REF_312(uint256) (->_eventData_) := TMP_296(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_314(uint256) -> _eventData_.compressedIDs
REF_315(uint256) -> _eventData_.compressedIDs
TMP_297(uint256) = REF_315 + _pID
REF_314(uint256) (->_eventData_) := TMP_297(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.NTAmount,_eventData_.genAmount)

IRs:
REF_316(NTech3DDatasets.Player) -> plyr_[_pID]
REF_317(bytes32) -> REF_316.name
REF_318(uint256) -> _eventData_.compressedData
REF_319(uint256) -> _eventData_.compressedIDs
REF_320(address) -> _eventData_.winnerAddr
REF_321(bytes32) -> _eventData_.winnerName
REF_322(uint256) -> _eventData_.amountWon
REF_323(uint256) -> _eventData_.newPot
REF_324(uint256) -> _eventData_.NTAmount
REF_325(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_317,msg.value,REF_318,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324,REF_325)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_326(NTech3DDatasets.Player) -> plyr_[_pID]
REF_327(uint256) -> REF_326.gen
REF_328(NTech3DDatasets.Player) -> plyr_[_pID]
REF_329(uint256) -> REF_328.gen
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_329', 'msg.value'] 
REF_327(uint256) (->plyr_) := TMP_299(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1385.sol-NTech3DLong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_155(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.determinePID(NTech3DDatasets.EventReturns)(_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_155(NTech3DDatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_64(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_64(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_156 = CONVERT 0 to address
TMP_157(bool) = _affCode == TMP_156
TMP_158(bool) = _affCode == msg.sender
TMP_159(bool) = TMP_157 || TMP_158
CONDITION TMP_159"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_65(NTech3DDatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
_affID(uint256) := REF_66(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_67(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_67(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_68(NTech3DDatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
TMP_160(bool) = _affID != REF_69
CONDITION TMP_160"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_70(NTech3DDatasets.Player) -> plyr_[_pID]
REF_71(uint256) -> REF_70.laff
REF_71(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_161(uint256) = INTERNAL_CALL, NTech3DLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_161(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.buyCore(uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NTech3DLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, NTech3DLong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1385.sol-NTech3DLong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_145(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.determinePID(NTech3DDatasets.EventReturns)(_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_145(NTech3DDatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_57(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_57(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_146(bool) = _affCode == 0
TMP_147(bool) = _affCode == _pID
TMP_148(bool) = TMP_146 || TMP_147
CONDITION TMP_148"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_58(NTech3DDatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
_affCode(uint256) := REF_59(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_60(NTech3DDatasets.Player) -> plyr_[_pID]
REF_61(uint256) -> REF_60.laff
TMP_149(bool) = _affCode != REF_61
CONDITION TMP_149"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_62(NTech3DDatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
REF_63(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_150(uint256) = INTERNAL_CALL, NTech3DLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_150(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.buyCore(uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NTech3DLong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, NTech3DLong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 1385.sol-NTech3DLong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_166(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.determinePID(NTech3DDatasets.EventReturns)(_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_166(NTech3DDatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_72(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_72(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_167(bool) = _affCode == 
REF_73(NTech3DDatasets.Player) -> plyr_[_pID]
REF_74(bytes32) -> REF_73.name
TMP_168(bool) = _affCode == REF_74
TMP_169(bool) = TMP_167 || TMP_168
CONDITION TMP_169"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_75(NTech3DDatasets.Player) -> plyr_[_pID]
REF_76(uint256) -> REF_75.laff
_affID(uint256) := REF_76(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_77(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_77(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_78(NTech3DDatasets.Player) -> plyr_[_pID]
REF_79(uint256) -> REF_78.laff
TMP_170(bool) = _affID != REF_79
CONDITION TMP_170"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_80(NTech3DDatasets.Player) -> plyr_[_pID]
REF_81(uint256) -> REF_80.laff
REF_81(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_171(uint256) = INTERNAL_CALL, NTech3DLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_171(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.buyCore(uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NTech3DLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, NTech3DLong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1385.sol-NTech3DLong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_461(NTech3DDatasets.Round) -> round_[_rID]
REF_462(uint256) -> REF_461.strt
TMP_371(bool) = _now > REF_462
REF_463(NTech3DDatasets.Round) -> round_[_rID]
REF_464(uint256) -> REF_463.end
TMP_372(bool) = _now <= REF_464
REF_465(NTech3DDatasets.Round) -> round_[_rID]
REF_466(uint256) -> REF_465.end
TMP_373(bool) = _now > REF_466
REF_467(NTech3DDatasets.Round) -> round_[_rID]
REF_468(uint256) -> REF_467.plyr
TMP_374(bool) = REF_468 == 0
TMP_375(bool) = TMP_373 && TMP_374
TMP_376(bool) = TMP_372 || TMP_375
TMP_377(bool) = TMP_371 && TMP_376
CONDITION TMP_377"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_469(NTech3DDatasets.Round) -> round_[_rID]
REF_470(uint256) -> REF_469.eth
TMP_378(uint256) = LIBRARY_CALL, dest:NTech3DKeysCalcLong, function:NTech3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_470', '_eth'] 
RETURN TMP_378"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:NTech3DKeysCalcLong, function:NTech3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_379"];
}
// Function: 1385.sol-NTech3DLong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_451(NTech3DDatasets.Round) -> round_[_rIDlast]
REF_452(uint256) -> REF_451.mask
REF_454(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_455(NTech3DDatasets.PlayerRounds) -> REF_454[_rIDlast]
REF_456(uint256) -> REF_455.keys
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_452', 'REF_456'] 
TMP_369(uint256) = TMP_368 / 1000000000000000000
REF_458(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_459(NTech3DDatasets.PlayerRounds) -> REF_458[_rIDlast]
REF_460(uint256) -> REF_459.mask
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_369', 'REF_460'] 
RETURN TMP_370"];
}
// Function: 1385.sol-NTech3DLong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = NTech3DDatasets.TeamFee(30,6)

IRs:
REF_41(NTech3DDatasets.TeamFee) -> fees_[0]
TMP_131(NTech3DDatasets.TeamFee) = new TeamFee(30,6)
REF_41(NTech3DDatasets.TeamFee) (->fees_) := TMP_131(NTech3DDatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = NTech3DDatasets.TeamFee(43,0)

IRs:
REF_43(NTech3DDatasets.TeamFee) -> fees_[1]
TMP_132(NTech3DDatasets.TeamFee) = new TeamFee(43,0)
REF_43(NTech3DDatasets.TeamFee) (->fees_) := TMP_132(NTech3DDatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = NTech3DDatasets.TeamFee(56,10)

IRs:
REF_45(NTech3DDatasets.TeamFee) -> fees_[2]
TMP_133(NTech3DDatasets.TeamFee) = new TeamFee(56,10)
REF_45(NTech3DDatasets.TeamFee) (->fees_) := TMP_133(NTech3DDatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = NTech3DDatasets.TeamFee(43,8)

IRs:
REF_47(NTech3DDatasets.TeamFee) -> fees_[3]
TMP_134(NTech3DDatasets.TeamFee) = new TeamFee(43,8)
REF_47(NTech3DDatasets.TeamFee) (->fees_) := TMP_134(NTech3DDatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = NTech3DDatasets.PotSplit(15,10)

IRs:
REF_49(NTech3DDatasets.PotSplit) -> potSplit_[0]
TMP_135(NTech3DDatasets.PotSplit) = new PotSplit(15,10)
REF_49(NTech3DDatasets.PotSplit) (->potSplit_) := TMP_135(NTech3DDatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = NTech3DDatasets.PotSplit(25,0)

IRs:
REF_51(NTech3DDatasets.PotSplit) -> potSplit_[1]
TMP_136(NTech3DDatasets.PotSplit) = new PotSplit(25,0)
REF_51(NTech3DDatasets.PotSplit) (->potSplit_) := TMP_136(NTech3DDatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = NTech3DDatasets.PotSplit(20,20)

IRs:
REF_53(NTech3DDatasets.PotSplit) -> potSplit_[2]
TMP_137(NTech3DDatasets.PotSplit) = new PotSplit(20,20)
REF_53(NTech3DDatasets.PotSplit) (->potSplit_) := TMP_137(NTech3DDatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = NTech3DDatasets.PotSplit(30,10)

IRs:
REF_55(NTech3DDatasets.PotSplit) -> potSplit_[3]
TMP_138(NTech3DDatasets.PotSplit) = new PotSplit(30,10)
REF_55(NTech3DDatasets.PotSplit) (->potSplit_) := TMP_138(NTech3DDatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
initUsers()

IRs:
INTERNAL_CALL, NTech3DLong.initUsers()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
NTToken_ = ERC20(address(0x09341B5d43a9b2362141675b9276B777470222Be))

IRs:
TMP_140 = CONVERT 52542939455657817739598761906205627769944154814 to address
TMP_141 = CONVERT TMP_140 to ERC20
NTToken_(ERC20) := TMP_141(ERC20)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
communityAddr_ = address(0x3C07f9f7164Bf72FDBefd9438658fAcD94Ed4439)

IRs:
TMP_142 = CONVERT 342717326504399175307816045330235527195452589113 to address
communityAddr_(address) := TMP_142(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
NTTokenSeller_ = address(0x531100a6b3686E6140f170B0920962A5D7A2DD25)

IRs:
TMP_143 = CONVERT 474225403372100658869616636791877556149411831077 to address
NTTokenSeller_(address) := TMP_143(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
NTFoundationAddr_ = address(0x89b2E7Ee504afd522E07F80Ae7b9d4D228AF3fe2)

IRs:
TMP_144 = CONVERT 786121472280185637130373584914477138834780798946 to address
NTFoundationAddr_(address) := TMP_144(address)"];
}
// Function: 1385.sol-NTech3DLong-core(uint256,uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_362(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_363(NTech3DDatasets.PlayerRounds) -> REF_362[_rID]
REF_364(uint256) -> REF_363.keys
TMP_318(bool) = REF_364 == 0
CONDITION TMP_318"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_319(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.managePlayer(uint256,NTech3DDatasets.EventReturns)(_pID,_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_319(NTech3DDatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 10000000000000000000

IRs:
REF_365(NTech3DDatasets.Round) -> round_[_rID]
REF_366(uint256) -> REF_365.eth
TMP_320(bool) = REF_366 < 100000000000000000000
REF_367(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_368(NTech3DDatasets.PlayerRounds) -> REF_367[_rID]
REF_369(uint256) -> REF_368.eth
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_369', '_eth'] 
TMP_322(bool) = TMP_321 > 10000000000000000000
TMP_323(bool) = TMP_320 && TMP_322
CONDITION TMP_323"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (10000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_372(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_373(NTech3DDatasets.PlayerRounds) -> REF_372[_rID]
REF_374(uint256) -> REF_373.eth
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['10000000000000000000', 'REF_374'] 
_availableLimit(uint256) := TMP_324(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_325(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_376(NTech3DDatasets.Player) -> plyr_[_pID]
REF_377(uint256) -> REF_376.gen
REF_378(NTech3DDatasets.Player) -> plyr_[_pID]
REF_379(uint256) -> REF_378.gen
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_379', '_refund'] 
REF_377(uint256) (->plyr_) := TMP_326(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_327(bool) = _eth > 1000000000
CONDITION TMP_327"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_381(NTech3DDatasets.Round) -> round_[_rID]
REF_382(uint256) -> REF_381.eth
TMP_328(uint256) = LIBRARY_CALL, dest:NTech3DKeysCalcLong, function:NTech3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_382', '_eth'] 
_keys(uint256) := TMP_328(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_329(bool) = _keys >= 1000000000000000000
CONDITION TMP_329"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, NTech3DLong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_384(NTech3DDatasets.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.plyr
TMP_331(bool) = REF_385 != _pID
CONDITION TMP_331"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_386(NTech3DDatasets.Round) -> round_[_rID]
REF_387(uint256) -> REF_386.plyr
REF_387(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_388(NTech3DDatasets.Round) -> round_[_rID]
REF_389(uint256) -> REF_388.team
TMP_332(bool) = REF_389 != _team
CONDITION TMP_332"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_390(NTech3DDatasets.Round) -> round_[_rID]
REF_391(uint256) -> REF_390.team
REF_391(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_392(uint256) -> _eventData_.compressedData
REF_393(uint256) -> _eventData_.compressedData
TMP_333(uint256) = REF_393 + 100
REF_392(uint256) (->_eventData_) := TMP_333(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_334(bool) = _eth >= 100000000000000000
CONDITION TMP_334"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_335(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_336(bool) = INTERNAL_CALL, NTech3DLong.airdrop()()
TMP_337(bool) = TMP_336 == True
CONDITION TMP_337"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_338(bool) = _eth >= 10000000000000000000
CONDITION TMP_338"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_340(uint256) = TMP_339 / 100
_prize(uint256) := TMP_340(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_395(NTech3DDatasets.Player) -> plyr_[_pID]
REF_396(uint256) -> REF_395.win
REF_397(NTech3DDatasets.Player) -> plyr_[_pID]
REF_398(uint256) -> REF_397.win
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_398', '_prize'] 
REF_396(uint256) (->plyr_) := TMP_341(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_342(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_401(uint256) -> _eventData_.compressedData
REF_401(-> _eventData_) = REF_401 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_343(bool) = _eth >= 1000000000000000000
TMP_344(bool) = _eth < 10000000000000000000
TMP_345(bool) = TMP_343 && TMP_344
CONDITION TMP_345"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_347(uint256) = TMP_346 / 100
_prize(uint256) := TMP_347(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_403(NTech3DDatasets.Player) -> plyr_[_pID]
REF_404(uint256) -> REF_403.win
REF_405(NTech3DDatasets.Player) -> plyr_[_pID]
REF_406(uint256) -> REF_405.win
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_406', '_prize'] 
REF_404(uint256) (->plyr_) := TMP_348(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_349(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_409(uint256) -> _eventData_.compressedData
REF_409(-> _eventData_) = REF_409 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_350(bool) = _eth >= 100000000000000000
TMP_351(bool) = _eth < 1000000000000000000
TMP_352(bool) = TMP_350 && TMP_351
CONDITION TMP_352"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_354(uint256) = TMP_353 / 100
_prize(uint256) := TMP_354(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_411(NTech3DDatasets.Player) -> plyr_[_pID]
REF_412(uint256) -> REF_411.win
REF_413(NTech3DDatasets.Player) -> plyr_[_pID]
REF_414(uint256) -> REF_413.win
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_414', '_prize'] 
REF_412(uint256) (->plyr_) := TMP_355(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_356(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_417(uint256) -> _eventData_.compressedData
REF_417(-> _eventData_) = REF_417 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_418(uint256) -> _eventData_.compressedData
REF_418(-> _eventData_) = REF_418 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_419(uint256) -> _eventData_.compressedData
TMP_357(uint256) = _prize * 1000000000000000000000000000000000
REF_419(-> _eventData_) = REF_419 + TMP_357"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_420(uint256) -> _eventData_.compressedData
REF_421(uint256) -> _eventData_.compressedData
TMP_358(uint256) = airDropTracker_ * 1000
TMP_359(uint256) = REF_421 + TMP_358
REF_420(uint256) (->_eventData_) := TMP_359(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_422(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_423(NTech3DDatasets.PlayerRounds) -> REF_422[_rID]
REF_424(uint256) -> REF_423.keys
REF_426(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_427(NTech3DDatasets.PlayerRounds) -> REF_426[_rID]
REF_428(uint256) -> REF_427.keys
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_428'] 
REF_424(uint256) (->plyrRnds_) := TMP_360(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_429(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_430(NTech3DDatasets.PlayerRounds) -> REF_429[_rID]
REF_431(uint256) -> REF_430.eth
REF_433(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_434(NTech3DDatasets.PlayerRounds) -> REF_433[_rID]
REF_435(uint256) -> REF_434.eth
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_435'] 
REF_431(uint256) (->plyrRnds_) := TMP_361(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_436(NTech3DDatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.keys
REF_439(NTech3DDatasets.Round) -> round_[_rID]
REF_440(uint256) -> REF_439.keys
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_440'] 
REF_437(uint256) (->round_) := TMP_362(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_441(NTech3DDatasets.Round) -> round_[_rID]
REF_442(uint256) -> REF_441.eth
REF_444(NTech3DDatasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.eth
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_445'] 
REF_442(uint256) (->round_) := TMP_363(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_446(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_447(uint256) -> REF_446[_team]
REF_449(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_450(uint256) -> REF_449[_team]
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_450'] 
REF_447(uint256) (->rndTmEth_) := TMP_364(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_365(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.distributeExternal(uint256,uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_365(NTech3DDatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_366(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.distributeInternal(uint256,uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_366(NTech3DDatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.endTx(uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 1385.sol-NTech3DLong-determinePID(NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_510(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_510(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_403(bool) = _pID == 0
CONDITION TMP_403"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_404(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_404(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_405(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_405(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_406(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_406(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_514(uint256) -> pIDxAddr_[msg.sender]
REF_514(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_515(NTech3DDatasets.Player) -> plyr_[_pID]
REF_516(address) -> REF_515.addr
REF_516(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_407(bool) = _name != 
CONDITION TMP_407"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_517(uint256) -> pIDxName_[_name]
REF_517(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_518(NTech3DDatasets.Player) -> plyr_[_pID]
REF_519(bytes32) -> REF_518.name
REF_519(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_520(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_521(bool) -> REF_520[_name]
REF_521(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_408(bool) = _laff != 0
TMP_409(bool) = _laff != _pID
TMP_410(bool) = TMP_408 && TMP_409
CONDITION TMP_410"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_522(NTech3DDatasets.Player) -> plyr_[_pID]
REF_523(uint256) -> REF_522.laff
REF_523(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_524(uint256) -> _eventData_.compressedData
REF_525(uint256) -> _eventData_.compressedData
TMP_411(uint256) = REF_525 + 1
REF_524(uint256) (->_eventData_) := TMP_411(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
_eventData_

IRs:
RETURN _eventData_"];
}
// Function: 1385.sol-NTech3DLong-distributeExternal(uint256,uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_496(uint256) = _eth / 50
_com(uint256) := TMP_496(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_long = _eth / 100

IRs:
TMP_497(uint256) = _eth / 100
_long(uint256) := TMP_497(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
address(otherNTech3D_) != address(0x0)

IRs:
TMP_498 = CONVERT otherNTech3D_ to address
TMP_499 = CONVERT 0 to address
TMP_500(bool) = TMP_498 != TMP_499
CONDITION TMP_500"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
otherNTech3D_.potSwap.value(_long)()

IRs:
HIGH_LEVEL_CALL, dest:otherNTech3D_(OtherNTech3D), function:potSwap, arguments:[] value:_long "];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = _com.add(_long)

IRs:
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_long'] 
_com(uint256) := TMP_503(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_504(uint256) = _eth / 10
_aff(uint256) := TMP_504(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_505(bool) = _affID != _pID
REF_639(NTech3DDatasets.Player) -> plyr_[_affID]
REF_640(bytes32) -> REF_639.name
TMP_506(bool) = REF_640 != 
TMP_507(bool) = TMP_505 && TMP_506
CONDITION TMP_507"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_641(NTech3DDatasets.Player) -> plyr_[_affID]
REF_642(uint256) -> REF_641.aff
REF_644(NTech3DDatasets.Player) -> plyr_[_affID]
REF_645(uint256) -> REF_644.aff
TMP_508(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_645'] 
REF_642(uint256) (->plyr_) := TMP_508(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_646(NTech3DDatasets.Player) -> plyr_[_affID]
REF_647(address) -> REF_646.addr
REF_648(NTech3DDatasets.Player) -> plyr_[_affID]
REF_649(bytes32) -> REF_648.name
Emit onAffiliatePayout(_affID,REF_647,REF_649,_rID,_pID,_aff,now)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_com = _com.add(_aff)

IRs:
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_aff'] 
_com(uint256) := TMP_510(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_nt = (_eth.mul(fees_[_team].nt)).div(100)

IRs:
REF_652(NTech3DDatasets.TeamFee) -> fees_[_team]
REF_653(uint256) -> REF_652.nt
TMP_511(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_653'] 
TMP_512(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_511', '100'] 
_nt(uint256) := TMP_512(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_com > 0

IRs:
TMP_513(bool) = _com > 0
CONDITION TMP_513"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
address(communityAddr_) != address(0x0)

IRs:
TMP_514 = CONVERT communityAddr_ to address
TMP_515 = CONVERT 0 to address
TMP_516(bool) = TMP_514 != TMP_515
CONDITION TMP_516"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
communityAddr_.transfer(_com)

IRs:
Transfer dest:communityAddr_ value:_com"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_nt = _nt.add(_com)

IRs:
TMP_518(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_nt', '_com'] 
_nt(uint256) := TMP_518(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_nt > 0

IRs:
TMP_519(bool) = _nt > 0
CONDITION TMP_519"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
amount = _nt.mul(ntOf1Ether_)

IRs:
TMP_520(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_nt', 'ntOf1Ether_'] 
amount(uint256) := TMP_520(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.NTAmount = amount.add(_eventData_.NTAmount)

IRs:
REF_658(uint256) -> _eventData_.NTAmount
REF_660(uint256) -> _eventData_.NTAmount
TMP_521(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amount', 'REF_660'] 
REF_658(uint256) (->_eventData_) := TMP_521(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
NTToken_.transfer(msg.sender,amount)

IRs:
TMP_522(bool) = HIGH_LEVEL_CALL, dest:NTToken_(ERC20), function:transfer, arguments:['msg.sender', 'amount']  "];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
address(NTTokenSeller_).transfer(_nt)

IRs:
TMP_523 = CONVERT NTTokenSeller_ to address
Transfer dest:TMP_523 value:_nt"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1385.sol-NTech3DLong-distributeInternal(uint256,uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_669(NTech3DDatasets.TeamFee) -> fees_[_team]
REF_670(uint256) -> REF_669.gen
TMP_528(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_670'] 
TMP_529(uint256) = TMP_528 / 100
_gen(uint256) := TMP_529(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_530(uint256) = _eth / 100
_air(uint256) := TMP_530(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_531(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_531(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].nt)) / 100))

IRs:
TMP_532(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_533(uint256) = TMP_532 / 100
REF_676(NTech3DDatasets.TeamFee) -> fees_[_team]
REF_677(uint256) -> REF_676.nt
TMP_534(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_677'] 
TMP_535(uint256) = TMP_534 / 100
TMP_536(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_533', 'TMP_535'] 
TMP_537(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_536'] 
_eth(uint256) := TMP_537(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_538(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_538(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_539(uint256) = INTERNAL_CALL, NTech3DLong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_539(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_540(bool) = _dust > 0
CONDITION TMP_540"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_541(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_541(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_680(NTech3DDatasets.Round) -> round_[_rID]
REF_681(uint256) -> REF_680.pot
TMP_542(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_684(NTech3DDatasets.Round) -> round_[_rID]
REF_685(uint256) -> REF_684.pot
TMP_543(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_542', 'REF_685'] 
REF_681(uint256) (->round_) := TMP_543(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_686(uint256) -> _eventData_.genAmount
REF_688(uint256) -> _eventData_.genAmount
TMP_544(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_688'] 
REF_686(uint256) (->_eventData_) := TMP_544(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_689(uint256) -> _eventData_.potAmount
REF_689(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1385.sol-NTech3DLong-endRound(NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_534(NTech3DDatasets.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.plyr
_winPID(uint256) := REF_535(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_536(NTech3DDatasets.Round) -> round_[_rID]
REF_537(uint256) -> REF_536.team
_winTID(uint256) := REF_537(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot.add(round_[_rID].prevres)

IRs:
REF_538(NTech3DDatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.pot
REF_541(NTech3DDatasets.Round) -> round_[_rID]
REF_542(uint256) -> REF_541.prevres
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_539', 'REF_542'] 
_pot(uint256) := TMP_418(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_420(uint256) = TMP_419 / 100
_win(uint256) := TMP_420(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_421(uint256) = _pot / 50
_com(uint256) := TMP_421(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_545(NTech3DDatasets.PotSplit) -> potSplit_[_winTID]
REF_546(uint256) -> REF_545.gen
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_546'] 
TMP_423(uint256) = TMP_422 / 100
_gen(uint256) := TMP_423(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_nt = (_pot.mul(potSplit_[_winTID].nt)) / 100

IRs:
REF_548(NTech3DDatasets.PotSplit) -> potSplit_[_winTID]
REF_549(uint256) -> REF_548.nt
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_549'] 
TMP_425(uint256) = TMP_424 / 100
_nt(uint256) := TMP_425(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_nt)

IRs:
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_426', '_com'] 
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_427', '_gen'] 
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_428', '_nt'] 
_res(uint256) := TMP_429(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_555(NTech3DDatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.keys
TMP_431(uint256) = TMP_430 / REF_556
_ppt(uint256) := TMP_431(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_559(NTech3DDatasets.Round) -> round_[_rID]
REF_560(uint256) -> REF_559.keys
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_560'] 
TMP_433(uint256) = TMP_432 / 1000000000000000000
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_433'] 
_dust(uint256) := TMP_434(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_435(bool) = _dust > 0
CONDITION TMP_435"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_436(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_437(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_563(NTech3DDatasets.Player) -> plyr_[_winPID]
REF_564(uint256) -> REF_563.win
REF_566(NTech3DDatasets.Player) -> plyr_[_winPID]
REF_567(uint256) -> REF_566.win
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_567'] 
REF_564(uint256) (->plyr_) := TMP_438(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
address(communityAddr_) != address(0x0)

IRs:
TMP_439 = CONVERT communityAddr_ to address
TMP_440 = CONVERT 0 to address
TMP_441(bool) = TMP_439 != TMP_440
CONDITION TMP_441"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
communityAddr_.transfer(_com)

IRs:
Transfer dest:communityAddr_ value:_com"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
19->22;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_res = SafeMath.add(_res,_com)

IRs:
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_com'] 
_res(uint256) := TMP_443(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_nt > 0

IRs:
TMP_444(bool) = _nt > 0
CONDITION TMP_444"];
23->24[label="True"];
23->29[label="False"];
24[label="Node Type: IF 24

EXPRESSION:
address(NTFoundationAddr_) != address(0x0)

IRs:
TMP_445 = CONVERT NTFoundationAddr_ to address
TMP_446 = CONVERT 0 to address
TMP_447(bool) = TMP_445 != TMP_446
CONDITION TMP_447"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
NTFoundationAddr_.transfer(_nt)

IRs:
Transfer dest:NTFoundationAddr_ value:_nt"];
25->28;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_res = SafeMath.add(_res,_nt)

IRs:
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_nt'] 
_res(uint256) := TMP_449(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_nt = 0

IRs:
_nt(uint256) := 0(uint256)"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_572(NTech3DDatasets.Round) -> round_[_rID]
REF_573(uint256) -> REF_572.mask
REF_575(NTech3DDatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.mask
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_576'] 
REF_573(uint256) (->round_) := TMP_450(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_577(uint256) -> _eventData_.compressedData
REF_578(uint256) -> _eventData_.compressedData
REF_579(NTech3DDatasets.Round) -> round_[_rID]
REF_580(uint256) -> REF_579.end
TMP_451(uint256) = REF_580 * 1000000
TMP_452(uint256) = REF_578 + TMP_451
REF_577(uint256) (->_eventData_) := TMP_452(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_581(uint256) -> _eventData_.compressedIDs
REF_582(uint256) -> _eventData_.compressedIDs
TMP_453(uint256) = _winPID * 100000000000000000000000000
TMP_454(uint256) = REF_582 + TMP_453
TMP_455(uint256) = _winTID * 100000000000000000
TMP_456(uint256) = TMP_454 + TMP_455
REF_581(uint256) (->_eventData_) := TMP_456(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_583(address) -> _eventData_.winnerAddr
REF_584(NTech3DDatasets.Player) -> plyr_[_winPID]
REF_585(address) -> REF_584.addr
REF_583(address) (->_eventData_) := REF_585(address)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_586(bytes32) -> _eventData_.winnerName
REF_587(NTech3DDatasets.Player) -> plyr_[_winPID]
REF_588(bytes32) -> REF_587.name
REF_586(bytes32) (->_eventData_) := REF_588(bytes32)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_589(uint256) -> _eventData_.amountWon
REF_589(uint256) (->_eventData_) := _win(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_590(uint256) -> _eventData_.genAmount
REF_590(uint256) (->_eventData_) := _gen(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_eventData_.NTAmount = 0

IRs:
REF_591(uint256) -> _eventData_.NTAmount
REF_591(uint256) (->_eventData_) := 0(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_592(uint256) -> _eventData_.newPot
REF_592(uint256) (->_eventData_) := _res(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
rID_ ++

IRs:
TMP_457(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_rID ++

IRs:
TMP_458(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_593(NTech3DDatasets.Round) -> round_[_rID]
REF_594(uint256) -> REF_593.strt
REF_594(uint256) (->round_) := now(uint256)"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
round_[_rID].end = now.add(rndMax_)

IRs:
REF_595(NTech3DDatasets.Round) -> round_[_rID]
REF_596(uint256) -> REF_595.end
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndMax_'] 
REF_596(uint256) (->round_) := TMP_459(uint256)"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
round_[_rID].prevres = _res

IRs:
REF_598(NTech3DDatasets.Round) -> round_[_rID]
REF_599(uint256) -> REF_598.prevres
REF_599(uint256) (->round_) := _res(uint256)"];
43->44;
44[label="Node Type: RETURN 44

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1385.sol-NTech3DLong-endTx(uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_730(uint256) -> _eventData_.compressedData
REF_731(uint256) -> _eventData_.compressedData
TMP_561(uint256) = now * 1000000000000000000
TMP_562(uint256) = REF_731 + TMP_561
TMP_563(uint256) = _team * 100000000000000000000000000000
TMP_564(uint256) = TMP_562 + TMP_563
REF_730(uint256) (->_eventData_) := TMP_564(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_732(uint256) -> _eventData_.compressedIDs
REF_733(uint256) -> _eventData_.compressedIDs
TMP_565(uint256) = REF_733 + _pID
TMP_566(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_567(uint256) = TMP_565 + TMP_566
REF_732(uint256) (->_eventData_) := TMP_567(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.NTAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_734(uint256) -> _eventData_.compressedData
REF_735(uint256) -> _eventData_.compressedIDs
REF_736(NTech3DDatasets.Player) -> plyr_[_pID]
REF_737(bytes32) -> REF_736.name
REF_738(address) -> _eventData_.winnerAddr
REF_739(bytes32) -> _eventData_.winnerName
REF_740(uint256) -> _eventData_.amountWon
REF_741(uint256) -> _eventData_.newPot
REF_742(uint256) -> _eventData_.NTAmount
REF_743(uint256) -> _eventData_.genAmount
REF_744(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_734,REF_735,REF_737,msg.sender,_eth,_keys,REF_738,REF_739,REF_740,REF_741,REF_742,REF_743,REF_744,airDropPot_)"];
}
// Function: 1385.sol-NTech3DLong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_162(NTech3DDatasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.strt
TMP_235(bool) = _now > REF_163
REF_164(NTech3DDatasets.Round) -> round_[_rID]
REF_165(uint256) -> REF_164.end
TMP_236(bool) = _now <= REF_165
REF_166(NTech3DDatasets.Round) -> round_[_rID]
REF_167(uint256) -> REF_166.end
TMP_237(bool) = _now > REF_167
REF_168(NTech3DDatasets.Round) -> round_[_rID]
REF_169(uint256) -> REF_168.plyr
TMP_238(bool) = REF_169 == 0
TMP_239(bool) = TMP_237 && TMP_238
TMP_240(bool) = TMP_236 || TMP_239
TMP_241(bool) = TMP_235 && TMP_240
CONDITION TMP_241"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_170(NTech3DDatasets.Round) -> round_[_rID]
REF_171(uint256) -> REF_170.keys
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_171', '1000000000000000000'] 
TMP_243(uint256) = LIBRARY_CALL, dest:NTech3DKeysCalcLong, function:NTech3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_242', '1000000000000000000'] 
RETURN TMP_243"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 1385.sol-NTech3DLong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_250(NTech3DDatasets.Round) -> round_[_rID]
REF_251(uint256) -> REF_250.ico
REF_252(NTech3DDatasets.Round) -> round_[_rID]
REF_253(uint256) -> REF_252.keys
REF_254(NTech3DDatasets.Round) -> round_[_rID]
REF_255(uint256) -> REF_254.end
REF_256(NTech3DDatasets.Round) -> round_[_rID]
REF_257(uint256) -> REF_256.strt
REF_258(NTech3DDatasets.Round) -> round_[_rID]
REF_259(uint256) -> REF_258.pot
REF_260(NTech3DDatasets.Round) -> round_[_rID]
REF_261(uint256) -> REF_260.team
REF_262(NTech3DDatasets.Round) -> round_[_rID]
REF_263(uint256) -> REF_262.plyr
TMP_274(uint256) = REF_263 * 10
TMP_275(uint256) = REF_261 + TMP_274
REF_264(NTech3DDatasets.Round) -> round_[_rID]
REF_265(uint256) -> REF_264.plyr
REF_266(NTech3DDatasets.Player) -> plyr_[REF_265]
REF_267(address) -> REF_266.addr
REF_268(NTech3DDatasets.Round) -> round_[_rID]
REF_269(uint256) -> REF_268.plyr
REF_270(NTech3DDatasets.Player) -> plyr_[REF_269]
REF_271(bytes32) -> REF_270.name
REF_272(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_273(uint256) -> REF_272[0]
REF_274(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_275(uint256) -> REF_274[1]
REF_276(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_277(uint256) -> REF_276[2]
REF_278(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_279(uint256) -> REF_278[3]
TMP_276(uint256) = airDropPot_ * 1000
TMP_277(uint256) = airDropTracker_ + TMP_276
RETURN REF_251,_rID,REF_253,REF_255,REF_257,REF_259,TMP_275,REF_267,REF_271,REF_273,REF_275,REF_277,REF_279,TMP_277"];
}
// Function: 1385.sol-NTech3DLong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_278 = CONVERT 0 to address
TMP_279(bool) = _addr == TMP_278
CONDITION TMP_279"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_280(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_280(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_280(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_281(NTech3DDatasets.Player) -> plyr_[_pID]
REF_282(bytes32) -> REF_281.name
REF_283(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_284(NTech3DDatasets.PlayerRounds) -> REF_283[_rID]
REF_285(uint256) -> REF_284.keys
REF_286(NTech3DDatasets.Player) -> plyr_[_pID]
REF_287(uint256) -> REF_286.win
REF_288(NTech3DDatasets.Player) -> plyr_[_pID]
REF_289(uint256) -> REF_288.gen
REF_291(NTech3DDatasets.Player) -> plyr_[_pID]
REF_292(uint256) -> REF_291.lrnd
TMP_281(uint256) = INTERNAL_CALL, NTech3DLong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_292)
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_289', 'TMP_281'] 
REF_293(NTech3DDatasets.Player) -> plyr_[_pID]
REF_294(uint256) -> REF_293.aff
REF_295(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_296(NTech3DDatasets.PlayerRounds) -> REF_295[_rID]
REF_297(uint256) -> REF_296.eth
RETURN _pID,REF_282,REF_285,REF_287,TMP_282,REF_294,REF_297"];
}
// Function: 1385.sol-NTech3DLong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_184(NTech3DDatasets.Round) -> round_[_rID]
REF_185(uint256) -> REF_184.end
TMP_248(bool) = now > REF_185
REF_186(NTech3DDatasets.Round) -> round_[_rID]
REF_187(bool) -> REF_186.ended
TMP_249(bool) = REF_187 == False
TMP_250(bool) = TMP_248 && TMP_249
REF_188(NTech3DDatasets.Round) -> round_[_rID]
REF_189(uint256) -> REF_188.plyr
TMP_251(bool) = REF_189 != 0
TMP_252(bool) = TMP_250 && TMP_251
CONDITION TMP_252"];
2->3[label="True"];
2->8[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_190(NTech3DDatasets.Round) -> round_[_rID]
REF_191(uint256) -> REF_190.plyr
TMP_253(bool) = REF_191 == _pID
CONDITION TMP_253"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot.add(round_[_rID].prevres)

IRs:
REF_192(NTech3DDatasets.Round) -> round_[_rID]
REF_193(uint256) -> REF_192.pot
REF_195(NTech3DDatasets.Round) -> round_[_rID]
REF_196(uint256) -> REF_195.prevres
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_193', 'REF_196'] 
_pot(uint256) := TMP_254(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((plyr_[_pID].win).add(((_pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_197(NTech3DDatasets.Player) -> plyr_[_pID]
REF_198(uint256) -> REF_197.win
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_256(uint256) = TMP_255 / 100
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_198', 'TMP_256'] 
REF_201(NTech3DDatasets.Player) -> plyr_[_pID]
REF_202(uint256) -> REF_201.gen
TMP_258(uint256) = INTERNAL_CALL, NTech3DLong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_205(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_206(NTech3DDatasets.PlayerRounds) -> REF_205[_rID]
REF_207(uint256) -> REF_206.mask
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_258', 'REF_207'] 
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_202', 'TMP_259'] 
REF_208(NTech3DDatasets.Player) -> plyr_[_pID]
REF_209(uint256) -> REF_208.aff
RETURN TMP_257,TMP_260,REF_209"];
6[label="Node Type: RETURN 6

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_210(NTech3DDatasets.Player) -> plyr_[_pID]
REF_211(uint256) -> REF_210.win
REF_212(NTech3DDatasets.Player) -> plyr_[_pID]
REF_213(uint256) -> REF_212.gen
TMP_261(uint256) = INTERNAL_CALL, NTech3DLong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_216(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_217(NTech3DDatasets.PlayerRounds) -> REF_216[_rID]
REF_218(uint256) -> REF_217.mask
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_261', 'REF_218'] 
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_213', 'TMP_262'] 
REF_219(NTech3DDatasets.Player) -> plyr_[_pID]
REF_220(uint256) -> REF_219.aff
RETURN REF_211,TMP_263,REF_220"];
8[label="Node Type: RETURN 8

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_221(NTech3DDatasets.Player) -> plyr_[_pID]
REF_222(uint256) -> REF_221.win
REF_223(NTech3DDatasets.Player) -> plyr_[_pID]
REF_224(uint256) -> REF_223.gen
REF_226(NTech3DDatasets.Player) -> plyr_[_pID]
REF_227(uint256) -> REF_226.lrnd
TMP_264(uint256) = INTERNAL_CALL, NTech3DLong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_227)
TMP_265(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_224', 'TMP_264'] 
REF_228(NTech3DDatasets.Player) -> plyr_[_pID]
REF_229(uint256) -> REF_228.aff
RETURN REF_222,TMP_265,REF_229"];
}
// Function: 1385.sol-NTech3DLong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pot = round_[_rID].pot.add(round_[_rID].prevres)

IRs:
REF_230(NTech3DDatasets.Round) -> round_[_rID]
REF_231(uint256) -> REF_230.pot
REF_233(NTech3DDatasets.Round) -> round_[_rID]
REF_234(uint256) -> REF_233.prevres
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_231', 'REF_234'] 
_pot(uint256) := TMP_266(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(((((round_[_rID].mask).add(((((_pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_235(NTech3DDatasets.Round) -> round_[_rID]
REF_236(uint256) -> REF_235.mask
REF_239(NTech3DDatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.team
REF_241(NTech3DDatasets.PotSplit) -> potSplit_[REF_240]
REF_242(uint256) -> REF_241.gen
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_242'] 
TMP_268(uint256) = TMP_267 / 100
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_268', '1000000000000000000'] 
REF_244(NTech3DDatasets.Round) -> round_[_rID]
REF_245(uint256) -> REF_244.keys
TMP_270(uint256) = TMP_269 / REF_245
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_236', 'TMP_270'] 
REF_247(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_248(NTech3DDatasets.PlayerRounds) -> REF_247[_rID]
REF_249(uint256) -> REF_248.keys
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_271', 'REF_249'] 
TMP_273(uint256) = TMP_272 / 1000000000000000000
RETURN TMP_273"];
}
// Function: 1385.sol-NTech3DLong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_174(NTech3DDatasets.Round) -> round_[_rID]
REF_175(uint256) -> REF_174.end
TMP_244(bool) = _now < REF_175
CONDITION TMP_244"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt

IRs:
REF_176(NTech3DDatasets.Round) -> round_[_rID]
REF_177(uint256) -> REF_176.strt
TMP_245(bool) = _now > REF_177
CONDITION TMP_245"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_178(NTech3DDatasets.Round) -> round_[_rID]
REF_179(uint256) -> REF_178.end
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_179', '_now'] 
RETURN TMP_246"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_181(NTech3DDatasets.Round) -> round_[_rID]
REF_182(uint256) -> REF_181.end
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_182', '_now'] 
RETURN TMP_247"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1385.sol-NTech3DLong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_473(NTech3DDatasets.Round) -> round_[_rID]
REF_474(uint256) -> REF_473.strt
TMP_380(bool) = _now > REF_474
REF_475(NTech3DDatasets.Round) -> round_[_rID]
REF_476(uint256) -> REF_475.end
TMP_381(bool) = _now <= REF_476
REF_477(NTech3DDatasets.Round) -> round_[_rID]
REF_478(uint256) -> REF_477.end
TMP_382(bool) = _now > REF_478
REF_479(NTech3DDatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.plyr
TMP_383(bool) = REF_480 == 0
TMP_384(bool) = TMP_382 && TMP_383
TMP_385(bool) = TMP_381 || TMP_384
TMP_386(bool) = TMP_380 && TMP_385
CONDITION TMP_386"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_481(NTech3DDatasets.Round) -> round_[_rID]
REF_482(uint256) -> REF_481.keys
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_482', '_keys'] 
TMP_388(uint256) = LIBRARY_CALL, dest:NTech3DKeysCalcLong, function:NTech3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_387', '_keys'] 
RETURN TMP_388"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_389(uint256) = LIBRARY_CALL, dest:NTech3DKeysCalcLong, function:NTech3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_389"];
}
// Function: 1385.sol-NTech3DLong-initUsers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
users[0x89b2E7Ee504afd522E07F80Ae7b9d4D228AF3fe2] = 9

IRs:
REF_34(uint256) -> users[786121472280185637130373584914477138834780798946]
REF_34(uint256) (->users) := 9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
users[msg.sender] = 9

IRs:
REF_35(uint256) -> users[msg.sender]
REF_35(uint256) (->users) := 9(uint256)"];
}
// Function: 1385.sol-NTech3DLong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not active yet.)

IRs:
TMP_574(bool) = activated_ == True
TMP_575(None) = SOLIDITY_CALL require(bool,string)(TMP_574,its not active yet.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1385.sol-NTech3DLong-isAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
role = users[msg.sender]

IRs:
REF_745(uint256) -> users[msg.sender]
role(uint256) := REF_745(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)((role == 9),Must be admin.)

IRs:
TMP_570(bool) = role == 9
TMP_571(None) = SOLIDITY_CALL require(bool,string)(TMP_570,Must be admin.)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1385.sol-NTech3DLong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,Humans only)

IRs:
TMP_572(bool) = _codeLength == 0
TMP_573(None) = SOLIDITY_CALL require(bool,string)(TMP_572,Humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1385.sol-NTech3DLong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,Too little)

IRs:
TMP_576(bool) = _eth >= 1000000000
TMP_577(None) = SOLIDITY_CALL require(bool,string)(TMP_576,Too little)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,Too much)

IRs:
TMP_578(bool) = _eth <= 100000000000000000000000
TMP_579(None) = SOLIDITY_CALL require(bool,string)(TMP_578,Too much)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1385.sol-NTech3DLong-managePlayer(uint256,NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_526(NTech3DDatasets.Player) -> plyr_[_pID]
REF_527(uint256) -> REF_526.lrnd
TMP_415(bool) = REF_527 != 0
CONDITION TMP_415"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_528(NTech3DDatasets.Player) -> plyr_[_pID]
REF_529(uint256) -> REF_528.lrnd
INTERNAL_CALL, NTech3DLong.updateGenVault(uint256,uint256)(_pID,REF_529)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_530(NTech3DDatasets.Player) -> plyr_[_pID]
REF_531(uint256) -> REF_530.lrnd
REF_531(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_532(uint256) -> _eventData_.compressedData
REF_533(uint256) -> _eventData_.compressedData
TMP_417(uint256) = REF_533 + 10
REF_532(uint256) (->_eventData_) := TMP_417(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_eventData_

IRs:
RETURN _eventData_"];
}
// Function: 1385.sol-NTech3DLong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_525(uint256) = rID_ + 1
_rID(uint256) := TMP_525(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].prevres = round_[_rID].prevres.add(msg.value)

IRs:
REF_663(NTech3DDatasets.Round) -> round_[_rID]
REF_664(uint256) -> REF_663.prevres
REF_665(NTech3DDatasets.Round) -> round_[_rID]
REF_666(uint256) -> REF_665.prevres
TMP_526(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_666', 'msg.value'] 
REF_664(uint256) (->round_) := TMP_526(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 1385.sol-NTech3DLong-reLoadCore(uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_331(NTech3DDatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.strt
TMP_300(bool) = _now > REF_332
REF_333(NTech3DDatasets.Round) -> round_[_rID]
REF_334(uint256) -> REF_333.end
TMP_301(bool) = _now <= REF_334
REF_335(NTech3DDatasets.Round) -> round_[_rID]
REF_336(uint256) -> REF_335.end
TMP_302(bool) = _now > REF_336
REF_337(NTech3DDatasets.Round) -> round_[_rID]
REF_338(uint256) -> REF_337.plyr
TMP_303(bool) = REF_338 == 0
TMP_304(bool) = TMP_302 && TMP_303
TMP_305(bool) = TMP_301 || TMP_304
TMP_306(bool) = TMP_300 && TMP_305
CONDITION TMP_306"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_339(NTech3DDatasets.Player) -> plyr_[_pID]
REF_340(uint256) -> REF_339.gen
TMP_307(uint256) = INTERNAL_CALL, NTech3DLong.withdrawEarnings(uint256)(_pID)
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_307', '_eth'] 
REF_340(uint256) (->plyr_) := TMP_308(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.core(uint256,uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_342(NTech3DDatasets.Round) -> round_[_rID]
REF_343(uint256) -> REF_342.end
TMP_310(bool) = _now > REF_343
REF_344(NTech3DDatasets.Round) -> round_[_rID]
REF_345(bool) -> REF_344.ended
TMP_311(bool) = REF_345 == False
TMP_312(bool) = TMP_310 && TMP_311
CONDITION TMP_312"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_346(NTech3DDatasets.Round) -> round_[_rID]
REF_347(bool) -> REF_346.ended
REF_347(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_313(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.endRound(NTech3DDatasets.EventReturns)(_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_313(NTech3DDatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_348(uint256) -> _eventData_.compressedData
REF_349(uint256) -> _eventData_.compressedData
TMP_314(uint256) = _now * 1000000000000000000
TMP_315(uint256) = REF_349 + TMP_314
REF_348(uint256) (->_eventData_) := TMP_315(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_350(uint256) -> _eventData_.compressedIDs
REF_351(uint256) -> _eventData_.compressedIDs
TMP_316(uint256) = REF_351 + _pID
REF_350(uint256) (->_eventData_) := TMP_316(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.NTAmount,_eventData_.genAmount)

IRs:
REF_352(NTech3DDatasets.Player) -> plyr_[_pID]
REF_353(bytes32) -> REF_352.name
REF_354(uint256) -> _eventData_.compressedData
REF_355(uint256) -> _eventData_.compressedIDs
REF_356(address) -> _eventData_.winnerAddr
REF_357(bytes32) -> _eventData_.winnerName
REF_358(uint256) -> _eventData_.amountWon
REF_359(uint256) -> _eventData_.newPot
REF_360(uint256) -> _eventData_.NTAmount
REF_361(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_353,REF_354,REF_355,REF_356,REF_357,REF_358,REF_359,REF_360,REF_361)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1385.sol-NTech3DLong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_89(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_89(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_185 = CONVERT 0 to address
TMP_186(bool) = _affCode == TMP_185
TMP_187(bool) = _affCode == msg.sender
TMP_188(bool) = TMP_186 || TMP_187
CONDITION TMP_188"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_90(NTech3DDatasets.Player) -> plyr_[_pID]
REF_91(uint256) -> REF_90.laff
_affID(uint256) := REF_91(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_92(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_92(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_93(NTech3DDatasets.Player) -> plyr_[_pID]
REF_94(uint256) -> REF_93.laff
TMP_189(bool) = _affID != REF_94
CONDITION TMP_189"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_95(NTech3DDatasets.Player) -> plyr_[_pID]
REF_96(uint256) -> REF_95.laff
REF_96(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_190(uint256) = INTERNAL_CALL, NTech3DLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_190(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.reLoadCore(uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NTech3DLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, NTech3DLong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1385.sol-NTech3DLong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_82(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_82(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_176(bool) = _affCode == 0
TMP_177(bool) = _affCode == _pID
TMP_178(bool) = TMP_176 || TMP_177
CONDITION TMP_178"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_83(NTech3DDatasets.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
_affCode(uint256) := REF_84(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_85(NTech3DDatasets.Player) -> plyr_[_pID]
REF_86(uint256) -> REF_85.laff
TMP_179(bool) = _affCode != REF_86
CONDITION TMP_179"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_87(NTech3DDatasets.Player) -> plyr_[_pID]
REF_88(uint256) -> REF_87.laff
REF_88(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_180(uint256) = INTERNAL_CALL, NTech3DLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_180(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.reLoadCore(uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NTech3DLong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, NTech3DLong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 1385.sol-NTech3DLong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_97(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_97(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_195(bool) = _affCode == 
REF_98(NTech3DDatasets.Player) -> plyr_[_pID]
REF_99(bytes32) -> REF_98.name
TMP_196(bool) = _affCode == REF_99
TMP_197(bool) = TMP_195 || TMP_196
CONDITION TMP_197"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_100(NTech3DDatasets.Player) -> plyr_[_pID]
REF_101(uint256) -> REF_100.laff
_affID(uint256) := REF_101(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_102(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_102(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_103(NTech3DDatasets.Player) -> plyr_[_pID]
REF_104(uint256) -> REF_103.laff
TMP_198(bool) = _affID != REF_104
CONDITION TMP_198"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_105(NTech3DDatasets.Player) -> plyr_[_pID]
REF_106(uint256) -> REF_105.laff
REF_106(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_199(uint256) = INTERNAL_CALL, NTech3DLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_199(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, NTech3DLong.reLoadCore(uint256,uint256,uint256,uint256,NTech3DDatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NTech3DLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, NTech3DLong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1385.sol-NTech3DLong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),Called from PlayerBook only)

IRs:
TMP_390 = CONVERT PlayerBook to address
TMP_391(bool) = msg.sender == TMP_390
TMP_392(None) = SOLIDITY_CALL require(bool,string)(TMP_391,Called from PlayerBook only)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_486(uint256) -> pIDxAddr_[_addr]
TMP_393(bool) = REF_486 != _pID
CONDITION TMP_393"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_487(uint256) -> pIDxAddr_[_addr]
REF_487(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_488(uint256) -> pIDxName_[_name]
TMP_394(bool) = REF_488 != _pID
CONDITION TMP_394"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_489(uint256) -> pIDxName_[_name]
REF_489(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_490(NTech3DDatasets.Player) -> plyr_[_pID]
REF_491(address) -> REF_490.addr
TMP_395(bool) = REF_491 != _addr
CONDITION TMP_395"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_492(NTech3DDatasets.Player) -> plyr_[_pID]
REF_493(address) -> REF_492.addr
REF_493(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_494(NTech3DDatasets.Player) -> plyr_[_pID]
REF_495(bytes32) -> REF_494.name
TMP_396(bool) = REF_495 != _name
CONDITION TMP_396"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_496(NTech3DDatasets.Player) -> plyr_[_pID]
REF_497(bytes32) -> REF_496.name
REF_497(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_498(NTech3DDatasets.Player) -> plyr_[_pID]
REF_499(uint256) -> REF_498.laff
TMP_397(bool) = REF_499 != _laff
CONDITION TMP_397"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_500(NTech3DDatasets.Player) -> plyr_[_pID]
REF_501(uint256) -> REF_500.laff
REF_501(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_502(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_503(bool) -> REF_502[_name]
TMP_398(bool) = REF_503 == False
CONDITION TMP_398"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_504(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_505(bool) -> REF_504[_name]
REF_505(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1385.sol-NTech3DLong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),Called from PlayerBook only)

IRs:
TMP_399 = CONVERT PlayerBook to address
TMP_400(bool) = msg.sender == TMP_399
TMP_401(None) = SOLIDITY_CALL require(bool,string)(TMP_400,Called from PlayerBook only)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_506(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_507(bool) -> REF_506[_name]
TMP_402(bool) = REF_507 == False
CONDITION TMP_402"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_508(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_509(bool) -> REF_508[_name]
REF_509(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1385.sol-NTech3DLong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_223(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_223(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_141(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_141(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_142(NTech3DDatasets.Player) -> plyr_[_affID]
REF_143(address) -> REF_142.addr
REF_144(NTech3DDatasets.Player) -> plyr_[_affID]
REF_145(bytes32) -> REF_144.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_143,REF_145,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
9->1;
}
// Function: 1385.sol-NTech3DLong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_227(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_227(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_149(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_149(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_150(NTech3DDatasets.Player) -> plyr_[_affID]
REF_151(address) -> REF_150.addr
REF_152(NTech3DDatasets.Player) -> plyr_[_affID]
REF_153(bytes32) -> REF_152.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_151,REF_153,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
9->1;
}
// Function: 1385.sol-NTech3DLong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_231(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_231(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_157(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_157(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_158(NTech3DDatasets.Player) -> plyr_[_affID]
REF_159(address) -> REF_158.addr
REF_160(NTech3DDatasets.Player) -> plyr_[_affID]
REF_161(bytes32) -> REF_160.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_159,REF_161,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
9->1;
}
// Function: 1385.sol-NTech3DLong-setNTToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(addr) != address(0x0),Empty address not allowed.)

IRs:
TMP_91 = CONVERT addr to address
TMP_92 = CONVERT 0 to address
TMP_93(bool) = TMP_91 != TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,Empty address not allowed.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
NTToken_ = ERC20(addr)

IRs:
TMP_95 = CONVERT addr to ERC20
NTToken_(ERC20) := TMP_95(ERC20)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, NTech3DLong.isAdmin()()"];
3->1;
}
// Function: 1385.sol-NTech3DLong-setOtherNTech3D(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(_otherNTech3D) != address(0x0),Empty address not allowed.)

IRs:
TMP_121 = CONVERT _otherNTech3D to address
TMP_122 = CONVERT 0 to address
TMP_123(bool) = TMP_121 != TMP_122
TMP_124(None) = SOLIDITY_CALL require(bool,string)(TMP_123,Empty address not allowed.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(otherNTech3D_) == address(0x0),OtherNTech3D has been set.)

IRs:
TMP_125 = CONVERT otherNTech3D_ to address
TMP_126 = CONVERT 0 to address
TMP_127(bool) = TMP_125 == TMP_126
TMP_128(None) = SOLIDITY_CALL require(bool,string)(TMP_127,OtherNTech3D has been set.)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
otherNTech3D_ = OtherNTech3D(_otherNTech3D)

IRs:
TMP_129 = CONVERT _otherNTech3D to OtherNTech3D
otherNTech3D_(OtherNTech3D) := TMP_129(OtherNTech3D)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, NTech3DLong.isAdmin()()"];
4->1;
}
// Function: 1385.sol-NTech3DLong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x410526CD583AF0bE0530166d53Efcd7da969F7B7)

IRs:
TMP_569 = CONVERT 371199283971570947552748542674577510700837107639 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_569(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = NTech 3D Long Official

IRs:
name(string) := NTech 3D Long Official(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = NT3D

IRs:
symbol(string) := NT3D(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInc_ = 60

IRs:
rndInc_(uint256) := 60(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 21600

IRs:
rndMax_(uint256) := 21600(uint256)"];
}
// Function: 1385.sol-NTech3DLong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ntOf1Ether_ = 30000

IRs:
ntOf1Ether_(uint256) := 30000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
}
// Function: 1385.sol-NTech3DLong-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(amount > 0,Must > 0 )

IRs:
TMP_97(bool) = amount > 0
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,Must > 0 )"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
NTToken_.transfer(toAddr,amount)

IRs:
TMP_99(bool) = HIGH_LEVEL_CALL, dest:NTToken_(ERC20), function:transfer, arguments:['toAddr', 'amount']  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, NTech3DLong.isAdmin()()"];
4->1;
}
// Function: 1385.sol-NTech3DLong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_460(uint256) = INTERNAL_CALL, NTech3DLong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_460(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_461(bool) = _earnings > 0
CONDITION TMP_461"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_600(NTech3DDatasets.Player) -> plyr_[_pID]
REF_601(uint256) -> REF_600.gen
REF_603(NTech3DDatasets.Player) -> plyr_[_pID]
REF_604(uint256) -> REF_603.gen
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_604'] 
REF_601(uint256) (->plyr_) := TMP_462(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_605(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_606(NTech3DDatasets.PlayerRounds) -> REF_605[_rIDlast]
REF_607(uint256) -> REF_606.mask
REF_609(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_610(NTech3DDatasets.PlayerRounds) -> REF_609[_rIDlast]
REF_611(uint256) -> REF_610.mask
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_611'] 
REF_607(uint256) (->plyrRnds_) := TMP_463(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1385.sol-NTech3DLong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_545(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_691(NTech3DDatasets.Round) -> round_[_rID]
REF_692(uint256) -> REF_691.keys
TMP_546(uint256) = TMP_545 / REF_692
_ppt(uint256) := TMP_546(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_693(NTech3DDatasets.Round) -> round_[_rID]
REF_694(uint256) -> REF_693.mask
REF_696(NTech3DDatasets.Round) -> round_[_rID]
REF_697(uint256) -> REF_696.mask
TMP_547(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_697'] 
REF_694(uint256) (->round_) := TMP_547(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_548(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_549(uint256) = TMP_548 / 1000000000000000000
_pearn(uint256) := TMP_549(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_699(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_700(NTech3DDatasets.PlayerRounds) -> REF_699[_rID]
REF_701(uint256) -> REF_700.mask
REF_702(NTech3DDatasets.Round) -> round_[_rID]
REF_703(uint256) -> REF_702.mask
TMP_550(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_703', '_keys'] 
TMP_551(uint256) = TMP_550 / 1000000000000000000
TMP_552(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_551', '_pearn'] 
REF_707(mapping(uint256 => NTech3DDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_708(NTech3DDatasets.PlayerRounds) -> REF_707[_rID]
REF_709(uint256) -> REF_708.mask
TMP_553(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_552', 'REF_709'] 
REF_701(uint256) (->plyrRnds_) := TMP_553(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_712(NTech3DDatasets.Round) -> round_[_rID]
REF_713(uint256) -> REF_712.keys
TMP_554(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_713'] 
TMP_555(uint256) = TMP_554 / 1000000000000000000
TMP_556(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_555'] 
RETURN TMP_556"];
}
// Function: 1385.sol-NTech3DLong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_612(NTech3DDatasets.Round) -> round_[_rID]
REF_613(uint256) -> REF_612.end
TMP_464(bool) = _now > REF_613
REF_614(NTech3DDatasets.Round) -> round_[_rID]
REF_615(uint256) -> REF_614.plyr
TMP_465(bool) = REF_615 == 0
TMP_466(bool) = TMP_464 && TMP_465
CONDITION TMP_466"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_467(uint256) = _keys / 1000000000000000000
TMP_468(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_467', 'rndInc_'] 
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_468', '_now'] 
_newTime(uint256) := TMP_469(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_470(uint256) = _keys / 1000000000000000000
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_470', 'rndInc_'] 
REF_620(NTech3DDatasets.Round) -> round_[_rID]
REF_621(uint256) -> REF_620.end
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_471', 'REF_621'] 
_newTime(uint256) := TMP_472(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_474(bool) = _newTime < TMP_473
CONDITION TMP_474"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_623(NTech3DDatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.end
REF_624(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_625(NTech3DDatasets.Round) -> round_[_rID]
REF_626(uint256) -> REF_625.end
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_626(uint256) (->round_) := TMP_475(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1385.sol-NTech3DLong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_412(bool) = _team < 0
TMP_413(bool) = _team > 3
TMP_414(bool) = TMP_412 || TMP_413
CONDITION TMP_414"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 1385.sol-NTech3DLong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_107(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_107(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && (round_[_rID].ended == false) && round_[_rID].plyr != 0

IRs:
REF_108(NTech3DDatasets.Round) -> round_[_rID]
REF_109(uint256) -> REF_108.end
TMP_204(bool) = _now > REF_109
REF_110(NTech3DDatasets.Round) -> round_[_rID]
REF_111(bool) -> REF_110.ended
TMP_205(bool) = REF_111 == False
TMP_206(bool) = TMP_204 && TMP_205
REF_112(NTech3DDatasets.Round) -> round_[_rID]
REF_113(uint256) -> REF_112.plyr
TMP_207(bool) = REF_113 != 0
TMP_208(bool) = TMP_206 && TMP_207
CONDITION TMP_208"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_114(NTech3DDatasets.Round) -> round_[_rID]
REF_115(bool) -> REF_114.ended
REF_115(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_209(NTech3DDatasets.EventReturns) = INTERNAL_CALL, NTech3DLong.endRound(NTech3DDatasets.EventReturns)(_eventData_)
_eventData_(NTech3DDatasets.EventReturns) := TMP_209(NTech3DDatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_210(uint256) = INTERNAL_CALL, NTech3DLong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_210(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_211(bool) = _eth > 0
CONDITION TMP_211"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_116(NTech3DDatasets.Player) -> plyr_[_pID]
REF_117(address) -> REF_116.addr
Transfer dest:REF_117 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_119(uint256) -> _eventData_.compressedData
REF_120(uint256) -> _eventData_.compressedData
TMP_213(uint256) = _now * 1000000000000000000
TMP_214(uint256) = REF_120 + TMP_213
REF_119(uint256) (->_eventData_) := TMP_214(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_121(uint256) -> _eventData_.compressedIDs
REF_122(uint256) -> _eventData_.compressedIDs
TMP_215(uint256) = REF_122 + _pID
REF_121(uint256) (->_eventData_) := TMP_215(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.NTAmount,_eventData_.genAmount)

IRs:
REF_123(NTech3DDatasets.Player) -> plyr_[_pID]
REF_124(bytes32) -> REF_123.name
REF_125(uint256) -> _eventData_.compressedData
REF_126(uint256) -> _eventData_.compressedIDs
REF_127(address) -> _eventData_.winnerAddr
REF_128(bytes32) -> _eventData_.winnerName
REF_129(uint256) -> _eventData_.amountWon
REF_130(uint256) -> _eventData_.newPot
REF_131(uint256) -> _eventData_.NTAmount
REF_132(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_124,_eth,REF_125,REF_126,REF_127,REF_128,REF_129,REF_130,REF_131,REF_132)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_217(uint256) = INTERNAL_CALL, NTech3DLong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_217(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_218(bool) = _eth > 0
CONDITION TMP_218"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_133(NTech3DDatasets.Player) -> plyr_[_pID]
REF_134(address) -> REF_133.addr
Transfer dest:REF_134 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_136(NTech3DDatasets.Player) -> plyr_[_pID]
REF_137(bytes32) -> REF_136.name
Emit onWithdraw(_pID,msg.sender,REF_137,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NTech3DLong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NTech3DLong.isHuman()()"];
23->1;
}
// Function: 1385.sol-NTech3DLong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_714(NTech3DDatasets.Player) -> plyr_[_pID]
REF_715(uint256) -> REF_714.lrnd
INTERNAL_CALL, NTech3DLong.updateGenVault(uint256,uint256)(_pID,REF_715)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_716(NTech3DDatasets.Player) -> plyr_[_pID]
REF_717(uint256) -> REF_716.win
REF_719(NTech3DDatasets.Player) -> plyr_[_pID]
REF_720(uint256) -> REF_719.gen
TMP_558(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_717', 'REF_720'] 
REF_722(NTech3DDatasets.Player) -> plyr_[_pID]
REF_723(uint256) -> REF_722.aff
TMP_559(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_558', 'REF_723'] 
_earnings(uint256) := TMP_559(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_560(bool) = _earnings > 0
CONDITION TMP_560"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_724(NTech3DDatasets.Player) -> plyr_[_pID]
REF_725(uint256) -> REF_724.win
REF_725(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_726(NTech3DDatasets.Player) -> plyr_[_pID]
REF_727(uint256) -> REF_726.gen
REF_727(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_728(NTech3DDatasets.Player) -> plyr_[_pID]
REF_729(uint256) -> REF_728.aff
REF_729(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1385.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_24 = CONVERT _input to bytes
_temp(bytes) := TMP_24(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_25(bool) = _length <= 32
TMP_26(bool) = _length > 0
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_29(bool) = REF_1 != 32
TMP_30(uint256) = _length - 1
REF_2(None) -> _temp[TMP_30]
TMP_31(bool) = REF_2 != 32
TMP_32(bool) = TMP_29 && TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_34(bool) = REF_3 == 48
CONDITION TMP_34"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_35(bool) = REF_4 != 120
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_37(bool) = REF_5 != 88
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_39(bool) = i < _length
CONDITION TMP_39"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_40(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_41(bool) = REF_7 < 91
TMP_42(bool) = TMP_40 && TMP_41
CONDITION TMP_42"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_43 = CONVERT REF_9 to uint256
TMP_44(uint256) = TMP_43 + 32
TMP_45 = CONVERT TMP_44 to bytes1
REF_8(bytes1) (->_temp) := TMP_45(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_46(bool) = _hasNonNumber == False
CONDITION TMP_46"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_47(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_48(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_49(bool) = REF_12 < 123
TMP_50(bool) = TMP_48 && TMP_49
TMP_51(bool) = TMP_47 || TMP_50
REF_13(None) -> _temp[i]
TMP_52(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_53(bool) = REF_14 < 58
TMP_54(bool) = TMP_52 && TMP_53
TMP_55(bool) = TMP_51 || TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_57(bool) = REF_15 == 32
CONDITION TMP_57"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_58(uint256) = i + 1
REF_16(None) -> _temp[TMP_58]
TMP_59(bool) = REF_16 != 32
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_61(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_62(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_63(bool) = REF_18 > 57
TMP_64(bool) = TMP_62 || TMP_63
TMP_65(bool) = TMP_61 && TMP_64
CONDITION TMP_65"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_66(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_67(bool) = _hasNonNumber == True
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1385.sol-OtherNTech3D-potSwap()
digraph{
}
// Function: 1385.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1385.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1385.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1385.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1385.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1385.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1385.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1385.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1385.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1385.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1385.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1385.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_19(bool) = x == 0
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_20(bool) = y == 0
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_21(bool) = i < y
CONDITION TMP_21"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_22(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1385.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_18(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_18"];
}
// Function: 1385.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_13(uint256) = TMP_12 / 2
z(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_14(bool) = z < y
CONDITION TMP_14"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_15(uint256) = x / z
TMP_16(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_15,z)
TMP_17(uint256) = TMP_16 / 2
z(uint256) := TMP_17(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1385.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
