digraph G {
// Function: 1520.sol-Av8DShort-TeamHOMO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(admin == msg.sender)

IRs:
TMP_23(bool) = admin == msg.sender
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_25 = CONVERT this to address
TMP_26(uint256) = SOLIDITY_CALL balance(address)(TMP_25)
Transfer dest:msg.sender value:TMP_26"];
}
// Function: 1520.sol-Av8DShort-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_403(bool) = msg.sender == admin
TMP_404(None) = SOLIDITY_CALL require(bool,string)(TMP_403,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO4D already activated)

IRs:
TMP_405(bool) = activated_ == False
TMP_406(None) = SOLIDITY_CALL require(bool,string)(TMP_405,FOMO4D already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_660(F3Ddatasets.Round) -> round_[1]
REF_661(uint256) -> REF_660.strt
TMP_407(uint256) = now + rndExtra_
TMP_408(uint256) = TMP_407 - rndGap_
REF_661(uint256) (->round_) := TMP_408(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_662(F3Ddatasets.Round) -> round_[1]
REF_663(uint256) -> REF_662.end
TMP_409(uint256) = now + rndInit_
TMP_410(uint256) = TMP_409 + rndExtra_
REF_663(uint256) (->round_) := TMP_410(uint256)"];
}
// Function: 1520.sol-Av8DShort-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_334(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_335(bytes32) = SOLIDITY_CALL keccak256()(TMP_334)
TMP_336 = CONVERT TMP_335 to uint256
TMP_337(uint256) = TMP_336 / now
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_333', 'TMP_337'] 
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_338', 'block.gaslimit'] 
TMP_340(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_341(bytes32) = SOLIDITY_CALL keccak256()(TMP_340)
TMP_342 = CONVERT TMP_341 to uint256
TMP_343(uint256) = TMP_342 / now
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_339', 'TMP_343'] 
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_344', 'block.number'] 
TMP_346(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_345)
TMP_347(bytes32) = SOLIDITY_CALL keccak256()(TMP_346)
TMP_348 = CONVERT TMP_347 to uint256
seed(uint256) := TMP_348(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_349(uint256) = seed / 1000
TMP_350(uint256) = TMP_349 * 1000
TMP_351(uint256) = seed - TMP_350
TMP_352(bool) = TMP_351 < airDropTracker_
CONDITION TMP_352"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1520.sol-Av8DShort-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_260(F3Ddatasets.Round) -> round_[_rID]
REF_261(uint256) -> REF_260.strt
TMP_157(uint256) = REF_261 + rndGap_
TMP_158(bool) = _now > TMP_157
REF_262(F3Ddatasets.Round) -> round_[_rID]
REF_263(uint256) -> REF_262.end
TMP_159(bool) = _now <= REF_263
REF_264(F3Ddatasets.Round) -> round_[_rID]
REF_265(uint256) -> REF_264.end
TMP_160(bool) = _now > REF_265
REF_266(F3Ddatasets.Round) -> round_[_rID]
REF_267(uint256) -> REF_266.plyr
TMP_161(bool) = REF_267 == 0
TMP_162(bool) = TMP_160 && TMP_161
TMP_163(bool) = TMP_159 || TMP_162
TMP_164(bool) = TMP_158 && TMP_163
CONDITION TMP_164"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_268(F3Ddatasets.Round) -> round_[_rID]
REF_269(uint256) -> REF_268.end
TMP_166(bool) = _now > REF_269
REF_270(F3Ddatasets.Round) -> round_[_rID]
REF_271(bool) -> REF_270.ended
TMP_167(bool) = REF_271 == False
TMP_168(bool) = TMP_166 && TMP_167
CONDITION TMP_168"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_272(F3Ddatasets.Round) -> round_[_rID]
REF_273(bool) -> REF_272.ended
REF_273(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_169(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_169(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_274(uint256) -> _eventData_.compressedData
REF_275(uint256) -> _eventData_.compressedData
TMP_170(uint256) = _now * 1000000000000000000
TMP_171(uint256) = REF_275 + TMP_170
REF_274(uint256) (->_eventData_) := TMP_171(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_276(uint256) -> _eventData_.compressedIDs
REF_277(uint256) -> _eventData_.compressedIDs
TMP_172(uint256) = REF_277 + _pID
REF_276(uint256) (->_eventData_) := TMP_172(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_279(F3Ddatasets.Player) -> plyr_[_pID]
REF_280(bytes32) -> REF_279.name
REF_281(uint256) -> _eventData_.compressedData
REF_282(uint256) -> _eventData_.compressedIDs
REF_283(address) -> _eventData_.winnerAddr
REF_284(bytes32) -> _eventData_.winnerName
REF_285(uint256) -> _eventData_.amountWon
REF_286(uint256) -> _eventData_.newPot
REF_287(uint256) -> _eventData_.P3DAmount
REF_288(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_280,msg.value,REF_281,REF_282,REF_283,REF_284,REF_285,REF_286,REF_287,REF_288)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_289(F3Ddatasets.Player) -> plyr_[_pID]
REF_290(uint256) -> REF_289.gen
REF_291(F3Ddatasets.Player) -> plyr_[_pID]
REF_292(uint256) -> REF_291.gen
TMP_174(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_292', 'msg.value'] 
REF_290(uint256) (->plyr_) := TMP_174(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1520.sol-Av8DShort-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_28(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_28(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_27(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_27(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_29 = CONVERT 0 to address
TMP_30(bool) = _affCode == TMP_29
TMP_31(bool) = _affCode == msg.sender
TMP_32(bool) = TMP_30 || TMP_31
CONDITION TMP_32"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_28(F3Ddatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
_affID(uint256) := REF_29(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_30(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_30(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_31(F3Ddatasets.Player) -> plyr_[_pID]
REF_32(uint256) -> REF_31.laff
TMP_33(bool) = _affID != REF_32
CONDITION TMP_33"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_33(F3Ddatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
REF_34(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_34(uint256) = INTERNAL_CALL, Av8DShort.verifyTeam(uint256)(_team)
_team(uint256) := TMP_34(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Av8DShort.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1520.sol-Av8DShort-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, Av8DShort.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Av8DShort.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 1520.sol-Av8DShort-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_39(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_39(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_40(bool) = _affCode == 
REF_36(F3Ddatasets.Player) -> plyr_[_pID]
REF_37(bytes32) -> REF_36.name
TMP_41(bool) = _affCode == REF_37
TMP_42(bool) = TMP_40 || TMP_41
CONDITION TMP_42"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_38(F3Ddatasets.Player) -> plyr_[_pID]
REF_39(uint256) -> REF_38.laff
_affID(uint256) := REF_39(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_40(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_40(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_41(F3Ddatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
TMP_43(bool) = _affID != REF_42
CONDITION TMP_43"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_43(F3Ddatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
REF_44(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_44(uint256) = INTERNAL_CALL, Av8DShort.verifyTeam(uint256)(_team)
_team(uint256) := TMP_44(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Av8DShort.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1520.sol-Av8DShort-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_409(F3Ddatasets.Round) -> round_[_rID]
REF_410(uint256) -> REF_409.strt
TMP_240(uint256) = REF_410 + rndGap_
TMP_241(bool) = _now > TMP_240
REF_411(F3Ddatasets.Round) -> round_[_rID]
REF_412(uint256) -> REF_411.end
TMP_242(bool) = _now <= REF_412
REF_413(F3Ddatasets.Round) -> round_[_rID]
REF_414(uint256) -> REF_413.end
TMP_243(bool) = _now > REF_414
REF_415(F3Ddatasets.Round) -> round_[_rID]
REF_416(uint256) -> REF_415.plyr
TMP_244(bool) = REF_416 == 0
TMP_245(bool) = TMP_243 && TMP_244
TMP_246(bool) = TMP_242 || TMP_245
TMP_247(bool) = TMP_241 && TMP_246
CONDITION TMP_247"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_417(F3Ddatasets.Round) -> round_[_rID]
REF_418(uint256) -> REF_417.eth
TMP_248(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_418', '_eth'] 
RETURN TMP_248"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_249(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_249"];
}
// Function: 1520.sol-Av8DShort-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_399(F3Ddatasets.Round) -> round_[_rIDlast]
REF_400(uint256) -> REF_399.mask
REF_402(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_403(F3Ddatasets.PlayerRounds) -> REF_402[_rIDlast]
REF_404(uint256) -> REF_403.keys
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_400', 'REF_404'] 
TMP_238(uint256) = TMP_237 / 1000000000000000000
REF_406(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_407(F3Ddatasets.PlayerRounds) -> REF_406[_rIDlast]
REF_408(uint256) -> REF_407.mask
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_238', 'REF_408'] 
RETURN TMP_239"];
}
// Function: 1520.sol-Av8DShort-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(61,0)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(61,0)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(61,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(61,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(61,0)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(61,0)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(61,0)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(61,0)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(35,0)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(35,0)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(35,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(35,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(35,0)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(35,0)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(35,0)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(35,0)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 1520.sol-Av8DShort-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_326(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_327(F3Ddatasets.PlayerRounds) -> REF_326[_rID]
REF_328(uint256) -> REF_327.keys
TMP_194(bool) = REF_328 == 0
CONDITION TMP_194"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_195(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_195(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_eth > 1000000000

IRs:
TMP_196(bool) = _eth > 1000000000
CONDITION TMP_196"];
4->5[label="True"];
4->52[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_329(F3Ddatasets.Round) -> round_[_rID]
REF_330(uint256) -> REF_329.eth
TMP_197(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_330', '_eth'] 
_keys(uint256) := TMP_197(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_198(bool) = _keys >= 1000000000000000000
CONDITION TMP_198"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, Av8DShort.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_332(F3Ddatasets.Round) -> round_[_rID]
REF_333(uint256) -> REF_332.plyr
TMP_200(bool) = REF_333 != _pID
CONDITION TMP_200"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_334(F3Ddatasets.Round) -> round_[_rID]
REF_335(uint256) -> REF_334.plyr
REF_335(uint256) (->round_) := _pID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_336(F3Ddatasets.Round) -> round_[_rID]
REF_337(uint256) -> REF_336.team
TMP_201(bool) = REF_337 != _team
CONDITION TMP_201"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_338(F3Ddatasets.Round) -> round_[_rID]
REF_339(uint256) -> REF_338.team
REF_339(uint256) (->round_) := _team(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_340(uint256) -> _eventData_.compressedData
REF_341(uint256) -> _eventData_.compressedData
TMP_202(uint256) = REF_341 + 100
REF_340(uint256) (->_eventData_) := TMP_202(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_203(bool) = _eth >= 100000000000000000
CONDITION TMP_203"];
16->17[label="True"];
16->42[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_204(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
airdrop() == true

IRs:
TMP_205(bool) = INTERNAL_CALL, Av8DShort.airdrop()()
TMP_206(bool) = TMP_205 == True
CONDITION TMP_206"];
18->19[label="True"];
18->41[label="False"];
19[label="Node Type: NEW VARIABLE 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_207(bool) = _eth >= 10000000000000000000
CONDITION TMP_207"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_209(uint256) = TMP_208 / 100
_prize(uint256) := TMP_209(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_343(F3Ddatasets.Player) -> plyr_[_pID]
REF_344(uint256) -> REF_343.win
REF_345(F3Ddatasets.Player) -> plyr_[_pID]
REF_346(uint256) -> REF_345.win
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_346', '_prize'] 
REF_344(uint256) (->plyr_) := TMP_210(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_211(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_349(uint256) -> _eventData_.compressedData
REF_349(-> _eventData_) = REF_349 + 300000000000000000000000000000000"];
24->37;
25[label="Node Type: IF 25

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_212(bool) = _eth >= 1000000000000000000
TMP_213(bool) = _eth < 10000000000000000000
TMP_214(bool) = TMP_212 && TMP_213
CONDITION TMP_214"];
25->26[label="True"];
25->30[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_216(uint256) = TMP_215 / 100
_prize(uint256) := TMP_216(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_351(F3Ddatasets.Player) -> plyr_[_pID]
REF_352(uint256) -> REF_351.win
REF_353(F3Ddatasets.Player) -> plyr_[_pID]
REF_354(uint256) -> REF_353.win
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_354', '_prize'] 
REF_352(uint256) (->plyr_) := TMP_217(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_218(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_357(uint256) -> _eventData_.compressedData
REF_357(-> _eventData_) = REF_357 + 200000000000000000000000000000000"];
29->36;
30[label="Node Type: IF 30

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_219(bool) = _eth >= 100000000000000000
TMP_220(bool) = _eth < 1000000000000000000
TMP_221(bool) = TMP_219 && TMP_220
CONDITION TMP_221"];
30->31[label="True"];
30->35[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_223(uint256) = TMP_222 / 100
_prize(uint256) := TMP_223(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_359(F3Ddatasets.Player) -> plyr_[_pID]
REF_360(uint256) -> REF_359.win
REF_361(F3Ddatasets.Player) -> plyr_[_pID]
REF_362(uint256) -> REF_361.win
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_362', '_prize'] 
REF_360(uint256) (->plyr_) := TMP_224(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_225(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_365(uint256) -> _eventData_.compressedData
REF_365(-> _eventData_) = REF_365 + 300000000000000000000000000000000"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_366(uint256) -> _eventData_.compressedData
REF_366(-> _eventData_) = REF_366 + 10000000000000000000000000000000"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_367(uint256) -> _eventData_.compressedData
TMP_226(uint256) = _prize * 1000000000000000000000000000000000
REF_367(-> _eventData_) = REF_367 + TMP_226"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_368(uint256) -> _eventData_.compressedData
REF_369(uint256) -> _eventData_.compressedData
TMP_227(uint256) = airDropTracker_ * 1000
TMP_228(uint256) = REF_369 + TMP_227
REF_368(uint256) (->_eventData_) := TMP_228(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_370(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_371(F3Ddatasets.PlayerRounds) -> REF_370[_rID]
REF_372(uint256) -> REF_371.keys
REF_374(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_375(F3Ddatasets.PlayerRounds) -> REF_374[_rID]
REF_376(uint256) -> REF_375.keys
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_376'] 
REF_372(uint256) (->plyrRnds_) := TMP_229(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_377(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_378(F3Ddatasets.PlayerRounds) -> REF_377[_rID]
REF_379(uint256) -> REF_378.eth
REF_381(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_382(F3Ddatasets.PlayerRounds) -> REF_381[_rID]
REF_383(uint256) -> REF_382.eth
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_383'] 
REF_379(uint256) (->plyrRnds_) := TMP_230(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_384(F3Ddatasets.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.keys
REF_387(F3Ddatasets.Round) -> round_[_rID]
REF_388(uint256) -> REF_387.keys
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_388'] 
REF_385(uint256) (->round_) := TMP_231(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_389(F3Ddatasets.Round) -> round_[_rID]
REF_390(uint256) -> REF_389.eth
REF_392(F3Ddatasets.Round) -> round_[_rID]
REF_393(uint256) -> REF_392.eth
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_393'] 
REF_390(uint256) (->round_) := TMP_232(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_394(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_395(uint256) -> REF_394[_team]
REF_397(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_398(uint256) -> REF_397[_team]
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_398'] 
REF_395(uint256) (->rndTmEth_) := TMP_233(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_234(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_234(F3Ddatasets.EventReturns)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_235(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_235(F3Ddatasets.EventReturns)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
51->52;
52[label="Node Type: END_IF 52
"];
}
// Function: 1520.sol-Av8DShort-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_458(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_458(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_274(bool) = _pID == 0
CONDITION TMP_274"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_275(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_275(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_276(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_276(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_277(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_277(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_462(uint256) -> pIDxAddr_[msg.sender]
REF_462(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_463(F3Ddatasets.Player) -> plyr_[_pID]
REF_464(address) -> REF_463.addr
REF_464(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_278(bool) = _name != 
CONDITION TMP_278"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_465(uint256) -> pIDxName_[_name]
REF_465(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_466(F3Ddatasets.Player) -> plyr_[_pID]
REF_467(bytes32) -> REF_466.name
REF_467(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_468(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_469(bool) -> REF_468[_name]
REF_469(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_279(bool) = _laff != 0
TMP_280(bool) = _laff != _pID
TMP_281(bool) = TMP_279 && TMP_280
CONDITION TMP_281"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_470(F3Ddatasets.Player) -> plyr_[_pID]
REF_471(uint256) -> REF_470.laff
REF_471(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_472(uint256) -> _eventData_.compressedData
REF_473(uint256) -> _eventData_.compressedData
TMP_282(uint256) = REF_473 + 1
REF_472(uint256) (->_eventData_) := TMP_282(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1520.sol-Av8DShort-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_353(uint256) = _eth / 50
_com(uint256) := TMP_353(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = (_eth / 10).add(_eth / 20)

IRs:
TMP_354(uint256) = _eth / 10
TMP_355(uint256) = _eth / 20
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_354', 'TMP_355'] 
_aff(uint256) := TMP_356(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_357(bool) = _affID != _pID
REF_572(F3Ddatasets.Player) -> plyr_[_affID]
REF_573(bytes32) -> REF_572.name
TMP_358(bool) = REF_573 != 
TMP_359(bool) = TMP_357 && TMP_358
CONDITION TMP_359"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_574(F3Ddatasets.Player) -> plyr_[_affID]
REF_575(uint256) -> REF_574.aff
REF_577(F3Ddatasets.Player) -> plyr_[_affID]
REF_578(uint256) -> REF_577.aff
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_578'] 
REF_575(uint256) (->plyr_) := TMP_360(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_580(F3Ddatasets.Player) -> plyr_[_affID]
REF_581(address) -> REF_580.addr
REF_582(F3Ddatasets.Player) -> plyr_[_affID]
REF_583(bytes32) -> REF_582.name
Emit onAffiliatePayout(_affID,REF_581,REF_583,_rID,_pID,_aff,now)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_com.add(_aff)

IRs:
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_aff'] "];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
com.transfer(_com)

IRs:
Transfer dest:com value:_com"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1520.sol-Av8DShort-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_587(F3Ddatasets.TeamFee) -> fees_[_team]
REF_588(uint256) -> REF_587.gen
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_588'] 
TMP_365(uint256) = TMP_364 / 100
_gen(uint256) := TMP_365(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_366(uint256) = _eth / 100
_air(uint256) := TMP_366(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_367(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(18)) / 100) / 100)

IRs:
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '18'] 
TMP_369(uint256) = TMP_368 / 100
TMP_370(uint256) = TMP_369 / 100
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_370'] 
_eth(uint256) := TMP_371(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_372(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_373(uint256) = INTERNAL_CALL, Av8DShort.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_373(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_374(bool) = _dust > 0
CONDITION TMP_374"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_375(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_594(F3Ddatasets.Round) -> round_[_rID]
REF_595(uint256) -> REF_594.pot
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_598(F3Ddatasets.Round) -> round_[_rID]
REF_599(uint256) -> REF_598.pot
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_376', 'REF_599'] 
REF_595(uint256) (->round_) := TMP_377(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_600(uint256) -> _eventData_.genAmount
REF_602(uint256) -> _eventData_.genAmount
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_602'] 
REF_600(uint256) (->_eventData_) := TMP_378(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_603(uint256) -> _eventData_.potAmount
REF_603(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1520.sol-Av8DShort-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_482(F3Ddatasets.Round) -> round_[_rID]
REF_483(uint256) -> REF_482.plyr
_winPID(uint256) := REF_483(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_484(F3Ddatasets.Round) -> round_[_rID]
REF_485(uint256) -> REF_484.team
_winTID(uint256) := REF_485(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_486(F3Ddatasets.Round) -> round_[_rID]
REF_487(uint256) -> REF_486.pot
_pot(uint256) := REF_487(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(0)) / 100

IRs:
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '0'] 
TMP_290(uint256) = TMP_289 / 100
_win(uint256) := TMP_290(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 1)

IRs:
TMP_291(uint256) = _pot / 1
_com(uint256) := TMP_291(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(0)) / 100

IRs:
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '0'] 
TMP_293(uint256) = TMP_292 / 100
_gen(uint256) := TMP_293(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_res = (_pot.mul(0)) / 100

IRs:
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '0'] 
TMP_295(uint256) = TMP_294 / 100
_res(uint256) := TMP_295(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_492(F3Ddatasets.Round) -> round_[_rID]
REF_493(uint256) -> REF_492.keys
TMP_297(uint256) = TMP_296 / REF_493
_ppt(uint256) := TMP_297(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_496(F3Ddatasets.Round) -> round_[_rID]
REF_497(uint256) -> REF_496.keys
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_497'] 
TMP_299(uint256) = TMP_298 / 1000000000000000000
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_299'] 
_dust(uint256) := TMP_300(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_dust > 0

IRs:
TMP_301(bool) = _dust > 0
CONDITION TMP_301"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_302(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_303(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_500(F3Ddatasets.Player) -> plyr_[_winPID]
REF_501(uint256) -> REF_500.win
REF_503(F3Ddatasets.Player) -> plyr_[_winPID]
REF_504(uint256) -> REF_503.win
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_504'] 
REF_501(uint256) (->plyr_) := TMP_304(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
com.transfer(_com)

IRs:
Transfer dest:com value:_com"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_506(F3Ddatasets.Round) -> round_[_rID]
REF_507(uint256) -> REF_506.mask
REF_509(F3Ddatasets.Round) -> round_[_rID]
REF_510(uint256) -> REF_509.mask
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_510'] 
REF_507(uint256) (->round_) := TMP_306(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_511(uint256) -> _eventData_.compressedData
REF_512(uint256) -> _eventData_.compressedData
REF_513(F3Ddatasets.Round) -> round_[_rID]
REF_514(uint256) -> REF_513.end
TMP_307(uint256) = REF_514 * 1000000
TMP_308(uint256) = REF_512 + TMP_307
REF_511(uint256) (->_eventData_) := TMP_308(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_515(uint256) -> _eventData_.compressedIDs
REF_516(uint256) -> _eventData_.compressedIDs
TMP_309(uint256) = _winPID * 100000000000000000000000000
TMP_310(uint256) = REF_516 + TMP_309
TMP_311(uint256) = _winTID * 100000000000000000
TMP_312(uint256) = TMP_310 + TMP_311
REF_515(uint256) (->_eventData_) := TMP_312(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_517(address) -> _eventData_.winnerAddr
REF_518(F3Ddatasets.Player) -> plyr_[_winPID]
REF_519(address) -> REF_518.addr
REF_517(address) (->_eventData_) := REF_519(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_520(bytes32) -> _eventData_.winnerName
REF_521(F3Ddatasets.Player) -> plyr_[_winPID]
REF_522(bytes32) -> REF_521.name
REF_520(bytes32) (->_eventData_) := REF_522(bytes32)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_523(uint256) -> _eventData_.amountWon
REF_523(uint256) (->_eventData_) := _win(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_524(uint256) -> _eventData_.genAmount
REF_524(uint256) (->_eventData_) := _gen(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.P3DAmount = 0

IRs:
REF_525(uint256) -> _eventData_.P3DAmount
REF_525(uint256) (->_eventData_) := 0(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_526(uint256) -> _eventData_.newPot
REF_526(uint256) (->_eventData_) := _res(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
rID_ ++

IRs:
TMP_313(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_rID ++

IRs:
TMP_314(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_527(F3Ddatasets.Round) -> round_[_rID]
REF_528(uint256) -> REF_527.strt
REF_528(uint256) (->round_) := now(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_529(F3Ddatasets.Round) -> round_[_rID]
REF_530(uint256) -> REF_529.end
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_315', 'rndGap_'] 
REF_530(uint256) (->round_) := TMP_316(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_533(F3Ddatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.pot
REF_534(uint256) (->round_) := _res(uint256)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1520.sol-Av8DShort-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_644(uint256) -> _eventData_.compressedData
REF_645(uint256) -> _eventData_.compressedData
TMP_395(uint256) = now * 1000000000000000000
TMP_396(uint256) = REF_645 + TMP_395
TMP_397(uint256) = _team * 100000000000000000000000000000
TMP_398(uint256) = TMP_396 + TMP_397
REF_644(uint256) (->_eventData_) := TMP_398(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_646(uint256) -> _eventData_.compressedIDs
REF_647(uint256) -> _eventData_.compressedIDs
TMP_399(uint256) = REF_647 + _pID
TMP_400(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_401(uint256) = TMP_399 + TMP_400
REF_646(uint256) (->_eventData_) := TMP_401(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_649(uint256) -> _eventData_.compressedData
REF_650(uint256) -> _eventData_.compressedIDs
REF_651(F3Ddatasets.Player) -> plyr_[_pID]
REF_652(bytes32) -> REF_651.name
REF_653(address) -> _eventData_.winnerAddr
REF_654(bytes32) -> _eventData_.winnerName
REF_655(uint256) -> _eventData_.amountWon
REF_656(uint256) -> _eventData_.newPot
REF_657(uint256) -> _eventData_.P3DAmount
REF_658(uint256) -> _eventData_.genAmount
REF_659(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_649,REF_650,REF_652,msg.sender,_eth,_keys,REF_653,REF_654,REF_655,REF_656,REF_657,REF_658,REF_659,airDropPot_)"];
}
// Function: 1520.sol-Av8DShort-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, Av8DShort.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Av8DShort.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1520.sol-Av8DShort-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_130(F3Ddatasets.Round) -> round_[_rID]
REF_131(uint256) -> REF_130.strt
TMP_108(uint256) = REF_131 + rndGap_
TMP_109(bool) = _now > TMP_108
REF_132(F3Ddatasets.Round) -> round_[_rID]
REF_133(uint256) -> REF_132.end
TMP_110(bool) = _now <= REF_133
REF_134(F3Ddatasets.Round) -> round_[_rID]
REF_135(uint256) -> REF_134.end
TMP_111(bool) = _now > REF_135
REF_136(F3Ddatasets.Round) -> round_[_rID]
REF_137(uint256) -> REF_136.plyr
TMP_112(bool) = REF_137 == 0
TMP_113(bool) = TMP_111 && TMP_112
TMP_114(bool) = TMP_110 || TMP_113
TMP_115(bool) = TMP_109 && TMP_114
CONDITION TMP_115"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_138(F3Ddatasets.Round) -> round_[_rID]
REF_139(uint256) -> REF_138.keys
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_139', '1000000000000000000'] 
TMP_117(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_116', '1000000000000000000'] 
RETURN TMP_117"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 1520.sol-Av8DShort-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_212(F3Ddatasets.Round) -> round_[_rID]
REF_213(uint256) -> REF_212.ico
REF_214(F3Ddatasets.Round) -> round_[_rID]
REF_215(uint256) -> REF_214.keys
REF_216(F3Ddatasets.Round) -> round_[_rID]
REF_217(uint256) -> REF_216.end
REF_218(F3Ddatasets.Round) -> round_[_rID]
REF_219(uint256) -> REF_218.strt
REF_220(F3Ddatasets.Round) -> round_[_rID]
REF_221(uint256) -> REF_220.pot
REF_222(F3Ddatasets.Round) -> round_[_rID]
REF_223(uint256) -> REF_222.team
REF_224(F3Ddatasets.Round) -> round_[_rID]
REF_225(uint256) -> REF_224.plyr
TMP_148(uint256) = REF_225 * 10
TMP_149(uint256) = REF_223 + TMP_148
REF_226(F3Ddatasets.Round) -> round_[_rID]
REF_227(uint256) -> REF_226.plyr
REF_228(F3Ddatasets.Player) -> plyr_[REF_227]
REF_229(address) -> REF_228.addr
REF_230(F3Ddatasets.Round) -> round_[_rID]
REF_231(uint256) -> REF_230.plyr
REF_232(F3Ddatasets.Player) -> plyr_[REF_231]
REF_233(bytes32) -> REF_232.name
REF_234(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_235(uint256) -> REF_234[0]
REF_236(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_237(uint256) -> REF_236[1]
REF_238(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_239(uint256) -> REF_238[2]
REF_240(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_241(uint256) -> REF_240[3]
TMP_150(uint256) = airDropPot_ * 1000
TMP_151(uint256) = airDropTracker_ + TMP_150
RETURN REF_213,_rID,REF_215,REF_217,REF_219,REF_221,TMP_149,REF_229,REF_233,REF_235,REF_237,REF_239,REF_241,TMP_151"];
}
// Function: 1520.sol-Av8DShort-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_152 = CONVERT 0 to address
TMP_153(bool) = _addr == TMP_152
CONDITION TMP_153"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_154(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_242(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_242(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_243(F3Ddatasets.Player) -> plyr_[_pID]
REF_244(bytes32) -> REF_243.name
REF_245(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_246(F3Ddatasets.PlayerRounds) -> REF_245[_rID]
REF_247(uint256) -> REF_246.keys
REF_248(F3Ddatasets.Player) -> plyr_[_pID]
REF_249(uint256) -> REF_248.win
REF_250(F3Ddatasets.Player) -> plyr_[_pID]
REF_251(uint256) -> REF_250.gen
REF_253(F3Ddatasets.Player) -> plyr_[_pID]
REF_254(uint256) -> REF_253.lrnd
TMP_155(uint256) = INTERNAL_CALL, Av8DShort.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_254)
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_251', 'TMP_155'] 
REF_255(F3Ddatasets.Player) -> plyr_[_pID]
REF_256(uint256) -> REF_255.aff
REF_257(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_258(F3Ddatasets.PlayerRounds) -> REF_257[_rID]
REF_259(uint256) -> REF_258.eth
RETURN _pID,REF_244,REF_247,REF_249,TMP_156,REF_256,REF_259"];
}
// Function: 1520.sol-Av8DShort-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_152(F3Ddatasets.Round) -> round_[_rID]
REF_153(uint256) -> REF_152.end
TMP_124(bool) = now > REF_153
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(bool) -> REF_154.ended
TMP_125(bool) = REF_155 == False
TMP_126(bool) = TMP_124 && TMP_125
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(uint256) -> REF_156.plyr
TMP_127(bool) = REF_157 != 0
TMP_128(bool) = TMP_126 && TMP_127
CONDITION TMP_128"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_158(F3Ddatasets.Round) -> round_[_rID]
REF_159(uint256) -> REF_158.plyr
TMP_129(bool) = REF_159 == _pID
CONDITION TMP_129"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_160(F3Ddatasets.Player) -> plyr_[_pID]
REF_161(uint256) -> REF_160.win
REF_163(F3Ddatasets.Round) -> round_[_rID]
REF_164(uint256) -> REF_163.pot
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_164', '48'] 
TMP_131(uint256) = TMP_130 / 100
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_161', 'TMP_131'] 
REF_166(F3Ddatasets.Player) -> plyr_[_pID]
REF_167(uint256) -> REF_166.gen
TMP_133(uint256) = INTERNAL_CALL, Av8DShort.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_170(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_171(F3Ddatasets.PlayerRounds) -> REF_170[_rID]
REF_172(uint256) -> REF_171.mask
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_133', 'REF_172'] 
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_167', 'TMP_134'] 
REF_173(F3Ddatasets.Player) -> plyr_[_pID]
REF_174(uint256) -> REF_173.aff
RETURN TMP_132,TMP_135,REF_174"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_175(F3Ddatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.win
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(uint256) -> REF_177.gen
TMP_136(uint256) = INTERNAL_CALL, Av8DShort.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_181(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_182(F3Ddatasets.PlayerRounds) -> REF_181[_rID]
REF_183(uint256) -> REF_182.mask
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_136', 'REF_183'] 
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_178', 'TMP_137'] 
REF_184(F3Ddatasets.Player) -> plyr_[_pID]
REF_185(uint256) -> REF_184.aff
RETURN REF_176,TMP_138,REF_185"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_186(F3Ddatasets.Player) -> plyr_[_pID]
REF_187(uint256) -> REF_186.win
REF_188(F3Ddatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.gen
REF_191(F3Ddatasets.Player) -> plyr_[_pID]
REF_192(uint256) -> REF_191.lrnd
TMP_139(uint256) = INTERNAL_CALL, Av8DShort.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_192)
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_189', 'TMP_139'] 
REF_193(F3Ddatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.aff
RETURN REF_187,TMP_140,REF_194"];
}
// Function: 1520.sol-Av8DShort-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_195(F3Ddatasets.Round) -> round_[_rID]
REF_196(uint256) -> REF_195.mask
REF_198(F3Ddatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.pot
REF_201(F3Ddatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.team
REF_203(F3Ddatasets.PotSplit) -> potSplit_[REF_202]
REF_204(uint256) -> REF_203.gen
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_199', 'REF_204'] 
TMP_142(uint256) = TMP_141 / 100
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_142', '1000000000000000000'] 
REF_206(F3Ddatasets.Round) -> round_[_rID]
REF_207(uint256) -> REF_206.keys
TMP_144(uint256) = TMP_143 / REF_207
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_196', 'TMP_144'] 
REF_209(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_210(F3Ddatasets.PlayerRounds) -> REF_209[_rID]
REF_211(uint256) -> REF_210.keys
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_145', 'REF_211'] 
TMP_147(uint256) = TMP_146 / 1000000000000000000
RETURN TMP_147"];
}
// Function: 1520.sol-Av8DShort-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_142(F3Ddatasets.Round) -> round_[_rID]
REF_143(uint256) -> REF_142.end
TMP_118(bool) = _now < REF_143
CONDITION TMP_118"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_144(F3Ddatasets.Round) -> round_[_rID]
REF_145(uint256) -> REF_144.strt
TMP_119(uint256) = REF_145 + rndGap_
TMP_120(bool) = _now > TMP_119
CONDITION TMP_120"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_146(F3Ddatasets.Round) -> round_[_rID]
REF_147(uint256) -> REF_146.end
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_147', '_now'] 
RETURN TMP_121"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.strt
TMP_122(uint256) = REF_150 + rndGap_
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_122', '_now'] 
RETURN TMP_123"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1520.sol-Av8DShort-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_421(F3Ddatasets.Round) -> round_[_rID]
REF_422(uint256) -> REF_421.strt
TMP_250(uint256) = REF_422 + rndGap_
TMP_251(bool) = _now > TMP_250
REF_423(F3Ddatasets.Round) -> round_[_rID]
REF_424(uint256) -> REF_423.end
TMP_252(bool) = _now <= REF_424
REF_425(F3Ddatasets.Round) -> round_[_rID]
REF_426(uint256) -> REF_425.end
TMP_253(bool) = _now > REF_426
REF_427(F3Ddatasets.Round) -> round_[_rID]
REF_428(uint256) -> REF_427.plyr
TMP_254(bool) = REF_428 == 0
TMP_255(bool) = TMP_253 && TMP_254
TMP_256(bool) = TMP_252 || TMP_255
TMP_257(bool) = TMP_251 && TMP_256
CONDITION TMP_257"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_429(F3Ddatasets.Round) -> round_[_rID]
REF_430(uint256) -> REF_429.keys
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_430', '_keys'] 
TMP_259(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_258', '_keys'] 
RETURN TMP_259"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_260(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_260"];
}
// Function: 1520.sol-Av8DShort-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_412(bool) = activated_ == True
TMP_413(None) = SOLIDITY_CALL require(bool,string)(TMP_412,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1520.sol-Av8DShort-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_414(bool) = _codeLength == 0
TMP_415(None) = SOLIDITY_CALL require(bool,string)(TMP_414,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1520.sol-Av8DShort-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_416(bool) = _eth >= 1000000000
TMP_417(None) = SOLIDITY_CALL require(bool,string)(TMP_416,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_418(bool) = _eth <= 100000000000000000000000
TMP_419(None) = SOLIDITY_CALL require(bool,string)(TMP_418,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1520.sol-Av8DShort-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_474(F3Ddatasets.Player) -> plyr_[_pID]
REF_475(uint256) -> REF_474.lrnd
TMP_286(bool) = REF_475 != 0
CONDITION TMP_286"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_476(F3Ddatasets.Player) -> plyr_[_pID]
REF_477(uint256) -> REF_476.lrnd
INTERNAL_CALL, Av8DShort.updateGenVault(uint256,uint256)(_pID,REF_477)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_478(F3Ddatasets.Player) -> plyr_[_pID]
REF_479(uint256) -> REF_478.lrnd
REF_479(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_480(uint256) -> _eventData_.compressedData
REF_481(uint256) -> _eventData_.compressedData
TMP_288(uint256) = REF_481 + 10
REF_480(uint256) (->_eventData_) := TMP_288(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1520.sol-Av8DShort-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_294(F3Ddatasets.Round) -> round_[_rID]
REF_295(uint256) -> REF_294.strt
TMP_175(uint256) = REF_295 + rndGap_
TMP_176(bool) = _now > TMP_175
REF_296(F3Ddatasets.Round) -> round_[_rID]
REF_297(uint256) -> REF_296.end
TMP_177(bool) = _now <= REF_297
REF_298(F3Ddatasets.Round) -> round_[_rID]
REF_299(uint256) -> REF_298.end
TMP_178(bool) = _now > REF_299
REF_300(F3Ddatasets.Round) -> round_[_rID]
REF_301(uint256) -> REF_300.plyr
TMP_179(bool) = REF_301 == 0
TMP_180(bool) = TMP_178 && TMP_179
TMP_181(bool) = TMP_177 || TMP_180
TMP_182(bool) = TMP_176 && TMP_181
CONDITION TMP_182"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_302(F3Ddatasets.Player) -> plyr_[_pID]
REF_303(uint256) -> REF_302.gen
TMP_183(uint256) = INTERNAL_CALL, Av8DShort.withdrawEarnings(uint256)(_pID)
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_183', '_eth'] 
REF_303(uint256) (->plyr_) := TMP_184(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_305(F3Ddatasets.Round) -> round_[_rID]
REF_306(uint256) -> REF_305.end
TMP_186(bool) = _now > REF_306
REF_307(F3Ddatasets.Round) -> round_[_rID]
REF_308(bool) -> REF_307.ended
TMP_187(bool) = REF_308 == False
TMP_188(bool) = TMP_186 && TMP_187
CONDITION TMP_188"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_309(F3Ddatasets.Round) -> round_[_rID]
REF_310(bool) -> REF_309.ended
REF_310(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_189(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_189(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_311(uint256) -> _eventData_.compressedData
REF_312(uint256) -> _eventData_.compressedData
TMP_190(uint256) = _now * 1000000000000000000
TMP_191(uint256) = REF_312 + TMP_190
REF_311(uint256) (->_eventData_) := TMP_191(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_313(uint256) -> _eventData_.compressedIDs
REF_314(uint256) -> _eventData_.compressedIDs
TMP_192(uint256) = REF_314 + _pID
REF_313(uint256) (->_eventData_) := TMP_192(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_316(F3Ddatasets.Player) -> plyr_[_pID]
REF_317(bytes32) -> REF_316.name
REF_318(uint256) -> _eventData_.compressedData
REF_319(uint256) -> _eventData_.compressedIDs
REF_320(address) -> _eventData_.winnerAddr
REF_321(bytes32) -> _eventData_.winnerName
REF_322(uint256) -> _eventData_.amountWon
REF_323(uint256) -> _eventData_.newPot
REF_324(uint256) -> _eventData_.P3DAmount
REF_325(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_317,REF_318,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324,REF_325)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1520.sol-Av8DShort-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_52(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_52(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_58 = CONVERT 0 to address
TMP_59(bool) = _affCode == TMP_58
TMP_60(bool) = _affCode == msg.sender
TMP_61(bool) = TMP_59 || TMP_60
CONDITION TMP_61"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_53(F3Ddatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
_affID(uint256) := REF_54(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_55(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_55(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
TMP_62(bool) = _affID != REF_57
CONDITION TMP_62"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
REF_59(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_63(uint256) = INTERNAL_CALL, Av8DShort.verifyTeam(uint256)(_team)
_team(uint256) := TMP_63(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, Av8DShort.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1520.sol-Av8DShort-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_45(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_45(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_49(bool) = _affCode == 0
TMP_50(bool) = _affCode == _pID
TMP_51(bool) = TMP_49 || TMP_50
CONDITION TMP_51"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_46(F3Ddatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
_affCode(uint256) := REF_47(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_48(F3Ddatasets.Player) -> plyr_[_pID]
REF_49(uint256) -> REF_48.laff
TMP_52(bool) = _affCode != REF_49
CONDITION TMP_52"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_50(F3Ddatasets.Player) -> plyr_[_pID]
REF_51(uint256) -> REF_50.laff
REF_51(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_53(uint256) = INTERNAL_CALL, Av8DShort.verifyTeam(uint256)(_team)
_team(uint256) := TMP_53(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, Av8DShort.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 1520.sol-Av8DShort-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_60(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_60(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_68(bool) = _affCode == 
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(bytes32) -> REF_61.name
TMP_69(bool) = _affCode == REF_62
TMP_70(bool) = TMP_68 || TMP_69
CONDITION TMP_70"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_63(F3Ddatasets.Player) -> plyr_[_pID]
REF_64(uint256) -> REF_63.laff
_affID(uint256) := REF_64(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_65(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_65(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
TMP_71(bool) = _affID != REF_67
CONDITION TMP_71"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_68(F3Ddatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
REF_69(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_72(uint256) = INTERNAL_CALL, Av8DShort.verifyTeam(uint256)(_team)
_team(uint256) := TMP_72(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, Av8DShort.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, Av8DShort.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1520.sol-Av8DShort-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_261 = CONVERT PlayerBook to address
TMP_262(bool) = msg.sender == TMP_261
TMP_263(None) = SOLIDITY_CALL require(bool,string)(TMP_262,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_434(uint256) -> pIDxAddr_[_addr]
TMP_264(bool) = REF_434 != _pID
CONDITION TMP_264"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_435(uint256) -> pIDxAddr_[_addr]
REF_435(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_436(uint256) -> pIDxName_[_name]
TMP_265(bool) = REF_436 != _pID
CONDITION TMP_265"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_437(uint256) -> pIDxName_[_name]
REF_437(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_438(F3Ddatasets.Player) -> plyr_[_pID]
REF_439(address) -> REF_438.addr
TMP_266(bool) = REF_439 != _addr
CONDITION TMP_266"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_440(F3Ddatasets.Player) -> plyr_[_pID]
REF_441(address) -> REF_440.addr
REF_441(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_442(F3Ddatasets.Player) -> plyr_[_pID]
REF_443(bytes32) -> REF_442.name
TMP_267(bool) = REF_443 != _name
CONDITION TMP_267"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_444(F3Ddatasets.Player) -> plyr_[_pID]
REF_445(bytes32) -> REF_444.name
REF_445(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_446(F3Ddatasets.Player) -> plyr_[_pID]
REF_447(uint256) -> REF_446.laff
TMP_268(bool) = REF_447 != _laff
CONDITION TMP_268"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_448(F3Ddatasets.Player) -> plyr_[_pID]
REF_449(uint256) -> REF_448.laff
REF_449(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_450(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_451(bool) -> REF_450[_name]
TMP_269(bool) = REF_451 == False
CONDITION TMP_269"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_452(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_453(bool) -> REF_452[_name]
REF_453(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1520.sol-Av8DShort-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_270 = CONVERT PlayerBook to address
TMP_271(bool) = msg.sender == TMP_270
TMP_272(None) = SOLIDITY_CALL require(bool,string)(TMP_271,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_454(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_455(bool) -> REF_454[_name]
TMP_273(bool) = REF_455 == False
CONDITION TMP_273"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_456(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_457(bool) -> REF_456[_name]
REF_457(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1520.sol-Av8DShort-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_96(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_96(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_106(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_106(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_108(F3Ddatasets.Player) -> plyr_[_affID]
REF_109(address) -> REF_108.addr
REF_110(F3Ddatasets.Player) -> plyr_[_affID]
REF_111(bytes32) -> REF_110.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_109,REF_111,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
9->1;
}
// Function: 1520.sol-Av8DShort-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_100(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_100(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_115(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_115(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_117(F3Ddatasets.Player) -> plyr_[_affID]
REF_118(address) -> REF_117.addr
REF_119(F3Ddatasets.Player) -> plyr_[_affID]
REF_120(bytes32) -> REF_119.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_118,REF_120,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
9->1;
}
// Function: 1520.sol-Av8DShort-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_104(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_104(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_124(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_124(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_126(F3Ddatasets.Player) -> plyr_[_affID]
REF_127(address) -> REF_126.addr
REF_128(F3Ddatasets.Player) -> plyr_[_affID]
REF_129(bytes32) -> REF_128.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_127,REF_129,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
9->1;
}
// Function: 1520.sol-Av8DShort-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x390A9E7014209BB99920CcadD90BF0748e3dDA32)

IRs:
TMP_411 = CONVERT 325649283268500344270043554479878643268930361906 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_411(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = AV8D

IRs:
name(string) := AV8D(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = 36D

IRs:
symbol(string) := 36D(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 75

IRs:
rndInc_(uint256) := 75(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 3600

IRs:
rndMax_(uint256) := 3600(uint256)"];
}
// Function: 1520.sol-Av8DShort-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
com = msg.sender

IRs:
com(address) := msg.sender(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndGap_ = 120

IRs:
rndGap_(uint256) := 120(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 1520.sol-Av8DShort-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_317(uint256) = INTERNAL_CALL, Av8DShort.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_317(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_318(bool) = _earnings > 0
CONDITION TMP_318"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_535(F3Ddatasets.Player) -> plyr_[_pID]
REF_536(uint256) -> REF_535.gen
REF_538(F3Ddatasets.Player) -> plyr_[_pID]
REF_539(uint256) -> REF_538.gen
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_539'] 
REF_536(uint256) (->plyr_) := TMP_319(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_540(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_541(F3Ddatasets.PlayerRounds) -> REF_540[_rIDlast]
REF_542(uint256) -> REF_541.mask
REF_544(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_545(F3Ddatasets.PlayerRounds) -> REF_544[_rIDlast]
REF_546(uint256) -> REF_545.mask
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_546'] 
REF_542(uint256) (->plyrRnds_) := TMP_320(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1520.sol-Av8DShort-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_605(F3Ddatasets.Round) -> round_[_rID]
REF_606(uint256) -> REF_605.keys
TMP_380(uint256) = TMP_379 / REF_606
_ppt(uint256) := TMP_380(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_607(F3Ddatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.mask
REF_610(F3Ddatasets.Round) -> round_[_rID]
REF_611(uint256) -> REF_610.mask
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_611'] 
REF_608(uint256) (->round_) := TMP_381(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_383(uint256) = TMP_382 / 1000000000000000000
_pearn(uint256) := TMP_383(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_613(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_614(F3Ddatasets.PlayerRounds) -> REF_613[_rID]
REF_615(uint256) -> REF_614.mask
REF_616(F3Ddatasets.Round) -> round_[_rID]
REF_617(uint256) -> REF_616.mask
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_617', '_keys'] 
TMP_385(uint256) = TMP_384 / 1000000000000000000
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_385', '_pearn'] 
REF_621(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_622(F3Ddatasets.PlayerRounds) -> REF_621[_rID]
REF_623(uint256) -> REF_622.mask
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_386', 'REF_623'] 
REF_615(uint256) (->plyrRnds_) := TMP_387(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_626(F3Ddatasets.Round) -> round_[_rID]
REF_627(uint256) -> REF_626.keys
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_627'] 
TMP_389(uint256) = TMP_388 / 1000000000000000000
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_389'] 
RETURN TMP_390"];
}
// Function: 1520.sol-Av8DShort-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_547(F3Ddatasets.Round) -> round_[_rID]
REF_548(uint256) -> REF_547.end
TMP_321(bool) = _now > REF_548
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.plyr
TMP_322(bool) = REF_550 == 0
TMP_323(bool) = TMP_321 && TMP_322
CONDITION TMP_323"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_324(uint256) = _keys / 1000000000000000000
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_324', 'rndInc_'] 
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_325', '_now'] 
_newTime(uint256) := TMP_326(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_327(uint256) = _keys / 1000000000000000000
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_327', 'rndInc_'] 
REF_555(F3Ddatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.end
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_328', 'REF_556'] 
_newTime(uint256) := TMP_329(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_331(bool) = _newTime < TMP_330
CONDITION TMP_331"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_558(F3Ddatasets.Round) -> round_[_rID]
REF_559(uint256) -> REF_558.end
REF_559(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_560(F3Ddatasets.Round) -> round_[_rID]
REF_561(uint256) -> REF_560.end
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_561(uint256) (->round_) := TMP_332(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1520.sol-Av8DShort-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_283(bool) = _team < 0
TMP_284(bool) = _team > 3
TMP_285(bool) = TMP_283 || TMP_284
CONDITION TMP_285"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 1520.sol-Av8DShort-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_70(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_70(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_71(F3Ddatasets.Round) -> round_[_rID]
REF_72(uint256) -> REF_71.end
TMP_77(bool) = _now > REF_72
REF_73(F3Ddatasets.Round) -> round_[_rID]
REF_74(bool) -> REF_73.ended
TMP_78(bool) = REF_74 == False
TMP_79(bool) = TMP_77 && TMP_78
REF_75(F3Ddatasets.Round) -> round_[_rID]
REF_76(uint256) -> REF_75.plyr
TMP_80(bool) = REF_76 != 0
TMP_81(bool) = TMP_79 && TMP_80
CONDITION TMP_81"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_77(F3Ddatasets.Round) -> round_[_rID]
REF_78(bool) -> REF_77.ended
REF_78(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_82(F3Ddatasets.EventReturns) = INTERNAL_CALL, Av8DShort.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_82(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_83(uint256) = INTERNAL_CALL, Av8DShort.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_83(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_84(bool) = _eth > 0
CONDITION TMP_84"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_79(F3Ddatasets.Player) -> plyr_[_pID]
REF_80(address) -> REF_79.addr
Transfer dest:REF_80 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_82(uint256) -> _eventData_.compressedData
REF_83(uint256) -> _eventData_.compressedData
TMP_86(uint256) = _now * 1000000000000000000
TMP_87(uint256) = REF_83 + TMP_86
REF_82(uint256) (->_eventData_) := TMP_87(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_84(uint256) -> _eventData_.compressedIDs
REF_85(uint256) -> _eventData_.compressedIDs
TMP_88(uint256) = REF_85 + _pID
REF_84(uint256) (->_eventData_) := TMP_88(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_87(F3Ddatasets.Player) -> plyr_[_pID]
REF_88(bytes32) -> REF_87.name
REF_89(uint256) -> _eventData_.compressedData
REF_90(uint256) -> _eventData_.compressedIDs
REF_91(address) -> _eventData_.winnerAddr
REF_92(bytes32) -> _eventData_.winnerName
REF_93(uint256) -> _eventData_.amountWon
REF_94(uint256) -> _eventData_.newPot
REF_95(uint256) -> _eventData_.P3DAmount
REF_96(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_88,_eth,REF_89,REF_90,REF_91,REF_92,REF_93,REF_94,REF_95,REF_96)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_90(uint256) = INTERNAL_CALL, Av8DShort.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_90(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_91(bool) = _eth > 0
CONDITION TMP_91"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_97(F3Ddatasets.Player) -> plyr_[_pID]
REF_98(address) -> REF_97.addr
Transfer dest:REF_98 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_pID]
REF_102(bytes32) -> REF_101.name
Emit onWithdraw(_pID,msg.sender,REF_102,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Av8DShort.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Av8DShort.isHuman()()"];
23->1;
}
// Function: 1520.sol-Av8DShort-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_628(F3Ddatasets.Player) -> plyr_[_pID]
REF_629(uint256) -> REF_628.lrnd
INTERNAL_CALL, Av8DShort.updateGenVault(uint256,uint256)(_pID,REF_629)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_630(F3Ddatasets.Player) -> plyr_[_pID]
REF_631(uint256) -> REF_630.win
REF_633(F3Ddatasets.Player) -> plyr_[_pID]
REF_634(uint256) -> REF_633.gen
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_631', 'REF_634'] 
REF_636(F3Ddatasets.Player) -> plyr_[_pID]
REF_637(uint256) -> REF_636.aff
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_392', 'REF_637'] 
_earnings(uint256) := TMP_393(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_394(bool) = _earnings > 0
CONDITION TMP_394"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_638(F3Ddatasets.Player) -> plyr_[_pID]
REF_639(uint256) -> REF_638.win
REF_639(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_640(F3Ddatasets.Player) -> plyr_[_pID]
REF_641(uint256) -> REF_640.gen
REF_641(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_642(F3Ddatasets.Player) -> plyr_[_pID]
REF_643(uint256) -> REF_642.aff
REF_643(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1520.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_434'] 
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_436'] 
TMP_438(uint256) = TMP_437 / 2
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_435', 'TMP_438'] 
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_441(uint256) = TMP_439 / TMP_440
RETURN TMP_441"];
}
// Function: 1520.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_424(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_426(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_425)
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_424', 'TMP_426'] 
RETURN TMP_427"];
}
// Function: 1520.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_428', '312500000000000000000000000'] 
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_429', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_430'] 
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_431', '74999921875000000000000000000000'] 
TMP_433(uint256) = TMP_432 / 156250000
RETURN TMP_433"];
}
// Function: 1520.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_421(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_420)
TMP_422(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_421', 'TMP_422'] 
RETURN TMP_423"];
}
// Function: 1520.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_442 = CONVERT _input to bytes
_temp(bytes) := TMP_442(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_679 -> LENGTH _temp
_length(uint256) := REF_679(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_443(bool) = _length <= 32
TMP_444(bool) = _length > 0
TMP_445(bool) = TMP_443 && TMP_444
TMP_446(None) = SOLIDITY_CALL require(bool,string)(TMP_445,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_680(None) -> _temp[0]
TMP_447(bool) = REF_680 != 32
TMP_448(uint256) = _length - 1
REF_681(None) -> _temp[TMP_448]
TMP_449(bool) = REF_681 != 32
TMP_450(bool) = TMP_447 && TMP_449
TMP_451(None) = SOLIDITY_CALL require(bool,string)(TMP_450,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_682(None) -> _temp[0]
TMP_452(bool) = REF_682 == 48
CONDITION TMP_452"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_683(None) -> _temp[1]
TMP_453(bool) = REF_683 != 120
TMP_454(None) = SOLIDITY_CALL require(bool,string)(TMP_453,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_684(None) -> _temp[1]
TMP_455(bool) = REF_684 != 88
TMP_456(None) = SOLIDITY_CALL require(bool,string)(TMP_455,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_457(bool) = i < _length
CONDITION TMP_457"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_685(None) -> _temp[i]
TMP_458(bool) = REF_685 > 64
REF_686(None) -> _temp[i]
TMP_459(bool) = REF_686 < 91
TMP_460(bool) = TMP_458 && TMP_459
CONDITION TMP_460"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_687(bytes1) -> _temp[i]
REF_688(None) -> _temp[i]
TMP_461 = CONVERT REF_688 to uint256
TMP_462(uint256) = TMP_461 + 32
TMP_463 = CONVERT TMP_462 to bytes1
REF_687(bytes1) (->_temp) := TMP_463(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_464(bool) = _hasNonNumber == False
CONDITION TMP_464"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_689(None) -> _temp[i]
TMP_465(bool) = REF_689 == 32
REF_690(None) -> _temp[i]
TMP_466(bool) = REF_690 > 96
REF_691(None) -> _temp[i]
TMP_467(bool) = REF_691 < 123
TMP_468(bool) = TMP_466 && TMP_467
TMP_469(bool) = TMP_465 || TMP_468
REF_692(None) -> _temp[i]
TMP_470(bool) = REF_692 > 47
REF_693(None) -> _temp[i]
TMP_471(bool) = REF_693 < 58
TMP_472(bool) = TMP_470 && TMP_471
TMP_473(bool) = TMP_469 || TMP_472
TMP_474(None) = SOLIDITY_CALL require(bool,string)(TMP_473,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_694(None) -> _temp[i]
TMP_475(bool) = REF_694 == 32
CONDITION TMP_475"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_476(uint256) = i + 1
REF_695(None) -> _temp[TMP_476]
TMP_477(bool) = REF_695 != 32
TMP_478(None) = SOLIDITY_CALL require(bool,string)(TMP_477,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_479(bool) = _hasNonNumber == False
REF_696(None) -> _temp[i]
TMP_480(bool) = REF_696 < 48
REF_697(None) -> _temp[i]
TMP_481(bool) = REF_697 > 57
TMP_482(bool) = TMP_480 || TMP_481
TMP_483(bool) = TMP_479 && TMP_482
CONDITION TMP_483"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_484(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_485(bool) = _hasNonNumber == True
TMP_486(None) = SOLIDITY_CALL require(bool,string)(TMP_485,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1520.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1520.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1520.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1520.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1520.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1520.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1520.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1520.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1520.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_495(uint256) = a + b
c(uint256) := TMP_495(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_496(bool) = c >= a
TMP_497(None) = SOLIDITY_CALL require(bool,string)(TMP_496,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1520.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_487(bool) = a == 0
CONDITION TMP_487"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_488(uint256) = a * b
c(uint256) := TMP_488(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_489(uint256) = c / a
TMP_490(bool) = TMP_489 == b
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1520.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_505(bool) = x == 0
CONDITION TMP_505"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_506(bool) = y == 0
CONDITION TMP_506"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_507(bool) = i < y
CONDITION TMP_507"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_508(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_508(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_509(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1520.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_504(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_504"];
}
// Function: 1520.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_498(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_499(uint256) = TMP_498 / 2
z(uint256) := TMP_499(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_500(bool) = z < y
CONDITION TMP_500"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_501(uint256) = x / z
TMP_502(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_501,z)
TMP_503(uint256) = TMP_502 / 2
z(uint256) := TMP_503(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1520.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_492(bool) = b <= a
TMP_493(None) = SOLIDITY_CALL require(bool,string)(TMP_492,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_494(uint256) = a - b
RETURN TMP_494"];
}
}
