digraph G {
// Function: 1522.sol-ExitFraud-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)((msg.sender == admin1 || msg.sender == admin2),only admin can activate)

IRs:
TMP_443(bool) = msg.sender == admin1
TMP_444(bool) = msg.sender == admin2
TMP_445(bool) = TMP_443 || TMP_444
TMP_446(None) = SOLIDITY_CALL require(bool,string)(TMP_445,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,already activated)

IRs:
TMP_447(bool) = activated_ == False
TMP_448(None) = SOLIDITY_CALL require(bool,string)(TMP_447,already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_718(F3Ddatasets.Round) -> round_[1]
REF_719(uint256) -> REF_718.strt
TMP_449(uint256) = now + rndExtra_
TMP_450(uint256) = TMP_449 - rndGap_
REF_719(uint256) (->round_) := TMP_450(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_720(F3Ddatasets.Round) -> round_[1]
REF_721(uint256) -> REF_720.end
TMP_451(uint256) = now + rndInit_
TMP_452(uint256) = TMP_451 + rndExtra_
REF_721(uint256) (->round_) := TMP_452(uint256)"];
}
// Function: 1522.sol-ExitFraud-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_346(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_347(bytes32) = SOLIDITY_CALL keccak256()(TMP_346)
TMP_348 = CONVERT TMP_347 to uint256
TMP_349(uint256) = TMP_348 / now
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_345', 'TMP_349'] 
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_350', 'block.gaslimit'] 
TMP_352(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_353(bytes32) = SOLIDITY_CALL keccak256()(TMP_352)
TMP_354 = CONVERT TMP_353 to uint256
TMP_355(uint256) = TMP_354 / now
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_351', 'TMP_355'] 
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_356', 'block.number'] 
TMP_358(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_357)
TMP_359(bytes32) = SOLIDITY_CALL keccak256()(TMP_358)
TMP_360 = CONVERT TMP_359 to uint256
seed(uint256) := TMP_360(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_361(uint256) = seed / 1000
TMP_362(uint256) = TMP_361 * 1000
TMP_363(uint256) = seed - TMP_362
TMP_364(bool) = TMP_363 < airDropTracker_
CONDITION TMP_364"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1522.sol-ExitFraud-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_262(F3Ddatasets.Round) -> round_[_rID]
REF_263(uint256) -> REF_262.strt
TMP_152(uint256) = REF_263 + rndGap_
TMP_153(bool) = _now > TMP_152
REF_264(F3Ddatasets.Round) -> round_[_rID]
REF_265(uint256) -> REF_264.end
TMP_154(bool) = _now <= REF_265
REF_266(F3Ddatasets.Round) -> round_[_rID]
REF_267(uint256) -> REF_266.end
TMP_155(bool) = _now > REF_267
REF_268(F3Ddatasets.Round) -> round_[_rID]
REF_269(uint256) -> REF_268.plyr
TMP_156(bool) = REF_269 == 0
TMP_157(bool) = TMP_155 && TMP_156
TMP_158(bool) = TMP_154 || TMP_157
TMP_159(bool) = TMP_153 && TMP_158
CONDITION TMP_159"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_270(F3Ddatasets.Round) -> round_[_rID]
REF_271(uint256) -> REF_270.end
TMP_161(bool) = _now > REF_271
REF_272(F3Ddatasets.Round) -> round_[_rID]
REF_273(bool) -> REF_272.ended
TMP_162(bool) = REF_273 == False
TMP_163(bool) = TMP_161 && TMP_162
CONDITION TMP_163"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_274(F3Ddatasets.Round) -> round_[_rID]
REF_275(bool) -> REF_274.ended
REF_275(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_164(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_164(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_276(uint256) -> _eventData_.compressedData
REF_277(uint256) -> _eventData_.compressedData
TMP_165(uint256) = _now * 1000000000000000000
TMP_166(uint256) = REF_277 + TMP_165
REF_276(uint256) (->_eventData_) := TMP_166(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_278(uint256) -> _eventData_.compressedIDs
REF_279(uint256) -> _eventData_.compressedIDs
TMP_167(uint256) = REF_279 + _pID
REF_278(uint256) (->_eventData_) := TMP_167(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_281(F3Ddatasets.Player) -> plyr_[_pID]
REF_282(bytes32) -> REF_281.name
REF_283(uint256) -> _eventData_.compressedData
REF_284(uint256) -> _eventData_.compressedIDs
REF_285(address) -> _eventData_.winnerAddr
REF_286(bytes32) -> _eventData_.winnerName
REF_287(uint256) -> _eventData_.amountWon
REF_288(uint256) -> _eventData_.newPot
REF_289(uint256) -> _eventData_.P3DAmount
REF_290(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_282,msg.value,REF_283,REF_284,REF_285,REF_286,REF_287,REF_288,REF_289,REF_290)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_291(F3Ddatasets.Player) -> plyr_[_pID]
REF_292(uint256) -> REF_291.gen
REF_293(F3Ddatasets.Player) -> plyr_[_pID]
REF_294(uint256) -> REF_293.gen
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_294', 'msg.value'] 
REF_292(uint256) (->plyr_) := TMP_169(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1522.sol-ExitFraud-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_23(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_29(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_29(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
_affID(uint256) := REF_31(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_32(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_32(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_33(F3Ddatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
TMP_28(bool) = _affID != REF_34
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(uint256) -> REF_35.laff
REF_36(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, ExitFraud.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, ExitFraud.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1522.sol-ExitFraud-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_22(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_22(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_23(F3Ddatasets.Player) -> plyr_[_pID]
REF_24(uint256) -> REF_23.laff
_affCode(uint256) := REF_24(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_25(F3Ddatasets.Player) -> plyr_[_pID]
REF_26(uint256) -> REF_25.laff
TMP_17(bool) = _affCode != REF_26
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
REF_28(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, ExitFraud.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, ExitFraud.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 1522.sol-ExitFraud-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_34(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_37(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_37(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_38(F3Ddatasets.Player) -> plyr_[_pID]
REF_39(bytes32) -> REF_38.name
TMP_36(bool) = _affCode == REF_39
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
_affID(uint256) := REF_41(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_42(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_42(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_43(F3Ddatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
TMP_38(bool) = _affID != REF_44
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
REF_46(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, ExitFraud.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, ExitFraud.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1522.sol-ExitFraud-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_427(F3Ddatasets.Round) -> round_[_rID]
REF_428(uint256) -> REF_427.strt
TMP_242(uint256) = REF_428 + rndGap_
TMP_243(bool) = _now > TMP_242
REF_429(F3Ddatasets.Round) -> round_[_rID]
REF_430(uint256) -> REF_429.end
TMP_244(bool) = _now <= REF_430
REF_431(F3Ddatasets.Round) -> round_[_rID]
REF_432(uint256) -> REF_431.end
TMP_245(bool) = _now > REF_432
REF_433(F3Ddatasets.Round) -> round_[_rID]
REF_434(uint256) -> REF_433.plyr
TMP_246(bool) = REF_434 == 0
TMP_247(bool) = TMP_245 && TMP_246
TMP_248(bool) = TMP_244 || TMP_247
TMP_249(bool) = TMP_243 && TMP_248
CONDITION TMP_249"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_435(F3Ddatasets.Round) -> round_[_rID]
REF_436(uint256) -> REF_435.eth
TMP_250(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_436', '_eth'] 
RETURN TMP_250"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_251(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_251"];
}
// Function: 1522.sol-ExitFraud-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_417(F3Ddatasets.Round) -> round_[_rIDlast]
REF_418(uint256) -> REF_417.mask
REF_420(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_421(F3Ddatasets.PlayerRounds) -> REF_420[_rIDlast]
REF_422(uint256) -> REF_421.keys
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_418', 'REF_422'] 
TMP_240(uint256) = TMP_239 / 1000000000000000000
REF_424(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_425(F3Ddatasets.PlayerRounds) -> REF_424[_rIDlast]
REF_426(uint256) -> REF_425.mask
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_240', 'REF_426'] 
RETURN TMP_241"];
}
// Function: 1522.sol-ExitFraud-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(35,0)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(35,0)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(65,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(65,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(58,0)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(58,0)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(45,0)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(45,0)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(7,0)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(7,0)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(12,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(12,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(22,0)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(22,0)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(27,0)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(27,0)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 1522.sol-ExitFraud-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_328(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_329(F3Ddatasets.PlayerRounds) -> REF_328[_rID]
REF_330(uint256) -> REF_329.keys
TMP_189(bool) = REF_330 == 0
CONDITION TMP_189"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_190(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_190(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_331(F3Ddatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.eth
TMP_191(bool) = REF_332 < 100000000000000000000
REF_333(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_334(F3Ddatasets.PlayerRounds) -> REF_333[_rID]
REF_335(uint256) -> REF_334.eth
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_335', '_eth'] 
TMP_193(bool) = TMP_192 > 1000000000000000000
TMP_194(bool) = TMP_191 && TMP_193
CONDITION TMP_194"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_338(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_339(F3Ddatasets.PlayerRounds) -> REF_338[_rID]
REF_340(uint256) -> REF_339.eth
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_340'] 
_availableLimit(uint256) := TMP_195(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_196(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_342(F3Ddatasets.Player) -> plyr_[_pID]
REF_343(uint256) -> REF_342.gen
REF_344(F3Ddatasets.Player) -> plyr_[_pID]
REF_345(uint256) -> REF_344.gen
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_345', '_refund'] 
REF_343(uint256) (->plyr_) := TMP_197(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_198(bool) = _eth > 1000000000
CONDITION TMP_198"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.eth
TMP_199(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_348', '_eth'] 
_keys(uint256) := TMP_199(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_200(bool) = _keys >= 1000000000000000000
CONDITION TMP_200"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, ExitFraud.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_350(F3Ddatasets.Round) -> round_[_rID]
REF_351(uint256) -> REF_350.plyr
TMP_202(bool) = REF_351 != _pID
CONDITION TMP_202"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_352(F3Ddatasets.Round) -> round_[_rID]
REF_353(uint256) -> REF_352.plyr
REF_353(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_354(F3Ddatasets.Round) -> round_[_rID]
REF_355(uint256) -> REF_354.team
TMP_203(bool) = REF_355 != _team
CONDITION TMP_203"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_356(F3Ddatasets.Round) -> round_[_rID]
REF_357(uint256) -> REF_356.team
REF_357(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_358(uint256) -> _eventData_.compressedData
REF_359(uint256) -> _eventData_.compressedData
TMP_204(uint256) = REF_359 + 100
REF_358(uint256) (->_eventData_) := TMP_204(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_205(bool) = _eth >= 100000000000000000
CONDITION TMP_205"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_206(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_207(bool) = INTERNAL_CALL, ExitFraud.airdrop()()
TMP_208(bool) = TMP_207 == True
CONDITION TMP_208"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_209(bool) = _eth >= 10000000000000000000
CONDITION TMP_209"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_211(uint256) = TMP_210 / 100
_prize(uint256) := TMP_211(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_361(F3Ddatasets.Player) -> plyr_[_pID]
REF_362(uint256) -> REF_361.win
REF_363(F3Ddatasets.Player) -> plyr_[_pID]
REF_364(uint256) -> REF_363.win
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_364', '_prize'] 
REF_362(uint256) (->plyr_) := TMP_212(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_213(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_367(uint256) -> _eventData_.compressedData
REF_367(-> _eventData_) = REF_367 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_214(bool) = _eth >= 1000000000000000000
TMP_215(bool) = _eth < 10000000000000000000
TMP_216(bool) = TMP_214 && TMP_215
CONDITION TMP_216"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_218(uint256) = TMP_217 / 100
_prize(uint256) := TMP_218(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_369(F3Ddatasets.Player) -> plyr_[_pID]
REF_370(uint256) -> REF_369.win
REF_371(F3Ddatasets.Player) -> plyr_[_pID]
REF_372(uint256) -> REF_371.win
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_372', '_prize'] 
REF_370(uint256) (->plyr_) := TMP_219(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_220(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_375(uint256) -> _eventData_.compressedData
REF_375(-> _eventData_) = REF_375 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_221(bool) = _eth >= 100000000000000000
TMP_222(bool) = _eth < 1000000000000000000
TMP_223(bool) = TMP_221 && TMP_222
CONDITION TMP_223"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_225(uint256) = TMP_224 / 100
_prize(uint256) := TMP_225(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_377(F3Ddatasets.Player) -> plyr_[_pID]
REF_378(uint256) -> REF_377.win
REF_379(F3Ddatasets.Player) -> plyr_[_pID]
REF_380(uint256) -> REF_379.win
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_380', '_prize'] 
REF_378(uint256) (->plyr_) := TMP_226(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_227(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_383(uint256) -> _eventData_.compressedData
REF_383(-> _eventData_) = REF_383 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_384(uint256) -> _eventData_.compressedData
REF_384(-> _eventData_) = REF_384 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_385(uint256) -> _eventData_.compressedData
TMP_228(uint256) = _prize * 1000000000000000000000000000000000
REF_385(-> _eventData_) = REF_385 + TMP_228"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_386(uint256) -> _eventData_.compressedData
REF_387(uint256) -> _eventData_.compressedData
TMP_229(uint256) = airDropTracker_ * 1000
TMP_230(uint256) = REF_387 + TMP_229
REF_386(uint256) (->_eventData_) := TMP_230(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_388(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_389(F3Ddatasets.PlayerRounds) -> REF_388[_rID]
REF_390(uint256) -> REF_389.keys
REF_392(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_393(F3Ddatasets.PlayerRounds) -> REF_392[_rID]
REF_394(uint256) -> REF_393.keys
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_394'] 
REF_390(uint256) (->plyrRnds_) := TMP_231(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_395(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_396(F3Ddatasets.PlayerRounds) -> REF_395[_rID]
REF_397(uint256) -> REF_396.eth
REF_399(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_400(F3Ddatasets.PlayerRounds) -> REF_399[_rID]
REF_401(uint256) -> REF_400.eth
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_401'] 
REF_397(uint256) (->plyrRnds_) := TMP_232(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.keys
REF_405(F3Ddatasets.Round) -> round_[_rID]
REF_406(uint256) -> REF_405.keys
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_406'] 
REF_403(uint256) (->round_) := TMP_233(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_407(F3Ddatasets.Round) -> round_[_rID]
REF_408(uint256) -> REF_407.eth
REF_410(F3Ddatasets.Round) -> round_[_rID]
REF_411(uint256) -> REF_410.eth
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_411'] 
REF_408(uint256) (->round_) := TMP_234(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_412(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_413(uint256) -> REF_412[_team]
REF_415(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_416(uint256) -> REF_415[_team]
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_416'] 
REF_413(uint256) (->rndTmEth_) := TMP_235(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_236(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_236(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_237(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_237(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 1522.sol-ExitFraud-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_476(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_476(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_276(bool) = _pID == 0
CONDITION TMP_276"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_277(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_277(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_278(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_278(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_279(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_279(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_480(uint256) -> pIDxAddr_[msg.sender]
REF_480(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_481(F3Ddatasets.Player) -> plyr_[_pID]
REF_482(address) -> REF_481.addr
REF_482(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_280(bool) = _name != 
CONDITION TMP_280"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_483(uint256) -> pIDxName_[_name]
REF_483(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_484(F3Ddatasets.Player) -> plyr_[_pID]
REF_485(bytes32) -> REF_484.name
REF_485(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_486(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_487(bool) -> REF_486[_name]
REF_487(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_281(bool) = _laff != 0
TMP_282(bool) = _laff != _pID
TMP_283(bool) = TMP_281 && TMP_282
CONDITION TMP_283"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_488(F3Ddatasets.Player) -> plyr_[_pID]
REF_489(uint256) -> REF_488.laff
REF_489(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_490(uint256) -> _eventData_.compressedData
REF_491(uint256) -> _eventData_.compressedData
TMP_284(uint256) = REF_491 + 1
REF_490(uint256) (->_eventData_) := TMP_284(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1522.sol-ExitFraud-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 50

IRs:
TMP_365(uint256) = _eth / 50
_p1(uint256) := TMP_365(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_366(uint256) = _eth / 50
_com(uint256) := TMP_366(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_367(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_p3d = 0

IRs:
_p3d(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin1).call.value(_com.sub(_com / 2))()

IRs:
TMP_368 = CONVERT admin1 to address
TMP_369(uint256) = _com / 2
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_com', 'TMP_369'] 
TMP_372(bool) = LOW_LEVEL_CALL, dest:TMP_368, function:call, arguments:[] value:TMP_370 
TMP_373 = UnaryType.BANG TMP_372 
CONDITION TMP_373"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _p3d.add(_com.sub(_com / 2))

IRs:
TMP_374(uint256) = _com / 2
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_com', 'TMP_374'] 
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_375'] 
_p3d(uint256) := TMP_376(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! address(admin2).call.value(_com / 2)()

IRs:
TMP_377 = CONVERT admin2 to address
TMP_378(uint256) = _com / 2
TMP_380(bool) = LOW_LEVEL_CALL, dest:TMP_377, function:call, arguments:[] value:TMP_378 
TMP_381 = UnaryType.BANG TMP_380 
CONDITION TMP_381"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_p3d = _p3d.add(_com / 2)

IRs:
TMP_382(uint256) = _com / 2
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_382'] 
_p3d(uint256) := TMP_383(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_com = _com.sub(_p3d)

IRs:
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_com', '_p3d'] 
_com(uint256) := TMP_384(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_385(uint256) = _eth / 10
_aff(uint256) := TMP_385(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_386(bool) = _affID != _pID
REF_613(F3Ddatasets.Player) -> plyr_[_affID]
REF_614(bytes32) -> REF_613.name
TMP_387(bool) = REF_614 != 
TMP_388(bool) = TMP_386 && TMP_387
CONDITION TMP_388"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_615(F3Ddatasets.Player) -> plyr_[_affID]
REF_616(uint256) -> REF_615.aff
REF_618(F3Ddatasets.Player) -> plyr_[_affID]
REF_619(uint256) -> REF_618.aff
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_619'] 
REF_616(uint256) (->plyr_) := TMP_389(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_621(F3Ddatasets.Player) -> plyr_[_affID]
REF_622(address) -> REF_621.addr
REF_623(F3Ddatasets.Player) -> plyr_[_affID]
REF_624(bytes32) -> REF_623.name
Emit onAffiliatePayout(_affID,REF_622,REF_624,_rID,_pID,_aff,now)"];
15->18;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
admin1.transfer(_aff.sub(_aff / 2))

IRs:
TMP_391(uint256) = _aff / 2
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_aff', 'TMP_391'] 
Transfer dest:admin1 value:TMP_392"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin2.transfer(_aff / 2)

IRs:
TMP_394(uint256) = _aff / 2
Transfer dest:admin2 value:TMP_394"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_630(F3Ddatasets.TeamFee) -> fees_[_team]
REF_631(uint256) -> REF_630.p3d
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_631'] 
TMP_397(uint256) = TMP_396 / 100
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_397'] 
_p3d(uint256) := TMP_398(uint256)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_p3d > 0

IRs:
TMP_399(bool) = _p3d > 0
CONDITION TMP_399"];
20->21[label="True"];
20->23[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_p3d)

IRs:
REF_632(F3Ddatasets.Round) -> round_[_rID]
REF_633(uint256) -> REF_632.pot
REF_634(F3Ddatasets.Round) -> round_[_rID]
REF_635(uint256) -> REF_634.pot
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_635', '_p3d'] 
REF_633(uint256) (->round_) := TMP_400(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_637(uint256) -> _eventData_.P3DAmount
REF_639(uint256) -> _eventData_.P3DAmount
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_639'] 
REF_637(uint256) (->_eventData_) := TMP_401(uint256)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: RETURN 24

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1522.sol-ExitFraud-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_641(F3Ddatasets.TeamFee) -> fees_[_team]
REF_642(uint256) -> REF_641.gen
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_642'] 
TMP_403(uint256) = TMP_402 / 100
_gen(uint256) := TMP_403(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_404(uint256) = _eth / 100
_air(uint256) := TMP_404(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_405(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(15)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '15'] 
TMP_407(uint256) = TMP_406 / 100
REF_648(F3Ddatasets.TeamFee) -> fees_[_team]
REF_649(uint256) -> REF_648.p3d
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_649'] 
TMP_409(uint256) = TMP_408 / 100
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_407', 'TMP_409'] 
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_410'] 
_eth(uint256) := TMP_411(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_412(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_413(uint256) = INTERNAL_CALL, ExitFraud.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_413(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_414(bool) = _dust > 0
CONDITION TMP_414"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_415(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_652(F3Ddatasets.Round) -> round_[_rID]
REF_653(uint256) -> REF_652.pot
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_656(F3Ddatasets.Round) -> round_[_rID]
REF_657(uint256) -> REF_656.pot
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_416', 'REF_657'] 
REF_653(uint256) (->round_) := TMP_417(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_658(uint256) -> _eventData_.genAmount
REF_660(uint256) -> _eventData_.genAmount
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_660'] 
REF_658(uint256) (->_eventData_) := TMP_418(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_661(uint256) -> _eventData_.potAmount
REF_661(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1522.sol-ExitFraud-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_500(F3Ddatasets.Round) -> round_[_rID]
REF_501(uint256) -> REF_500.plyr
_winPID(uint256) := REF_501(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_502(F3Ddatasets.Round) -> round_[_rID]
REF_503(uint256) -> REF_502.team
_winTID(uint256) := REF_503(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_504(F3Ddatasets.Round) -> round_[_rID]
REF_505(uint256) -> REF_504.pot
_pot(uint256) := REF_505(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_292(uint256) = TMP_291 / 100
_win(uint256) := TMP_292(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot.mul(20)) / 100

IRs:
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '20'] 
TMP_294(uint256) = TMP_293 / 100
_com(uint256) := TMP_294(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_509(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_510(uint256) -> REF_509.gen
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_510'] 
TMP_296(uint256) = TMP_295 / 100
_gen(uint256) := TMP_296(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_512(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_513(uint256) -> REF_512.p3d
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_513'] 
TMP_298(uint256) = TMP_297 / 100
_p3d(uint256) := TMP_298(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_299', '_com'] 
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_300', '_gen'] 
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_301', '_p3d'] 
_res(uint256) := TMP_302(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_519(F3Ddatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.keys
TMP_304(uint256) = TMP_303 / REF_520
_ppt(uint256) := TMP_304(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_523(F3Ddatasets.Round) -> round_[_rID]
REF_524(uint256) -> REF_523.keys
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_524'] 
TMP_306(uint256) = TMP_305 / 1000000000000000000
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_306'] 
_dust(uint256) := TMP_307(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_308(bool) = _dust > 0
CONDITION TMP_308"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_309(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_310(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_527(F3Ddatasets.Player) -> plyr_[_winPID]
REF_528(uint256) -> REF_527.win
REF_530(F3Ddatasets.Player) -> plyr_[_winPID]
REF_531(uint256) -> REF_530.win
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_531'] 
REF_528(uint256) (->plyr_) := TMP_311(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin1.transfer(_com.sub(_com / 2))

IRs:
TMP_312(uint256) = _com / 2
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_com', 'TMP_312'] 
Transfer dest:admin1 value:TMP_313"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin2.transfer(_com / 2)

IRs:
TMP_315(uint256) = _com / 2
Transfer dest:admin2 value:TMP_315"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = _pot.add(_p3d)

IRs:
REF_535(F3Ddatasets.Round) -> round_[_rID]
REF_536(uint256) -> REF_535.pot
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_p3d'] 
REF_536(uint256) (->round_) := TMP_317(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_538(F3Ddatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.mask
REF_541(F3Ddatasets.Round) -> round_[_rID]
REF_542(uint256) -> REF_541.mask
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_542'] 
REF_539(uint256) (->round_) := TMP_318(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_543(uint256) -> _eventData_.compressedData
REF_544(uint256) -> _eventData_.compressedData
REF_545(F3Ddatasets.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.end
TMP_319(uint256) = REF_546 * 1000000
TMP_320(uint256) = REF_544 + TMP_319
REF_543(uint256) (->_eventData_) := TMP_320(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_547(uint256) -> _eventData_.compressedIDs
REF_548(uint256) -> _eventData_.compressedIDs
TMP_321(uint256) = _winPID * 100000000000000000000000000
TMP_322(uint256) = REF_548 + TMP_321
TMP_323(uint256) = _winTID * 100000000000000000
TMP_324(uint256) = TMP_322 + TMP_323
REF_547(uint256) (->_eventData_) := TMP_324(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_549(address) -> _eventData_.winnerAddr
REF_550(F3Ddatasets.Player) -> plyr_[_winPID]
REF_551(address) -> REF_550.addr
REF_549(address) (->_eventData_) := REF_551(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_552(bytes32) -> _eventData_.winnerName
REF_553(F3Ddatasets.Player) -> plyr_[_winPID]
REF_554(bytes32) -> REF_553.name
REF_552(bytes32) (->_eventData_) := REF_554(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_555(uint256) -> _eventData_.amountWon
REF_555(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_556(uint256) -> _eventData_.genAmount
REF_556(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_557(uint256) -> _eventData_.P3DAmount
REF_557(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_558(uint256) -> _eventData_.newPot
REF_558(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_325(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_326(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_559(F3Ddatasets.Round) -> round_[_rID]
REF_560(uint256) -> REF_559.strt
REF_560(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_561(F3Ddatasets.Round) -> round_[_rID]
REF_562(uint256) -> REF_561.end
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_327', 'rndGap_'] 
REF_562(uint256) (->round_) := TMP_328(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_565(F3Ddatasets.Round) -> round_[_rID]
REF_566(uint256) -> REF_565.pot
REF_566(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1522.sol-ExitFraud-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_702(uint256) -> _eventData_.compressedData
REF_703(uint256) -> _eventData_.compressedData
TMP_435(uint256) = now * 1000000000000000000
TMP_436(uint256) = REF_703 + TMP_435
TMP_437(uint256) = _team * 100000000000000000000000000000
TMP_438(uint256) = TMP_436 + TMP_437
REF_702(uint256) (->_eventData_) := TMP_438(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_704(uint256) -> _eventData_.compressedIDs
REF_705(uint256) -> _eventData_.compressedIDs
TMP_439(uint256) = REF_705 + _pID
TMP_440(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_441(uint256) = TMP_439 + TMP_440
REF_704(uint256) (->_eventData_) := TMP_441(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_707(uint256) -> _eventData_.compressedData
REF_708(uint256) -> _eventData_.compressedIDs
REF_709(F3Ddatasets.Player) -> plyr_[_pID]
REF_710(bytes32) -> REF_709.name
REF_711(address) -> _eventData_.winnerAddr
REF_712(bytes32) -> _eventData_.winnerName
REF_713(uint256) -> _eventData_.amountWon
REF_714(uint256) -> _eventData_.newPot
REF_715(uint256) -> _eventData_.P3DAmount
REF_716(uint256) -> _eventData_.genAmount
REF_717(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_707,REF_708,REF_710,msg.sender,_eth,_keys,REF_711,REF_712,REF_713,REF_714,REF_715,REF_716,REF_717,airDropPot_)"];
}
// Function: 1522.sol-ExitFraud-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.gen
REF_19(F3Ddatasets.Player) -> plyr_[_pID]
REF_20(uint256) -> REF_19.gen
TMP_9(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_20', 'msg.value'] 
REF_18(uint256) (->plyr_) := TMP_9(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, ExitFraud.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1522.sol-ExitFraud-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_132(F3Ddatasets.Round) -> round_[_rID]
REF_133(uint256) -> REF_132.strt
TMP_103(uint256) = REF_133 + rndGap_
TMP_104(bool) = _now > TMP_103
REF_134(F3Ddatasets.Round) -> round_[_rID]
REF_135(uint256) -> REF_134.end
TMP_105(bool) = _now <= REF_135
REF_136(F3Ddatasets.Round) -> round_[_rID]
REF_137(uint256) -> REF_136.end
TMP_106(bool) = _now > REF_137
REF_138(F3Ddatasets.Round) -> round_[_rID]
REF_139(uint256) -> REF_138.plyr
TMP_107(bool) = REF_139 == 0
TMP_108(bool) = TMP_106 && TMP_107
TMP_109(bool) = TMP_105 || TMP_108
TMP_110(bool) = TMP_104 && TMP_109
CONDITION TMP_110"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_140(F3Ddatasets.Round) -> round_[_rID]
REF_141(uint256) -> REF_140.keys
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_141', '1000000000000000000'] 
TMP_112(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_111', '1000000000000000000'] 
RETURN TMP_112"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 1522.sol-ExitFraud-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_214(F3Ddatasets.Round) -> round_[_rID]
REF_215(uint256) -> REF_214.ico
REF_216(F3Ddatasets.Round) -> round_[_rID]
REF_217(uint256) -> REF_216.keys
REF_218(F3Ddatasets.Round) -> round_[_rID]
REF_219(uint256) -> REF_218.end
REF_220(F3Ddatasets.Round) -> round_[_rID]
REF_221(uint256) -> REF_220.strt
REF_222(F3Ddatasets.Round) -> round_[_rID]
REF_223(uint256) -> REF_222.pot
REF_224(F3Ddatasets.Round) -> round_[_rID]
REF_225(uint256) -> REF_224.team
REF_226(F3Ddatasets.Round) -> round_[_rID]
REF_227(uint256) -> REF_226.plyr
TMP_143(uint256) = REF_227 * 10
TMP_144(uint256) = REF_225 + TMP_143
REF_228(F3Ddatasets.Round) -> round_[_rID]
REF_229(uint256) -> REF_228.plyr
REF_230(F3Ddatasets.Player) -> plyr_[REF_229]
REF_231(address) -> REF_230.addr
REF_232(F3Ddatasets.Round) -> round_[_rID]
REF_233(uint256) -> REF_232.plyr
REF_234(F3Ddatasets.Player) -> plyr_[REF_233]
REF_235(bytes32) -> REF_234.name
REF_236(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_237(uint256) -> REF_236[0]
REF_238(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_239(uint256) -> REF_238[1]
REF_240(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_241(uint256) -> REF_240[2]
REF_242(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_243(uint256) -> REF_242[3]
TMP_145(uint256) = airDropPot_ * 1000
TMP_146(uint256) = airDropTracker_ + TMP_145
RETURN REF_215,_rID,REF_217,REF_219,REF_221,REF_223,TMP_144,REF_231,REF_235,REF_237,REF_239,REF_241,REF_243,TMP_146"];
}
// Function: 1522.sol-ExitFraud-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_147 = CONVERT 0 to address
TMP_148(bool) = _addr == TMP_147
CONDITION TMP_148"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_149(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_244(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_244(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_245(F3Ddatasets.Player) -> plyr_[_pID]
REF_246(bytes32) -> REF_245.name
REF_247(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_248(F3Ddatasets.PlayerRounds) -> REF_247[_rID]
REF_249(uint256) -> REF_248.keys
REF_250(F3Ddatasets.Player) -> plyr_[_pID]
REF_251(uint256) -> REF_250.win
REF_252(F3Ddatasets.Player) -> plyr_[_pID]
REF_253(uint256) -> REF_252.gen
REF_255(F3Ddatasets.Player) -> plyr_[_pID]
REF_256(uint256) -> REF_255.lrnd
TMP_150(uint256) = INTERNAL_CALL, ExitFraud.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_256)
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_253', 'TMP_150'] 
REF_257(F3Ddatasets.Player) -> plyr_[_pID]
REF_258(uint256) -> REF_257.aff
REF_259(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_260(F3Ddatasets.PlayerRounds) -> REF_259[_rID]
REF_261(uint256) -> REF_260.eth
RETURN _pID,REF_246,REF_249,REF_251,TMP_151,REF_258,REF_261"];
}
// Function: 1522.sol-ExitFraud-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(uint256) -> REF_154.end
TMP_119(bool) = now > REF_155
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(bool) -> REF_156.ended
TMP_120(bool) = REF_157 == False
TMP_121(bool) = TMP_119 && TMP_120
REF_158(F3Ddatasets.Round) -> round_[_rID]
REF_159(uint256) -> REF_158.plyr
TMP_122(bool) = REF_159 != 0
TMP_123(bool) = TMP_121 && TMP_122
CONDITION TMP_123"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.plyr
TMP_124(bool) = REF_161 == _pID
CONDITION TMP_124"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_162(F3Ddatasets.Player) -> plyr_[_pID]
REF_163(uint256) -> REF_162.win
REF_165(F3Ddatasets.Round) -> round_[_rID]
REF_166(uint256) -> REF_165.pot
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_166', '48'] 
TMP_126(uint256) = TMP_125 / 100
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_163', 'TMP_126'] 
REF_168(F3Ddatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.gen
TMP_128(uint256) = INTERNAL_CALL, ExitFraud.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_172(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_173(F3Ddatasets.PlayerRounds) -> REF_172[_rID]
REF_174(uint256) -> REF_173.mask
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_128', 'REF_174'] 
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_169', 'TMP_129'] 
REF_175(F3Ddatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.aff
RETURN TMP_127,TMP_130,REF_176"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(uint256) -> REF_177.win
REF_179(F3Ddatasets.Player) -> plyr_[_pID]
REF_180(uint256) -> REF_179.gen
TMP_131(uint256) = INTERNAL_CALL, ExitFraud.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_183(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_184(F3Ddatasets.PlayerRounds) -> REF_183[_rID]
REF_185(uint256) -> REF_184.mask
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_131', 'REF_185'] 
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_180', 'TMP_132'] 
REF_186(F3Ddatasets.Player) -> plyr_[_pID]
REF_187(uint256) -> REF_186.aff
RETURN REF_178,TMP_133,REF_187"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_188(F3Ddatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.win
REF_190(F3Ddatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.gen
REF_193(F3Ddatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.lrnd
TMP_134(uint256) = INTERNAL_CALL, ExitFraud.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_194)
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_191', 'TMP_134'] 
REF_195(F3Ddatasets.Player) -> plyr_[_pID]
REF_196(uint256) -> REF_195.aff
RETURN REF_189,TMP_135,REF_196"];
}
// Function: 1522.sol-ExitFraud-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_197(F3Ddatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.mask
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.pot
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.team
REF_205(F3Ddatasets.PotSplit) -> potSplit_[REF_204]
REF_206(uint256) -> REF_205.gen
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_201', 'REF_206'] 
TMP_137(uint256) = TMP_136 / 100
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_137', '1000000000000000000'] 
REF_208(F3Ddatasets.Round) -> round_[_rID]
REF_209(uint256) -> REF_208.keys
TMP_139(uint256) = TMP_138 / REF_209
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_198', 'TMP_139'] 
REF_211(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_212(F3Ddatasets.PlayerRounds) -> REF_211[_rID]
REF_213(uint256) -> REF_212.keys
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_140', 'REF_213'] 
TMP_142(uint256) = TMP_141 / 1000000000000000000
RETURN TMP_142"];
}
// Function: 1522.sol-ExitFraud-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_144(F3Ddatasets.Round) -> round_[_rID]
REF_145(uint256) -> REF_144.end
TMP_113(bool) = _now < REF_145
CONDITION TMP_113"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_146(F3Ddatasets.Round) -> round_[_rID]
REF_147(uint256) -> REF_146.strt
TMP_114(uint256) = REF_147 + rndGap_
TMP_115(bool) = _now > TMP_114
CONDITION TMP_115"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_148(F3Ddatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.end
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_149', '_now'] 
RETURN TMP_116"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.strt
TMP_117(uint256) = REF_152 + rndGap_
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', '_now'] 
RETURN TMP_118"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1522.sol-ExitFraud-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_439(F3Ddatasets.Round) -> round_[_rID]
REF_440(uint256) -> REF_439.strt
TMP_252(uint256) = REF_440 + rndGap_
TMP_253(bool) = _now > TMP_252
REF_441(F3Ddatasets.Round) -> round_[_rID]
REF_442(uint256) -> REF_441.end
TMP_254(bool) = _now <= REF_442
REF_443(F3Ddatasets.Round) -> round_[_rID]
REF_444(uint256) -> REF_443.end
TMP_255(bool) = _now > REF_444
REF_445(F3Ddatasets.Round) -> round_[_rID]
REF_446(uint256) -> REF_445.plyr
TMP_256(bool) = REF_446 == 0
TMP_257(bool) = TMP_255 && TMP_256
TMP_258(bool) = TMP_254 || TMP_257
TMP_259(bool) = TMP_253 && TMP_258
CONDITION TMP_259"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_447(F3Ddatasets.Round) -> round_[_rID]
REF_448(uint256) -> REF_447.keys
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_448', '_keys'] 
TMP_261(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_260', '_keys'] 
RETURN TMP_261"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_262(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_262"];
}
// Function: 1522.sol-ExitFraud-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_454(bool) = activated_ == True
TMP_455(None) = SOLIDITY_CALL require(bool,string)(TMP_454,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1522.sol-ExitFraud-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_456(bool) = _codeLength == 0
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1522.sol-ExitFraud-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_458(bool) = _eth >= 1000000000
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_460(bool) = _eth <= 100000000000000000000000
TMP_461(None) = SOLIDITY_CALL require(bool,string)(TMP_460,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1522.sol-ExitFraud-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_492(F3Ddatasets.Player) -> plyr_[_pID]
REF_493(uint256) -> REF_492.lrnd
TMP_288(bool) = REF_493 != 0
CONDITION TMP_288"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_494(F3Ddatasets.Player) -> plyr_[_pID]
REF_495(uint256) -> REF_494.lrnd
INTERNAL_CALL, ExitFraud.updateGenVault(uint256,uint256)(_pID,REF_495)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_496(F3Ddatasets.Player) -> plyr_[_pID]
REF_497(uint256) -> REF_496.lrnd
REF_497(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_498(uint256) -> _eventData_.compressedData
REF_499(uint256) -> _eventData_.compressedData
TMP_290(uint256) = REF_499 + 10
REF_498(uint256) (->_eventData_) := TMP_290(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1522.sol-ExitFraud-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_296(F3Ddatasets.Round) -> round_[_rID]
REF_297(uint256) -> REF_296.strt
TMP_170(uint256) = REF_297 + rndGap_
TMP_171(bool) = _now > TMP_170
REF_298(F3Ddatasets.Round) -> round_[_rID]
REF_299(uint256) -> REF_298.end
TMP_172(bool) = _now <= REF_299
REF_300(F3Ddatasets.Round) -> round_[_rID]
REF_301(uint256) -> REF_300.end
TMP_173(bool) = _now > REF_301
REF_302(F3Ddatasets.Round) -> round_[_rID]
REF_303(uint256) -> REF_302.plyr
TMP_174(bool) = REF_303 == 0
TMP_175(bool) = TMP_173 && TMP_174
TMP_176(bool) = TMP_172 || TMP_175
TMP_177(bool) = TMP_171 && TMP_176
CONDITION TMP_177"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_304(F3Ddatasets.Player) -> plyr_[_pID]
REF_305(uint256) -> REF_304.gen
TMP_178(uint256) = INTERNAL_CALL, ExitFraud.withdrawEarnings(uint256)(_pID)
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_178', '_eth'] 
REF_305(uint256) (->plyr_) := TMP_179(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_307(F3Ddatasets.Round) -> round_[_rID]
REF_308(uint256) -> REF_307.end
TMP_181(bool) = _now > REF_308
REF_309(F3Ddatasets.Round) -> round_[_rID]
REF_310(bool) -> REF_309.ended
TMP_182(bool) = REF_310 == False
TMP_183(bool) = TMP_181 && TMP_182
CONDITION TMP_183"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_311(F3Ddatasets.Round) -> round_[_rID]
REF_312(bool) -> REF_311.ended
REF_312(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_184(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_184(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_313(uint256) -> _eventData_.compressedData
REF_314(uint256) -> _eventData_.compressedData
TMP_185(uint256) = _now * 1000000000000000000
TMP_186(uint256) = REF_314 + TMP_185
REF_313(uint256) (->_eventData_) := TMP_186(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_315(uint256) -> _eventData_.compressedIDs
REF_316(uint256) -> _eventData_.compressedIDs
TMP_187(uint256) = REF_316 + _pID
REF_315(uint256) (->_eventData_) := TMP_187(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_318(F3Ddatasets.Player) -> plyr_[_pID]
REF_319(bytes32) -> REF_318.name
REF_320(uint256) -> _eventData_.compressedData
REF_321(uint256) -> _eventData_.compressedIDs
REF_322(address) -> _eventData_.winnerAddr
REF_323(bytes32) -> _eventData_.winnerName
REF_324(uint256) -> _eventData_.amountWon
REF_325(uint256) -> _eventData_.newPot
REF_326(uint256) -> _eventData_.P3DAmount
REF_327(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324,REF_325,REF_326,REF_327)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1522.sol-ExitFraud-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_54(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_54(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
_affID(uint256) := REF_56(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_57(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_57(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
TMP_57(bool) = _affID != REF_59
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(uint256) -> REF_60.laff
REF_61(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, ExitFraud.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, ExitFraud.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1522.sol-ExitFraud-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_47(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_47(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_48(F3Ddatasets.Player) -> plyr_[_pID]
REF_49(uint256) -> REF_48.laff
_affCode(uint256) := REF_49(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_50(F3Ddatasets.Player) -> plyr_[_pID]
REF_51(uint256) -> REF_50.laff
TMP_47(bool) = _affCode != REF_51
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
REF_53(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, ExitFraud.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, ExitFraud.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 1522.sol-ExitFraud-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_62(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_62(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_63(F3Ddatasets.Player) -> plyr_[_pID]
REF_64(bytes32) -> REF_63.name
TMP_64(bool) = _affCode == REF_64
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
_affID(uint256) := REF_66(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_67(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_67(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_68(F3Ddatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
TMP_66(bool) = _affID != REF_69
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_70(F3Ddatasets.Player) -> plyr_[_pID]
REF_71(uint256) -> REF_70.laff
REF_71(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, ExitFraud.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, ExitFraud.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, ExitFraud.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1522.sol-ExitFraud-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_263 = CONVERT PlayerBook to address
TMP_264(bool) = msg.sender == TMP_263
TMP_265(None) = SOLIDITY_CALL require(bool,string)(TMP_264,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_452(uint256) -> pIDxAddr_[_addr]
TMP_266(bool) = REF_452 != _pID
CONDITION TMP_266"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_453(uint256) -> pIDxAddr_[_addr]
REF_453(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_454(uint256) -> pIDxName_[_name]
TMP_267(bool) = REF_454 != _pID
CONDITION TMP_267"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_455(uint256) -> pIDxName_[_name]
REF_455(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_456(F3Ddatasets.Player) -> plyr_[_pID]
REF_457(address) -> REF_456.addr
TMP_268(bool) = REF_457 != _addr
CONDITION TMP_268"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_458(F3Ddatasets.Player) -> plyr_[_pID]
REF_459(address) -> REF_458.addr
REF_459(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_460(F3Ddatasets.Player) -> plyr_[_pID]
REF_461(bytes32) -> REF_460.name
TMP_269(bool) = REF_461 != _name
CONDITION TMP_269"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_462(F3Ddatasets.Player) -> plyr_[_pID]
REF_463(bytes32) -> REF_462.name
REF_463(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_464(F3Ddatasets.Player) -> plyr_[_pID]
REF_465(uint256) -> REF_464.laff
TMP_270(bool) = REF_465 != _laff
CONDITION TMP_270"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_466(F3Ddatasets.Player) -> plyr_[_pID]
REF_467(uint256) -> REF_466.laff
REF_467(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_468(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_469(bool) -> REF_468[_name]
TMP_271(bool) = REF_469 == False
CONDITION TMP_271"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_470(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_471(bool) -> REF_470[_name]
REF_471(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1522.sol-ExitFraud-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_272 = CONVERT PlayerBook to address
TMP_273(bool) = msg.sender == TMP_272
TMP_274(None) = SOLIDITY_CALL require(bool,string)(TMP_273,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_472(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_473(bool) -> REF_472[_name]
TMP_275(bool) = REF_473 == False
CONDITION TMP_275"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_474(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_475(bool) -> REF_474[_name]
REF_475(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1522.sol-ExitFraud-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_91(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_91(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_108(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_108(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_110(F3Ddatasets.Player) -> plyr_[_affID]
REF_111(address) -> REF_110.addr
REF_112(F3Ddatasets.Player) -> plyr_[_affID]
REF_113(bytes32) -> REF_112.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_111,REF_113,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
9->1;
}
// Function: 1522.sol-ExitFraud-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_95(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_95(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_117(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_117(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_119(F3Ddatasets.Player) -> plyr_[_affID]
REF_120(address) -> REF_119.addr
REF_121(F3Ddatasets.Player) -> plyr_[_affID]
REF_122(bytes32) -> REF_121.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_120,REF_122,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
9->1;
}
// Function: 1522.sol-ExitFraud-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_99(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_99(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_126(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_126(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_128(F3Ddatasets.Player) -> plyr_[_affID]
REF_129(address) -> REF_128.addr
REF_130(F3Ddatasets.Player) -> plyr_[_affID]
REF_131(bytes32) -> REF_130.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_129,REF_131,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
9->1;
}
// Function: 1522.sol-ExitFraud-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x5F62d3685b9f420C6e87549c92Cf6F91af018297)

IRs:
TMP_453 = CONVERT 544558012461205179500574935456936087360016319127 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_453(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Exit Fraud

IRs:
name(string) := Exit Fraud(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = EXITF

IRs:
symbol(string) := EXITF(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 43200

IRs:
rndMax_(uint256) := 43200(uint256)"];
}
// Function: 1522.sol-ExitFraud-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin1 = 0xdcfd5C7B10ce65598d8B13dFABcacE9c3889298C

IRs:
admin1(address) := 1261628114323849112908121467203245887098439936396(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
admin2 = msg.sender

IRs:
admin2(address) := msg.sender(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndExtra_ = 1800

IRs:
rndExtra_(uint256) := 1800(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndGap_ = 1800

IRs:
rndGap_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 1522.sol-ExitFraud-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_329(uint256) = INTERNAL_CALL, ExitFraud.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_329(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_330(bool) = _earnings > 0
CONDITION TMP_330"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_567(F3Ddatasets.Player) -> plyr_[_pID]
REF_568(uint256) -> REF_567.gen
REF_570(F3Ddatasets.Player) -> plyr_[_pID]
REF_571(uint256) -> REF_570.gen
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_571'] 
REF_568(uint256) (->plyr_) := TMP_331(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_572(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_573(F3Ddatasets.PlayerRounds) -> REF_572[_rIDlast]
REF_574(uint256) -> REF_573.mask
REF_576(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_577(F3Ddatasets.PlayerRounds) -> REF_576[_rIDlast]
REF_578(uint256) -> REF_577.mask
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_578'] 
REF_574(uint256) (->plyrRnds_) := TMP_332(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1522.sol-ExitFraud-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_663(F3Ddatasets.Round) -> round_[_rID]
REF_664(uint256) -> REF_663.keys
TMP_420(uint256) = TMP_419 / REF_664
_ppt(uint256) := TMP_420(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_665(F3Ddatasets.Round) -> round_[_rID]
REF_666(uint256) -> REF_665.mask
REF_668(F3Ddatasets.Round) -> round_[_rID]
REF_669(uint256) -> REF_668.mask
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_669'] 
REF_666(uint256) (->round_) := TMP_421(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_423(uint256) = TMP_422 / 1000000000000000000
_pearn(uint256) := TMP_423(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_671(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_672(F3Ddatasets.PlayerRounds) -> REF_671[_rID]
REF_673(uint256) -> REF_672.mask
REF_674(F3Ddatasets.Round) -> round_[_rID]
REF_675(uint256) -> REF_674.mask
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_675', '_keys'] 
TMP_425(uint256) = TMP_424 / 1000000000000000000
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_425', '_pearn'] 
REF_679(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_680(F3Ddatasets.PlayerRounds) -> REF_679[_rID]
REF_681(uint256) -> REF_680.mask
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_426', 'REF_681'] 
REF_673(uint256) (->plyrRnds_) := TMP_427(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_684(F3Ddatasets.Round) -> round_[_rID]
REF_685(uint256) -> REF_684.keys
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_685'] 
TMP_429(uint256) = TMP_428 / 1000000000000000000
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_429'] 
RETURN TMP_430"];
}
// Function: 1522.sol-ExitFraud-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_579(F3Ddatasets.Round) -> round_[_rID]
REF_580(uint256) -> REF_579.end
TMP_333(bool) = _now > REF_580
REF_581(F3Ddatasets.Round) -> round_[_rID]
REF_582(uint256) -> REF_581.plyr
TMP_334(bool) = REF_582 == 0
TMP_335(bool) = TMP_333 && TMP_334
CONDITION TMP_335"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_336(uint256) = _keys / 1000000000000000000
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_336', 'rndInc_'] 
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_337', '_now'] 
_newTime(uint256) := TMP_338(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_339(uint256) = _keys / 1000000000000000000
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_339', 'rndInc_'] 
REF_587(F3Ddatasets.Round) -> round_[_rID]
REF_588(uint256) -> REF_587.end
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_340', 'REF_588'] 
_newTime(uint256) := TMP_341(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_343(bool) = _newTime < TMP_342
CONDITION TMP_343"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_590(F3Ddatasets.Round) -> round_[_rID]
REF_591(uint256) -> REF_590.end
REF_591(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_592(F3Ddatasets.Round) -> round_[_rID]
REF_593(uint256) -> REF_592.end
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_593(uint256) (->round_) := TMP_344(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1522.sol-ExitFraud-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_285(bool) = _team < 0
TMP_286(bool) = _team > 3
TMP_287(bool) = TMP_285 || TMP_286
CONDITION TMP_287"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 1522.sol-ExitFraud-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_72(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_72(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_73(F3Ddatasets.Round) -> round_[_rID]
REF_74(uint256) -> REF_73.end
TMP_72(bool) = _now > REF_74
REF_75(F3Ddatasets.Round) -> round_[_rID]
REF_76(bool) -> REF_75.ended
TMP_73(bool) = REF_76 == False
TMP_74(bool) = TMP_72 && TMP_73
REF_77(F3Ddatasets.Round) -> round_[_rID]
REF_78(uint256) -> REF_77.plyr
TMP_75(bool) = REF_78 != 0
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_79(F3Ddatasets.Round) -> round_[_rID]
REF_80(bool) -> REF_79.ended
REF_80(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_77(F3Ddatasets.EventReturns) = INTERNAL_CALL, ExitFraud.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_77(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_78(uint256) = INTERNAL_CALL, ExitFraud.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_78(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_79(bool) = _eth > 0
CONDITION TMP_79"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(address) -> REF_81.addr
Transfer dest:REF_82 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_84(uint256) -> _eventData_.compressedData
REF_85(uint256) -> _eventData_.compressedData
TMP_81(uint256) = _now * 1000000000000000000
TMP_82(uint256) = REF_85 + TMP_81
REF_84(uint256) (->_eventData_) := TMP_82(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_86(uint256) -> _eventData_.compressedIDs
REF_87(uint256) -> _eventData_.compressedIDs
TMP_83(uint256) = REF_87 + _pID
REF_86(uint256) (->_eventData_) := TMP_83(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_89(F3Ddatasets.Player) -> plyr_[_pID]
REF_90(bytes32) -> REF_89.name
REF_91(uint256) -> _eventData_.compressedData
REF_92(uint256) -> _eventData_.compressedIDs
REF_93(address) -> _eventData_.winnerAddr
REF_94(bytes32) -> _eventData_.winnerName
REF_95(uint256) -> _eventData_.amountWon
REF_96(uint256) -> _eventData_.newPot
REF_97(uint256) -> _eventData_.P3DAmount
REF_98(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_90,_eth,REF_91,REF_92,REF_93,REF_94,REF_95,REF_96,REF_97,REF_98)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_85(uint256) = INTERNAL_CALL, ExitFraud.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_85(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_86(bool) = _eth > 0
CONDITION TMP_86"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_99(F3Ddatasets.Player) -> plyr_[_pID]
REF_100(address) -> REF_99.addr
Transfer dest:REF_100 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_103(F3Ddatasets.Player) -> plyr_[_pID]
REF_104(bytes32) -> REF_103.name
Emit onWithdraw(_pID,msg.sender,REF_104,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, ExitFraud.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, ExitFraud.isHuman()()"];
23->1;
}
// Function: 1522.sol-ExitFraud-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_686(F3Ddatasets.Player) -> plyr_[_pID]
REF_687(uint256) -> REF_686.lrnd
INTERNAL_CALL, ExitFraud.updateGenVault(uint256,uint256)(_pID,REF_687)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_688(F3Ddatasets.Player) -> plyr_[_pID]
REF_689(uint256) -> REF_688.win
REF_691(F3Ddatasets.Player) -> plyr_[_pID]
REF_692(uint256) -> REF_691.gen
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_689', 'REF_692'] 
REF_694(F3Ddatasets.Player) -> plyr_[_pID]
REF_695(uint256) -> REF_694.aff
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_432', 'REF_695'] 
_earnings(uint256) := TMP_433(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_434(bool) = _earnings > 0
CONDITION TMP_434"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_696(F3Ddatasets.Player) -> plyr_[_pID]
REF_697(uint256) -> REF_696.win
REF_697(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_698(F3Ddatasets.Player) -> plyr_[_pID]
REF_699(uint256) -> REF_698.gen
REF_699(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_700(F3Ddatasets.Player) -> plyr_[_pID]
REF_701(uint256) -> REF_700.aff
REF_701(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1522.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_476'] 
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_478'] 
TMP_480(uint256) = TMP_479 / 2
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_477', 'TMP_480'] 
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_483(uint256) = TMP_481 / TMP_482
RETURN TMP_483"];
}
// Function: 1522.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_466(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_468(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_467)
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_466', 'TMP_468'] 
RETURN TMP_469"];
}
// Function: 1522.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_470(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_470', '312500000000000000000000000'] 
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_471', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_472'] 
TMP_474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_473', '74999921875000000000000000000000'] 
TMP_475(uint256) = TMP_474 / 156250000
RETURN TMP_475"];
}
// Function: 1522.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_463(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_462)
TMP_464(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_463', 'TMP_464'] 
RETURN TMP_465"];
}
// Function: 1522.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_484 = CONVERT _input to bytes
_temp(bytes) := TMP_484(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_737 -> LENGTH _temp
_length(uint256) := REF_737(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_485(bool) = _length <= 32
TMP_486(bool) = _length > 0
TMP_487(bool) = TMP_485 && TMP_486
TMP_488(None) = SOLIDITY_CALL require(bool,string)(TMP_487,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_738(None) -> _temp[0]
TMP_489(bool) = REF_738 != 32
TMP_490(uint256) = _length - 1
REF_739(None) -> _temp[TMP_490]
TMP_491(bool) = REF_739 != 32
TMP_492(bool) = TMP_489 && TMP_491
TMP_493(None) = SOLIDITY_CALL require(bool,string)(TMP_492,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_740(None) -> _temp[0]
TMP_494(bool) = REF_740 == 48
CONDITION TMP_494"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_741(None) -> _temp[1]
TMP_495(bool) = REF_741 != 120
TMP_496(None) = SOLIDITY_CALL require(bool,string)(TMP_495,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_742(None) -> _temp[1]
TMP_497(bool) = REF_742 != 88
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_499(bool) = i < _length
CONDITION TMP_499"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_743(None) -> _temp[i]
TMP_500(bool) = REF_743 > 64
REF_744(None) -> _temp[i]
TMP_501(bool) = REF_744 < 91
TMP_502(bool) = TMP_500 && TMP_501
CONDITION TMP_502"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_745(bytes1) -> _temp[i]
REF_746(None) -> _temp[i]
TMP_503 = CONVERT REF_746 to uint256
TMP_504(uint256) = TMP_503 + 32
TMP_505 = CONVERT TMP_504 to bytes1
REF_745(bytes1) (->_temp) := TMP_505(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_506(bool) = _hasNonNumber == False
CONDITION TMP_506"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_747(None) -> _temp[i]
TMP_507(bool) = REF_747 == 32
REF_748(None) -> _temp[i]
TMP_508(bool) = REF_748 > 96
REF_749(None) -> _temp[i]
TMP_509(bool) = REF_749 < 123
TMP_510(bool) = TMP_508 && TMP_509
TMP_511(bool) = TMP_507 || TMP_510
REF_750(None) -> _temp[i]
TMP_512(bool) = REF_750 > 47
REF_751(None) -> _temp[i]
TMP_513(bool) = REF_751 < 58
TMP_514(bool) = TMP_512 && TMP_513
TMP_515(bool) = TMP_511 || TMP_514
TMP_516(None) = SOLIDITY_CALL require(bool,string)(TMP_515,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_752(None) -> _temp[i]
TMP_517(bool) = REF_752 == 32
CONDITION TMP_517"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_518(uint256) = i + 1
REF_753(None) -> _temp[TMP_518]
TMP_519(bool) = REF_753 != 32
TMP_520(None) = SOLIDITY_CALL require(bool,string)(TMP_519,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_521(bool) = _hasNonNumber == False
REF_754(None) -> _temp[i]
TMP_522(bool) = REF_754 < 48
REF_755(None) -> _temp[i]
TMP_523(bool) = REF_755 > 57
TMP_524(bool) = TMP_522 || TMP_523
TMP_525(bool) = TMP_521 && TMP_524
CONDITION TMP_525"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_526(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_527(bool) = _hasNonNumber == True
TMP_528(None) = SOLIDITY_CALL require(bool,string)(TMP_527,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1522.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1522.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1522.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1522.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1522.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1522.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1522.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1522.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1522.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_537(uint256) = a + b
c(uint256) := TMP_537(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_538(bool) = c >= a
TMP_539(None) = SOLIDITY_CALL require(bool,string)(TMP_538,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1522.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_529(bool) = a == 0
CONDITION TMP_529"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_530(uint256) = a * b
c(uint256) := TMP_530(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_531(uint256) = c / a
TMP_532(bool) = TMP_531 == b
TMP_533(None) = SOLIDITY_CALL require(bool,string)(TMP_532,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1522.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_547(bool) = x == 0
CONDITION TMP_547"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_548(bool) = y == 0
CONDITION TMP_548"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_549(bool) = i < y
CONDITION TMP_549"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_550(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_550(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_551(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1522.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_546(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_546"];
}
// Function: 1522.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_540(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_541(uint256) = TMP_540 / 2
z(uint256) := TMP_541(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_542(bool) = z < y
CONDITION TMP_542"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_543(uint256) = x / z
TMP_544(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_543,z)
TMP_545(uint256) = TMP_544 / 2
z(uint256) := TMP_545(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1522.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_534(bool) = b <= a
TMP_535(None) = SOLIDITY_CALL require(bool,string)(TMP_534,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_536(uint256) = a - b
RETURN TMP_536"];
}
}
