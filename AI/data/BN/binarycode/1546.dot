digraph G {
// Function: 1546.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_156(uint256) = a + b
c(uint256) := TMP_156(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_157(bool) = c >= a
TMP_158(None) = SOLIDITY_CALL assert(bool)(TMP_157)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1546.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_152(uint256) = a / b
c(uint256) := TMP_152(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1546.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_147(bool) = a == 0
CONDITION TMP_147"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_148(uint256) = a * b
c(uint256) := TMP_148(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_149(uint256) = c / a
TMP_150(bool) = TMP_149 == b
TMP_151(None) = SOLIDITY_CALL assert(bool)(TMP_150)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1546.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_153(bool) = b <= a
TMP_154(None) = SOLIDITY_CALL assert(bool)(TMP_153)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_155(uint256) = a - b
RETURN TMP_155"];
}
// Function: 1546.sol-ZTHInterface-approve(address,uint256)
digraph{
}
// Function: 1546.sol-ZTHInterface-transfer(address,uint256)
digraph{
}
// Function: 1546.sol-ZTHReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1546.sol-Zlots-_finishSpin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spin = playerSpins[target]

IRs:
REF_24(Zlots.playerSpin) -> playerSpins[target]
spin(Zlots.playerSpin) := REF_24(Zlots.playerSpin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(spin.tokenValue > 0)

IRs:
REF_25(uint200) -> spin.tokenValue
TMP_33(bool) = REF_25 > 0
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(spin.blockn != block.number)

IRs:
REF_26(uint56) -> spin.blockn
TMP_35(bool) = REF_26 != block.number
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
profit = 0

IRs:
profit(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
category = 0

IRs:
category(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
block.number - spin.blockn > 255

IRs:
REF_27(uint56) -> spin.blockn
TMP_37(uint256) = block.number - REF_27
TMP_38(bool) = TMP_37 > 255
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
result = 999999

IRs:
result(uint256) := 999999(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
result = random(1000000,spin.blockn,target)

IRs:
REF_28(uint56) -> spin.blockn
TMP_39(uint256) = INTERNAL_CALL, Zlots.random(uint256,uint256,address)(1000000,REF_28,target)
result(uint256) := TMP_39(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
result > 476661

IRs:
TMP_40(bool) = result > 476661
CONDITION TMP_40"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
contractBalance = contractBalance.add(spin.tokenValue)

IRs:
REF_30(uint200) -> spin.tokenValue
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contractBalance', 'REF_30'] 
contractBalance(uint256) := TMP_41(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Loss(target,spin.blockn)

IRs:
REF_31(uint56) -> spin.blockn
Emit Loss(target,REF_31)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
LogResult(target,result,profit,spin.tokenValue,category,false)

IRs:
REF_32(uint200) -> spin.tokenValue
Emit LogResult(target,result,profit,REF_32,category,False)"];
14->111;
15[label="Node Type: IF 15

EXPRESSION:
result < 1

IRs:
TMP_44(bool) = result < 1
CONDITION TMP_44"];
15->16[label="True"];
15->19[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,500)

IRs:
REF_34(uint200) -> spin.tokenValue
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_34', '500'] 
profit(uint256) := TMP_45(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
category = 1

IRs:
category(uint256) := 1(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ThreeMoonJackpot(target,spin.blockn)

IRs:
REF_35(uint56) -> spin.blockn
Emit ThreeMoonJackpot(target,REF_35)"];
18->107;
19[label="Node Type: IF 19

EXPRESSION:
result < 298

IRs:
TMP_47(bool) = result < 298
CONDITION TMP_47"];
19->20[label="True"];
19->23[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,232)

IRs:
REF_37(uint200) -> spin.tokenValue
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_37', '232'] 
profit(uint256) := TMP_48(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
category = 2

IRs:
category(uint256) := 2(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
TwoMoonPrize(target,spin.blockn)

IRs:
REF_38(uint56) -> spin.blockn
Emit TwoMoonPrize(target,REF_38)"];
22->106;
23[label="Node Type: IF 23

EXPRESSION:
result < 3127

IRs:
TMP_50(bool) = result < 3127
CONDITION TMP_50"];
23->24[label="True"];
23->27[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),10)

IRs:
REF_41(uint200) -> spin.tokenValue
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_41', '232'] 
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', '10'] 
profit(uint256) := TMP_52(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
category = 3

IRs:
category(uint256) := 3(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
ZTHJackpot(target,spin.blockn)

IRs:
REF_42(uint56) -> spin.blockn
Emit ZTHJackpot(target,REF_42)"];
26->105;
27[label="Node Type: IF 27

EXPRESSION:
result < 5956

IRs:
TMP_54(bool) = result < 5956
CONDITION TMP_54"];
27->28[label="True"];
27->31[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,25)

IRs:
REF_44(uint200) -> spin.tokenValue
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_44', '25'] 
profit(uint256) := TMP_55(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
category = 4

IRs:
category(uint256) := 4(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
ThreeZSymbols(target,spin.blockn)

IRs:
REF_45(uint56) -> spin.blockn
Emit ThreeZSymbols(target,REF_45)"];
30->104;
31[label="Node Type: IF 31

EXPRESSION:
result < 8785

IRs:
TMP_57(bool) = result < 8785
CONDITION TMP_57"];
31->32[label="True"];
31->35[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,25)

IRs:
REF_47(uint200) -> spin.tokenValue
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_47', '25'] 
profit(uint256) := TMP_58(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
category = 5

IRs:
category(uint256) := 5(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
ThreeTSymbols(target,spin.blockn)

IRs:
REF_48(uint56) -> spin.blockn
Emit ThreeTSymbols(target,REF_48)"];
34->103;
35[label="Node Type: IF 35

EXPRESSION:
result < 11614

IRs:
TMP_60(bool) = result < 11614
CONDITION TMP_60"];
35->36[label="True"];
35->39[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,25)

IRs:
REF_50(uint200) -> spin.tokenValue
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_50', '25'] 
profit(uint256) := TMP_61(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
category = 6

IRs:
category(uint256) := 6(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
ThreeHSymbols(target,spin.blockn)

IRs:
REF_51(uint56) -> spin.blockn
Emit ThreeHSymbols(target,REF_51)"];
38->102;
39[label="Node Type: IF 39

EXPRESSION:
result < 14443

IRs:
TMP_63(bool) = result < 14443
CONDITION TMP_63"];
39->40[label="True"];
39->43[label="False"];
40[label="Node Type: EXPRESSION 40

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,50)

IRs:
REF_53(uint200) -> spin.tokenValue
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_53', '50'] 
profit(uint256) := TMP_64(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
category = 7

IRs:
category(uint256) := 7(uint256)"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
ThreeEtherIcons(target,spin.blockn)

IRs:
REF_54(uint56) -> spin.blockn
Emit ThreeEtherIcons(target,REF_54)"];
42->101;
43[label="Node Type: IF 43

EXPRESSION:
result < 17272

IRs:
TMP_66(bool) = result < 17272
CONDITION TMP_66"];
43->44[label="True"];
43->47[label="False"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,40)

IRs:
REF_56(uint200) -> spin.tokenValue
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_56', '40'] 
profit(uint256) := TMP_67(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
category = 8

IRs:
category(uint256) := 8(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
ThreeGreenPyramids(target,spin.blockn)

IRs:
REF_57(uint56) -> spin.blockn
Emit ThreeGreenPyramids(target,REF_57)"];
46->100;
47[label="Node Type: IF 47

EXPRESSION:
result < 20101

IRs:
TMP_69(bool) = result < 20101
CONDITION TMP_69"];
47->48[label="True"];
47->51[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,20)

IRs:
REF_59(uint200) -> spin.tokenValue
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_59', '20'] 
profit(uint256) := TMP_70(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
category = 9

IRs:
category(uint256) := 9(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
ThreeGoldPyramids(target,spin.blockn)

IRs:
REF_60(uint56) -> spin.blockn
Emit ThreeGoldPyramids(target,REF_60)"];
50->99;
51[label="Node Type: IF 51

EXPRESSION:
result < 22929

IRs:
TMP_72(bool) = result < 22929
CONDITION TMP_72"];
51->52[label="True"];
51->55[label="False"];
52[label="Node Type: EXPRESSION 52

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,20)

IRs:
REF_62(uint200) -> spin.tokenValue
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_62', '20'] 
profit(uint256) := TMP_73(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
category = 10

IRs:
category(uint256) := 10(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
ThreeWhitePyramids(target,spin.blockn)

IRs:
REF_63(uint56) -> spin.blockn
Emit ThreeWhitePyramids(target,REF_63)"];
54->98;
55[label="Node Type: IF 55

EXPRESSION:
result < 52332

IRs:
TMP_75(bool) = result < 52332
CONDITION TMP_75"];
55->56[label="True"];
55->59[label="False"];
56[label="Node Type: EXPRESSION 56

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,125),10)

IRs:
REF_66(uint200) -> spin.tokenValue
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_66', '125'] 
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_76', '10'] 
profit(uint256) := TMP_77(uint256)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
category = 11

IRs:
category(uint256) := 11(uint256)"];
57->58;
58[label="Node Type: EXPRESSION 58

EXPRESSION:
OneMoonPrize(target,spin.blockn)

IRs:
REF_67(uint56) -> spin.blockn
Emit OneMoonPrize(target,REF_67)"];
58->97;
59[label="Node Type: IF 59

EXPRESSION:
result < 120225

IRs:
TMP_79(bool) = result < 120225
CONDITION TMP_79"];
59->60[label="True"];
59->63[label="False"];
60[label="Node Type: EXPRESSION 60

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,15),10)

IRs:
REF_70(uint200) -> spin.tokenValue
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_70', '15'] 
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_80', '10'] 
profit(uint256) := TMP_81(uint256)"];
60->61;
61[label="Node Type: EXPRESSION 61

EXPRESSION:
category = 12

IRs:
category(uint256) := 12(uint256)"];
61->62;
62[label="Node Type: EXPRESSION 62

EXPRESSION:
OneOfEachPyramidPrize(target,spin.blockn)

IRs:
REF_71(uint56) -> spin.blockn
Emit OneOfEachPyramidPrize(target,REF_71)"];
62->96;
63[label="Node Type: IF 63

EXPRESSION:
result < 171146

IRs:
TMP_83(bool) = result < 171146
CONDITION TMP_83"];
63->64[label="True"];
63->67[label="False"];
64[label="Node Type: EXPRESSION 64

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),100)

IRs:
REF_74(uint200) -> spin.tokenValue
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_74', '232'] 
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_84', '100'] 
profit(uint256) := TMP_85(uint256)"];
64->65;
65[label="Node Type: EXPRESSION 65

EXPRESSION:
category = 13

IRs:
category(uint256) := 13(uint256)"];
65->66;
66[label="Node Type: EXPRESSION 66

EXPRESSION:
TwoZSymbols(target,spin.blockn)

IRs:
REF_75(uint56) -> spin.blockn
Emit TwoZSymbols(target,REF_75)"];
66->95;
67[label="Node Type: IF 67

EXPRESSION:
result < 222067

IRs:
TMP_87(bool) = result < 222067
CONDITION TMP_87"];
67->68[label="True"];
67->71[label="False"];
68[label="Node Type: EXPRESSION 68

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),100)

IRs:
REF_78(uint200) -> spin.tokenValue
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_78', '232'] 
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_88', '100'] 
profit(uint256) := TMP_89(uint256)"];
68->69;
69[label="Node Type: EXPRESSION 69

EXPRESSION:
category = 14

IRs:
category(uint256) := 14(uint256)"];
69->70;
70[label="Node Type: EXPRESSION 70

EXPRESSION:
TwoTSymbols(target,spin.blockn)

IRs:
REF_79(uint56) -> spin.blockn
Emit TwoTSymbols(target,REF_79)"];
70->94;
71[label="Node Type: IF 71

EXPRESSION:
result < 272988

IRs:
TMP_91(bool) = result < 272988
CONDITION TMP_91"];
71->72[label="True"];
71->75[label="False"];
72[label="Node Type: EXPRESSION 72

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),100)

IRs:
REF_82(uint200) -> spin.tokenValue
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_82', '232'] 
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_92', '100'] 
profit(uint256) := TMP_93(uint256)"];
72->73;
73[label="Node Type: EXPRESSION 73

EXPRESSION:
category = 15

IRs:
category(uint256) := 15(uint256)"];
73->74;
74[label="Node Type: EXPRESSION 74

EXPRESSION:
TwoHSymbols(target,spin.blockn)

IRs:
REF_83(uint56) -> spin.blockn
Emit TwoHSymbols(target,REF_83)"];
74->93;
75[label="Node Type: IF 75

EXPRESSION:
result < 323909

IRs:
TMP_95(bool) = result < 323909
CONDITION TMP_95"];
75->76[label="True"];
75->79[label="False"];
76[label="Node Type: EXPRESSION 76

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,375),100)

IRs:
REF_86(uint200) -> spin.tokenValue
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_86', '375'] 
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_96', '100'] 
profit(uint256) := TMP_97(uint256)"];
76->77;
77[label="Node Type: EXPRESSION 77

EXPRESSION:
category = 16

IRs:
category(uint256) := 16(uint256)"];
77->78;
78[label="Node Type: EXPRESSION 78

EXPRESSION:
TwoEtherIcons(target,spin.blockn)

IRs:
REF_87(uint56) -> spin.blockn
Emit TwoEtherIcons(target,REF_87)"];
78->92;
79[label="Node Type: IF 79

EXPRESSION:
result < 374830

IRs:
TMP_99(bool) = result < 374830
CONDITION TMP_99"];
79->80[label="True"];
79->83[label="False"];
80[label="Node Type: EXPRESSION 80

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,35),10)

IRs:
REF_90(uint200) -> spin.tokenValue
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_90', '35'] 
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_100', '10'] 
profit(uint256) := TMP_101(uint256)"];
80->81;
81[label="Node Type: EXPRESSION 81

EXPRESSION:
category = 17

IRs:
category(uint256) := 17(uint256)"];
81->82;
82[label="Node Type: EXPRESSION 82

EXPRESSION:
TwoGreenPyramids(target,spin.blockn)

IRs:
REF_91(uint56) -> spin.blockn
Emit TwoGreenPyramids(target,REF_91)"];
82->91;
83[label="Node Type: IF 83

EXPRESSION:
result < 425751

IRs:
TMP_103(bool) = result < 425751
CONDITION TMP_103"];
83->84[label="True"];
83->87[label="False"];
84[label="Node Type: EXPRESSION 84

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,225),100)

IRs:
REF_94(uint200) -> spin.tokenValue
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_94', '225'] 
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_104', '100'] 
profit(uint256) := TMP_105(uint256)"];
84->85;
85[label="Node Type: EXPRESSION 85

EXPRESSION:
category = 18

IRs:
category(uint256) := 18(uint256)"];
85->86;
86[label="Node Type: EXPRESSION 86

EXPRESSION:
TwoGoldPyramids(target,spin.blockn)

IRs:
REF_95(uint56) -> spin.blockn
Emit TwoGoldPyramids(target,REF_95)"];
86->90;
87[label="Node Type: EXPRESSION 87

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,2)

IRs:
REF_97(uint200) -> spin.tokenValue
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_97', '2'] 
profit(uint256) := TMP_107(uint256)"];
87->88;
88[label="Node Type: EXPRESSION 88

EXPRESSION:
category = 19

IRs:
category(uint256) := 19(uint256)"];
88->89;
89[label="Node Type: EXPRESSION 89

EXPRESSION:
TwoWhitePyramids(target,spin.blockn)

IRs:
REF_98(uint56) -> spin.blockn
Emit TwoWhitePyramids(target,REF_98)"];
89->90;
90[label="Node Type: END_IF 90
"];
90->91;
91[label="Node Type: END_IF 91
"];
91->92;
92[label="Node Type: END_IF 92
"];
92->93;
93[label="Node Type: END_IF 93
"];
93->94;
94[label="Node Type: END_IF 94
"];
94->95;
95[label="Node Type: END_IF 95
"];
95->96;
96[label="Node Type: END_IF 96
"];
96->97;
97[label="Node Type: END_IF 97
"];
97->98;
98[label="Node Type: END_IF 98
"];
98->99;
99[label="Node Type: END_IF 99
"];
99->100;
100[label="Node Type: END_IF 100
"];
100->101;
101[label="Node Type: END_IF 101
"];
101->102;
102[label="Node Type: END_IF 102
"];
102->103;
103[label="Node Type: END_IF 103
"];
103->104;
104[label="Node Type: END_IF 104
"];
104->105;
105[label="Node Type: END_IF 105
"];
105->106;
106[label="Node Type: END_IF 106
"];
106->107;
107[label="Node Type: END_IF 107
"];
107->108;
108[label="Node Type: EXPRESSION 108

EXPRESSION:
LogResult(target,result,profit,spin.tokenValue,category,true)

IRs:
REF_99(uint200) -> spin.tokenValue
Emit LogResult(target,result,profit,REF_99,category,True)"];
108->109;
109[label="Node Type: EXPRESSION 109

EXPRESSION:
contractBalance = contractBalance.sub(profit)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['contractBalance', 'profit'] 
contractBalance(uint256) := TMP_110(uint256)"];
109->110;
110[label="Node Type: EXPRESSION 110

EXPRESSION:
ZTHTKN.transfer(target,profit)

IRs:
TMP_111(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['target', 'profit']  "];
110->111;
111[label="Node Type: END_IF 111
"];
111->112;
112[label="Node Type: EXPRESSION 112

EXPRESSION:
playerSpins[target] = playerSpin(uint200(0),uint56(0))

IRs:
REF_102(Zlots.playerSpin) -> playerSpins[target]
TMP_112 = CONVERT 0 to uint200
TMP_113 = CONVERT 0 to uint56
TMP_114(Zlots.playerSpin) = new playerSpin(TMP_112,TMP_113)
REF_102(Zlots.playerSpin) (->playerSpins) := TMP_114(Zlots.playerSpin)"];
112->113;
113[label="Node Type: EXPRESSION 113

EXPRESSION:
SpinConcluded(target,spin.blockn)

IRs:
REF_103(uint56) -> spin.blockn
Emit SpinConcluded(target,REF_103)"];
113->114;
114[label="Node Type: RETURN 114

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 1546.sol-Zlots-_spinTokens(Zlots.TKN)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameActive)

IRs:
TMP_10(None) = SOLIDITY_CALL require(bool)(gameActive)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_zthToken(msg.sender))

IRs:
TMP_11(bool) = INTERNAL_CALL, Zlots._zthToken(address)(msg.sender)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(validTokenBet[_tkn.value])

IRs:
REF_9(uint256) -> _tkn.value
REF_10(bool) -> validTokenBet[REF_9]
TMP_13(None) = SOLIDITY_CALL require(bool)(REF_10)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(jackpotGuard(_tkn.value))

IRs:
REF_11(uint256) -> _tkn.value
TMP_14(bool) = INTERNAL_CALL, Zlots.jackpotGuard(uint256)(REF_11)
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tkn.value < ((2 ** 200) - 1))

IRs:
REF_12(uint256) -> _tkn.value
TMP_16(uint256) = 2 ** 200
TMP_17(uint256) = TMP_16 - 1
TMP_18(bool) = REF_12 < TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(block.number < ((2 ** 56) - 1))

IRs:
TMP_20(uint256) = 2 ** 56
TMP_21(uint256) = TMP_20 - 1
TMP_22(bool) = block.number < TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_customerAddress = _tkn.sender

IRs:
REF_13(address) -> _tkn.sender
_customerAddress(address) := REF_13(address)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_wagered = _tkn.value

IRs:
REF_14(uint256) -> _tkn.value
_wagered(uint256) := REF_14(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
spin = playerSpins[_tkn.sender]

IRs:
REF_15(address) -> _tkn.sender
REF_16(Zlots.playerSpin) -> playerSpins[REF_15]
spin(Zlots.playerSpin) := REF_16(Zlots.playerSpin)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(block.number != spin.blockn)

IRs:
REF_17(uint56) -> spin.blockn
TMP_24(bool) = block.number != REF_17
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
spin.blockn != 0

IRs:
REF_18(uint56) -> spin.blockn
TMP_26(bool) = REF_18 != 0
CONDITION TMP_26"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_finishSpin(_tkn.sender)

IRs:
REF_19(address) -> _tkn.sender
TMP_27(uint256) = INTERNAL_CALL, Zlots._finishSpin(address)(REF_19)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
spin.blockn = uint56(block.number)

IRs:
REF_20(uint56) -> spin.blockn
TMP_28 = CONVERT block.number to uint56
REF_20(uint56) (->spin) := TMP_28(uint56)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
spin.tokenValue = uint200(_wagered)

IRs:
REF_21(uint200) -> spin.tokenValue
TMP_29 = CONVERT _wagered to uint200
REF_21(uint200) (->spin) := TMP_29(uint200)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
playerSpins[_tkn.sender] = spin

IRs:
REF_22(address) -> _tkn.sender
REF_23(Zlots.playerSpin) -> playerSpins[REF_22]
REF_23(Zlots.playerSpin) (->playerSpins) := spin(Zlots.playerSpin)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
totalSpins += 1

IRs:
totalSpins(uint256) = totalSpins + 1"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
totalZTHWagered += _wagered

IRs:
totalZTHWagered(uint256) = totalZTHWagered + _wagered"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
TokensWagered(_customerAddress,_wagered)

IRs:
Emit TokensWagered(_customerAddress,_wagered)"];
}
// Function: 1546.sol-Zlots-_zthToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_tokenContract == ZTHTKNADDR

IRs:
TMP_136(bool) = _tokenContract == ZTHTKNADDR
RETURN TMP_136"];
}
// Function: 1546.sol-Zlots-addNewBetAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
validTokenBet[_tokenAmount] = true

IRs:
REF_108(bool) -> validTokenBet[_tokenAmount]
REF_108(bool) (->validTokenBet) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1546.sol-Zlots-balanceOf()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
contractBalance

IRs:
RETURN contractBalance"];
}
// Function: 1546.sol-Zlots-changeBankroll(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankroll = _newBankroll

IRs:
bankroll(address) := _newBankroll(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1546.sol-Zlots-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1546.sol-Zlots-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZTHTKNADDR = ZethrAddress

IRs:
ZTHTKNADDR(address) := ZethrAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ZTHBANKROLL = BankrollAddress

IRs:
ZTHBANKROLL(address) := BankrollAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bankroll = ZTHBANKROLL

IRs:
bankroll(address) := ZTHBANKROLL(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ZTHTKN = ZTHInterface(ZTHTKNADDR)

IRs:
TMP_0 = CONVERT ZTHTKNADDR to ZTHInterface
ZTHTKN(ZTHInterface) := TMP_0(ZTHInterface)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ZTHTKN.approve(ZTHBANKROLL,2 ** 256 - 1)

IRs:
TMP_1(uint256) = 2 ** 256
TMP_2(uint256) = TMP_1 - 1
TMP_3(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['ZTHBANKROLL', 'TMP_2']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ZTHTKN.approve(owner,2 ** 256 - 1)

IRs:
TMP_4(uint256) = 2 ** 256
TMP_5(uint256) = TMP_4 - 1
TMP_6(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['owner', 'TMP_5']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
validTokenBet[5e18] = true

IRs:
REF_2(bool) -> validTokenBet[5000000000000000000]
REF_2(bool) (->validTokenBet) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validTokenBet[10e18] = true

IRs:
REF_3(bool) -> validTokenBet[10000000000000000000]
REF_3(bool) (->validTokenBet) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
validTokenBet[25e18] = true

IRs:
REF_4(bool) -> validTokenBet[25000000000000000000]
REF_4(bool) (->validTokenBet) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
validTokenBet[50e18] = true

IRs:
REF_5(bool) -> validTokenBet[50000000000000000000]
REF_5(bool) (->validTokenBet) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
gameActive = true

IRs:
gameActive(bool) := True(bool)"];
}
// Function: 1546.sol-Zlots-divertDividendsToBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankroll.transfer(address(this).balance)

IRs:
TMP_132 = CONVERT this to address
TMP_133(uint256) = SOLIDITY_CALL balance(address)(TMP_132)
Transfer dest:bankroll value:TMP_133"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1546.sol-Zlots-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1546.sol-Zlots-finishSpin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_finishSpin(msg.sender)

IRs:
TMP_31(uint256) = INTERNAL_CALL, Zlots._finishSpin(address)(msg.sender)
RETURN TMP_31"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zlots.gameIsActive()()"];
2->1;
}
// Function: 1546.sol-Zlots-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameActive == true)

IRs:
TMP_145(bool) = gameActive == True
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1546.sol-Zlots-jackpotGuard(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
maxProfit = SafeMath.mul(_wager,500)

IRs:
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_wager', '500'] 
maxProfit(uint256) := TMP_116(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ninetyContractBalance = SafeMath.mul(SafeMath.div(contractBalance,10),9)

IRs:
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['contractBalance', '10'] 
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_117', '9'] 
ninetyContractBalance(uint256) := TMP_118(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(maxProfit <= ninetyContractBalance)

IRs:
TMP_119(bool) = maxProfit <= ninetyContractBalance
RETURN TMP_119"];
}
// Function: 1546.sol-Zlots-maxRandom(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(abi.encodePacked(address(this),blockhash(uint256)(blockn),entropy)))

IRs:
TMP_120 = CONVERT this to address
TMP_121(uint256) = SOLIDITY_CALL blockhash(uint256)(blockn)
TMP_122(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_120,TMP_121,entropy)
TMP_123(bytes32) = SOLIDITY_CALL keccak256()(TMP_122)
TMP_124 = CONVERT TMP_123 to uint256
RETURN TMP_124"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1546.sol-Zlots-onlyBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == bankroll)

IRs:
TMP_139(bool) = msg.sender == bankroll
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1546.sol-Zlots-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_137(bool) = msg.sender == owner
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1546.sol-Zlots-onlyOwnerOrBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == bankroll)

IRs:
TMP_141(bool) = msg.sender == owner
TMP_142(bool) = msg.sender == bankroll
TMP_143(bool) = TMP_141 || TMP_142
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1546.sol-Zlots-pauseGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameActive = false

IRs:
gameActive(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1546.sol-Zlots-random(uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxRandom(blockn,entropy) % upper

IRs:
TMP_125(uint256) = INTERNAL_CALL, Zlots.maxRandom(uint256,address)(blockn,entropy)
TMP_126(uint256) = TMP_125 % upper
RETURN TMP_126"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1546.sol-Zlots-resumeGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameActive = true

IRs:
gameActive(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1546.sol-Zlots-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_from == bankroll

IRs:
TMP_7(bool) = _from == bankroll
CONDITION TMP_7"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractBalance = contractBalance.add(_value)

IRs:
TMP_8(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contractBalance', '_value'] 
contractBalance(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_tkn.sender = _from

IRs:
REF_7(address) -> _tkn.sender
REF_7(address) (->_tkn) := _from(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_tkn.value = _value

IRs:
REF_8(uint256) -> _tkn.value
REF_8(uint256) (->_tkn) := _value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_spinTokens(_tkn)

IRs:
INTERNAL_CALL, Zlots._spinTokens(Zlots.TKN)(_tkn)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
