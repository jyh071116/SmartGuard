digraph G {
// Function: 159.sol-Authority-isValidAuthority(address,uint256)
digraph{
}
// Function: 159.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 159.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 159.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 159.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 159.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 159.sol-SafeMath-sAssert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_8 = UnaryType.BANG assertion 
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_9(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 159.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_3(uint256) = a + b
c(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(c >= a && c >= b)

IRs:
TMP_4(bool) = c >= a
TMP_5(bool) = c >= b
TMP_6(bool) = TMP_4 && TMP_5
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_6)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 159.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b <= a)

IRs:
TMP_0(bool) = b <= a
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_0)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_2(uint256) = a - b
RETURN TMP_2"];
}
// Function: 159.sol-SingleSourceIdentity-SingleSourceIdentity()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
verificationFee = 0

IRs:
verificationFee(uint256) := 0(uint256)"];
}
// Function: 159.sol-SingleSourceIdentity-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
kyc = KYC({verified:true,verifiedBy:msg.sender,verifiedAt:block.number,verifiedAttributes:verifiedAttributes})

IRs:
TMP_68(SingleSourceIdentity.KYC) = new KYC(True,msg.sender,block.number,verifiedAttributes)
kyc(SingleSourceIdentity.KYC) := TMP_68(SingleSourceIdentity.KYC)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
records[userAddress] = kyc

IRs:
REF_22(SingleSourceIdentity.KYC) -> records[userAddress]
REF_22(SingleSourceIdentity.KYC) (->records) := kyc(SingleSourceIdentity.KYC)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyValidAuthority(msg.sender)

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyValidAuthority(address)(msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAuthoritativeAuthority(msg.sender,userAddress)

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyAuthoritativeAuthority(address,address)(msg.sender,userAddress)"];
4->1;
}
// Function: 159.sol-SingleSourceIdentity-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyOwner()()"];
2->1;
}
// Function: 159.sol-SingleSourceIdentity-chargeVerificationFee(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! ERC20(paymentContractAddress).transferFrom(userAddress,this,verificationFee)

IRs:
TMP_22 = CONVERT paymentContractAddress to ERC20
TMP_23(bool) = HIGH_LEVEL_CALL, dest:TMP_22(ERC20), function:transferFrom, arguments:['userAddress', 'this', 'verificationFee']  
TMP_24 = UnaryType.BANG TMP_23 
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentBalance = verificationFeeBalances[authorityAddress]

IRs:
REF_2(uint256) -> verificationFeeBalances[authorityAddress]
currentBalance(uint256) := REF_2(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
verificationFeeBalances[authorityAddress] = safeAdd(currentBalance,verificationFee)

IRs:
REF_3(uint256) -> verificationFeeBalances[authorityAddress]
TMP_25(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(currentBalance,verificationFee)
REF_3(uint256) (->verificationFeeBalances) := TMP_25(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 159.sol-SingleSourceIdentity-claim(address,uint256,uint256,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
verificationFee > 0

IRs:
TMP_53(bool) = verificationFee > 0
CONDITION TMP_53"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! chargeVerificationFee(msg.sender,verifier)

IRs:
TMP_54(bool) = INTERNAL_CALL, SingleSourceIdentity.chargeVerificationFee(address,address)(msg.sender,verifier)
TMP_55 = UnaryType.BANG TMP_54 
CONDITION TMP_55"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_56(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
hash = sha256()(this,msg.sender,verifiedAttributes,expires)

IRs:
TMP_57(bytes32) = SOLIDITY_CALL sha256()(this,msg.sender,verifiedAttributes,expires)
hash(bytes32) := TMP_57(bytes32)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
prefix = Ethereum Signed Message:
32

IRs:
prefix(bytes) := Ethereum Signed Message:
32(string)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
prefixedHash = keccak256()(prefix,hash)

IRs:
TMP_58(bytes32) = SOLIDITY_CALL keccak256()(prefix,hash)
prefixedHash(bytes32) := TMP_58(bytes32)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! ((ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s) == verifier) && block.number <= expires)

IRs:
TMP_59(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)
TMP_60(bool) = TMP_59 == verifier
TMP_61(bool) = block.number <= expires
TMP_62(bool) = TMP_60 && TMP_61
TMP_63 = UnaryType.BANG TMP_62 
CONDITION TMP_63"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert()()

IRs:
TMP_64(None) = SOLIDITY_CALL revert()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
kyc = KYC({verified:true,verifiedBy:verifier,verifiedAt:block.number,verifiedAttributes:verifiedAttributes})

IRs:
TMP_65(SingleSourceIdentity.KYC) = new KYC(True,verifier,block.number,verifiedAttributes)
kyc(SingleSourceIdentity.KYC) := TMP_65(SingleSourceIdentity.KYC)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
records[msg.sender] = kyc

IRs:
REF_21(SingleSourceIdentity.KYC) -> records[msg.sender]
REF_21(SingleSourceIdentity.KYC) (->records) := kyc(SingleSourceIdentity.KYC)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyValidAuthority(verifier)

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyValidAuthority(address)(verifier)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyAuthoritativeAuthority(verifier,msg.sender)

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyAuthoritativeAuthority(address,address)(verifier,msg.sender)"];
15->1;
}
// Function: 159.sol-SingleSourceIdentity-hasValidProfile(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
kyc = records[userAddress]

IRs:
REF_7(SingleSourceIdentity.KYC) -> records[userAddress]
kyc(SingleSourceIdentity.KYC) := REF_7(SingleSourceIdentity.KYC)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
kyc.verified

IRs:
REF_8(bool) -> kyc.verified
CONDITION REF_8"];
2->3[label="True"];
2->8[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
authority = Authority(authorityContractAddress)

IRs:
TMP_39 = CONVERT authorityContractAddress to Authority
authority(Authority) := TMP_39(Authority)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! authority.isValidAuthority(kyc.verifiedBy,kyc.verifiedAt)

IRs:
REF_10(address) -> kyc.verifiedBy
REF_11(uint256) -> kyc.verifiedAt
TMP_40(bool) = HIGH_LEVEL_CALL, dest:authority(Authority), function:isValidAuthority, arguments:['REF_10', 'REF_11']  
TMP_41 = UnaryType.BANG TMP_40 
CONDITION TMP_41"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 159.sol-SingleSourceIdentity-hasVerifiedAttributeIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! this.hasValidProfile(userAddress)

IRs:
TMP_42(bool) = HIGH_LEVEL_CALL, dest:this(address), function:hasValidProfile, arguments:['userAddress']  
TMP_43 = UnaryType.BANG TMP_42 
CONDITION TMP_43"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
kyc = records[userAddress]

IRs:
REF_13(SingleSourceIdentity.KYC) -> records[userAddress]
kyc(SingleSourceIdentity.KYC) := REF_13(SingleSourceIdentity.KYC)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
attributeValue = 2 ** attributeIndex

IRs:
TMP_44(uint256) = 2 ** attributeIndex
attributeValue(uint256) := TMP_44(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((kyc.verifiedAttributes & attributeValue) == attributeValue)

IRs:
REF_14(uint256) -> kyc.verifiedAttributes
TMP_45(uint256) = REF_14 & attributeValue
TMP_46(bool) = TMP_45 == attributeValue
RETURN TMP_46"];
}
// Function: 159.sol-SingleSourceIdentity-hasVerifiedAttributeValue(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! this.hasValidProfile(userAddress)

IRs:
TMP_47(bool) = HIGH_LEVEL_CALL, dest:this(address), function:hasValidProfile, arguments:['userAddress']  
TMP_48 = UnaryType.BANG TMP_47 
CONDITION TMP_48"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
kyc = records[userAddress]

IRs:
REF_16(SingleSourceIdentity.KYC) -> records[userAddress]
kyc(SingleSourceIdentity.KYC) := REF_16(SingleSourceIdentity.KYC)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
((kyc.verifiedAttributes & attributeValue) == attributeValue)

IRs:
REF_17(uint256) -> kyc.verifiedAttributes
TMP_49(uint256) = REF_17 & attributeValue
TMP_50(bool) = TMP_49 == attributeValue
RETURN TMP_50"];
}
// Function: 159.sol-SingleSourceIdentity-isValidAuthority(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
authority = Authority(authorityContractAddress)

IRs:
TMP_20 = CONVERT authorityContractAddress to Authority
authority(Authority) := TMP_20(Authority)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
authority.isValidAuthority(authorityAddress,block.number)

IRs:
TMP_21(bool) = HIGH_LEVEL_CALL, dest:authority(Authority), function:isValidAuthority, arguments:['authorityAddress', 'block.number']  
RETURN TMP_21"];
}
// Function: 159.sol-SingleSourceIdentity-onlyAuthoritativeAuthority(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
kycRecord = records[userAddress]

IRs:
REF_24(SingleSourceIdentity.KYC) -> records[userAddress]
kycRecord(SingleSourceIdentity.KYC) := REF_24(SingleSourceIdentity.KYC)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
kycRecord.verifiedBy != 0x0 && kycRecord.verifiedBy != authorityAddress

IRs:
REF_25(address) -> kycRecord.verifiedBy
TMP_79(bool) = REF_25 != 0
REF_26(address) -> kycRecord.verifiedBy
TMP_80(bool) = REF_26 != authorityAddress
TMP_81(bool) = TMP_79 && TMP_80
CONDITION TMP_81"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
isValidAuthority(kycRecord.verifiedBy)

IRs:
REF_27(address) -> kycRecord.verifiedBy
TMP_82(bool) = INTERNAL_CALL, SingleSourceIdentity.isValidAuthority(address)(REF_27)
CONDITION TMP_82"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_83(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 159.sol-SingleSourceIdentity-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_74(bool) = msg.sender != owner
CONDITION TMP_74"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_75(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 159.sol-SingleSourceIdentity-onlyValidAuthority(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isValidAuthority(authorityAddress)

IRs:
TMP_76(bool) = INTERNAL_CALL, SingleSourceIdentity.isValidAuthority(address)(authorityAddress)
TMP_77 = UnaryType.BANG TMP_76 
CONDITION TMP_77"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_78(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 159.sol-SingleSourceIdentity-revoke(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
kyc = KYC({verified:false,verifiedBy:msg.sender,verifiedAt:block.number,verifiedAttributes:0})

IRs:
TMP_71(SingleSourceIdentity.KYC) = new KYC(False,msg.sender,block.number,0)
kyc(SingleSourceIdentity.KYC) := TMP_71(SingleSourceIdentity.KYC)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
records[userAddress] = kyc

IRs:
REF_23(SingleSourceIdentity.KYC) -> records[userAddress]
REF_23(SingleSourceIdentity.KYC) (->records) := kyc(SingleSourceIdentity.KYC)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyValidAuthority(msg.sender)

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyValidAuthority(address)(msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAuthoritativeAuthority(msg.sender,userAddress)

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyAuthoritativeAuthority(address,address)(msg.sender,userAddress)"];
4->1;
}
// Function: 159.sol-SingleSourceIdentity-sAssert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_18 = UnaryType.BANG assertion 
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_19(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 159.sol-SingleSourceIdentity-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_13(uint256) = a + b
c(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(c >= a && c >= b)

IRs:
TMP_14(bool) = c >= a
TMP_15(bool) = c >= b
TMP_16(bool) = TMP_14 && TMP_15
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_16)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 159.sol-SingleSourceIdentity-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b <= a)

IRs:
TMP_10(bool) = b <= a
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_10)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_12(uint256) = a - b
RETURN TMP_12"];
}
// Function: 159.sol-SingleSourceIdentity-setAuthorityContractAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authorityContractAddress = contractAddress

IRs:
authorityContractAddress(address) := contractAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyOwner()()"];
2->1;
}
// Function: 159.sol-SingleSourceIdentity-setFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
verificationFee = fee

IRs:
verificationFee(uint256) := fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyOwner()()"];
2->1;
}
// Function: 159.sol-SingleSourceIdentity-setPaymentContractAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paymentContractAddress = contractAddress

IRs:
paymentContractAddress(address) := contractAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyOwner()()"];
2->1;
}
// Function: 159.sol-SingleSourceIdentity-verifiedAttributes(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! this.hasValidProfile(userAddress)

IRs:
TMP_51(bool) = HIGH_LEVEL_CALL, dest:this(address), function:hasValidProfile, arguments:['userAddress']  
TMP_52 = UnaryType.BANG TMP_51 
CONDITION TMP_52"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
kyc = records[userAddress]

IRs:
REF_19(SingleSourceIdentity.KYC) -> records[userAddress]
kyc(SingleSourceIdentity.KYC) := REF_19(SingleSourceIdentity.KYC)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
kyc.verifiedAttributes

IRs:
REF_20(uint256) -> kyc.verifiedAttributes
RETURN REF_20"];
}
// Function: 159.sol-SingleSourceIdentity-withdrawFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paymentContractAddress != 0x0)

IRs:
TMP_30(bool) = paymentContractAddress != 0
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balance = verificationFeeBalances[msg.sender]

IRs:
REF_4(uint256) -> verificationFeeBalances[msg.sender]
balance(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balance > 0)

IRs:
TMP_32(bool) = balance > 0
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
verificationFeeBalances[msg.sender] = 0

IRs:
REF_5(uint256) -> verificationFeeBalances[msg.sender]
REF_5(uint256) (->verificationFeeBalances) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! ERC20(paymentContractAddress).transfer(msg.sender,balance)

IRs:
TMP_34 = CONVERT paymentContractAddress to ERC20
TMP_35(bool) = HIGH_LEVEL_CALL, dest:TMP_34(ERC20), function:transfer, arguments:['msg.sender', 'balance']  
TMP_36 = UnaryType.BANG TMP_35 
CONDITION TMP_36"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_37(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyValidAuthority(msg.sender)

IRs:
MODIFIER_CALL, SingleSourceIdentity.onlyValidAuthority(address)(msg.sender)"];
8->1;
}
}
