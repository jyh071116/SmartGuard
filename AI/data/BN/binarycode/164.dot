digraph G {
// Function: 164.sol-BREBuy-changeConfig(uint32,uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
curConfig.hasChange = true

IRs:
REF_7(bool) -> curConfig.hasChange
REF_7(bool) (->curConfig) := True(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
setConfig.totalSize != _totalSize

IRs:
REF_8(uint32) -> setConfig.totalSize
TMP_24(bool) = REF_8 != _totalSize
CONDITION TMP_24"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setConfig.totalSize = _totalSize

IRs:
REF_9(uint32) -> setConfig.totalSize
REF_9(uint32) (->setConfig) := _totalSize(uint32)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
setConfig.pumpRate != _pumpRate

IRs:
REF_10(uint8) -> setConfig.pumpRate
TMP_25(bool) = REF_10 != _pumpRate
CONDITION TMP_25"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setConfig.pumpRate = _pumpRate

IRs:
REF_11(uint8) -> setConfig.pumpRate
REF_11(uint8) (->setConfig) := _pumpRate(uint8)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
setConfig.singlePrice != _singlePrice * 1000000000000000

IRs:
REF_12(uint256) -> setConfig.singlePrice
TMP_26(uint256) = _singlePrice * 1000000000000000
TMP_27(bool) = REF_12 != TMP_26
CONDITION TMP_27"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
setConfig.singlePrice = _singlePrice * 1000000000000000

IRs:
REF_13(uint256) -> setConfig.singlePrice
TMP_28(uint256) = _singlePrice * 1000000000000000
REF_13(uint256) (->setConfig) := TMP_28(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BREBuy.onlyOwner()()"];
11->1;
}
// Function: 164.sol-BREBuy-constructor(uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setConfig = ContractParam(_totalSize,_singlePrice * 1000000000000000,5,false)

IRs:
TMP_0(uint256) = _singlePrice * 1000000000000000
TMP_1(BREBuy.ContractParam) = new ContractParam(_totalSize,TMP_0,5,False)
setConfig(BREBuy.ContractParam) := TMP_1(BREBuy.ContractParam)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
curConfig = ContractParam(_totalSize,_singlePrice * 1000000000000000,5,false)

IRs:
TMP_2(uint256) = _singlePrice * 1000000000000000
TMP_3(BREBuy.ContractParam) = new ContractParam(_totalSize,TMP_2,5,False)
curConfig(BREBuy.ContractParam) := TMP_3(BREBuy.ContractParam)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startNewGame()

IRs:
INTERNAL_CALL, BREBuy.startNewGame()()"];
}
// Function: 164.sol-BREBuy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isNotContract(msg.sender),Contract not call addPlayer)

IRs:
TMP_53(bool) = INTERNAL_CALL, BREBuy.isNotContract(address)(msg.sender)
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,Contract not call addPlayer)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(msg.value == curConfig.singlePrice,msg.value error)

IRs:
REF_44(uint256) -> curConfig.singlePrice
TMP_55(bool) = msg.value == REF_44
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,msg.value error)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalPrice = totalPrice + msg.value

IRs:
TMP_57(uint256) = totalPrice + msg.value
totalPrice(uint256) := TMP_57(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
addressArray.push(msg.sender)

IRs:
REF_46 -> LENGTH addressArray
TMP_59(uint256) := REF_46(uint256)
TMP_60(uint256) = TMP_59 + 1
REF_46(uint256) (->addressArray) := TMP_60(uint256)
REF_47(address) -> addressArray[TMP_59]
REF_47(address) (->addressArray) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addPlayerEvent(gameIndex,msg.sender)

IRs:
Emit addPlayerEvent(gameIndex,msg.sender)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
addressArray.length >= curConfig.totalSize

IRs:
REF_48 -> LENGTH addressArray
REF_49(uint32) -> curConfig.totalSize
TMP_62(bool) = REF_48 >= REF_49
CONDITION TMP_62"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameResult()

IRs:
INTERNAL_CALL, BREBuy.gameResult()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
startNewGame()

IRs:
INTERNAL_CALL, BREBuy.startNewGame()()"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
notLock()

IRs:
MODIFIER_CALL, BREBuy.notLock()()"];
10->1;
}
// Function: 164.sol-BREBuy-gameResult()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
index = getRamdon()

IRs:
TMP_34(uint256) = INTERNAL_CALL, BREBuy.getRamdon()()
index(uint256) := TMP_34(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lastAddress = addressArray[index]

IRs:
REF_32(address) -> addressArray[index]
lastAddress(address) := REF_32(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
totalBalace = address(this).balance

IRs:
TMP_35 = CONVERT this to address
TMP_36(uint256) = SOLIDITY_CALL balance(address)(TMP_35)
totalBalace(uint256) := TMP_36(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
giveToOwn = totalBalace * curConfig.pumpRate / 100

IRs:
REF_33(uint8) -> curConfig.pumpRate
TMP_37(uint256) = totalBalace * REF_33
TMP_38(uint256) = TMP_37 / 100
giveToOwn(uint256) := TMP_38(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
giveToActor = totalBalace - giveToOwn

IRs:
TMP_39(uint256) = totalBalace - giveToOwn
giveToActor(uint256) := TMP_39(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owner.transfer(giveToOwn)

IRs:
Transfer dest:owner value:giveToOwn"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
lastAddress.transfer(giveToActor)

IRs:
Transfer dest:lastAddress value:giveToActor"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
gameOverEvent(gameIndex,curConfig.totalSize,curConfig.singlePrice,curConfig.pumpRate,lastAddress,now)

IRs:
REF_36(uint32) -> curConfig.totalSize
REF_37(uint256) -> curConfig.singlePrice
REF_38(uint8) -> curConfig.pumpRate
Emit gameOverEvent(gameIndex,REF_36,REF_37,REF_38,lastAddress,now)"];
}
// Function: 164.sol-BREBuy-getGameInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(gameIndex,curConfig.totalSize,curConfig.singlePrice,curConfig.pumpRate,addressArray,totalPrice,isLock)

IRs:
REF_29(uint32) -> curConfig.totalSize
REF_30(uint256) -> curConfig.singlePrice
REF_31(uint8) -> curConfig.pumpRate
RETURN gameIndex,REF_29,REF_30,REF_31,addressArray,totalPrice,isLock"];
}
// Function: 164.sol-BREBuy-getRamdon()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ramdon = keccak256()(abi.encodePacked(ramdon,now,blockhash(uint256)(block.number - 1)))

IRs:
TMP_43(uint256) = block.number - 1
TMP_44(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_43)
TMP_45(bytes) = SOLIDITY_CALL abi.encodePacked()(ramdon,now,TMP_44)
TMP_46(bytes32) = SOLIDITY_CALL keccak256()(TMP_45)
ramdon(bytes32) := TMP_46(bytes32)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < addressArray.length

IRs:
REF_40 -> LENGTH addressArray
TMP_47(bool) = i < REF_40
CONDITION TMP_47"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ramdon = keccak256()(abi.encodePacked(ramdon,now,addressArray[i]))

IRs:
REF_42(address) -> addressArray[i]
TMP_48(bytes) = SOLIDITY_CALL abi.encodePacked()(ramdon,now,REF_42)
TMP_49(bytes32) = SOLIDITY_CALL keccak256()(TMP_48)
ramdon(bytes32) := TMP_49(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_50(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
index = uint256(ramdon) % addressArray.length

IRs:
TMP_51 = CONVERT ramdon to uint256
REF_43 -> LENGTH addressArray
TMP_52(uint256) = TMP_51 % REF_43
index(uint256) := TMP_52(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
index

IRs:
RETURN index"];
}
// Function: 164.sol-BREBuy-isNotContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size <= 0

IRs:
TMP_5(bool) = size <= 0
RETURN TMP_5"];
}
// Function: 164.sol-BREBuy-notLock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isLock == false,contract current is lock status)

IRs:
TMP_70(bool) = isLock == False
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,contract current is lock status)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 164.sol-BREBuy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,only owner can call this function)

IRs:
TMP_68(bool) = msg.sender == owner
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,only owner can call this function)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 164.sol-BREBuy-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = 0x0

IRs:
owner(address) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
gameIndex = 0

IRs:
gameIndex(uint32) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalPrice = 0

IRs:
totalPrice(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
isLock = false

IRs:
isLock(bool) := False(bool)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
addressArray = new address[](0)

IRs:
TMP_67(address[])  = new address[](0)
addressArray(address[]) = ['TMP_67(address[])']"];
}
// Function: 164.sol-BREBuy-startNewGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameIndex ++

IRs:
TMP_30(uint32) := gameIndex(uint32)
gameIndex(uint32) = gameIndex + 1"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
curConfig.hasChange

IRs:
REF_14(bool) -> curConfig.hasChange
CONDITION REF_14"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
curConfig.totalSize != setConfig.totalSize

IRs:
REF_15(uint32) -> curConfig.totalSize
REF_16(uint32) -> setConfig.totalSize
TMP_31(bool) = REF_15 != REF_16
CONDITION TMP_31"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
curConfig.totalSize = setConfig.totalSize

IRs:
REF_17(uint32) -> curConfig.totalSize
REF_18(uint32) -> setConfig.totalSize
REF_17(uint32) (->curConfig) := REF_18(uint32)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
curConfig.singlePrice != setConfig.singlePrice

IRs:
REF_19(uint256) -> curConfig.singlePrice
REF_20(uint256) -> setConfig.singlePrice
TMP_32(bool) = REF_19 != REF_20
CONDITION TMP_32"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
curConfig.singlePrice = setConfig.singlePrice

IRs:
REF_21(uint256) -> curConfig.singlePrice
REF_22(uint256) -> setConfig.singlePrice
REF_21(uint256) (->curConfig) := REF_22(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
curConfig.pumpRate != setConfig.pumpRate

IRs:
REF_23(uint8) -> curConfig.pumpRate
REF_24(uint8) -> setConfig.pumpRate
TMP_33(bool) = REF_23 != REF_24
CONDITION TMP_33"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
curConfig.pumpRate = setConfig.pumpRate

IRs:
REF_25(uint8) -> curConfig.pumpRate
REF_26(uint8) -> setConfig.pumpRate
REF_25(uint8) (->curConfig) := REF_26(uint8)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
curConfig.hasChange = false

IRs:
REF_27(bool) -> curConfig.hasChange
REF_27(bool) (->curConfig) := False(bool)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
addressArray.length = 0

IRs:
REF_28 -> LENGTH addressArray
REF_28(uint256) (->addressArray) := 0(uint256)"];
}
// Function: 164.sol-BREBuy-stopGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: IF 1

EXPRESSION:
addressArray.length <= 0

IRs:
REF_0 -> LENGTH addressArray
TMP_12(bool) = REF_0 <= 0
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
totalBalace = address(this).balance

IRs:
TMP_13 = CONVERT this to address
TMP_14(uint256) = SOLIDITY_CALL balance(address)(TMP_13)
totalBalace(uint256) := TMP_14(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
price = totalBalace / addressArray.length

IRs:
REF_1 -> LENGTH addressArray
TMP_15(uint256) = totalBalace / REF_1
price(uint256) := TMP_15(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < addressArray.length

IRs:
REF_2 -> LENGTH addressArray
TMP_16(bool) = i < REF_2
CONDITION TMP_16"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
curPlayer = addressArray[i]

IRs:
REF_3(address) -> addressArray[i]
curPlayer(address) := REF_3(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
curPlayer.transfer(price)

IRs:
Transfer dest:curPlayer value:price"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_18(uint256) := i(uint256)
i(uint256) = i + 1"];
12->9;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
stopGameEvent(totalBalace,addressArray.length,price)

IRs:
REF_5 -> LENGTH addressArray
Emit stopGameEvent(totalBalace,REF_5,price)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
addressArray.length = 0

IRs:
REF_6 -> LENGTH addressArray
REF_6(uint256) (->addressArray) := 0(uint256)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BREBuy.onlyOwner()()"];
15->1;
}
// Function: 164.sol-BREBuy-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = newOwner != TMP_21
CONDITION TMP_22"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BREBuy.onlyOwner()()"];
4->1;
}
// Function: 164.sol-BREBuy-updateLock(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isLock != b, updateLock new status == old status)

IRs:
TMP_6(bool) = isLock != b
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6, updateLock new status == old status)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isLock = b

IRs:
isLock(bool) := b(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isLock

IRs:
CONDITION isLock"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stopGame()

IRs:
INTERNAL_CALL, BREBuy.stopGame()()"];
4->7;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
startNewGame()

IRs:
INTERNAL_CALL, BREBuy.startNewGame()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
openLockEvent()

IRs:
Emit openLockEvent()"];
6->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BREBuy.onlyOwner()()"];
8->1;
}
}
