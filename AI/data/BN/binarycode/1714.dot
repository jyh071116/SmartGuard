digraph G {
// Function: 1714.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_127(uint256) = a + b
c(uint256) := TMP_127(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_128(bool) = c >= a
TMP_129(None) = SOLIDITY_CALL assert(bool)(TMP_128)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1714.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_123(uint256) = a / b
c(uint256) := TMP_123(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1714.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_118(bool) = a == 0
CONDITION TMP_118"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_119(uint256) = a * b
c(uint256) := TMP_119(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_120(uint256) = c / a
TMP_121(bool) = TMP_120 == b
TMP_122(None) = SOLIDITY_CALL assert(bool)(TMP_121)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1714.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_124(bool) = b <= a
TMP_125(None) = SOLIDITY_CALL assert(bool)(TMP_124)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_126(uint256) = a - b
RETURN TMP_126"];
}
// Function: 1714.sol-ZTHInterface-approve(address,uint256)
digraph{
}
// Function: 1714.sol-ZTHInterface-getFrontEndTokenBalanceOf(address)
digraph{
}
// Function: 1714.sol-ZTHInterface-transfer(address,uint256)
digraph{
}
// Function: 1714.sol-ZTHReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1714.sol-Zethroll-_finishBet(bool,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
roll = playerRolls[target]

IRs:
REF_20(Zethroll.playerRoll) -> playerRolls[target]
roll(Zethroll.playerRoll) := REF_20(Zethroll.playerRoll)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(roll.tokenValue > 0)

IRs:
REF_21(uint200) -> roll.tokenValue
TMP_41(bool) = REF_21 > 0
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(roll.blockn != block.number)

IRs:
REF_22(uint48) -> roll.blockn
TMP_43(bool) = REF_22 != block.number
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
block.number - roll.blockn > 255

IRs:
REF_23(uint48) -> roll.blockn
TMP_45(uint256) = block.number - REF_23
TMP_46(bool) = TMP_45 > 255
CONDITION TMP_46"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
result = 1000

IRs:
result(uint256) := 1000(uint256)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
result = random(99,roll.blockn,target) + 1

IRs:
REF_24(uint48) -> roll.blockn
TMP_47(uint256) = INTERNAL_CALL, Zethroll.random(uint256,uint256,address)(99,REF_24,target)
TMP_48(uint256) = TMP_47 + 1
result(uint256) := TMP_48(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
rollUnder = roll.rollUnder

IRs:
REF_25(uint8) -> roll.rollUnder
rollUnder(uint256) := REF_25(uint8)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
result < rollUnder

IRs:
TMP_49(bool) = result < rollUnder
CONDITION TMP_49"];
10->11[label="True"];
10->21[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
profit = calculateProfit(roll.tokenValue,rollUnder)

IRs:
REF_26(uint200) -> roll.tokenValue
TMP_50(uint256) = INTERNAL_CALL, Zethroll.calculateProfit(uint256,uint256)(REF_26,rollUnder)
profit(uint256) := TMP_50(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
profit > maxProfit

IRs:
TMP_51(bool) = profit > maxProfit
CONDITION TMP_51"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
profit = maxProfit

IRs:
profit(uint256) := maxProfit(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
contractBalance = contractBalance.sub(profit)

IRs:
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['contractBalance', 'profit'] 
contractBalance(uint256) := TMP_52(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
LogResult(target,result,rollUnder,profit,roll.tokenValue,true)

IRs:
REF_28(uint200) -> roll.tokenValue
Emit LogResult(target,result,rollUnder,profit,REF_28,True)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit()()"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
playerRolls[target] = playerRoll(uint200(0),uint48(0),uint8(0))

IRs:
REF_29(Zethroll.playerRoll) -> playerRolls[target]
TMP_55 = CONVERT 0 to uint200
TMP_56 = CONVERT 0 to uint48
TMP_57 = CONVERT 0 to uint8
TMP_58(Zethroll.playerRoll) = new playerRoll(TMP_55,TMP_56,TMP_57)
REF_29(Zethroll.playerRoll) (->playerRolls) := TMP_58(Zethroll.playerRoll)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ZTHTKN.transfer(target,profit + roll.tokenValue)

IRs:
REF_31(uint200) -> roll.tokenValue
TMP_59(uint256) = profit + REF_31
TMP_60(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['target', 'TMP_59']  "];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
result

IRs:
RETURN result"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
LogResult(target,result,rollUnder,profit,roll.tokenValue,false)

IRs:
REF_32(uint200) -> roll.tokenValue
Emit LogResult(target,result,rollUnder,profit,REF_32,False)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
contractBalance = contractBalance.add(roll.tokenValue)

IRs:
REF_34(uint200) -> roll.tokenValue
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contractBalance', 'REF_34'] 
contractBalance(uint256) := TMP_62(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
playerRolls[target] = playerRoll(uint200(0),uint48(0),uint8(0))

IRs:
REF_35(Zethroll.playerRoll) -> playerRolls[target]
TMP_63 = CONVERT 0 to uint200
TMP_64 = CONVERT 0 to uint48
TMP_65 = CONVERT 0 to uint8
TMP_66(Zethroll.playerRoll) = new playerRoll(TMP_63,TMP_64,TMP_65)
REF_35(Zethroll.playerRoll) (->playerRolls) := TMP_66(Zethroll.playerRoll)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit()()"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 1714.sol-Zethroll-_playerRollDice(uint256,Zethroll.TKN)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tkn.value < ((2 ** 200) - 1))

IRs:
REF_4(uint256) -> _tkn.value
TMP_19(uint256) = 2 ** 200
TMP_20(uint256) = TMP_19 - 1
TMP_21(bool) = REF_4 < TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.number < ((2 ** 48) - 1))

IRs:
TMP_23(uint256) = 2 ** 48
TMP_24(uint256) = TMP_23 - 1
TMP_25(bool) = block.number < TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_zthToken(msg.sender))

IRs:
TMP_27(bool) = INTERNAL_CALL, Zethroll._zthToken(address)(msg.sender)
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
roll = playerRolls[_tkn.sender]

IRs:
REF_5(address) -> _tkn.sender
REF_6(Zethroll.playerRoll) -> playerRolls[REF_5]
roll(Zethroll.playerRoll) := REF_6(Zethroll.playerRoll)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(block.number != roll.blockn)

IRs:
REF_7(uint48) -> roll.blockn
TMP_29(bool) = block.number != REF_7
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
roll.blockn != 0

IRs:
REF_8(uint48) -> roll.blockn
TMP_31(bool) = REF_8 != 0
CONDITION TMP_31"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_finishBet(false,_tkn.sender)

IRs:
REF_9(address) -> _tkn.sender
TMP_32(uint256) = INTERNAL_CALL, Zethroll._finishBet(bool,address)(False,REF_9)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
roll.blockn = uint48(block.number)

IRs:
REF_10(uint48) -> roll.blockn
TMP_33 = CONVERT block.number to uint48
REF_10(uint48) (->roll) := TMP_33(uint48)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
roll.tokenValue = uint200(_tkn.value)

IRs:
REF_11(uint200) -> roll.tokenValue
REF_12(uint256) -> _tkn.value
TMP_34 = CONVERT REF_12 to uint200
REF_11(uint200) (->roll) := TMP_34(uint200)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
roll.rollUnder = uint8(_rollUnder)

IRs:
REF_13(uint8) -> roll.rollUnder
TMP_35 = CONVERT _rollUnder to uint8
REF_13(uint8) (->roll) := TMP_35(uint8)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
playerRolls[_tkn.sender] = roll

IRs:
REF_14(address) -> _tkn.sender
REF_15(Zethroll.playerRoll) -> playerRolls[REF_14]
REF_15(Zethroll.playerRoll) (->playerRolls) := roll(Zethroll.playerRoll)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LogBet(_tkn.sender,_tkn.value,_rollUnder)

IRs:
REF_16(address) -> _tkn.sender
REF_17(uint256) -> _tkn.value
Emit LogBet(REF_16,REF_17,_rollUnder)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
totalBets += 1

IRs:
totalBets(uint256) = totalBets + 1"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
totalZTHWagered += _tkn.value

IRs:
REF_18(uint256) -> _tkn.value
totalZTHWagered(uint256) = totalZTHWagered + REF_18"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zethroll.gameIsActive()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
betIsValid(_tkn.value,_rollUnder)

IRs:
REF_19(uint256) -> _tkn.value
MODIFIER_CALL, Zethroll.betIsValid(uint256,uint256)(REF_19,_rollUnder)"];
17->1;
}
// Function: 1714.sol-Zethroll-_zthToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_tokenContract == ZTHTKNADDR

IRs:
TMP_102(bool) = _tokenContract == ZTHTKNADDR
RETURN TMP_102"];
}
// Function: 1714.sol-Zethroll-betIsValid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(calculateProfit(_betSize,_playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber)

IRs:
TMP_105(uint256) = INTERNAL_CALL, Zethroll.calculateProfit(uint256,uint256)(_betSize,_playerNumber)
TMP_106(bool) = TMP_105 < maxProfit
TMP_107(bool) = _betSize >= minBet
TMP_108(bool) = TMP_106 && TMP_107
TMP_109(bool) = _playerNumber > minNumber
TMP_110(bool) = TMP_108 && TMP_109
TMP_111(bool) = _playerNumber < maxNumber
TMP_112(bool) = TMP_110 && TMP_111
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1714.sol-Zethroll-calculateProfit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((_initBet * (100 - (_roll.sub(1)))) / (_roll.sub(1)) + _initBet)) * houseEdge / houseEdgeDivisor) - _initBet

IRs:
TMP_10(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_roll', '1'] 
TMP_11(uint256) = 100 - TMP_10
TMP_12(uint256) = _initBet * TMP_11
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_roll', '1'] 
TMP_14(uint256) = TMP_12 / TMP_13
TMP_15(uint256) = TMP_14 + _initBet
TMP_16(uint256) = TMP_15 * houseEdge
TMP_17(uint256) = TMP_16 / houseEdgeDivisor
TMP_18(uint256) = TMP_17 - _initBet
RETURN TMP_18"];
}
// Function: 1714.sol-Zethroll-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ZTHTKN = ZTHInterface(zthtknaddr)

IRs:
TMP_0 = CONVERT zthtknaddr to ZTHInterface
ZTHTKN(ZTHInterface) := TMP_0(ZTHInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ZTHTKNADDR = zthtknaddr

IRs:
ZTHTKNADDR(address) := zthtknaddr(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ZethrBankroll = zthbankrolladdr

IRs:
ZethrBankroll(address) := zthbankrolladdr(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
houseEdge = 990

IRs:
houseEdge(uint256) := 990(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownerSetMaxProfitAsPercentOfHouse(10000)

IRs:
INTERNAL_CALL, Zethroll.ownerSetMaxProfitAsPercentOfHouse(uint256)(10000)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownerSetMinBet(1e18)

IRs:
INTERNAL_CALL, Zethroll.ownerSetMinBet(uint256)(1000000000000000000)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ZTHTKN.approve(zthbankrolladdr,MAX_INT)

IRs:
TMP_3(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['zthbankrolladdr', 'MAX_INT']  "];
}
// Function: 1714.sol-Zethroll-dumpdivs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZethrBankroll.transfer(address(this).balance)

IRs:
TMP_99 = CONVERT this to address
TMP_100(uint256) = SOLIDITY_CALL balance(address)(TMP_99)
Transfer dest:ZethrBankroll value:TMP_100"];
}
// Function: 1714.sol-Zethroll-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1714.sol-Zethroll-finishBet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_finishBet(true,msg.sender)

IRs:
TMP_39(uint256) = INTERNAL_CALL, Zethroll._finishBet(bool,address)(True,msg.sender)
RETURN TMP_39"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zethroll.gameIsActive()()"];
2->1;
}
// Function: 1714.sol-Zethroll-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gamePaused == false)

IRs:
TMP_114(bool) = gamePaused == False
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1714.sol-Zethroll-maxRandom(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(abi.encodePacked(blockhash(uint256)(blockn),entropy)))

IRs:
TMP_4(uint256) = SOLIDITY_CALL blockhash(uint256)(blockn)
TMP_5(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_4,entropy)
TMP_6(bytes32) = SOLIDITY_CALL keccak256()(TMP_5)
TMP_7 = CONVERT TMP_6 to uint256
RETURN TMP_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1714.sol-Zethroll-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_116(bool) = msg.sender == owner
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1714.sol-Zethroll-ownerChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1714.sol-Zethroll-ownerPauseGame(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gamePaused = newStatus

IRs:
gamePaused(bool) := newStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1714.sol-Zethroll-ownerSetBankroll(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZTHTKN.approve(ZethrBankroll,0)

IRs:
TMP_92(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['ZethrBankroll', '0']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ZethrBankroll = newBankroll

IRs:
ZethrBankroll(address) := newBankroll(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ZTHTKN.approve(newBankroll,MAX_INT)

IRs:
TMP_93(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['newBankroll', 'MAX_INT']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
4->1;
}
// Function: 1714.sol-Zethroll-ownerSetMaxProfitAsPercentOfHouse(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newMaxProfitAsPercent <= 200000)

IRs:
TMP_80(bool) = newMaxProfitAsPercent <= 200000
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxProfitAsPercentOfHouse = newMaxProfitAsPercent

IRs:
maxProfitAsPercentOfHouse(uint256) := newMaxProfitAsPercent(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
4->1;
}
// Function: 1714.sol-Zethroll-ownerSetMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minBet = newMinimumBet

IRs:
minBet(uint256) := newMinimumBet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1714.sol-Zethroll-ownerTransferZTH(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance = contractBalance.sub(amount)

IRs:
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['contractBalance', 'amount'] 
contractBalance(uint256) := TMP_85(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ZTHTKN.transfer(sendTo,amount))

IRs:
TMP_87(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['sendTo', 'amount']  
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogOwnerTransfer(sendTo,amount)

IRs:
Emit LogOwnerTransfer(sendTo,amount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
5->1;
}
// Function: 1714.sol-Zethroll-ownerUpdateContractBalance(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance = newContractBalance

IRs:
contractBalance(uint256) := newContractBalance(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
2->1;
}
// Function: 1714.sol-Zethroll-ownerkill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZTHTKN.transfer(owner,contractBalance)

IRs:
TMP_96(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['owner', 'contractBalance']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_97(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zethroll.onlyOwner()()"];
3->1;
}
// Function: 1714.sol-Zethroll-random(uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxRandom(blockn,entropy) % upper

IRs:
TMP_8(uint256) = INTERNAL_CALL, Zethroll.maxRandom(uint256,address)(blockn,entropy)
TMP_9(uint256) = TMP_8 % upper
RETURN TMP_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1714.sol-Zethroll-setMaxProfit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
CurrentContractBalance(contractBalance)

IRs:
Emit CurrentContractBalance(contractBalance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxProfit = (contractBalance * maxProfitAsPercentOfHouse) / maxProfitDivisor

IRs:
TMP_77(uint256) = contractBalance * maxProfitAsPercentOfHouse
TMP_78(uint256) = TMP_77 / maxProfitDivisor
maxProfit(uint256) := TMP_78(uint256)"];
}
// Function: 1714.sol-Zethroll-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_INT = 2 ** 256 - 1

IRs:
TMP_103(uint256) = 2 ** 256
TMP_104(uint256) = TMP_103 - 1
MAX_INT(uint256) := TMP_104(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
maxProfitDivisor = 1000000

IRs:
maxProfitDivisor(uint256) := 1000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
maxNumber = 99

IRs:
maxNumber(uint256) := 99(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
minNumber = 2

IRs:
minNumber(uint256) := 2(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
houseEdgeDivisor = 1000

IRs:
houseEdgeDivisor(uint256) := 1000(uint256)"];
}
// Function: 1714.sol-Zethroll-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
minBet = 0

IRs:
minBet(uint256) := 0(uint256)"];
}
// Function: 1714.sol-Zethroll-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ZTHTKNADDR)

IRs:
TMP_68(bool) = msg.sender == ZTHTKNADDR
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_from == ZethrBankroll

IRs:
TMP_70(bool) = _from == ZethrBankroll
CONDITION TMP_70"];
2->3[label="True"];
2->8[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
contractBalance = contractBalance.add(_value)

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contractBalance', '_value'] 
contractBalance(uint256) := TMP_71(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
oldMaxProfit = maxProfit

IRs:
oldMaxProfit(uint256) := maxProfit(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Zethroll.setMaxProfit()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MaxProfitChanged(oldMaxProfit,maxProfit)

IRs:
Emit MaxProfitChanged(oldMaxProfit,maxProfit)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_tkn.sender = _from

IRs:
REF_37(address) -> _tkn.sender
REF_37(address) (->_tkn) := _from(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_tkn.value = _value

IRs:
REF_38(uint256) -> _tkn.value
REF_38(uint256) (->_tkn) := _value(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
chosenNumber = uint8(_data[0])

IRs:
REF_39(None) -> _data[0]
TMP_74 = CONVERT REF_39 to uint8
chosenNumber(uint8) := TMP_74(uint8)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_playerRollDice(chosenNumber,_tkn)

IRs:
INTERNAL_CALL, Zethroll._playerRollDice(uint256,Zethroll.TKN)(chosenNumber,_tkn)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
}
