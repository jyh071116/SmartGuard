digraph G {
// Function: 1761.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_157(uint256) = a + b
c(uint256) := TMP_157(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_158(bool) = c >= a
TMP_159(None) = SOLIDITY_CALL assert(bool)(TMP_158)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1761.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_153(uint256) = a / b
c(uint256) := TMP_153(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1761.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_148(bool) = a == 0
CONDITION TMP_148"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_149(uint256) = a * b
c(uint256) := TMP_149(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_150(uint256) = c / a
TMP_151(bool) = TMP_150 == b
TMP_152(None) = SOLIDITY_CALL assert(bool)(TMP_151)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1761.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_154(bool) = b <= a
TMP_155(None) = SOLIDITY_CALL assert(bool)(TMP_154)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_156(uint256) = a - b
RETURN TMP_156"];
}
// Function: 1761.sol-ZTHInterface-approve(address,uint256)
digraph{
}
// Function: 1761.sol-ZTHInterface-transfer(address,uint256)
digraph{
}
// Function: 1761.sol-ZTHReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1761.sol-Zlots-_finishSpin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spin = playerSpins[target]

IRs:
REF_25(Zlots.playerSpin) -> playerSpins[target]
spin(Zlots.playerSpin) := REF_25(Zlots.playerSpin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(spin.tokenValue > 0)

IRs:
REF_26(uint200) -> spin.tokenValue
TMP_34(bool) = REF_26 > 0
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(spin.blockn != block.number)

IRs:
REF_27(uint48) -> spin.blockn
TMP_36(bool) = REF_27 != block.number
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
profit = 0

IRs:
profit(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
category = 0

IRs:
category(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
block.number - spin.blockn > 255

IRs:
REF_28(uint48) -> spin.blockn
TMP_38(uint256) = block.number - REF_28
TMP_39(bool) = TMP_38 > 255
CONDITION TMP_39"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
result = 9999

IRs:
result(uint256) := 9999(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
result = random(1000000,spin.blockn,target)

IRs:
REF_29(uint48) -> spin.blockn
TMP_40(uint256) = INTERNAL_CALL, Zlots.random(uint256,uint256,address)(1000000,REF_29,target)
result(uint256) := TMP_40(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
result > 476661

IRs:
TMP_41(bool) = result > 476661
CONDITION TMP_41"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Loss(target,spin.blockn)

IRs:
REF_30(uint48) -> spin.blockn
Emit Loss(target,REF_30)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LogResult(target,result,profit,spin.tokenValue,category,false)

IRs:
REF_31(uint200) -> spin.tokenValue
Emit LogResult(target,result,profit,REF_31,category,False)"];
13->110;
14[label="Node Type: IF 14

EXPRESSION:
result < 1

IRs:
TMP_44(bool) = result < 1
CONDITION TMP_44"];
14->15[label="True"];
14->18[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,500)

IRs:
REF_33(uint200) -> spin.tokenValue
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_33', '500'] 
profit(uint256) := TMP_45(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
category = 1

IRs:
category(uint256) := 1(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ThreeMoonJackpot(target,spin.blockn)

IRs:
REF_34(uint48) -> spin.blockn
Emit ThreeMoonJackpot(target,REF_34)"];
17->109;
18[label="Node Type: IF 18

EXPRESSION:
result < 298

IRs:
TMP_47(bool) = result < 298
CONDITION TMP_47"];
18->19[label="True"];
18->22[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,232)

IRs:
REF_36(uint200) -> spin.tokenValue
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_36', '232'] 
profit(uint256) := TMP_48(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
category = 2

IRs:
category(uint256) := 2(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
TwoMoonPrize(target,spin.blockn)

IRs:
REF_37(uint48) -> spin.blockn
Emit TwoMoonPrize(target,REF_37)"];
21->108;
22[label="Node Type: IF 22

EXPRESSION:
result < 3127

IRs:
TMP_50(bool) = result < 3127
CONDITION TMP_50"];
22->23[label="True"];
22->26[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),10)

IRs:
REF_40(uint200) -> spin.tokenValue
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_40', '232'] 
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', '10'] 
profit(uint256) := TMP_52(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
category = 3

IRs:
category(uint256) := 3(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ZTHJackpot(target,spin.blockn)

IRs:
REF_41(uint48) -> spin.blockn
Emit ZTHJackpot(target,REF_41)"];
25->107;
26[label="Node Type: IF 26

EXPRESSION:
result < 5956

IRs:
TMP_54(bool) = result < 5956
CONDITION TMP_54"];
26->27[label="True"];
26->30[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,25)

IRs:
REF_43(uint200) -> spin.tokenValue
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_43', '25'] 
profit(uint256) := TMP_55(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
category = 4

IRs:
category(uint256) := 4(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
ThreeZSymbols(target,spin.blockn)

IRs:
REF_44(uint48) -> spin.blockn
Emit ThreeZSymbols(target,REF_44)"];
29->106;
30[label="Node Type: IF 30

EXPRESSION:
result < 8785

IRs:
TMP_57(bool) = result < 8785
CONDITION TMP_57"];
30->31[label="True"];
30->34[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,25)

IRs:
REF_46(uint200) -> spin.tokenValue
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_46', '25'] 
profit(uint256) := TMP_58(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
category = 5

IRs:
category(uint256) := 5(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
ThreeTSymbols(target,spin.blockn)

IRs:
REF_47(uint48) -> spin.blockn
Emit ThreeTSymbols(target,REF_47)"];
33->105;
34[label="Node Type: IF 34

EXPRESSION:
result < 11614

IRs:
TMP_60(bool) = result < 11614
CONDITION TMP_60"];
34->35[label="True"];
34->38[label="False"];
35[label="Node Type: EXPRESSION 35

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,25)

IRs:
REF_49(uint200) -> spin.tokenValue
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_49', '25'] 
profit(uint256) := TMP_61(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
category = 6

IRs:
category(uint256) := 6(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ThreeHSymbols(target,spin.blockn)

IRs:
REF_50(uint48) -> spin.blockn
Emit ThreeHSymbols(target,REF_50)"];
37->104;
38[label="Node Type: IF 38

EXPRESSION:
result < 14443

IRs:
TMP_63(bool) = result < 14443
CONDITION TMP_63"];
38->39[label="True"];
38->42[label="False"];
39[label="Node Type: EXPRESSION 39

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,50)

IRs:
REF_52(uint200) -> spin.tokenValue
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_52', '50'] 
profit(uint256) := TMP_64(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
category = 7

IRs:
category(uint256) := 7(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ThreeEtherIcons(target,spin.blockn)

IRs:
REF_53(uint48) -> spin.blockn
Emit ThreeEtherIcons(target,REF_53)"];
41->103;
42[label="Node Type: IF 42

EXPRESSION:
result < 17272

IRs:
TMP_66(bool) = result < 17272
CONDITION TMP_66"];
42->43[label="True"];
42->46[label="False"];
43[label="Node Type: EXPRESSION 43

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,40)

IRs:
REF_55(uint200) -> spin.tokenValue
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_55', '40'] 
profit(uint256) := TMP_67(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
category = 8

IRs:
category(uint256) := 8(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
ThreeGreenPyramids(target,spin.blockn)

IRs:
REF_56(uint48) -> spin.blockn
Emit ThreeGreenPyramids(target,REF_56)"];
45->102;
46[label="Node Type: IF 46

EXPRESSION:
result < 20101

IRs:
TMP_69(bool) = result < 20101
CONDITION TMP_69"];
46->47[label="True"];
46->50[label="False"];
47[label="Node Type: EXPRESSION 47

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,20)

IRs:
REF_58(uint200) -> spin.tokenValue
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_58', '20'] 
profit(uint256) := TMP_70(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
category = 9

IRs:
category(uint256) := 9(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
ThreeGoldPyramids(target,spin.blockn)

IRs:
REF_59(uint48) -> spin.blockn
Emit ThreeGoldPyramids(target,REF_59)"];
49->101;
50[label="Node Type: IF 50

EXPRESSION:
result < 22929

IRs:
TMP_72(bool) = result < 22929
CONDITION TMP_72"];
50->51[label="True"];
50->54[label="False"];
51[label="Node Type: EXPRESSION 51

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,20)

IRs:
REF_61(uint200) -> spin.tokenValue
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_61', '20'] 
profit(uint256) := TMP_73(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
category = 10

IRs:
category(uint256) := 10(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
ThreeWhitePyramids(target,spin.blockn)

IRs:
REF_62(uint48) -> spin.blockn
Emit ThreeWhitePyramids(target,REF_62)"];
53->100;
54[label="Node Type: IF 54

EXPRESSION:
result < 52332

IRs:
TMP_75(bool) = result < 52332
CONDITION TMP_75"];
54->55[label="True"];
54->58[label="False"];
55[label="Node Type: EXPRESSION 55

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,125),10)

IRs:
REF_65(uint200) -> spin.tokenValue
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_65', '125'] 
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_76', '10'] 
profit(uint256) := TMP_77(uint256)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
category = 11

IRs:
category(uint256) := 11(uint256)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
OneMoonPrize(target,spin.blockn)

IRs:
REF_66(uint48) -> spin.blockn
Emit OneMoonPrize(target,REF_66)"];
57->99;
58[label="Node Type: IF 58

EXPRESSION:
result < 120225

IRs:
TMP_79(bool) = result < 120225
CONDITION TMP_79"];
58->59[label="True"];
58->62[label="False"];
59[label="Node Type: EXPRESSION 59

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,15),10)

IRs:
REF_69(uint200) -> spin.tokenValue
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_69', '15'] 
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_80', '10'] 
profit(uint256) := TMP_81(uint256)"];
59->60;
60[label="Node Type: EXPRESSION 60

EXPRESSION:
category = 12

IRs:
category(uint256) := 12(uint256)"];
60->61;
61[label="Node Type: EXPRESSION 61

EXPRESSION:
OneOfEachPyramidPrize(target,spin.blockn)

IRs:
REF_70(uint48) -> spin.blockn
Emit OneOfEachPyramidPrize(target,REF_70)"];
61->98;
62[label="Node Type: IF 62

EXPRESSION:
result < 171146

IRs:
TMP_83(bool) = result < 171146
CONDITION TMP_83"];
62->63[label="True"];
62->66[label="False"];
63[label="Node Type: EXPRESSION 63

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),100)

IRs:
REF_73(uint200) -> spin.tokenValue
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_73', '232'] 
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_84', '100'] 
profit(uint256) := TMP_85(uint256)"];
63->64;
64[label="Node Type: EXPRESSION 64

EXPRESSION:
category = 13

IRs:
category(uint256) := 13(uint256)"];
64->65;
65[label="Node Type: EXPRESSION 65

EXPRESSION:
TwoZSymbols(target,spin.blockn)

IRs:
REF_74(uint48) -> spin.blockn
Emit TwoZSymbols(target,REF_74)"];
65->97;
66[label="Node Type: IF 66

EXPRESSION:
result < 222067

IRs:
TMP_87(bool) = result < 222067
CONDITION TMP_87"];
66->67[label="True"];
66->70[label="False"];
67[label="Node Type: EXPRESSION 67

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),100)

IRs:
REF_77(uint200) -> spin.tokenValue
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_77', '232'] 
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_88', '100'] 
profit(uint256) := TMP_89(uint256)"];
67->68;
68[label="Node Type: EXPRESSION 68

EXPRESSION:
category = 14

IRs:
category(uint256) := 14(uint256)"];
68->69;
69[label="Node Type: EXPRESSION 69

EXPRESSION:
TwoTSymbols(target,spin.blockn)

IRs:
REF_78(uint48) -> spin.blockn
Emit TwoTSymbols(target,REF_78)"];
69->96;
70[label="Node Type: IF 70

EXPRESSION:
result < 272988

IRs:
TMP_91(bool) = result < 272988
CONDITION TMP_91"];
70->71[label="True"];
70->74[label="False"];
71[label="Node Type: EXPRESSION 71

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,232),100)

IRs:
REF_81(uint200) -> spin.tokenValue
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_81', '232'] 
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_92', '100'] 
profit(uint256) := TMP_93(uint256)"];
71->72;
72[label="Node Type: EXPRESSION 72

EXPRESSION:
category = 15

IRs:
category(uint256) := 15(uint256)"];
72->73;
73[label="Node Type: EXPRESSION 73

EXPRESSION:
TwoHSymbols(target,spin.blockn)

IRs:
REF_82(uint48) -> spin.blockn
Emit TwoHSymbols(target,REF_82)"];
73->95;
74[label="Node Type: IF 74

EXPRESSION:
result < 323909

IRs:
TMP_95(bool) = result < 323909
CONDITION TMP_95"];
74->75[label="True"];
74->78[label="False"];
75[label="Node Type: EXPRESSION 75

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,375),100)

IRs:
REF_85(uint200) -> spin.tokenValue
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_85', '375'] 
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_96', '100'] 
profit(uint256) := TMP_97(uint256)"];
75->76;
76[label="Node Type: EXPRESSION 76

EXPRESSION:
category = 16

IRs:
category(uint256) := 16(uint256)"];
76->77;
77[label="Node Type: EXPRESSION 77

EXPRESSION:
TwoEtherIcons(target,spin.blockn)

IRs:
REF_86(uint48) -> spin.blockn
Emit TwoEtherIcons(target,REF_86)"];
77->94;
78[label="Node Type: IF 78

EXPRESSION:
result < 374830

IRs:
TMP_99(bool) = result < 374830
CONDITION TMP_99"];
78->79[label="True"];
78->82[label="False"];
79[label="Node Type: EXPRESSION 79

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,35),10)

IRs:
REF_89(uint200) -> spin.tokenValue
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_89', '35'] 
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_100', '10'] 
profit(uint256) := TMP_101(uint256)"];
79->80;
80[label="Node Type: EXPRESSION 80

EXPRESSION:
category = 17

IRs:
category(uint256) := 17(uint256)"];
80->81;
81[label="Node Type: EXPRESSION 81

EXPRESSION:
TwoGreenPyramids(target,spin.blockn)

IRs:
REF_90(uint48) -> spin.blockn
Emit TwoGreenPyramids(target,REF_90)"];
81->93;
82[label="Node Type: IF 82

EXPRESSION:
result < 425751

IRs:
TMP_103(bool) = result < 425751
CONDITION TMP_103"];
82->83[label="True"];
82->86[label="False"];
83[label="Node Type: EXPRESSION 83

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,225),100)

IRs:
REF_93(uint200) -> spin.tokenValue
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_93', '225'] 
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_104', '100'] 
profit(uint256) := TMP_105(uint256)"];
83->84;
84[label="Node Type: EXPRESSION 84

EXPRESSION:
category = 18

IRs:
category(uint256) := 18(uint256)"];
84->85;
85[label="Node Type: EXPRESSION 85

EXPRESSION:
TwoGoldPyramids(target,spin.blockn)

IRs:
REF_94(uint48) -> spin.blockn
Emit TwoGoldPyramids(target,REF_94)"];
85->89;
86[label="Node Type: EXPRESSION 86

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,2)

IRs:
REF_96(uint200) -> spin.tokenValue
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_96', '2'] 
profit(uint256) := TMP_107(uint256)"];
86->87;
87[label="Node Type: EXPRESSION 87

EXPRESSION:
category = 19

IRs:
category(uint256) := 19(uint256)"];
87->88;
88[label="Node Type: EXPRESSION 88

EXPRESSION:
TwoWhitePyramids(target,spin.blockn)

IRs:
REF_97(uint48) -> spin.blockn
Emit TwoWhitePyramids(target,REF_97)"];
88->89;
89[label="Node Type: END_IF 89
"];
89->90;
90[label="Node Type: EXPRESSION 90

EXPRESSION:
LogResult(target,result,profit,spin.tokenValue,category,true)

IRs:
REF_98(uint200) -> spin.tokenValue
Emit LogResult(target,result,profit,REF_98,category,True)"];
90->91;
91[label="Node Type: EXPRESSION 91

EXPRESSION:
contractBalance = contractBalance.sub(profit)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['contractBalance', 'profit'] 
contractBalance(uint256) := TMP_110(uint256)"];
91->92;
92[label="Node Type: EXPRESSION 92

EXPRESSION:
ZTHTKN.transfer(target,profit)

IRs:
TMP_111(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['target', 'profit']  "];
92->93;
93[label="Node Type: END_IF 93
"];
93->94;
94[label="Node Type: END_IF 94
"];
94->95;
95[label="Node Type: END_IF 95
"];
95->96;
96[label="Node Type: END_IF 96
"];
96->97;
97[label="Node Type: END_IF 97
"];
97->98;
98[label="Node Type: END_IF 98
"];
98->99;
99[label="Node Type: END_IF 99
"];
99->100;
100[label="Node Type: END_IF 100
"];
100->101;
101[label="Node Type: END_IF 101
"];
101->102;
102[label="Node Type: END_IF 102
"];
102->103;
103[label="Node Type: END_IF 103
"];
103->104;
104[label="Node Type: END_IF 104
"];
104->105;
105[label="Node Type: END_IF 105
"];
105->106;
106[label="Node Type: END_IF 106
"];
106->107;
107[label="Node Type: END_IF 107
"];
107->108;
108[label="Node Type: END_IF 108
"];
108->109;
109[label="Node Type: END_IF 109
"];
109->110;
110[label="Node Type: END_IF 110
"];
110->111;
111[label="Node Type: EXPRESSION 111

EXPRESSION:
playerSpins[target] = playerSpin(uint200(0),uint48(0))

IRs:
REF_101(Zlots.playerSpin) -> playerSpins[target]
TMP_112 = CONVERT 0 to uint200
TMP_113 = CONVERT 0 to uint48
TMP_114(Zlots.playerSpin) = new playerSpin(TMP_112,TMP_113)
REF_101(Zlots.playerSpin) (->playerSpins) := TMP_114(Zlots.playerSpin)"];
111->112;
112[label="Node Type: RETURN 112

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 1761.sol-Zlots-_spinTokens(Zlots.TKN)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameActive)

IRs:
TMP_10(None) = SOLIDITY_CALL require(bool)(gameActive)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_zthToken(msg.sender))

IRs:
TMP_11(bool) = INTERNAL_CALL, Zlots._zthToken(address)(msg.sender)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(validTokenBet[_tkn.value])

IRs:
REF_9(uint256) -> _tkn.value
REF_10(bool) -> validTokenBet[REF_9]
TMP_13(None) = SOLIDITY_CALL require(bool)(REF_10)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(jackpotGuard(_tkn.value))

IRs:
REF_11(uint256) -> _tkn.value
TMP_14(bool) = INTERNAL_CALL, Zlots.jackpotGuard(uint256)(REF_11)
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tkn.value < ((2 ** 200) - 1))

IRs:
REF_12(uint256) -> _tkn.value
TMP_16(uint256) = 2 ** 200
TMP_17(uint256) = TMP_16 - 1
TMP_18(bool) = REF_12 < TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(block.number < ((2 ** 48) - 1))

IRs:
TMP_20(uint256) = 2 ** 48
TMP_21(uint256) = TMP_20 - 1
TMP_22(bool) = block.number < TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_customerAddress = _tkn.sender

IRs:
REF_13(address) -> _tkn.sender
_customerAddress(address) := REF_13(address)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_wagered = _tkn.value

IRs:
REF_14(uint256) -> _tkn.value
_wagered(uint256) := REF_14(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
spin = playerSpins[_tkn.sender]

IRs:
REF_15(address) -> _tkn.sender
REF_16(Zlots.playerSpin) -> playerSpins[REF_15]
spin(Zlots.playerSpin) := REF_16(Zlots.playerSpin)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
contractBalance = contractBalance.add(_wagered)

IRs:
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contractBalance', '_wagered'] 
contractBalance(uint256) := TMP_24(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(block.number != spin.blockn)

IRs:
REF_18(uint48) -> spin.blockn
TMP_25(bool) = block.number != REF_18
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
spin.blockn != 0

IRs:
REF_19(uint48) -> spin.blockn
TMP_27(bool) = REF_19 != 0
CONDITION TMP_27"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_finishSpin(_tkn.sender)

IRs:
REF_20(address) -> _tkn.sender
TMP_28(uint256) = INTERNAL_CALL, Zlots._finishSpin(address)(REF_20)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
spin.blockn = uint48(block.number)

IRs:
REF_21(uint48) -> spin.blockn
TMP_29 = CONVERT block.number to uint48
REF_21(uint48) (->spin) := TMP_29(uint48)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
spin.tokenValue = uint200(_wagered)

IRs:
REF_22(uint200) -> spin.tokenValue
TMP_30 = CONVERT _wagered to uint200
REF_22(uint200) (->spin) := TMP_30(uint200)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
playerSpins[_tkn.sender] = spin

IRs:
REF_23(address) -> _tkn.sender
REF_24(Zlots.playerSpin) -> playerSpins[REF_23]
REF_24(Zlots.playerSpin) (->playerSpins) := spin(Zlots.playerSpin)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
totalSpins += 1

IRs:
totalSpins(uint256) = totalSpins + 1"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
totalZTHWagered += _wagered

IRs:
totalZTHWagered(uint256) = totalZTHWagered + _wagered"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
TokensWagered(_customerAddress,_wagered)

IRs:
Emit TokensWagered(_customerAddress,_wagered)"];
}
// Function: 1761.sol-Zlots-_zthToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_tokenContract == ZTHTKNADDR

IRs:
TMP_137(bool) = _tokenContract == ZTHTKNADDR
RETURN TMP_137"];
}
// Function: 1761.sol-Zlots-addNewBetAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
validTokenBet[_tokenAmount] = true

IRs:
REF_106(bool) -> validTokenBet[_tokenAmount]
REF_106(bool) (->validTokenBet) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1761.sol-Zlots-balanceOf()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
contractBalance

IRs:
RETURN contractBalance"];
}
// Function: 1761.sol-Zlots-changeBankroll(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankroll = _newBankroll

IRs:
bankroll(address) := _newBankroll(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1761.sol-Zlots-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1761.sol-Zlots-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZTHTKNADDR = ZethrAddress

IRs:
ZTHTKNADDR(address) := ZethrAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ZTHBANKROLL = BankrollAddress

IRs:
ZTHBANKROLL(address) := BankrollAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bankroll = ZTHBANKROLL

IRs:
bankroll(address) := ZTHBANKROLL(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ZTHTKN = ZTHInterface(ZTHTKNADDR)

IRs:
TMP_0 = CONVERT ZTHTKNADDR to ZTHInterface
ZTHTKN(ZTHInterface) := TMP_0(ZTHInterface)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ZTHTKN.approve(ZTHBANKROLL,2 ** 256 - 1)

IRs:
TMP_1(uint256) = 2 ** 256
TMP_2(uint256) = TMP_1 - 1
TMP_3(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['ZTHBANKROLL', 'TMP_2']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ZTHTKN.approve(owner,2 ** 256 - 1)

IRs:
TMP_4(uint256) = 2 ** 256
TMP_5(uint256) = TMP_4 - 1
TMP_6(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['owner', 'TMP_5']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
validTokenBet[5e18] = true

IRs:
REF_2(bool) -> validTokenBet[5000000000000000000]
REF_2(bool) (->validTokenBet) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validTokenBet[10e18] = true

IRs:
REF_3(bool) -> validTokenBet[10000000000000000000]
REF_3(bool) (->validTokenBet) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
validTokenBet[25e18] = true

IRs:
REF_4(bool) -> validTokenBet[25000000000000000000]
REF_4(bool) (->validTokenBet) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
validTokenBet[50e18] = true

IRs:
REF_5(bool) -> validTokenBet[50000000000000000000]
REF_5(bool) (->validTokenBet) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
gameActive = true

IRs:
gameActive(bool) := True(bool)"];
}
// Function: 1761.sol-Zlots-divertDividendsToBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankroll.transfer(address(this).balance)

IRs:
TMP_130 = CONVERT this to address
TMP_131(uint256) = SOLIDITY_CALL balance(address)(TMP_130)
Transfer dest:bankroll value:TMP_131"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1761.sol-Zlots-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1761.sol-Zlots-finishSpin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_finishSpin(msg.sender)

IRs:
TMP_32(uint256) = INTERNAL_CALL, Zlots._finishSpin(address)(msg.sender)
RETURN TMP_32"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zlots.gameIsActive()()"];
2->1;
}
// Function: 1761.sol-Zlots-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameActive == true)

IRs:
TMP_146(bool) = gameActive == True
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1761.sol-Zlots-jackpotGuard(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
maxProfit = SafeMath.mul(_wager,500)

IRs:
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_wager', '500'] 
maxProfit(uint256) := TMP_115(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ninetyContractBalance = SafeMath.mul(SafeMath.div(contractBalance,10),9)

IRs:
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['contractBalance', '10'] 
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_116', '9'] 
ninetyContractBalance(uint256) := TMP_117(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(maxProfit <= ninetyContractBalance)

IRs:
TMP_118(bool) = maxProfit <= ninetyContractBalance
RETURN TMP_118"];
}
// Function: 1761.sol-Zlots-maxRandom(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(abi.encodePacked(blockhash(uint256)(blockn),entropy)))

IRs:
TMP_119(uint256) = SOLIDITY_CALL blockhash(uint256)(blockn)
TMP_120(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_119,entropy)
TMP_121(bytes32) = SOLIDITY_CALL keccak256()(TMP_120)
TMP_122 = CONVERT TMP_121 to uint256
RETURN TMP_122"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1761.sol-Zlots-onlyBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == bankroll)

IRs:
TMP_140(bool) = msg.sender == bankroll
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1761.sol-Zlots-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_138(bool) = msg.sender == owner
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1761.sol-Zlots-onlyOwnerOrBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == bankroll)

IRs:
TMP_142(bool) = msg.sender == owner
TMP_143(bool) = msg.sender == bankroll
TMP_144(bool) = TMP_142 || TMP_143
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1761.sol-Zlots-pauseGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameActive = false

IRs:
gameActive(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1761.sol-Zlots-random(uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxRandom(blockn,entropy) % upper

IRs:
TMP_123(uint256) = INTERNAL_CALL, Zlots.maxRandom(uint256,address)(blockn,entropy)
TMP_124(uint256) = TMP_123 % upper
RETURN TMP_124"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 1761.sol-Zlots-resumeGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameActive = true

IRs:
gameActive(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 1761.sol-Zlots-testingSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZTHTKN.transfer(owner,contractBalance)

IRs:
TMP_134(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['owner', 'contractBalance']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_135(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
3->1;
}
// Function: 1761.sol-Zlots-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_from == bankroll

IRs:
TMP_7(bool) = _from == bankroll
CONDITION TMP_7"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractBalance = contractBalance.add(_value)

IRs:
TMP_8(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contractBalance', '_value'] 
contractBalance(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_tkn.sender = _from

IRs:
REF_7(address) -> _tkn.sender
REF_7(address) (->_tkn) := _from(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_tkn.value = _value

IRs:
REF_8(uint256) -> _tkn.value
REF_8(uint256) (->_tkn) := _value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_spinTokens(_tkn)

IRs:
INTERNAL_CALL, Zlots._spinTokens(Zlots.TKN)(_tkn)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
