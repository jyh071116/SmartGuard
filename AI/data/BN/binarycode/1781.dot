digraph G {
// Function: 1781.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_487'] 
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_490(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_489'] 
TMP_491(uint256) = TMP_490 / 2
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_488', 'TMP_491'] 
TMP_493(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_494(uint256) = TMP_492 / TMP_493
RETURN TMP_494"];
}
// Function: 1781.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_477(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_479(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_478)
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_477', 'TMP_479'] 
RETURN TMP_480"];
}
// Function: 1781.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_481', '312500000000000000000000000'] 
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_482', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_483'] 
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_484', '74999921875000000000000000000000'] 
TMP_486(uint256) = TMP_485 / 156250000
RETURN TMP_486"];
}
// Function: 1781.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_474(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_473)
TMP_475(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_474', 'TMP_475'] 
RETURN TMP_476"];
}
// Function: 1781.sol-F4Kings-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_456(bool) = msg.sender == admin
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_458(bool) = activated_ == False
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_732(F3Ddatasets.Round) -> round_[1]
REF_733(uint256) -> REF_732.strt
TMP_460(uint256) = now + rndExtra_
TMP_461(uint256) = TMP_460 - rndGap_
REF_733(uint256) (->round_) := TMP_461(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_734(F3Ddatasets.Round) -> round_[1]
REF_735(uint256) -> REF_734.end
TMP_462(uint256) = now + rndInit_
TMP_463(uint256) = TMP_462 + rndExtra_
REF_735(uint256) (->round_) := TMP_463(uint256)"];
}
// Function: 1781.sol-F4Kings-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_353(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_354(bytes32) = SOLIDITY_CALL keccak256()(TMP_353)
TMP_355 = CONVERT TMP_354 to uint256
TMP_356(uint256) = TMP_355 / now
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_352', 'TMP_356'] 
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_357', 'block.gaslimit'] 
TMP_359(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_360(bytes32) = SOLIDITY_CALL keccak256()(TMP_359)
TMP_361 = CONVERT TMP_360 to uint256
TMP_362(uint256) = TMP_361 / now
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_358', 'TMP_362'] 
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_363', 'block.number'] 
TMP_365(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_364)
TMP_366(bytes32) = SOLIDITY_CALL keccak256()(TMP_365)
TMP_367 = CONVERT TMP_366 to uint256
seed(uint256) := TMP_367(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_368(uint256) = seed / 1000
TMP_369(uint256) = TMP_368 * 1000
TMP_370(uint256) = seed - TMP_369
TMP_371(bool) = TMP_370 < airDropTracker_
CONDITION TMP_371"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1781.sol-F4Kings-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.strt
TMP_168(uint256) = REF_270 + rndGap_
TMP_169(bool) = _now > TMP_168
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.end
TMP_170(bool) = _now <= REF_272
REF_273(F3Ddatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.end
TMP_171(bool) = _now > REF_274
REF_275(F3Ddatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.plyr
TMP_172(bool) = REF_276 == 0
TMP_173(bool) = TMP_171 && TMP_172
TMP_174(bool) = TMP_170 || TMP_173
TMP_175(bool) = TMP_169 && TMP_174
CONDITION TMP_175"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_277(F3Ddatasets.Round) -> round_[_rID]
REF_278(uint256) -> REF_277.end
TMP_177(bool) = _now > REF_278
REF_279(F3Ddatasets.Round) -> round_[_rID]
REF_280(bool) -> REF_279.ended
TMP_178(bool) = REF_280 == False
TMP_179(bool) = TMP_177 && TMP_178
CONDITION TMP_179"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_281(F3Ddatasets.Round) -> round_[_rID]
REF_282(bool) -> REF_281.ended
REF_282(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_180(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_180(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_283(uint256) -> _eventData_.compressedData
REF_284(uint256) -> _eventData_.compressedData
TMP_181(uint256) = _now * 1000000000000000000
TMP_182(uint256) = REF_284 + TMP_181
REF_283(uint256) (->_eventData_) := TMP_182(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_285(uint256) -> _eventData_.compressedIDs
REF_286(uint256) -> _eventData_.compressedIDs
TMP_183(uint256) = REF_286 + _pID
REF_285(uint256) (->_eventData_) := TMP_183(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_288(F3Ddatasets.Player) -> plyr_[_pID]
REF_289(bytes32) -> REF_288.name
REF_290(uint256) -> _eventData_.compressedData
REF_291(uint256) -> _eventData_.compressedIDs
REF_292(address) -> _eventData_.winnerAddr
REF_293(bytes32) -> _eventData_.winnerName
REF_294(uint256) -> _eventData_.amountWon
REF_295(uint256) -> _eventData_.newPot
REF_296(uint256) -> _eventData_.P3DAmount
REF_297(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_289,msg.value,REF_290,REF_291,REF_292,REF_293,REF_294,REF_295,REF_296,REF_297)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_298(F3Ddatasets.Player) -> plyr_[_pID]
REF_299(uint256) -> REF_298.gen
REF_300(F3Ddatasets.Player) -> plyr_[_pID]
REF_301(uint256) -> REF_300.gen
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_301', 'msg.value'] 
REF_299(uint256) (->plyr_) := TMP_185(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1781.sol-F4Kings-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_23(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, F4Kings.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F4Kings.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1781.sol-F4Kings-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, F4Kings.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F4Kings.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 1781.sol-F4Kings-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_34(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_36(bool) = _affCode == REF_36
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_38(bool) = _affID != REF_41
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, F4Kings.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F4Kings.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 1781.sol-F4Kings-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_418(F3Ddatasets.Round) -> round_[_rID]
REF_419(uint256) -> REF_418.strt
TMP_251(uint256) = REF_419 + rndGap_
TMP_252(bool) = _now > TMP_251
REF_420(F3Ddatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.end
TMP_253(bool) = _now <= REF_421
REF_422(F3Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.end
TMP_254(bool) = _now > REF_423
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.plyr
TMP_255(bool) = REF_425 == 0
TMP_256(bool) = TMP_254 && TMP_255
TMP_257(bool) = TMP_253 || TMP_256
TMP_258(bool) = TMP_252 && TMP_257
CONDITION TMP_258"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.eth
TMP_259(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_427', '_eth'] 
RETURN TMP_259"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_260(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_260"];
}
// Function: 1781.sol-F4Kings-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_408(F3Ddatasets.Round) -> round_[_rIDlast]
REF_409(uint256) -> REF_408.mask
REF_411(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_412(F3Ddatasets.PlayerRounds) -> REF_411[_rIDlast]
REF_413(uint256) -> REF_412.keys
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_409', 'REF_413'] 
TMP_249(uint256) = TMP_248 / 1000000000000000000
REF_415(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_416(F3Ddatasets.PlayerRounds) -> REF_415[_rIDlast]
REF_417(uint256) -> REF_416.mask
TMP_250(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_249', 'REF_417'] 
RETURN TMP_250"];
}
// Function: 1781.sol-F4Kings-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(22,0)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(22,0)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(32,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(32,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(52,0)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(52,0)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(42,0)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(42,0)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(42,0)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(42,0)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(34,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(34,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(18,0)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(18,0)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(26,0)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(26,0)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 1781.sol-F4Kings-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_335(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_336(F3Ddatasets.PlayerRounds) -> REF_335[_rID]
REF_337(uint256) -> REF_336.keys
TMP_205(bool) = REF_337 == 0
CONDITION TMP_205"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_206(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_206(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_eth > 1000000000

IRs:
TMP_207(bool) = _eth > 1000000000
CONDITION TMP_207"];
4->5[label="True"];
4->52[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_338(F3Ddatasets.Round) -> round_[_rID]
REF_339(uint256) -> REF_338.eth
TMP_208(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_339', '_eth'] 
_keys(uint256) := TMP_208(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_209(bool) = _keys >= 1000000000000000000
CONDITION TMP_209"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, F4Kings.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_341(F3Ddatasets.Round) -> round_[_rID]
REF_342(uint256) -> REF_341.plyr
TMP_211(bool) = REF_342 != _pID
CONDITION TMP_211"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_343(F3Ddatasets.Round) -> round_[_rID]
REF_344(uint256) -> REF_343.plyr
REF_344(uint256) (->round_) := _pID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_345(F3Ddatasets.Round) -> round_[_rID]
REF_346(uint256) -> REF_345.team
TMP_212(bool) = REF_346 != _team
CONDITION TMP_212"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.team
REF_348(uint256) (->round_) := _team(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_349(uint256) -> _eventData_.compressedData
REF_350(uint256) -> _eventData_.compressedData
TMP_213(uint256) = REF_350 + 100
REF_349(uint256) (->_eventData_) := TMP_213(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_214(bool) = _eth >= 100000000000000000
CONDITION TMP_214"];
16->17[label="True"];
16->42[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_215(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
airdrop() == true

IRs:
TMP_216(bool) = INTERNAL_CALL, F4Kings.airdrop()()
TMP_217(bool) = TMP_216 == True
CONDITION TMP_217"];
18->19[label="True"];
18->41[label="False"];
19[label="Node Type: NEW VARIABLE 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_218(bool) = _eth >= 10000000000000000000
CONDITION TMP_218"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_220(uint256) = TMP_219 / 100
_prize(uint256) := TMP_220(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_352(F3Ddatasets.Player) -> plyr_[_pID]
REF_353(uint256) -> REF_352.win
REF_354(F3Ddatasets.Player) -> plyr_[_pID]
REF_355(uint256) -> REF_354.win
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_355', '_prize'] 
REF_353(uint256) (->plyr_) := TMP_221(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_222(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_358(uint256) -> _eventData_.compressedData
REF_358(-> _eventData_) = REF_358 + 300000000000000000000000000000000"];
24->37;
25[label="Node Type: IF 25

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_223(bool) = _eth >= 1000000000000000000
TMP_224(bool) = _eth < 10000000000000000000
TMP_225(bool) = TMP_223 && TMP_224
CONDITION TMP_225"];
25->26[label="True"];
25->30[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_227(uint256) = TMP_226 / 100
_prize(uint256) := TMP_227(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_360(F3Ddatasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.win
REF_362(F3Ddatasets.Player) -> plyr_[_pID]
REF_363(uint256) -> REF_362.win
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_363', '_prize'] 
REF_361(uint256) (->plyr_) := TMP_228(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_229(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_366(uint256) -> _eventData_.compressedData
REF_366(-> _eventData_) = REF_366 + 200000000000000000000000000000000"];
29->36;
30[label="Node Type: IF 30

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_230(bool) = _eth >= 100000000000000000
TMP_231(bool) = _eth < 1000000000000000000
TMP_232(bool) = TMP_230 && TMP_231
CONDITION TMP_232"];
30->31[label="True"];
30->35[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_234(uint256) = TMP_233 / 100
_prize(uint256) := TMP_234(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_368(F3Ddatasets.Player) -> plyr_[_pID]
REF_369(uint256) -> REF_368.win
REF_370(F3Ddatasets.Player) -> plyr_[_pID]
REF_371(uint256) -> REF_370.win
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_371', '_prize'] 
REF_369(uint256) (->plyr_) := TMP_235(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_236(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_374(uint256) -> _eventData_.compressedData
REF_374(-> _eventData_) = REF_374 + 300000000000000000000000000000000"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_375(uint256) -> _eventData_.compressedData
REF_375(-> _eventData_) = REF_375 + 10000000000000000000000000000000"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_376(uint256) -> _eventData_.compressedData
TMP_237(uint256) = _prize * 1000000000000000000000000000000000
REF_376(-> _eventData_) = REF_376 + TMP_237"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_377(uint256) -> _eventData_.compressedData
REF_378(uint256) -> _eventData_.compressedData
TMP_238(uint256) = airDropTracker_ * 1000
TMP_239(uint256) = REF_378 + TMP_238
REF_377(uint256) (->_eventData_) := TMP_239(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_379(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_380(F3Ddatasets.PlayerRounds) -> REF_379[_rID]
REF_381(uint256) -> REF_380.keys
REF_383(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_384(F3Ddatasets.PlayerRounds) -> REF_383[_rID]
REF_385(uint256) -> REF_384.keys
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_385'] 
REF_381(uint256) (->plyrRnds_) := TMP_240(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_386(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_387(F3Ddatasets.PlayerRounds) -> REF_386[_rID]
REF_388(uint256) -> REF_387.eth
REF_390(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_391(F3Ddatasets.PlayerRounds) -> REF_390[_rID]
REF_392(uint256) -> REF_391.eth
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_392'] 
REF_388(uint256) (->plyrRnds_) := TMP_241(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_393(F3Ddatasets.Round) -> round_[_rID]
REF_394(uint256) -> REF_393.keys
REF_396(F3Ddatasets.Round) -> round_[_rID]
REF_397(uint256) -> REF_396.keys
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_397'] 
REF_394(uint256) (->round_) := TMP_242(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_398(F3Ddatasets.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.eth
REF_401(F3Ddatasets.Round) -> round_[_rID]
REF_402(uint256) -> REF_401.eth
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_402'] 
REF_399(uint256) (->round_) := TMP_243(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_403(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_404(uint256) -> REF_403[_team]
REF_406(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_407(uint256) -> REF_406[_team]
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_407'] 
REF_404(uint256) (->rndTmEth_) := TMP_244(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_245(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_245(F3Ddatasets.EventReturns)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_246(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_246(F3Ddatasets.EventReturns)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
51->52;
52[label="Node Type: END_IF 52
"];
}
// Function: 1781.sol-F4Kings-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_467(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_467(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_285(bool) = _pID == 0
CONDITION TMP_285"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_286(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_286(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_287(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_287(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_288(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_288(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_471(uint256) -> pIDxAddr_[msg.sender]
REF_471(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_472(F3Ddatasets.Player) -> plyr_[_pID]
REF_473(address) -> REF_472.addr
REF_473(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_289(bool) = _name != 
CONDITION TMP_289"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_474(uint256) -> pIDxName_[_name]
REF_474(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_475(F3Ddatasets.Player) -> plyr_[_pID]
REF_476(bytes32) -> REF_475.name
REF_476(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_477(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_478(bool) -> REF_477[_name]
REF_478(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_290(bool) = _laff != 0
TMP_291(bool) = _laff != _pID
TMP_292(bool) = TMP_290 && TMP_291
CONDITION TMP_292"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_479(F3Ddatasets.Player) -> plyr_[_pID]
REF_480(uint256) -> REF_479.laff
REF_480(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_481(uint256) -> _eventData_.compressedData
REF_482(uint256) -> _eventData_.compressedData
TMP_293(uint256) = REF_482 + 1
REF_481(uint256) (->_eventData_) := TMP_293(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1781.sol-F4Kings-distributeAff(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addP3d = 0

IRs:
_addP3d(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff1 = _eth / 10

IRs:
TMP_390(uint256) = _eth / 10
_aff1(uint256) := TMP_390(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_aff2 = _eth / 20

IRs:
TMP_391(uint256) = _eth / 20
_aff2(uint256) := TMP_391(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_aff3 = _eth / 34

IRs:
TMP_392(uint256) = _eth / 34
_aff3(uint256) := TMP_392(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(_affID != 0) && (_affID != _pID) && (plyr_[_affID].name != )

IRs:
TMP_393(bool) = _affID != 0
TMP_394(bool) = _affID != _pID
TMP_395(bool) = TMP_393 && TMP_394
REF_605(F3Ddatasets.Player) -> plyr_[_affID]
REF_606(bytes32) -> REF_605.name
TMP_396(bool) = REF_606 != 
TMP_397(bool) = TMP_395 && TMP_396
CONDITION TMP_397"];
5->6[label="True"];
5->21[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laffID = _affID

IRs:
REF_607(F3Ddatasets.Player) -> plyr_[_pID]
REF_608(uint256) -> REF_607.laffID
REF_608(uint256) (->plyr_) := _affID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_affID].aff = _aff1.add(plyr_[_affID].aff)

IRs:
REF_609(F3Ddatasets.Player) -> plyr_[_affID]
REF_610(uint256) -> REF_609.aff
REF_612(F3Ddatasets.Player) -> plyr_[_affID]
REF_613(uint256) -> REF_612.aff
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff1', 'REF_613'] 
REF_610(uint256) (->plyr_) := TMP_398(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff1,now)

IRs:
REF_615(F3Ddatasets.Player) -> plyr_[_affID]
REF_616(address) -> REF_615.addr
REF_617(F3Ddatasets.Player) -> plyr_[_affID]
REF_618(bytes32) -> REF_617.name
Emit onAffiliatePayout(_affID,REF_616,REF_618,_rID,_pID,_aff1,now)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_secLaff = plyr_[_affID].laffID

IRs:
REF_619(F3Ddatasets.Player) -> plyr_[_affID]
REF_620(uint256) -> REF_619.laffID
_secLaff(uint256) := REF_620(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
(_secLaff != 0) && (_secLaff != _pID)

IRs:
TMP_400(bool) = _secLaff != 0
TMP_401(bool) = _secLaff != _pID
TMP_402(bool) = TMP_400 && TMP_401
CONDITION TMP_402"];
10->11[label="True"];
10->19[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_secLaff].aff = _aff2.add(plyr_[_secLaff].aff)

IRs:
REF_621(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_622(uint256) -> REF_621.aff
REF_624(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_625(uint256) -> REF_624.aff
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff2', 'REF_625'] 
REF_622(uint256) (->plyr_) := TMP_403(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_secLaff,plyr_[_secLaff].addr,plyr_[_secLaff].name,_rID,_pID,_aff2,now)

IRs:
REF_627(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_628(address) -> REF_627.addr
REF_629(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_630(bytes32) -> REF_629.name
Emit onAffiliatePayout(_secLaff,REF_628,REF_630,_rID,_pID,_aff2,now)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_thirdAff = plyr_[_secLaff].laffID

IRs:
REF_631(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_632(uint256) -> REF_631.laffID
_thirdAff(uint256) := REF_632(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
(_thirdAff != 0) && (_thirdAff != _pID)

IRs:
TMP_405(bool) = _thirdAff != 0
TMP_406(bool) = _thirdAff != _pID
TMP_407(bool) = TMP_405 && TMP_406
CONDITION TMP_407"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_thirdAff].aff = _aff3.add(plyr_[_thirdAff].aff)

IRs:
REF_633(F3Ddatasets.Player) -> plyr_[_thirdAff]
REF_634(uint256) -> REF_633.aff
REF_636(F3Ddatasets.Player) -> plyr_[_thirdAff]
REF_637(uint256) -> REF_636.aff
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff3', 'REF_637'] 
REF_634(uint256) (->plyr_) := TMP_408(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
F3Devents.onAffiliatePayout(_thirdAff,plyr_[_thirdAff].addr,plyr_[_thirdAff].name,_rID,_pID,_aff3,now)

IRs:
REF_639(F3Ddatasets.Player) -> plyr_[_thirdAff]
REF_640(address) -> REF_639.addr
REF_641(F3Ddatasets.Player) -> plyr_[_thirdAff]
REF_642(bytes32) -> REF_641.name
Emit onAffiliatePayout(_thirdAff,REF_640,REF_642,_rID,_pID,_aff3,now)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_addP3d = _addP3d.add(_aff3)

IRs:
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_addP3d', '_aff3'] 
_addP3d(uint256) := TMP_410(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->20;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_addP3d = _addP3d.add(_aff2)

IRs:
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_addP3d', '_aff2'] 
_addP3d(uint256) := TMP_411(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->22;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_addP3d = _addP3d.add(_aff1)

IRs:
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_addP3d', '_aff1'] 
_addP3d(uint256) := TMP_412(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
(_addP3d)

IRs:
RETURN _addP3d"];
}
// Function: 1781.sol-F4Kings-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 10

IRs:
TMP_372(uint256) = _eth / 10
_com(uint256) := TMP_372(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_373 = CONVERT admin to address
TMP_375(bool) = LOW_LEVEL_CALL, dest:TMP_373, function:call, arguments:[] value:_com 
TMP_376 = UnaryType.BANG TMP_375 
CONDITION TMP_376"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_p3d = _p3d.add(distributeAff(_rID,_pID,_eth,_affID))

IRs:
TMP_377(uint256) = INTERNAL_CALL, F4Kings.distributeAff(uint256,uint256,uint256,uint256)(_rID,_pID,_eth,_affID)
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_377'] 
_p3d(uint256) := TMP_378(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_p3d > 0

IRs:
TMP_379(bool) = _p3d > 0
CONDITION TMP_379"];
8->9[label="True"];
8->15[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_380(uint256) = _p3d / 2
_potAmount(uint256) := TMP_380(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_amount = _p3d.sub(_potAmount)

IRs:
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
_amount(uint256) := TMP_381(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
shareCom.transfer((_amount.mul(65) / 100))

IRs:
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount', '65'] 
TMP_383(uint256) = TMP_382 / 100
Transfer dest:shareCom value:TMP_383"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admin.transfer((_amount.mul(35) / 100))

IRs:
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount', '35'] 
TMP_386(uint256) = TMP_385 / 100
Transfer dest:admin value:TMP_386"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_597(F3Ddatasets.Round) -> round_[_rID]
REF_598(uint256) -> REF_597.pot
REF_599(F3Ddatasets.Round) -> round_[_rID]
REF_600(uint256) -> REF_599.pot
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_600', '_potAmount'] 
REF_598(uint256) (->round_) := TMP_388(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_602(uint256) -> _eventData_.P3DAmount
REF_604(uint256) -> _eventData_.P3DAmount
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_604'] 
REF_602(uint256) (->_eventData_) := TMP_389(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1781.sol-F4Kings-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_659(F3Ddatasets.TeamFee) -> fees_[_team]
REF_660(uint256) -> REF_659.gen
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_660'] 
TMP_419(uint256) = TMP_418 / 100
_gen(uint256) := TMP_419(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_420(uint256) = _eth / 100
_air(uint256) := TMP_420(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_421(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(_eth.mul(30) / 100)

IRs:
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '30'] 
TMP_423(uint256) = TMP_422 / 100
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_423'] 
_eth(uint256) := TMP_424(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_425(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_426(uint256) = INTERNAL_CALL, F4Kings.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_426(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_427(bool) = _dust > 0
CONDITION TMP_427"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_428(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_666(F3Ddatasets.Round) -> round_[_rID]
REF_667(uint256) -> REF_666.pot
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_670(F3Ddatasets.Round) -> round_[_rID]
REF_671(uint256) -> REF_670.pot
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_429', 'REF_671'] 
REF_667(uint256) (->round_) := TMP_430(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_672(uint256) -> _eventData_.genAmount
REF_674(uint256) -> _eventData_.genAmount
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_674'] 
REF_672(uint256) (->_eventData_) := TMP_431(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_675(uint256) -> _eventData_.potAmount
REF_675(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1781.sol-F4Kings-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_491(F3Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.plyr
_winPID(uint256) := REF_492(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_493(F3Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.team
_winTID(uint256) := REF_494(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_495(F3Ddatasets.Round) -> round_[_rID]
REF_496(uint256) -> REF_495.pot
_pot(uint256) := REF_496(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_301(uint256) = TMP_300 / 100
_win(uint256) := TMP_301(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 10)

IRs:
TMP_302(uint256) = _pot / 10
_com(uint256) := TMP_302(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_499(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_500(uint256) -> REF_499.gen
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_500'] 
TMP_304(uint256) = TMP_303 / 100
_gen(uint256) := TMP_304(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen))

IRs:
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_305', '_com'] 
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_306', '_gen'] 
_res(uint256) := TMP_307(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_505(F3Ddatasets.Round) -> round_[_rID]
REF_506(uint256) -> REF_505.keys
TMP_309(uint256) = TMP_308 / REF_506
_ppt(uint256) := TMP_309(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_509(F3Ddatasets.Round) -> round_[_rID]
REF_510(uint256) -> REF_509.keys
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_510'] 
TMP_311(uint256) = TMP_310 / 1000000000000000000
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_311'] 
_dust(uint256) := TMP_312(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_dust > 0

IRs:
TMP_313(bool) = _dust > 0
CONDITION TMP_313"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_314(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_315(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_513(F3Ddatasets.Player) -> plyr_[_winPID]
REF_514(uint256) -> REF_513.win
REF_516(F3Ddatasets.Player) -> plyr_[_winPID]
REF_517(uint256) -> REF_516.win
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_517'] 
REF_514(uint256) (->plyr_) := TMP_316(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
shareCom.transfer((_com.mul(65) / 100))

IRs:
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_com', '65'] 
TMP_318(uint256) = TMP_317 / 100
Transfer dest:shareCom value:TMP_318"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer((_com.mul(35) / 100))

IRs:
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_com', '35'] 
TMP_321(uint256) = TMP_320 / 100
Transfer dest:admin value:TMP_321"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_522(F3Ddatasets.Round) -> round_[_rID]
REF_523(uint256) -> REF_522.mask
REF_525(F3Ddatasets.Round) -> round_[_rID]
REF_526(uint256) -> REF_525.mask
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_526'] 
REF_523(uint256) (->round_) := TMP_323(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_527(uint256) -> _eventData_.compressedData
REF_528(uint256) -> _eventData_.compressedData
REF_529(F3Ddatasets.Round) -> round_[_rID]
REF_530(uint256) -> REF_529.end
TMP_324(uint256) = REF_530 * 1000000
TMP_325(uint256) = REF_528 + TMP_324
REF_527(uint256) (->_eventData_) := TMP_325(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_531(uint256) -> _eventData_.compressedIDs
REF_532(uint256) -> _eventData_.compressedIDs
TMP_326(uint256) = _winPID * 100000000000000000000000000
TMP_327(uint256) = REF_532 + TMP_326
TMP_328(uint256) = _winTID * 100000000000000000
TMP_329(uint256) = TMP_327 + TMP_328
REF_531(uint256) (->_eventData_) := TMP_329(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_533(address) -> _eventData_.winnerAddr
REF_534(F3Ddatasets.Player) -> plyr_[_winPID]
REF_535(address) -> REF_534.addr
REF_533(address) (->_eventData_) := REF_535(address)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_536(bytes32) -> _eventData_.winnerName
REF_537(F3Ddatasets.Player) -> plyr_[_winPID]
REF_538(bytes32) -> REF_537.name
REF_536(bytes32) (->_eventData_) := REF_538(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_539(uint256) -> _eventData_.amountWon
REF_539(uint256) (->_eventData_) := _win(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_540(uint256) -> _eventData_.genAmount
REF_540(uint256) (->_eventData_) := _gen(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.P3DAmount = 0

IRs:
REF_541(uint256) -> _eventData_.P3DAmount
REF_541(uint256) (->_eventData_) := 0(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_542(uint256) -> _eventData_.newPot
REF_542(uint256) (->_eventData_) := _res(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
rID_ ++

IRs:
TMP_330(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_rID ++

IRs:
TMP_331(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_543(F3Ddatasets.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.strt
REF_544(uint256) (->round_) := now(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_545(F3Ddatasets.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.end
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_332', 'rndGap_'] 
REF_546(uint256) (->round_) := TMP_333(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.pot
REF_550(uint256) (->round_) := _res(uint256)"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1781.sol-F4Kings-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_716(uint256) -> _eventData_.compressedData
REF_717(uint256) -> _eventData_.compressedData
TMP_448(uint256) = now * 1000000000000000000
TMP_449(uint256) = REF_717 + TMP_448
TMP_450(uint256) = _team * 100000000000000000000000000000
TMP_451(uint256) = TMP_449 + TMP_450
REF_716(uint256) (->_eventData_) := TMP_451(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_718(uint256) -> _eventData_.compressedIDs
REF_719(uint256) -> _eventData_.compressedIDs
TMP_452(uint256) = REF_719 + _pID
TMP_453(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_454(uint256) = TMP_452 + TMP_453
REF_718(uint256) (->_eventData_) := TMP_454(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_721(uint256) -> _eventData_.compressedData
REF_722(uint256) -> _eventData_.compressedIDs
REF_723(F3Ddatasets.Player) -> plyr_[_pID]
REF_724(bytes32) -> REF_723.name
REF_725(address) -> _eventData_.winnerAddr
REF_726(bytes32) -> _eventData_.winnerName
REF_727(uint256) -> _eventData_.amountWon
REF_728(uint256) -> _eventData_.newPot
REF_729(uint256) -> _eventData_.P3DAmount
REF_730(uint256) -> _eventData_.genAmount
REF_731(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_721,REF_722,REF_724,msg.sender,_eth,_keys,REF_725,REF_726,REF_727,REF_728,REF_729,REF_730,REF_731,airDropPot_)"];
}
// Function: 1781.sol-F4Kings-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, F4Kings.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F4Kings.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1781.sol-F4Kings-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.strt
TMP_119(uint256) = REF_140 + rndGap_
TMP_120(bool) = _now > TMP_119
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_121(bool) = _now <= REF_142
REF_143(F3Ddatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.end
TMP_122(bool) = _now > REF_144
REF_145(F3Ddatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.plyr
TMP_123(bool) = REF_146 == 0
TMP_124(bool) = TMP_122 && TMP_123
TMP_125(bool) = TMP_121 || TMP_124
TMP_126(bool) = TMP_120 && TMP_125
CONDITION TMP_126"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.keys
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_148', '1000000000000000000'] 
TMP_128(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_127', '1000000000000000000'] 
RETURN TMP_128"];
5[label="Node Type: RETURN 5

EXPRESSION:
(100000000000000)

IRs:
RETURN 100000000000000"];
}
// Function: 1781.sol-F4Kings-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_221(F3Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.ico
REF_223(F3Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.keys
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.end
REF_227(F3Ddatasets.Round) -> round_[_rID]
REF_228(uint256) -> REF_227.strt
REF_229(F3Ddatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.pot
REF_231(F3Ddatasets.Round) -> round_[_rID]
REF_232(uint256) -> REF_231.team
REF_233(F3Ddatasets.Round) -> round_[_rID]
REF_234(uint256) -> REF_233.plyr
TMP_159(uint256) = REF_234 * 10
TMP_160(uint256) = REF_232 + TMP_159
REF_235(F3Ddatasets.Round) -> round_[_rID]
REF_236(uint256) -> REF_235.plyr
REF_237(F3Ddatasets.Player) -> plyr_[REF_236]
REF_238(address) -> REF_237.addr
REF_239(F3Ddatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.plyr
REF_241(F3Ddatasets.Player) -> plyr_[REF_240]
REF_242(bytes32) -> REF_241.name
REF_243(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_244(uint256) -> REF_243[0]
REF_245(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_246(uint256) -> REF_245[1]
REF_247(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_248(uint256) -> REF_247[2]
REF_249(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_250(uint256) -> REF_249[3]
TMP_161(uint256) = airDropPot_ * 1000
TMP_162(uint256) = airDropTracker_ + TMP_161
RETURN REF_222,_rID,REF_224,REF_226,REF_228,REF_230,TMP_160,REF_238,REF_242,REF_244,REF_246,REF_248,REF_250,TMP_162"];
}
// Function: 1781.sol-F4Kings-getPlayerAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_affID = plyr_[_pID].laffID

IRs:
REF_646(F3Ddatasets.Player) -> plyr_[_pID]
REF_647(uint256) -> REF_646.laffID
_affID(uint256) := REF_647(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_affID != 0

IRs:
TMP_413(bool) = _affID != 0
CONDITION TMP_413"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_secondLaff = plyr_[_affID].laffID

IRs:
REF_648(F3Ddatasets.Player) -> plyr_[_affID]
REF_649(uint256) -> REF_648.laffID
_secondLaff(uint256) := REF_649(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_secondLaff != 0

IRs:
TMP_414(bool) = _secondLaff != 0
CONDITION TMP_414"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_thirdAff = plyr_[_secondLaff].laffID

IRs:
REF_650(F3Ddatasets.Player) -> plyr_[_secondLaff]
REF_651(uint256) -> REF_650.laffID
_thirdAff(uint256) := REF_651(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_affID,_secondLaff,_thirdAff)

IRs:
RETURN _affID,_secondLaff,_thirdAff"];
}
// Function: 1781.sol-F4Kings-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_163 = CONVERT 0 to address
TMP_164(bool) = _addr == TMP_163
CONDITION TMP_164"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_165(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_251(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_251(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_252(F3Ddatasets.Player) -> plyr_[_pID]
REF_253(bytes32) -> REF_252.name
REF_254(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_255(F3Ddatasets.PlayerRounds) -> REF_254[_rID]
REF_256(uint256) -> REF_255.keys
REF_257(F3Ddatasets.Player) -> plyr_[_pID]
REF_258(uint256) -> REF_257.win
REF_259(F3Ddatasets.Player) -> plyr_[_pID]
REF_260(uint256) -> REF_259.gen
REF_262(F3Ddatasets.Player) -> plyr_[_pID]
REF_263(uint256) -> REF_262.lrnd
TMP_166(uint256) = INTERNAL_CALL, F4Kings.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_263)
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_260', 'TMP_166'] 
REF_264(F3Ddatasets.Player) -> plyr_[_pID]
REF_265(uint256) -> REF_264.aff
REF_266(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_267(F3Ddatasets.PlayerRounds) -> REF_266[_rID]
REF_268(uint256) -> REF_267.eth
RETURN _pID,REF_253,REF_256,REF_258,TMP_167,REF_265,REF_268"];
}
// Function: 1781.sol-F4Kings-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_161(F3Ddatasets.Round) -> round_[_rID]
REF_162(uint256) -> REF_161.end
TMP_135(bool) = now > REF_162
REF_163(F3Ddatasets.Round) -> round_[_rID]
REF_164(bool) -> REF_163.ended
TMP_136(bool) = REF_164 == False
TMP_137(bool) = TMP_135 && TMP_136
REF_165(F3Ddatasets.Round) -> round_[_rID]
REF_166(uint256) -> REF_165.plyr
TMP_138(bool) = REF_166 != 0
TMP_139(bool) = TMP_137 && TMP_138
CONDITION TMP_139"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_167(F3Ddatasets.Round) -> round_[_rID]
REF_168(uint256) -> REF_167.plyr
TMP_140(bool) = REF_168 == _pID
CONDITION TMP_140"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_169(F3Ddatasets.Player) -> plyr_[_pID]
REF_170(uint256) -> REF_169.win
REF_172(F3Ddatasets.Round) -> round_[_rID]
REF_173(uint256) -> REF_172.pot
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_173', '48'] 
TMP_142(uint256) = TMP_141 / 100
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_170', 'TMP_142'] 
REF_175(F3Ddatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.gen
TMP_144(uint256) = INTERNAL_CALL, F4Kings.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_179(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_180(F3Ddatasets.PlayerRounds) -> REF_179[_rID]
REF_181(uint256) -> REF_180.mask
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_144', 'REF_181'] 
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_176', 'TMP_145'] 
REF_182(F3Ddatasets.Player) -> plyr_[_pID]
REF_183(uint256) -> REF_182.aff
RETURN TMP_143,TMP_146,REF_183"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_184(F3Ddatasets.Player) -> plyr_[_pID]
REF_185(uint256) -> REF_184.win
REF_186(F3Ddatasets.Player) -> plyr_[_pID]
REF_187(uint256) -> REF_186.gen
TMP_147(uint256) = INTERNAL_CALL, F4Kings.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_190(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_191(F3Ddatasets.PlayerRounds) -> REF_190[_rID]
REF_192(uint256) -> REF_191.mask
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_147', 'REF_192'] 
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_187', 'TMP_148'] 
REF_193(F3Ddatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.aff
RETURN REF_185,TMP_149,REF_194"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_195(F3Ddatasets.Player) -> plyr_[_pID]
REF_196(uint256) -> REF_195.win
REF_197(F3Ddatasets.Player) -> plyr_[_pID]
REF_198(uint256) -> REF_197.gen
REF_200(F3Ddatasets.Player) -> plyr_[_pID]
REF_201(uint256) -> REF_200.lrnd
TMP_150(uint256) = INTERNAL_CALL, F4Kings.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_201)
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_198', 'TMP_150'] 
REF_202(F3Ddatasets.Player) -> plyr_[_pID]
REF_203(uint256) -> REF_202.aff
RETURN REF_196,TMP_151,REF_203"];
}
// Function: 1781.sol-F4Kings-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_204(F3Ddatasets.Round) -> round_[_rID]
REF_205(uint256) -> REF_204.mask
REF_207(F3Ddatasets.Round) -> round_[_rID]
REF_208(uint256) -> REF_207.pot
REF_210(F3Ddatasets.Round) -> round_[_rID]
REF_211(uint256) -> REF_210.team
REF_212(F3Ddatasets.PotSplit) -> potSplit_[REF_211]
REF_213(uint256) -> REF_212.gen
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_208', 'REF_213'] 
TMP_153(uint256) = TMP_152 / 100
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_153', '1000000000000000000'] 
REF_215(F3Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.keys
TMP_155(uint256) = TMP_154 / REF_216
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_205', 'TMP_155'] 
REF_218(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_219(F3Ddatasets.PlayerRounds) -> REF_218[_rID]
REF_220(uint256) -> REF_219.keys
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_156', 'REF_220'] 
TMP_158(uint256) = TMP_157 / 1000000000000000000
RETURN TMP_158"];
}
// Function: 1781.sol-F4Kings-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_129(bool) = _now < REF_152
CONDITION TMP_129"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(uint256) -> REF_153.strt
TMP_130(uint256) = REF_154 + rndGap_
TMP_131(bool) = _now > TMP_130
CONDITION TMP_131"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_155(F3Ddatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.end
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_156', '_now'] 
RETURN TMP_132"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_158(F3Ddatasets.Round) -> round_[_rID]
REF_159(uint256) -> REF_158.strt
TMP_133(uint256) = REF_159 + rndGap_
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_133', '_now'] 
RETURN TMP_134"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1781.sol-F4Kings-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_430(F3Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.strt
TMP_261(uint256) = REF_431 + rndGap_
TMP_262(bool) = _now > TMP_261
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.end
TMP_263(bool) = _now <= REF_433
REF_434(F3Ddatasets.Round) -> round_[_rID]
REF_435(uint256) -> REF_434.end
TMP_264(bool) = _now > REF_435
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.plyr
TMP_265(bool) = REF_437 == 0
TMP_266(bool) = TMP_264 && TMP_265
TMP_267(bool) = TMP_263 || TMP_266
TMP_268(bool) = TMP_262 && TMP_267
CONDITION TMP_268"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_438(F3Ddatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.keys
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_439', '_keys'] 
TMP_270(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_269', '_keys'] 
RETURN TMP_270"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_271(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_271"];
}
// Function: 1781.sol-F4Kings-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_465(bool) = activated_ == True
TMP_466(None) = SOLIDITY_CALL require(bool,string)(TMP_465,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1781.sol-F4Kings-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_467(bool) = _codeLength == 0
TMP_468(None) = SOLIDITY_CALL require(bool,string)(TMP_467,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1781.sol-F4Kings-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_469(bool) = _eth >= 1000000000
TMP_470(None) = SOLIDITY_CALL require(bool,string)(TMP_469,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_471(bool) = _eth <= 100000000000000000000000
TMP_472(None) = SOLIDITY_CALL require(bool,string)(TMP_471,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1781.sol-F4Kings-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_483(F3Ddatasets.Player) -> plyr_[_pID]
REF_484(uint256) -> REF_483.lrnd
TMP_297(bool) = REF_484 != 0
CONDITION TMP_297"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.lrnd
INTERNAL_CALL, F4Kings.updateGenVault(uint256,uint256)(_pID,REF_486)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_487(F3Ddatasets.Player) -> plyr_[_pID]
REF_488(uint256) -> REF_487.lrnd
REF_488(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_489(uint256) -> _eventData_.compressedData
REF_490(uint256) -> _eventData_.compressedData
TMP_299(uint256) = REF_490 + 10
REF_489(uint256) (->_eventData_) := TMP_299(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1781.sol-F4Kings-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_415(uint256) = rID_ + 1
_rID(uint256) := TMP_415(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_652(F3Ddatasets.Round) -> round_[_rID]
REF_653(uint256) -> REF_652.pot
REF_654(F3Ddatasets.Round) -> round_[_rID]
REF_655(uint256) -> REF_654.pot
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_655', 'msg.value'] 
REF_653(uint256) (->round_) := TMP_416(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 1781.sol-F4Kings-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_303(F3Ddatasets.Round) -> round_[_rID]
REF_304(uint256) -> REF_303.strt
TMP_186(uint256) = REF_304 + rndGap_
TMP_187(bool) = _now > TMP_186
REF_305(F3Ddatasets.Round) -> round_[_rID]
REF_306(uint256) -> REF_305.end
TMP_188(bool) = _now <= REF_306
REF_307(F3Ddatasets.Round) -> round_[_rID]
REF_308(uint256) -> REF_307.end
TMP_189(bool) = _now > REF_308
REF_309(F3Ddatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.plyr
TMP_190(bool) = REF_310 == 0
TMP_191(bool) = TMP_189 && TMP_190
TMP_192(bool) = TMP_188 || TMP_191
TMP_193(bool) = TMP_187 && TMP_192
CONDITION TMP_193"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_311(F3Ddatasets.Player) -> plyr_[_pID]
REF_312(uint256) -> REF_311.gen
TMP_194(uint256) = INTERNAL_CALL, F4Kings.withdrawEarnings(uint256)(_pID)
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_194', '_eth'] 
REF_312(uint256) (->plyr_) := TMP_195(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_314(F3Ddatasets.Round) -> round_[_rID]
REF_315(uint256) -> REF_314.end
TMP_197(bool) = _now > REF_315
REF_316(F3Ddatasets.Round) -> round_[_rID]
REF_317(bool) -> REF_316.ended
TMP_198(bool) = REF_317 == False
TMP_199(bool) = TMP_197 && TMP_198
CONDITION TMP_199"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_318(F3Ddatasets.Round) -> round_[_rID]
REF_319(bool) -> REF_318.ended
REF_319(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_200(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_200(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_320(uint256) -> _eventData_.compressedData
REF_321(uint256) -> _eventData_.compressedData
TMP_201(uint256) = _now * 1000000000000000000
TMP_202(uint256) = REF_321 + TMP_201
REF_320(uint256) (->_eventData_) := TMP_202(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_322(uint256) -> _eventData_.compressedIDs
REF_323(uint256) -> _eventData_.compressedIDs
TMP_203(uint256) = REF_323 + _pID
REF_322(uint256) (->_eventData_) := TMP_203(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_325(F3Ddatasets.Player) -> plyr_[_pID]
REF_326(bytes32) -> REF_325.name
REF_327(uint256) -> _eventData_.compressedData
REF_328(uint256) -> _eventData_.compressedIDs
REF_329(address) -> _eventData_.winnerAddr
REF_330(bytes32) -> _eventData_.winnerName
REF_331(uint256) -> _eventData_.amountWon
REF_332(uint256) -> _eventData_.newPot
REF_333(uint256) -> _eventData_.P3DAmount
REF_334(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_326,REF_327,REF_328,REF_329,REF_330,REF_331,REF_332,REF_333,REF_334)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1781.sol-F4Kings-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_57(bool) = _affID != REF_56
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, F4Kings.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, F4Kings.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1781.sol-F4Kings-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_47(bool) = _affCode != REF_48
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, F4Kings.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, F4Kings.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 1781.sol-F4Kings-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_64(bool) = _affCode == REF_61
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_66(bool) = _affID != REF_66
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, F4Kings.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, F4Kings.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, F4Kings.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 1781.sol-F4Kings-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_272 = CONVERT PlayerBook to address
TMP_273(bool) = msg.sender == TMP_272
TMP_274(None) = SOLIDITY_CALL require(bool,string)(TMP_273,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_443(uint256) -> pIDxAddr_[_addr]
TMP_275(bool) = REF_443 != _pID
CONDITION TMP_275"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_444(uint256) -> pIDxAddr_[_addr]
REF_444(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_445(uint256) -> pIDxName_[_name]
TMP_276(bool) = REF_445 != _pID
CONDITION TMP_276"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_446(uint256) -> pIDxName_[_name]
REF_446(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_447(F3Ddatasets.Player) -> plyr_[_pID]
REF_448(address) -> REF_447.addr
TMP_277(bool) = REF_448 != _addr
CONDITION TMP_277"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_449(F3Ddatasets.Player) -> plyr_[_pID]
REF_450(address) -> REF_449.addr
REF_450(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_451(F3Ddatasets.Player) -> plyr_[_pID]
REF_452(bytes32) -> REF_451.name
TMP_278(bool) = REF_452 != _name
CONDITION TMP_278"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_453(F3Ddatasets.Player) -> plyr_[_pID]
REF_454(bytes32) -> REF_453.name
REF_454(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_455(F3Ddatasets.Player) -> plyr_[_pID]
REF_456(uint256) -> REF_455.laff
TMP_279(bool) = REF_456 != _laff
CONDITION TMP_279"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_pID]
REF_458(uint256) -> REF_457.laff
REF_458(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_459(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_460(bool) -> REF_459[_name]
TMP_280(bool) = REF_460 == False
CONDITION TMP_280"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_461(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_462(bool) -> REF_461[_name]
REF_462(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1781.sol-F4Kings-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_281 = CONVERT PlayerBook to address
TMP_282(bool) = msg.sender == TMP_281
TMP_283(None) = SOLIDITY_CALL require(bool,string)(TMP_282,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_463(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_464(bool) -> REF_463[_name]
TMP_284(bool) = REF_464 == False
CONDITION TMP_284"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_465(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_466(bool) -> REF_465[_name]
REF_466(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1781.sol-F4Kings-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_107(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_107(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_115(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_115(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_117(F3Ddatasets.Player) -> plyr_[_affID]
REF_118(address) -> REF_117.addr
REF_119(F3Ddatasets.Player) -> plyr_[_affID]
REF_120(bytes32) -> REF_119.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_118,REF_120,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
9->1;
}
// Function: 1781.sol-F4Kings-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_111(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_111(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_124(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_124(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_126(F3Ddatasets.Player) -> plyr_[_affID]
REF_127(address) -> REF_126.addr
REF_128(F3Ddatasets.Player) -> plyr_[_affID]
REF_129(bytes32) -> REF_128.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_127,REF_129,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
9->1;
}
// Function: 1781.sol-F4Kings-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_115(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_115(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_133(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_133(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_135(F3Ddatasets.Player) -> plyr_[_affID]
REF_136(address) -> REF_135.addr
REF_137(F3Ddatasets.Player) -> plyr_[_affID]
REF_138(bytes32) -> REF_137.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_136,REF_138,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
9->1;
}
// Function: 1781.sol-F4Kings-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0xf626967fA13d841fd74D49dEe9bDd0D0dD6C4394)

IRs:
TMP_464 = CONVERT 1405272268213284166867429117896180896936806335380 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_464(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = f4kings

IRs:
name(string) := f4kings(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = f4kings

IRs:
symbol(string) := f4kings(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 86400

IRs:
rndInit_(uint256) := 86400(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 20

IRs:
rndInc_(uint256) := 20(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndLimit_ = 3

IRs:
rndLimit_(uint256) := 3(uint256)"];
}
// Function: 1781.sol-F4Kings-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
shareCom = 0x431C4354dB7f2b9aC1d9B2019e925C85C725DA5c

IRs:
shareCom(address) := 383132667909393592049614162551608847602001762908(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndGap_ = 120

IRs:
rndGap_(uint256) := 120(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 1781.sol-F4Kings-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_334(uint256) = INTERNAL_CALL, F4Kings.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_334(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_335(bool) = _earnings > 0
CONDITION TMP_335"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_551(F3Ddatasets.Player) -> plyr_[_pID]
REF_552(uint256) -> REF_551.gen
REF_554(F3Ddatasets.Player) -> plyr_[_pID]
REF_555(uint256) -> REF_554.gen
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_555'] 
REF_552(uint256) (->plyr_) := TMP_336(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_556(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_557(F3Ddatasets.PlayerRounds) -> REF_556[_rIDlast]
REF_558(uint256) -> REF_557.mask
REF_560(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_561(F3Ddatasets.PlayerRounds) -> REF_560[_rIDlast]
REF_562(uint256) -> REF_561.mask
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_562'] 
REF_558(uint256) (->plyrRnds_) := TMP_337(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1781.sol-F4Kings-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_677(F3Ddatasets.Round) -> round_[_rID]
REF_678(uint256) -> REF_677.keys
TMP_433(uint256) = TMP_432 / REF_678
_ppt(uint256) := TMP_433(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_679(F3Ddatasets.Round) -> round_[_rID]
REF_680(uint256) -> REF_679.mask
REF_682(F3Ddatasets.Round) -> round_[_rID]
REF_683(uint256) -> REF_682.mask
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_683'] 
REF_680(uint256) (->round_) := TMP_434(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_436(uint256) = TMP_435 / 1000000000000000000
_pearn(uint256) := TMP_436(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_685(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_686(F3Ddatasets.PlayerRounds) -> REF_685[_rID]
REF_687(uint256) -> REF_686.mask
REF_688(F3Ddatasets.Round) -> round_[_rID]
REF_689(uint256) -> REF_688.mask
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_689', '_keys'] 
TMP_438(uint256) = TMP_437 / 1000000000000000000
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_438', '_pearn'] 
REF_693(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_694(F3Ddatasets.PlayerRounds) -> REF_693[_rID]
REF_695(uint256) -> REF_694.mask
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_439', 'REF_695'] 
REF_687(uint256) (->plyrRnds_) := TMP_440(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_698(F3Ddatasets.Round) -> round_[_rID]
REF_699(uint256) -> REF_698.keys
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_699'] 
TMP_442(uint256) = TMP_441 / 1000000000000000000
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_442'] 
RETURN TMP_443"];
}
// Function: 1781.sol-F4Kings-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_rndInc = rndInc_

IRs:
_rndInc(uint256) := rndInc_(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].pot > rndLimit_

IRs:
REF_563(F3Ddatasets.Round) -> round_[_rID]
REF_564(uint256) -> REF_563.pot
TMP_338(bool) = REF_564 > rndLimit_
CONDITION TMP_338"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_rndInc = _rndInc / 2

IRs:
TMP_339(uint256) = _rndInc / 2
_rndInc(uint256) := TMP_339(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_565(F3Ddatasets.Round) -> round_[_rID]
REF_566(uint256) -> REF_565.end
TMP_340(bool) = _now > REF_566
REF_567(F3Ddatasets.Round) -> round_[_rID]
REF_568(uint256) -> REF_567.plyr
TMP_341(bool) = REF_568 == 0
TMP_342(bool) = TMP_340 && TMP_341
CONDITION TMP_342"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(_rndInc)).add(_now)

IRs:
TMP_343(uint256) = _keys / 1000000000000000000
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_343', '_rndInc'] 
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_344', '_now'] 
_newTime(uint256) := TMP_345(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(_rndInc)).add(round_[_rID].end)

IRs:
TMP_346(uint256) = _keys / 1000000000000000000
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_346', '_rndInc'] 
REF_573(F3Ddatasets.Round) -> round_[_rID]
REF_574(uint256) -> REF_573.end
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_347', 'REF_574'] 
_newTime(uint256) := TMP_348(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_350(bool) = _newTime < TMP_349
CONDITION TMP_350"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_576(F3Ddatasets.Round) -> round_[_rID]
REF_577(uint256) -> REF_576.end
REF_577(uint256) (->round_) := _newTime(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_578(F3Ddatasets.Round) -> round_[_rID]
REF_579(uint256) -> REF_578.end
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_579(uint256) (->round_) := TMP_351(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
}
// Function: 1781.sol-F4Kings-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_294(bool) = _team < 0
TMP_295(bool) = _team > 3
TMP_296(bool) = TMP_294 || TMP_295
CONDITION TMP_296"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 1781.sol-F4Kings-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->33;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_72(bool) = _now > REF_71
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_73(bool) = REF_73 == False
TMP_74(bool) = TMP_72 && TMP_73
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_75(bool) = REF_75 != 0
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
6->7[label="True"];
6->22[label="False"];
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(F3Ddatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_77(F3Ddatasets.EventReturns) = INTERNAL_CALL, F4Kings.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_77(F3Ddatasets.EventReturns)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_78(uint256) = INTERNAL_CALL, F4Kings.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_78(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_eth > 0

IRs:
TMP_79(bool) = _eth > 0
CONDITION TMP_79"];
11->12[label="True"];
11->18[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_withdrawFee = _eth / 10

IRs:
TMP_80(uint256) = _eth / 10
_withdrawFee(uint256) := TMP_80(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_p1 = _withdrawFee.mul(65) / 100

IRs:
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_withdrawFee', '65'] 
TMP_82(uint256) = TMP_81 / 100
_p1(uint256) := TMP_82(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_p2 = _withdrawFee.mul(35) / 100

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_withdrawFee', '35'] 
TMP_84(uint256) = TMP_83 / 100
_p2(uint256) := TMP_84(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
shareCom.transfer(_p1)

IRs:
Transfer dest:shareCom value:_p1"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
admin.transfer(_p2)

IRs:
Transfer dest:admin value:_p2"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[_pID].addr.transfer(_eth.sub(_withdrawFee))

IRs:
REF_82(F3Ddatasets.Player) -> plyr_[_pID]
REF_83(address) -> REF_82.addr
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_withdrawFee'] 
Transfer dest:REF_83 value:TMP_87"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_86(uint256) -> _eventData_.compressedData
REF_87(uint256) -> _eventData_.compressedData
TMP_89(uint256) = _now * 1000000000000000000
TMP_90(uint256) = REF_87 + TMP_89
REF_86(uint256) (->_eventData_) := TMP_90(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_88(uint256) -> _eventData_.compressedIDs
REF_89(uint256) -> _eventData_.compressedIDs
TMP_91(uint256) = REF_89 + _pID
REF_88(uint256) (->_eventData_) := TMP_91(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_91(F3Ddatasets.Player) -> plyr_[_pID]
REF_92(bytes32) -> REF_91.name
REF_93(uint256) -> _eventData_.compressedData
REF_94(uint256) -> _eventData_.compressedIDs
REF_95(address) -> _eventData_.winnerAddr
REF_96(bytes32) -> _eventData_.winnerName
REF_97(uint256) -> _eventData_.amountWon
REF_98(uint256) -> _eventData_.newPot
REF_99(uint256) -> _eventData_.P3DAmount
REF_100(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_92,_eth,REF_93,REF_94,REF_95,REF_96,REF_97,REF_98,REF_99,REF_100)"];
21->32;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_93(uint256) = INTERNAL_CALL, F4Kings.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_93(uint256)"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_eth > 0

IRs:
TMP_94(bool) = _eth > 0
CONDITION TMP_94"];
23->24[label="True"];
23->30[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_withdrawFee = _eth / 10

IRs:
TMP_95(uint256) = _eth / 10
_withdrawFee(uint256) := TMP_95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_p1 = _withdrawFee.mul(65) / 100

IRs:
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_withdrawFee', '65'] 
TMP_97(uint256) = TMP_96 / 100
_p1(uint256) := TMP_97(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_p2 = _withdrawFee.mul(35) / 100

IRs:
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_withdrawFee', '35'] 
TMP_99(uint256) = TMP_98 / 100
_p2(uint256) := TMP_99(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
shareCom.transfer(_p1)

IRs:
Transfer dest:shareCom value:_p1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
admin.transfer(_p2)

IRs:
Transfer dest:admin value:_p2"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
plyr_[_pID].addr.transfer(_eth.sub(_withdrawFee))

IRs:
REF_105(F3Ddatasets.Player) -> plyr_[_pID]
REF_106(address) -> REF_105.addr
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_withdrawFee'] 
Transfer dest:REF_106 value:TMP_102"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_110(F3Ddatasets.Player) -> plyr_[_pID]
REF_111(bytes32) -> REF_110.name
Emit onWithdraw(_pID,msg.sender,REF_111,_eth,_now)"];
31->32;
32[label="Node Type: END_IF 32
"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F4Kings.isActivated()()"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F4Kings.isHuman()()"];
34->1;
}
// Function: 1781.sol-F4Kings-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_700(F3Ddatasets.Player) -> plyr_[_pID]
REF_701(uint256) -> REF_700.lrnd
INTERNAL_CALL, F4Kings.updateGenVault(uint256,uint256)(_pID,REF_701)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_702(F3Ddatasets.Player) -> plyr_[_pID]
REF_703(uint256) -> REF_702.win
REF_705(F3Ddatasets.Player) -> plyr_[_pID]
REF_706(uint256) -> REF_705.gen
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_703', 'REF_706'] 
REF_708(F3Ddatasets.Player) -> plyr_[_pID]
REF_709(uint256) -> REF_708.aff
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_445', 'REF_709'] 
_earnings(uint256) := TMP_446(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_447(bool) = _earnings > 0
CONDITION TMP_447"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_710(F3Ddatasets.Player) -> plyr_[_pID]
REF_711(uint256) -> REF_710.win
REF_711(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_712(F3Ddatasets.Player) -> plyr_[_pID]
REF_713(uint256) -> REF_712.gen
REF_713(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_714(F3Ddatasets.Player) -> plyr_[_pID]
REF_715(uint256) -> REF_714.aff
REF_715(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1781.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_495 = CONVERT _input to bytes
_temp(bytes) := TMP_495(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_751 -> LENGTH _temp
_length(uint256) := REF_751(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_496(bool) = _length <= 32
TMP_497(bool) = _length > 0
TMP_498(bool) = TMP_496 && TMP_497
TMP_499(None) = SOLIDITY_CALL require(bool,string)(TMP_498,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_752(None) -> _temp[0]
TMP_500(bool) = REF_752 != 32
TMP_501(uint256) = _length - 1
REF_753(None) -> _temp[TMP_501]
TMP_502(bool) = REF_753 != 32
TMP_503(bool) = TMP_500 && TMP_502
TMP_504(None) = SOLIDITY_CALL require(bool,string)(TMP_503,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_754(None) -> _temp[0]
TMP_505(bool) = REF_754 == 48
CONDITION TMP_505"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_755(None) -> _temp[1]
TMP_506(bool) = REF_755 != 120
TMP_507(None) = SOLIDITY_CALL require(bool,string)(TMP_506,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_756(None) -> _temp[1]
TMP_508(bool) = REF_756 != 88
TMP_509(None) = SOLIDITY_CALL require(bool,string)(TMP_508,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_510(bool) = i < _length
CONDITION TMP_510"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_757(None) -> _temp[i]
TMP_511(bool) = REF_757 > 64
REF_758(None) -> _temp[i]
TMP_512(bool) = REF_758 < 91
TMP_513(bool) = TMP_511 && TMP_512
CONDITION TMP_513"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_759(bytes1) -> _temp[i]
REF_760(None) -> _temp[i]
TMP_514 = CONVERT REF_760 to uint256
TMP_515(uint256) = TMP_514 + 32
TMP_516 = CONVERT TMP_515 to bytes1
REF_759(bytes1) (->_temp) := TMP_516(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_517(bool) = _hasNonNumber == False
CONDITION TMP_517"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_761(None) -> _temp[i]
TMP_518(bool) = REF_761 == 32
REF_762(None) -> _temp[i]
TMP_519(bool) = REF_762 > 96
REF_763(None) -> _temp[i]
TMP_520(bool) = REF_763 < 123
TMP_521(bool) = TMP_519 && TMP_520
TMP_522(bool) = TMP_518 || TMP_521
REF_764(None) -> _temp[i]
TMP_523(bool) = REF_764 > 47
REF_765(None) -> _temp[i]
TMP_524(bool) = REF_765 < 58
TMP_525(bool) = TMP_523 && TMP_524
TMP_526(bool) = TMP_522 || TMP_525
TMP_527(None) = SOLIDITY_CALL require(bool,string)(TMP_526,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_766(None) -> _temp[i]
TMP_528(bool) = REF_766 == 32
CONDITION TMP_528"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_529(uint256) = i + 1
REF_767(None) -> _temp[TMP_529]
TMP_530(bool) = REF_767 != 32
TMP_531(None) = SOLIDITY_CALL require(bool,string)(TMP_530,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_532(bool) = _hasNonNumber == False
REF_768(None) -> _temp[i]
TMP_533(bool) = REF_768 < 48
REF_769(None) -> _temp[i]
TMP_534(bool) = REF_769 > 57
TMP_535(bool) = TMP_533 || TMP_534
TMP_536(bool) = TMP_532 && TMP_535
CONDITION TMP_536"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_537(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_538(bool) = _hasNonNumber == True
TMP_539(None) = SOLIDITY_CALL require(bool,string)(TMP_538,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1781.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1781.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1781.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1781.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1781.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1781.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1781.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1781.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1781.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_548(uint256) = a + b
c(uint256) := TMP_548(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_549(bool) = c >= a
TMP_550(None) = SOLIDITY_CALL require(bool,string)(TMP_549,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1781.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_540(bool) = a == 0
CONDITION TMP_540"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_541(uint256) = a * b
c(uint256) := TMP_541(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_542(uint256) = c / a
TMP_543(bool) = TMP_542 == b
TMP_544(None) = SOLIDITY_CALL require(bool,string)(TMP_543,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1781.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_558(bool) = x == 0
CONDITION TMP_558"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_559(bool) = y == 0
CONDITION TMP_559"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_560(bool) = i < y
CONDITION TMP_560"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_561(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_561(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_562(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1781.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_557(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_557"];
}
// Function: 1781.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_551(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_552(uint256) = TMP_551 / 2
z(uint256) := TMP_552(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_553(bool) = z < y
CONDITION TMP_553"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_554(uint256) = x / z
TMP_555(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_554,z)
TMP_556(uint256) = TMP_555 / 2
z(uint256) := TMP_556(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1781.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_545(bool) = b <= a
TMP_546(None) = SOLIDITY_CALL require(bool,string)(TMP_545,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_547(uint256) = a - b
RETURN TMP_547"];
}
}
