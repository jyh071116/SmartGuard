digraph G {
// Function: 1849.sol-AccessDeploy-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-AccessDeploy-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_168 = CONVERT 0 to address
pendingOwner(address) := TMP_168(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 1849.sol-AccessDeploy-grantAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = true

IRs:
REF_82(bool) -> deployAccess[_address]
REF_82(bool) (->deployAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-AccessDeploy-onlyAccessDeploy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || deployAccess[msg.sender] == true)

IRs:
TMP_181(bool) = msg.sender == owner
REF_84(bool) -> deployAccess[msg.sender]
TMP_182(bool) = REF_84 == True
TMP_183(bool) = TMP_181 || TMP_182
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessDeploy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_179(bool) = msg.sender == owner
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessDeploy-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_177(bool) = msg.sender == pendingOwner
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessDeploy-revokeAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = false

IRs:
REF_83(bool) -> deployAccess[_address]
REF_83(bool) (->deployAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-AccessDeploy-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_170 = CONVERT 0 to address
TMP_171(bool) = newOwner != TMP_170
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-AccessDeposit-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-AccessDeposit-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_149 = CONVERT 0 to address
pendingOwner(address) := TMP_149(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 1849.sol-AccessDeposit-grantAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = true

IRs:
REF_79(bool) -> depositAccess[_address]
REF_79(bool) (->depositAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-AccessDeposit-onlyAccessDeposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || depositAccess[msg.sender] == true)

IRs:
TMP_162(bool) = msg.sender == owner
REF_81(bool) -> depositAccess[msg.sender]
TMP_163(bool) = REF_81 == True
TMP_164(bool) = TMP_162 || TMP_163
TMP_165(None) = SOLIDITY_CALL require(bool)(TMP_164)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessDeposit-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_160(bool) = msg.sender == owner
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessDeposit-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_158(bool) = msg.sender == pendingOwner
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessDeposit-revokeAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = false

IRs:
REF_80(bool) -> depositAccess[_address]
REF_80(bool) (->depositAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-AccessDeposit-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_151 = CONVERT 0 to address
TMP_152(bool) = newOwner != TMP_151
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-AccessMint-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-AccessMint-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_187 = CONVERT 0 to address
pendingOwner(address) := TMP_187(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 1849.sol-AccessMint-grantAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = true

IRs:
REF_85(bool) -> mintAccess[_address]
REF_85(bool) (->mintAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-AccessMint-onlyAccessMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || mintAccess[msg.sender] == true)

IRs:
TMP_200(bool) = msg.sender == owner
REF_87(bool) -> mintAccess[msg.sender]
TMP_201(bool) = REF_87 == True
TMP_202(bool) = TMP_200 || TMP_201
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessMint-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_198(bool) = msg.sender == owner
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessMint-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_196(bool) = msg.sender == pendingOwner
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-AccessMint-revokeAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = false

IRs:
REF_86(bool) -> mintAccess[_address]
REF_86(bool) (->mintAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-AccessMint-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_189 = CONVERT 0 to address
TMP_190(bool) = newOwner != TMP_189
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_36(uint256) -> balances[_owner]
RETURN REF_36"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1849.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1849.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _to != TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_29(uint256) -> balances[msg.sender]
TMP_117(bool) = _value <= REF_29
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_31(uint256) -> balances[msg.sender]
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_31', '_value'] 
REF_30(uint256) (->balances) := TMP_119(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_33(uint256) -> balances[_to]
REF_34(uint256) -> balances[_to]
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_34', '_value'] 
REF_33(uint256) (->balances) := TMP_120(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1849.sol-Claimable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-Claimable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
pendingOwner(address) := TMP_26(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 1849.sol-Claimable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_28(bool) = msg.sender == owner
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Claimable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_30(bool) = msg.sender == pendingOwner
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Claimable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCard-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-CryptoSagaCard-_burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
approvedFor(_tokenId) != 0

IRs:
TMP_288(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_289(bool) = TMP_288 != 0
CONDITION TMP_289"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clearApproval(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(msg.sender,_tokenId)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeToken(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(msg.sender,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,0x0,_tokenId)

IRs:
Emit Transfer(msg.sender,0,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 1849.sol-CryptoSagaCard-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_283 = CONVERT 0 to address
TMP_284(bool) = _to != TMP_283
TMP_285(None) = SOLIDITY_CALL require(bool)(TMP_284)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0x0,_to,_tokenId)

IRs:
Emit Transfer(0,_to,_tokenId)"];
}
// Function: 1849.sol-CryptoSagaCard-addToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_146(address) -> tokenOwner[_tokenId]
TMP_313 = CONVERT 0 to address
TMP_314(bool) = REF_146 == TMP_313
TMP_315(None) = SOLIDITY_CALL require(bool)(TMP_314)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_147(address) -> tokenOwner[_tokenId]
REF_147(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = balanceOf(_to)

IRs:
TMP_316(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_to)
length(uint256) := TMP_316(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_148(uint256[]) -> ownedTokens[_to]
REF_150 -> LENGTH REF_148
TMP_318(uint256) := REF_150(uint256)
TMP_319(uint256) = TMP_318 + 1
REF_150(uint256) (->ownedTokens) := TMP_319(uint256)
REF_151(uint256) -> REF_148[TMP_318]
REF_151(uint256) (->ownedTokens) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_152(uint256) -> ownedTokensIndex[_tokenId]
REF_152(uint256) (->ownedTokensIndex) := length(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalTokens = totalTokens.add(1)

IRs:
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_320(uint256)"];
}
// Function: 1849.sol-CryptoSagaCard-approve(address,uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaCard-approvedFor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_143(address) -> tokenApprovals[_tokenId]
RETURN REF_143"];
}
// Function: 1849.sol-CryptoSagaCard-balanceOf(address)
digraph{
}
// Function: 1849.sol-CryptoSagaCard-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_258 = CONVERT 0 to address
pendingOwner(address) := TMP_258(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaCard-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_309(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_310(bool) = TMP_309 == _owner
TMP_311(None) = SOLIDITY_CALL require(bool)(TMP_310)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenApprovals[_tokenId] = 0

IRs:
REF_145(address) -> tokenApprovals[_tokenId]
REF_145(address) (->tokenApprovals) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(_owner,0,_tokenId)

IRs:
Emit Approval(_owner,0,_tokenId)"];
}
// Function: 1849.sol-CryptoSagaCard-clearApprovalAndTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_296 = CONVERT 0 to address
TMP_297(bool) = _to != TMP_296
TMP_298(None) = SOLIDITY_CALL require(bool)(TMP_297)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != ownerOf(_tokenId))

IRs:
TMP_299(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_300(bool) = _to != TMP_299
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_302(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_303(bool) = TMP_302 == _from
TMP_304(None) = SOLIDITY_CALL require(bool)(TMP_303)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeToken(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 1849.sol-CryptoSagaCard-grantAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = true

IRs:
REF_137(bool) -> mintAccess[_address]
REF_137(bool) (->mintAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCard-isApprovedFor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
approvedFor(_tokenId) == _owner

IRs:
TMP_294(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_295(bool) = TMP_294 == _owner
RETURN TMP_295"];
}
// Function: 1849.sol-CryptoSagaCard-mint(address,uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _amount

IRs:
TMP_330(bool) = i < _amount
CONDITION TMP_330"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_mint(_beneficiary,numberOfTokenId)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(_beneficiary,numberOfTokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenIdToRank[numberOfTokenId] = _rank

IRs:
REF_169(uint8) -> tokenIdToRank[numberOfTokenId]
REF_169(uint8) (->tokenIdToRank) := _rank(uint8)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
numberOfTokenId ++

IRs:
TMP_332(uint256) := numberOfTokenId(uint256)
numberOfTokenId(uint256) = numberOfTokenId + 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_333(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAccessMint()

IRs:
MODIFIER_CALL, AccessMint.onlyAccessMint()()"];
9->3;
}
// Function: 1849.sol-CryptoSagaCard-onlyAccessMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || mintAccess[msg.sender] == true)

IRs:
TMP_344(bool) = msg.sender == owner
REF_172(bool) -> mintAccess[msg.sender]
TMP_345(bool) = REF_172 == True
TMP_346(bool) = TMP_344 || TMP_345
TMP_347(None) = SOLIDITY_CALL require(bool)(TMP_346)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCard-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_350(bool) = msg.sender == owner
TMP_351(None) = SOLIDITY_CALL require(bool)(TMP_350)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCard-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_352(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_353(bool) = TMP_352 == msg.sender
TMP_354(None) = SOLIDITY_CALL require(bool)(TMP_353)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCard-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_348(bool) = msg.sender == pendingOwner
TMP_349(None) = SOLIDITY_CALL require(bool)(TMP_348)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCard-ownerOf(uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaCard-rankOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToRank[_tokenId]

IRs:
REF_168(uint8) -> tokenIdToRank[_tokenId]
RETURN REF_168"];
}
// Function: 1849.sol-CryptoSagaCard-removeToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_321(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_322(bool) = TMP_321 == _from
TMP_323(None) = SOLIDITY_CALL require(bool)(TMP_322)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_154(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_154(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = balanceOf(_from).sub(1)

IRs:
TMP_324(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_from)
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_324', '1'] 
lastTokenIndex(uint256) := TMP_325(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_156(uint256[]) -> ownedTokens[_from]
REF_157(uint256) -> REF_156[lastTokenIndex]
lastToken(uint256) := REF_157(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenOwner[_tokenId] = 0

IRs:
REF_158(address) -> tokenOwner[_tokenId]
REF_158(address) (->tokenOwner) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_159(uint256[]) -> ownedTokens[_from]
REF_160(uint256) -> REF_159[tokenIndex]
REF_160(uint256) (->ownedTokens) := lastToken(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_161(uint256[]) -> ownedTokens[_from]
REF_162(uint256) -> REF_161[lastTokenIndex]
REF_162(uint256) (->ownedTokens) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_163(uint256[]) -> ownedTokens[_from]
REF_164 -> LENGTH REF_163
TMP_326(uint256) := REF_164(uint256)
REF_164(-> ownedTokens) = REF_164 - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_165(uint256) -> ownedTokensIndex[_tokenId]
REF_165(uint256) (->ownedTokensIndex) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_166(uint256) -> ownedTokensIndex[lastToken]
REF_166(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalTokens = totalTokens.sub(1)

IRs:
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_327(uint256)"];
}
// Function: 1849.sol-CryptoSagaCard-revokeAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = false

IRs:
REF_138(bool) -> mintAccess[_address]
REF_138(bool) (->mintAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCard-setCryptoSagaCardSwapContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
swapContract = CryptoSagaCardSwap(_contractAddress)

IRs:
TMP_328 = CONVERT _contractAddress to CryptoSagaCardSwap
swapContract(CryptoSagaCardSwap) := TMP_328(CryptoSagaCardSwap)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCard-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CryptoSaga Card

IRs:
name(string) := CryptoSaga Card(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CARD

IRs:
symbol(string) := CARD(string)"];
}
// Function: 1849.sol-CryptoSagaCard-swap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(swapContract) != address(0))

IRs:
TMP_335 = CONVERT swapContract to address
TMP_336 = CONVERT 0 to address
TMP_337(bool) = TMP_335 != TMP_336
TMP_338(None) = SOLIDITY_CALL require(bool)(TMP_337)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_rank = tokenIdToRank[_tokenId]

IRs:
REF_170(uint8) -> tokenIdToRank[_tokenId]
_rank(uint8) := REF_170(uint8)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_rewardId = swapContract.swapCardForReward(this,_rank)

IRs:
TMP_339(uint256) = HIGH_LEVEL_CALL, dest:swapContract(CryptoSagaCardSwap), function:swapCardForReward, arguments:['this', '_rank']  
_rewardId(uint256) := TMP_339(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
CardSwap(ownerOf(_tokenId),_tokenId,_rewardId)

IRs:
TMP_340(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
Emit CardSwap(TMP_340,_tokenId,_rewardId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_burn(_tokenId)

IRs:
INTERNAL_CALL, ERC721Token._burn(uint256)(_tokenId)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_rewardId

IRs:
RETURN _rewardId"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
7->1;
}
// Function: 1849.sol-CryptoSagaCard-takeOwnership(uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaCard-tokensOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner]

IRs:
REF_141(uint256[]) -> ownedTokens[_owner]
RETURN REF_141"];
}
// Function: 1849.sol-CryptoSagaCard-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalTokens

IRs:
RETURN totalTokens"];
}
// Function: 1849.sol-CryptoSagaCard-transfer(address,uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaCard-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_260 = CONVERT 0 to address
TMP_261(bool) = newOwner != TMP_260
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaCardSwap-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-CryptoSagaCardSwap-onlyCard()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cardAddess)

IRs:
TMP_363(bool) = msg.sender == cardAddess
TMP_364(None) = SOLIDITY_CALL require(bool)(TMP_363)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCardSwap-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_361(bool) = msg.sender == owner
TMP_362(None) = SOLIDITY_CALL require(bool)(TMP_361)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCardSwap-setCardContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cardAddess = _contractAddress

IRs:
cardAddess(address) := _contractAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCardSwap-swapCardForReward(address,uint8)
digraph{
}
// Function: 1849.sol-CryptoSagaCardSwap-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_355 = CONVERT 0 to address
TMP_356(bool) = newOwner != TMP_355
TMP_357(None) = SOLIDITY_CALL require(bool)(TMP_356)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-CryptoSagaCardSwapVer2(address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_heroAddress != address(0))

IRs:
TMP_631 = CONVERT 0 to address
TMP_632(bool) = _heroAddress != TMP_631
TMP_633(None) = SOLIDITY_CALL require(bool)(TMP_632)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_goldAddress != address(0))

IRs:
TMP_634 = CONVERT 0 to address
TMP_635(bool) = _goldAddress != TMP_634
TMP_636(None) = SOLIDITY_CALL require(bool)(TMP_635)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_cardAddress != address(0))

IRs:
TMP_637 = CONVERT 0 to address
TMP_638(bool) = _cardAddress != TMP_637
TMP_639(None) = SOLIDITY_CALL require(bool)(TMP_638)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_walletAddress != address(0))

IRs:
TMP_640 = CONVERT 0 to address
TMP_641(bool) = _walletAddress != TMP_640
TMP_642(None) = SOLIDITY_CALL require(bool)(TMP_641)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
wallet = _walletAddress

IRs:
wallet(address) := _walletAddress(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
heroContract = CryptoSagaHero(_heroAddress)

IRs:
TMP_643 = CONVERT _heroAddress to CryptoSagaHero
heroContract(CryptoSagaHero) := TMP_643(CryptoSagaHero)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
goldContract = Gold(_goldAddress)

IRs:
TMP_644 = CONVERT _goldAddress to Gold
goldContract(Gold) := TMP_644(Gold)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
setCardContract(_cardAddress)

IRs:
INTERNAL_CALL, CryptoSagaCardSwap.setCardContract(address)(_cardAddress)"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-addMileagePoint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_627 = CONVERT 0 to address
TMP_628(bool) = _beneficiary != TMP_627
TMP_629(None) = SOLIDITY_CALL require(bool)(TMP_628)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addressToMileagePoint[_beneficiary] += _point

IRs:
REF_334(uint256) -> addressToMileagePoint[_beneficiary]
REF_334(-> addressToMileagePoint) = REF_334 + _point"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-getFreeSummonTimestamp(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
addressToFreeSummonTimestamp[_address]

IRs:
REF_332(uint256) -> addressToFreeSummonTimestamp[_address]
RETURN REF_332"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-getMileagePoint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
addressToMileagePoint[_address]

IRs:
REF_331(uint256) -> addressToMileagePoint[_address]
RETURN REF_331"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-onlyCard()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cardAddess)

IRs:
TMP_762(bool) = msg.sender == cardAddess
TMP_763(None) = SOLIDITY_CALL require(bool)(TMP_762)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_760(bool) = msg.sender == owner
TMP_761(None) = SOLIDITY_CALL require(bool)(TMP_760)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-payWithDailyFreePoint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != address(0))

IRs:
TMP_722 = CONVERT 0 to address
TMP_723(bool) = msg.sender != TMP_722
TMP_724(None) = SOLIDITY_CALL require(bool)(TMP_723)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > addressToFreeSummonTimestamp[msg.sender] + 86400)

IRs:
REF_342(uint256) -> addressToFreeSummonTimestamp[msg.sender]
TMP_725(uint256) = REF_342 + 86400
TMP_726(bool) = now > TMP_725
TMP_727(None) = SOLIDITY_CALL require(bool)(TMP_726)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addressToFreeSummonTimestamp[msg.sender] = now

IRs:
REF_343(uint256) -> addressToFreeSummonTimestamp[msg.sender]
REF_343(uint256) (->addressToFreeSummonTimestamp) := now(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_randomValue = random(10000,0)

IRs:
TMP_728(uint32) = INTERNAL_CALL, CryptoSagaCardSwapVer2.random(uint32,uint32)(10000,0)
_randomValue(uint32) := TMP_728(uint32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_randomValue < 5500

IRs:
TMP_729(bool) = _randomValue < 5500
CONDITION TMP_729"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
7->12;
8[label="Node Type: IF 8

EXPRESSION:
_randomValue < 9850

IRs:
TMP_730(bool) = _randomValue < 9850
CONDITION TMP_730"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_heroRankToMint = 1

IRs:
_heroRankToMint(uint8) := 1(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_heroRankToMint = 2

IRs:
_heroRankToMint(uint8) := 2(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
summonHero(msg.sender,_heroRankToMint)

IRs:
TMP_731(uint256) = INTERNAL_CALL, CryptoSagaCardSwapVer2.summonHero(address,uint8)(msg.sender,_heroRankToMint)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
14->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-payWithEth(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->29;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != address(0))

IRs:
TMP_660 = CONVERT 0 to address
TMP_661(bool) = msg.sender != TMP_660
TMP_662(None) = SOLIDITY_CALL require(bool)(TMP_661)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender != _referralAddress)

IRs:
TMP_663(bool) = msg.sender != _referralAddress
TMP_664(None) = SOLIDITY_CALL require(bool)(TMP_663)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amount >= 1 && _amount <= 5)

IRs:
TMP_665(bool) = _amount >= 1
TMP_666(bool) = _amount <= 5
TMP_667(bool) = TMP_665 && TMP_666
TMP_668(None) = SOLIDITY_CALL require(bool)(TMP_667)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_priceOfBundle = ethPrice * _amount

IRs:
TMP_669(uint256) = ethPrice * _amount
_priceOfBundle(uint256) := TMP_669(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(msg.value >= _priceOfBundle)

IRs:
TMP_670(bool) = msg.value >= _priceOfBundle
TMP_671(None) = SOLIDITY_CALL require(bool)(TMP_670)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
wallet.transfer(_priceOfBundle)

IRs:
Transfer dest:wallet value:_priceOfBundle"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < _amount

IRs:
TMP_673(bool) = i < _amount
CONDITION TMP_673"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_randomValue = random(10000,0)

IRs:
TMP_674(uint32) = INTERNAL_CALL, CryptoSagaCardSwapVer2.random(uint32,uint32)(10000,0)
_randomValue(uint32) := TMP_674(uint32)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_randomValue < 5000

IRs:
TMP_675(bool) = _randomValue < 5000
CONDITION TMP_675"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_heroRankToMint = 1

IRs:
_heroRankToMint(uint8) := 1(uint256)"];
14->22;
15[label="Node Type: IF 15

EXPRESSION:
_randomValue < 9550

IRs:
TMP_676(bool) = _randomValue < 9550
CONDITION TMP_676"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_heroRankToMint = 2

IRs:
_heroRankToMint(uint8) := 2(uint256)"];
16->21;
17[label="Node Type: IF 17

EXPRESSION:
_randomValue < 9950

IRs:
TMP_677(bool) = _randomValue < 9950
CONDITION TMP_677"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_heroRankToMint = 3

IRs:
_heroRankToMint(uint8) := 3(uint256)"];
18->20;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_heroRankToMint = 4

IRs:
_heroRankToMint(uint8) := 4(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
summonHero(msg.sender,_heroRankToMint)

IRs:
TMP_678(uint256) = INTERNAL_CALL, CryptoSagaCardSwapVer2.summonHero(address,uint8)(msg.sender,_heroRankToMint)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
_referralAddress != address(0)

IRs:
TMP_679 = CONVERT 0 to address
TMP_680(bool) = _referralAddress != TMP_679
CONDITION TMP_680"];
24->25[label="True"];
24->27[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
addressToMileagePoint[_referralAddress] += 5

IRs:
REF_336(uint256) -> addressToMileagePoint[_referralAddress]
REF_336(-> addressToMileagePoint) = REF_336 + 5"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
addressToMileagePoint[msg.sender] += 3

IRs:
REF_337(uint256) -> addressToMileagePoint[msg.sender]
REF_337(-> addressToMileagePoint) = REF_337 + 3"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
i ++

IRs:
TMP_681(uint256) := i(uint256)
i(uint256) = i + 1"];
28->10;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
29->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-payWithGold(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->28;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != address(0))

IRs:
TMP_683 = CONVERT 0 to address
TMP_684(bool) = msg.sender != TMP_683
TMP_685(None) = SOLIDITY_CALL require(bool)(TMP_684)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount >= 1 && _amount <= 5)

IRs:
TMP_686(bool) = _amount >= 1
TMP_687(bool) = _amount <= 5
TMP_688(bool) = TMP_686 && TMP_687
TMP_689(None) = SOLIDITY_CALL require(bool)(TMP_688)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_priceOfBundle = goldPrice * _amount

IRs:
TMP_690(uint256) = goldPrice * _amount
_priceOfBundle(uint256) := TMP_690(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(goldContract.allowance(msg.sender,this) >= _priceOfBundle)

IRs:
TMP_691(uint256) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:allowance, arguments:['msg.sender', 'this']  
TMP_692(bool) = TMP_691 >= _priceOfBundle
TMP_693(None) = SOLIDITY_CALL require(bool)(TMP_692)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
goldContract.transferFrom(msg.sender,this,_priceOfBundle)

IRs:
TMP_694(bool) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:transferFrom, arguments:['msg.sender', 'this', '_priceOfBundle']  
CONDITION TMP_694"];
5->8[label="True"];
5->27[label="False"];
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->27;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _amount

IRs:
TMP_695(bool) = i < _amount
CONDITION TMP_695"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_randomValue = random(10000,0)

IRs:
TMP_696(uint32) = INTERNAL_CALL, CryptoSagaCardSwapVer2.random(uint32,uint32)(10000,0)
_randomValue(uint32) := TMP_696(uint32)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_randomValue < 3000

IRs:
TMP_697(bool) = _randomValue < 3000
CONDITION TMP_697"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
13->24;
14[label="Node Type: IF 14

EXPRESSION:
_randomValue < 7500

IRs:
TMP_698(bool) = _randomValue < 7500
CONDITION TMP_698"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_heroRankToMint = 1

IRs:
_heroRankToMint(uint8) := 1(uint256)"];
15->23;
16[label="Node Type: IF 16

EXPRESSION:
_randomValue < 9945

IRs:
TMP_699(bool) = _randomValue < 9945
CONDITION TMP_699"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_heroRankToMint = 2

IRs:
_heroRankToMint(uint8) := 2(uint256)"];
17->22;
18[label="Node Type: IF 18

EXPRESSION:
_randomValue < 9995

IRs:
TMP_700(bool) = _randomValue < 9995
CONDITION TMP_700"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_heroRankToMint = 3

IRs:
_heroRankToMint(uint8) := 3(uint256)"];
19->21;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_heroRankToMint = 4

IRs:
_heroRankToMint(uint8) := 4(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
summonHero(msg.sender,_heroRankToMint)

IRs:
TMP_701(uint256) = INTERNAL_CALL, CryptoSagaCardSwapVer2.summonHero(address,uint8)(msg.sender,_heroRankToMint)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_702(uint256) := i(uint256)
i(uint256) = i + 1"];
26->9;
27[label="Node Type: END_IF 27
"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
28->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-payWithMileagePoint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != address(0))

IRs:
TMP_704 = CONVERT 0 to address
TMP_705(bool) = msg.sender != TMP_704
TMP_706(None) = SOLIDITY_CALL require(bool)(TMP_705)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount >= 1 && _amount <= 5)

IRs:
TMP_707(bool) = _amount >= 1
TMP_708(bool) = _amount <= 5
TMP_709(bool) = TMP_707 && TMP_708
TMP_710(None) = SOLIDITY_CALL require(bool)(TMP_709)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_priceOfBundle = mileagePointPrice * _amount

IRs:
TMP_711(uint256) = mileagePointPrice * _amount
_priceOfBundle(uint256) := TMP_711(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(addressToMileagePoint[msg.sender] >= _priceOfBundle)

IRs:
REF_340(uint256) -> addressToMileagePoint[msg.sender]
TMP_712(bool) = REF_340 >= _priceOfBundle
TMP_713(None) = SOLIDITY_CALL require(bool)(TMP_712)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addressToMileagePoint[msg.sender] -= _priceOfBundle

IRs:
REF_341(uint256) -> addressToMileagePoint[msg.sender]
REF_341(-> addressToMileagePoint) = REF_341 - _priceOfBundle"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _amount

IRs:
TMP_714(bool) = i < _amount
CONDITION TMP_714"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_randomValue = random(10000,0)

IRs:
TMP_715(uint32) = INTERNAL_CALL, CryptoSagaCardSwapVer2.random(uint32,uint32)(10000,0)
_randomValue(uint32) := TMP_715(uint32)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_randomValue < 5000

IRs:
TMP_716(bool) = _randomValue < 5000
CONDITION TMP_716"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_heroRankToMint = 1

IRs:
_heroRankToMint(uint8) := 1(uint256)"];
13->21;
14[label="Node Type: IF 14

EXPRESSION:
_randomValue < 9050

IRs:
TMP_717(bool) = _randomValue < 9050
CONDITION TMP_717"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_heroRankToMint = 2

IRs:
_heroRankToMint(uint8) := 2(uint256)"];
15->20;
16[label="Node Type: IF 16

EXPRESSION:
_randomValue < 9950

IRs:
TMP_718(bool) = _randomValue < 9950
CONDITION TMP_718"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_heroRankToMint = 3

IRs:
_heroRankToMint(uint8) := 3(uint256)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_heroRankToMint = 4

IRs:
_heroRankToMint(uint8) := 4(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
summonHero(msg.sender,_heroRankToMint)

IRs:
TMP_719(uint256) = INTERNAL_CALL, CryptoSagaCardSwapVer2.summonHero(address,uint8)(msg.sender,_heroRankToMint)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i ++

IRs:
TMP_720(uint256) := i(uint256)
i(uint256) = i + 1"];
23->9;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
24->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-random(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_upper > _lower)

IRs:
TMP_747(bool) = _upper > _lower
TMP_748(None) = SOLIDITY_CALL require(bool)(TMP_747)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
seed = uint32(keccak256()(keccak256()(block.blockhash(block.number - 1),seed),now))

IRs:
TMP_749(uint256) = block.number - 1
TMP_750(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_749)
TMP_751(bytes32) = SOLIDITY_CALL keccak256()(TMP_750,seed)
TMP_752(bytes32) = SOLIDITY_CALL keccak256()(TMP_751,now)
TMP_753 = CONVERT TMP_752 to uint32
seed(uint32) := TMP_753(uint32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
seed % (_upper - _lower) + _lower

IRs:
TMP_754(uint32) = _upper - _lower
TMP_755(uint32) = seed % TMP_754
TMP_756(uint32) = TMP_755 + _lower
RETURN TMP_756"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-setBlacklist(uint32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
blackList[_classId] = _value

IRs:
REF_333(bool) -> blackList[_classId]
REF_333(bool) (->blackList) := _value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-setCardContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cardAddess = _contractAddress

IRs:
cardAddess(address) := _contractAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-setEthPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethPrice = _value

IRs:
ethPrice(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-setGoldPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
goldPrice = _value

IRs:
goldPrice(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-setMileagePointPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mileagePointPrice = _value

IRs:
mileagePointPrice(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ethPrice = 20000000000000000

IRs:
ethPrice(uint256) := 20000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
goldPrice = 100000000000000000000

IRs:
goldPrice(uint256) := 100000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
mileagePointPrice = 100

IRs:
mileagePointPrice(uint256) := 100(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
seed = 0

IRs:
seed(uint32) := 0(uint256)"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-summonHero(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_numberOfClasses = heroContract.numberOfHeroClasses()

IRs:
TMP_733(uint32) = HIGH_LEVEL_CALL, dest:heroContract(CryptoSagaHero), function:numberOfHeroClasses, arguments:[]  
_numberOfClasses(uint32) := TMP_733(uint32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_candidates = new uint32[](_numberOfClasses)

IRs:
TMP_735(uint32[])  = new uint32[](_numberOfClasses)
_candidates(uint32[]) = ['TMP_735(uint32[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_count = 0

IRs:
_count(uint32) := 0(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _numberOfClasses

IRs:
TMP_736(bool) = i < _numberOfClasses
CONDITION TMP_736"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
heroContract.getClassRank(i) == _heroRankToMint && blackList[i] != true

IRs:
TMP_737(uint8) = HIGH_LEVEL_CALL, dest:heroContract(CryptoSagaHero), function:getClassRank, arguments:['i']  
TMP_738(bool) = TMP_737 == _heroRankToMint
REF_346(bool) -> blackList[i]
TMP_739(bool) = REF_346 != True
TMP_740(bool) = TMP_738 && TMP_739
CONDITION TMP_740"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_candidates[_count] = i

IRs:
REF_347(uint32) -> _candidates[_count]
REF_347(uint32) (->_candidates) := i(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_count ++

IRs:
TMP_741(uint32) := _count(uint32)
_count(uint32) = _count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_742(uint32) := i(uint32)
i(uint32) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(_count != 0)

IRs:
TMP_743(bool) = _count != 0
TMP_744(None) = SOLIDITY_CALL require(bool)(TMP_743)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
heroContract.mint(_to,_candidates[random(_count,0)])

IRs:
TMP_745(uint32) = INTERNAL_CALL, CryptoSagaCardSwapVer2.random(uint32,uint32)(_count,0)
REF_349(uint32) -> _candidates[TMP_745]
TMP_746(uint256) = HIGH_LEVEL_CALL, dest:heroContract(CryptoSagaHero), function:mint, arguments:['_to', 'REF_349']  
RETURN TMP_746"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-swapCardForReward(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tx.origin != _by && tx.origin != msg.sender)

IRs:
TMP_646(bool) = tx.origin != _by
TMP_647(bool) = tx.origin != msg.sender
TMP_648(bool) = TMP_646 && TMP_647
TMP_649(None) = SOLIDITY_CALL require(bool)(TMP_648)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_randomValue = random(10000,0)

IRs:
TMP_650(uint32) = INTERNAL_CALL, CryptoSagaCardSwapVer2.random(uint32,uint32)(10000,0)
_randomValue(uint32) := TMP_650(uint32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_rank == 0

IRs:
TMP_651(bool) = _rank == 0
CONDITION TMP_651"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
_randomValue < 8500

IRs:
TMP_652(bool) = _randomValue < 8500
CONDITION TMP_652"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_heroRankToMint = 3

IRs:
_heroRankToMint(uint8) := 3(uint256)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_heroRankToMint = 4

IRs:
_heroRankToMint(uint8) := 4(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->22;
9[label="Node Type: IF 9

EXPRESSION:
_rank == 3

IRs:
TMP_653(bool) = _rank == 3
CONDITION TMP_653"];
9->10[label="True"];
9->20[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_randomValue < 6500

IRs:
TMP_654(bool) = _randomValue < 6500
CONDITION TMP_654"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_heroRankToMint = 1

IRs:
_heroRankToMint(uint8) := 1(uint256)"];
11->19;
12[label="Node Type: IF 12

EXPRESSION:
_randomValue < 9945

IRs:
TMP_655(bool) = _randomValue < 9945
CONDITION TMP_655"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_heroRankToMint = 2

IRs:
_heroRankToMint(uint8) := 2(uint256)"];
13->18;
14[label="Node Type: IF 14

EXPRESSION:
_randomValue < 9995

IRs:
TMP_656(bool) = _randomValue < 9995
CONDITION TMP_656"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_heroRankToMint = 3

IRs:
_heroRankToMint(uint8) := 3(uint256)"];
15->17;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_heroRankToMint = 4

IRs:
_heroRankToMint(uint8) := 4(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->21;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
summonHero(tx.origin,_heroRankToMint)

IRs:
TMP_657(uint256) = INTERNAL_CALL, CryptoSagaCardSwapVer2.summonHero(address,uint8)(tx.origin,_heroRankToMint)
RETURN TMP_657"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onlyCard()

IRs:
MODIFIER_CALL, CryptoSagaCardSwap.onlyCard()()"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
25->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_617 = CONVERT 0 to address
TMP_618(bool) = newOwner != TMP_617
TMP_619(None) = SOLIDITY_CALL require(bool)(TMP_618)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_757 = UnaryType.BANG paused 
TMP_758(None) = SOLIDITY_CALL require(bool)(TMP_757)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaCardSwapVer2-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_759(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-CryptoSagaHero(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_goldAddress != address(0))

IRs:
TMP_473 = CONVERT 0 to address
TMP_474(bool) = _goldAddress != TMP_473
TMP_475(None) = SOLIDITY_CALL require(bool)(TMP_474)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setGoldContract(_goldAddress)

IRs:
INTERNAL_CALL, CryptoSagaHero.setGoldContract(address)(_goldAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
defineType(Archangel,4,1,13540,0,99,3,(uint32(74),75,57,99,95),(uint32(8),6,8,5,5),(uint32(8),10,10,6,6))

IRs:
TMP_477 = CONVERT 74 to uint32
TMP_478 = CONVERT 8 to uint32
TMP_479 = CONVERT 8 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Archangel,4,1,13540,0,99,3,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f08265d7f70>, 75, 57, 99, 95],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826604100>, 6, 8, 5, 5],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826604250>, 10, 10, 6, 6])"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
defineType(Shadowalker,3,4,134,1,75,4,(uint32(45),35,60,80,40),(uint32(3),2,10,4,5),(uint32(5),5,10,7,5))

IRs:
TMP_481 = CONVERT 45 to uint32
TMP_482 = CONVERT 3 to uint32
TMP_483 = CONVERT 5 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Shadowalker,3,4,134,1,75,4,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826604550>, 35, 60, 80, 40],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f08266046a0>, 2, 10, 4, 5],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f08266047f0>, 5, 10, 7, 5])"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
defineType(Pyromancer,2,0,14,2,50,1,(uint32(50),28,17,40,35),(uint32(5),3,2,3,3),(uint32(8),4,3,4,5))

IRs:
TMP_485 = CONVERT 50 to uint32
TMP_486 = CONVERT 5 to uint32
TMP_487 = CONVERT 8 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Pyromancer,2,0,14,2,50,1,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826604af0>, 28, 17, 40, 35],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826604c40>, 3, 2, 3, 3],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826604d90>, 4, 3, 4, 5])"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
defineType(Magician,1,3,224,2,30,0,(uint32(35),15,25,25,30),(uint32(3),1,2,2,2),(uint32(5),2,3,3,3))

IRs:
TMP_489 = CONVERT 35 to uint32
TMP_490 = CONVERT 3 to uint32
TMP_491 = CONVERT 5 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Magician,1,3,224,2,30,0,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826605090>, 15, 25, 25, 30],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f08266051e0>, 1, 2, 2, 2],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826605330>, 2, 3, 3, 3])"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
defineType(Farmer,0,0,59,0,15,2,(uint32(10),22,8,15,25),(uint32(1),2,1,1,2),(uint32(1),3,1,2,3))

IRs:
TMP_493 = CONVERT 10 to uint32
TMP_494 = CONVERT 1 to uint32
TMP_495 = CONVERT 1 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Farmer,0,0,59,0,15,2,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826605630>, 22, 8, 15, 25],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f0826605780>, 2, 1, 1, 2],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f08266058d0>, 3, 1, 2, 3])"];
}
// Function: 1849.sol-CryptoSagaHero-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-CryptoSagaHero-_burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
approvedFor(_tokenId) != 0

IRs:
TMP_409(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_410(bool) = TMP_409 != 0
CONDITION TMP_410"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clearApproval(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(msg.sender,_tokenId)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeToken(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(msg.sender,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,0x0,_tokenId)

IRs:
Emit Transfer(msg.sender,0,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 1849.sol-CryptoSagaHero-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_404 = CONVERT 0 to address
TMP_405(bool) = _to != TMP_404
TMP_406(None) = SOLIDITY_CALL require(bool)(TMP_405)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0x0,_to,_tokenId)

IRs:
Emit Transfer(0,_to,_tokenId)"];
}
// Function: 1849.sol-CryptoSagaHero-addDeposit(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addressToGoldDeposit[_to] += _amount

IRs:
REF_302(uint256) -> addressToGoldDeposit[_to]
REF_302(-> addressToGoldDeposit) = REF_302 + _amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccessDeposit()

IRs:
MODIFIER_CALL, AccessDeposit.onlyAccessDeposit()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-addExp(uint256,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) != address(0))

IRs:
TMP_542(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_543 = CONVERT 0 to address
TMP_544(bool) = TMP_542 != TMP_543
TMP_545(None) = SOLIDITY_CALL require(bool)(TMP_544)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_heroInstance = tokenIdToHeroInstance[_tokenId]

IRs:
REF_299(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_heroInstance(CryptoSagaHero.HeroInstance) := REF_299(CryptoSagaHero.HeroInstance)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_newExp = _heroInstance.currentExp + _exp

IRs:
REF_300(uint32) -> _heroInstance.currentExp
TMP_546(uint32) = REF_300 + _exp
_newExp(uint32) := TMP_546(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_newExp == uint256(uint128(_newExp)))

IRs:
TMP_547 = CONVERT _newExp to uint128
TMP_548 = CONVERT TMP_547 to uint256
TMP_549(bool) = _newExp == TMP_548
TMP_550(None) = SOLIDITY_CALL require(bool)(TMP_549)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_heroInstance.currentExp += _newExp

IRs:
REF_301(uint32) -> _heroInstance.currentExp
REF_301(-> _heroInstance) = REF_301 + _newExp"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAccessDeploy()

IRs:
MODIFIER_CALL, AccessDeploy.onlyAccessDeploy()()"];
6->1;
}
// Function: 1849.sol-CryptoSagaHero-addToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_186(address) -> tokenOwner[_tokenId]
TMP_434 = CONVERT 0 to address
TMP_435(bool) = REF_186 == TMP_434
TMP_436(None) = SOLIDITY_CALL require(bool)(TMP_435)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_187(address) -> tokenOwner[_tokenId]
REF_187(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = balanceOf(_to)

IRs:
TMP_437(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_to)
length(uint256) := TMP_437(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_188(uint256[]) -> ownedTokens[_to]
REF_190 -> LENGTH REF_188
TMP_439(uint256) := REF_190(uint256)
TMP_440(uint256) = TMP_439 + 1
REF_190(uint256) (->ownedTokens) := TMP_440(uint256)
REF_191(uint256) -> REF_188[TMP_439]
REF_191(uint256) (->ownedTokens) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_192(uint256) -> ownedTokensIndex[_tokenId]
REF_192(uint256) (->ownedTokensIndex) := length(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalTokens = totalTokens.add(1)

IRs:
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_441(uint256)"];
}
// Function: 1849.sol-CryptoSagaHero-approve(address,uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaHero-approvedFor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_183(address) -> tokenApprovals[_tokenId]
RETURN REF_183"];
}
// Function: 1849.sol-CryptoSagaHero-balanceOf(address)
digraph{
}
// Function: 1849.sol-CryptoSagaHero-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_369 = CONVERT 0 to address
pendingOwner(address) := TMP_369(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaHero-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_430(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_431(bool) = TMP_430 == _owner
TMP_432(None) = SOLIDITY_CALL require(bool)(TMP_431)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenApprovals[_tokenId] = 0

IRs:
REF_185(address) -> tokenApprovals[_tokenId]
REF_185(address) (->tokenApprovals) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(_owner,0,_tokenId)

IRs:
Emit Approval(_owner,0,_tokenId)"];
}
// Function: 1849.sol-CryptoSagaHero-clearApprovalAndTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_417 = CONVERT 0 to address
TMP_418(bool) = _to != TMP_417
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != ownerOf(_tokenId))

IRs:
TMP_420(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_421(bool) = _to != TMP_420
TMP_422(None) = SOLIDITY_CALL require(bool)(TMP_421)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_423(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_424(bool) = TMP_423 == _from
TMP_425(None) = SOLIDITY_CALL require(bool)(TMP_424)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeToken(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 1849.sol-CryptoSagaHero-defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_classRank < 5)

IRs:
TMP_497(bool) = _classRank < 5
TMP_498(None) = SOLIDITY_CALL require(bool)(TMP_497)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_classType < 3)

IRs:
TMP_499(bool) = _classType < 3
TMP_500(None) = SOLIDITY_CALL require(bool)(TMP_499)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_aura < 5)

IRs:
TMP_501(bool) = _aura < 5
TMP_502(None) = SOLIDITY_CALL require(bool)(TMP_501)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_minIVForStats[0] <= _maxIVForStats[0] && _minIVForStats[1] <= _maxIVForStats[1] && _minIVForStats[2] <= _maxIVForStats[2] && _minIVForStats[3] <= _maxIVForStats[3] && _minIVForStats[4] <= _maxIVForStats[4])

IRs:
REF_271(uint32) -> _minIVForStats[0]
REF_272(uint32) -> _maxIVForStats[0]
TMP_503(bool) = REF_271 <= REF_272
REF_273(uint32) -> _minIVForStats[1]
REF_274(uint32) -> _maxIVForStats[1]
TMP_504(bool) = REF_273 <= REF_274
TMP_505(bool) = TMP_503 && TMP_504
REF_275(uint32) -> _minIVForStats[2]
REF_276(uint32) -> _maxIVForStats[2]
TMP_506(bool) = REF_275 <= REF_276
TMP_507(bool) = TMP_505 && TMP_506
REF_277(uint32) -> _minIVForStats[3]
REF_278(uint32) -> _maxIVForStats[3]
TMP_508(bool) = REF_277 <= REF_278
TMP_509(bool) = TMP_507 && TMP_508
REF_279(uint32) -> _minIVForStats[4]
REF_280(uint32) -> _maxIVForStats[4]
TMP_510(bool) = REF_279 <= REF_280
TMP_511(bool) = TMP_509 && TMP_510
TMP_512(None) = SOLIDITY_CALL require(bool)(TMP_511)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_heroType = HeroClass({className:_className,classRank:_classRank,classRace:_classRace,classAge:_classAge,classType:_classType,maxLevel:_maxLevel,aura:_aura,baseStats:_baseStats,minIVForStats:_minIVForStats,maxIVForStats:_maxIVForStats,currentNumberOfInstancedHeroes:0})

IRs:
TMP_513(CryptoSagaHero.HeroClass) = new HeroClass(_className,_classRank,_classRace,_classAge,_classType,_maxLevel,_aura,_baseStats,_minIVForStats,_maxIVForStats,0)
_heroType(CryptoSagaHero.HeroClass) := TMP_513(CryptoSagaHero.HeroClass)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
heroClasses[numberOfHeroClasses] = _heroType

IRs:
REF_281(CryptoSagaHero.HeroClass) -> heroClasses[numberOfHeroClasses]
REF_281(CryptoSagaHero.HeroClass) (->heroClasses) := _heroType(CryptoSagaHero.HeroClass)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
DefineType(msg.sender,numberOfHeroClasses,_heroType.className)

IRs:
REF_282(string) -> _heroType.className
Emit DefineType(msg.sender,numberOfHeroClasses,REF_282)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
numberOfHeroClasses ++

IRs:
TMP_515(uint32) := numberOfHeroClasses(uint32)
numberOfHeroClasses(uint32) = numberOfHeroClasses + 1"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 1849.sol-CryptoSagaHero-deploy(uint256,uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) != address(0))

IRs:
TMP_533(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_534 = CONVERT 0 to address
TMP_535(bool) = TMP_533 != TMP_534
TMP_536(None) = SOLIDITY_CALL require(bool)(TMP_535)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_heroInstance = tokenIdToHeroInstance[_tokenId]

IRs:
REF_295(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_heroInstance(CryptoSagaHero.HeroInstance) := REF_295(CryptoSagaHero.HeroInstance)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_heroInstance.availableAt <= now)

IRs:
REF_296(uint256) -> _heroInstance.availableAt
TMP_537(bool) = REF_296 <= now
TMP_538(None) = SOLIDITY_CALL require(bool)(TMP_537)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_heroInstance.lastLocationId = _locationId

IRs:
REF_297(uint32) -> _heroInstance.lastLocationId
REF_297(uint32) (->_heroInstance) := _locationId(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_heroInstance.availableAt = now + _duration

IRs:
REF_298(uint256) -> _heroInstance.availableAt
TMP_539(uint256) = now + _duration
REF_298(uint256) (->_heroInstance) := TMP_539(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Deploy(msg.sender,_tokenId,_locationId,_duration)

IRs:
Emit Deploy(msg.sender,_tokenId,_locationId,_duration)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccessDeploy()

IRs:
MODIFIER_CALL, AccessDeploy.onlyAccessDeploy()()"];
7->1;
}
// Function: 1849.sol-CryptoSagaHero-getClassInfo(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_cl = heroClasses[_classId]

IRs:
REF_208(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
_cl(CryptoSagaHero.HeroClass) := REF_208(CryptoSagaHero.HeroClass)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_cl.className,_cl.classRank,_cl.classRace,_cl.classAge,_cl.classType,_cl.maxLevel,_cl.aura,_cl.baseStats,_cl.minIVForStats,_cl.maxIVForStats)

IRs:
REF_209(string) -> _cl.className
REF_210(uint8) -> _cl.classRank
REF_211(uint8) -> _cl.classRace
REF_212(uint32) -> _cl.classAge
REF_213(uint8) -> _cl.classType
REF_214(uint32) -> _cl.maxLevel
REF_215(uint8) -> _cl.aura
REF_216(uint32[5]) -> _cl.baseStats
REF_217(uint32[5]) -> _cl.minIVForStats
REF_218(uint32[5]) -> _cl.maxIVForStats
RETURN REF_209,REF_210,REF_211,REF_212,REF_213,REF_214,REF_215,REF_216,REF_217,REF_218"];
3[label="Node Type: RETURN 3

EXPRESSION:
(className,classRank,classRace,classAge,classType,maxLevel,aura,baseStats,minIVs,maxIVs)

IRs:
RETURN className,classRank,classRace,classAge,classType,maxLevel,aura,baseStats,minIVs,maxIVs"];
}
// Function: 1849.sol-CryptoSagaHero-getClassMintCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
heroClasses[_classId].currentNumberOfInstancedHeroes

IRs:
REF_223(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
REF_224(uint32) -> REF_223.currentNumberOfInstancedHeroes
RETURN REF_224"];
}
// Function: 1849.sol-CryptoSagaHero-getClassName(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
heroClasses[_classId].className

IRs:
REF_219(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
REF_220(string) -> REF_219.className
RETURN REF_220"];
}
// Function: 1849.sol-CryptoSagaHero-getClassRank(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
heroClasses[_classId].classRank

IRs:
REF_221(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
REF_222(uint8) -> REF_221.classRank
RETURN REF_222"];
}
// Function: 1849.sol-CryptoSagaHero-getGoldDepositOfAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
addressToGoldDeposit[_address]

IRs:
REF_265(uint256) -> addressToGoldDeposit[_address]
RETURN REF_265"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroAvailableAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].availableAt

IRs:
REF_252(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_253(uint256) -> REF_252.availableAt
RETURN REF_253"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroBP(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_tmp = tokenIdToHeroInstance[_tokenId].currentStats

IRs:
REF_254(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_255(uint32[5]) -> REF_254.currentStats
_tmp(uint32[1]) = ['REF_255(uint32[5])']"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_tmp[0] + _tmp[1] + _tmp[2] + _tmp[3] + _tmp[4])

IRs:
REF_256(uint32) -> _tmp[0]
REF_257(uint32) -> _tmp[1]
TMP_453(uint32) = REF_256 + REF_257
REF_258(uint32) -> _tmp[2]
TMP_454(uint32) = TMP_453 + REF_258
REF_259(uint32) -> _tmp[3]
TMP_455(uint32) = TMP_454 + REF_259
REF_260(uint32) -> _tmp[4]
TMP_456(uint32) = TMP_455 + REF_260
RETURN TMP_456"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroClassId(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].heroClassId

IRs:
REF_244(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_245(uint32) -> REF_244.heroClassId
RETURN REF_245"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_h = tokenIdToHeroInstance[_tokenId]

IRs:
REF_225(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_h(CryptoSagaHero.HeroInstance) := REF_225(CryptoSagaHero.HeroInstance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bp = _h.currentStats[0] + _h.currentStats[1] + _h.currentStats[2] + _h.currentStats[3] + _h.currentStats[4]

IRs:
REF_226(uint32[5]) -> _h.currentStats
REF_227(uint32) -> REF_226[0]
REF_228(uint32[5]) -> _h.currentStats
REF_229(uint32) -> REF_228[1]
TMP_449(uint32) = REF_227 + REF_229
REF_230(uint32[5]) -> _h.currentStats
REF_231(uint32) -> REF_230[2]
TMP_450(uint32) = TMP_449 + REF_231
REF_232(uint32[5]) -> _h.currentStats
REF_233(uint32) -> REF_232[3]
TMP_451(uint32) = TMP_450 + REF_233
REF_234(uint32[5]) -> _h.currentStats
REF_235(uint32) -> REF_234[4]
TMP_452(uint32) = TMP_451 + REF_235
_bp(uint32) := TMP_452(uint32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(_h.heroClassId,_h.heroName,_h.currentLevel,_h.currentExp,_h.lastLocationId,_h.availableAt,_h.currentStats,_h.ivForStats,_bp)

IRs:
REF_236(uint32) -> _h.heroClassId
REF_237(string) -> _h.heroName
REF_238(uint32) -> _h.currentLevel
REF_239(uint32) -> _h.currentExp
REF_240(uint32) -> _h.lastLocationId
REF_241(uint256) -> _h.availableAt
REF_242(uint32[5]) -> _h.currentStats
REF_243(uint32[5]) -> _h.ivForStats
RETURN REF_236,REF_237,REF_238,REF_239,REF_240,REF_241,REF_242,REF_243,_bp"];
4[label="Node Type: RETURN 4

EXPRESSION:
(classId,heroName,currentLevel,currentExp,lastLocationId,availableAt,currentStats,ivs,bp)

IRs:
RETURN classId,heroName,currentLevel,currentExp,lastLocationId,availableAt,currentStats,ivs,bp"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroLevel(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].currentLevel

IRs:
REF_248(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_249(uint32) -> REF_248.currentLevel
RETURN REF_249"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroLocation(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].lastLocationId

IRs:
REF_250(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_251(uint32) -> REF_250.lastLocationId
RETURN REF_251"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].heroName

IRs:
REF_246(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_247(string) -> REF_246.heroName
RETURN REF_247"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroRequiredExpForLevelUp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((tokenIdToHeroInstance[_tokenId].currentLevel + 2) * requiredExpIncreaseFactor)

IRs:
REF_263(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_264(uint32) -> REF_263.currentLevel
TMP_461(uint32) = REF_264 + 2
TMP_462(uint32) = TMP_461 * requiredExpIncreaseFactor
RETURN TMP_462"];
}
// Function: 1849.sol-CryptoSagaHero-getHeroRequiredGoldForLevelUp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(uint256(2) ** (tokenIdToHeroInstance[_tokenId].currentLevel / 10)) * requiredGoldIncreaseFactor

IRs:
TMP_457 = CONVERT 2 to uint256
REF_261(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_262(uint32) -> REF_261.currentLevel
TMP_458(uint32) = REF_262 / 10
TMP_459(uint256) = TMP_457 ** TMP_458
TMP_460(uint256) = TMP_459 * requiredGoldIncreaseFactor
RETURN TMP_460"];
}
// Function: 1849.sol-CryptoSagaHero-getTokenIdOfAddressAndIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokensOf(_address)[_index]

IRs:
TMP_463(uint256[]) = INTERNAL_CALL, ERC721Token.tokensOf(address)(_address)
REF_266(uint256) -> TMP_463[_index]
RETURN REF_266"];
}
// Function: 1849.sol-CryptoSagaHero-getTotalBPOfAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_tokens = tokensOf(_address)

IRs:
TMP_464(uint256[]) = INTERNAL_CALL, ERC721Token.tokensOf(address)(_address)
_tokens(uint256[1]) = ['TMP_464(uint256[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_totalBP = 0

IRs:
_totalBP(uint32) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _tokens.length

IRs:
REF_267 -> LENGTH _tokens
TMP_465(bool) = i < REF_267
CONDITION TMP_465"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_totalBP += getHeroBP(_tokens[i])

IRs:
REF_268(uint256) -> _tokens[i]
TMP_466(uint32) = INTERNAL_CALL, CryptoSagaHero.getHeroBP(uint256)(REF_268)
_totalBP(uint32) = _totalBP + TMP_466"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_467(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: RETURN 9

EXPRESSION:
_totalBP

IRs:
RETURN _totalBP"];
}
// Function: 1849.sol-CryptoSagaHero-grantAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = true

IRs:
REF_175(bool) -> deployAccess[_address]
REF_175(bool) (->deployAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-grantAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = true

IRs:
REF_173(bool) -> depositAccess[_address]
REF_173(bool) (->depositAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-grantAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = true

IRs:
REF_177(bool) -> mintAccess[_address]
REF_177(bool) (->mintAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-isApprovedFor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
approvedFor(_tokenId) == _owner

IRs:
TMP_415(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_416(bool) = TMP_415 == _owner
RETURN TMP_416"];
}
// Function: 1849.sol-CryptoSagaHero-levelUp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_heroInstance = tokenIdToHeroInstance[_tokenId]

IRs:
REF_303(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_heroInstance(CryptoSagaHero.HeroInstance) := REF_303(CryptoSagaHero.HeroInstance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_heroInstance.availableAt <= now)

IRs:
REF_304(uint256) -> _heroInstance.availableAt
TMP_553(bool) = REF_304 <= now
TMP_554(None) = SOLIDITY_CALL require(bool)(TMP_553)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_heroClassInfo = heroClasses[_heroInstance.heroClassId]

IRs:
REF_305(uint32) -> _heroInstance.heroClassId
REF_306(CryptoSagaHero.HeroClass) -> heroClasses[REF_305]
_heroClassInfo(CryptoSagaHero.HeroClass) := REF_306(CryptoSagaHero.HeroClass)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_heroInstance.currentLevel < _heroClassInfo.maxLevel)

IRs:
REF_307(uint32) -> _heroInstance.currentLevel
REF_308(uint32) -> _heroClassInfo.maxLevel
TMP_555(bool) = REF_307 < REF_308
TMP_556(None) = SOLIDITY_CALL require(bool)(TMP_555)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
requiredExp = getHeroRequiredExpForLevelUp(_tokenId)

IRs:
TMP_557(uint32) = INTERNAL_CALL, CryptoSagaHero.getHeroRequiredExpForLevelUp(uint256)(_tokenId)
requiredExp(uint32) := TMP_557(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_heroInstance.currentExp >= requiredExp)

IRs:
REF_309(uint32) -> _heroInstance.currentExp
TMP_558(bool) = REF_309 >= requiredExp
TMP_559(None) = SOLIDITY_CALL require(bool)(TMP_558)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
requiredGold = getHeroRequiredGoldForLevelUp(_tokenId)

IRs:
TMP_560(uint256) = INTERNAL_CALL, CryptoSagaHero.getHeroRequiredGoldForLevelUp(uint256)(_tokenId)
requiredGold(uint256) := TMP_560(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_ownerOfToken = ownerOf(_tokenId)

IRs:
TMP_561(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
_ownerOfToken(address) := TMP_561(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(addressToGoldDeposit[_ownerOfToken] >= requiredGold)

IRs:
REF_310(uint256) -> addressToGoldDeposit[_ownerOfToken]
TMP_562(bool) = REF_310 >= requiredGold
TMP_563(None) = SOLIDITY_CALL require(bool)(TMP_562)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_heroInstance.currentLevel += 1

IRs:
REF_311(uint32) -> _heroInstance.currentLevel
REF_311(-> _heroInstance) = REF_311 + 1"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->17;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i < 5

IRs:
TMP_564(bool) = i < 5
CONDITION TMP_564"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_heroInstance.currentStats[i] = _heroClassInfo.baseStats[i] + (_heroInstance.currentLevel - 1) * _heroInstance.ivForStats[i]

IRs:
REF_312(uint32[5]) -> _heroInstance.currentStats
REF_313(uint32) -> REF_312[i]
REF_314(uint32[5]) -> _heroClassInfo.baseStats
REF_315(uint32) -> REF_314[i]
REF_316(uint32) -> _heroInstance.currentLevel
TMP_565(uint32) = REF_316 - 1
REF_317(uint32[5]) -> _heroInstance.ivForStats
REF_318(uint32) -> REF_317[i]
TMP_566(uint32) = TMP_565 * REF_318
TMP_567(uint32) = REF_315 + TMP_566
REF_313(uint32) (->_heroInstance) := TMP_567(uint32)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_568(uint8) := i(uint8)
i(uint8) = i + 1"];
16->14;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_heroInstance.currentExp -= requiredExp

IRs:
REF_319(uint32) -> _heroInstance.currentExp
REF_319(-> _heroInstance) = REF_319 - requiredExp"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
addressToGoldDeposit[_ownerOfToken] -= requiredGold

IRs:
REF_320(uint256) -> addressToGoldDeposit[_ownerOfToken]
REF_320(-> addressToGoldDeposit) = REF_320 - requiredGold"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LevelUp(msg.sender,_tokenId,_heroInstance.currentLevel)

IRs:
REF_321(uint32) -> _heroInstance.currentLevel
Emit LevelUp(msg.sender,_tokenId,REF_321)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
21->1;
}
// Function: 1849.sol-CryptoSagaHero-mint(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_517 = CONVERT 0 to address
TMP_518(bool) = _owner != TMP_517
TMP_519(None) = SOLIDITY_CALL require(bool)(TMP_518)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_heroClassId < numberOfHeroClasses)

IRs:
TMP_520(bool) = _heroClassId < numberOfHeroClasses
TMP_521(None) = SOLIDITY_CALL require(bool)(TMP_520)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_heroClassInfo = heroClasses[_heroClassId]

IRs:
REF_283(CryptoSagaHero.HeroClass) -> heroClasses[_heroClassId]
_heroClassInfo(CryptoSagaHero.HeroClass) := REF_283(CryptoSagaHero.HeroClass)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(_owner,numberOfTokenIds)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(_owner,numberOfTokenIds)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->14;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < 5

IRs:
TMP_523(bool) = i < 5
CONDITION TMP_523"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_ivForStats[i] = (random(_heroClassInfo.maxIVForStats[i] + 1,_heroClassInfo.minIVForStats[i]))

IRs:
REF_284(uint32) -> _ivForStats[i]
REF_285(uint32[5]) -> _heroClassInfo.maxIVForStats
REF_286(uint32) -> REF_285[i]
TMP_524(uint32) = REF_286 + 1
REF_287(uint32[5]) -> _heroClassInfo.minIVForStats
REF_288(uint32) -> REF_287[i]
TMP_525(uint32) = INTERNAL_CALL, CryptoSagaHero.random(uint32,uint32)(TMP_524,REF_288)
REF_284(uint32) (->_ivForStats) := TMP_525(uint32)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_initialStats[i] = _heroClassInfo.baseStats[i] + _ivForStats[i]

IRs:
REF_289(uint32) -> _initialStats[i]
REF_290(uint32[5]) -> _heroClassInfo.baseStats
REF_291(uint32) -> REF_290[i]
REF_292(uint32) -> _ivForStats[i]
TMP_526(uint32) = REF_291 + REF_292
REF_289(uint32) (->_initialStats) := TMP_526(uint32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_527(uint8) := i(uint8)
i(uint8) = i + 1"];
13->10;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_heroInstance = HeroInstance({heroClassId:_heroClassId,heroName:,currentLevel:1,currentExp:0,lastLocationId:0,availableAt:now,currentStats:_initialStats,ivForStats:_ivForStats})

IRs:
TMP_528(CryptoSagaHero.HeroInstance) = new HeroInstance(_heroClassId,,1,0,0,now,_initialStats,_ivForStats)
_heroInstance(CryptoSagaHero.HeroInstance) := TMP_528(CryptoSagaHero.HeroInstance)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokenIdToHeroInstance[numberOfTokenIds] = _heroInstance

IRs:
REF_293(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[numberOfTokenIds]
REF_293(CryptoSagaHero.HeroInstance) (->tokenIdToHeroInstance) := _heroInstance(CryptoSagaHero.HeroInstance)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
numberOfTokenIds ++

IRs:
TMP_529(uint256) := numberOfTokenIds(uint256)
numberOfTokenIds(uint256) = numberOfTokenIds + 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_heroClassInfo.currentNumberOfInstancedHeroes ++

IRs:
REF_294(uint32) -> _heroClassInfo.currentNumberOfInstancedHeroes
TMP_530(uint32) := REF_294(uint32)
REF_294(-> _heroClassInfo) = REF_294 + 1"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
numberOfTokenIds - 1

IRs:
TMP_531(uint256) = numberOfTokenIds - 1
RETURN TMP_531"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onlyAccessMint()

IRs:
MODIFIER_CALL, AccessMint.onlyAccessMint()()"];
19->1;
}
// Function: 1849.sol-CryptoSagaHero-onlyAccessDeploy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || deployAccess[msg.sender] == true)

IRs:
TMP_597(bool) = msg.sender == owner
REF_329(bool) -> deployAccess[msg.sender]
TMP_598(bool) = REF_329 == True
TMP_599(bool) = TMP_597 || TMP_598
TMP_600(None) = SOLIDITY_CALL require(bool)(TMP_599)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-onlyAccessDeposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || depositAccess[msg.sender] == true)

IRs:
TMP_589(bool) = msg.sender == owner
REF_328(bool) -> depositAccess[msg.sender]
TMP_590(bool) = REF_328 == True
TMP_591(bool) = TMP_589 || TMP_590
TMP_592(None) = SOLIDITY_CALL require(bool)(TMP_591)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-onlyAccessMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || mintAccess[msg.sender] == true)

IRs:
TMP_601(bool) = msg.sender == owner
REF_330(bool) -> mintAccess[msg.sender]
TMP_602(bool) = REF_330 == True
TMP_603(bool) = TMP_601 || TMP_602
TMP_604(None) = SOLIDITY_CALL require(bool)(TMP_603)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_595(bool) = msg.sender == owner
TMP_596(None) = SOLIDITY_CALL require(bool)(TMP_595)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_608(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_609(bool) = TMP_608 == msg.sender
TMP_610(None) = SOLIDITY_CALL require(bool)(TMP_609)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_593(bool) = msg.sender == pendingOwner
TMP_594(None) = SOLIDITY_CALL require(bool)(TMP_593)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-ownerOf(uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaHero-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaHero-random(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_upper > _lower)

IRs:
TMP_580(bool) = _upper > _lower
TMP_581(None) = SOLIDITY_CALL require(bool)(TMP_580)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
seed = uint32(keccak256()(keccak256()(block.blockhash(block.number),seed),now))

IRs:
TMP_582(uint256) = SOLIDITY_CALL blockhash(uint256)(block.number)
TMP_583(bytes32) = SOLIDITY_CALL keccak256()(TMP_582,seed)
TMP_584(bytes32) = SOLIDITY_CALL keccak256()(TMP_583,now)
TMP_585 = CONVERT TMP_584 to uint32
seed(uint32) := TMP_585(uint32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
seed % (_upper - _lower) + _lower

IRs:
TMP_586(uint32) = _upper - _lower
TMP_587(uint32) = seed % TMP_586
TMP_588(uint32) = TMP_587 + _lower
RETURN TMP_588"];
}
// Function: 1849.sol-CryptoSagaHero-removeToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_442(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_443(bool) = TMP_442 == _from
TMP_444(None) = SOLIDITY_CALL require(bool)(TMP_443)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_194(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_194(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = balanceOf(_from).sub(1)

IRs:
TMP_445(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_from)
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_445', '1'] 
lastTokenIndex(uint256) := TMP_446(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_196(uint256[]) -> ownedTokens[_from]
REF_197(uint256) -> REF_196[lastTokenIndex]
lastToken(uint256) := REF_197(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenOwner[_tokenId] = 0

IRs:
REF_198(address) -> tokenOwner[_tokenId]
REF_198(address) (->tokenOwner) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_199(uint256[]) -> ownedTokens[_from]
REF_200(uint256) -> REF_199[tokenIndex]
REF_200(uint256) (->ownedTokens) := lastToken(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_201(uint256[]) -> ownedTokens[_from]
REF_202(uint256) -> REF_201[lastTokenIndex]
REF_202(uint256) (->ownedTokens) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_203(uint256[]) -> ownedTokens[_from]
REF_204 -> LENGTH REF_203
TMP_447(uint256) := REF_204(uint256)
REF_204(-> ownedTokens) = REF_204 - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_205(uint256) -> ownedTokensIndex[_tokenId]
REF_205(uint256) (->ownedTokensIndex) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_206(uint256) -> ownedTokensIndex[lastToken]
REF_206(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalTokens = totalTokens.sub(1)

IRs:
TMP_448(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_448(uint256)"];
}
// Function: 1849.sol-CryptoSagaHero-revokeAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = false

IRs:
REF_176(bool) -> deployAccess[_address]
REF_176(bool) (->deployAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-revokeAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = false

IRs:
REF_174(bool) -> depositAccess[_address]
REF_174(bool) (->depositAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-revokeAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = false

IRs:
REF_178(bool) -> mintAccess[_address]
REF_178(bool) (->mintAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-setGoldContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
goldContract = Gold(_contractAddress)

IRs:
TMP_469 = CONVERT _contractAddress to Gold
goldContract(Gold) := TMP_469(Gold)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-setHeroName(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].heroName = _name

IRs:
REF_269(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_270(string) -> REF_269.heroName
REF_270(string) (->tokenIdToHeroInstance) := _name(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-setRequiredExpIncreaseFactor(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
requiredExpIncreaseFactor = _value

IRs:
requiredExpIncreaseFactor(uint32) := _value(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-setRequiredGoldIncreaseFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
requiredGoldIncreaseFactor = _value

IRs:
requiredGoldIncreaseFactor(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-CryptoSagaHero-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CryptoSaga Hero

IRs:
name(string) := CryptoSaga Hero(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = HERO

IRs:
symbol(string) := HERO(string)"];
}
// Function: 1849.sol-CryptoSagaHero-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
requiredExpIncreaseFactor = 100

IRs:
requiredExpIncreaseFactor(uint32) := 100(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
requiredGoldIncreaseFactor = 1000000000000000000

IRs:
requiredGoldIncreaseFactor(uint256) := 1000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
seed = 0

IRs:
seed(uint32) := 0(uint256)"];
}
// Function: 1849.sol-CryptoSagaHero-takeOwnership(uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaHero-tokensOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner]

IRs:
REF_181(uint256[]) -> ownedTokens[_owner]
RETURN REF_181"];
}
// Function: 1849.sol-CryptoSagaHero-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalTokens

IRs:
RETURN totalTokens"];
}
// Function: 1849.sol-CryptoSagaHero-transfer(address,uint256)
digraph{
}
// Function: 1849.sol-CryptoSagaHero-transferDeposit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(goldContract.allowance(msg.sender,this) >= _amount)

IRs:
TMP_572(uint256) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:allowance, arguments:['msg.sender', 'this']  
TMP_573(bool) = TMP_572 >= _amount
TMP_574(None) = SOLIDITY_CALL require(bool)(TMP_573)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
goldContract.transferFrom(msg.sender,this,_amount)

IRs:
TMP_575(bool) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:transferFrom, arguments:['msg.sender', 'this', '_amount']  
CONDITION TMP_575"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addressToGoldDeposit[msg.sender] += _amount

IRs:
REF_324(uint256) -> addressToGoldDeposit[msg.sender]
REF_324(-> addressToGoldDeposit) = REF_324 + _amount"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 1849.sol-CryptoSagaHero-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_371 = CONVERT 0 to address
TMP_372(bool) = newOwner != TMP_371
TMP_373(None) = SOLIDITY_CALL require(bool)(TMP_372)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaHero-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1849.sol-CryptoSagaHero-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_605 = UnaryType.BANG paused 
TMP_606(None) = SOLIDITY_CALL require(bool)(TMP_605)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_607(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-CryptoSagaHero-withdrawDeposit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addressToGoldDeposit[msg.sender] >= _amount)

IRs:
REF_325(uint256) -> addressToGoldDeposit[msg.sender]
TMP_577(bool) = REF_325 >= _amount
TMP_578(None) = SOLIDITY_CALL require(bool)(TMP_577)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
goldContract.transfer(msg.sender,_amount)

IRs:
TMP_579(bool) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:transfer, arguments:['msg.sender', '_amount']  
CONDITION TMP_579"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addressToGoldDeposit[msg.sender] -= _amount

IRs:
REF_327(uint256) -> addressToGoldDeposit[msg.sender]
REF_327(-> addressToGoldDeposit) = REF_327 - _amount"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1849.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1849.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1849.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1849.sol-ERC20-totalSupply()
digraph{
}
// Function: 1849.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1849.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1849.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1849.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1849.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1849.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 1849.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 1849.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 1849.sol-ERC721-takeOwnership(uint256)
digraph{
}
// Function: 1849.sol-ERC721-transfer(address,uint256)
digraph{
}
// Function: 1849.sol-ERC721Token-_burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
approvedFor(_tokenId) != 0

IRs:
TMP_71(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_72(bool) = TMP_71 != 0
CONDITION TMP_72"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clearApproval(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(msg.sender,_tokenId)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeToken(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(msg.sender,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,0x0,_tokenId)

IRs:
Emit Transfer(msg.sender,0,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 1849.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_66 = CONVERT 0 to address
TMP_67(bool) = _to != TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0x0,_to,_tokenId)

IRs:
Emit Transfer(0,_to,_tokenId)"];
}
// Function: 1849.sol-ERC721Token-addToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_7(address) -> tokenOwner[_tokenId]
TMP_96 = CONVERT 0 to address
TMP_97(bool) = REF_7 == TMP_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_8(address) -> tokenOwner[_tokenId]
REF_8(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = balanceOf(_to)

IRs:
TMP_99(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_to)
length(uint256) := TMP_99(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_9(uint256[]) -> ownedTokens[_to]
REF_11 -> LENGTH REF_9
TMP_101(uint256) := REF_11(uint256)
TMP_102(uint256) = TMP_101 + 1
REF_11(uint256) (->ownedTokens) := TMP_102(uint256)
REF_12(uint256) -> REF_9[TMP_101]
REF_12(uint256) (->ownedTokens) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_13(uint256) -> ownedTokensIndex[_tokenId]
REF_13(uint256) (->ownedTokensIndex) := length(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalTokens = totalTokens.add(1)

IRs:
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_103(uint256)"];
}
// Function: 1849.sol-ERC721Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_53(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
owner(address) := TMP_53(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_54(bool) = _to != owner
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
approvedFor(_tokenId) != 0 || _to != 0

IRs:
TMP_56(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_57(bool) = TMP_56 != 0
TMP_58(bool) = _to != 0
TMP_59(bool) = TMP_57 || TMP_58
CONDITION TMP_59"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_5(address) -> tokenApprovals[_tokenId]
REF_5(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
7->1;
}
// Function: 1849.sol-ERC721Token-approvedFor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_4(address) -> tokenApprovals[_tokenId]
RETURN REF_4"];
}
// Function: 1849.sol-ERC721Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner].length

IRs:
REF_0(uint256[]) -> ownedTokens[_owner]
REF_1 -> LENGTH REF_0
RETURN REF_1"];
}
// Function: 1849.sol-ERC721Token-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_92(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_93(bool) = TMP_92 == _owner
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenApprovals[_tokenId] = 0

IRs:
REF_6(address) -> tokenApprovals[_tokenId]
REF_6(address) (->tokenApprovals) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(_owner,0,_tokenId)

IRs:
Emit Approval(_owner,0,_tokenId)"];
}
// Function: 1849.sol-ERC721Token-clearApprovalAndTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_79 = CONVERT 0 to address
TMP_80(bool) = _to != TMP_79
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != ownerOf(_tokenId))

IRs:
TMP_82(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_83(bool) = _to != TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_85(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_86(bool) = TMP_85 == _from
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeToken(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 1849.sol-ERC721Token-isApprovedFor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
approvedFor(_tokenId) == _owner

IRs:
TMP_77(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_78(bool) = TMP_77 == _owner
RETURN TMP_78"];
}
// Function: 1849.sol-ERC721Token-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_111(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_112(bool) = TMP_111 == msg.sender
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-ERC721Token-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_3(address) -> tokenOwner[_tokenId]
owner(address) := REF_3(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = owner != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 1849.sol-ERC721Token-removeToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_104(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_105(bool) = TMP_104 == _from
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_15(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_15(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = balanceOf(_from).sub(1)

IRs:
TMP_107(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_from)
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', '1'] 
lastTokenIndex(uint256) := TMP_108(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_17(uint256[]) -> ownedTokens[_from]
REF_18(uint256) -> REF_17[lastTokenIndex]
lastToken(uint256) := REF_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenOwner[_tokenId] = 0

IRs:
REF_19(address) -> tokenOwner[_tokenId]
REF_19(address) (->tokenOwner) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_20(uint256[]) -> ownedTokens[_from]
REF_21(uint256) -> REF_20[tokenIndex]
REF_21(uint256) (->ownedTokens) := lastToken(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_22(uint256[]) -> ownedTokens[_from]
REF_23(uint256) -> REF_22[lastTokenIndex]
REF_23(uint256) (->ownedTokens) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_24(uint256[]) -> ownedTokens[_from]
REF_25 -> LENGTH REF_24
TMP_109(uint256) := REF_25(uint256)
REF_25(-> ownedTokens) = REF_25 - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_26(uint256) -> ownedTokensIndex[_tokenId]
REF_26(uint256) (->ownedTokensIndex) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_27(uint256) -> ownedTokensIndex[lastToken]
REF_27(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalTokens = totalTokens.sub(1)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_110(uint256)"];
}
// Function: 1849.sol-ERC721Token-takeOwnership(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedFor(msg.sender,_tokenId))

IRs:
TMP_62(bool) = INTERNAL_CALL, ERC721Token.isApprovedFor(address,uint256)(msg.sender,_tokenId)
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clearApprovalAndTransfer(ownerOf(_tokenId),msg.sender,_tokenId)

IRs:
TMP_64(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
INTERNAL_CALL, ERC721Token.clearApprovalAndTransfer(address,address,uint256)(TMP_64,msg.sender,_tokenId)"];
}
// Function: 1849.sol-ERC721Token-tokensOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner]

IRs:
REF_2(uint256[]) -> ownedTokens[_owner]
RETURN REF_2"];
}
// Function: 1849.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalTokens

IRs:
RETURN totalTokens"];
}
// Function: 1849.sol-ERC721Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApprovalAndTransfer(msg.sender,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApprovalAndTransfer(address,address,uint256)(msg.sender,_to,_tokenId)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
2->1;
}
// Function: 1849.sol-Gold-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-Gold-allowance(address,address)
digraph{
}
// Function: 1849.sol-Gold-approve(address,uint256)
digraph{
}
// Function: 1849.sol-Gold-balanceOf(address)
digraph{
}
// Function: 1849.sol-Gold-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_208 = CONVERT 0 to address
pendingOwner(address) := TMP_208(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 1849.sol-Gold-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_115(mapping(address => uint256)) -> allowed[msg.sender]
REF_116(uint256) -> REF_115[_spender]
oldValue(uint256) := REF_116(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_229(bool) = _subtractedValue > oldValue
CONDITION TMP_229"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_117(mapping(address => uint256)) -> allowed[msg.sender]
REF_118(uint256) -> REF_117[_spender]
REF_118(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_120(uint256) (->allowed) := TMP_230(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_122(mapping(address => uint256)) -> allowed[msg.sender]
REF_123(uint256) -> REF_122[_spender]
Emit Approval(msg.sender,_spender,REF_123)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1849.sol-Gold-grantAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = true

IRs:
REF_88(bool) -> mintAccess[_address]
REF_88(bool) (->mintAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-Gold-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_108(mapping(address => uint256)) -> allowed[msg.sender]
REF_109(uint256) -> REF_108[_spender]
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_111', '_addedValue'] 
REF_109(uint256) (->allowed) := TMP_227(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_113(mapping(address => uint256)) -> allowed[msg.sender]
REF_114(uint256) -> REF_113[_spender]
Emit Approval(msg.sender,_spender,REF_114)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1849.sol-Gold-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_240(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_133(uint256) -> balances[_to]
REF_134(uint256) -> balances[_to]
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_134', '_amount'] 
REF_133(uint256) (->balances) := TMP_241(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_243 = CONVERT 0 to address
Emit Transfer(TMP_243,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAccessMint()

IRs:
MODIFIER_CALL, AccessMint.onlyAccessMint()()"];
6->1;
}
// Function: 1849.sol-Gold-onlyAccessMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || mintAccess[msg.sender] == true)

IRs:
TMP_246(bool) = msg.sender == owner
REF_136(bool) -> mintAccess[msg.sender]
TMP_247(bool) = REF_136 == True
TMP_248(bool) = TMP_246 || TMP_247
TMP_249(None) = SOLIDITY_CALL require(bool)(TMP_248)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Gold-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_252(bool) = msg.sender == owner
TMP_253(None) = SOLIDITY_CALL require(bool)(TMP_252)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Gold-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_250(bool) = msg.sender == pendingOwner
TMP_251(None) = SOLIDITY_CALL require(bool)(TMP_250)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Gold-revokeAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = false

IRs:
REF_89(bool) -> mintAccess[_address]
REF_89(bool) (->mintAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1849.sol-Gold-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Gold

IRs:
name(string) := Gold(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = G

IRs:
symbol(string) := G(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 1849.sol-Gold-totalSupply()
digraph{
}
// Function: 1849.sol-Gold-transfer(address,uint256)
digraph{
}
// Function: 1849.sol-Gold-transferFrom(address,address,uint256)
digraph{
}
// Function: 1849.sol-Gold-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_210 = CONVERT 0 to address
TMP_211(bool) = newOwner != TMP_210
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1849.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_43(bool) = msg.sender == owner
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1849.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1849.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = newOwner != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1849.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1849.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_45 = UnaryType.BANG paused 
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_47(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1849.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1849.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1849.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1849.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1849.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_61(mapping(address => uint256)) -> allowed[_owner]
REF_62(uint256) -> REF_61[_spender]
RETURN REF_62"];
}
// Function: 1849.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_59(mapping(address => uint256)) -> allowed[msg.sender]
REF_60(uint256) -> REF_59[_spender]
REF_60(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1849.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1849.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
oldValue(uint256) := REF_71(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_144(bool) = _subtractedValue > oldValue
CONDITION TMP_144"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_72(mapping(address => uint256)) -> allowed[msg.sender]
REF_73(uint256) -> REF_72[_spender]
REF_73(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_74(mapping(address => uint256)) -> allowed[msg.sender]
REF_75(uint256) -> REF_74[_spender]
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_75(uint256) (->allowed) := TMP_145(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
Emit Approval(msg.sender,_spender,REF_78)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1849.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_63(mapping(address => uint256)) -> allowed[msg.sender]
REF_64(uint256) -> REF_63[_spender]
REF_65(mapping(address => uint256)) -> allowed[msg.sender]
REF_66(uint256) -> REF_65[_spender]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_66', '_addedValue'] 
REF_64(uint256) (->allowed) := TMP_142(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
Emit Approval(msg.sender,_spender,REF_69)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1849.sol-StandardToken-totalSupply()
digraph{
}
// Function: 1849.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1849.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_130 = CONVERT 0 to address
TMP_131(bool) = _to != TMP_130
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_45(uint256) -> balances[_from]
TMP_133(bool) = _value <= REF_45
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_46(mapping(address => uint256)) -> allowed[_from]
REF_47(uint256) -> REF_46[msg.sender]
TMP_135(bool) = _value <= REF_47
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_48(uint256) -> balances[_from]
REF_49(uint256) -> balances[_from]
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_49', '_value'] 
REF_48(uint256) (->balances) := TMP_137(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_51(uint256) -> balances[_to]
REF_52(uint256) -> balances[_to]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_52', '_value'] 
REF_51(uint256) (->balances) := TMP_138(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_54(mapping(address => uint256)) -> allowed[_from]
REF_55(uint256) -> REF_54[msg.sender]
REF_56(mapping(address => uint256)) -> allowed[_from]
REF_57(uint256) -> REF_56[msg.sender]
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_57', '_value'] 
REF_55(uint256) (->allowed) := TMP_139(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
