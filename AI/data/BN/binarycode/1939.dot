digraph G {
// Function: 1939.sol-GScam-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_407(bool) = msg.sender == admin
TMP_408(None) = SOLIDITY_CALL require(bool,string)(TMP_407,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,gscam already activated)

IRs:
TMP_409(bool) = activated_ == False
TMP_410(None) = SOLIDITY_CALL require(bool,string)(TMP_409,gscam already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_.strt = now - rndGap_

IRs:
REF_551(uint256) -> round_.strt
TMP_411(uint256) = now - rndGap_
REF_551(uint256) (->round_) := TMP_411(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_.end = now + rndInit_

IRs:
REF_552(uint256) -> round_.end
TMP_412(uint256) = now + rndInit_
REF_552(uint256) (->round_) := TMP_412(uint256)"];
}
// Function: 1939.sol-GScam-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_323(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(TMP_323)
TMP_325 = CONVERT TMP_324 to uint256
TMP_326(uint256) = TMP_325 / now
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_322', 'TMP_326'] 
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_327', 'block.gaslimit'] 
TMP_329(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_330(bytes32) = SOLIDITY_CALL keccak256()(TMP_329)
TMP_331 = CONVERT TMP_330 to uint256
TMP_332(uint256) = TMP_331 / now
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_328', 'TMP_332'] 
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_333', 'block.number'] 
TMP_335(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_334)
TMP_336(bytes32) = SOLIDITY_CALL keccak256()(TMP_335)
TMP_337 = CONVERT TMP_336 to uint256
seed(uint256) := TMP_337(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_338(uint256) = seed / 1000
TMP_339(uint256) = TMP_338 * 1000
TMP_340(uint256) = seed - TMP_339
TMP_341(bool) = TMP_340 < airDropTracker_
CONDITION TMP_341"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1939.sol-GScam-buyCore(uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_197(uint256) -> round_.strt
TMP_140(uint256) = REF_197 + rndGap_
TMP_141(bool) = _now > TMP_140
REF_198(uint256) -> round_.end
TMP_142(bool) = _now <= REF_198
REF_199(uint256) -> round_.end
TMP_143(bool) = _now > REF_199
REF_200(uint256) -> round_.plyr
TMP_144(bool) = REF_200 == 0
TMP_145(bool) = TMP_143 && TMP_144
TMP_146(bool) = TMP_142 || TMP_145
TMP_147(bool) = TMP_141 && TMP_146
CONDITION TMP_147"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
core(_pID,msg.value,_affID,_eventData_)

IRs:
INTERNAL_CALL, GScam.core(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,msg.value,_affID,_eventData_)"];
3->12;
4[label="Node Type: IF 4

EXPRESSION:
_now > round_.end && round_.ended == false

IRs:
REF_201(uint256) -> round_.end
TMP_149(bool) = _now > REF_201
REF_202(bool) -> round_.ended
TMP_150(bool) = REF_202 == False
TMP_151(bool) = TMP_149 && TMP_150
CONDITION TMP_151"];
4->5[label="True"];
4->10[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_.ended = true

IRs:
REF_203(bool) -> round_.ended
REF_203(bool) (->round_) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_152(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_152(RSdatasets.EventReturns)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_204(uint256) -> _eventData_.compressedData
REF_205(uint256) -> _eventData_.compressedData
TMP_153(uint256) = _now * 1000000000000000000
TMP_154(uint256) = REF_205 + TMP_153
REF_204(uint256) (->_eventData_) := TMP_154(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_206(uint256) -> _eventData_.compressedIDs
REF_207(uint256) -> _eventData_.compressedIDs
TMP_155(uint256) = REF_207 + _pID
REF_206(uint256) (->_eventData_) := TMP_155(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
GEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_209(RSdatasets.Player) -> plyr_[_pID]
REF_210(bytes32) -> REF_209.name
REF_211(uint256) -> _eventData_.compressedData
REF_212(uint256) -> _eventData_.compressedIDs
REF_213(address) -> _eventData_.winnerAddr
REF_214(bytes32) -> _eventData_.winnerName
REF_215(uint256) -> _eventData_.amountWon
REF_216(uint256) -> _eventData_.newPot
REF_217(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_210,msg.value,REF_211,REF_212,REF_213,REF_214,REF_215,REF_216,REF_217)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_218(RSdatasets.Player) -> plyr_[_pID]
REF_219(uint256) -> REF_218.gen
REF_220(RSdatasets.Player) -> plyr_[_pID]
REF_221(uint256) -> REF_220.gen
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_221', 'msg.value'] 
REF_219(uint256) (->plyr_) := TMP_157(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
}
// Function: 1939.sol-GScam-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_15(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_15(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_12(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_12(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_13(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_13(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != plyr_[_pID].laff && _affID != _pID && plyr_[_pID].laff == 0

IRs:
REF_14(RSdatasets.Player) -> plyr_[_pID]
REF_15(uint256) -> REF_14.laff
TMP_16(bool) = _affID != REF_15
TMP_17(bool) = _affID != _pID
TMP_18(bool) = TMP_16 && TMP_17
REF_16(RSdatasets.Player) -> plyr_[_pID]
REF_17(uint256) -> REF_16.laff
TMP_19(bool) = REF_17 == 0
TMP_20(bool) = TMP_18 && TMP_19
CONDITION TMP_20"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_18(RSdatasets.Player) -> plyr_[_pID]
REF_19(uint256) -> REF_18.laff
REF_19(uint256) (->plyr_) := _affID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_20(RSdatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affID(uint256) := REF_21(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, GScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GScam.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 1939.sol-GScam-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_5(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_5(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_3(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_3(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode != plyr_[_pID].laff && _affCode != _pID && plyr_[_pID].laff == 0

IRs:
REF_4(RSdatasets.Player) -> plyr_[_pID]
REF_5(uint256) -> REF_4.laff
TMP_6(bool) = _affCode != REF_5
TMP_7(bool) = _affCode != _pID
TMP_8(bool) = TMP_6 && TMP_7
REF_6(RSdatasets.Player) -> plyr_[_pID]
REF_7(uint256) -> REF_6.laff
TMP_9(bool) = REF_7 == 0
TMP_10(bool) = TMP_8 && TMP_9
CONDITION TMP_10"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_8(RSdatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
REF_9(uint256) (->plyr_) := _affCode(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_10(RSdatasets.Player) -> plyr_[_pID]
REF_11(uint256) -> REF_10.laff
_affCode(uint256) := REF_11(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, GScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eventData_)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GScam.isWithinLimits(uint256)(msg.value)"];
10->1;
}
// Function: 1939.sol-GScam-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_25(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_25(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_22(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_22(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_23(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_23(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != plyr_[_pID].laff && _affID != _pID && plyr_[_pID].laff == 0

IRs:
REF_24(RSdatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
TMP_26(bool) = _affID != REF_25
TMP_27(bool) = _affID != _pID
TMP_28(bool) = TMP_26 && TMP_27
REF_26(RSdatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
TMP_29(bool) = REF_27 == 0
TMP_30(bool) = TMP_28 && TMP_29
CONDITION TMP_30"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_28(RSdatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
REF_29(uint256) (->plyr_) := _affID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_30(RSdatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
_affID(uint256) := REF_31(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, GScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GScam.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 1939.sol-GScam-calcKeysReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_319(uint256) -> round_.strt
TMP_230(uint256) = REF_319 + rndGap_
TMP_231(bool) = _now > TMP_230
REF_320(uint256) -> round_.end
TMP_232(bool) = _now <= REF_320
REF_321(uint256) -> round_.end
TMP_233(bool) = _now > REF_321
REF_322(uint256) -> round_.plyr
TMP_234(bool) = REF_322 == 0
TMP_235(bool) = TMP_233 && TMP_234
TMP_236(bool) = TMP_232 || TMP_235
TMP_237(bool) = TMP_231 && TMP_236
CONDITION TMP_237"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_.eth).keysRec(_eth))

IRs:
REF_323(uint256) -> round_.eth
TMP_238(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_323', '_eth'] 
RETURN TMP_238"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_239(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_239"];
}
// Function: 1939.sol-GScam-calcUnMaskedEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_.mask).mul(plyrRnds_[_pID].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID].mask))

IRs:
REF_312(uint256) -> round_.mask
REF_314(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_315(uint256) -> REF_314.keys
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_312', 'REF_315'] 
TMP_228(uint256) = TMP_227 / 1000000000000000000
REF_317(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_318(uint256) -> REF_317.mask
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_228', 'REF_318'] 
RETURN TMP_229"];
}
// Function: 1939.sol-GScam-constructor(PlayerBookInterface,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
PlayerBook = _PlayerBook

IRs:
PlayerBook(PlayerBookInterface) := _PlayerBook(PlayerBookInterface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
yyyy = _yyyy

IRs:
yyyy(address) := _yyyy(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gggg = _gggg

IRs:
gggg(address) := _gggg(address)"];
}
// Function: 1939.sol-GScam-core(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_affID != 0,must have affID)

IRs:
TMP_177(bool) = _affID != 0
TMP_178(None) = SOLIDITY_CALL require(bool,string)(TMP_177,must have affID)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrRnds_[_pID].keys == 0

IRs:
REF_247(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_248(uint256) -> REF_247.keys
TMP_179(bool) = REF_248 == 0
CONDITION TMP_179"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_180(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.managePlayer(uint256,RSdatasets.EventReturns)(_pID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_180(RSdatasets.EventReturns)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
round_.eth < preIcoMax_ && plyrRnds_[_pID].eth.add(_eth) > preIcoPerEth_

IRs:
REF_249(uint256) -> round_.eth
TMP_181(bool) = REF_249 < preIcoMax_
REF_250(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_251(uint256) -> REF_250.eth
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_251', '_eth'] 
TMP_183(bool) = TMP_182 > preIcoPerEth_
TMP_184(bool) = TMP_181 && TMP_183
CONDITION TMP_184"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_availableLimit = (preIcoPerEth_).sub(plyrRnds_[_pID].eth)

IRs:
REF_254(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_255(uint256) -> REF_254.eth
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['preIcoPerEth_', 'REF_255'] 
_availableLimit(uint256) := TMP_185(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_186(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_257(RSdatasets.Player) -> plyr_[_pID]
REF_258(uint256) -> REF_257.gen
REF_259(RSdatasets.Player) -> plyr_[_pID]
REF_260(uint256) -> REF_259.gen
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_260', '_refund'] 
REF_258(uint256) (->plyr_) := TMP_187(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_eth > 1000000000

IRs:
TMP_188(bool) = _eth > 1000000000
CONDITION TMP_188"];
11->12[label="True"];
11->55[label="False"];
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
_keys = (round_.eth).keysRec(_eth)

IRs:
REF_262(uint256) -> round_.eth
TMP_189(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_262', '_eth'] 
_keys(uint256) := TMP_189(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_190(bool) = _keys >= 1000000000000000000
CONDITION TMP_190"];
13->14[label="True"];
13->19[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
updateTimer(_keys)

IRs:
INTERNAL_CALL, GScam.updateTimer(uint256)(_keys)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
round_.plyr != _pID

IRs:
REF_264(uint256) -> round_.plyr
TMP_192(bool) = REF_264 != _pID
CONDITION TMP_192"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
round_.plyr = _pID

IRs:
REF_265(uint256) -> round_.plyr
REF_265(uint256) (->round_) := _pID(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_266(uint256) -> _eventData_.compressedData
REF_267(uint256) -> _eventData_.compressedData
TMP_193(uint256) = REF_267 + 100
REF_266(uint256) (->_eventData_) := TMP_193(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_194(bool) = _eth >= 100000000000000000
CONDITION TMP_194"];
20->21[label="True"];
20->46[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_195(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
airdrop() == true

IRs:
TMP_196(bool) = INTERNAL_CALL, GScam.airdrop()()
TMP_197(bool) = TMP_196 == True
CONDITION TMP_197"];
22->23[label="True"];
22->45[label="False"];
23[label="Node Type: NEW VARIABLE 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_198(bool) = _eth >= 10000000000000000000
CONDITION TMP_198"];
24->25[label="True"];
24->29[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_200(uint256) = TMP_199 / 100
_prize(uint256) := TMP_200(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_269(RSdatasets.Player) -> plyr_[_pID]
REF_270(uint256) -> REF_269.win
REF_271(RSdatasets.Player) -> plyr_[_pID]
REF_272(uint256) -> REF_271.win
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_272', '_prize'] 
REF_270(uint256) (->plyr_) := TMP_201(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_202(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_275(uint256) -> _eventData_.compressedData
REF_275(-> _eventData_) = REF_275 + 300000000000000000000000000000000"];
28->41;
29[label="Node Type: IF 29

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_203(bool) = _eth >= 1000000000000000000
TMP_204(bool) = _eth < 10000000000000000000
TMP_205(bool) = TMP_203 && TMP_204
CONDITION TMP_205"];
29->30[label="True"];
29->34[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_207(uint256) = TMP_206 / 100
_prize(uint256) := TMP_207(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_277(RSdatasets.Player) -> plyr_[_pID]
REF_278(uint256) -> REF_277.win
REF_279(RSdatasets.Player) -> plyr_[_pID]
REF_280(uint256) -> REF_279.win
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_280', '_prize'] 
REF_278(uint256) (->plyr_) := TMP_208(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_209(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_283(uint256) -> _eventData_.compressedData
REF_283(-> _eventData_) = REF_283 + 200000000000000000000000000000000"];
33->40;
34[label="Node Type: IF 34

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_210(bool) = _eth >= 100000000000000000
TMP_211(bool) = _eth < 1000000000000000000
TMP_212(bool) = TMP_210 && TMP_211
CONDITION TMP_212"];
34->35[label="True"];
34->39[label="False"];
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_214(uint256) = TMP_213 / 100
_prize(uint256) := TMP_214(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_285(RSdatasets.Player) -> plyr_[_pID]
REF_286(uint256) -> REF_285.win
REF_287(RSdatasets.Player) -> plyr_[_pID]
REF_288(uint256) -> REF_287.win
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_288', '_prize'] 
REF_286(uint256) (->plyr_) := TMP_215(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_216(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 100000000000000000000000000000000

IRs:
REF_291(uint256) -> _eventData_.compressedData
REF_291(-> _eventData_) = REF_291 + 100000000000000000000000000000000"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_292(uint256) -> _eventData_.compressedData
REF_292(-> _eventData_) = REF_292 + 10000000000000000000000000000000"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_293(uint256) -> _eventData_.compressedData
TMP_217(uint256) = _prize * 1000000000000000000000000000000000
REF_293(-> _eventData_) = REF_293 + TMP_217"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: END_IF 46
"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_294(uint256) -> _eventData_.compressedData
REF_295(uint256) -> _eventData_.compressedData
TMP_218(uint256) = airDropTracker_ * 1000
TMP_219(uint256) = REF_295 + TMP_218
REF_294(uint256) (->_eventData_) := TMP_219(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
plyrRnds_[_pID].keys = _keys.add(plyrRnds_[_pID].keys)

IRs:
REF_296(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_297(uint256) -> REF_296.keys
REF_299(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_300(uint256) -> REF_299.keys
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_300'] 
REF_297(uint256) (->plyrRnds_) := TMP_220(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
plyrRnds_[_pID].eth = _eth.add(plyrRnds_[_pID].eth)

IRs:
REF_301(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_302(uint256) -> REF_301.eth
REF_304(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_305(uint256) -> REF_304.eth
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_305'] 
REF_302(uint256) (->plyrRnds_) := TMP_221(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
round_.keys = _keys.add(round_.keys)

IRs:
REF_306(uint256) -> round_.keys
REF_308(uint256) -> round_.keys
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_308'] 
REF_306(uint256) (->round_) := TMP_222(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
round_.eth = _eth.add(round_.eth)

IRs:
REF_309(uint256) -> round_.eth
REF_311(uint256) -> round_.eth
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_311'] 
REF_309(uint256) (->round_) := TMP_223(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
_eventData_ = distributeExternal(_pID,_eth,_affID,_eventData_)

IRs:
TMP_224(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.distributeExternal(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_affID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_224(RSdatasets.EventReturns)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
_eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_)

IRs:
TMP_225(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.distributeInternal(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_keys,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_225(RSdatasets.EventReturns)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
endTx(_pID,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, GScam.endTx(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_keys,_eventData_)"];
54->55;
55[label="Node Type: END_IF 55
"];
}
// Function: 1939.sol-GScam-determinePID(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_360(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_360(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_268(bool) = _pID == 0
CONDITION TMP_268"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_269(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_269(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_270(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_270(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_271(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_271(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_364(uint256) -> pIDxAddr_[msg.sender]
REF_364(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_365(RSdatasets.Player) -> plyr_[_pID]
REF_366(address) -> REF_365.addr
REF_366(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_272(bool) = _name != 
CONDITION TMP_272"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_367(uint256) -> pIDxName_[_name]
REF_367(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_368(RSdatasets.Player) -> plyr_[_pID]
REF_369(bytes32) -> REF_368.name
REF_369(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_370(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_371(bool) -> REF_370[_name]
REF_371(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_273(bool) = _laff != 0
TMP_274(bool) = _laff != _pID
TMP_275(bool) = TMP_273 && TMP_274
CONDITION TMP_275"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_372(RSdatasets.Player) -> plyr_[_pID]
REF_373(uint256) -> REF_372.laff
REF_373(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_374(uint256) -> _eventData_.compressedData
REF_375(uint256) -> _eventData_.compressedData
TMP_276(uint256) = REF_375 + 1
REF_374(uint256) (->_eventData_) := TMP_276(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1939.sol-GScam-distributeExternal(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = (_eth.mul(5)) / 100

IRs:
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '5'] 
TMP_343(uint256) = TMP_342 / 100
_com(uint256) := TMP_343(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_affs = (_eth.mul(affTol)) / 100

IRs:
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'affTol'] 
TMP_345(uint256) = TMP_344 / 100
_affs(uint256) := TMP_345(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
(_affIDNext,_comTmp) = updateAff(_pID,_affs,_affID,affLv1_)

IRs:
TUPLE_3(uint256,uint256) = INTERNAL_CALL, GScam.updateAff(uint256,uint256,uint256,uint256)(_pID,_affs,_affID,affLv1_)
_affIDNext(uint256)= UNPACK TUPLE_3 index: 0 
_comTmp(uint256)= UNPACK TUPLE_3 index: 1 "];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_comTmp > 0

IRs:
TMP_346(bool) = _comTmp > 0
CONDITION TMP_346"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = (_com.add(_comTmp))

IRs:
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_comTmp'] 
_com(uint256) := TMP_347(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
(_affIDNext,_comTmp) = updateAff(_pID,_affs,_affIDNext,affLv2_)

IRs:
TUPLE_4(uint256,uint256) = INTERNAL_CALL, GScam.updateAff(uint256,uint256,uint256,uint256)(_pID,_affs,_affIDNext,affLv2_)
_affIDNext(uint256)= UNPACK TUPLE_4 index: 0 
_comTmp(uint256)= UNPACK TUPLE_4 index: 1 "];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_comTmp > 0

IRs:
TMP_348(bool) = _comTmp > 0
CONDITION TMP_348"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_com = (_com.add(_comTmp))

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_comTmp'] 
_com(uint256) := TMP_349(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(_affIDNext,_comTmp) = updateAff(_pID,_affs,_affIDNext,affLv3_)

IRs:
TUPLE_5(uint256,uint256) = INTERNAL_CALL, GScam.updateAff(uint256,uint256,uint256,uint256)(_pID,_affs,_affIDNext,affLv3_)
_affIDNext(uint256)= UNPACK TUPLE_5 index: 0 
_comTmp(uint256)= UNPACK TUPLE_5 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_comTmp > 0

IRs:
TMP_350(bool) = _comTmp > 0
CONDITION TMP_350"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_com = (_com.add(_comTmp))

IRs:
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_comTmp'] 
_com(uint256) := TMP_351(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
yyyy.transfer((_com.mul(80) / 100))

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_com', '80'] 
TMP_353(uint256) = TMP_352 / 100
Transfer dest:yyyy value:TMP_353"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
gggg.transfer((_com.sub((_com.mul(80) / 100))))

IRs:
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_com', '80'] 
TMP_356(uint256) = TMP_355 / 100
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_com', 'TMP_356'] 
Transfer dest:gggg value:TMP_357"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1939.sol-GScam-distributeInternal(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_)) / 100

IRs:
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'fees_'] 
TMP_360(uint256) = TMP_359 / 100
_gen(uint256) := TMP_360(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 20)

IRs:
TMP_361(uint256) = _eth / 20
_air(uint256) := TMP_361(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_362(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_otherP = affTol.add(fees_).add(10)

IRs:
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['affTol', 'fees_'] 
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_363', '10'] 
_otherP(uint256) := TMP_364(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub((_eth.mul(_otherP)) / 100)

IRs:
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '_otherP'] 
TMP_366(uint256) = TMP_365 / 100
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_366'] 
_pot(uint256) := TMP_367(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_pID,_gen,_keys)

IRs:
TMP_368(uint256) = INTERNAL_CALL, GScam.updateMasks(uint256,uint256,uint256)(_pID,_gen,_keys)
_dust(uint256) := TMP_368(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_369(bool) = _dust > 0
CONDITION TMP_369"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_370(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_.pot = _pot.add(_dust).add(round_.pot)

IRs:
REF_465(uint256) -> round_.pot
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_468(uint256) -> round_.pot
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_371', 'REF_468'] 
REF_465(uint256) (->round_) := TMP_372(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_469(uint256) -> _eventData_.genAmount
REF_471(uint256) -> _eventData_.genAmount
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_471'] 
REF_469(uint256) (->_eventData_) := TMP_373(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_472(uint256) -> _eventData_.potAmount
REF_472(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1939.sol-GScam-endRound(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_winPID = round_.plyr

IRs:
REF_378(uint256) -> round_.plyr
_winPID(uint256) := REF_378(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pot = round_.pot.add(airDropPot_)

IRs:
REF_379(uint256) -> round_.pot
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_379', 'airDropPot_'] 
_pot(uint256) := TMP_278(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_win = (_pot.mul(60)) / 100

IRs:
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '60'] 
TMP_280(uint256) = TMP_279 / 100
_win(uint256) := TMP_280(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_gen = (_pot.mul(potSplit_)) / 100

IRs:
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'potSplit_'] 
TMP_282(uint256) = TMP_281 / 100
_gen(uint256) := TMP_282(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_com = ((_pot.sub(_win)).sub(_gen))

IRs:
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_283', '_gen'] 
_com(uint256) := TMP_284(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_.keys)

IRs:
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_386(uint256) -> round_.keys
TMP_286(uint256) = TMP_285 / REF_386
_ppt(uint256) := TMP_286(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_.keys)) / 1000000000000000000)

IRs:
REF_389(uint256) -> round_.keys
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_389'] 
TMP_288(uint256) = TMP_287 / 1000000000000000000
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_288'] 
_dust(uint256) := TMP_289(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_dust > 0

IRs:
TMP_290(bool) = _dust > 0
CONDITION TMP_290"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_291(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_com = _com.add(_dust)

IRs:
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_dust'] 
_com(uint256) := TMP_292(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_392(RSdatasets.Player) -> plyr_[_winPID]
REF_393(uint256) -> REF_392.win
REF_395(RSdatasets.Player) -> plyr_[_winPID]
REF_396(uint256) -> REF_395.win
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_396'] 
REF_393(uint256) (->plyr_) := TMP_293(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
yyyy.transfer((_com.mul(80) / 100))

IRs:
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_com', '80'] 
TMP_295(uint256) = TMP_294 / 100
Transfer dest:yyyy value:TMP_295"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
gggg.transfer((_com.sub((_com.mul(80) / 100))))

IRs:
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_com', '80'] 
TMP_298(uint256) = TMP_297 / 100
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_com', 'TMP_298'] 
Transfer dest:gggg value:TMP_299"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_.mask = _ppt.add(round_.mask)

IRs:
REF_402(uint256) -> round_.mask
REF_404(uint256) -> round_.mask
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_404'] 
REF_402(uint256) (->round_) := TMP_301(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_.end * 1000000)

IRs:
REF_405(uint256) -> _eventData_.compressedData
REF_406(uint256) -> _eventData_.compressedData
REF_407(uint256) -> round_.end
TMP_302(uint256) = REF_407 * 1000000
TMP_303(uint256) = REF_406 + TMP_302
REF_405(uint256) (->_eventData_) := TMP_303(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000)

IRs:
REF_408(uint256) -> _eventData_.compressedIDs
REF_409(uint256) -> _eventData_.compressedIDs
TMP_304(uint256) = _winPID * 100000000000000000000000000
TMP_305(uint256) = REF_409 + TMP_304
REF_408(uint256) (->_eventData_) := TMP_305(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_410(address) -> _eventData_.winnerAddr
REF_411(RSdatasets.Player) -> plyr_[_winPID]
REF_412(address) -> REF_411.addr
REF_410(address) (->_eventData_) := REF_412(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_413(bytes32) -> _eventData_.winnerName
REF_414(RSdatasets.Player) -> plyr_[_winPID]
REF_415(bytes32) -> REF_414.name
REF_413(bytes32) (->_eventData_) := REF_415(bytes32)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_416(uint256) -> _eventData_.amountWon
REF_416(uint256) (->_eventData_) := _win(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_417(uint256) -> _eventData_.genAmount
REF_417(uint256) (->_eventData_) := _gen(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.newPot = 0

IRs:
REF_418(uint256) -> _eventData_.newPot
REF_418(uint256) (->_eventData_) := 0(uint256)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1939.sol-GScam-endTx(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 100000000000000000)

IRs:
REF_536(uint256) -> _eventData_.compressedData
REF_537(uint256) -> _eventData_.compressedData
TMP_403(uint256) = now * 100000000000000000
TMP_404(uint256) = REF_537 + TMP_403
REF_536(uint256) (->_eventData_) := TMP_404(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_538(uint256) -> _eventData_.compressedIDs
REF_539(uint256) -> _eventData_.compressedIDs
TMP_405(uint256) = REF_539 + _pID
REF_538(uint256) (->_eventData_) := TMP_405(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
GEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_541(uint256) -> _eventData_.compressedData
REF_542(uint256) -> _eventData_.compressedIDs
REF_543(RSdatasets.Player) -> plyr_[_pID]
REF_544(bytes32) -> REF_543.name
REF_545(address) -> _eventData_.winnerAddr
REF_546(bytes32) -> _eventData_.winnerName
REF_547(uint256) -> _eventData_.amountWon
REF_548(uint256) -> _eventData_.newPot
REF_549(uint256) -> _eventData_.genAmount
REF_550(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_541,REF_542,REF_544,msg.sender,_eth,_keys,REF_545,REF_546,REF_547,REF_548,REF_549,REF_550,airDropPot_)"];
}
// Function: 1939.sol-GScam-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_0(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_0(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_0(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_1(RSdatasets.Player) -> plyr_[_pID]
REF_2(uint256) -> REF_1.laff
INTERNAL_CALL, GScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,REF_2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, GScam.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1939.sol-GScam-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_116(uint256) -> round_.strt
TMP_93(uint256) = REF_116 + rndGap_
TMP_94(bool) = _now > TMP_93
REF_117(uint256) -> round_.end
TMP_95(bool) = _now <= REF_117
REF_118(uint256) -> round_.end
TMP_96(bool) = _now > REF_118
REF_119(uint256) -> round_.plyr
TMP_97(bool) = REF_119 == 0
TMP_98(bool) = TMP_96 && TMP_97
TMP_99(bool) = TMP_95 || TMP_98
TMP_100(bool) = TMP_94 && TMP_99
CONDITION TMP_100"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_.keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_120(uint256) -> round_.keys
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_120', '1000000000000000000'] 
TMP_102(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_101', '1000000000000000000'] 
RETURN TMP_102"];
4[label="Node Type: RETURN 4

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 1939.sol-GScam-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(round_.keys,round_.end,round_.strt,round_.pot,round_.plyr,plyr_[round_.plyr].addr,plyr_[round_.plyr].name,airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_172(uint256) -> round_.keys
REF_173(uint256) -> round_.end
REF_174(uint256) -> round_.strt
REF_175(uint256) -> round_.pot
REF_176(uint256) -> round_.plyr
REF_177(uint256) -> round_.plyr
REF_178(RSdatasets.Player) -> plyr_[REF_177]
REF_179(address) -> REF_178.addr
REF_180(uint256) -> round_.plyr
REF_181(RSdatasets.Player) -> plyr_[REF_180]
REF_182(bytes32) -> REF_181.name
TMP_133(uint256) = airDropPot_ * 1000
TMP_134(uint256) = airDropTracker_ + TMP_133
RETURN REF_172,REF_173,REF_174,REF_175,REF_176,REF_179,REF_182,TMP_134"];
}
// Function: 1939.sol-GScam-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_addr == address(0)

IRs:
TMP_135 = CONVERT 0 to address
TMP_136(bool) = _addr == TMP_135
CONDITION TMP_136"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addr == msg.sender

IRs:
TMP_137(bool) = _addr == msg.sender"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_183(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_183(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID)),plyr_[_pID].aff,plyrRnds_[_pID].eth)

IRs:
REF_184(RSdatasets.Player) -> plyr_[_pID]
REF_185(bytes32) -> REF_184.name
REF_186(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_187(uint256) -> REF_186.keys
REF_188(RSdatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.win
REF_190(RSdatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.gen
TMP_138(uint256) = INTERNAL_CALL, GScam.calcUnMaskedEarnings(uint256)(_pID)
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_191', 'TMP_138'] 
REF_193(RSdatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.aff
REF_195(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_196(uint256) -> REF_195.eth
RETURN _pID,REF_185,REF_187,REF_189,TMP_139,REF_194,REF_196"];
}
// Function: 1939.sol-GScam-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now > round_.end && round_.ended == false && round_.plyr != 0

IRs:
REF_129(uint256) -> round_.end
TMP_109(bool) = now > REF_129
REF_130(bool) -> round_.ended
TMP_110(bool) = REF_130 == False
TMP_111(bool) = TMP_109 && TMP_110
REF_131(uint256) -> round_.plyr
TMP_112(bool) = REF_131 != 0
TMP_113(bool) = TMP_111 && TMP_112
CONDITION TMP_113"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
round_.plyr == _pID

IRs:
REF_132(uint256) -> round_.plyr
TMP_114(bool) = REF_132 == _pID
CONDITION TMP_114"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((plyr_[_pID].win).add(((round_.pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID).sub(plyrRnds_[_pID].mask)),plyr_[_pID].aff)

IRs:
REF_133(RSdatasets.Player) -> plyr_[_pID]
REF_134(uint256) -> REF_133.win
REF_136(uint256) -> round_.pot
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_136', '48'] 
TMP_116(uint256) = TMP_115 / 100
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_134', 'TMP_116'] 
REF_138(RSdatasets.Player) -> plyr_[_pID]
REF_139(uint256) -> REF_138.gen
TMP_118(uint256) = INTERNAL_CALL, GScam.getPlayerVaultsHelper(uint256)(_pID)
REF_142(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_143(uint256) -> REF_142.mask
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_118', 'REF_143'] 
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_139', 'TMP_119'] 
REF_144(RSdatasets.Player) -> plyr_[_pID]
REF_145(uint256) -> REF_144.aff
RETURN TMP_117,TMP_120,REF_145"];
4[label="Node Type: RETURN 4

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID).sub(plyrRnds_[_pID].mask)),plyr_[_pID].aff)

IRs:
REF_146(RSdatasets.Player) -> plyr_[_pID]
REF_147(uint256) -> REF_146.win
REF_148(RSdatasets.Player) -> plyr_[_pID]
REF_149(uint256) -> REF_148.gen
TMP_121(uint256) = INTERNAL_CALL, GScam.getPlayerVaultsHelper(uint256)(_pID)
REF_152(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_153(uint256) -> REF_152.mask
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_121', 'REF_153'] 
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_149', 'TMP_122'] 
REF_154(RSdatasets.Player) -> plyr_[_pID]
REF_155(uint256) -> REF_154.aff
RETURN REF_147,TMP_123,REF_155"];
6[label="Node Type: RETURN 6

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID)),plyr_[_pID].aff)

IRs:
REF_156(RSdatasets.Player) -> plyr_[_pID]
REF_157(uint256) -> REF_156.win
REF_158(RSdatasets.Player) -> plyr_[_pID]
REF_159(uint256) -> REF_158.gen
TMP_124(uint256) = INTERNAL_CALL, GScam.calcUnMaskedEarnings(uint256)(_pID)
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_159', 'TMP_124'] 
REF_161(RSdatasets.Player) -> plyr_[_pID]
REF_162(uint256) -> REF_161.aff
RETURN REF_157,TMP_125,REF_162"];
}
// Function: 1939.sol-GScam-getPlayerVaultsHelper(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_.mask).add(((((round_.pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_.keys))).mul(plyrRnds_[_pID].keys)) / 1000000000000000000))

IRs:
REF_163(uint256) -> round_.mask
REF_165(uint256) -> round_.pot
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_165', 'potSplit_'] 
TMP_127(uint256) = TMP_126 / 100
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_127', '1000000000000000000'] 
REF_168(uint256) -> round_.keys
TMP_129(uint256) = TMP_128 / REF_168
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_163', 'TMP_129'] 
REF_170(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_171(uint256) -> REF_170.keys
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_130', 'REF_171'] 
TMP_132(uint256) = TMP_131 / 1000000000000000000
RETURN TMP_132"];
}
// Function: 1939.sol-GScam-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now < round_.end

IRs:
REF_123(uint256) -> round_.end
TMP_103(bool) = _now < REF_123
CONDITION TMP_103"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
_now > round_.strt + rndGap_

IRs:
REF_124(uint256) -> round_.strt
TMP_104(uint256) = REF_124 + rndGap_
TMP_105(bool) = _now > TMP_104
CONDITION TMP_105"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_.end).sub(_now))

IRs:
REF_125(uint256) -> round_.end
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_125', '_now'] 
RETURN TMP_106"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_.strt + rndGap_).sub(_now))

IRs:
REF_127(uint256) -> round_.strt
TMP_107(uint256) = REF_127 + rndGap_
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', '_now'] 
RETURN TMP_108"];
7[label="Node Type: RETURN 7

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1939.sol-GScam-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_326(uint256) -> round_.strt
TMP_240(uint256) = REF_326 + rndGap_
TMP_241(bool) = _now > TMP_240
REF_327(uint256) -> round_.end
TMP_242(bool) = _now <= REF_327
REF_328(uint256) -> round_.end
TMP_243(bool) = _now > REF_328
REF_329(uint256) -> round_.plyr
TMP_244(bool) = REF_329 == 0
TMP_245(bool) = TMP_243 && TMP_244
TMP_246(bool) = TMP_242 || TMP_245
TMP_247(bool) = TMP_241 && TMP_246
CONDITION TMP_247"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_.keys.add(_keys)).ethRec(_keys))

IRs:
REF_330(uint256) -> round_.keys
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_330', '_keys'] 
TMP_249(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_248', '_keys'] 
RETURN TMP_249"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_keys).eth())

IRs:
TMP_250(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_250"];
}
// Function: 1939.sol-GScam-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet)

IRs:
TMP_413(bool) = activated_ == True
TMP_414(None) = SOLIDITY_CALL require(bool,string)(TMP_413,its not ready yet)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1939.sol-GScam-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,non smart contract address only)

IRs:
TMP_415(bool) = _codeLength == 0
TMP_416(None) = SOLIDITY_CALL require(bool,string)(TMP_415,non smart contract address only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1939.sol-GScam-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,too little money)

IRs:
TMP_417(bool) = _eth >= 1000000000
TMP_418(None) = SOLIDITY_CALL require(bool,string)(TMP_417,too little money)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,too much money)

IRs:
TMP_419(bool) = _eth <= 100000000000000000000000
TMP_420(None) = SOLIDITY_CALL require(bool,string)(TMP_419,too much money)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1939.sol-GScam-managePlayer(uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_376(uint256) -> _eventData_.compressedData
REF_377(uint256) -> _eventData_.compressedData
TMP_277(uint256) = REF_377 + 10
REF_376(uint256) (->_eventData_) := TMP_277(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1939.sol-GScam-reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_223(uint256) -> round_.strt
TMP_158(uint256) = REF_223 + rndGap_
TMP_159(bool) = _now > TMP_158
REF_224(uint256) -> round_.end
TMP_160(bool) = _now <= REF_224
REF_225(uint256) -> round_.end
TMP_161(bool) = _now > REF_225
REF_226(uint256) -> round_.plyr
TMP_162(bool) = REF_226 == 0
TMP_163(bool) = TMP_161 && TMP_162
TMP_164(bool) = TMP_160 || TMP_163
TMP_165(bool) = TMP_159 && TMP_164
CONDITION TMP_165"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_227(RSdatasets.Player) -> plyr_[_pID]
REF_228(uint256) -> REF_227.gen
TMP_166(uint256) = INTERNAL_CALL, GScam.withdrawEarnings(uint256)(_pID)
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_166', '_eth'] 
REF_228(uint256) (->plyr_) := TMP_167(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_pID,_eth,_affID,_eventData_)

IRs:
INTERNAL_CALL, GScam.core(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_affID,_eventData_)"];
4->12;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_.end && round_.ended == false

IRs:
REF_230(uint256) -> round_.end
TMP_169(bool) = _now > REF_230
REF_231(bool) -> round_.ended
TMP_170(bool) = REF_231 == False
TMP_171(bool) = TMP_169 && TMP_170
CONDITION TMP_171"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_.ended = true

IRs:
REF_232(bool) -> round_.ended
REF_232(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_172(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_172(RSdatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_233(uint256) -> _eventData_.compressedData
REF_234(uint256) -> _eventData_.compressedData
TMP_173(uint256) = _now * 1000000000000000000
TMP_174(uint256) = REF_234 + TMP_173
REF_233(uint256) (->_eventData_) := TMP_174(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_235(uint256) -> _eventData_.compressedIDs
REF_236(uint256) -> _eventData_.compressedIDs
TMP_175(uint256) = REF_236 + _pID
REF_235(uint256) (->_eventData_) := TMP_175(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
GEvents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_238(RSdatasets.Player) -> plyr_[_pID]
REF_239(bytes32) -> REF_238.name
REF_240(uint256) -> _eventData_.compressedData
REF_241(uint256) -> _eventData_.compressedIDs
REF_242(address) -> _eventData_.winnerAddr
REF_243(bytes32) -> _eventData_.winnerName
REF_244(uint256) -> _eventData_.amountWon
REF_245(uint256) -> _eventData_.newPot
REF_246(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_239,REF_240,REF_241,REF_242,REF_243,REF_244,REF_245,REF_246)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
}
// Function: 1939.sol-GScam-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_41(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_41(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_42(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_42(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != plyr_[_pID].laff && _affID != _pID && plyr_[_pID].laff == 0

IRs:
REF_43(RSdatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
TMP_44(bool) = _affID != REF_44
TMP_45(bool) = _affID != _pID
TMP_46(bool) = TMP_44 && TMP_45
REF_45(RSdatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
TMP_47(bool) = REF_46 == 0
TMP_48(bool) = TMP_46 && TMP_47
CONDITION TMP_48"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_47(RSdatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
REF_48(uint256) (->plyr_) := _affID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_49(RSdatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
_affID(uint256) := REF_50(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, GScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, GScam.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 1939.sol-GScam-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_32(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_32(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode != plyr_[_pID].laff && _affCode != _pID && plyr_[_pID].laff == 0

IRs:
REF_33(RSdatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
TMP_35(bool) = _affCode != REF_34
TMP_36(bool) = _affCode != _pID
TMP_37(bool) = TMP_35 && TMP_36
REF_35(RSdatasets.Player) -> plyr_[_pID]
REF_36(uint256) -> REF_35.laff
TMP_38(bool) = REF_36 == 0
TMP_39(bool) = TMP_37 && TMP_38
CONDITION TMP_39"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_37(RSdatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
REF_38(uint256) (->plyr_) := _affCode(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_39(RSdatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
_affCode(uint256) := REF_40(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, GScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, GScam.isWithinLimits(uint256)(_eth)"];
10->1;
}
// Function: 1939.sol-GScam-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_52(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_52(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != plyr_[_pID].laff && _affID != _pID && plyr_[_pID].laff == 0

IRs:
REF_53(RSdatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
TMP_53(bool) = _affID != REF_54
TMP_54(bool) = _affID != _pID
TMP_55(bool) = TMP_53 && TMP_54
REF_55(RSdatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_56(bool) = REF_56 == 0
TMP_57(bool) = TMP_55 && TMP_56
CONDITION TMP_57"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(RSdatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_59(RSdatasets.Player) -> plyr_[_pID]
REF_60(uint256) -> REF_59.laff
_affID(uint256) := REF_60(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, GScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, GScam.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 1939.sol-GScam-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),only PlayerBook can call this function)

IRs:
TMP_251 = CONVERT PlayerBook to address
TMP_252(bool) = msg.sender == TMP_251
TMP_253(None) = SOLIDITY_CALL require(bool,string)(TMP_252,only PlayerBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_334(uint256) -> pIDxAddr_[_addr]
TMP_254(bool) = REF_334 != _pID
CONDITION TMP_254"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_335(uint256) -> pIDxAddr_[_addr]
REF_335(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_336(uint256) -> pIDxName_[_name]
TMP_255(bool) = REF_336 != _pID
CONDITION TMP_255"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_337(uint256) -> pIDxName_[_name]
REF_337(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_338(RSdatasets.Player) -> plyr_[_pID]
REF_339(address) -> REF_338.addr
TMP_256(bool) = REF_339 != _addr
CONDITION TMP_256"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_340(RSdatasets.Player) -> plyr_[_pID]
REF_341(address) -> REF_340.addr
REF_341(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_342(RSdatasets.Player) -> plyr_[_pID]
REF_343(bytes32) -> REF_342.name
TMP_257(bool) = REF_343 != _name
CONDITION TMP_257"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_344(RSdatasets.Player) -> plyr_[_pID]
REF_345(bytes32) -> REF_344.name
REF_345(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff && plyr_[_pID].laff != 0 && _laff != _pID

IRs:
REF_346(RSdatasets.Player) -> plyr_[_pID]
REF_347(uint256) -> REF_346.laff
TMP_258(bool) = REF_347 != _laff
REF_348(RSdatasets.Player) -> plyr_[_pID]
REF_349(uint256) -> REF_348.laff
TMP_259(bool) = REF_349 != 0
TMP_260(bool) = TMP_258 && TMP_259
TMP_261(bool) = _laff != _pID
TMP_262(bool) = TMP_260 && TMP_261
CONDITION TMP_262"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_350(RSdatasets.Player) -> plyr_[_pID]
REF_351(uint256) -> REF_350.laff
REF_351(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_352(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_353(bool) -> REF_352[_name]
TMP_263(bool) = REF_353 == False
CONDITION TMP_263"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_354(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_355(bool) -> REF_354[_name]
REF_355(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1939.sol-GScam-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),only PlayerBook can call this function)

IRs:
TMP_264 = CONVERT PlayerBook to address
TMP_265(bool) = msg.sender == TMP_264
TMP_266(None) = SOLIDITY_CALL require(bool,string)(TMP_265,only PlayerBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_356(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_357(bool) -> REF_356[_name]
TMP_267(bool) = REF_357 == False
CONDITION TMP_267"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_358(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_359(bool) -> REF_358[_name]
REF_359(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1939.sol-GScam-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_81(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_92(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_92(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
GEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_94(RSdatasets.Player) -> plyr_[_affID]
REF_95(address) -> REF_94.addr
REF_96(RSdatasets.Player) -> plyr_[_affID]
REF_97(bytes32) -> REF_96.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_95,REF_97,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
9->1;
}
// Function: 1939.sol-GScam-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_85(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_101(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_101(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
GEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_103(RSdatasets.Player) -> plyr_[_affID]
REF_104(address) -> REF_103.addr
REF_105(RSdatasets.Player) -> plyr_[_affID]
REF_106(bytes32) -> REF_105.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_104,REF_106,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
9->1;
}
// Function: 1939.sol-GScam-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_89(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_89(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_110(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_110(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
GEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_112(RSdatasets.Player) -> plyr_[_affID]
REF_113(address) -> REF_112.addr
REF_114(RSdatasets.Player) -> plyr_[_affID]
REF_115(bytes32) -> REF_114.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_113,REF_115,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
9->1;
}
// Function: 1939.sol-GScam-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = GScam Round #1

IRs:
name(string) := GScam Round #1(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = GS1

IRs:
symbol(string) := GS1(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
preIcoMax_ = 100000000000000000000

IRs:
preIcoMax_(uint256) := 100000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
preIcoPerEth_ = 1000000000000000000

IRs:
preIcoPerEth_(uint256) := 1000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
affLv1_ = 50

IRs:
affLv1_(uint256) := 50(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
affLv2_ = 30

IRs:
affLv2_(uint256) := 30(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
affLv3_ = 20

IRs:
affLv3_(uint256) := 20(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
affTol = 20

IRs:
affTol(uint256) := 20(uint256)"];
}
// Function: 1939.sol-GScam-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
fees_ = 50

IRs:
fees_(uint256) := 50(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
potSplit_ = 30

IRs:
potSplit_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 1939.sol-GScam-updateAff(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_aff = (_affEths.mul(_affP)) / 100

IRs:
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_affEths', '_affP'] 
TMP_375(uint256) = TMP_374 / 100
_aff(uint256) := TMP_375(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_key = (round_.eth).keysRec(_aff)

IRs:
REF_474(uint256) -> round_.eth
TMP_376(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_474', '_aff'] 
_key(uint256) := TMP_376(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_377(bool) = _affID != _pID
REF_476(RSdatasets.Player) -> plyr_[_affID]
REF_477(bytes32) -> REF_476.name
TMP_378(bool) = REF_477 != 
TMP_379(bool) = TMP_377 && TMP_378
CONDITION TMP_379"];
3->4[label="True"];
3->10[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_478(RSdatasets.Player) -> plyr_[_affID]
REF_479(uint256) -> REF_478.aff
REF_481(RSdatasets.Player) -> plyr_[_affID]
REF_482(uint256) -> REF_481.aff
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_482'] 
REF_479(uint256) (->plyr_) := TMP_380(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
GEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now)

IRs:
REF_484(RSdatasets.Player) -> plyr_[_affID]
REF_485(address) -> REF_484.addr
REF_486(RSdatasets.Player) -> plyr_[_affID]
REF_487(bytes32) -> REF_486.name
Emit onAffiliatePayout(_affID,REF_485,REF_487,_pID,_aff,now)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrRnds_[_affID].keys = _key.add(plyrRnds_[_affID].keys)

IRs:
REF_488(RSdatasets.PlayerRounds) -> plyrRnds_[_affID]
REF_489(uint256) -> REF_488.keys
REF_491(RSdatasets.PlayerRounds) -> plyrRnds_[_affID]
REF_492(uint256) -> REF_491.keys
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_key', 'REF_492'] 
REF_489(uint256) (->plyrRnds_) := TMP_382(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrRnds_[_affID].mask = ((round_.mask.mul(_key)) / (1000000000000000000)).add(plyrRnds_[_affID].mask)

IRs:
REF_493(RSdatasets.PlayerRounds) -> plyrRnds_[_affID]
REF_494(uint256) -> REF_493.mask
REF_495(uint256) -> round_.mask
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_495', '_key'] 
TMP_384(uint256) = TMP_383 / 1000000000000000000
REF_498(RSdatasets.PlayerRounds) -> plyrRnds_[_affID]
REF_499(uint256) -> REF_498.mask
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_384', 'REF_499'] 
REF_494(uint256) (->plyrRnds_) := TMP_385(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_.keys = _key.add(round_.keys)

IRs:
REF_500(uint256) -> round_.keys
REF_502(uint256) -> round_.keys
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_key', 'REF_502'] 
REF_500(uint256) (->round_) := TMP_386(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(plyr_[_affID].laff,0)

IRs:
REF_503(RSdatasets.Player) -> plyr_[_affID]
REF_504(uint256) -> REF_503.laff
RETURN REF_504,0"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(0,_aff)

IRs:
RETURN 0,_aff"];
}
// Function: 1939.sol-GScam-updateGenVault(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID)

IRs:
TMP_306(uint256) = INTERNAL_CALL, GScam.calcUnMaskedEarnings(uint256)(_pID)
_earnings(uint256) := TMP_306(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_307(bool) = _earnings > 0
CONDITION TMP_307"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_419(RSdatasets.Player) -> plyr_[_pID]
REF_420(uint256) -> REF_419.gen
REF_422(RSdatasets.Player) -> plyr_[_pID]
REF_423(uint256) -> REF_422.gen
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_423'] 
REF_420(uint256) (->plyr_) := TMP_308(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID].mask = _earnings.add(plyrRnds_[_pID].mask)

IRs:
REF_424(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_425(uint256) -> REF_424.mask
REF_427(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_428(uint256) -> REF_427.mask
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_428'] 
REF_425(uint256) (->plyrRnds_) := TMP_309(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1939.sol-GScam-updateMasks(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_.keys)

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_506(uint256) -> round_.keys
TMP_388(uint256) = TMP_387 / REF_506
_ppt(uint256) := TMP_388(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_.mask = _ppt.add(round_.mask)

IRs:
REF_507(uint256) -> round_.mask
REF_509(uint256) -> round_.mask
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_509'] 
REF_507(uint256) (->round_) := TMP_389(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_391(uint256) = TMP_390 / 1000000000000000000
_pearn(uint256) := TMP_391(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID].mask = (((round_.mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID].mask)

IRs:
REF_511(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_512(uint256) -> REF_511.mask
REF_513(uint256) -> round_.mask
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_513', '_keys'] 
TMP_393(uint256) = TMP_392 / 1000000000000000000
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_393', '_pearn'] 
REF_517(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_518(uint256) -> REF_517.mask
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_394', 'REF_518'] 
REF_512(uint256) (->plyrRnds_) := TMP_395(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_.keys)) / (1000000000000000000)))

IRs:
REF_521(uint256) -> round_.keys
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_521'] 
TMP_397(uint256) = TMP_396 / 1000000000000000000
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_397'] 
RETURN TMP_398"];
}
// Function: 1939.sol-GScam-updateTimer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_.end && round_.plyr == 0

IRs:
REF_429(uint256) -> round_.end
TMP_310(bool) = _now > REF_429
REF_430(uint256) -> round_.plyr
TMP_311(bool) = REF_430 == 0
TMP_312(bool) = TMP_310 && TMP_311
CONDITION TMP_312"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_313(uint256) = _keys / 1000000000000000000
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_313', 'rndInc_'] 
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_314', '_now'] 
_newTime(uint256) := TMP_315(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_.end)

IRs:
TMP_316(uint256) = _keys / 1000000000000000000
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_316', 'rndInc_'] 
REF_435(uint256) -> round_.end
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_317', 'REF_435'] 
_newTime(uint256) := TMP_318(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_320(bool) = _newTime < TMP_319
CONDITION TMP_320"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_.end = _newTime

IRs:
REF_437(uint256) -> round_.end
REF_437(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_.end = rndMax_.add(_now)

IRs:
REF_438(uint256) -> round_.end
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_438(uint256) (->round_) := TMP_321(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1939.sol-GScam-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_61(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_61(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_now > round_.end && round_.ended == false && round_.plyr != 0

IRs:
REF_62(uint256) -> round_.end
TMP_62(bool) = _now > REF_62
REF_63(bool) -> round_.ended
TMP_63(bool) = REF_63 == False
TMP_64(bool) = TMP_62 && TMP_63
REF_64(uint256) -> round_.plyr
TMP_65(bool) = REF_64 != 0
TMP_66(bool) = TMP_64 && TMP_65
CONDITION TMP_66"];
4->5[label="True"];
4->15[label="False"];
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_.ended = true

IRs:
REF_65(bool) -> round_.ended
REF_65(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_67(RSdatasets.EventReturns) = INTERNAL_CALL, GScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_67(RSdatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_68(uint256) = INTERNAL_CALL, GScam.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_68(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_eth > 0

IRs:
TMP_69(bool) = _eth > 0
CONDITION TMP_69"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_66(RSdatasets.Player) -> plyr_[_pID]
REF_67(address) -> REF_66.addr
Transfer dest:REF_67 value:_eth"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_69(uint256) -> _eventData_.compressedData
REF_70(uint256) -> _eventData_.compressedData
TMP_71(uint256) = _now * 1000000000000000000
TMP_72(uint256) = REF_70 + TMP_71
REF_69(uint256) (->_eventData_) := TMP_72(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_71(uint256) -> _eventData_.compressedIDs
REF_72(uint256) -> _eventData_.compressedIDs
TMP_73(uint256) = REF_72 + _pID
REF_71(uint256) (->_eventData_) := TMP_73(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
GEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_74(RSdatasets.Player) -> plyr_[_pID]
REF_75(bytes32) -> REF_74.name
REF_76(uint256) -> _eventData_.compressedData
REF_77(uint256) -> _eventData_.compressedIDs
REF_78(address) -> _eventData_.winnerAddr
REF_79(bytes32) -> _eventData_.winnerName
REF_80(uint256) -> _eventData_.amountWon
REF_81(uint256) -> _eventData_.newPot
REF_82(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_75,_eth,REF_76,REF_77,REF_78,REF_79,REF_80,REF_81,REF_82)"];
14->20;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_75(uint256) = INTERNAL_CALL, GScam.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_75(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth > 0

IRs:
TMP_76(bool) = _eth > 0
CONDITION TMP_76"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_83(RSdatasets.Player) -> plyr_[_pID]
REF_84(address) -> REF_83.addr
Transfer dest:REF_84 value:_eth"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
GEvents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_87(RSdatasets.Player) -> plyr_[_pID]
REF_88(bytes32) -> REF_87.name
Emit onWithdraw(_pID,msg.sender,REF_88,_eth,_now)"];
19->20;
20[label="Node Type: END_IF 20
"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, GScam.isActivated()()"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GScam.isHuman()()"];
22->1;
}
// Function: 1939.sol-GScam-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID)

IRs:
INTERNAL_CALL, GScam.updateGenVault(uint256)(_pID)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_522(RSdatasets.Player) -> plyr_[_pID]
REF_523(uint256) -> REF_522.win
REF_525(RSdatasets.Player) -> plyr_[_pID]
REF_526(uint256) -> REF_525.gen
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_523', 'REF_526'] 
REF_528(RSdatasets.Player) -> plyr_[_pID]
REF_529(uint256) -> REF_528.aff
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_400', 'REF_529'] 
_earnings(uint256) := TMP_401(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_402(bool) = _earnings > 0
CONDITION TMP_402"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_530(RSdatasets.Player) -> plyr_[_pID]
REF_531(uint256) -> REF_530.win
REF_531(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_532(RSdatasets.Player) -> plyr_[_pID]
REF_533(uint256) -> REF_532.gen
REF_533(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_534(RSdatasets.Player) -> plyr_[_pID]
REF_535(uint256) -> REF_534.aff
REF_535(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1939.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_443 = CONVERT _input to bytes
_temp(bytes) := TMP_443(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_568 -> LENGTH _temp
_length(uint256) := REF_568(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_444(bool) = _length <= 32
TMP_445(bool) = _length > 0
TMP_446(bool) = TMP_444 && TMP_445
TMP_447(None) = SOLIDITY_CALL require(bool,string)(TMP_446,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_569(None) -> _temp[0]
TMP_448(bool) = REF_569 != 32
TMP_449(uint256) = _length - 1
REF_570(None) -> _temp[TMP_449]
TMP_450(bool) = REF_570 != 32
TMP_451(bool) = TMP_448 && TMP_450
TMP_452(None) = SOLIDITY_CALL require(bool,string)(TMP_451,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_571(None) -> _temp[0]
TMP_453(bool) = REF_571 == 48
CONDITION TMP_453"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_572(None) -> _temp[1]
TMP_454(bool) = REF_572 != 120
TMP_455(None) = SOLIDITY_CALL require(bool,string)(TMP_454,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_573(None) -> _temp[1]
TMP_456(bool) = REF_573 != 88
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_458(bool) = i < _length
CONDITION TMP_458"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_574(None) -> _temp[i]
TMP_459(bool) = REF_574 > 64
REF_575(None) -> _temp[i]
TMP_460(bool) = REF_575 < 91
TMP_461(bool) = TMP_459 && TMP_460
CONDITION TMP_461"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_576(bytes1) -> _temp[i]
REF_577(None) -> _temp[i]
TMP_462 = CONVERT REF_577 to uint256
TMP_463(uint256) = TMP_462 + 32
TMP_464 = CONVERT TMP_463 to bytes1
REF_576(bytes1) (->_temp) := TMP_464(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_465(bool) = _hasNonNumber == False
CONDITION TMP_465"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_578(None) -> _temp[i]
TMP_466(bool) = REF_578 == 32
REF_579(None) -> _temp[i]
TMP_467(bool) = REF_579 > 96
REF_580(None) -> _temp[i]
TMP_468(bool) = REF_580 < 123
TMP_469(bool) = TMP_467 && TMP_468
TMP_470(bool) = TMP_466 || TMP_469
REF_581(None) -> _temp[i]
TMP_471(bool) = REF_581 > 47
REF_582(None) -> _temp[i]
TMP_472(bool) = REF_582 < 58
TMP_473(bool) = TMP_471 && TMP_472
TMP_474(bool) = TMP_470 || TMP_473
TMP_475(None) = SOLIDITY_CALL require(bool,string)(TMP_474,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_583(None) -> _temp[i]
TMP_476(bool) = REF_583 == 32
CONDITION TMP_476"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_477(uint256) = i + 1
REF_584(None) -> _temp[TMP_477]
TMP_478(bool) = REF_584 != 32
TMP_479(None) = SOLIDITY_CALL require(bool,string)(TMP_478,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_480(bool) = _hasNonNumber == False
REF_585(None) -> _temp[i]
TMP_481(bool) = REF_585 < 48
REF_586(None) -> _temp[i]
TMP_482(bool) = REF_586 > 57
TMP_483(bool) = TMP_481 || TMP_482
TMP_484(bool) = TMP_480 && TMP_483
CONDITION TMP_484"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_485(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_486(bool) = _hasNonNumber == True
TMP_487(None) = SOLIDITY_CALL require(bool,string)(TMP_486,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1939.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1939.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1939.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1939.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1939.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1939.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1939.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1939.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1939.sol-RSKeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_435'] 
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_437'] 
TMP_439(uint256) = TMP_438 / 2
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_436', 'TMP_439'] 
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_442(uint256) = TMP_440 / TMP_441
RETURN TMP_442"];
}
// Function: 1939.sol-RSKeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_425(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(_curKeys)
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_427(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(TMP_426)
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_425', 'TMP_427'] 
RETURN TMP_428"];
}
// Function: 1939.sol-RSKeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_429', '312500000000000000000000000'] 
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_430', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_431'] 
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_432', '74999921875000000000000000000000'] 
TMP_434(uint256) = TMP_433 / 156250000
RETURN TMP_434"];
}
// Function: 1939.sol-RSKeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_422(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(TMP_421)
TMP_423(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(_curEth)
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_422', 'TMP_423'] 
RETURN TMP_424"];
}
// Function: 1939.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_496(uint256) = a + b
c(uint256) := TMP_496(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_497(bool) = c >= a
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1939.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_488(bool) = a == 0
CONDITION TMP_488"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_489(uint256) = a * b
c(uint256) := TMP_489(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_490(uint256) = c / a
TMP_491(bool) = TMP_490 == b
TMP_492(None) = SOLIDITY_CALL require(bool,string)(TMP_491,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1939.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_505(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_505"];
}
// Function: 1939.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_499(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_500(uint256) = TMP_499 / 2
z(uint256) := TMP_500(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_501(bool) = z < y
CONDITION TMP_501"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_502(uint256) = x / z
TMP_503(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_502,z)
TMP_504(uint256) = TMP_503 / 2
z(uint256) := TMP_504(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1939.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_493(bool) = b <= a
TMP_494(None) = SOLIDITY_CALL require(bool,string)(TMP_493,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_495(uint256) = a - b
RETURN TMP_495"];
}
}
