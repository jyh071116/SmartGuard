digraph G {
// Function: 1968.sol-Buffer-append(Buffer.buffer,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
data.length + buf.buf.length > buf.capacity

IRs:
REF_2 -> LENGTH data
REF_3(bytes) -> buf.buf
REF_4 -> LENGTH REF_3
TMP_30(uint256) = REF_2 + REF_4
REF_5(uint256) -> buf.capacity
TMP_31(bool) = TMP_30 > REF_5
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,max(buf.capacity,data.length) * 2)

IRs:
REF_6(uint256) -> buf.capacity
REF_7 -> LENGTH data
TMP_32(uint256) = INTERNAL_CALL, Buffer.max(uint256,uint256)(REF_6,REF_7)
TMP_33(uint256) = TMP_32 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_33)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
len = data.length

IRs:
REF_8 -> LENGTH data
len(uint256) := REF_8(uint256)"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: BEGIN_LOOP 9
"];
9->11;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
len >= 32

IRs:
TMP_35(bool) = len >= 32
CONDITION TMP_35"];
11->12[label="True"];
11->10[label="False"];
12[label="Node Type: INLINE ASM 12
"];
12->13;
13[label="Node Type: END INLINE ASM 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
dest += 32

IRs:
dest(uint256) = dest + 32"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
src += 32

IRs:
src(uint256) = src + 32"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
len -= 32

IRs:
len(uint256) = len - 32"];
16->11;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
mask = 256 ** (32 - len) - 1

IRs:
TMP_36(uint256) = 32 - len
TMP_37(uint256) = 256 ** TMP_36
TMP_38(uint256) = TMP_37 - 1
mask(uint256) := TMP_38(uint256)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
buf

IRs:
RETURN buf"];
}
// Function: 1968.sol-Buffer-append(Buffer.buffer,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buf.buf.length + 1 > buf.capacity

IRs:
REF_9(bytes) -> buf.buf
REF_10 -> LENGTH REF_9
TMP_39(uint256) = REF_10 + 1
REF_11(uint256) -> buf.capacity
TMP_40(bool) = TMP_39 > REF_11
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,buf.capacity * 2)

IRs:
REF_12(uint256) -> buf.capacity
TMP_41(uint256) = REF_12 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_41)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
}
// Function: 1968.sol-Buffer-appendInt(Buffer.buffer,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
len + buf.buf.length > buf.capacity

IRs:
REF_13(bytes) -> buf.buf
REF_14 -> LENGTH REF_13
TMP_43(uint256) = len + REF_14
REF_15(uint256) -> buf.capacity
TMP_44(bool) = TMP_43 > REF_15
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,max(buf.capacity,len) * 2)

IRs:
REF_16(uint256) -> buf.capacity
TMP_45(uint256) = INTERNAL_CALL, Buffer.max(uint256,uint256)(REF_16,len)
TMP_46(uint256) = TMP_45 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_46)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
mask = 256 ** len - 1

IRs:
TMP_48(uint256) = 256 ** len
TMP_49(uint256) = TMP_48 - 1
mask(uint256) := TMP_49(uint256)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
buf

IRs:
RETURN buf"];
}
// Function: 1968.sol-Buffer-init(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
capacity = _capacity

IRs:
capacity(uint256) := _capacity(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
capacity % 32 != 0

IRs:
TMP_23(uint256) = capacity % 32
TMP_24(bool) = TMP_23 != 0
CONDITION TMP_24"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
capacity += 32 - (capacity % 32)

IRs:
TMP_25(uint256) = capacity % 32
TMP_26(uint256) = 32 - TMP_25
capacity(uint256) = capacity + TMP_26"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buf.capacity = capacity

IRs:
REF_0(uint256) -> buf.capacity
REF_0(uint256) (->buf) := capacity(uint256)"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
}
// Function: 1968.sol-Buffer-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a > b

IRs:
TMP_29(bool) = a > b
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
a

IRs:
RETURN a"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1968.sol-Buffer-resize(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldbuf = buf.buf

IRs:
REF_1(bytes) -> buf.buf
oldbuf(bytes) := REF_1(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
init(buf,capacity)

IRs:
INTERNAL_CALL, Buffer.init(Buffer.buffer,uint256)(buf,capacity)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
append(buf,oldbuf)

IRs:
TMP_28(Buffer.buffer) = INTERNAL_CALL, Buffer.append(Buffer.buffer,bytes)(buf,oldbuf)"];
}
// Function: 1968.sol-CBOR-encodeBytes(Buffer.buffer,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_BYTES,value.length)

IRs:
REF_27 -> LENGTH value
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_BYTES,REF_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(value)

IRs:
TMP_92(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,bytes), arguments:['buf', 'value'] "];
}
// Function: 1968.sol-CBOR-encodeIndefiniteLengthType(Buffer.buffer,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buf.append(uint8((major << 5) | 31))

IRs:
TMP_79(uint8) = major << 5
TMP_80(uint8) = TMP_79 | 31
TMP_81 = CONVERT TMP_80 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_81'] "];
}
// Function: 1968.sol-CBOR-encodeInt(Buffer.buffer,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value >= 0

IRs:
TMP_84(bool) = value >= 0
CONDITION TMP_84"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
encodeType(buf,MAJOR_TYPE_INT,uint256(value))

IRs:
TMP_85 = CONVERT value to uint256
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_INT,TMP_85)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
encodeType(buf,MAJOR_TYPE_NEGATIVE_INT,uint256(- 1 - value))

IRs:
TMP_87(uint256) = 0 - 1
TMP_88(uint256) = TMP_87 - value
TMP_89 = CONVERT TMP_88 to uint256
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_NEGATIVE_INT,TMP_89)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1968.sol-CBOR-encodeString(Buffer.buffer,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_STRING,bytes(value).length)

IRs:
TMP_93 = CONVERT value to bytes
REF_29 -> LENGTH TMP_93
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_STRING,REF_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(bytes(value))

IRs:
TMP_95 = CONVERT value to bytes
TMP_96(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,bytes), arguments:['buf', 'TMP_95'] "];
}
// Function: 1968.sol-CBOR-encodeType(Buffer.buffer,uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value <= 23

IRs:
TMP_50(bool) = value <= 23
CONDITION TMP_50"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(uint8((major << 5) | value))

IRs:
TMP_51(uint8) = major << 5
TMP_52(uint8) = TMP_51 | value
TMP_53 = CONVERT TMP_52 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_53'] "];
2->19;
3[label="Node Type: IF 3

EXPRESSION:
value <= 0xFF

IRs:
TMP_55(bool) = value <= 255
CONDITION TMP_55"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.append(uint8((major << 5) | 24))

IRs:
TMP_56(uint8) = major << 5
TMP_57(uint8) = TMP_56 | 24
TMP_58 = CONVERT TMP_57 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_58'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buf.appendInt(value,1)

IRs:
TMP_60(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '1'] "];
5->18;
6[label="Node Type: IF 6

EXPRESSION:
value <= 0xFFFF

IRs:
TMP_61(bool) = value <= 65535
CONDITION TMP_61"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
buf.append(uint8((major << 5) | 25))

IRs:
TMP_62(uint8) = major << 5
TMP_63(uint8) = TMP_62 | 25
TMP_64 = CONVERT TMP_63 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_64'] "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.appendInt(value,2)

IRs:
TMP_66(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '2'] "];
8->17;
9[label="Node Type: IF 9

EXPRESSION:
value <= 0xFFFFFFFF

IRs:
TMP_67(bool) = value <= 4294967295
CONDITION TMP_67"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.append(uint8((major << 5) | 26))

IRs:
TMP_68(uint8) = major << 5
TMP_69(uint8) = TMP_68 | 26
TMP_70 = CONVERT TMP_69 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_70'] "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buf.appendInt(value,4)

IRs:
TMP_72(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '4'] "];
11->16;
12[label="Node Type: IF 12

EXPRESSION:
value <= 0xFFFFFFFFFFFFFFFF

IRs:
TMP_73(bool) = value <= 18446744073709551615
CONDITION TMP_73"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
buf.append(uint8((major << 5) | 27))

IRs:
TMP_74(uint8) = major << 5
TMP_75(uint8) = TMP_74 | 27
TMP_76 = CONVERT TMP_75 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_76'] "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
buf.appendInt(value,8)

IRs:
TMP_78(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '8'] "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1968.sol-CBOR-encodeUInt(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_INT,value)

IRs:
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_INT,value)"];
}
// Function: 1968.sol-CBOR-endSequence(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_CONTENT_FREE)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_CONTENT_FREE)"];
}
// Function: 1968.sol-CBOR-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAJOR_TYPE_INT = 0

IRs:
MAJOR_TYPE_INT(uint8) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MAJOR_TYPE_NEGATIVE_INT = 1

IRs:
MAJOR_TYPE_NEGATIVE_INT(uint8) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAJOR_TYPE_BYTES = 2

IRs:
MAJOR_TYPE_BYTES(uint8) := 2(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MAJOR_TYPE_STRING = 3

IRs:
MAJOR_TYPE_STRING(uint8) := 3(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MAJOR_TYPE_ARRAY = 4

IRs:
MAJOR_TYPE_ARRAY(uint8) := 4(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MAJOR_TYPE_MAP = 5

IRs:
MAJOR_TYPE_MAP(uint8) := 5(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAJOR_TYPE_CONTENT_FREE = 7

IRs:
MAJOR_TYPE_CONTENT_FREE(uint8) := 7(uint256)"];
}
// Function: 1968.sol-CBOR-startArray(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_ARRAY)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_ARRAY)"];
}
// Function: 1968.sol-CBOR-startMap(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_MAP)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_MAP)"];
}
// Function: 1968.sol-EtherHiLo-EtherHiLo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1968.sol-EtherHiLo-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_801 = new bytes(0)
INTERNAL_CALL, EtherHiLo.__callback(bytes32,string,bytes)(myid,result,TMP_801)"];
}
// Function: 1968.sol-EtherHiLo-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == oraclize_cbAddress(),Only Oraclize can call this method)

IRs:
TMP_1494(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_1495(bool) = msg.sender == TMP_1494
TMP_1496(None) = SOLIDITY_CALL require(bool,string)(TMP_1495,Only Oraclize can call this method)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
player = rollIdToGameAddress[rollId]

IRs:
REF_900(address) -> rollIdToGameAddress[rollId]
player(address) := REF_900(address)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
player == address(0)

IRs:
TMP_1497 = CONVERT 0 to address
TMP_1498(bool) = player == TMP_1497
CONDITION TMP_1498"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
failedRolls[rollId] = FAILED_ROLE

IRs:
REF_901(uint256) -> failedRolls[rollId]
REF_901(uint256) (->failedRolls) := FAILED_ROLE(uint8)"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
oraclize_randomDS_proofVerify__returnCode(rollId,_result,_proof) != 0

IRs:
TMP_1499(uint8) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)(rollId,_result,_proof)
TMP_1500(bool) = TMP_1499 != 0
CONDITION TMP_1500"];
7->8[label="True"];
7->16[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
game = gamesInProgress[player]

IRs:
REF_902(EtherHiLo.Game) -> gamesInProgress[player]
game(EtherHiLo.Game) := REF_902(EtherHiLo.Game)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
game.bet > 0

IRs:
REF_903(uint256) -> game.bet
TMP_1501(bool) = REF_903 > 0
CONDITION TMP_1501"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
game.player.transfer(game.bet)

IRs:
REF_904(address) -> game.player
REF_906(uint256) -> game.bet
Transfer dest:REF_904 value:REF_906"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete gamesInProgress[player]

IRs:
REF_907(EtherHiLo.Game) -> gamesInProgress[player]
gamesInProgress = delete REF_907 "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
delete rollIdToGameAddress[rollId]

IRs:
REF_908(address) -> rollIdToGameAddress[rollId]
rollIdToGameAddress = delete REF_908 "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete failedRolls[rollId]

IRs:
REF_909(uint256) -> failedRolls[rollId]
failedRolls = delete REF_909 "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
GameError(player,game.id,rollId)

IRs:
REF_910(uint256) -> game.id
Emit GameError(player,REF_910,rollId)"];
15->19;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
randomNumber = uint8((uint256(keccak256()(_result)) % NUM_DICE_SIDES) + 1)

IRs:
TMP_1504(bytes32) = SOLIDITY_CALL keccak256()(_result)
TMP_1505 = CONVERT TMP_1504 to uint256
TMP_1506(uint256) = TMP_1505 % NUM_DICE_SIDES
TMP_1507(uint256) = TMP_1506 + 1
TMP_1508 = CONVERT TMP_1507 to uint8
randomNumber(uint8) := TMP_1508(uint8)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
processDiceRoll(player,randomNumber)

IRs:
INTERNAL_CALL, EtherHiLo.processDiceRoll(address,uint8)(player,randomNumber)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
delete rollIdToGameAddress[rollId]

IRs:
REF_911(address) -> rollIdToGameAddress[rollId]
rollIdToGameAddress = delete REF_911 "];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1968.sol-EtherHiLo-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_770 = CONVERT 0 to address
TMP_771(bool) = _newOwner != TMP_770
TMP_772(None) = SOLIDITY_CALL require(bool)(TMP_771)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1968.sol-EtherHiLo-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeMemoryCleaner()

IRs:
INTERNAL_CALL, usingOraclize.safeMemoryCleaner()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < arr.length

IRs:
REF_783 -> LENGTH arr
TMP_1227(bool) = i < REF_783
CONDITION TMP_1227"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buf.encodeBytes(arr[i])

IRs:
REF_785(bytes) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeBytes(Buffer.buffer,bytes), arguments:['buf', 'REF_785'] "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1229(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
buf.buf

IRs:
REF_787(bytes) -> buf.buf
RETURN REF_787"];
}
// Function: 1968.sol-EtherHiLo-beginGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
player = msg.sender

IRs:
player(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
bet = msg.value

IRs:
bet(uint256) := msg.value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(player != address(0),Invalid player)

IRs:
TMP_1407 = CONVERT 0 to address
TMP_1408(bool) = player != TMP_1407
TMP_1409(None) = SOLIDITY_CALL require(bool,string)(TMP_1408,Invalid player)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(gamesInProgress[player].state == GameState.None || gamesInProgress[player].state == GameState.Finished,Invalid game state)

IRs:
REF_819(EtherHiLo.Game) -> gamesInProgress[player]
REF_820(EtherHiLo.GameState) -> REF_819.state
REF_821(EtherHiLo.GameState) -> GameState.None
TMP_1410(bool) = REF_820 == REF_821
REF_822(EtherHiLo.Game) -> gamesInProgress[player]
REF_823(EtherHiLo.GameState) -> REF_822.state
REF_824(EtherHiLo.GameState) -> GameState.Finished
TMP_1411(bool) = REF_823 == REF_824
TMP_1412(bool) = TMP_1410 || TMP_1411
TMP_1413(None) = SOLIDITY_CALL require(bool,string)(TMP_1412,Invalid game state)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(gameRunning,Game is not currently running)

IRs:
TMP_1414(None) = SOLIDITY_CALL require(bool,string)(gameRunning,Game is not currently running)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(bet >= minBet && bet <= getMaxBet(),Invalid bet)

IRs:
TMP_1415(bool) = bet >= minBet
TMP_1416(uint256) = INTERNAL_CALL, EtherHiLo.getMaxBet()()
TMP_1417(bool) = bet <= TMP_1416
TMP_1418(bool) = TMP_1415 && TMP_1417
TMP_1419(None) = SOLIDITY_CALL require(bool,string)(TMP_1418,Invalid bet)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
game = Game({id:uint256(keccak256()(block.number,player,bet)),player:player,state:GameState.WaitingForFirstCard,bet:bet,firstRoll:0,finalRoll:0,winnings:0,direction:BetDirection.None})

IRs:
TMP_1420(bytes32) = SOLIDITY_CALL keccak256()(block.number,player,bet)
TMP_1421 = CONVERT TMP_1420 to uint256
REF_825(EtherHiLo.GameState) -> GameState.WaitingForFirstCard
REF_826(EtherHiLo.BetDirection) -> BetDirection.None
TMP_1422(EtherHiLo.Game) = new Game(player,REF_825,TMP_1421,REF_826,bet,0,0,0)
game(EtherHiLo.Game) := TMP_1422(EtherHiLo.Game)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balanceInPlay = SafeMath.add(balanceInPlay,game.bet)

IRs:
REF_828(uint256) -> game.bet
TMP_1423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['balanceInPlay', 'REF_828'] 
balanceInPlay(uint256) := TMP_1423(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
gamesInProgress[player] = game

IRs:
REF_829(EtherHiLo.Game) -> gamesInProgress[player]
REF_829(EtherHiLo.Game) (->gamesInProgress) := game(EtherHiLo.Game)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool,string)(rollDie(player),Dice roll failed)

IRs:
TMP_1424(bool) = INTERNAL_CALL, EtherHiLo.rollDie(address)(player)
TMP_1425(None) = SOLIDITY_CALL require(bool,string)(TMP_1424,Dice roll failed)"];
}
// Function: 1968.sol-EtherHiLo-calculateWinnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.div(SafeMath.mul(bet,percent),100)

IRs:
TMP_1437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['bet', 'percent'] 
TMP_1438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1437', '100'] 
RETURN TMP_1438"];
}
// Function: 1968.sol-EtherHiLo-cleanupAbandonedGame(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(player != address(0),Invalid player)

IRs:
TMP_1512 = CONVERT 0 to address
TMP_1513(bool) = player != TMP_1512
TMP_1514(None) = SOLIDITY_CALL require(bool,string)(TMP_1513,Invalid player)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
game = gamesInProgress[player]

IRs:
REF_913(EtherHiLo.Game) -> gamesInProgress[player]
game(EtherHiLo.Game) := REF_913(EtherHiLo.Game)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(game.player != address(0),Invalid game player)

IRs:
REF_914(address) -> game.player
TMP_1515 = CONVERT 0 to address
TMP_1516(bool) = REF_914 != TMP_1515
TMP_1517(None) = SOLIDITY_CALL require(bool,string)(TMP_1516,Invalid game player)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
game.player.transfer(game.bet)

IRs:
REF_915(address) -> game.player
REF_917(uint256) -> game.bet
Transfer dest:REF_915 value:REF_917"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete gamesInProgress[game.player]

IRs:
REF_918(address) -> game.player
REF_919(EtherHiLo.Game) -> gamesInProgress[REF_918]
gamesInProgress = delete REF_919 "];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1968.sol-EtherHiLo-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1968.sol-EtherHiLo-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_1394(uint256) = length + toOffset
minLength(uint256) := TMP_1394(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_817 -> LENGTH to
TMP_1395(bool) = REF_817 >= minLength
TMP_1396(None) = SOLIDITY_CALL require(bool)(TMP_1395)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_1397(uint256) = 32 + fromOffset
i(uint256) := TMP_1397(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_1398(uint256) = 32 + toOffset
j(uint256) := TMP_1398(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_1399(uint256) = 32 + fromOffset
TMP_1400(uint256) = TMP_1399 + length
TMP_1401(bool) = i < TMP_1400
CONDITION TMP_1401"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 1968.sol-EtherHiLo-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1549(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1550 = CONVERT TMP_1549 to OraclizeI
oraclize(OraclizeI) := TMP_1550(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1968.sol-EtherHiLo-destroyAndSend(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(_recipient)

IRs:
TMP_1525(None) = SOLIDITY_CALL selfdestruct(address)(_recipient)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_818 -> LENGTH sig
TMP_1402(bool) = REF_818 != 65
CONDITION TMP_1402"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_1403(bool) = v < 27
CONDITION TMP_1403"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_1404(bool) = v != 27
TMP_1405(bool) = v != 28
TMP_1406(bool) = TMP_1404 && TMP_1405
CONDITION TMP_1406"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_5(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_5"];
}
// Function: 1968.sol-EtherHiLo-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1968.sol-EtherHiLo-finishGame(EtherHiLo.BetDirection)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
player = msg.sender

IRs:
player(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(player != address(0),Invalid player)

IRs:
TMP_1426 = CONVERT 0 to address
TMP_1427(bool) = player != TMP_1426
TMP_1428(None) = SOLIDITY_CALL require(bool,string)(TMP_1427,Invalid player)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(gamesInProgress[player].state == GameState.WaitingForDirection,Invalid game state)

IRs:
REF_830(EtherHiLo.Game) -> gamesInProgress[player]
REF_831(EtherHiLo.GameState) -> REF_830.state
REF_832(EtherHiLo.GameState) -> GameState.WaitingForDirection
TMP_1429(bool) = REF_831 == REF_832
TMP_1430(None) = SOLIDITY_CALL require(bool,string)(TMP_1429,Invalid game state)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
game = gamesInProgress[player]

IRs:
REF_833(EtherHiLo.Game) -> gamesInProgress[player]
game(EtherHiLo.Game) := REF_833(EtherHiLo.Game)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
game.direction = direction

IRs:
REF_834(EtherHiLo.BetDirection) -> game.direction
REF_834(EtherHiLo.BetDirection) (->game) := direction(EtherHiLo.BetDirection)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
game.state = GameState.WaitingForFinalCard

IRs:
REF_835(EtherHiLo.GameState) -> game.state
REF_836(EtherHiLo.GameState) -> GameState.WaitingForFinalCard
REF_835(EtherHiLo.GameState) (->game) := REF_836(EtherHiLo.GameState)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gamesInProgress[player] = game

IRs:
REF_837(EtherHiLo.Game) -> gamesInProgress[player]
REF_837(EtherHiLo.Game) (->gamesInProgress) := game(EtherHiLo.Game)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool,string)(rollDie(player),Dice roll failed)

IRs:
TMP_1431(bool) = INTERNAL_CALL, EtherHiLo.rollDie(address)(player)
TMP_1432(None) = SOLIDITY_CALL require(bool,string)(TMP_1431,Dice roll failed)"];
}
// Function: 1968.sol-EtherHiLo-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 1968.sol-EtherHiLo-getGameState(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(gamesInProgress[player].state,gamesInProgress[player].id,gamesInProgress[player].direction,gamesInProgress[player].bet,gamesInProgress[player].firstRoll,gamesInProgress[player].finalRoll,gamesInProgress[player].winnings)

IRs:
REF_838(EtherHiLo.Game) -> gamesInProgress[player]
REF_839(EtherHiLo.GameState) -> REF_838.state
REF_840(EtherHiLo.Game) -> gamesInProgress[player]
REF_841(uint256) -> REF_840.id
REF_842(EtherHiLo.Game) -> gamesInProgress[player]
REF_843(EtherHiLo.BetDirection) -> REF_842.direction
REF_844(EtherHiLo.Game) -> gamesInProgress[player]
REF_845(uint256) -> REF_844.bet
REF_846(EtherHiLo.Game) -> gamesInProgress[player]
REF_847(uint8) -> REF_846.firstRoll
REF_848(EtherHiLo.Game) -> gamesInProgress[player]
REF_849(uint8) -> REF_848.finalRoll
REF_850(EtherHiLo.Game) -> gamesInProgress[player]
REF_851(uint256) -> REF_850.winnings
RETURN REF_839,REF_841,REF_843,REF_845,REF_847,REF_849,REF_851"];
}
// Function: 1968.sol-EtherHiLo-getHighWinPercent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(number >= 1 && number < NUM_DICE_SIDES,Invalid number)

IRs:
TMP_1455(bool) = number >= 1
TMP_1456(bool) = number < NUM_DICE_SIDES
TMP_1457(bool) = TMP_1455 && TMP_1456
TMP_1458(None) = SOLIDITY_CALL require(bool,string)(TMP_1457,Invalid number)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
number == 1

IRs:
TMP_1459(bool) = number == 1
CONDITION TMP_1459"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
100

IRs:
RETURN 100"];
4[label="Node Type: IF 4

EXPRESSION:
number == 2

IRs:
TMP_1460(bool) = number == 2
CONDITION TMP_1460"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
110

IRs:
RETURN 110"];
6[label="Node Type: IF 6

EXPRESSION:
number == 3

IRs:
TMP_1461(bool) = number == 3
CONDITION TMP_1461"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
120

IRs:
RETURN 120"];
8[label="Node Type: IF 8

EXPRESSION:
number == 4

IRs:
TMP_1462(bool) = number == 4
CONDITION TMP_1462"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
130

IRs:
RETURN 130"];
10[label="Node Type: IF 10

EXPRESSION:
number == 5

IRs:
TMP_1463(bool) = number == 5
CONDITION TMP_1463"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
140

IRs:
RETURN 140"];
12[label="Node Type: IF 12

EXPRESSION:
number == 6

IRs:
TMP_1464(bool) = number == 6
CONDITION TMP_1464"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
150

IRs:
RETURN 150"];
14[label="Node Type: IF 14

EXPRESSION:
number == 7

IRs:
TMP_1465(bool) = number == 7
CONDITION TMP_1465"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
180

IRs:
RETURN 180"];
16[label="Node Type: IF 16

EXPRESSION:
number == 8

IRs:
TMP_1466(bool) = number == 8
CONDITION TMP_1466"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
200

IRs:
RETURN 200"];
18[label="Node Type: IF 18

EXPRESSION:
number == 9

IRs:
TMP_1467(bool) = number == 9
CONDITION TMP_1467"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
300

IRs:
RETURN 300"];
20[label="Node Type: IF 20

EXPRESSION:
number == 10

IRs:
TMP_1468(bool) = number == 10
CONDITION TMP_1468"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
300

IRs:
RETURN 300"];
22[label="Node Type: IF 22

EXPRESSION:
number == 11

IRs:
TMP_1469(bool) = number == 11
CONDITION TMP_1469"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: RETURN 23

EXPRESSION:
500

IRs:
RETURN 500"];
24[label="Node Type: IF 24

EXPRESSION:
number == 12

IRs:
TMP_1470(bool) = number == 12
CONDITION TMP_1470"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
1200

IRs:
RETURN 1200"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
}
// Function: 1968.sol-EtherHiLo-getLowWinPercent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(number >= 2 && number <= NUM_DICE_SIDES,Invalid number)

IRs:
TMP_1439(bool) = number >= 2
TMP_1440(bool) = number <= NUM_DICE_SIDES
TMP_1441(bool) = TMP_1439 && TMP_1440
TMP_1442(None) = SOLIDITY_CALL require(bool,string)(TMP_1441,Invalid number)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
number == 2

IRs:
TMP_1443(bool) = number == 2
CONDITION TMP_1443"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
1200

IRs:
RETURN 1200"];
4[label="Node Type: IF 4

EXPRESSION:
number == 3

IRs:
TMP_1444(bool) = number == 3
CONDITION TMP_1444"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
500

IRs:
RETURN 500"];
6[label="Node Type: IF 6

EXPRESSION:
number == 4

IRs:
TMP_1445(bool) = number == 4
CONDITION TMP_1445"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
300

IRs:
RETURN 300"];
8[label="Node Type: IF 8

EXPRESSION:
number == 5

IRs:
TMP_1446(bool) = number == 5
CONDITION TMP_1446"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
300

IRs:
RETURN 300"];
10[label="Node Type: IF 10

EXPRESSION:
number == 6

IRs:
TMP_1447(bool) = number == 6
CONDITION TMP_1447"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
200

IRs:
RETURN 200"];
12[label="Node Type: IF 12

EXPRESSION:
number == 7

IRs:
TMP_1448(bool) = number == 7
CONDITION TMP_1448"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
180

IRs:
RETURN 180"];
14[label="Node Type: IF 14

EXPRESSION:
number == 8

IRs:
TMP_1449(bool) = number == 8
CONDITION TMP_1449"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
150

IRs:
RETURN 150"];
16[label="Node Type: IF 16

EXPRESSION:
number == 9

IRs:
TMP_1450(bool) = number == 9
CONDITION TMP_1450"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
140

IRs:
RETURN 140"];
18[label="Node Type: IF 18

EXPRESSION:
number == 10

IRs:
TMP_1451(bool) = number == 10
CONDITION TMP_1451"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
130

IRs:
RETURN 130"];
20[label="Node Type: IF 20

EXPRESSION:
number == 11

IRs:
TMP_1452(bool) = number == 11
CONDITION TMP_1452"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
120

IRs:
RETURN 120"];
22[label="Node Type: IF 22

EXPRESSION:
number == 12

IRs:
TMP_1453(bool) = number == 12
CONDITION TMP_1453"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: RETURN 23

EXPRESSION:
110

IRs:
RETURN 110"];
24[label="Node Type: IF 24

EXPRESSION:
number == 13

IRs:
TMP_1454(bool) = number == 13
CONDITION TMP_1454"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
100

IRs:
RETURN 100"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
}
// Function: 1968.sol-EtherHiLo-getMaxBet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.div(SafeMath.div(SafeMath.mul(SafeMath.sub(this.balance,balanceInPlay),maxBetThresholdPct),100),12)

IRs:
REF_856(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_856', 'balanceInPlay'] 
TMP_1434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_1433', 'maxBetThresholdPct'] 
TMP_1435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1434', '100'] 
TMP_1436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1435', '12'] 
RETURN TMP_1436"];
}
// Function: 1968.sol-EtherHiLo-getMinBet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
minBet

IRs:
RETURN minBet"];
}
// Function: 1968.sol-EtherHiLo-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_1134 = CONVERT _haystack to bytes
h(bytes) := TMP_1134(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_1135 = CONVERT _needle to bytes
n(bytes) := TMP_1135(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_735 -> LENGTH h
TMP_1136(bool) = REF_735 < 1
REF_736 -> LENGTH n
TMP_1137(bool) = REF_736 < 1
TMP_1138(bool) = TMP_1136 || TMP_1137
REF_737 -> LENGTH n
REF_738 -> LENGTH h
TMP_1139(bool) = REF_737 > REF_738
TMP_1140(bool) = TMP_1138 || TMP_1139
CONDITION TMP_1140"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_1141(uint256) = 0 - 1
RETURN TMP_1141"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_739 -> LENGTH h
TMP_1142(uint256) = 2 ** 128
TMP_1143(uint256) = TMP_1142 - 1
TMP_1144(bool) = REF_739 > TMP_1143
CONDITION TMP_1144"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_1145(uint256) = 0 - 1
RETURN TMP_1145"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_740 -> LENGTH h
TMP_1146(bool) = i < REF_740
CONDITION TMP_1146"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_741(None) -> h[i]
REF_742(None) -> n[0]
TMP_1147(bool) = REF_741 == REF_742
CONDITION TMP_1147"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_743 -> LENGTH n
TMP_1148(bool) = subindex < REF_743
TMP_1149(uint256) = i + subindex
REF_744 -> LENGTH h
TMP_1150(bool) = TMP_1149 < REF_744
TMP_1151(bool) = TMP_1148 && TMP_1150
TMP_1152(uint256) = i + subindex
REF_745(None) -> h[TMP_1152]
REF_746(None) -> n[subindex]
TMP_1153(bool) = REF_745 == REF_746
TMP_1154(bool) = TMP_1151 && TMP_1153
CONDITION TMP_1154"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_1155(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_747 -> LENGTH n
TMP_1156(bool) = subindex == REF_747
CONDITION TMP_1156"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_1157 = CONVERT i to int256
RETURN TMP_1157"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_1158(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_1159(uint256) = 0 - 1
RETURN TMP_1159"];
}
// Function: 1968.sol-EtherHiLo-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_804 -> LENGTH prefix
TMP_1319(bool) = REF_804 == n_random_bytes
TMP_1320(None) = SOLIDITY_CALL require(bool)(TMP_1319)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_1321(bool) = i < n_random_bytes
CONDITION TMP_1321"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_805(None) -> content[i]
REF_806(None) -> prefix[i]
TMP_1322(bool) = REF_805 != REF_806
CONDITION TMP_1322"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1323(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 1968.sol-EtherHiLo-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1535(bool) = msg.sender == owner
TMP_1536(None) = SOLIDITY_CALL require(bool)(TMP_1535)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1968.sol-EtherHiLo-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_1537 = CONVERT OAR to address
TMP_1538(bool) = TMP_1537 == 0
TMP_1539 = CONVERT OAR to address
TMP_1540(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_1539)
TMP_1541(bool) = TMP_1540 == 0
TMP_1542(bool) = TMP_1538 || TMP_1541
CONDITION TMP_1542"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1543(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_1544 = CONVERT oraclize to address
TMP_1545(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1546(bool) = TMP_1544 != TMP_1545
CONDITION TMP_1546"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1547(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1548 = CONVERT TMP_1547 to OraclizeI
oraclize(OraclizeI) := TMP_1548(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 1968.sol-EtherHiLo-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_1087(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_1087"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 1968.sol-EtherHiLo-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_803(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_803"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_805(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_805"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_1231(bool) = _nbytes > 0
TMP_1232(bool) = _nbytes <= 32
TMP_1233(bool) = TMP_1231 && TMP_1232
TMP_1234(None) = SOLIDITY_CALL require(bool)(TMP_1233)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_1236 = new bytes(1)
nbytes(bytes) := TMP_1236(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_788(bytes1) -> nbytes[0]
TMP_1237 = CONVERT _nbytes to bytes1
REF_788(bytes1) (->nbytes) := TMP_1237(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_1239 = new bytes(32)
unonce(bytes) := TMP_1239(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_1241 = new bytes(32)
sessionKeyHash(bytes) := TMP_1241(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_1242(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_1242(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_1244 = new bytes(32)
delay(bytes) := TMP_1244(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_1246 = new bytes(8)
delay_bytes8(bytes) := TMP_1246(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_1247(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_1248(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_1248(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_1250 = new bytes(8)
delay_bytes8_left(bytes) := TMP_1250(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_789(bytes) -> args[1]
REF_790(bytes) -> args[0]
TMP_1251(bytes32) = SOLIDITY_CALL sha256()(REF_790)
REF_791(bytes) -> args[2]
TMP_1252(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_789,TMP_1251,REF_791)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_1252)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1008(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1008(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_598(bytes) -> dynargs[0]
REF_599(bytes) -> args[0]
REF_598(bytes) (->dynargs) := REF_599(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1009(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1009"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1020(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1020(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_604(bytes) -> dynargs[0]
REF_605(bytes) -> args[0]
REF_604(bytes) (->dynargs) := REF_605(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1021(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1021"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1024(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1024(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_606(bytes) -> dynargs[0]
REF_607(bytes) -> args[0]
REF_606(bytes) (->dynargs) := REF_607(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_608(bytes) -> dynargs[1]
REF_609(bytes) -> args[1]
REF_608(bytes) (->dynargs) := REF_609(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1025(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1025"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1036(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1036(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_618(bytes) -> dynargs[0]
REF_619(bytes) -> args[0]
REF_618(bytes) (->dynargs) := REF_619(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_620(bytes) -> dynargs[1]
REF_621(bytes) -> args[1]
REF_620(bytes) (->dynargs) := REF_621(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1037(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1037"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1040(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1040(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_622(bytes) -> dynargs[0]
REF_623(bytes) -> args[0]
REF_622(bytes) (->dynargs) := REF_623(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_624(bytes) -> dynargs[1]
REF_625(bytes) -> args[1]
REF_624(bytes) (->dynargs) := REF_625(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_626(bytes) -> dynargs[2]
REF_627(bytes) -> args[2]
REF_626(bytes) (->dynargs) := REF_627(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1041(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1041"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1052(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1052(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_640(bytes) -> dynargs[0]
REF_641(bytes) -> args[0]
REF_640(bytes) (->dynargs) := REF_641(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_642(bytes) -> dynargs[1]
REF_643(bytes) -> args[1]
REF_642(bytes) (->dynargs) := REF_643(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_644(bytes) -> dynargs[2]
REF_645(bytes) -> args[2]
REF_644(bytes) (->dynargs) := REF_645(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1053(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1053"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1056(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1056(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_646(bytes) -> dynargs[0]
REF_647(bytes) -> args[0]
REF_646(bytes) (->dynargs) := REF_647(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_648(bytes) -> dynargs[1]
REF_649(bytes) -> args[1]
REF_648(bytes) (->dynargs) := REF_649(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_650(bytes) -> dynargs[2]
REF_651(bytes) -> args[2]
REF_650(bytes) (->dynargs) := REF_651(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_652(bytes) -> dynargs[3]
REF_653(bytes) -> args[3]
REF_652(bytes) (->dynargs) := REF_653(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1057(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1057"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1068(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1068(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_670(bytes) -> dynargs[0]
REF_671(bytes) -> args[0]
REF_670(bytes) (->dynargs) := REF_671(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_672(bytes) -> dynargs[1]
REF_673(bytes) -> args[1]
REF_672(bytes) (->dynargs) := REF_673(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_674(bytes) -> dynargs[2]
REF_675(bytes) -> args[2]
REF_674(bytes) (->dynargs) := REF_675(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_676(bytes) -> dynargs[3]
REF_677(bytes) -> args[3]
REF_676(bytes) (->dynargs) := REF_677(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1069(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1069"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1072(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1072(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_678(bytes) -> dynargs[0]
REF_679(bytes) -> args[0]
REF_678(bytes) (->dynargs) := REF_679(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_680(bytes) -> dynargs[1]
REF_681(bytes) -> args[1]
REF_680(bytes) (->dynargs) := REF_681(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_682(bytes) -> dynargs[2]
REF_683(bytes) -> args[2]
REF_682(bytes) (->dynargs) := REF_683(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_684(bytes) -> dynargs[3]
REF_685(bytes) -> args[3]
REF_684(bytes) (->dynargs) := REF_685(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_686(bytes) -> dynargs[4]
REF_687(bytes) -> args[4]
REF_686(bytes) (->dynargs) := REF_687(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1073(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1073"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1084(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1084(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_708(bytes) -> dynargs[0]
REF_709(bytes) -> args[0]
REF_708(bytes) (->dynargs) := REF_709(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_710(bytes) -> dynargs[1]
REF_711(bytes) -> args[1]
REF_710(bytes) (->dynargs) := REF_711(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_712(bytes) -> dynargs[2]
REF_713(bytes) -> args[2]
REF_712(bytes) (->dynargs) := REF_713(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_714(bytes) -> dynargs[3]
REF_715(bytes) -> args[3]
REF_714(bytes) (->dynargs) := REF_715(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_716(bytes) -> dynargs[4]
REF_717(bytes) -> args[4]
REF_716(bytes) (->dynargs) := REF_717(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1085(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1085"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_975(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_975(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_976(uint256) = tx.gasprice * 200000
TMP_977(uint256) = 1000000000000000000 + TMP_976
TMP_978(bool) = price > TMP_977
CONDITION TMP_978"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_979(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_979(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_981(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_981"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_999(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_999(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1000(uint256) = tx.gasprice * gaslimit
TMP_1001(uint256) = 1000000000000000000 + TMP_1000
TMP_1002(bool) = price > TMP_1001
CONDITION TMP_1002"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1003(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1003(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_1005(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1005"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_807(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_807(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_808(uint256) = tx.gasprice * 200000
TMP_809(uint256) = 1000000000000000000 + TMP_808
TMP_810(bool) = price > TMP_809
CONDITION TMP_810"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_812(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_812"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_835(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_835(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_836(uint256) = tx.gasprice * 200000
TMP_837(uint256) = 1000000000000000000 + TMP_836
TMP_838(bool) = price > TMP_837
CONDITION TMP_838"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_840(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_840"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_856(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_856(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_857(uint256) = tx.gasprice * gaslimit
TMP_858(uint256) = 1000000000000000000 + TMP_857
TMP_859(bool) = price > TMP_858
CONDITION TMP_859"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_861(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_861"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_828(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_828(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_829(uint256) = tx.gasprice * gaslimit
TMP_830(uint256) = 1000000000000000000 + TMP_829
TMP_831(bool) = price > TMP_830
CONDITION TMP_831"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_833(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_833"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_896(string[])  = new string[](1)
dynargs(string[]) = ['TMP_896(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_466(string) -> dynargs[0]
REF_467(string) -> args[0]
REF_466(string) (->dynargs) := REF_467(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_897(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_897"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_908(string[])  = new string[](1)
dynargs(string[]) = ['TMP_908(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_472(string) -> dynargs[0]
REF_473(string) -> args[0]
REF_472(string) (->dynargs) := REF_473(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_909(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_909"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_912(string[])  = new string[](2)
dynargs(string[]) = ['TMP_912(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_474(string) -> dynargs[0]
REF_475(string) -> args[0]
REF_474(string) (->dynargs) := REF_475(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_476(string) -> dynargs[1]
REF_477(string) -> args[1]
REF_476(string) (->dynargs) := REF_477(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_913(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_913"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_924(string[])  = new string[](2)
dynargs(string[]) = ['TMP_924(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_486(string) -> dynargs[0]
REF_487(string) -> args[0]
REF_486(string) (->dynargs) := REF_487(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_488(string) -> dynargs[1]
REF_489(string) -> args[1]
REF_488(string) (->dynargs) := REF_489(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_925(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_925"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_928(string[])  = new string[](3)
dynargs(string[]) = ['TMP_928(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_490(string) -> dynargs[0]
REF_491(string) -> args[0]
REF_490(string) (->dynargs) := REF_491(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_492(string) -> dynargs[1]
REF_493(string) -> args[1]
REF_492(string) (->dynargs) := REF_493(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_494(string) -> dynargs[2]
REF_495(string) -> args[2]
REF_494(string) (->dynargs) := REF_495(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_929(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_929"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_940(string[])  = new string[](3)
dynargs(string[]) = ['TMP_940(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_508(string) -> dynargs[0]
REF_509(string) -> args[0]
REF_508(string) (->dynargs) := REF_509(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_510(string) -> dynargs[1]
REF_511(string) -> args[1]
REF_510(string) (->dynargs) := REF_511(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_512(string) -> dynargs[2]
REF_513(string) -> args[2]
REF_512(string) (->dynargs) := REF_513(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_941(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_941"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_944(string[])  = new string[](4)
dynargs(string[]) = ['TMP_944(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_514(string) -> dynargs[0]
REF_515(string) -> args[0]
REF_514(string) (->dynargs) := REF_515(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_516(string) -> dynargs[1]
REF_517(string) -> args[1]
REF_516(string) (->dynargs) := REF_517(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_518(string) -> dynargs[2]
REF_519(string) -> args[2]
REF_518(string) (->dynargs) := REF_519(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_520(string) -> dynargs[3]
REF_521(string) -> args[3]
REF_520(string) (->dynargs) := REF_521(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_945(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_945"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_956(string[])  = new string[](4)
dynargs(string[]) = ['TMP_956(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_538(string) -> dynargs[0]
REF_539(string) -> args[0]
REF_538(string) (->dynargs) := REF_539(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_540(string) -> dynargs[1]
REF_541(string) -> args[1]
REF_540(string) (->dynargs) := REF_541(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_542(string) -> dynargs[2]
REF_543(string) -> args[2]
REF_542(string) (->dynargs) := REF_543(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_544(string) -> dynargs[3]
REF_545(string) -> args[3]
REF_544(string) (->dynargs) := REF_545(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_957(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_957"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_960(string[])  = new string[](5)
dynargs(string[]) = ['TMP_960(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_546(string) -> dynargs[0]
REF_547(string) -> args[0]
REF_546(string) (->dynargs) := REF_547(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_548(string) -> dynargs[1]
REF_549(string) -> args[1]
REF_548(string) (->dynargs) := REF_549(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_550(string) -> dynargs[2]
REF_551(string) -> args[2]
REF_550(string) (->dynargs) := REF_551(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_552(string) -> dynargs[3]
REF_553(string) -> args[3]
REF_552(string) (->dynargs) := REF_553(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_554(string) -> dynargs[4]
REF_555(string) -> args[4]
REF_554(string) (->dynargs) := REF_555(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_961(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_961"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_972(string[])  = new string[](5)
dynargs(string[]) = ['TMP_972(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_576(string) -> dynargs[0]
REF_577(string) -> args[0]
REF_576(string) (->dynargs) := REF_577(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_578(string) -> dynargs[1]
REF_579(string) -> args[1]
REF_578(string) (->dynargs) := REF_579(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_580(string) -> dynargs[2]
REF_581(string) -> args[2]
REF_580(string) (->dynargs) := REF_581(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_582(string) -> dynargs[3]
REF_583(string) -> args[3]
REF_582(string) (->dynargs) := REF_583(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_584(string) -> dynargs[4]
REF_585(string) -> args[4]
REF_584(string) (->dynargs) := REF_585(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_973(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_973"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_863(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_863(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_864(uint256) = tx.gasprice * 200000
TMP_865(uint256) = 1000000000000000000 + TMP_864
TMP_866(bool) = price > TMP_865
CONDITION TMP_866"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_867(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_867(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_869(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_869"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_887(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_887(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_888(uint256) = tx.gasprice * gaslimit
TMP_889(uint256) = 1000000000000000000 + TMP_888
TMP_890(bool) = price > TMP_889
CONDITION TMP_890"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_891(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_891(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_893(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_893"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1012(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1012(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_600(bytes) -> dynargs[0]
REF_601(bytes) -> args[0]
REF_600(bytes) (->dynargs) := REF_601(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1013(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1013"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1016(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1016(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_602(bytes) -> dynargs[0]
REF_603(bytes) -> args[0]
REF_602(bytes) (->dynargs) := REF_603(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1017(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1017"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1028(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1028(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_610(bytes) -> dynargs[0]
REF_611(bytes) -> args[0]
REF_610(bytes) (->dynargs) := REF_611(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_612(bytes) -> dynargs[1]
REF_613(bytes) -> args[1]
REF_612(bytes) (->dynargs) := REF_613(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1029(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1029"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1032(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1032(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_614(bytes) -> dynargs[0]
REF_615(bytes) -> args[0]
REF_614(bytes) (->dynargs) := REF_615(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_616(bytes) -> dynargs[1]
REF_617(bytes) -> args[1]
REF_616(bytes) (->dynargs) := REF_617(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1033(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1033"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1044(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1044(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_628(bytes) -> dynargs[0]
REF_629(bytes) -> args[0]
REF_628(bytes) (->dynargs) := REF_629(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_630(bytes) -> dynargs[1]
REF_631(bytes) -> args[1]
REF_630(bytes) (->dynargs) := REF_631(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_632(bytes) -> dynargs[2]
REF_633(bytes) -> args[2]
REF_632(bytes) (->dynargs) := REF_633(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1045(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1045"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1048(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1048(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_634(bytes) -> dynargs[0]
REF_635(bytes) -> args[0]
REF_634(bytes) (->dynargs) := REF_635(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_636(bytes) -> dynargs[1]
REF_637(bytes) -> args[1]
REF_636(bytes) (->dynargs) := REF_637(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_638(bytes) -> dynargs[2]
REF_639(bytes) -> args[2]
REF_638(bytes) (->dynargs) := REF_639(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1049(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1049"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1060(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1060(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_654(bytes) -> dynargs[0]
REF_655(bytes) -> args[0]
REF_654(bytes) (->dynargs) := REF_655(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_656(bytes) -> dynargs[1]
REF_657(bytes) -> args[1]
REF_656(bytes) (->dynargs) := REF_657(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_658(bytes) -> dynargs[2]
REF_659(bytes) -> args[2]
REF_658(bytes) (->dynargs) := REF_659(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_660(bytes) -> dynargs[3]
REF_661(bytes) -> args[3]
REF_660(bytes) (->dynargs) := REF_661(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1061(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1061"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1064(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1064(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_662(bytes) -> dynargs[0]
REF_663(bytes) -> args[0]
REF_662(bytes) (->dynargs) := REF_663(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_664(bytes) -> dynargs[1]
REF_665(bytes) -> args[1]
REF_664(bytes) (->dynargs) := REF_665(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_666(bytes) -> dynargs[2]
REF_667(bytes) -> args[2]
REF_666(bytes) (->dynargs) := REF_667(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_668(bytes) -> dynargs[3]
REF_669(bytes) -> args[3]
REF_668(bytes) (->dynargs) := REF_669(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1065(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1065"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1076(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1076(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_688(bytes) -> dynargs[0]
REF_689(bytes) -> args[0]
REF_688(bytes) (->dynargs) := REF_689(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_690(bytes) -> dynargs[1]
REF_691(bytes) -> args[1]
REF_690(bytes) (->dynargs) := REF_691(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_692(bytes) -> dynargs[2]
REF_693(bytes) -> args[2]
REF_692(bytes) (->dynargs) := REF_693(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_694(bytes) -> dynargs[3]
REF_695(bytes) -> args[3]
REF_694(bytes) (->dynargs) := REF_695(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_696(bytes) -> dynargs[4]
REF_697(bytes) -> args[4]
REF_696(bytes) (->dynargs) := REF_697(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1077(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1077"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1080(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1080(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_698(bytes) -> dynargs[0]
REF_699(bytes) -> args[0]
REF_698(bytes) (->dynargs) := REF_699(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_700(bytes) -> dynargs[1]
REF_701(bytes) -> args[1]
REF_700(bytes) (->dynargs) := REF_701(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_702(bytes) -> dynargs[2]
REF_703(bytes) -> args[2]
REF_702(bytes) (->dynargs) := REF_703(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_704(bytes) -> dynargs[3]
REF_705(bytes) -> args[3]
REF_704(bytes) (->dynargs) := REF_705(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_706(bytes) -> dynargs[4]
REF_707(bytes) -> args[4]
REF_706(bytes) (->dynargs) := REF_707(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1081(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1081"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_983(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_983(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_984(uint256) = tx.gasprice * 200000
TMP_985(uint256) = 1000000000000000000 + TMP_984
TMP_986(bool) = price > TMP_985
CONDITION TMP_986"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_987(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_987(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_989(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_989"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_991(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_991(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_992(uint256) = tx.gasprice * gaslimit
TMP_993(uint256) = 1000000000000000000 + TMP_992
TMP_994(bool) = price > TMP_993
CONDITION TMP_994"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_995(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_995(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_997(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_997"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_814(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_814(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_815(uint256) = tx.gasprice * 200000
TMP_816(uint256) = 1000000000000000000 + TMP_815
TMP_817(bool) = price > TMP_816
CONDITION TMP_817"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_819(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_819"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_842(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_842(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_843(uint256) = tx.gasprice * 200000
TMP_844(uint256) = 1000000000000000000 + TMP_843
TMP_845(bool) = price > TMP_844
CONDITION TMP_845"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_847(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_847"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_849(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_849(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_850(uint256) = tx.gasprice * gaslimit
TMP_851(uint256) = 1000000000000000000 + TMP_850
TMP_852(bool) = price > TMP_851
CONDITION TMP_852"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_854(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_854"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_821(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_821(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_822(uint256) = tx.gasprice * gaslimit
TMP_823(uint256) = 1000000000000000000 + TMP_822
TMP_824(bool) = price > TMP_823
CONDITION TMP_824"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_826(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_826"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_900(string[])  = new string[](1)
dynargs(string[]) = ['TMP_900(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_468(string) -> dynargs[0]
REF_469(string) -> args[0]
REF_468(string) (->dynargs) := REF_469(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_901(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_901"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_904(string[])  = new string[](1)
dynargs(string[]) = ['TMP_904(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_470(string) -> dynargs[0]
REF_471(string) -> args[0]
REF_470(string) (->dynargs) := REF_471(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_905(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_905"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_916(string[])  = new string[](2)
dynargs(string[]) = ['TMP_916(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_478(string) -> dynargs[0]
REF_479(string) -> args[0]
REF_478(string) (->dynargs) := REF_479(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_480(string) -> dynargs[1]
REF_481(string) -> args[1]
REF_480(string) (->dynargs) := REF_481(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_917(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_917"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_920(string[])  = new string[](2)
dynargs(string[]) = ['TMP_920(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_482(string) -> dynargs[0]
REF_483(string) -> args[0]
REF_482(string) (->dynargs) := REF_483(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_484(string) -> dynargs[1]
REF_485(string) -> args[1]
REF_484(string) (->dynargs) := REF_485(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_921(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_921"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_932(string[])  = new string[](3)
dynargs(string[]) = ['TMP_932(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_496(string) -> dynargs[0]
REF_497(string) -> args[0]
REF_496(string) (->dynargs) := REF_497(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_498(string) -> dynargs[1]
REF_499(string) -> args[1]
REF_498(string) (->dynargs) := REF_499(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_500(string) -> dynargs[2]
REF_501(string) -> args[2]
REF_500(string) (->dynargs) := REF_501(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_933(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_933"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_936(string[])  = new string[](3)
dynargs(string[]) = ['TMP_936(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_502(string) -> dynargs[0]
REF_503(string) -> args[0]
REF_502(string) (->dynargs) := REF_503(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_504(string) -> dynargs[1]
REF_505(string) -> args[1]
REF_504(string) (->dynargs) := REF_505(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_506(string) -> dynargs[2]
REF_507(string) -> args[2]
REF_506(string) (->dynargs) := REF_507(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_937(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_937"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_948(string[])  = new string[](4)
dynargs(string[]) = ['TMP_948(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_522(string) -> dynargs[0]
REF_523(string) -> args[0]
REF_522(string) (->dynargs) := REF_523(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_524(string) -> dynargs[1]
REF_525(string) -> args[1]
REF_524(string) (->dynargs) := REF_525(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_526(string) -> dynargs[2]
REF_527(string) -> args[2]
REF_526(string) (->dynargs) := REF_527(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_528(string) -> dynargs[3]
REF_529(string) -> args[3]
REF_528(string) (->dynargs) := REF_529(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_949(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_949"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_952(string[])  = new string[](4)
dynargs(string[]) = ['TMP_952(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_530(string) -> dynargs[0]
REF_531(string) -> args[0]
REF_530(string) (->dynargs) := REF_531(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_532(string) -> dynargs[1]
REF_533(string) -> args[1]
REF_532(string) (->dynargs) := REF_533(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_534(string) -> dynargs[2]
REF_535(string) -> args[2]
REF_534(string) (->dynargs) := REF_535(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_536(string) -> dynargs[3]
REF_537(string) -> args[3]
REF_536(string) (->dynargs) := REF_537(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_953(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_953"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_964(string[])  = new string[](5)
dynargs(string[]) = ['TMP_964(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_556(string) -> dynargs[0]
REF_557(string) -> args[0]
REF_556(string) (->dynargs) := REF_557(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_558(string) -> dynargs[1]
REF_559(string) -> args[1]
REF_558(string) (->dynargs) := REF_559(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_560(string) -> dynargs[2]
REF_561(string) -> args[2]
REF_560(string) (->dynargs) := REF_561(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_562(string) -> dynargs[3]
REF_563(string) -> args[3]
REF_562(string) (->dynargs) := REF_563(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_564(string) -> dynargs[4]
REF_565(string) -> args[4]
REF_564(string) (->dynargs) := REF_565(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_965(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_965"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_968(string[])  = new string[](5)
dynargs(string[]) = ['TMP_968(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_566(string) -> dynargs[0]
REF_567(string) -> args[0]
REF_566(string) (->dynargs) := REF_567(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_568(string) -> dynargs[1]
REF_569(string) -> args[1]
REF_568(string) (->dynargs) := REF_569(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_570(string) -> dynargs[2]
REF_571(string) -> args[2]
REF_570(string) (->dynargs) := REF_571(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_572(string) -> dynargs[3]
REF_573(string) -> args[3]
REF_572(string) (->dynargs) := REF_573(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_574(string) -> dynargs[4]
REF_575(string) -> args[4]
REF_574(string) (->dynargs) := REF_575(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_969(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_969"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_871(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_871(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_872(uint256) = tx.gasprice * 200000
TMP_873(uint256) = 1000000000000000000 + TMP_872
TMP_874(bool) = price > TMP_873
CONDITION TMP_874"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_875(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_875(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_877(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_877"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_879(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_879(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_880(uint256) = tx.gasprice * gaslimit
TMP_881(uint256) = 1000000000000000000 + TMP_880
TMP_882(bool) = price > TMP_881
CONDITION TMP_882"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_883(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_883(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_885(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_885"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-EtherHiLo-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_1093(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_1093"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_923(None) -> _proof[0]
TMP_1551(bool) = REF_923 == L
REF_924(None) -> _proof[1]
TMP_1552(bool) = REF_924 == P
TMP_1553(bool) = TMP_1551 && TMP_1552
REF_925(None) -> _proof[2]
TMP_1554(bool) = REF_925 == 1
TMP_1555(bool) = TMP_1553 && TMP_1554
TMP_1556(None) = SOLIDITY_CALL require(bool)(TMP_1555)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1557 = CONVERT _result to bytes
TMP_1558(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1559(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1557,TMP_1558)
proofVerified(bool) := TMP_1559(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_1560(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1968.sol-EtherHiLo-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_1324(uint256) = 3 + 65
TMP_1325(uint256) = 3 + 65
TMP_1326(uint256) = TMP_1325 + 1
REF_807(None) -> proof[TMP_1326]
TMP_1327 = CONVERT REF_807 to uint256
TMP_1328(uint256) = TMP_1327 + 2
TMP_1329(uint256) = TMP_1324 + TMP_1328
TMP_1330(uint256) = TMP_1329 + 32
ledgerProofLength(uint256) := TMP_1330(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_1332 = new bytes(32)
keyhash(bytes) := TMP_1332(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_1333(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_1334(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_1335(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_1336(bytes32) = SOLIDITY_CALL keccak256()(TMP_1335)
TMP_1337(bool) = TMP_1334 == TMP_1336
TMP_1338 = UnaryType.BANG TMP_1337 
CONDITION TMP_1338"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_1340(uint256) = 32 + 8
TMP_1341(uint256) = TMP_1340 + 1
TMP_1342(uint256) = TMP_1341 + 32
TMP_1343(uint256) = ledgerProofLength + TMP_1342
TMP_1344(uint256) = TMP_1343 + 1
REF_808(None) -> proof[TMP_1344]
TMP_1345 = CONVERT REF_808 to uint256
TMP_1346(uint256) = TMP_1345 + 2
TMP_1347 = new bytes(TMP_1346)
sig1(bytes) := TMP_1347(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_1348(uint256) = 32 + 8
TMP_1349(uint256) = TMP_1348 + 1
TMP_1350(uint256) = TMP_1349 + 32
TMP_1351(uint256) = ledgerProofLength + TMP_1350
REF_809 -> LENGTH sig1
TMP_1352(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1351,REF_809,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_1353(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_1354(uint256) = ledgerProofLength + 32
TMP_1355(uint256) = TMP_1354 + 8
REF_810(None) -> proof[TMP_1355]
TMP_1356 = CONVERT REF_810 to uint256
TMP_1357(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_1353,result,TMP_1356)
TMP_1358 = UnaryType.BANG TMP_1357 
CONDITION TMP_1358"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_1360(uint256) = 8 + 1
TMP_1361(uint256) = TMP_1360 + 32
TMP_1362 = new bytes(TMP_1361)
commitmentSlice1(bytes) := TMP_1362(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_1363(uint256) = ledgerProofLength + 32
TMP_1364(uint256) = 8 + 1
TMP_1365(uint256) = TMP_1364 + 32
TMP_1366(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1363,TMP_1365,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_1368 = new bytes(64)
sessionPubkey(bytes) := TMP_1368(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_1369(uint256) = ledgerProofLength + 32
TMP_1370(uint256) = 8 + 1
TMP_1371(uint256) = TMP_1370 + 32
TMP_1372(uint256) = TMP_1369 + TMP_1371
REF_811 -> LENGTH sig1
TMP_1373(uint256) = TMP_1372 + REF_811
TMP_1374(uint256) = TMP_1373 + 65
sig2offset(uint256) := TMP_1374(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_1375(uint256) = sig2offset - 64
TMP_1376(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1375,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_1377(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_1377(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_812(bytes32) -> oraclize_randomDS_args[queryId]
TMP_1378(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_1379(bool) = REF_812 == TMP_1378
CONDITION TMP_1379"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_813(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_813 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_1381(uint256) = 32 + 8
TMP_1382(uint256) = TMP_1381 + 1
TMP_1383(uint256) = TMP_1382 + 32
TMP_1384 = new bytes(TMP_1383)
tosign1(bytes) := TMP_1384(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_1385(uint256) = 32 + 8
TMP_1386(uint256) = TMP_1385 + 1
TMP_1387(uint256) = TMP_1386 + 32
TMP_1388(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_1387,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_1389(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_1390(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1389,sig1,sessionPubkey)
TMP_1391 = UnaryType.BANG TMP_1390 
CONDITION TMP_1391"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_814(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1392(bool) = REF_814 == False
CONDITION TMP_1392"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_815(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1393(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_815(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_1393(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_816(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_816"];
}
// Function: 1968.sol-EtherHiLo-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_801(None) -> _proof[0]
TMP_1310(bool) = REF_801 != L
REF_802(None) -> _proof[1]
TMP_1311(bool) = REF_802 != P
TMP_1312(bool) = TMP_1310 || TMP_1311
REF_803(None) -> _proof[2]
TMP_1313(bool) = REF_803 != 1
TMP_1314(bool) = TMP_1312 || TMP_1313
CONDITION TMP_1314"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1315 = CONVERT _result to bytes
TMP_1316(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1317(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1315,TMP_1316)
proofVerified(bool) := TMP_1317(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1318(bool) = proofVerified == False
CONDITION TMP_1318"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 1968.sol-EtherHiLo-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_1275(uint256) = sig2offset + 1
REF_795(None) -> proof[TMP_1275]
TMP_1276 = CONVERT REF_795 to uint256
TMP_1277(uint256) = TMP_1276 + 2
TMP_1278 = new bytes(TMP_1277)
sig2(bytes) := TMP_1278(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_796 -> LENGTH sig2
TMP_1279(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_796,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_1281 = new bytes(64)
appkey1_pubkey(bytes) := TMP_1281(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_1282(uint256) = 3 + 1
TMP_1283(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1282,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_1285(uint256) = 1 + 65
TMP_1286(uint256) = TMP_1285 + 32
TMP_1287 = new bytes(TMP_1286)
tosign2(bytes) := TMP_1287(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_797(bytes1) -> tosign2[0]
TMP_1288 = CONVERT 1 to bytes1
REF_797(bytes1) (->tosign2) := TMP_1288(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_1289(uint256) = sig2offset - 65
TMP_1290(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1289,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_1291(uint256) = 1 + 65
TMP_1292(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_1291)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_1293(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_1294(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1293,sig2,appkey1_pubkey)
sigok(bool) := TMP_1294(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_1295(bool) = sigok == False
CONDITION TMP_1295"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_1297(uint256) = 1 + 65
TMP_1298 = new bytes(TMP_1297)
tosign3(bytes) := TMP_1298(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_798(uint256) -> tosign3[0]
REF_798(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_1299(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_1301(uint256) = 3 + 65
TMP_1302(uint256) = TMP_1301 + 1
REF_799(None) -> proof[TMP_1302]
TMP_1303 = CONVERT REF_799 to uint256
TMP_1304(uint256) = TMP_1303 + 2
TMP_1305 = new bytes(TMP_1304)
sig3(bytes) := TMP_1305(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_1306(uint256) = 3 + 65
REF_800 -> LENGTH sig3
TMP_1307(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1306,REF_800,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_1308(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_1309(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1308,sig3,LEDGERKEY)
sigok(bool) := TMP_1309(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 1968.sol-EtherHiLo-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_792(bytes32) -> oraclize_randomDS_args[queryId]
REF_792(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 1968.sol-EtherHiLo-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_1091"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_775(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_776(bool) = TMP_775 > 0
CONDITION TMP_776"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_777 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_777(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_779(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_780(bool) = TMP_779 > 0
CONDITION TMP_780"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_781 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_781(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_783(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_784(bool) = TMP_783 > 0
CONDITION TMP_784"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_785 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_785(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_787(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_788(bool) = TMP_787 > 0
CONDITION TMP_788"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_789 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_789(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_791(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_792(bool) = TMP_791 > 0
CONDITION TMP_792"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_793 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_793(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_794(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_795(bool) = TMP_794 > 0
CONDITION TMP_795"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_796 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_796(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_797(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_798(bool) = TMP_797 > 0
CONDITION TMP_798"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_799 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_799(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1968.sol-EtherHiLo-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_774(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_774"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 1968.sol-EtherHiLo-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 1968.sol-EtherHiLo-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_1089"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_1095 = CONVERT _a to bytes
tmp(bytes) := TMP_1095(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_1096(uint256) = 2 * 20
TMP_1097(uint256) = 2 + TMP_1096
TMP_1098(bool) = i < TMP_1097
CONDITION TMP_1098"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_722(None) -> tmp[i]
TMP_1099 = CONVERT REF_722 to uint160
b1(uint160) := TMP_1099(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_1100(uint256) = i + 1
REF_723(None) -> tmp[TMP_1100]
TMP_1101 = CONVERT REF_723 to uint160
b2(uint160) := TMP_1101(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_1102(bool) = b1 >= 97
TMP_1103(bool) = b1 <= 102
TMP_1104(bool) = TMP_1102 && TMP_1103
CONDITION TMP_1104"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_1105(bool) = b1 >= 65
TMP_1106(bool) = b1 <= 70
TMP_1107(bool) = TMP_1105 && TMP_1106
CONDITION TMP_1107"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_1108(bool) = b1 >= 48
TMP_1109(bool) = b1 <= 57
TMP_1110(bool) = TMP_1108 && TMP_1109
CONDITION TMP_1110"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_1111(bool) = b2 >= 97
TMP_1112(bool) = b2 <= 102
TMP_1113(bool) = TMP_1111 && TMP_1112
CONDITION TMP_1113"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_1114(bool) = b2 >= 65
TMP_1115(bool) = b2 <= 70
TMP_1116(bool) = TMP_1114 && TMP_1115
CONDITION TMP_1116"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_1117(bool) = b2 >= 48
TMP_1118(bool) = b2 <= 57
TMP_1119(bool) = TMP_1117 && TMP_1118
CONDITION TMP_1119"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_1120(uint160) = b1 * 16
TMP_1121(uint160) = TMP_1120 + b2
iaddr(uint160) = iaddr + TMP_1121"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_1122 = CONVERT iaddr to address
RETURN TMP_1122"];
}
// Function: 1968.sol-EtherHiLo-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_1191(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_1191"];
}
// Function: 1968.sol-EtherHiLo-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_1192 = CONVERT _a to bytes
bresult(bytes) := TMP_1192(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_768 -> LENGTH bresult
TMP_1193(bool) = i < REF_768
CONDITION TMP_1193"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_769(None) -> bresult[i]
TMP_1194(bool) = REF_769 >= 48
REF_770(None) -> bresult[i]
TMP_1195(bool) = REF_770 <= 57
TMP_1196(bool) = TMP_1194 && TMP_1195
CONDITION TMP_1196"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_1197(bool) = _b == 0
CONDITION TMP_1197"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_1198(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_771(None) -> bresult[i]
TMP_1199 = CONVERT REF_771 to uint256
TMP_1200(uint256) = TMP_1199 - 48
mint(uint256) = mint + TMP_1200"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_772(None) -> bresult[i]
TMP_1201(bool) = REF_772 == 46
CONDITION TMP_1201"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_1202(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_1203(bool) = _b > 0
CONDITION TMP_1203"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_1204(uint256) = 10 ** _b
mint(uint256) = mint * TMP_1204"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 1968.sol-EtherHiLo-processDiceRoll(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
game = gamesInProgress[player]

IRs:
REF_859(EtherHiLo.Game) -> gamesInProgress[player]
game(EtherHiLo.Game) := REF_859(EtherHiLo.Game)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
game.firstRoll == 0

IRs:
REF_860(uint8) -> game.firstRoll
TMP_1471(bool) = REF_860 == 0
CONDITION TMP_1471"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
game.firstRoll = roll

IRs:
REF_861(uint8) -> game.firstRoll
REF_861(uint8) (->game) := roll(uint8)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
game.state = GameState.WaitingForDirection

IRs:
REF_862(EtherHiLo.GameState) -> game.state
REF_863(EtherHiLo.GameState) -> GameState.WaitingForDirection
REF_862(EtherHiLo.GameState) (->game) := REF_863(EtherHiLo.GameState)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gamesInProgress[player] = game

IRs:
REF_864(EtherHiLo.Game) -> gamesInProgress[player]
REF_864(EtherHiLo.Game) (->gamesInProgress) := game(EtherHiLo.Game)"];
5->6;
6[label="Node Type: RETURN 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool,string)(gamesInProgress[player].state == GameState.WaitingForFinalCard,Invalid game state)

IRs:
REF_865(EtherHiLo.Game) -> gamesInProgress[player]
REF_866(EtherHiLo.GameState) -> REF_865.state
REF_867(EtherHiLo.GameState) -> GameState.WaitingForFinalCard
TMP_1472(bool) = REF_866 == REF_867
TMP_1473(None) = SOLIDITY_CALL require(bool,string)(TMP_1472,Invalid game state)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
finalRoll = roll

IRs:
finalRoll(uint8) := roll(uint8)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
winnings = 0

IRs:
winnings(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
game.direction == BetDirection.High && finalRoll > game.firstRoll

IRs:
REF_868(EtherHiLo.BetDirection) -> game.direction
REF_869(EtherHiLo.BetDirection) -> BetDirection.High
TMP_1474(bool) = REF_868 == REF_869
REF_870(uint8) -> game.firstRoll
TMP_1475(bool) = finalRoll > REF_870
TMP_1476(bool) = TMP_1474 && TMP_1475
CONDITION TMP_1476"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
winnings = calculateWinnings(game.bet,getHighWinPercent(game.firstRoll))

IRs:
REF_871(uint256) -> game.bet
REF_872(uint8) -> game.firstRoll
TMP_1477(uint256) = INTERNAL_CALL, EtherHiLo.getHighWinPercent(uint256)(REF_872)
TMP_1478(uint256) = INTERNAL_CALL, EtherHiLo.calculateWinnings(uint256,uint256)(REF_871,TMP_1477)
winnings(uint256) := TMP_1478(uint256)"];
12->16;
13[label="Node Type: IF 13

EXPRESSION:
game.direction == BetDirection.Low && finalRoll < game.firstRoll

IRs:
REF_873(EtherHiLo.BetDirection) -> game.direction
REF_874(EtherHiLo.BetDirection) -> BetDirection.Low
TMP_1479(bool) = REF_873 == REF_874
REF_875(uint8) -> game.firstRoll
TMP_1480(bool) = finalRoll < REF_875
TMP_1481(bool) = TMP_1479 && TMP_1480
CONDITION TMP_1481"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
winnings = calculateWinnings(game.bet,getLowWinPercent(game.firstRoll))

IRs:
REF_876(uint256) -> game.bet
REF_877(uint8) -> game.firstRoll
TMP_1482(uint256) = INTERNAL_CALL, EtherHiLo.getLowWinPercent(uint256)(REF_877)
TMP_1483(uint256) = INTERNAL_CALL, EtherHiLo.calculateWinnings(uint256,uint256)(REF_876,TMP_1482)
winnings(uint256) := TMP_1483(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
transferAmount = winnings

IRs:
transferAmount(uint256) := winnings(uint256)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
transferAmount > this.balance

IRs:
REF_878(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1484(bool) = transferAmount > REF_878
CONDITION TMP_1484"];
18->19[label="True"];
18->23[label="False"];
19[label="Node Type: IF 19

EXPRESSION:
game.bet < this.balance

IRs:
REF_879(uint256) -> game.bet
REF_880(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1485(bool) = REF_879 < REF_880
CONDITION TMP_1485"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
transferAmount = game.bet

IRs:
REF_881(uint256) -> game.bet
transferAmount(uint256) := REF_881(uint256)"];
20->22;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
transferAmount = SafeMath.div(SafeMath.mul(this.balance,90),100)

IRs:
REF_884(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_884', '90'] 
TMP_1487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1486', '100'] 
transferAmount(uint256) := TMP_1487(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
balanceInPlay = SafeMath.add(balanceInPlay,game.bet)

IRs:
REF_886(uint256) -> game.bet
TMP_1488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['balanceInPlay', 'REF_886'] 
balanceInPlay(uint256) := TMP_1488(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
game.finalRoll = finalRoll

IRs:
REF_887(uint8) -> game.finalRoll
REF_887(uint8) (->game) := finalRoll(uint8)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
game.winnings = winnings

IRs:
REF_888(uint256) -> game.winnings
REF_888(uint256) (->game) := winnings(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
game.state = GameState.Finished

IRs:
REF_889(EtherHiLo.GameState) -> game.state
REF_890(EtherHiLo.GameState) -> GameState.Finished
REF_889(EtherHiLo.GameState) (->game) := REF_890(EtherHiLo.GameState)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
gamesInProgress[player] = game

IRs:
REF_891(EtherHiLo.Game) -> gamesInProgress[player]
REF_891(EtherHiLo.Game) (->gamesInProgress) := game(EtherHiLo.Game)"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
transferAmount > 0

IRs:
TMP_1489(bool) = transferAmount > 0
CONDITION TMP_1489"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
game.player.transfer(transferAmount)

IRs:
REF_892(address) -> game.player
Transfer dest:REF_892 value:transferAmount"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
GameFinished(player,game.id,game.bet,game.firstRoll,finalRoll,winnings,transferAmount)

IRs:
REF_894(uint256) -> game.id
REF_895(uint256) -> game.bet
REF_896(uint8) -> game.firstRoll
Emit GameFinished(player,REF_894,REF_895,REF_896,finalRoll,winnings,transferAmount)"];
}
// Function: 1968.sol-EtherHiLo-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_766 = CONVERT 0 to address
owner(address) := TMP_766(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1968.sol-EtherHiLo-rollDie(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rollId = oraclize_newRandomDSQuery(0,7,rngCallbackGas)

IRs:
TMP_1492(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)(0,7,rngCallbackGas)
rollId(bytes32) := TMP_1492(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
failedRolls[rollId] == FAILED_ROLE

IRs:
REF_897(uint256) -> failedRolls[rollId]
TMP_1493(bool) = REF_897 == FAILED_ROLE
CONDITION TMP_1493"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete failedRolls[rollId]

IRs:
REF_898(uint256) -> failedRolls[rollId]
failedRolls = delete REF_898 "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
rollIdToGameAddress[rollId] = player

IRs:
REF_899(address) -> rollIdToGameAddress[rollId]
REF_899(address) (->rollIdToGameAddress) := player(address)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1968.sol-EtherHiLo-safeMemoryCleaner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 1968.sol-EtherHiLo-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 1968.sol-EtherHiLo-setGameRunning(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameRunning = v

IRs:
gameRunning(bool) := v(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-setMaxBetThresholdPct(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxBetThresholdPct = v

IRs:
maxBetThresholdPct(uint256) := v(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-setMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minBet = bet

IRs:
minBet(uint256) := bet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-setRNGCallbackGasConfig(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rngCallbackGas = gas

IRs:
rngCallbackGas(uint256) := gas(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setCustomGasPrice(price)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setCustomGasPrice(uint256)(price)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1968.sol-EtherHiLo-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_1527(uint256) = 60 * 60
TMP_1528(uint256) = TMP_1527 * 24
day(uint256) := TMP_1528(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_1529(uint256) = 60 * 60
TMP_1530(uint256) = TMP_1529 * 24
TMP_1531(uint256) = TMP_1530 * 7
week(uint256) := TMP_1531(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_1532(uint256) = 60 * 60
TMP_1533(uint256) = TMP_1532 * 24
TMP_1534(uint256) = TMP_1533 * 30
month(uint256) := TMP_1534(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Android = 0x40

IRs:
proofType_Android(bytes1) := 64(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
NUM_DICE_SIDES = 13

IRs:
NUM_DICE_SIDES(uint8) := 13(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
FAILED_ROLE = 69

IRs:
FAILED_ROLE(uint8) := 69(uint256)"];
}
// Function: 1968.sol-EtherHiLo-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_1123 = CONVERT _a to bytes
a(bytes) := TMP_1123(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_1124 = CONVERT _b to bytes
b(bytes) := TMP_1124(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_724 -> LENGTH a
minLength(uint256) := REF_724(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_725 -> LENGTH b
TMP_1125(bool) = REF_725 < minLength
CONDITION TMP_1125"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_726 -> LENGTH b
minLength(uint256) := REF_726(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_1126(bool) = i < minLength
CONDITION TMP_1126"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_727(None) -> a[i]
REF_728(None) -> b[i]
TMP_1127(bool) = REF_727 < REF_728
CONDITION TMP_1127"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_1128(uint256) = 0 - 1
RETURN TMP_1128"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_729(None) -> a[i]
REF_730(None) -> b[i]
TMP_1129(bool) = REF_729 > REF_730
CONDITION TMP_1129"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_1130(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_731 -> LENGTH a
REF_732 -> LENGTH b
TMP_1131(bool) = REF_731 < REF_732
CONDITION TMP_1131"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_1132(uint256) = 0 - 1
RETURN TMP_1132"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_733 -> LENGTH a
REF_734 -> LENGTH b
TMP_1133(bool) = REF_733 > REF_734
CONDITION TMP_1133"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 1968.sol-EtherHiLo-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_1190(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_1190"];
}
// Function: 1968.sol-EtherHiLo-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_1189(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_1189"];
}
// Function: 1968.sol-EtherHiLo-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_1188(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_1188"];
}
// Function: 1968.sol-EtherHiLo-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_1160 = CONVERT _a to bytes
_ba(bytes) := TMP_1160(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_1161 = CONVERT _b to bytes
_bb(bytes) := TMP_1161(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_1162 = CONVERT _c to bytes
_bc(bytes) := TMP_1162(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_1163 = CONVERT _d to bytes
_bd(bytes) := TMP_1163(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_1164 = CONVERT _e to bytes
_be(bytes) := TMP_1164(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_748 -> LENGTH _ba
REF_749 -> LENGTH _bb
TMP_1166(uint256) = REF_748 + REF_749
REF_750 -> LENGTH _bc
TMP_1167(uint256) = TMP_1166 + REF_750
REF_751 -> LENGTH _bd
TMP_1168(uint256) = TMP_1167 + REF_751
REF_752 -> LENGTH _be
TMP_1169(uint256) = TMP_1168 + REF_752
TMP_1170 = new string(TMP_1169)
abcde(string) := TMP_1170(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_1171 = CONVERT abcde to bytes
babcde(bytes) := TMP_1171(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_753 -> LENGTH _ba
TMP_1172(bool) = i < REF_753
CONDITION TMP_1172"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_1173(uint256) := k(uint256)
k(uint256) = k + 1
REF_754(None) -> babcde[TMP_1173]
REF_755(None) -> _ba[i]
REF_754(None) (->babcde) := REF_755(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_1174(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_756 -> LENGTH _bb
TMP_1175(bool) = i < REF_756
CONDITION TMP_1175"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_1176(uint256) := k(uint256)
k(uint256) = k + 1
REF_757(None) -> babcde[TMP_1176]
REF_758(None) -> _bb[i]
REF_757(None) (->babcde) := REF_758(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_1177(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_759 -> LENGTH _bc
TMP_1178(bool) = i < REF_759
CONDITION TMP_1178"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_1179(uint256) := k(uint256)
k(uint256) = k + 1
REF_760(None) -> babcde[TMP_1179]
REF_761(None) -> _bc[i]
REF_760(None) (->babcde) := REF_761(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_1180(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_762 -> LENGTH _bd
TMP_1181(bool) = i < REF_762
CONDITION TMP_1181"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_1182(uint256) := k(uint256)
k(uint256) = k + 1
REF_763(None) -> babcde[TMP_1182]
REF_764(None) -> _bd[i]
REF_763(None) (->babcde) := REF_764(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_1183(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_765 -> LENGTH _be
TMP_1184(bool) = i < REF_765
CONDITION TMP_1184"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_1185(uint256) := k(uint256)
k(uint256) = k + 1
REF_766(None) -> babcde[TMP_1185]
REF_767(None) -> _be[i]
REF_766(None) (->babcde) := REF_767(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_1186(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_1187 = CONVERT babcde to string
RETURN TMP_1187"];
}
// Function: 1968.sol-EtherHiLo-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeMemoryCleaner()

IRs:
INTERNAL_CALL, usingOraclize.safeMemoryCleaner()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < arr.length

IRs:
REF_776 -> LENGTH arr
TMP_1220(bool) = i < REF_776
CONDITION TMP_1220"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buf.encodeString(arr[i])

IRs:
REF_778(string) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeString(Buffer.buffer,string), arguments:['buf', 'REF_778'] "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1222(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
buf.buf

IRs:
REF_780(bytes) -> buf.buf
RETURN REF_780"];
}
// Function: 1968.sol-EtherHiLo-transferBalance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
to.transfer(amount)

IRs:
Transfer dest:to value:amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1968.sol-EtherHiLo-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_1205(bool) = i == 0
CONDITION TMP_1205"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_1206(bool) = j != 0
CONDITION TMP_1206"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_1207(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_1209 = new bytes(len)
bstr(bytes) := TMP_1209(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_1210(uint256) = len - 1
k(uint256) := TMP_1210(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_1211(bool) = i != 0
CONDITION TMP_1211"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_1212(uint256) := k(uint256)
k(uint256) = k - 1
REF_773(bytes1) -> bstr[TMP_1212]
TMP_1213(uint256) = i % 10
TMP_1214(uint256) = 48 + TMP_1213
TMP_1215 = CONVERT TMP_1214 to bytes1
REF_773(bytes1) (->bstr) := TMP_1215(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_1216 = CONVERT bstr to string
RETURN TMP_1216"];
}
// Function: 1968.sol-EtherHiLo-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_1255 = new bytes(32)
sigr_(bytes) := TMP_1255(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_793(None) -> dersig[3]
TMP_1256 = CONVERT REF_793 to uint256
TMP_1257(uint256) = TMP_1256 - 32
TMP_1258(uint256) = 4 + TMP_1257
offset(uint256) := TMP_1258(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_1259(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_1259(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_1261 = new bytes(32)
sigs_(bytes) := TMP_1261(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_1262(uint256) = 32 + 2
offset(uint256) = offset + TMP_1262"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_1263(uint256) = offset - 1
REF_794(None) -> dersig[TMP_1263]
TMP_1264 = CONVERT REF_794 to uint256
TMP_1265(uint256) = TMP_1264 - 32
TMP_1266(uint256) = offset + TMP_1265
TMP_1267(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_1266,32,sigs_,0)
sigs_(bytes) := TMP_1267(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_3(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_3 index: 0 
signer(address)= UNPACK TUPLE_3 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_1268(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1269 = CONVERT TMP_1268 to address
TMP_1270(bool) = TMP_1269 == signer
CONDITION TMP_1270"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_4(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_4 index: 0 
signer(address)= UNPACK TUPLE_4 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_1271(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1272 = CONVERT TMP_1271 to address
TMP_1273(bool) = TMP_1272 == signer
RETURN TMP_1273"];
}
// Function: 1968.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 1968.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 1968.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 1968.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 1968.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 1968.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 1968.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 1968.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 1968.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 1968.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 1968.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 1968.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 1968.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = _newOwner != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1968.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1968.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_21(bool) = msg.sender == owner
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1968.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_13 = CONVERT 0 to address
owner(address) := TMP_13(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1968.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1968.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_9(uint256) = _a + _b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_10(bool) = c >= _a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1968.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_5(uint256) = _a / _b
RETURN TMP_5"];
}
// Function: 1968.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1968.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_6(bool) = _b <= _a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_8(uint256) = _a - _b
RETURN TMP_8"];
}
// Function: 1968.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_127 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_127)"];
}
// Function: 1968.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1
"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
myid
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
result
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proof
"];
}
// Function: 1968.sol-usingOraclize-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeMemoryCleaner()

IRs:
INTERNAL_CALL, usingOraclize.safeMemoryCleaner()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < arr.length

IRs:
REF_386 -> LENGTH arr
TMP_553(bool) = i < REF_386
CONDITION TMP_553"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buf.encodeBytes(arr[i])

IRs:
REF_388(bytes) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeBytes(Buffer.buffer,bytes), arguments:['buf', 'REF_388'] "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_555(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
buf.buf

IRs:
REF_390(bytes) -> buf.buf
RETURN REF_390"];
}
// Function: 1968.sol-usingOraclize-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_720(uint256) = length + toOffset
minLength(uint256) := TMP_720(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_420 -> LENGTH to
TMP_721(bool) = REF_420 >= minLength
TMP_722(None) = SOLIDITY_CALL require(bool)(TMP_721)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_723(uint256) = 32 + fromOffset
i(uint256) := TMP_723(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_724(uint256) = 32 + toOffset
j(uint256) := TMP_724(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_725(uint256) = 32 + fromOffset
TMP_726(uint256) = TMP_725 + length
TMP_727(bool) = i < TMP_726
CONDITION TMP_727"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 1968.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_753(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_754 = CONVERT TMP_753 to OraclizeI
oraclize(OraclizeI) := TMP_754(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1968.sol-usingOraclize-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_421 -> LENGTH sig
TMP_728(bool) = REF_421 != 65
CONDITION TMP_728"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_729(bool) = v < 27
CONDITION TMP_729"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_730(bool) = v != 27
TMP_731(bool) = v != 28
TMP_732(bool) = TMP_730 && TMP_731
CONDITION TMP_732"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_2(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_2"];
}
// Function: 1968.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 1968.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_460 = CONVERT _haystack to bytes
h(bytes) := TMP_460(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_461 = CONVERT _needle to bytes
n(bytes) := TMP_461(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_338 -> LENGTH h
TMP_462(bool) = REF_338 < 1
REF_339 -> LENGTH n
TMP_463(bool) = REF_339 < 1
TMP_464(bool) = TMP_462 || TMP_463
REF_340 -> LENGTH n
REF_341 -> LENGTH h
TMP_465(bool) = REF_340 > REF_341
TMP_466(bool) = TMP_464 || TMP_465
CONDITION TMP_466"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_467(uint256) = 0 - 1
RETURN TMP_467"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_342 -> LENGTH h
TMP_468(uint256) = 2 ** 128
TMP_469(uint256) = TMP_468 - 1
TMP_470(bool) = REF_342 > TMP_469
CONDITION TMP_470"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_471(uint256) = 0 - 1
RETURN TMP_471"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_343 -> LENGTH h
TMP_472(bool) = i < REF_343
CONDITION TMP_472"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_344(None) -> h[i]
REF_345(None) -> n[0]
TMP_473(bool) = REF_344 == REF_345
CONDITION TMP_473"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_346 -> LENGTH n
TMP_474(bool) = subindex < REF_346
TMP_475(uint256) = i + subindex
REF_347 -> LENGTH h
TMP_476(bool) = TMP_475 < REF_347
TMP_477(bool) = TMP_474 && TMP_476
TMP_478(uint256) = i + subindex
REF_348(None) -> h[TMP_478]
REF_349(None) -> n[subindex]
TMP_479(bool) = REF_348 == REF_349
TMP_480(bool) = TMP_477 && TMP_479
CONDITION TMP_480"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_481(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_350 -> LENGTH n
TMP_482(bool) = subindex == REF_350
CONDITION TMP_482"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_483 = CONVERT i to int256
RETURN TMP_483"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_484(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_485(uint256) = 0 - 1
RETURN TMP_485"];
}
// Function: 1968.sol-usingOraclize-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_407 -> LENGTH prefix
TMP_645(bool) = REF_407 == n_random_bytes
TMP_646(None) = SOLIDITY_CALL require(bool)(TMP_645)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_647(bool) = i < n_random_bytes
CONDITION TMP_647"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_408(None) -> content[i]
REF_409(None) -> prefix[i]
TMP_648(bool) = REF_408 != REF_409
CONDITION TMP_648"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_649(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 1968.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_741 = CONVERT OAR to address
TMP_742(bool) = TMP_741 == 0
TMP_743 = CONVERT OAR to address
TMP_744(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_743)
TMP_745(bool) = TMP_744 == 0
TMP_746(bool) = TMP_742 || TMP_745
CONDITION TMP_746"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_747(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_748 = CONVERT oraclize to address
TMP_749(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_750(bool) = TMP_748 != TMP_749
CONDITION TMP_750"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_751(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_752 = CONVERT TMP_751 to OraclizeI
oraclize(OraclizeI) := TMP_752(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 1968.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_413(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_413"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 1968.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_129(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_129"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_131(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_131"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-usingOraclize-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_557(bool) = _nbytes > 0
TMP_558(bool) = _nbytes <= 32
TMP_559(bool) = TMP_557 && TMP_558
TMP_560(None) = SOLIDITY_CALL require(bool)(TMP_559)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_562 = new bytes(1)
nbytes(bytes) := TMP_562(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_391(bytes1) -> nbytes[0]
TMP_563 = CONVERT _nbytes to bytes1
REF_391(bytes1) (->nbytes) := TMP_563(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_565 = new bytes(32)
unonce(bytes) := TMP_565(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_567 = new bytes(32)
sessionKeyHash(bytes) := TMP_567(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_568(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_568(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_570 = new bytes(32)
delay(bytes) := TMP_570(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_572 = new bytes(8)
delay_bytes8(bytes) := TMP_572(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_573(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_574(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_574(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_576 = new bytes(8)
delay_bytes8_left(bytes) := TMP_576(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_392(bytes) -> args[1]
REF_393(bytes) -> args[0]
TMP_577(bytes32) = SOLIDITY_CALL sha256()(REF_393)
REF_394(bytes) -> args[2]
TMP_578(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_392,TMP_577,REF_394)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_578)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_334(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_334(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_201(bytes) -> dynargs[0]
REF_202(bytes) -> args[0]
REF_201(bytes) (->dynargs) := REF_202(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_335(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_335"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_346(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_346(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_207(bytes) -> dynargs[0]
REF_208(bytes) -> args[0]
REF_207(bytes) (->dynargs) := REF_208(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_347(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_347"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_350(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_350(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_209(bytes) -> dynargs[0]
REF_210(bytes) -> args[0]
REF_209(bytes) (->dynargs) := REF_210(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_211(bytes) -> dynargs[1]
REF_212(bytes) -> args[1]
REF_211(bytes) (->dynargs) := REF_212(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_351(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_351"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_362(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_362(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_221(bytes) -> dynargs[0]
REF_222(bytes) -> args[0]
REF_221(bytes) (->dynargs) := REF_222(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_223(bytes) -> dynargs[1]
REF_224(bytes) -> args[1]
REF_223(bytes) (->dynargs) := REF_224(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_363(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_363"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_366(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_366(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_225(bytes) -> dynargs[0]
REF_226(bytes) -> args[0]
REF_225(bytes) (->dynargs) := REF_226(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_227(bytes) -> dynargs[1]
REF_228(bytes) -> args[1]
REF_227(bytes) (->dynargs) := REF_228(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_229(bytes) -> dynargs[2]
REF_230(bytes) -> args[2]
REF_229(bytes) (->dynargs) := REF_230(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_367(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_367"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_378(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_378(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_243(bytes) -> dynargs[0]
REF_244(bytes) -> args[0]
REF_243(bytes) (->dynargs) := REF_244(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_245(bytes) -> dynargs[1]
REF_246(bytes) -> args[1]
REF_245(bytes) (->dynargs) := REF_246(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_247(bytes) -> dynargs[2]
REF_248(bytes) -> args[2]
REF_247(bytes) (->dynargs) := REF_248(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_379(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_379"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_382(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_382(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_249(bytes) -> dynargs[0]
REF_250(bytes) -> args[0]
REF_249(bytes) (->dynargs) := REF_250(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_251(bytes) -> dynargs[1]
REF_252(bytes) -> args[1]
REF_251(bytes) (->dynargs) := REF_252(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_253(bytes) -> dynargs[2]
REF_254(bytes) -> args[2]
REF_253(bytes) (->dynargs) := REF_254(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_255(bytes) -> dynargs[3]
REF_256(bytes) -> args[3]
REF_255(bytes) (->dynargs) := REF_256(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_383(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_383"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_394(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_394(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_273(bytes) -> dynargs[0]
REF_274(bytes) -> args[0]
REF_273(bytes) (->dynargs) := REF_274(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_275(bytes) -> dynargs[1]
REF_276(bytes) -> args[1]
REF_275(bytes) (->dynargs) := REF_276(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_277(bytes) -> dynargs[2]
REF_278(bytes) -> args[2]
REF_277(bytes) (->dynargs) := REF_278(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_279(bytes) -> dynargs[3]
REF_280(bytes) -> args[3]
REF_279(bytes) (->dynargs) := REF_280(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_395(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_395"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_398(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_398(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_281(bytes) -> dynargs[0]
REF_282(bytes) -> args[0]
REF_281(bytes) (->dynargs) := REF_282(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_283(bytes) -> dynargs[1]
REF_284(bytes) -> args[1]
REF_283(bytes) (->dynargs) := REF_284(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_285(bytes) -> dynargs[2]
REF_286(bytes) -> args[2]
REF_285(bytes) (->dynargs) := REF_286(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_287(bytes) -> dynargs[3]
REF_288(bytes) -> args[3]
REF_287(bytes) (->dynargs) := REF_288(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_289(bytes) -> dynargs[4]
REF_290(bytes) -> args[4]
REF_289(bytes) (->dynargs) := REF_290(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_399(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_399"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_410(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_410(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_311(bytes) -> dynargs[0]
REF_312(bytes) -> args[0]
REF_311(bytes) (->dynargs) := REF_312(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_313(bytes) -> dynargs[1]
REF_314(bytes) -> args[1]
REF_313(bytes) (->dynargs) := REF_314(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_315(bytes) -> dynargs[2]
REF_316(bytes) -> args[2]
REF_315(bytes) (->dynargs) := REF_316(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_317(bytes) -> dynargs[3]
REF_318(bytes) -> args[3]
REF_317(bytes) (->dynargs) := REF_318(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_319(bytes) -> dynargs[4]
REF_320(bytes) -> args[4]
REF_319(bytes) (->dynargs) := REF_320(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_411(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_411"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_301(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_301(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_302(uint256) = tx.gasprice * 200000
TMP_303(uint256) = 1000000000000000000 + TMP_302
TMP_304(bool) = price > TMP_303
CONDITION TMP_304"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_305(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_305(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_307(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_307"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_325(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_325(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_326(uint256) = tx.gasprice * gaslimit
TMP_327(uint256) = 1000000000000000000 + TMP_326
TMP_328(bool) = price > TMP_327
CONDITION TMP_328"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_329(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_329(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_331(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_331"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_133(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_133(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_134(uint256) = tx.gasprice * 200000
TMP_135(uint256) = 1000000000000000000 + TMP_134
TMP_136(bool) = price > TMP_135
CONDITION TMP_136"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_138(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_138"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_161(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_162(uint256) = tx.gasprice * 200000
TMP_163(uint256) = 1000000000000000000 + TMP_162
TMP_164(bool) = price > TMP_163
CONDITION TMP_164"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_166(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_166"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_182(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_182(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_183(uint256) = tx.gasprice * gaslimit
TMP_184(uint256) = 1000000000000000000 + TMP_183
TMP_185(bool) = price > TMP_184
CONDITION TMP_185"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_187(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_187"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_154(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_155(uint256) = tx.gasprice * gaslimit
TMP_156(uint256) = 1000000000000000000 + TMP_155
TMP_157(bool) = price > TMP_156
CONDITION TMP_157"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_159(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_159"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_222(string[])  = new string[](1)
dynargs(string[]) = ['TMP_222(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_69(string) -> dynargs[0]
REF_70(string) -> args[0]
REF_69(string) (->dynargs) := REF_70(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_223(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_223"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_234(string[])  = new string[](1)
dynargs(string[]) = ['TMP_234(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_75(string) -> dynargs[0]
REF_76(string) -> args[0]
REF_75(string) (->dynargs) := REF_76(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_235(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_235"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_238(string[])  = new string[](2)
dynargs(string[]) = ['TMP_238(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_77(string) -> dynargs[0]
REF_78(string) -> args[0]
REF_77(string) (->dynargs) := REF_78(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_79(string) -> dynargs[1]
REF_80(string) -> args[1]
REF_79(string) (->dynargs) := REF_80(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_239(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_239"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_250(string[])  = new string[](2)
dynargs(string[]) = ['TMP_250(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_89(string) -> dynargs[0]
REF_90(string) -> args[0]
REF_89(string) (->dynargs) := REF_90(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_91(string) -> dynargs[1]
REF_92(string) -> args[1]
REF_91(string) (->dynargs) := REF_92(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_251(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_251"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_254(string[])  = new string[](3)
dynargs(string[]) = ['TMP_254(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_93(string) -> dynargs[0]
REF_94(string) -> args[0]
REF_93(string) (->dynargs) := REF_94(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_95(string) -> dynargs[1]
REF_96(string) -> args[1]
REF_95(string) (->dynargs) := REF_96(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_97(string) -> dynargs[2]
REF_98(string) -> args[2]
REF_97(string) (->dynargs) := REF_98(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_255(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_255"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_266(string[])  = new string[](3)
dynargs(string[]) = ['TMP_266(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_111(string) -> dynargs[0]
REF_112(string) -> args[0]
REF_111(string) (->dynargs) := REF_112(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_113(string) -> dynargs[1]
REF_114(string) -> args[1]
REF_113(string) (->dynargs) := REF_114(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_115(string) -> dynargs[2]
REF_116(string) -> args[2]
REF_115(string) (->dynargs) := REF_116(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_267(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_267"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_270(string[])  = new string[](4)
dynargs(string[]) = ['TMP_270(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_117(string) -> dynargs[0]
REF_118(string) -> args[0]
REF_117(string) (->dynargs) := REF_118(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_119(string) -> dynargs[1]
REF_120(string) -> args[1]
REF_119(string) (->dynargs) := REF_120(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_121(string) -> dynargs[2]
REF_122(string) -> args[2]
REF_121(string) (->dynargs) := REF_122(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_123(string) -> dynargs[3]
REF_124(string) -> args[3]
REF_123(string) (->dynargs) := REF_124(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_271(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_271"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_282(string[])  = new string[](4)
dynargs(string[]) = ['TMP_282(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_141(string) -> dynargs[0]
REF_142(string) -> args[0]
REF_141(string) (->dynargs) := REF_142(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_143(string) -> dynargs[1]
REF_144(string) -> args[1]
REF_143(string) (->dynargs) := REF_144(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_145(string) -> dynargs[2]
REF_146(string) -> args[2]
REF_145(string) (->dynargs) := REF_146(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_147(string) -> dynargs[3]
REF_148(string) -> args[3]
REF_147(string) (->dynargs) := REF_148(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_283(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_283"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_286(string[])  = new string[](5)
dynargs(string[]) = ['TMP_286(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_149(string) -> dynargs[0]
REF_150(string) -> args[0]
REF_149(string) (->dynargs) := REF_150(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_151(string) -> dynargs[1]
REF_152(string) -> args[1]
REF_151(string) (->dynargs) := REF_152(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_153(string) -> dynargs[2]
REF_154(string) -> args[2]
REF_153(string) (->dynargs) := REF_154(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_155(string) -> dynargs[3]
REF_156(string) -> args[3]
REF_155(string) (->dynargs) := REF_156(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_157(string) -> dynargs[4]
REF_158(string) -> args[4]
REF_157(string) (->dynargs) := REF_158(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_287(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_287"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_298(string[])  = new string[](5)
dynargs(string[]) = ['TMP_298(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_179(string) -> dynargs[0]
REF_180(string) -> args[0]
REF_179(string) (->dynargs) := REF_180(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_181(string) -> dynargs[1]
REF_182(string) -> args[1]
REF_181(string) (->dynargs) := REF_182(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_183(string) -> dynargs[2]
REF_184(string) -> args[2]
REF_183(string) (->dynargs) := REF_184(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_185(string) -> dynargs[3]
REF_186(string) -> args[3]
REF_185(string) (->dynargs) := REF_186(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_187(string) -> dynargs[4]
REF_188(string) -> args[4]
REF_187(string) (->dynargs) := REF_188(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_299(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_299"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_189(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_189(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_190(uint256) = tx.gasprice * 200000
TMP_191(uint256) = 1000000000000000000 + TMP_190
TMP_192(bool) = price > TMP_191
CONDITION TMP_192"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_193(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_193(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_195(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_195"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_213(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_213(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_214(uint256) = tx.gasprice * gaslimit
TMP_215(uint256) = 1000000000000000000 + TMP_214
TMP_216(bool) = price > TMP_215
CONDITION TMP_216"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_217(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_217(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_219(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_219"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_338(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_338(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_203(bytes) -> dynargs[0]
REF_204(bytes) -> args[0]
REF_203(bytes) (->dynargs) := REF_204(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_339(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_339"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_342(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_342(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_205(bytes) -> dynargs[0]
REF_206(bytes) -> args[0]
REF_205(bytes) (->dynargs) := REF_206(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_343(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_343"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_354(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_354(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_213(bytes) -> dynargs[0]
REF_214(bytes) -> args[0]
REF_213(bytes) (->dynargs) := REF_214(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_215(bytes) -> dynargs[1]
REF_216(bytes) -> args[1]
REF_215(bytes) (->dynargs) := REF_216(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_355(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_355"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_358(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_358(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_217(bytes) -> dynargs[0]
REF_218(bytes) -> args[0]
REF_217(bytes) (->dynargs) := REF_218(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_219(bytes) -> dynargs[1]
REF_220(bytes) -> args[1]
REF_219(bytes) (->dynargs) := REF_220(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_359(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_359"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_370(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_370(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_231(bytes) -> dynargs[0]
REF_232(bytes) -> args[0]
REF_231(bytes) (->dynargs) := REF_232(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_233(bytes) -> dynargs[1]
REF_234(bytes) -> args[1]
REF_233(bytes) (->dynargs) := REF_234(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_235(bytes) -> dynargs[2]
REF_236(bytes) -> args[2]
REF_235(bytes) (->dynargs) := REF_236(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_371(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_371"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_374(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_374(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_237(bytes) -> dynargs[0]
REF_238(bytes) -> args[0]
REF_237(bytes) (->dynargs) := REF_238(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_239(bytes) -> dynargs[1]
REF_240(bytes) -> args[1]
REF_239(bytes) (->dynargs) := REF_240(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_241(bytes) -> dynargs[2]
REF_242(bytes) -> args[2]
REF_241(bytes) (->dynargs) := REF_242(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_375(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_375"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_386(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_386(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_257(bytes) -> dynargs[0]
REF_258(bytes) -> args[0]
REF_257(bytes) (->dynargs) := REF_258(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_259(bytes) -> dynargs[1]
REF_260(bytes) -> args[1]
REF_259(bytes) (->dynargs) := REF_260(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_261(bytes) -> dynargs[2]
REF_262(bytes) -> args[2]
REF_261(bytes) (->dynargs) := REF_262(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_263(bytes) -> dynargs[3]
REF_264(bytes) -> args[3]
REF_263(bytes) (->dynargs) := REF_264(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_387(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_387"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_390(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_390(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_265(bytes) -> dynargs[0]
REF_266(bytes) -> args[0]
REF_265(bytes) (->dynargs) := REF_266(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_267(bytes) -> dynargs[1]
REF_268(bytes) -> args[1]
REF_267(bytes) (->dynargs) := REF_268(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_269(bytes) -> dynargs[2]
REF_270(bytes) -> args[2]
REF_269(bytes) (->dynargs) := REF_270(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_271(bytes) -> dynargs[3]
REF_272(bytes) -> args[3]
REF_271(bytes) (->dynargs) := REF_272(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_391(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_391"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_402(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_402(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_291(bytes) -> dynargs[0]
REF_292(bytes) -> args[0]
REF_291(bytes) (->dynargs) := REF_292(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_293(bytes) -> dynargs[1]
REF_294(bytes) -> args[1]
REF_293(bytes) (->dynargs) := REF_294(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_295(bytes) -> dynargs[2]
REF_296(bytes) -> args[2]
REF_295(bytes) (->dynargs) := REF_296(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_297(bytes) -> dynargs[3]
REF_298(bytes) -> args[3]
REF_297(bytes) (->dynargs) := REF_298(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_299(bytes) -> dynargs[4]
REF_300(bytes) -> args[4]
REF_299(bytes) (->dynargs) := REF_300(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_403(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_403"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_406(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_406(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_301(bytes) -> dynargs[0]
REF_302(bytes) -> args[0]
REF_301(bytes) (->dynargs) := REF_302(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_303(bytes) -> dynargs[1]
REF_304(bytes) -> args[1]
REF_303(bytes) (->dynargs) := REF_304(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_305(bytes) -> dynargs[2]
REF_306(bytes) -> args[2]
REF_305(bytes) (->dynargs) := REF_306(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_307(bytes) -> dynargs[3]
REF_308(bytes) -> args[3]
REF_307(bytes) (->dynargs) := REF_308(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_309(bytes) -> dynargs[4]
REF_310(bytes) -> args[4]
REF_309(bytes) (->dynargs) := REF_310(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_407(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_407"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_309(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_309(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_310(uint256) = tx.gasprice * 200000
TMP_311(uint256) = 1000000000000000000 + TMP_310
TMP_312(bool) = price > TMP_311
CONDITION TMP_312"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_313(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_313(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_315(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_315"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_317(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_317(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_318(uint256) = tx.gasprice * gaslimit
TMP_319(uint256) = 1000000000000000000 + TMP_318
TMP_320(bool) = price > TMP_319
CONDITION TMP_320"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_321(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_321(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_323(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_323"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_140(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_141(uint256) = tx.gasprice * 200000
TMP_142(uint256) = 1000000000000000000 + TMP_141
TMP_143(bool) = price > TMP_142
CONDITION TMP_143"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_145(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_145"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_168(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_168(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_169(uint256) = tx.gasprice * 200000
TMP_170(uint256) = 1000000000000000000 + TMP_169
TMP_171(bool) = price > TMP_170
CONDITION TMP_171"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_173(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_173"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_175(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_175(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_176(uint256) = tx.gasprice * gaslimit
TMP_177(uint256) = 1000000000000000000 + TMP_176
TMP_178(bool) = price > TMP_177
CONDITION TMP_178"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_180(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_180"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_147(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_147(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_148(uint256) = tx.gasprice * gaslimit
TMP_149(uint256) = 1000000000000000000 + TMP_148
TMP_150(bool) = price > TMP_149
CONDITION TMP_150"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_152(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_152"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_226(string[])  = new string[](1)
dynargs(string[]) = ['TMP_226(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_71(string) -> dynargs[0]
REF_72(string) -> args[0]
REF_71(string) (->dynargs) := REF_72(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_227(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_227"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_230(string[])  = new string[](1)
dynargs(string[]) = ['TMP_230(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_73(string) -> dynargs[0]
REF_74(string) -> args[0]
REF_73(string) (->dynargs) := REF_74(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_231(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_231"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_242(string[])  = new string[](2)
dynargs(string[]) = ['TMP_242(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_81(string) -> dynargs[0]
REF_82(string) -> args[0]
REF_81(string) (->dynargs) := REF_82(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_83(string) -> dynargs[1]
REF_84(string) -> args[1]
REF_83(string) (->dynargs) := REF_84(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_243(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_243"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_246(string[])  = new string[](2)
dynargs(string[]) = ['TMP_246(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_85(string) -> dynargs[0]
REF_86(string) -> args[0]
REF_85(string) (->dynargs) := REF_86(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_87(string) -> dynargs[1]
REF_88(string) -> args[1]
REF_87(string) (->dynargs) := REF_88(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_247(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_247"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_258(string[])  = new string[](3)
dynargs(string[]) = ['TMP_258(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_99(string) -> dynargs[0]
REF_100(string) -> args[0]
REF_99(string) (->dynargs) := REF_100(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_101(string) -> dynargs[1]
REF_102(string) -> args[1]
REF_101(string) (->dynargs) := REF_102(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_103(string) -> dynargs[2]
REF_104(string) -> args[2]
REF_103(string) (->dynargs) := REF_104(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_259(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_259"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_262(string[])  = new string[](3)
dynargs(string[]) = ['TMP_262(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_105(string) -> dynargs[0]
REF_106(string) -> args[0]
REF_105(string) (->dynargs) := REF_106(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_107(string) -> dynargs[1]
REF_108(string) -> args[1]
REF_107(string) (->dynargs) := REF_108(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_109(string) -> dynargs[2]
REF_110(string) -> args[2]
REF_109(string) (->dynargs) := REF_110(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_263(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_263"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_274(string[])  = new string[](4)
dynargs(string[]) = ['TMP_274(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_125(string) -> dynargs[0]
REF_126(string) -> args[0]
REF_125(string) (->dynargs) := REF_126(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_127(string) -> dynargs[1]
REF_128(string) -> args[1]
REF_127(string) (->dynargs) := REF_128(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_129(string) -> dynargs[2]
REF_130(string) -> args[2]
REF_129(string) (->dynargs) := REF_130(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_131(string) -> dynargs[3]
REF_132(string) -> args[3]
REF_131(string) (->dynargs) := REF_132(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_275(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_275"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_278(string[])  = new string[](4)
dynargs(string[]) = ['TMP_278(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_133(string) -> dynargs[0]
REF_134(string) -> args[0]
REF_133(string) (->dynargs) := REF_134(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_135(string) -> dynargs[1]
REF_136(string) -> args[1]
REF_135(string) (->dynargs) := REF_136(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_137(string) -> dynargs[2]
REF_138(string) -> args[2]
REF_137(string) (->dynargs) := REF_138(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_139(string) -> dynargs[3]
REF_140(string) -> args[3]
REF_139(string) (->dynargs) := REF_140(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_279(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_279"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_290(string[])  = new string[](5)
dynargs(string[]) = ['TMP_290(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_159(string) -> dynargs[0]
REF_160(string) -> args[0]
REF_159(string) (->dynargs) := REF_160(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_161(string) -> dynargs[1]
REF_162(string) -> args[1]
REF_161(string) (->dynargs) := REF_162(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_163(string) -> dynargs[2]
REF_164(string) -> args[2]
REF_163(string) (->dynargs) := REF_164(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_165(string) -> dynargs[3]
REF_166(string) -> args[3]
REF_165(string) (->dynargs) := REF_166(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_167(string) -> dynargs[4]
REF_168(string) -> args[4]
REF_167(string) (->dynargs) := REF_168(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_291(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_291"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_294(string[])  = new string[](5)
dynargs(string[]) = ['TMP_294(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_169(string) -> dynargs[0]
REF_170(string) -> args[0]
REF_169(string) (->dynargs) := REF_170(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_171(string) -> dynargs[1]
REF_172(string) -> args[1]
REF_171(string) (->dynargs) := REF_172(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_173(string) -> dynargs[2]
REF_174(string) -> args[2]
REF_173(string) (->dynargs) := REF_174(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_175(string) -> dynargs[3]
REF_176(string) -> args[3]
REF_175(string) (->dynargs) := REF_176(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_177(string) -> dynargs[4]
REF_178(string) -> args[4]
REF_177(string) (->dynargs) := REF_178(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_295(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_295"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_197(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_197(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_198(uint256) = tx.gasprice * 200000
TMP_199(uint256) = 1000000000000000000 + TMP_198
TMP_200(bool) = price > TMP_199
CONDITION TMP_200"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_201(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_201(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_203(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_203"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_205(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_205(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_206(uint256) = tx.gasprice * gaslimit
TMP_207(uint256) = 1000000000000000000 + TMP_206
TMP_208(bool) = price > TMP_207
CONDITION TMP_208"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_209(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_209(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_211(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_211"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1968.sol-usingOraclize-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_419(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_419"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-usingOraclize-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_425(None) -> _proof[0]
TMP_755(bool) = REF_425 == L
REF_426(None) -> _proof[1]
TMP_756(bool) = REF_426 == P
TMP_757(bool) = TMP_755 && TMP_756
REF_427(None) -> _proof[2]
TMP_758(bool) = REF_427 == 1
TMP_759(bool) = TMP_757 && TMP_758
TMP_760(None) = SOLIDITY_CALL require(bool)(TMP_759)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_761 = CONVERT _result to bytes
TMP_762(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_763(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_761,TMP_762)
proofVerified(bool) := TMP_763(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_764(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1968.sol-usingOraclize-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_650(uint256) = 3 + 65
TMP_651(uint256) = 3 + 65
TMP_652(uint256) = TMP_651 + 1
REF_410(None) -> proof[TMP_652]
TMP_653 = CONVERT REF_410 to uint256
TMP_654(uint256) = TMP_653 + 2
TMP_655(uint256) = TMP_650 + TMP_654
TMP_656(uint256) = TMP_655 + 32
ledgerProofLength(uint256) := TMP_656(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_658 = new bytes(32)
keyhash(bytes) := TMP_658(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_659(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_660(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_661(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_662(bytes32) = SOLIDITY_CALL keccak256()(TMP_661)
TMP_663(bool) = TMP_660 == TMP_662
TMP_664 = UnaryType.BANG TMP_663 
CONDITION TMP_664"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_666(uint256) = 32 + 8
TMP_667(uint256) = TMP_666 + 1
TMP_668(uint256) = TMP_667 + 32
TMP_669(uint256) = ledgerProofLength + TMP_668
TMP_670(uint256) = TMP_669 + 1
REF_411(None) -> proof[TMP_670]
TMP_671 = CONVERT REF_411 to uint256
TMP_672(uint256) = TMP_671 + 2
TMP_673 = new bytes(TMP_672)
sig1(bytes) := TMP_673(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_674(uint256) = 32 + 8
TMP_675(uint256) = TMP_674 + 1
TMP_676(uint256) = TMP_675 + 32
TMP_677(uint256) = ledgerProofLength + TMP_676
REF_412 -> LENGTH sig1
TMP_678(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_677,REF_412,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_679(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_680(uint256) = ledgerProofLength + 32
TMP_681(uint256) = TMP_680 + 8
REF_413(None) -> proof[TMP_681]
TMP_682 = CONVERT REF_413 to uint256
TMP_683(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_679,result,TMP_682)
TMP_684 = UnaryType.BANG TMP_683 
CONDITION TMP_684"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_686(uint256) = 8 + 1
TMP_687(uint256) = TMP_686 + 32
TMP_688 = new bytes(TMP_687)
commitmentSlice1(bytes) := TMP_688(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_689(uint256) = ledgerProofLength + 32
TMP_690(uint256) = 8 + 1
TMP_691(uint256) = TMP_690 + 32
TMP_692(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_689,TMP_691,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_694 = new bytes(64)
sessionPubkey(bytes) := TMP_694(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_695(uint256) = ledgerProofLength + 32
TMP_696(uint256) = 8 + 1
TMP_697(uint256) = TMP_696 + 32
TMP_698(uint256) = TMP_695 + TMP_697
REF_414 -> LENGTH sig1
TMP_699(uint256) = TMP_698 + REF_414
TMP_700(uint256) = TMP_699 + 65
sig2offset(uint256) := TMP_700(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_701(uint256) = sig2offset - 64
TMP_702(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_701,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_703(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_703(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_415(bytes32) -> oraclize_randomDS_args[queryId]
TMP_704(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_705(bool) = REF_415 == TMP_704
CONDITION TMP_705"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_416(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_416 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_707(uint256) = 32 + 8
TMP_708(uint256) = TMP_707 + 1
TMP_709(uint256) = TMP_708 + 32
TMP_710 = new bytes(TMP_709)
tosign1(bytes) := TMP_710(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_711(uint256) = 32 + 8
TMP_712(uint256) = TMP_711 + 1
TMP_713(uint256) = TMP_712 + 32
TMP_714(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_713,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_715(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_716(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_715,sig1,sessionPubkey)
TMP_717 = UnaryType.BANG TMP_716 
CONDITION TMP_717"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_417(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_718(bool) = REF_417 == False
CONDITION TMP_718"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_418(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_719(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_418(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_719(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_419(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_419"];
}
// Function: 1968.sol-usingOraclize-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_404(None) -> _proof[0]
TMP_636(bool) = REF_404 != L
REF_405(None) -> _proof[1]
TMP_637(bool) = REF_405 != P
TMP_638(bool) = TMP_636 || TMP_637
REF_406(None) -> _proof[2]
TMP_639(bool) = REF_406 != 1
TMP_640(bool) = TMP_638 || TMP_639
CONDITION TMP_640"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_641 = CONVERT _result to bytes
TMP_642(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_643(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_641,TMP_642)
proofVerified(bool) := TMP_643(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_644(bool) = proofVerified == False
CONDITION TMP_644"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 1968.sol-usingOraclize-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_601(uint256) = sig2offset + 1
REF_398(None) -> proof[TMP_601]
TMP_602 = CONVERT REF_398 to uint256
TMP_603(uint256) = TMP_602 + 2
TMP_604 = new bytes(TMP_603)
sig2(bytes) := TMP_604(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_399 -> LENGTH sig2
TMP_605(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_399,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_607 = new bytes(64)
appkey1_pubkey(bytes) := TMP_607(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_608(uint256) = 3 + 1
TMP_609(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_608,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_611(uint256) = 1 + 65
TMP_612(uint256) = TMP_611 + 32
TMP_613 = new bytes(TMP_612)
tosign2(bytes) := TMP_613(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_400(bytes1) -> tosign2[0]
TMP_614 = CONVERT 1 to bytes1
REF_400(bytes1) (->tosign2) := TMP_614(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_615(uint256) = sig2offset - 65
TMP_616(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_615,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_617(uint256) = 1 + 65
TMP_618(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_617)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_619(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_620(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_619,sig2,appkey1_pubkey)
sigok(bool) := TMP_620(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_621(bool) = sigok == False
CONDITION TMP_621"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_623(uint256) = 1 + 65
TMP_624 = new bytes(TMP_623)
tosign3(bytes) := TMP_624(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_401(uint256) -> tosign3[0]
REF_401(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_625(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_627(uint256) = 3 + 65
TMP_628(uint256) = TMP_627 + 1
REF_402(None) -> proof[TMP_628]
TMP_629 = CONVERT REF_402 to uint256
TMP_630(uint256) = TMP_629 + 2
TMP_631 = new bytes(TMP_630)
sig3(bytes) := TMP_631(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_632(uint256) = 3 + 65
REF_403 -> LENGTH sig3
TMP_633(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_632,REF_403,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_634(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_635(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_634,sig3,LEDGERKEY)
sigok(bool) := TMP_635(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 1968.sol-usingOraclize-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_395(bytes32) -> oraclize_randomDS_args[queryId]
REF_395(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 1968.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_417"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-usingOraclize-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_101(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_102(bool) = TMP_101 > 0
CONDITION TMP_102"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_103 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_103(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_105(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_106(bool) = TMP_105 > 0
CONDITION TMP_106"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_107 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_107(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_109(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_110(bool) = TMP_109 > 0
CONDITION TMP_110"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_111 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_111(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_113(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_114(bool) = TMP_113 > 0
CONDITION TMP_114"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_115 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_115(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_117(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_118(bool) = TMP_117 > 0
CONDITION TMP_118"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_119 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_119(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_120(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_121(bool) = TMP_120 > 0
CONDITION TMP_121"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_122 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_122(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_123(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_124(bool) = TMP_123 > 0
CONDITION TMP_124"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_125 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_125(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1968.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_100(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_100"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 1968.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 1968.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_415"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 1968.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_421 = CONVERT _a to bytes
tmp(bytes) := TMP_421(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_422(uint256) = 2 * 20
TMP_423(uint256) = 2 + TMP_422
TMP_424(bool) = i < TMP_423
CONDITION TMP_424"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_325(None) -> tmp[i]
TMP_425 = CONVERT REF_325 to uint160
b1(uint160) := TMP_425(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_426(uint256) = i + 1
REF_326(None) -> tmp[TMP_426]
TMP_427 = CONVERT REF_326 to uint160
b2(uint160) := TMP_427(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_428(bool) = b1 >= 97
TMP_429(bool) = b1 <= 102
TMP_430(bool) = TMP_428 && TMP_429
CONDITION TMP_430"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_431(bool) = b1 >= 65
TMP_432(bool) = b1 <= 70
TMP_433(bool) = TMP_431 && TMP_432
CONDITION TMP_433"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_434(bool) = b1 >= 48
TMP_435(bool) = b1 <= 57
TMP_436(bool) = TMP_434 && TMP_435
CONDITION TMP_436"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_437(bool) = b2 >= 97
TMP_438(bool) = b2 <= 102
TMP_439(bool) = TMP_437 && TMP_438
CONDITION TMP_439"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_440(bool) = b2 >= 65
TMP_441(bool) = b2 <= 70
TMP_442(bool) = TMP_440 && TMP_441
CONDITION TMP_442"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_443(bool) = b2 >= 48
TMP_444(bool) = b2 <= 57
TMP_445(bool) = TMP_443 && TMP_444
CONDITION TMP_445"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_446(uint160) = b1 * 16
TMP_447(uint160) = TMP_446 + b2
iaddr(uint160) = iaddr + TMP_447"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_448 = CONVERT iaddr to address
RETURN TMP_448"];
}
// Function: 1968.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_517(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_517"];
}
// Function: 1968.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_518 = CONVERT _a to bytes
bresult(bytes) := TMP_518(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_371 -> LENGTH bresult
TMP_519(bool) = i < REF_371
CONDITION TMP_519"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_372(None) -> bresult[i]
TMP_520(bool) = REF_372 >= 48
REF_373(None) -> bresult[i]
TMP_521(bool) = REF_373 <= 57
TMP_522(bool) = TMP_520 && TMP_521
CONDITION TMP_522"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_523(bool) = _b == 0
CONDITION TMP_523"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_524(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_374(None) -> bresult[i]
TMP_525 = CONVERT REF_374 to uint256
TMP_526(uint256) = TMP_525 - 48
mint(uint256) = mint + TMP_526"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_375(None) -> bresult[i]
TMP_527(bool) = REF_375 == 46
CONDITION TMP_527"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_528(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_529(bool) = _b > 0
CONDITION TMP_529"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_530(uint256) = 10 ** _b
mint(uint256) = mint * TMP_530"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 1968.sol-usingOraclize-safeMemoryCleaner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 1968.sol-usingOraclize-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 1968.sol-usingOraclize-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_733(uint256) = 60 * 60
TMP_734(uint256) = TMP_733 * 24
day(uint256) := TMP_734(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_735(uint256) = 60 * 60
TMP_736(uint256) = TMP_735 * 24
TMP_737(uint256) = TMP_736 * 7
week(uint256) := TMP_737(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_738(uint256) = 60 * 60
TMP_739(uint256) = TMP_738 * 24
TMP_740(uint256) = TMP_739 * 30
month(uint256) := TMP_740(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Android = 0x40

IRs:
proofType_Android(bytes1) := 64(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 1968.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_449 = CONVERT _a to bytes
a(bytes) := TMP_449(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_450 = CONVERT _b to bytes
b(bytes) := TMP_450(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_327 -> LENGTH a
minLength(uint256) := REF_327(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_328 -> LENGTH b
TMP_451(bool) = REF_328 < minLength
CONDITION TMP_451"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_329 -> LENGTH b
minLength(uint256) := REF_329(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_452(bool) = i < minLength
CONDITION TMP_452"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_330(None) -> a[i]
REF_331(None) -> b[i]
TMP_453(bool) = REF_330 < REF_331
CONDITION TMP_453"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_454(uint256) = 0 - 1
RETURN TMP_454"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_332(None) -> a[i]
REF_333(None) -> b[i]
TMP_455(bool) = REF_332 > REF_333
CONDITION TMP_455"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_456(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_334 -> LENGTH a
REF_335 -> LENGTH b
TMP_457(bool) = REF_334 < REF_335
CONDITION TMP_457"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_458(uint256) = 0 - 1
RETURN TMP_458"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_336 -> LENGTH a
REF_337 -> LENGTH b
TMP_459(bool) = REF_336 > REF_337
CONDITION TMP_459"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 1968.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_516(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_516"];
}
// Function: 1968.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_515(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_515"];
}
// Function: 1968.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_514(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_514"];
}
// Function: 1968.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_486 = CONVERT _a to bytes
_ba(bytes) := TMP_486(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_487 = CONVERT _b to bytes
_bb(bytes) := TMP_487(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_488 = CONVERT _c to bytes
_bc(bytes) := TMP_488(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_489 = CONVERT _d to bytes
_bd(bytes) := TMP_489(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_490 = CONVERT _e to bytes
_be(bytes) := TMP_490(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_351 -> LENGTH _ba
REF_352 -> LENGTH _bb
TMP_492(uint256) = REF_351 + REF_352
REF_353 -> LENGTH _bc
TMP_493(uint256) = TMP_492 + REF_353
REF_354 -> LENGTH _bd
TMP_494(uint256) = TMP_493 + REF_354
REF_355 -> LENGTH _be
TMP_495(uint256) = TMP_494 + REF_355
TMP_496 = new string(TMP_495)
abcde(string) := TMP_496(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_497 = CONVERT abcde to bytes
babcde(bytes) := TMP_497(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_356 -> LENGTH _ba
TMP_498(bool) = i < REF_356
CONDITION TMP_498"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_499(uint256) := k(uint256)
k(uint256) = k + 1
REF_357(None) -> babcde[TMP_499]
REF_358(None) -> _ba[i]
REF_357(None) (->babcde) := REF_358(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_500(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_359 -> LENGTH _bb
TMP_501(bool) = i < REF_359
CONDITION TMP_501"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_502(uint256) := k(uint256)
k(uint256) = k + 1
REF_360(None) -> babcde[TMP_502]
REF_361(None) -> _bb[i]
REF_360(None) (->babcde) := REF_361(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_503(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_362 -> LENGTH _bc
TMP_504(bool) = i < REF_362
CONDITION TMP_504"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_505(uint256) := k(uint256)
k(uint256) = k + 1
REF_363(None) -> babcde[TMP_505]
REF_364(None) -> _bc[i]
REF_363(None) (->babcde) := REF_364(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_506(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_365 -> LENGTH _bd
TMP_507(bool) = i < REF_365
CONDITION TMP_507"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_508(uint256) := k(uint256)
k(uint256) = k + 1
REF_366(None) -> babcde[TMP_508]
REF_367(None) -> _bd[i]
REF_366(None) (->babcde) := REF_367(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_509(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_368 -> LENGTH _be
TMP_510(bool) = i < REF_368
CONDITION TMP_510"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_511(uint256) := k(uint256)
k(uint256) = k + 1
REF_369(None) -> babcde[TMP_511]
REF_370(None) -> _be[i]
REF_369(None) (->babcde) := REF_370(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_512(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_513 = CONVERT babcde to string
RETURN TMP_513"];
}
// Function: 1968.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeMemoryCleaner()

IRs:
INTERNAL_CALL, usingOraclize.safeMemoryCleaner()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < arr.length

IRs:
REF_379 -> LENGTH arr
TMP_546(bool) = i < REF_379
CONDITION TMP_546"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buf.encodeString(arr[i])

IRs:
REF_381(string) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeString(Buffer.buffer,string), arguments:['buf', 'REF_381'] "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_548(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
buf.buf

IRs:
REF_383(bytes) -> buf.buf
RETURN REF_383"];
}
// Function: 1968.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_531(bool) = i == 0
CONDITION TMP_531"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_532(bool) = j != 0
CONDITION TMP_532"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_533(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_535 = new bytes(len)
bstr(bytes) := TMP_535(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_536(uint256) = len - 1
k(uint256) := TMP_536(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_537(bool) = i != 0
CONDITION TMP_537"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_538(uint256) := k(uint256)
k(uint256) = k - 1
REF_376(bytes1) -> bstr[TMP_538]
TMP_539(uint256) = i % 10
TMP_540(uint256) = 48 + TMP_539
TMP_541 = CONVERT TMP_540 to bytes1
REF_376(bytes1) (->bstr) := TMP_541(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_542 = CONVERT bstr to string
RETURN TMP_542"];
}
// Function: 1968.sol-usingOraclize-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_581 = new bytes(32)
sigr_(bytes) := TMP_581(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_396(None) -> dersig[3]
TMP_582 = CONVERT REF_396 to uint256
TMP_583(uint256) = TMP_582 - 32
TMP_584(uint256) = 4 + TMP_583
offset(uint256) := TMP_584(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_585(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_585(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_587 = new bytes(32)
sigs_(bytes) := TMP_587(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_588(uint256) = 32 + 2
offset(uint256) = offset + TMP_588"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_589(uint256) = offset - 1
REF_397(None) -> dersig[TMP_589]
TMP_590 = CONVERT REF_397 to uint256
TMP_591(uint256) = TMP_590 - 32
TMP_592(uint256) = offset + TMP_591
TMP_593(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_592,32,sigs_,0)
sigs_(bytes) := TMP_593(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_0(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_0 index: 0 
signer(address)= UNPACK TUPLE_0 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_594(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_595 = CONVERT TMP_594 to address
TMP_596(bool) = TMP_595 == signer
CONDITION TMP_596"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_1(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_1 index: 0 
signer(address)= UNPACK TUPLE_1 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_597(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_598 = CONVERT TMP_597 to address
TMP_599(bool) = TMP_598 == signer
RETURN TMP_599"];
}
}
