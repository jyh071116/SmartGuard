digraph G {
// Function: 2003.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_104(uint256) = a + b
c(uint256) := TMP_104(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_105(bool) = c >= a
TMP_106(None) = SOLIDITY_CALL assert(bool)(TMP_105)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2003.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_100(uint256) = a / b
c(uint256) := TMP_100(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2003.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_95(bool) = a == 0
CONDITION TMP_95"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_96(uint256) = a * b
c(uint256) := TMP_96(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_97(uint256) = c / a
TMP_98(bool) = TMP_97 == b
TMP_99(None) = SOLIDITY_CALL assert(bool)(TMP_98)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2003.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_101(bool) = b <= a
TMP_102(None) = SOLIDITY_CALL assert(bool)(TMP_101)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_103(uint256) = a - b
RETURN TMP_103"];
}
// Function: 2003.sol-ZTHInterface-approve(address,uint256)
digraph{
}
// Function: 2003.sol-ZTHInterface-transfer(address,uint256)
digraph{
}
// Function: 2003.sol-ZTHReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 2003.sol-Zlots-_finishSpin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spin = playerSpins[target]

IRs:
REF_24(Zlots.playerSpin) -> playerSpins[target]
spin(Zlots.playerSpin) := REF_24(Zlots.playerSpin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(spin.tokenValue > 0)

IRs:
REF_25(uint200) -> spin.tokenValue
TMP_32(bool) = REF_25 > 0
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(spin.blockn != block.number)

IRs:
REF_26(uint48) -> spin.blockn
TMP_34(bool) = REF_26 != block.number
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
profit = 0

IRs:
profit(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
block.number - spin.blockn > 255

IRs:
REF_27(uint48) -> spin.blockn
TMP_36(uint256) = block.number - REF_27
TMP_37(bool) = TMP_36 > 255
CONDITION TMP_37"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
result = 9999

IRs:
result(uint256) := 9999(uint256)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
result = random(10000,spin.blockn,target)

IRs:
REF_28(uint48) -> spin.blockn
TMP_38(uint256) = INTERNAL_CALL, Zlots.random(uint256,uint256,address)(10000,REF_28,target)
result(uint256) := TMP_38(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
result > 4489

IRs:
TMP_39(bool) = result > 4489
CONDITION TMP_39"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Loss(target)

IRs:
Emit Loss(target)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
LogResult(target,result,profit,spin.tokenValue,false)

IRs:
REF_29(uint200) -> spin.tokenValue
Emit LogResult(target,result,profit,REF_29,False)"];
12->34;
13[label="Node Type: IF 13

EXPRESSION:
result < 29

IRs:
TMP_42(bool) = result < 29
CONDITION TMP_42"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,25)

IRs:
REF_31(uint200) -> spin.tokenValue
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_31', '25'] 
profit(uint256) := TMP_43(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Jackpot(target)

IRs:
Emit Jackpot(target)"];
15->30;
16[label="Node Type: IF 16

EXPRESSION:
result < 233

IRs:
TMP_45(bool) = result < 233
CONDITION TMP_45"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
profit = SafeMath.mul(spin.tokenValue,8)

IRs:
REF_33(uint200) -> spin.tokenValue
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_33', '8'] 
profit(uint256) := TMP_46(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
EightXMultiplier(target)

IRs:
Emit EightXMultiplier(target)"];
18->29;
19[label="Node Type: IF 19

EXPRESSION:
result < 641

IRs:
TMP_48(bool) = result < 641
CONDITION TMP_48"];
19->20[label="True"];
19->22[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
profit = spin.tokenValue

IRs:
REF_34(uint200) -> spin.tokenValue
profit(uint256) := REF_34(uint200)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
ReturnBet(target)

IRs:
Emit ReturnBet(target)"];
21->28;
22[label="Node Type: IF 22

EXPRESSION:
result < 1865

IRs:
TMP_50(bool) = result < 1865
CONDITION TMP_50"];
22->23[label="True"];
22->25[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,25),10)

IRs:
REF_37(uint200) -> spin.tokenValue
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_37', '25'] 
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', '10'] 
profit(uint256) := TMP_52(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
TwoAndAHalfXMultiplier(target)

IRs:
Emit TwoAndAHalfXMultiplier(target)"];
24->27;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
profit = SafeMath.div(SafeMath.mul(spin.tokenValue,15),10)

IRs:
REF_40(uint200) -> spin.tokenValue
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_40', '15'] 
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_54', '10'] 
profit(uint256) := TMP_55(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OneAndAHalfXMultiplier(target)

IRs:
Emit OneAndAHalfXMultiplier(target)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
LogResult(target,result,profit,spin.tokenValue,true)

IRs:
REF_41(uint200) -> spin.tokenValue
Emit LogResult(target,result,profit,REF_41,True)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
contractBalance = contractBalance.sub(profit)

IRs:
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['contractBalance', 'profit'] 
contractBalance(uint256) := TMP_58(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
ZTHTKN.transfer(target,profit)

IRs:
TMP_59(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['target', 'profit']  "];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
playerSpins[target] = playerSpin(uint200(0),uint48(0))

IRs:
REF_44(Zlots.playerSpin) -> playerSpins[target]
TMP_60 = CONVERT 0 to uint200
TMP_61 = CONVERT 0 to uint48
TMP_62(Zlots.playerSpin) = new playerSpin(TMP_60,TMP_61)
REF_44(Zlots.playerSpin) (->playerSpins) := TMP_62(Zlots.playerSpin)"];
35->36;
36[label="Node Type: RETURN 36

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 2003.sol-Zlots-_spinTokens(Zlots.TKN)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameActive)

IRs:
TMP_8(None) = SOLIDITY_CALL require(bool)(gameActive)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_zthToken(msg.sender))

IRs:
TMP_9(bool) = INTERNAL_CALL, Zlots._zthToken(address)(msg.sender)
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(validTokenBet[_tkn.value])

IRs:
REF_8(uint256) -> _tkn.value
REF_9(bool) -> validTokenBet[REF_8]
TMP_11(None) = SOLIDITY_CALL require(bool)(REF_9)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(jackpotGuard(_tkn.value))

IRs:
REF_10(uint256) -> _tkn.value
TMP_12(bool) = INTERNAL_CALL, Zlots.jackpotGuard(uint256)(REF_10)
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tkn.value < ((2 ** 200) - 1))

IRs:
REF_11(uint256) -> _tkn.value
TMP_14(uint256) = 2 ** 200
TMP_15(uint256) = TMP_14 - 1
TMP_16(bool) = REF_11 < TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(block.number < ((2 ** 48) - 1))

IRs:
TMP_18(uint256) = 2 ** 48
TMP_19(uint256) = TMP_18 - 1
TMP_20(bool) = block.number < TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_customerAddress = _tkn.sender

IRs:
REF_12(address) -> _tkn.sender
_customerAddress(address) := REF_12(address)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_wagered = _tkn.value

IRs:
REF_13(uint256) -> _tkn.value
_wagered(uint256) := REF_13(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
spin = playerSpins[_tkn.sender]

IRs:
REF_14(address) -> _tkn.sender
REF_15(Zlots.playerSpin) -> playerSpins[REF_14]
spin(Zlots.playerSpin) := REF_15(Zlots.playerSpin)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
contractBalance = contractBalance.add(_wagered)

IRs:
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contractBalance', '_wagered'] 
contractBalance(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(block.number != spin.blockn)

IRs:
REF_17(uint48) -> spin.blockn
TMP_23(bool) = block.number != REF_17
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
spin.blockn != 0

IRs:
REF_18(uint48) -> spin.blockn
TMP_25(bool) = REF_18 != 0
CONDITION TMP_25"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_finishSpin(_tkn.sender)

IRs:
REF_19(address) -> _tkn.sender
TMP_26(uint256) = INTERNAL_CALL, Zlots._finishSpin(address)(REF_19)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
spin.blockn = uint48(block.number)

IRs:
REF_20(uint48) -> spin.blockn
TMP_27 = CONVERT block.number to uint48
REF_20(uint48) (->spin) := TMP_27(uint48)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
spin.tokenValue = uint200(_wagered)

IRs:
REF_21(uint200) -> spin.tokenValue
TMP_28 = CONVERT _wagered to uint200
REF_21(uint200) (->spin) := TMP_28(uint200)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
playerSpins[_tkn.sender] = spin

IRs:
REF_22(address) -> _tkn.sender
REF_23(Zlots.playerSpin) -> playerSpins[REF_22]
REF_23(Zlots.playerSpin) (->playerSpins) := spin(Zlots.playerSpin)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
totalSpins += 1

IRs:
totalSpins(uint256) = totalSpins + 1"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
totalZTHWagered += _wagered

IRs:
totalZTHWagered(uint256) = totalZTHWagered + _wagered"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
TokensWagered(_customerAddress,_wagered)

IRs:
Emit TokensWagered(_customerAddress,_wagered)"];
}
// Function: 2003.sol-Zlots-_zthToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_tokenContract == ZTHTKNADDR

IRs:
TMP_84(bool) = _tokenContract == ZTHTKNADDR
RETURN TMP_84"];
}
// Function: 2003.sol-Zlots-addNewBetAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
validTokenBet[_tokenAmount] = true

IRs:
REF_48(bool) -> validTokenBet[_tokenAmount]
REF_48(bool) (->validTokenBet) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 2003.sol-Zlots-balanceOf()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
contractBalance

IRs:
RETURN contractBalance"];
}
// Function: 2003.sol-Zlots-changeBankroll(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankroll = _newBankroll

IRs:
bankroll(address) := _newBankroll(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 2003.sol-Zlots-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 2003.sol-Zlots-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZTHTKNADDR = ZethrAddress

IRs:
ZTHTKNADDR(address) := ZethrAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ZTHBANKROLL = BankrollAddress

IRs:
ZTHBANKROLL(address) := BankrollAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bankroll = ZTHBANKROLL

IRs:
bankroll(address) := ZTHBANKROLL(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ZTHTKN = ZTHInterface(ZTHTKNADDR)

IRs:
TMP_0 = CONVERT ZTHTKNADDR to ZTHInterface
ZTHTKN(ZTHInterface) := TMP_0(ZTHInterface)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ZTHTKN.approve(ZTHBANKROLL,2 ** 256 - 1)

IRs:
TMP_1(uint256) = 2 ** 256
TMP_2(uint256) = TMP_1 - 1
TMP_3(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['ZTHBANKROLL', 'TMP_2']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ZTHTKN.approve(owner,2 ** 256 - 1)

IRs:
TMP_4(uint256) = 2 ** 256
TMP_5(uint256) = TMP_4 - 1
TMP_6(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:approve, arguments:['owner', 'TMP_5']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
validTokenBet[5e18] = true

IRs:
REF_2(bool) -> validTokenBet[5000000000000000000]
REF_2(bool) (->validTokenBet) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validTokenBet[10e18] = true

IRs:
REF_3(bool) -> validTokenBet[10000000000000000000]
REF_3(bool) (->validTokenBet) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
validTokenBet[25e18] = true

IRs:
REF_4(bool) -> validTokenBet[25000000000000000000]
REF_4(bool) (->validTokenBet) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
validTokenBet[50e18] = true

IRs:
REF_5(bool) -> validTokenBet[50000000000000000000]
REF_5(bool) (->validTokenBet) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
gameActive = true

IRs:
gameActive(bool) := True(bool)"];
}
// Function: 2003.sol-Zlots-divertDividendsToBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankroll.transfer(address(this).balance)

IRs:
TMP_77 = CONVERT this to address
TMP_78(uint256) = SOLIDITY_CALL balance(address)(TMP_77)
Transfer dest:bankroll value:TMP_78"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 2003.sol-Zlots-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2003.sol-Zlots-finishSpin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_finishSpin(msg.sender)

IRs:
TMP_30(uint256) = INTERNAL_CALL, Zlots._finishSpin(address)(msg.sender)
RETURN TMP_30"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Zlots.gameIsActive()()"];
2->1;
}
// Function: 2003.sol-Zlots-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameActive == true)

IRs:
TMP_93(bool) = gameActive == True
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2003.sol-Zlots-jackpotGuard(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
maxProfit = SafeMath.mul(_wager,25)

IRs:
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_wager', '25'] 
maxProfit(uint256) := TMP_63(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
halfContractBalance = SafeMath.div(contractBalance,2)

IRs:
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['contractBalance', '2'] 
halfContractBalance(uint256) := TMP_64(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(maxProfit <= halfContractBalance)

IRs:
TMP_65(bool) = maxProfit <= halfContractBalance
RETURN TMP_65"];
}
// Function: 2003.sol-Zlots-maxRandom(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(abi.encodePacked(blockhash(uint256)(blockn),entropy)))

IRs:
TMP_66(uint256) = SOLIDITY_CALL blockhash(uint256)(blockn)
TMP_67(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_66,entropy)
TMP_68(bytes32) = SOLIDITY_CALL keccak256()(TMP_67)
TMP_69 = CONVERT TMP_68 to uint256
RETURN TMP_69"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 2003.sol-Zlots-onlyBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == bankroll)

IRs:
TMP_87(bool) = msg.sender == bankroll
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2003.sol-Zlots-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_85(bool) = msg.sender == owner
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2003.sol-Zlots-onlyOwnerOrBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == bankroll)

IRs:
TMP_89(bool) = msg.sender == owner
TMP_90(bool) = msg.sender == bankroll
TMP_91(bool) = TMP_89 || TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2003.sol-Zlots-pauseGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameActive = false

IRs:
gameActive(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 2003.sol-Zlots-random(uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxRandom(blockn,entropy) % upper

IRs:
TMP_70(uint256) = INTERNAL_CALL, Zlots.maxRandom(uint256,address)(blockn,entropy)
TMP_71(uint256) = TMP_70 % upper
RETURN TMP_71"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 2003.sol-Zlots-resumeGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameActive = true

IRs:
gameActive(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
2->1;
}
// Function: 2003.sol-Zlots-testingSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ZTHTKN.transfer(owner,contractBalance)

IRs:
TMP_81(bool) = HIGH_LEVEL_CALL, dest:ZTHTKN(ZTHInterface), function:transfer, arguments:['owner', 'contractBalance']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_82(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Zlots.onlyOwner()()"];
3->1;
}
// Function: 2003.sol-Zlots-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_tkn.sender = _from

IRs:
REF_6(address) -> _tkn.sender
REF_6(address) (->_tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_tkn.value = _value

IRs:
REF_7(uint256) -> _tkn.value
REF_7(uint256) (->_tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_spinTokens(_tkn)

IRs:
INTERNAL_CALL, Zlots._spinTokens(Zlots.TKN)(_tkn)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
}
