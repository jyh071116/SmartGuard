digraph G {
// Function: 2110.sol-GuessEth-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2110.sol-GuessEth-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet1 = _wallet1

IRs:
wallet1(address) := _wallet1(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
wallet2 = _wallet2

IRs:
wallet2(address) := _wallet2(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
curOpenBNumber = blockInterval * (block.number.div(blockInterval))

IRs:
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['block.number', 'blockInterval'] 
TMP_30(uint256) = blockInterval * TMP_29
curOpenBNumber(uint256) := TMP_30(uint256)"];
}
// Function: 2110.sol-GuessEth-distribute()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: IF 1

EXPRESSION:
address(this).balance < reservefund

IRs:
TMP_127 = CONVERT this to address
TMP_128(uint256) = SOLIDITY_CALL balance(address)(TMP_127)
TMP_129(bool) = TMP_128 < reservefund
CONDITION TMP_129"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
availableProfits = address(this).balance.sub(reservefund)

IRs:
TMP_130 = CONVERT this to address
TMP_131(uint256) = SOLIDITY_CALL balance(address)(TMP_130)
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_131', 'reservefund'] 
availableProfits(uint256) := TMP_132(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
prft1 = availableProfits.mul(3000000000000000000).div(10000000000000000000)

IRs:
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['availableProfits', '3000000000000000000'] 
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_133', '10000000000000000000'] 
prft1(uint256) := TMP_134(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
prft2 = availableProfits.sub(prft1)

IRs:
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['availableProfits', 'prft1'] 
prft2(uint256) := TMP_135(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_val = 0

IRs:
_val(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->16;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
_i < SponsorAddresses.length

IRs:
REF_117 -> LENGTH SponsorAddresses
TMP_136(bool) = _i < REF_117
CONDITION TMP_136"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_val = (prft1 * Sponsors[SponsorAddresses[_i]]) / (balanceOfSPS)

IRs:
REF_118(address) -> SponsorAddresses[_i]
REF_119(uint256) -> Sponsors[REF_118]
TMP_137(uint256) = prft1 * REF_119
TMP_138(uint256) = TMP_137 / balanceOfSPS
_val(uint256) := TMP_138(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
SponsorAddresses[_i].transfer(_val)

IRs:
REF_120(address) -> SponsorAddresses[_i]
Transfer dest:REF_120 value:_val"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_i ++

IRs:
TMP_140(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
15->12;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
w1p = prft2.mul(3000000000000000000).div(10000000000000000000)

IRs:
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['prft2', '3000000000000000000'] 
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_141', '10000000000000000000'] 
w1p(uint256) := TMP_142(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
wallet1.transfer(w1p)

IRs:
Transfer dest:wallet1 value:w1p"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
wallet2.transfer(prft2.sub(w1p))

IRs:
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['prft2', 'w1p'] 
Transfer dest:wallet2 value:TMP_144"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
19->1;
}
// Function: 2110.sol-GuessEth-draw(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.number >= curOpenBNumber + blockInterval)

IRs:
TMP_90(uint256) = curOpenBNumber + blockInterval
TMP_91(bool) = block.number >= TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
curOpenBNumber = _blockNumber

IRs:
curOpenBNumber(uint256) := _blockNumber(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
result = _blockTimestamp % numberRange

IRs:
TMP_93(uint256) = _blockTimestamp % numberRange
result(uint256) := TMP_93(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
winResult[_blockNumber] = result

IRs:
REF_59(uint256) -> winResult[_blockNumber]
REF_59(uint256) (->winResult) := result(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->18;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
_i < bets[_blockNumber].length

IRs:
REF_60(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_61 -> LENGTH REF_60
TMP_94(bool) = _i < REF_61
CONDITION TMP_94"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
bets[_blockNumber][_i].number == result

IRs:
REF_62(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_63(GuessEth.bnumber) -> REF_62[_i]
REF_64(uint256) -> REF_63.number
TMP_95(bool) = REF_64 == result
CONDITION TMP_95"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
bets[_blockNumber][_i].result = 1

IRs:
REF_65(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_66(GuessEth.bnumber) -> REF_65[_i]
REF_67(int8) -> REF_66.result
REF_67(int8) (->bets) := 1(int8)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
bets[_blockNumber][_i].prize = bets[_blockNumber][_i].value * odds

IRs:
REF_68(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_69(GuessEth.bnumber) -> REF_68[_i]
REF_70(uint256) -> REF_69.prize
REF_71(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_72(GuessEth.bnumber) -> REF_71[_i]
REF_73(uint256) -> REF_72.value
TMP_96(uint256) = REF_73 * odds
REF_70(uint256) (->bets) := TMP_96(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
winnersEvt(_blockNumber,bets[_blockNumber][_i].addr,bets[_blockNumber][_i].value,bets[_blockNumber][_i].prize)

IRs:
REF_74(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_75(GuessEth.bnumber) -> REF_74[_i]
REF_76(address) -> REF_75.addr
REF_77(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_78(GuessEth.bnumber) -> REF_77[_i]
REF_79(uint256) -> REF_78.value
REF_80(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_81(GuessEth.bnumber) -> REF_80[_i]
REF_82(uint256) -> REF_81.prize
Emit winnersEvt(_blockNumber,REF_76,REF_79,REF_82)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
withdraw(bets[_blockNumber][_i].addr,bets[_blockNumber][_i].prize)

IRs:
REF_83(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_84(GuessEth.bnumber) -> REF_83[_i]
REF_85(address) -> REF_84.addr
REF_86(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_87(GuessEth.bnumber) -> REF_86[_i]
REF_88(uint256) -> REF_87.prize
TMP_98(bool) = INTERNAL_CALL, GuessEth.withdraw(address,uint256)(REF_85,REF_88)"];
13->16;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
bets[_blockNumber][_i].result = 0

IRs:
REF_89(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_90(GuessEth.bnumber) -> REF_89[_i]
REF_91(int8) -> REF_90.result
REF_91(int8) (->bets) := 0(int8)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bets[_blockNumber][_i].prize = 0

IRs:
REF_92(GuessEth.bnumber[]) -> bets[_blockNumber]
REF_93(GuessEth.bnumber) -> REF_92[_i]
REF_94(uint256) -> REF_93.prize
REF_94(uint256) (->bets) := 0(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_i ++

IRs:
TMP_99(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
17->8;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
drawEvt(_blockNumber,curOpenBNumber)

IRs:
Emit drawEvt(_blockNumber,curOpenBNumber)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
result

IRs:
RETURN result"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
20->1;
}
// Function: 2110.sol-GuessEth-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GuessEth.isHuman()()"];
}
// Function: 2110.sol-GuessEth-getAllSponsors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_c = 0

IRs:
_c(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
_i < SponsorAddresses.length

IRs:
REF_128 -> LENGTH SponsorAddresses
TMP_147(bool) = _i < REF_128
CONDITION TMP_147"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_c += 1

IRs:
_c(uint256) = _c + 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_i ++

IRs:
TMP_148(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
8->6;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
addrs = new address[](_c)

IRs:
TMP_150(address[])  = new address[](_c)
addrs(address[]) = ['TMP_150(address[])']"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
amounts = new uint256[](_c)

IRs:
TMP_152(uint256[])  = new uint256[](_c)
amounts(uint256[]) = ['TMP_152(uint256[])']"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->18;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
_i < SponsorAddresses.length

IRs:
REF_129 -> LENGTH SponsorAddresses
TMP_153(bool) = _i < REF_129
CONDITION TMP_153"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
addrs[_i] = SponsorAddresses[_i]

IRs:
REF_130(address) -> addrs[_i]
REF_131(address) -> SponsorAddresses[_i]
REF_130(address) (->addrs) := REF_131(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
amounts[_i] = Sponsors[SponsorAddresses[_i]]

IRs:
REF_132(uint256) -> amounts[_i]
REF_133(address) -> SponsorAddresses[_i]
REF_134(uint256) -> Sponsors[REF_133]
REF_132(uint256) (->amounts) := REF_134(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_i ++

IRs:
TMP_154(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
17->14;
18[label="Node Type: RETURN 18

EXPRESSION:
(addrs,amounts,balanceOfSPS)

IRs:
RETURN addrs,amounts,balanceOfSPS"];
}
// Function: 2110.sol-GuessEth-getPlayerGuessNumbers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_c = 0

IRs:
_c(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_j = 0

IRs:
_j(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
limitRows = 100

IRs:
limitRows(uint256) := 100(uint256)"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
_i < playerBetBNumber[msg.sender].length

IRs:
REF_24(uint256[]) -> playerBetBNumber[msg.sender]
REF_25 -> LENGTH REF_24
TMP_63(bool) = _i < REF_25
CONDITION TMP_63"];
7->8[label="True"];
7->18[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_bnumber = playerBetBNumber[msg.sender][_i]

IRs:
REF_26(uint256[]) -> playerBetBNumber[msg.sender]
REF_27(uint256) -> REF_26[_i]
_bnumber(uint256) := REF_27(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_j = 0

IRs:
_j(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
_j < bets[_bnumber].length && _c < limitRows

IRs:
REF_28(GuessEth.bnumber[]) -> bets[_bnumber]
REF_29 -> LENGTH REF_28
TMP_64(bool) = _j < REF_29
TMP_65(bool) = _c < limitRows
TMP_66(bool) = TMP_64 && TMP_65
CONDITION TMP_66"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
msg.sender == bets[_bnumber][_j].addr

IRs:
REF_30(GuessEth.bnumber[]) -> bets[_bnumber]
REF_31(GuessEth.bnumber) -> REF_30[_j]
REF_32(address) -> REF_31.addr
TMP_67(bool) = msg.sender == REF_32
CONDITION TMP_67"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_c ++

IRs:
TMP_68(uint256) := _c(uint256)
_c(uint256) = _c + 1"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_j ++

IRs:
TMP_69(uint256) := _j(uint256)
_j(uint256) = _j + 1"];
16->12;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_i ++

IRs:
TMP_70(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
17->7;
18[label="Node Type: END_LOOP 18
"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
_blockNumbers = new uint256[](_c)

IRs:
TMP_72(uint256[])  = new uint256[](_c)
_blockNumbers(uint256[]) = ['TMP_72(uint256[])']"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
_numbers = new uint256[](_c)

IRs:
TMP_74(uint256[])  = new uint256[](_c)
_numbers(uint256[]) = ['TMP_74(uint256[])']"];
20->21;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
_values = new uint256[](_c)

IRs:
TMP_76(uint256[])  = new uint256[](_c)
_values(uint256[]) = ['TMP_76(uint256[])']"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
_result = new int8[](_c)

IRs:
TMP_78(int8[])  = new int8[](_c)
_result(int8[]) = ['TMP_78(int8[])']"];
22->23;
23[label="Node Type: NEW VARIABLE 23

EXPRESSION:
_prize = new uint256[](_c)

IRs:
TMP_80(uint256[])  = new uint256[](_c)
_prize(uint256[]) = ['TMP_80(uint256[])']"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
_c <= 0

IRs:
TMP_81(bool) = _c <= 0
CONDITION TMP_81"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
(_blockNumbers,_numbers,_values,_result,_prize)

IRs:
RETURN _blockNumbers,_numbers,_values,_result,_prize"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: NEW VARIABLE 27

EXPRESSION:
_count = 0

IRs:
_count(uint256) := 0(uint256)"];
27->30;
28[label="Node Type: BEGIN_LOOP 28
"];
28->31;
29[label="Node Type: END_LOOP 29
"];
29->47;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
30->28;
31[label="Node Type: IF_LOOP 31

EXPRESSION:
_i < playerBetBNumber[msg.sender].length

IRs:
REF_33(uint256[]) -> playerBetBNumber[msg.sender]
REF_34 -> LENGTH REF_33
TMP_82(bool) = _i < REF_34
CONDITION TMP_82"];
31->32[label="True"];
31->29[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_bnumber = playerBetBNumber[msg.sender][_i]

IRs:
REF_35(uint256[]) -> playerBetBNumber[msg.sender]
REF_36(uint256) -> REF_35[_i]
_bnumber(uint256) := REF_36(uint256)"];
32->35;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->46;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_j = 0

IRs:
_j(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
_j < bets[_bnumber].length && _count < limitRows

IRs:
REF_37(GuessEth.bnumber[]) -> bets[_bnumber]
REF_38 -> LENGTH REF_37
TMP_83(bool) = _j < REF_38
TMP_84(bool) = _count < limitRows
TMP_85(bool) = TMP_83 && TMP_84
CONDITION TMP_85"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: IF 37

EXPRESSION:
bets[_bnumber][_j].addr == msg.sender

IRs:
REF_39(GuessEth.bnumber[]) -> bets[_bnumber]
REF_40(GuessEth.bnumber) -> REF_39[_j]
REF_41(address) -> REF_40.addr
TMP_86(bool) = REF_41 == msg.sender
CONDITION TMP_86"];
37->38[label="True"];
37->44[label="False"];
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_blockNumbers[_count] = _bnumber

IRs:
REF_42(uint256) -> _blockNumbers[_count]
REF_42(uint256) (->_blockNumbers) := _bnumber(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_numbers[_count] = bets[_bnumber][_j].number

IRs:
REF_43(uint256) -> _numbers[_count]
REF_44(GuessEth.bnumber[]) -> bets[_bnumber]
REF_45(GuessEth.bnumber) -> REF_44[_j]
REF_46(uint256) -> REF_45.number
REF_43(uint256) (->_numbers) := REF_46(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_values[_count] = bets[_bnumber][_j].value

IRs:
REF_47(uint256) -> _values[_count]
REF_48(GuessEth.bnumber[]) -> bets[_bnumber]
REF_49(GuessEth.bnumber) -> REF_48[_j]
REF_50(uint256) -> REF_49.value
REF_47(uint256) (->_values) := REF_50(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_result[_count] = bets[_bnumber][_j].result

IRs:
REF_51(int8) -> _result[_count]
REF_52(GuessEth.bnumber[]) -> bets[_bnumber]
REF_53(GuessEth.bnumber) -> REF_52[_j]
REF_54(int8) -> REF_53.result
REF_51(int8) (->_result) := REF_54(int8)"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_prize[_count] = bets[_bnumber][_j].prize

IRs:
REF_55(uint256) -> _prize[_count]
REF_56(GuessEth.bnumber[]) -> bets[_bnumber]
REF_57(GuessEth.bnumber) -> REF_56[_j]
REF_58(uint256) -> REF_57.prize
REF_55(uint256) (->_prize) := REF_58(uint256)"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_count ++

IRs:
TMP_87(uint256) := _count(uint256)
_count(uint256) = _count + 1"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_j ++

IRs:
TMP_88(uint256) := _j(uint256)
_j(uint256) = _j + 1"];
45->36;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_i ++

IRs:
TMP_89(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
46->31;
47[label="Node Type: RETURN 47

EXPRESSION:
(_blockNumbers,_numbers,_values,_result,_prize)

IRs:
RETURN _blockNumbers,_numbers,_values,_result,_prize"];
}
// Function: 2110.sol-GuessEth-getTargetBNumber()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
n = blockInterval * (predictBlockInterval + block.number / blockInterval)

IRs:
TMP_39(uint256) = block.number / blockInterval
TMP_40(uint256) = predictBlockInterval + TMP_39
TMP_41(uint256) = blockInterval * TMP_40
n(uint256) := TMP_41(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
n

IRs:
RETURN n"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GuessEth.isHuman()()"];
4->1;
}
// Function: 2110.sol-GuessEth-getWinResults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
winResult[_blockNumber]

IRs:
REF_101(uint256) -> winResult[_blockNumber]
RETURN REF_101"];
}
// Function: 2110.sol-GuessEth-getWinners(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_count = winners[_blockNumber].length

IRs:
REF_95(GuessEth.winner[]) -> winners[_blockNumber]
REF_96 -> LENGTH REF_95
_count(uint256) := REF_96(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addresses = new address[](_count)

IRs:
TMP_103(address[])  = new address[](_count)
_addresses(address[]) = ['TMP_103(address[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_prize = new uint256[](_count)

IRs:
TMP_105(uint256[])  = new uint256[](_count)
_prize(uint256[]) = ['TMP_105(uint256[])']"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
_i < _count

IRs:
TMP_106(bool) = _i < _count
CONDITION TMP_106"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_prize[_i] = winners[_blockNumber][_i].prize

IRs:
REF_97(uint256) -> _prize[_i]
REF_98(GuessEth.winner[]) -> winners[_blockNumber]
REF_99(GuessEth.winner) -> REF_98[_i]
REF_100(uint256) -> REF_99.prize
REF_97(uint256) (->_prize) := REF_100(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_i ++

IRs:
TMP_107(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
10->8;
11[label="Node Type: RETURN 11

EXPRESSION:
(_addresses,_prize)

IRs:
RETURN _addresses,_prize"];
}
// Function: 2110.sol-GuessEth-guess(uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= _numbers.length * 50000000000000000)

IRs:
REF_5 -> LENGTH _numbers
TMP_43(uint256) = REF_5 * 50000000000000000
TMP_44(bool) = msg.value >= TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = blockInterval * (predictBlockInterval + block.number / blockInterval)

IRs:
TMP_46(uint256) = block.number / blockInterval
TMP_47(uint256) = predictBlockInterval + TMP_46
TMP_48(uint256) = blockInterval * TMP_47
n(uint256) := TMP_48(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->14;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
_i < _numbers.length

IRs:
REF_6 -> LENGTH _numbers
TMP_49(bool) = _i < REF_6
CONDITION TMP_49"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
b.addr = msg.sender

IRs:
REF_7(address) -> b.addr
REF_7(address) (->b) := msg.sender(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
b.number = _numbers[_i]

IRs:
REF_8(uint256) -> b.number
REF_9(uint256) -> _numbers[_i]
REF_8(uint256) (->b) := REF_9(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b.value = msg.value / _numbers.length

IRs:
REF_10(uint256) -> b.value
REF_11 -> LENGTH _numbers
TMP_50(uint256) = msg.value / REF_11
REF_10(uint256) (->b) := TMP_50(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b.result = - 1

IRs:
REF_12(int8) -> b.result
TMP_51(uint256) = 0 - 1
REF_12(int8) (->b) := TMP_51(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
bets[n].push(b)

IRs:
REF_13(GuessEth.bnumber[]) -> bets[n]
REF_15 -> LENGTH REF_13
TMP_53(uint256) := REF_15(uint256)
TMP_54(uint256) = TMP_53 + 1
REF_15(uint256) (->bets) := TMP_54(uint256)
REF_16(GuessEth.bnumber) -> REF_13[TMP_53]
REF_16(GuessEth.bnumber) (->bets) := b(GuessEth.bnumber)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_i ++

IRs:
TMP_55(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
13->6;
14[label="Node Type: IF 14

EXPRESSION:
utils.inArray(playerBetBNumber[msg.sender],n) == false

IRs:
REF_18(uint256[]) -> playerBetBNumber[msg.sender]
TMP_56(bool) = LIBRARY_CALL, dest:utils, function:utils.inArray(uint256[],uint256), arguments:['REF_18', 'n'] 
TMP_57(bool) = TMP_56 == False
CONDITION TMP_57"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
playerBetBNumber[msg.sender].push(n)

IRs:
REF_19(uint256[]) -> playerBetBNumber[msg.sender]
REF_21 -> LENGTH REF_19
TMP_59(uint256) := REF_21(uint256)
TMP_60(uint256) = TMP_59 + 1
REF_21(uint256) (->playerBetBNumber) := TMP_60(uint256)
REF_22(uint256) -> REF_19[TMP_59]
REF_22(uint256) (->playerBetBNumber) := n(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
guessEvt(msg.sender,_numbers,msg.value)

IRs:
Emit guessEvt(msg.sender,_numbers,msg.value)"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
_numbers.length

IRs:
REF_23 -> LENGTH _numbers
RETURN REF_23"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GuessEth.isHuman()()"];
19->1;
}
// Function: 2110.sol-GuessEth-invest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= 1000000000000000000,Minima amoun:1 ether)

IRs:
TMP_116(bool) = msg.value >= 1000000000000000000
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,Minima amoun:1 ether)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Sponsors[msg.sender] = Sponsors[msg.sender].add(msg.value)

IRs:
REF_104(uint256) -> Sponsors[msg.sender]
REF_105(uint256) -> Sponsors[msg.sender]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_105', 'msg.value'] 
REF_104(uint256) (->Sponsors) := TMP_118(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOfSPS = balanceOfSPS.add(msg.value)

IRs:
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['balanceOfSPS', 'msg.value'] 
balanceOfSPS(uint256) := TMP_119(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! utils.inArray(SponsorAddresses,msg.sender)

IRs:
TMP_120(bool) = LIBRARY_CALL, dest:utils, function:utils.inArray(address[],address), arguments:['SponsorAddresses', 'msg.sender'] 
TMP_121 = UnaryType.BANG TMP_120 
CONDITION TMP_121"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SponsorAddresses.push(msg.sender)

IRs:
REF_110 -> LENGTH SponsorAddresses
TMP_123(uint256) := REF_110(uint256)
TMP_124(uint256) = TMP_123 + 1
REF_110(uint256) (->SponsorAddresses) := TMP_124(uint256)
REF_111(address) -> SponsorAddresses[TMP_123]
REF_111(address) (->SponsorAddresses) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
sponseEvt(msg.sender,msg.value)

IRs:
Emit sponseEvt(msg.sender,msg.value)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
Sponsors[msg.sender]

IRs:
REF_112(uint256) -> Sponsors[msg.sender]
RETURN REF_112"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GuessEth.isHuman()()"];
9->1;
}
// Function: 2110.sol-GuessEth-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_158(bool) = _codeLength == 0
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2110.sol-GuessEth-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_156(bool) = msg.sender == owner
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2110.sol-GuessEth-pauseGame(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gamePaused = _status

IRs:
gamePaused(bool) := _status(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pauseGameEvt(_status)

IRs:
Emit pauseGameEvt(_status)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2110.sol-GuessEth-setOdds(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
odds = _odds

IRs:
odds(uint256) := _odds(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setOddsEvt(_odds)

IRs:
Emit setOddsEvt(_odds)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GuessEth.isHuman()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2110.sol-GuessEth-setReservefund(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
reservefund = _reservefund * 1000000000000000000

IRs:
TMP_36(uint256) = _reservefund * 1000000000000000000
reservefund(uint256) := TMP_36(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, GuessEth.isHuman()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2110.sol-GuessEth-sharesOfSPS()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(Sponsors[msg.sender],balanceOfSPS)

IRs:
REF_127(uint256) -> Sponsors[msg.sender]
RETURN REF_127,balanceOfSPS"];
}
// Function: 2110.sol-GuessEth-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
predictBlockInterval = 3

IRs:
predictBlockInterval(uint256) := 3(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
odds = 30

IRs:
odds(uint256) := 30(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
blockInterval = 500

IRs:
blockInterval(uint256) := 500(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
curOpenBNumber = 0

IRs:
curOpenBNumber(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
numberRange = 100

IRs:
numberRange(uint256) := 100(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
gamePaused = false

IRs:
gamePaused(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
balanceOfSPS = 0

IRs:
balanceOfSPS(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
reservefund = 30000000000000000000

IRs:
reservefund(uint256) := 30000000000000000000(uint256)"];
}
// Function: 2110.sol-GuessEth-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = newOwner != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2110.sol-GuessEth-withdraw(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(this).balance.sub(amount) > 0)

IRs:
TMP_108 = CONVERT this to address
TMP_109(uint256) = SOLIDITY_CALL balance(address)(TMP_108)
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_109', 'amount'] 
TMP_111(bool) = TMP_110 > 0
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_to.transfer(amount)

IRs:
Transfer dest:_to value:amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
withdrawEvt(_to,amount)

IRs:
Emit withdrawEvt(_to,amount)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 2110.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2110.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_23(bool) = msg.sender == owner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2110.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2110.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2110.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2110.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2110.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 2110.sol-utils-inArray(address[],address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
_i < _arr.length

IRs:
REF_2 -> LENGTH _arr
TMP_16(bool) = _i < REF_2
CONDITION TMP_16"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
_arr[_i] == _val

IRs:
REF_3(address) -> _arr[_i]
TMP_17(bool) = REF_3 == _val
CONDITION TMP_17"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: BREAK 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_i ++

IRs:
TMP_18(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 2110.sol-utils-inArray(uint256[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
_i < _arr.length

IRs:
REF_0 -> LENGTH _arr
TMP_13(bool) = _i < REF_0
CONDITION TMP_13"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
_arr[_i] == _val

IRs:
REF_1(uint256) -> _arr[_i]
TMP_14(bool) = REF_1 == _val
CONDITION TMP_14"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: BREAK 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_i ++

IRs:
TMP_15(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
}
}
