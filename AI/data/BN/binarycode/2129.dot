digraph G {
// Function: 2129.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_419'] 
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_421'] 
TMP_423(uint256) = TMP_422 / 2
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_420', 'TMP_423'] 
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_426(uint256) = TMP_424 / TMP_425
RETURN TMP_426"];
}
// Function: 2129.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_409(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_411(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_410)
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_409', 'TMP_411'] 
RETURN TMP_412"];
}
// Function: 2129.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_413', '312500000000000000000000000'] 
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_414', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_415'] 
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_416', '74999921875000000000000000000000'] 
TMP_418(uint256) = TMP_417 / 156250000
RETURN TMP_418"];
}
// Function: 2129.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_406(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_405)
TMP_407(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_406', 'TMP_407'] 
RETURN TMP_408"];
}
// Function: 2129.sol-F3DexternalSettingsInterface-getFastExtra()
digraph{
}
// Function: 2129.sol-F3DexternalSettingsInterface-getFastGap()
digraph{
}
// Function: 2129.sol-F3DexternalSettingsInterface-getLongExtra()
digraph{
}
// Function: 2129.sol-F3DexternalSettingsInterface-getLongGap()
digraph{
}
// Function: 2129.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == god,only team just can activate)

IRs:
TMP_388(bool) = msg.sender == god
TMP_389(None) = SOLIDITY_CALL require(bool,string)(TMP_388,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_390(bool) = activated_ == False
TMP_391(None) = SOLIDITY_CALL require(bool,string)(TMP_390,fomo3d already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_681(F3Ddatasets.Round) -> round_[1]
REF_682(uint256) -> REF_681.strt
TMP_392(uint256) = now + rndExtra_
TMP_393(uint256) = TMP_392 - rndGap_
REF_682(uint256) (->round_) := TMP_393(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_683(F3Ddatasets.Round) -> round_[1]
REF_684(uint256) -> REF_683.end
TMP_394(uint256) = now + rndInit_
TMP_395(uint256) = TMP_394 + rndExtra_
REF_684(uint256) (->round_) := TMP_395(uint256)"];
}
// Function: 2129.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_322(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_323(bytes32) = SOLIDITY_CALL keccak256()(TMP_322)
TMP_324 = CONVERT TMP_323 to uint256
TMP_325(uint256) = TMP_324 / now
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_321', 'TMP_325'] 
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_326', 'block.gaslimit'] 
TMP_328(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_329(bytes32) = SOLIDITY_CALL keccak256()(TMP_328)
TMP_330 = CONVERT TMP_329 to uint256
TMP_331(uint256) = TMP_330 / now
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_327', 'TMP_331'] 
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_332', 'block.number'] 
TMP_334(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_333)
TMP_335(bytes32) = SOLIDITY_CALL keccak256()(TMP_334)
TMP_336 = CONVERT TMP_335 to uint256
seed(uint256) := TMP_336(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_337(uint256) = seed / 1000
TMP_338(uint256) = TMP_337 * 1000
TMP_339(uint256) = seed - TMP_338
TMP_340(bool) = TMP_339 < airDropTracker_
CONDITION TMP_340"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2129.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_251(F3Ddatasets.Round) -> round_[_rID]
REF_252(uint256) -> REF_251.strt
TMP_128(uint256) = REF_252 + rndGap_
TMP_129(bool) = _now > TMP_128
REF_253(F3Ddatasets.Round) -> round_[_rID]
REF_254(uint256) -> REF_253.end
TMP_130(bool) = _now <= REF_254
REF_255(F3Ddatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.end
TMP_131(bool) = _now > REF_256
REF_257(F3Ddatasets.Round) -> round_[_rID]
REF_258(uint256) -> REF_257.plyr
TMP_132(bool) = REF_258 == 0
TMP_133(bool) = TMP_131 && TMP_132
TMP_134(bool) = TMP_130 || TMP_133
TMP_135(bool) = TMP_129 && TMP_134
CONDITION TMP_135"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.end
TMP_137(bool) = _now > REF_260
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(bool) -> REF_261.ended
TMP_138(bool) = REF_262 == False
TMP_139(bool) = TMP_137 && TMP_138
CONDITION TMP_139"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(bool) -> REF_263.ended
REF_264(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_140(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_140(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_265(uint256) -> _eventData_.compressedData
REF_266(uint256) -> _eventData_.compressedData
TMP_141(uint256) = _now * 1000000000000000000
TMP_142(uint256) = REF_266 + TMP_141
REF_265(uint256) (->_eventData_) := TMP_142(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_267(uint256) -> _eventData_.compressedIDs
REF_268(uint256) -> _eventData_.compressedIDs
TMP_143(uint256) = REF_268 + _pID
REF_267(uint256) (->_eventData_) := TMP_143(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_270(F3Ddatasets.Player) -> plyr_[_pID]
REF_271(bytes32) -> REF_270.name
REF_272(uint256) -> _eventData_.compressedData
REF_273(uint256) -> _eventData_.compressedIDs
REF_274(address) -> _eventData_.winnerAddr
REF_275(bytes32) -> _eventData_.winnerName
REF_276(uint256) -> _eventData_.amountWon
REF_277(uint256) -> _eventData_.newPot
REF_278(uint256) -> _eventData_.P3DAmount
REF_279(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_271,msg.value,REF_272,REF_273,REF_274,REF_275,REF_276,REF_277,REF_278,REF_279)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_280(F3Ddatasets.Player) -> plyr_[_pID]
REF_281(uint256) -> REF_280.gen
REF_282(F3Ddatasets.Player) -> plyr_[_pID]
REF_283(uint256) -> REF_282.gen
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_283', 'msg.value'] 
REF_281(uint256) (->plyr_) := TMP_145(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2129.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_22(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_22(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_29(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_29(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = determineAffID(_pID,pIDxAddr_[_affCode])

IRs:
REF_30(uint256) -> pIDxAddr_[_affCode]
TMP_23(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,REF_30)
_affID(uint256) := TMP_23(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_24(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_24(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
8->1;
}
// Function: 2129.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_15(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_15(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_affCode = determineAffID(_pID,_affCode)

IRs:
TMP_16(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affCode)
_affCode(uint256) := TMP_16(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_17(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_17(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
8->1;
}
// Function: 2129.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_29(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_29(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_31(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_31(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = determineAffID(_pID,pIDxName_[_affCode])

IRs:
REF_32(uint256) -> pIDxName_[_affCode]
TMP_30(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,REF_32)
_affID(uint256) := TMP_30(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_31(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_31(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
8->1;
}
// Function: 2129.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_422(F3Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.strt
TMP_220(uint256) = REF_423 + rndGap_
TMP_221(bool) = _now > TMP_220
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.end
TMP_222(bool) = _now <= REF_425
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.end
TMP_223(bool) = _now > REF_427
REF_428(F3Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.plyr
TMP_224(bool) = REF_429 == 0
TMP_225(bool) = TMP_223 && TMP_224
TMP_226(bool) = TMP_222 || TMP_225
TMP_227(bool) = TMP_221 && TMP_226
CONDITION TMP_227"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_430(F3Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.eth
TMP_228(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_431', '_eth'] 
RETURN TMP_228"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_229(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_229"];
}
// Function: 2129.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_412(F3Ddatasets.Round) -> round_[_rIDlast]
REF_413(uint256) -> REF_412.mask
REF_415(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_416(F3Ddatasets.PlayerRounds) -> REF_415[_rIDlast]
REF_417(uint256) -> REF_416.keys
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_413', 'REF_417'] 
TMP_218(uint256) = TMP_217 / 1000000000000000000
REF_419(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_420(F3Ddatasets.PlayerRounds) -> REF_419[_rIDlast]
REF_421(uint256) -> REF_420.mask
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_218', 'REF_421'] 
RETURN TMP_219"];
}
// Function: 2129.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2129.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_327(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_328(F3Ddatasets.PlayerRounds) -> REF_327[_rID]
REF_329(uint256) -> REF_328.keys
TMP_169(bool) = REF_329 == 0
CONDITION TMP_169"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_170(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_170(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_eth > 1000000000

IRs:
TMP_171(bool) = _eth > 1000000000
CONDITION TMP_171"];
4->5[label="True"];
4->58[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_330(F3Ddatasets.Round) -> round_[_rID]
REF_331(uint256) -> REF_330.eth
TMP_172(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_331', '_eth'] 
_keys(uint256) := TMP_172(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_173(bool) = _keys >= 1000000000000000000
CONDITION TMP_173"];
6->7[label="True"];
6->18[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_eth > 10000000000000000

IRs:
TMP_175(bool) = _eth > 10000000000000000
CONDITION TMP_175"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_333(F3Ddatasets.Round) -> round_[_rID]
REF_334(uint256) -> REF_333.plyr
TMP_176(bool) = REF_334 != _pID
CONDITION TMP_176"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_335(F3Ddatasets.Round) -> round_[_rID]
REF_336(uint256) -> REF_335.plyr
REF_336(uint256) (->round_) := _pID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
updateLastBuyKeysPIDs(_rID,_pID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateLastBuyKeysPIDs(uint256,uint256)(_rID,_pID)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_337(F3Ddatasets.Round) -> round_[_rID]
REF_338(uint256) -> REF_337.team
TMP_178(bool) = REF_338 != _team
CONDITION TMP_178"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_339(F3Ddatasets.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.team
REF_340(uint256) (->round_) := _team(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_341(uint256) -> _eventData_.compressedData
REF_342(uint256) -> _eventData_.compressedData
TMP_179(uint256) = REF_342 + 100
REF_341(uint256) (->_eventData_) := TMP_179(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_180(bool) = _eth >= 100000000000000000
CONDITION TMP_180"];
19->20[label="True"];
19->45[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_181(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
airdrop() == true

IRs:
TMP_182(bool) = INTERNAL_CALL, FoMo3Dlong.airdrop()()
TMP_183(bool) = TMP_182 == True
CONDITION TMP_183"];
21->22[label="True"];
21->44[label="False"];
22[label="Node Type: NEW VARIABLE 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_184(bool) = _eth >= 10000000000000000000
CONDITION TMP_184"];
23->24[label="True"];
23->28[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_186(uint256) = TMP_185 / 100
_prize(uint256) := TMP_186(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_344(F3Ddatasets.Player) -> plyr_[_pID]
REF_345(uint256) -> REF_344.win
REF_346(F3Ddatasets.Player) -> plyr_[_pID]
REF_347(uint256) -> REF_346.win
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_347', '_prize'] 
REF_345(uint256) (->plyr_) := TMP_187(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_188(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_350(uint256) -> _eventData_.compressedData
REF_350(-> _eventData_) = REF_350 + 300000000000000000000000000000000"];
27->40;
28[label="Node Type: IF 28

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_189(bool) = _eth >= 1000000000000000000
TMP_190(bool) = _eth < 10000000000000000000
TMP_191(bool) = TMP_189 && TMP_190
CONDITION TMP_191"];
28->29[label="True"];
28->33[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_193(uint256) = TMP_192 / 100
_prize(uint256) := TMP_193(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_352(F3Ddatasets.Player) -> plyr_[_pID]
REF_353(uint256) -> REF_352.win
REF_354(F3Ddatasets.Player) -> plyr_[_pID]
REF_355(uint256) -> REF_354.win
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_355', '_prize'] 
REF_353(uint256) (->plyr_) := TMP_194(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_195(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_358(uint256) -> _eventData_.compressedData
REF_358(-> _eventData_) = REF_358 + 200000000000000000000000000000000"];
32->39;
33[label="Node Type: IF 33

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_196(bool) = _eth >= 100000000000000000
TMP_197(bool) = _eth < 1000000000000000000
TMP_198(bool) = TMP_196 && TMP_197
CONDITION TMP_198"];
33->34[label="True"];
33->38[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_200(uint256) = TMP_199 / 100
_prize(uint256) := TMP_200(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_360(F3Ddatasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.win
REF_362(F3Ddatasets.Player) -> plyr_[_pID]
REF_363(uint256) -> REF_362.win
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_363', '_prize'] 
REF_361(uint256) (->plyr_) := TMP_201(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_202(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_366(uint256) -> _eventData_.compressedData
REF_366(-> _eventData_) = REF_366 + 300000000000000000000000000000000"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_367(uint256) -> _eventData_.compressedData
REF_367(-> _eventData_) = REF_367 + 10000000000000000000000000000000"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_368(uint256) -> _eventData_.compressedData
TMP_203(uint256) = _prize * 1000000000000000000000000000000000
REF_368(-> _eventData_) = REF_368 + TMP_203"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_369(uint256) -> _eventData_.compressedData
REF_370(uint256) -> _eventData_.compressedData
TMP_204(uint256) = airDropTracker_ * 1000
TMP_205(uint256) = REF_370 + TMP_204
REF_369(uint256) (->_eventData_) := TMP_205(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_371(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_372(F3Ddatasets.PlayerRounds) -> REF_371[_rID]
REF_373(uint256) -> REF_372.keys
REF_375(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_376(F3Ddatasets.PlayerRounds) -> REF_375[_rID]
REF_377(uint256) -> REF_376.keys
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_377'] 
REF_373(uint256) (->plyrRnds_) := TMP_206(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_378(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_379(F3Ddatasets.PlayerRounds) -> REF_378[_rID]
REF_380(uint256) -> REF_379.eth
REF_382(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_383(F3Ddatasets.PlayerRounds) -> REF_382[_rID]
REF_384(uint256) -> REF_383.eth
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_384'] 
REF_380(uint256) (->plyrRnds_) := TMP_207(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_385(F3Ddatasets.Round) -> round_[_rID]
REF_386(uint256) -> REF_385.keys
REF_388(F3Ddatasets.Round) -> round_[_rID]
REF_389(uint256) -> REF_388.keys
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_389'] 
REF_386(uint256) (->round_) := TMP_208(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_390(F3Ddatasets.Round) -> round_[_rID]
REF_391(uint256) -> REF_390.eth
REF_393(F3Ddatasets.Round) -> round_[_rID]
REF_394(uint256) -> REF_393.eth
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_394'] 
REF_391(uint256) (->round_) := TMP_209(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_395(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_396(uint256) -> REF_395[_team]
REF_398(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_399(uint256) -> REF_398[_team]
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_399'] 
REF_396(uint256) (->rndTmEth_) := TMP_210(uint256)"];
51->52;
52[label="Node Type: IF 52

EXPRESSION:
0 == round_[_rID].maxEthPID || plyrRnds_[round_[_rID].maxEthPID][_rID].eth < plyrRnds_[_pID][_rID].eth

IRs:
REF_400(F3Ddatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.maxEthPID
TMP_211(bool) = 0 == REF_401
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.maxEthPID
REF_404(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[REF_403]
REF_405(F3Ddatasets.PlayerRounds) -> REF_404[_rID]
REF_406(uint256) -> REF_405.eth
REF_407(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_408(F3Ddatasets.PlayerRounds) -> REF_407[_rID]
REF_409(uint256) -> REF_408.eth
TMP_212(bool) = REF_406 < REF_409
TMP_213(bool) = TMP_211 || TMP_212
CONDITION TMP_213"];
52->53[label="True"];
52->54[label="False"];
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].maxEthPID = _pID

IRs:
REF_410(F3Ddatasets.Round) -> round_[_rID]
REF_411(uint256) -> REF_410.maxEthPID
REF_411(uint256) (->round_) := _pID(uint256)"];
53->54;
54[label="Node Type: END_IF 54
"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_214(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_214(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_215(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_215(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 2129.sol-FoMo3Dlong-determineAffID(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].laff == 0 && 0 != _inAffID && _pID != _inAffID && plyr_[_inAffID].name != 

IRs:
REF_3(F3Ddatasets.Player) -> plyr_[_pID]
REF_4(uint256) -> REF_3.laff
TMP_5(bool) = REF_4 == 0
TMP_6(bool) = 0 != _inAffID
TMP_7(bool) = TMP_5 && TMP_6
TMP_8(bool) = _pID != _inAffID
TMP_9(bool) = TMP_7 && TMP_8
REF_5(F3Ddatasets.Player) -> plyr_[_inAffID]
REF_6(bytes32) -> REF_5.name
TMP_10(bool) = REF_6 != 
TMP_11(bool) = TMP_9 && TMP_10
CONDITION TMP_11"];
1->2[label="True"];
1->8[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[_pID].laff = _inAffID

IRs:
REF_7(F3Ddatasets.Player) -> plyr_[_pID]
REF_8(uint256) -> REF_7.laff
REF_8(uint256) (->plyr_) := _inAffID(uint256)"];
2->10;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_rID][_inAffID].affNum = plyrRnds_[_rID][_inAffID].affNum.add(1)

IRs:
REF_9(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_rID]
REF_10(F3Ddatasets.PlayerRounds) -> REF_9[_inAffID]
REF_11(uint256) -> REF_10.affNum
REF_12(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_rID]
REF_13(F3Ddatasets.PlayerRounds) -> REF_12[_inAffID]
REF_14(uint256) -> REF_13.affNum
TMP_12(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', '1'] 
REF_11(uint256) (->plyrRnds_) := TMP_12(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
plyrRnds_[_rID][round_[_rID].maxAffPID].affNum < plyrRnds_[_rID][_inAffID].affNum

IRs:
REF_16(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_rID]
REF_17(F3Ddatasets.Round) -> round_[_rID]
REF_18(uint256) -> REF_17.maxAffPID
REF_19(F3Ddatasets.PlayerRounds) -> REF_16[REF_18]
REF_20(uint256) -> REF_19.affNum
REF_21(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_rID]
REF_22(F3Ddatasets.PlayerRounds) -> REF_21[_inAffID]
REF_23(uint256) -> REF_22.affNum
TMP_13(bool) = REF_20 < REF_23
CONDITION TMP_13"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].maxAffPID = _inAffID

IRs:
REF_24(F3Ddatasets.Round) -> round_[_rID]
REF_25(uint256) -> REF_24.maxAffPID
REF_25(uint256) (->round_) := _inAffID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
plyr_[_pID].laff

IRs:
REF_26(F3Ddatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
RETURN REF_27"];
10[label="Node Type: IF 10

EXPRESSION:
(0 == rID_)

IRs:
TMP_14(bool) = 0 == rID_
CONDITION TMP_14"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_rID = 1

IRs:
_rID(uint256) := 1(uint256)"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->4;
}
// Function: 2129.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_469(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_469(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_255(bool) = _pID == 0
CONDITION TMP_255"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_256(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_256(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_257(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_257(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_258(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_258(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_473(uint256) -> pIDxAddr_[msg.sender]
REF_473(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_474(F3Ddatasets.Player) -> plyr_[_pID]
REF_475(address) -> REF_474.addr
REF_475(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_259(bool) = _name != 
CONDITION TMP_259"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_476(uint256) -> pIDxName_[_name]
REF_476(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_477(F3Ddatasets.Player) -> plyr_[_pID]
REF_478(bytes32) -> REF_477.name
REF_478(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_479(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_480(bool) -> REF_479[_name]
REF_480(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_260(bool) = _laff != 0
TMP_261(bool) = _laff != _pID
TMP_262(bool) = TMP_260 && TMP_261
CONDITION TMP_262"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_481(F3Ddatasets.Player) -> plyr_[_pID]
REF_482(uint256) -> REF_481.laff
REF_482(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_483(uint256) -> _eventData_.compressedData
REF_484(uint256) -> _eventData_.compressedData
TMP_263(uint256) = REF_484 + 1
REF_483(uint256) (->_eventData_) := TMP_263(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2129.sol-FoMo3Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 20

IRs:
TMP_341(uint256) = _eth / 20
_com(uint256) := TMP_341(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
address(god).transfer(_com)

IRs:
TMP_342 = CONVERT god to address
Transfer dest:TMP_342 value:_com"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_curAffID = plyr_[_pID].laff

IRs:
REF_592(F3Ddatasets.Player) -> plyr_[_pID]
REF_593(uint256) -> REF_592.laff
_curAffID(uint256) := REF_593(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->16;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_i = 0

IRs:
_i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
_i < affPerLv_.length

IRs:
REF_594 -> LENGTH affPerLv_
TMP_344(bool) = _i < REF_594
CONDITION TMP_344"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_aff = _eth.mul(affPerLv_[_i]) / (100)

IRs:
REF_596(uint256) -> affPerLv_[_i]
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_596'] 
TMP_346(uint256) = TMP_345 / 100
_aff(uint256) := TMP_346(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_curAffID == _pID || plyr_[_curAffID].name == 

IRs:
TMP_347(bool) = _curAffID == _pID
REF_597(F3Ddatasets.Player) -> plyr_[_curAffID]
REF_598(bytes32) -> REF_597.name
TMP_348(bool) = REF_598 == 
TMP_349(bool) = TMP_347 || TMP_348
CONDITION TMP_349"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_curAffID = 1

IRs:
_curAffID(uint256) := 1(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_curAffID].aff = _aff.add(plyr_[_curAffID].aff)

IRs:
REF_599(F3Ddatasets.Player) -> plyr_[_curAffID]
REF_600(uint256) -> REF_599.aff
REF_602(F3Ddatasets.Player) -> plyr_[_curAffID]
REF_603(uint256) -> REF_602.aff
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_603'] 
REF_600(uint256) (->plyr_) := TMP_350(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
F3Devents.onAffiliatePayout(_curAffID,plyr_[_curAffID].addr,plyr_[_curAffID].name,_rID,_pID,_aff,now)

IRs:
REF_605(F3Ddatasets.Player) -> plyr_[_curAffID]
REF_606(address) -> REF_605.addr
REF_607(F3Ddatasets.Player) -> plyr_[_curAffID]
REF_608(bytes32) -> REF_607.name
Emit onAffiliatePayout(_curAffID,REF_606,REF_608,_rID,_pID,_aff,now)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_curAffID = plyr_[_curAffID].laff

IRs:
REF_609(F3Ddatasets.Player) -> plyr_[_curAffID]
REF_610(uint256) -> REF_609.laff
_curAffID(uint256) := REF_610(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_i ++

IRs:
TMP_352(uint256) := _i(uint256)
_i(uint256) = _i + 1"];
15->7;
16[label="Node Type: RETURN 16

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2129.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = _eth.mul(40) / 100

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '40'] 
TMP_354(uint256) = TMP_353 / 100
_gen(uint256) := TMP_354(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = 0

IRs:
_air(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_355(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = (_eth.mul(20)) / 100

IRs:
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '20'] 
TMP_357(uint256) = TMP_356 / 100
_pot(uint256) := TMP_357(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_358(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_358(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_359(bool) = _dust > 0
CONDITION TMP_359"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_360(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_615(F3Ddatasets.Round) -> round_[_rID]
REF_616(uint256) -> REF_615.pot
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_619(F3Ddatasets.Round) -> round_[_rID]
REF_620(uint256) -> REF_619.pot
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_361', 'REF_620'] 
REF_616(uint256) (->round_) := TMP_362(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_621(uint256) -> _eventData_.genAmount
REF_623(uint256) -> _eventData_.genAmount
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_623'] 
REF_621(uint256) (->_eventData_) := TMP_363(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_624(uint256) -> _eventData_.potAmount
REF_624(uint256) (->_eventData_) := _pot(uint256)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2129.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_493(F3Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.team
_winTID(uint256) := REF_494(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_maxEthPID = round_[_rID].maxEthPID

IRs:
REF_495(F3Ddatasets.Round) -> round_[_rID]
REF_496(uint256) -> REF_495.maxEthPID
_maxEthPID(uint256) := REF_496(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_maxAffPID = round_[_rID].maxAffPID

IRs:
REF_497(F3Ddatasets.Round) -> round_[_rID]
REF_498(uint256) -> REF_497.maxAffPID
_maxAffPID(uint256) := REF_498(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
0 == _maxAffPID

IRs:
TMP_270(bool) = 0 == _maxAffPID
CONDITION TMP_270"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_maxAffPID = 1

IRs:
_maxAffPID(uint256) := 1(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_499(F3Ddatasets.Round) -> round_[_rID]
REF_500(uint256) -> REF_499.pot
_pot(uint256) := REF_500(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_maxEth = (_pot.mul(potToMaxEth_)) / 100

IRs:
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'potToMaxEth_'] 
TMP_272(uint256) = TMP_271 / 100
_maxEth(uint256) := TMP_272(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_maxAff = (_pot.mul(potToMaxAff_)) / 100

IRs:
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'potToMaxAff_'] 
TMP_274(uint256) = TMP_273 / 100
_maxAff(uint256) := TMP_274(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_res = _pot.sub(_win).sub(_maxEth)

IRs:
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_275', '_maxEth'] 
_res(uint256) := TMP_276(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_maxEthPID].win = _maxEth.add(plyr_[_maxEthPID].win)

IRs:
REF_505(F3Ddatasets.Player) -> plyr_[_maxEthPID]
REF_506(uint256) -> REF_505.win
REF_508(F3Ddatasets.Player) -> plyr_[_maxEthPID]
REF_509(uint256) -> REF_508.win
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_maxEth', 'REF_509'] 
REF_506(uint256) (->plyr_) := TMP_277(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
plyr_[_maxAffPID].win = _maxAff.add(plyr_[_maxAffPID].win)

IRs:
REF_510(F3Ddatasets.Player) -> plyr_[_maxAffPID]
REF_511(uint256) -> REF_510.win
REF_513(F3Ddatasets.Player) -> plyr_[_maxAffPID]
REF_514(uint256) -> REF_513.win
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_maxAff', 'REF_514'] 
REF_511(uint256) (->plyr_) := TMP_278(uint256)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->27;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
_seq = 0

IRs:
_seq(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
_seq < potToWinners_.length

IRs:
REF_515 -> LENGTH potToWinners_
TMP_279(bool) = _seq < REF_515
CONDITION TMP_279"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
_win = _pot.mul(potToWinners_[_seq]) / 100

IRs:
REF_517(uint256) -> potToWinners_[_seq]
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_517'] 
TMP_281(uint256) = TMP_280 / 100
_win(uint256) := TMP_281(uint256)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
_winPID = round_[_rID].plyrs[_seq]

IRs:
REF_518(F3Ddatasets.Round) -> round_[_rID]
REF_519(uint256[3]) -> REF_518.plyrs
REF_520(uint256) -> REF_519[_seq]
_winPID(uint256) := REF_520(uint256)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
0 == _winPID

IRs:
TMP_282(bool) = 0 == _winPID
CONDITION TMP_282"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_winPID = 1

IRs:
_winPID(uint256) := 1(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_521(F3Ddatasets.Player) -> plyr_[_winPID]
REF_522(uint256) -> REF_521.win
REF_524(F3Ddatasets.Player) -> plyr_[_winPID]
REF_525(uint256) -> REF_524.win
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_525'] 
REF_522(uint256) (->plyr_) := TMP_283(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_res = _res.sub(_win)

IRs:
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_res', '_win'] 
_res(uint256) := TMP_284(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
F3Devents.onRoundEnded1(_seq,_winPID,_win)

IRs:
Emit onRoundEnded1(_seq,_winPID,_win)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_seq ++

IRs:
TMP_286(uint256) := _seq(uint256)
_seq(uint256) = _seq + 1"];
26->17;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
F3Devents.onRoundEnded2(_maxEthPID,_maxEth,_maxAffPID,_maxAff)

IRs:
Emit onRoundEnded2(_maxEthPID,_maxEth,_maxAffPID,_maxAff)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_529(uint256) -> _eventData_.compressedData
REF_530(uint256) -> _eventData_.compressedData
REF_531(F3Ddatasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.end
TMP_288(uint256) = REF_532 * 1000000
TMP_289(uint256) = REF_530 + TMP_288
REF_529(uint256) (->_eventData_) := TMP_289(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_533(uint256) -> _eventData_.compressedIDs
REF_534(uint256) -> _eventData_.compressedIDs
TMP_290(uint256) = _winPID * 100000000000000000000000000
TMP_291(uint256) = REF_534 + TMP_290
TMP_292(uint256) = _winTID * 100000000000000000
TMP_293(uint256) = TMP_291 + TMP_292
REF_533(uint256) (->_eventData_) := TMP_293(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_535(address) -> _eventData_.winnerAddr
REF_536(F3Ddatasets.Player) -> plyr_[_winPID]
REF_537(address) -> REF_536.addr
REF_535(address) (->_eventData_) := REF_537(address)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_538(bytes32) -> _eventData_.winnerName
REF_539(F3Ddatasets.Player) -> plyr_[_winPID]
REF_540(bytes32) -> REF_539.name
REF_538(bytes32) (->_eventData_) := REF_540(bytes32)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_541(uint256) -> _eventData_.amountWon
REF_541(uint256) (->_eventData_) := _win(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_eventData_.genAmount = 0

IRs:
REF_542(uint256) -> _eventData_.genAmount
REF_542(uint256) (->_eventData_) := 0(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.P3DAmount = 0

IRs:
REF_543(uint256) -> _eventData_.P3DAmount
REF_543(uint256) (->_eventData_) := 0(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_544(uint256) -> _eventData_.newPot
REF_544(uint256) (->_eventData_) := _res(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
rID_ ++

IRs:
TMP_294(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_rID ++

IRs:
TMP_295(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_545(F3Ddatasets.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.strt
REF_546(uint256) (->round_) := now(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_547(F3Ddatasets.Round) -> round_[_rID]
REF_548(uint256) -> REF_547.end
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_296', 'rndGap_'] 
REF_548(uint256) (->round_) := TMP_297(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.pot
REF_552(uint256) (->round_) := _res(uint256)"];
40->41;
41[label="Node Type: RETURN 41

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2129.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_665(uint256) -> _eventData_.compressedData
REF_666(uint256) -> _eventData_.compressedData
TMP_380(uint256) = now * 1000000000000000000
TMP_381(uint256) = REF_666 + TMP_380
TMP_382(uint256) = _team * 100000000000000000000000000000
TMP_383(uint256) = TMP_381 + TMP_382
REF_665(uint256) (->_eventData_) := TMP_383(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_667(uint256) -> _eventData_.compressedIDs
REF_668(uint256) -> _eventData_.compressedIDs
TMP_384(uint256) = REF_668 + _pID
TMP_385(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_386(uint256) = TMP_384 + TMP_385
REF_667(uint256) (->_eventData_) := TMP_386(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_670(uint256) -> _eventData_.compressedData
REF_671(uint256) -> _eventData_.compressedIDs
REF_672(F3Ddatasets.Player) -> plyr_[_pID]
REF_673(bytes32) -> REF_672.name
REF_674(address) -> _eventData_.winnerAddr
REF_675(bytes32) -> _eventData_.winnerName
REF_676(uint256) -> _eventData_.amountWon
REF_677(uint256) -> _eventData_.newPot
REF_678(uint256) -> _eventData_.P3DAmount
REF_679(uint256) -> _eventData_.genAmount
REF_680(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_670,REF_671,REF_673,msg.sender,_eth,_keys,REF_674,REF_675,REF_676,REF_677,REF_678,REF_679,REF_680,airDropPot_)"];
}
// Function: 2129.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_0(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_0(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_0(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_1(F3Ddatasets.Player) -> plyr_[_pID]
REF_2(uint256) -> REF_1.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_2,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2129.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_98(F3Ddatasets.Round) -> round_[_rID]
REF_99(uint256) -> REF_98.strt
TMP_85(uint256) = REF_99 + rndGap_
TMP_86(bool) = _now > TMP_85
REF_100(F3Ddatasets.Round) -> round_[_rID]
REF_101(uint256) -> REF_100.end
TMP_87(bool) = _now <= REF_101
REF_102(F3Ddatasets.Round) -> round_[_rID]
REF_103(uint256) -> REF_102.end
TMP_88(bool) = _now > REF_103
REF_104(F3Ddatasets.Round) -> round_[_rID]
REF_105(uint256) -> REF_104.plyr
TMP_89(bool) = REF_105 == 0
TMP_90(bool) = TMP_88 && TMP_89
TMP_91(bool) = TMP_87 || TMP_90
TMP_92(bool) = TMP_86 && TMP_91
CONDITION TMP_92"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_106(F3Ddatasets.Round) -> round_[_rID]
REF_107(uint256) -> REF_106.keys
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_107', '1000000000000000000'] 
TMP_94(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_93', '1000000000000000000'] 
RETURN TMP_94"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2129.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_166(F3Ddatasets.Round) -> round_[_rID]
REF_167(uint256) -> REF_166.ico
REF_168(F3Ddatasets.Round) -> round_[_rID]
REF_169(uint256) -> REF_168.keys
REF_170(F3Ddatasets.Round) -> round_[_rID]
REF_171(uint256) -> REF_170.end
REF_172(F3Ddatasets.Round) -> round_[_rID]
REF_173(uint256) -> REF_172.strt
REF_174(F3Ddatasets.Round) -> round_[_rID]
REF_175(uint256) -> REF_174.pot
REF_176(F3Ddatasets.Round) -> round_[_rID]
REF_177(uint256) -> REF_176.team
REF_178(F3Ddatasets.Round) -> round_[_rID]
REF_179(uint256) -> REF_178.plyr
TMP_119(uint256) = REF_179 * 10
TMP_120(uint256) = REF_177 + TMP_119
REF_180(F3Ddatasets.Round) -> round_[_rID]
REF_181(uint256) -> REF_180.plyr
REF_182(F3Ddatasets.Player) -> plyr_[REF_181]
REF_183(address) -> REF_182.addr
REF_184(F3Ddatasets.Round) -> round_[_rID]
REF_185(uint256) -> REF_184.plyr
REF_186(F3Ddatasets.Player) -> plyr_[REF_185]
REF_187(bytes32) -> REF_186.name
REF_188(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_189(uint256) -> REF_188[0]
REF_190(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_191(uint256) -> REF_190[1]
REF_192(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_193(uint256) -> REF_192[2]
REF_194(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_195(uint256) -> REF_194[3]
TMP_121(uint256) = airDropPot_ * 1000
TMP_122(uint256) = airDropTracker_ + TMP_121
RETURN REF_167,_rID,REF_169,REF_171,REF_173,REF_175,TMP_120,REF_183,REF_187,REF_189,REF_191,REF_193,REF_195,TMP_122"];
}
// Function: 2129.sol-FoMo3Dlong-getCurrentRoundInfo2()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(plyr_[round_[_rID].maxEthPID].name,plyrRnds_[round_[_rID].maxEthPID][_rID].eth,plyr_[round_[_rID].maxAffPID].name,plyrRnds_[round_[_rID].maxAffPID][_rID].affNum,plyr_[round_[_rID].plyrs[0]].name,plyr_[round_[_rID].plyrs[1]].name,plyr_[round_[_rID].plyrs[2]].name)

IRs:
REF_196(F3Ddatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.maxEthPID
REF_198(F3Ddatasets.Player) -> plyr_[REF_197]
REF_199(bytes32) -> REF_198.name
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.maxEthPID
REF_202(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[REF_201]
REF_203(F3Ddatasets.PlayerRounds) -> REF_202[_rID]
REF_204(uint256) -> REF_203.eth
REF_205(F3Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.maxAffPID
REF_207(F3Ddatasets.Player) -> plyr_[REF_206]
REF_208(bytes32) -> REF_207.name
REF_209(F3Ddatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.maxAffPID
REF_211(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[REF_210]
REF_212(F3Ddatasets.PlayerRounds) -> REF_211[_rID]
REF_213(uint256) -> REF_212.affNum
REF_214(F3Ddatasets.Round) -> round_[_rID]
REF_215(uint256[3]) -> REF_214.plyrs
REF_216(uint256) -> REF_215[0]
REF_217(F3Ddatasets.Player) -> plyr_[REF_216]
REF_218(bytes32) -> REF_217.name
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256[3]) -> REF_219.plyrs
REF_221(uint256) -> REF_220[1]
REF_222(F3Ddatasets.Player) -> plyr_[REF_221]
REF_223(bytes32) -> REF_222.name
REF_224(F3Ddatasets.Round) -> round_[_rID]
REF_225(uint256[3]) -> REF_224.plyrs
REF_226(uint256) -> REF_225[2]
REF_227(F3Ddatasets.Player) -> plyr_[REF_226]
REF_228(bytes32) -> REF_227.name
RETURN REF_199,REF_204,REF_208,REF_213,REF_218,REF_223,REF_228"];
}
// Function: 2129.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_123 = CONVERT 0 to address
TMP_124(bool) = _addr == TMP_123
CONDITION TMP_124"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_125(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_229(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_229(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth,plyr_[plyr_[_pID].laff].name)

IRs:
REF_230(F3Ddatasets.Player) -> plyr_[_pID]
REF_231(bytes32) -> REF_230.name
REF_232(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_233(F3Ddatasets.PlayerRounds) -> REF_232[_rID]
REF_234(uint256) -> REF_233.keys
REF_235(F3Ddatasets.Player) -> plyr_[_pID]
REF_236(uint256) -> REF_235.win
REF_237(F3Ddatasets.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.gen
REF_240(F3Ddatasets.Player) -> plyr_[_pID]
REF_241(uint256) -> REF_240.lrnd
TMP_126(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_241)
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_238', 'TMP_126'] 
REF_242(F3Ddatasets.Player) -> plyr_[_pID]
REF_243(uint256) -> REF_242.aff
REF_244(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_245(F3Ddatasets.PlayerRounds) -> REF_244[_rID]
REF_246(uint256) -> REF_245.eth
REF_247(F3Ddatasets.Player) -> plyr_[_pID]
REF_248(uint256) -> REF_247.laff
REF_249(F3Ddatasets.Player) -> plyr_[REF_248]
REF_250(bytes32) -> REF_249.name
RETURN _pID,REF_231,REF_234,REF_236,TMP_127,REF_243,REF_246,REF_250"];
}
// Function: 2129.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_120(F3Ddatasets.Round) -> round_[_rID]
REF_121(uint256) -> REF_120.end
TMP_101(bool) = now > REF_121
REF_122(F3Ddatasets.Round) -> round_[_rID]
REF_123(bool) -> REF_122.ended
TMP_102(bool) = REF_123 == False
TMP_103(bool) = TMP_101 && TMP_102
REF_124(F3Ddatasets.Round) -> round_[_rID]
REF_125(uint256) -> REF_124.plyr
TMP_104(bool) = REF_125 != 0
TMP_105(bool) = TMP_103 && TMP_104
CONDITION TMP_105"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_126(F3Ddatasets.Round) -> round_[_rID]
REF_127(uint256) -> REF_126.plyr
TMP_106(bool) = REF_127 == _pID
CONDITION TMP_106"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen),plyr_[_pID].aff)

IRs:
REF_128(F3Ddatasets.Player) -> plyr_[_pID]
REF_129(uint256) -> REF_128.win
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.pot
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_132', '48'] 
TMP_108(uint256) = TMP_107 / 100
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_129', 'TMP_108'] 
REF_134(F3Ddatasets.Player) -> plyr_[_pID]
REF_135(uint256) -> REF_134.gen
REF_136(F3Ddatasets.Player) -> plyr_[_pID]
REF_137(uint256) -> REF_136.aff
RETURN TMP_109,REF_135,REF_137"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen),plyr_[_pID].aff)

IRs:
REF_138(F3Ddatasets.Player) -> plyr_[_pID]
REF_139(uint256) -> REF_138.win
REF_140(F3Ddatasets.Player) -> plyr_[_pID]
REF_141(uint256) -> REF_140.gen
REF_142(F3Ddatasets.Player) -> plyr_[_pID]
REF_143(uint256) -> REF_142.aff
RETURN REF_139,REF_141,REF_143"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_144(F3Ddatasets.Player) -> plyr_[_pID]
REF_145(uint256) -> REF_144.win
REF_146(F3Ddatasets.Player) -> plyr_[_pID]
REF_147(uint256) -> REF_146.gen
REF_149(F3Ddatasets.Player) -> plyr_[_pID]
REF_150(uint256) -> REF_149.lrnd
TMP_110(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_150)
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_147', 'TMP_110'] 
REF_151(F3Ddatasets.Player) -> plyr_[_pID]
REF_152(uint256) -> REF_151.aff
RETURN REF_145,TMP_111,REF_152"];
}
// Function: 2129.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(0)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(uint256) -> REF_153.mask
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(uint256) -> REF_156.pot
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_157', '0'] 
TMP_113(uint256) = TMP_112 / 100
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_113', '1000000000000000000'] 
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.keys
TMP_115(uint256) = TMP_114 / REF_161
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_154', 'TMP_115'] 
REF_163(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_164(F3Ddatasets.PlayerRounds) -> REF_163[_rID]
REF_165(uint256) -> REF_164.keys
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_116', 'REF_165'] 
TMP_118(uint256) = TMP_117 / 1000000000000000000
RETURN TMP_118"];
}
// Function: 2129.sol-FoMo3Dlong-getRealRndMaxTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_realRndMax = rndMax_

IRs:
_realRndMax(uint256) := rndMax_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_days = (now - round_[_rID].strt) / (86400)

IRs:
REF_565(F3Ddatasets.Round) -> round_[_rID]
REF_566(uint256) -> REF_565.strt
TMP_302(uint256) = now - REF_566
TMP_303(uint256) = TMP_302 / 86400
_days(uint256) := TMP_303(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
0 < _days --

IRs:
TMP_304(uint256) := _days(uint256)
_days(uint256) = _days - 1
TMP_305(bool) = 0 < TMP_304
CONDITION TMP_305"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_realRndMax = _realRndMax / 2

IRs:
TMP_306(uint256) = _realRndMax / 2
_realRndMax(uint256) := TMP_306(uint256)"];
5->4;
6[label="Node Type: END_LOOP 6
"];
6->8;
8[label="Node Type: IF 8

EXPRESSION:
(_realRndMax > 600)

IRs:
TMP_307(bool) = _realRndMax > 600
CONDITION TMP_307"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
_realRndMax

IRs:
RETURN _realRndMax"];
10[label="Node Type: RETURN 10

EXPRESSION:
600

IRs:
RETURN 600"];
}
// Function: 2129.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_110(F3Ddatasets.Round) -> round_[_rID]
REF_111(uint256) -> REF_110.end
TMP_95(bool) = _now < REF_111
CONDITION TMP_95"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_112(F3Ddatasets.Round) -> round_[_rID]
REF_113(uint256) -> REF_112.strt
TMP_96(uint256) = REF_113 + rndGap_
TMP_97(bool) = _now > TMP_96
CONDITION TMP_97"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_114(F3Ddatasets.Round) -> round_[_rID]
REF_115(uint256) -> REF_114.end
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_115', '_now'] 
RETURN TMP_98"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_117(F3Ddatasets.Round) -> round_[_rID]
REF_118(uint256) -> REF_117.strt
TMP_99(uint256) = REF_118 + rndGap_
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_99', '_now'] 
RETURN TMP_100"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2129.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_434(F3Ddatasets.Round) -> round_[_rID]
REF_435(uint256) -> REF_434.strt
TMP_230(uint256) = REF_435 + rndGap_
TMP_231(bool) = _now > TMP_230
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.end
TMP_232(bool) = _now <= REF_437
REF_438(F3Ddatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.end
TMP_233(bool) = _now > REF_439
REF_440(F3Ddatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.plyr
TMP_234(bool) = REF_441 == 0
TMP_235(bool) = TMP_233 && TMP_234
TMP_236(bool) = TMP_232 || TMP_235
TMP_237(bool) = TMP_231 && TMP_236
CONDITION TMP_237"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_442(F3Ddatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.keys
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_443', '_keys'] 
TMP_239(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_238', '_keys'] 
RETURN TMP_239"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_240(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_240"];
}
// Function: 2129.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_397(bool) = activated_ == True
TMP_398(None) = SOLIDITY_CALL require(bool,string)(TMP_397,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2129.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_399(bool) = _codeLength == 0
TMP_400(None) = SOLIDITY_CALL require(bool,string)(TMP_399,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2129.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_401(bool) = _eth >= 1000000000
TMP_402(None) = SOLIDITY_CALL require(bool,string)(TMP_401,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_403(bool) = _eth <= 100000000000000000000000
TMP_404(None) = SOLIDITY_CALL require(bool,string)(TMP_403,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2129.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.lrnd
TMP_267(bool) = REF_486 != 0
CONDITION TMP_267"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_487(F3Ddatasets.Player) -> plyr_[_pID]
REF_488(uint256) -> REF_487.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_488)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_489(F3Ddatasets.Player) -> plyr_[_pID]
REF_490(uint256) -> REF_489.lrnd
REF_490(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_491(uint256) -> _eventData_.compressedData
REF_492(uint256) -> _eventData_.compressedData
TMP_269(uint256) = REF_492 + 10
REF_491(uint256) (->_eventData_) := TMP_269(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2129.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_285(F3Ddatasets.Round) -> round_[_rID]
REF_286(uint256) -> REF_285.strt
TMP_146(uint256) = REF_286 + rndGap_
TMP_147(bool) = _now > TMP_146
REF_287(F3Ddatasets.Round) -> round_[_rID]
REF_288(uint256) -> REF_287.end
TMP_148(bool) = _now <= REF_288
REF_289(F3Ddatasets.Round) -> round_[_rID]
REF_290(uint256) -> REF_289.end
TMP_149(bool) = _now > REF_290
REF_291(F3Ddatasets.Round) -> round_[_rID]
REF_292(uint256) -> REF_291.plyr
TMP_150(bool) = REF_292 == 0
TMP_151(bool) = TMP_149 && TMP_150
TMP_152(bool) = TMP_148 || TMP_151
TMP_153(bool) = TMP_147 && TMP_152
CONDITION TMP_153"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_293(F3Ddatasets.Player) -> plyr_[_pID]
REF_294(uint256) -> REF_293.gen
TMP_154(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_154', '_eth'] 
REF_294(uint256) (->plyr_) := TMP_155(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_296(F3Ddatasets.Round) -> round_[_rID]
REF_297(uint256) -> REF_296.end
TMP_157(bool) = _now > REF_297
REF_298(F3Ddatasets.Round) -> round_[_rID]
REF_299(bool) -> REF_298.ended
TMP_158(bool) = REF_299 == False
TMP_159(bool) = TMP_157 && TMP_158
CONDITION TMP_159"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_300(F3Ddatasets.Round) -> round_[_rID]
REF_301(bool) -> REF_300.ended
REF_301(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_160(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_160(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_302(uint256) -> _eventData_.compressedData
REF_303(uint256) -> _eventData_.compressedData
TMP_161(uint256) = _now * 1000000000000000000
TMP_162(uint256) = REF_303 + TMP_161
REF_302(uint256) (->_eventData_) := TMP_162(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_304(uint256) -> _eventData_.compressedIDs
REF_305(uint256) -> _eventData_.compressedIDs
TMP_163(uint256) = REF_305 + _pID
REF_304(uint256) (->_eventData_) := TMP_163(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_307(F3Ddatasets.Player) -> plyr_[_pID]
REF_308(bytes32) -> REF_307.name
REF_309(uint256) -> _eventData_.compressedData
REF_310(uint256) -> _eventData_.compressedIDs
REF_311(address) -> _eventData_.winnerAddr
REF_312(bytes32) -> _eventData_.winnerName
REF_313(uint256) -> _eventData_.amountWon
REF_314(uint256) -> _eventData_.newPot
REF_315(uint256) -> _eventData_.P3DAmount
REF_316(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_308,REF_309,REF_310,REF_311,REF_312,REF_313,REF_314,REF_315,REF_316)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2129.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = determineAffID(_pID,pIDxAddr_[_affCode])

IRs:
REF_35(uint256) -> pIDxAddr_[_affCode]
TMP_42(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,REF_35)
_affID(uint256) := TMP_42(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_43(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_43(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
8->1;
}
// Function: 2129.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_33(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_33(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_affCode = determineAffID(_pID,_affCode)

IRs:
TMP_36(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affCode)
_affCode(uint256) := TMP_36(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_37(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_37(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
8->1;
}
// Function: 2129.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_36(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_36(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = determineAffID(_pID,pIDxName_[_affCode])

IRs:
REF_37(uint256) -> pIDxName_[_affCode]
TMP_48(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,REF_37)
_affID(uint256) := TMP_48(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_49(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_49(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
8->1;
}
// Function: 2129.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_241 = CONVERT PlayerBook to address
TMP_242(bool) = msg.sender == TMP_241
TMP_243(None) = SOLIDITY_CALL require(bool,string)(TMP_242,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_447(uint256) -> pIDxAddr_[_addr]
TMP_244(bool) = REF_447 != _pID
CONDITION TMP_244"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_448(uint256) -> pIDxAddr_[_addr]
REF_448(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_449(uint256) -> pIDxName_[_name]
TMP_245(bool) = REF_449 != _pID
CONDITION TMP_245"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_450(uint256) -> pIDxName_[_name]
REF_450(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_451(F3Ddatasets.Player) -> plyr_[_pID]
REF_452(address) -> REF_451.addr
TMP_246(bool) = REF_452 != _addr
CONDITION TMP_246"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_453(F3Ddatasets.Player) -> plyr_[_pID]
REF_454(address) -> REF_453.addr
REF_454(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_455(F3Ddatasets.Player) -> plyr_[_pID]
REF_456(bytes32) -> REF_455.name
TMP_247(bool) = REF_456 != _name
CONDITION TMP_247"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_pID]
REF_458(bytes32) -> REF_457.name
REF_458(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_459(F3Ddatasets.Player) -> plyr_[_pID]
REF_460(uint256) -> REF_459.laff
TMP_248(bool) = REF_460 != _laff
CONDITION TMP_248"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
determineAffID(_pID,_laff)

IRs:
TMP_249(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_laff)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_461(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_462(bool) -> REF_461[_name]
TMP_250(bool) = REF_462 == False
CONDITION TMP_250"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_463(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_464(bool) -> REF_463[_name]
REF_464(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2129.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_251 = CONVERT PlayerBook to address
TMP_252(bool) = msg.sender == TMP_251
TMP_253(None) = SOLIDITY_CALL require(bool,string)(TMP_252,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_465(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_466(bool) -> REF_465[_name]
TMP_254(bool) = REF_466 == False
CONDITION TMP_254"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_467(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_468(bool) -> REF_467[_name]
REF_468(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2129.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_73(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_73(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_74(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_74(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_affID]
REF_77(address) -> REF_76.addr
REF_78(F3Ddatasets.Player) -> plyr_[_affID]
REF_79(bytes32) -> REF_78.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_77,REF_79,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 2129.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_77(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_77(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_83(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_83(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_85(F3Ddatasets.Player) -> plyr_[_affID]
REF_86(address) -> REF_85.addr
REF_87(F3Ddatasets.Player) -> plyr_[_affID]
REF_88(bytes32) -> REF_87.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_86,REF_88,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 2129.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_81(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_92(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_92(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_94(F3Ddatasets.Player) -> plyr_[_affID]
REF_95(address) -> REF_94.addr
REF_96(F3Ddatasets.Player) -> plyr_[_affID]
REF_97(bytes32) -> REF_96.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_95,REF_97,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 2129.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
god = 0xe1B35fEBaB9Ff6da5b29C3A7A44eef06cD86B0f9

IRs:
god(address) := 1288523112687549187391205813325129093386487640313(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PlayerBook = PlayerBookInterface(0xf79341b38865310e1a00d7630bd1decc92a8f8b1)

IRs:
TMP_396 = CONVERT 1413404653328102031716182336727881897681963514033 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_396(PlayerBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = FM3D Pyramid Selling Heihei~

IRs:
name(string) := FM3D Pyramid Selling Heihei~(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = F3D

IRs:
symbol(string) := F3D(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
potToMaxEth_ = 20

IRs:
potToMaxEth_(uint256) := 20(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
potToMaxAff_ = 20

IRs:
potToMaxAff_(uint256) := 20(uint256)"];
}
// Function: 2129.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
potToWinners_ = (30,15,10)

IRs:
potToWinners_(uint256[3]) = ['30(uint256)', '15(uint256)', '10(uint256)']"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
affPerLv_ = (20,10,5)

IRs:
affPerLv_(uint256[3]) = ['20(uint256)', '10(uint256)', '5(uint256)']"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2129.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_298(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_298(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_299(bool) = _earnings > 0
CONDITION TMP_299"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_553(F3Ddatasets.Player) -> plyr_[_pID]
REF_554(uint256) -> REF_553.gen
REF_556(F3Ddatasets.Player) -> plyr_[_pID]
REF_557(uint256) -> REF_556.gen
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_557'] 
REF_554(uint256) (->plyr_) := TMP_300(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_558(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_559(F3Ddatasets.PlayerRounds) -> REF_558[_rIDlast]
REF_560(uint256) -> REF_559.mask
REF_562(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_563(F3Ddatasets.PlayerRounds) -> REF_562[_rIDlast]
REF_564(uint256) -> REF_563.mask
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_564'] 
REF_560(uint256) (->plyrRnds_) := TMP_301(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2129.sol-FoMo3Dlong-updateLastBuyKeysPIDs(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_i = potToWinners_.length - 1

IRs:
REF_317 -> LENGTH potToWinners_
TMP_165(uint256) = REF_317 - 1
_i(uint256) := TMP_165(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
_i >= 1

IRs:
TMP_166(bool) = _i >= 1
CONDITION TMP_166"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[_rID].plyrs[_i] = round_[_rID].plyrs[_i - 1]

IRs:
REF_318(F3Ddatasets.Round) -> round_[_rID]
REF_319(uint256[3]) -> REF_318.plyrs
REF_320(uint256) -> REF_319[_i]
REF_321(F3Ddatasets.Round) -> round_[_rID]
REF_322(uint256[3]) -> REF_321.plyrs
TMP_167(uint256) = _i - 1
REF_323(uint256) -> REF_322[TMP_167]
REF_320(uint256) (->round_) := REF_323(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_i --

IRs:
TMP_168(uint256) := _i(uint256)
_i(uint256) = _i - 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].plyrs[0] = _lastPID

IRs:
REF_324(F3Ddatasets.Round) -> round_[_rID]
REF_325(uint256[3]) -> REF_324.plyrs
REF_326(uint256) -> REF_325[0]
REF_326(uint256) (->round_) := _lastPID(uint256)"];
}
// Function: 2129.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_626(F3Ddatasets.Round) -> round_[_rID]
REF_627(uint256) -> REF_626.keys
TMP_365(uint256) = TMP_364 / REF_627
_ppt(uint256) := TMP_365(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_628(F3Ddatasets.Round) -> round_[_rID]
REF_629(uint256) -> REF_628.mask
REF_631(F3Ddatasets.Round) -> round_[_rID]
REF_632(uint256) -> REF_631.mask
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_632'] 
REF_629(uint256) (->round_) := TMP_366(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_368(uint256) = TMP_367 / 1000000000000000000
_pearn(uint256) := TMP_368(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_634(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_635(F3Ddatasets.PlayerRounds) -> REF_634[_rID]
REF_636(uint256) -> REF_635.mask
REF_637(F3Ddatasets.Round) -> round_[_rID]
REF_638(uint256) -> REF_637.mask
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_638', '_keys'] 
TMP_370(uint256) = TMP_369 / 1000000000000000000
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_370', '_pearn'] 
REF_642(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_643(F3Ddatasets.PlayerRounds) -> REF_642[_rID]
REF_644(uint256) -> REF_643.mask
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_371', 'REF_644'] 
REF_636(uint256) (->plyrRnds_) := TMP_372(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_647(F3Ddatasets.Round) -> round_[_rID]
REF_648(uint256) -> REF_647.keys
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_648'] 
TMP_374(uint256) = TMP_373 / 1000000000000000000
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_374'] 
RETURN TMP_375"];
}
// Function: 2129.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_567(F3Ddatasets.Round) -> round_[_rID]
REF_568(uint256) -> REF_567.end
TMP_308(bool) = _now > REF_568
REF_569(F3Ddatasets.Round) -> round_[_rID]
REF_570(uint256) -> REF_569.plyr
TMP_309(bool) = REF_570 == 0
TMP_310(bool) = TMP_308 && TMP_309
CONDITION TMP_310"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_311(uint256) = _keys / 1000000000000000000
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_311', 'rndInc_'] 
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_312', '_now'] 
_newTime(uint256) := TMP_313(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_314(uint256) = _keys / 1000000000000000000
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_314', 'rndInc_'] 
REF_575(F3Ddatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.end
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_315', 'REF_576'] 
_newTime(uint256) := TMP_316(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_realRndMax = getRealRndMaxTime(_rID)

IRs:
TMP_317(uint256) = INTERNAL_CALL, FoMo3Dlong.getRealRndMaxTime(uint256)(_rID)
_realRndMax(uint256) := TMP_317(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_newTime < (_realRndMax).add(_now)

IRs:
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_realRndMax', '_now'] 
TMP_319(bool) = _newTime < TMP_318
CONDITION TMP_319"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_578(F3Ddatasets.Round) -> round_[_rID]
REF_579(uint256) -> REF_578.end
REF_579(uint256) (->round_) := _newTime(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].end = _realRndMax.add(_now)

IRs:
REF_580(F3Ddatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.end
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_realRndMax', '_now'] 
REF_581(uint256) (->round_) := TMP_320(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
}
// Function: 2129.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_264(bool) = _team < 0
TMP_265(bool) = _team > 3
TMP_266(bool) = TMP_264 || TMP_265
CONDITION TMP_266"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2129.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_38(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_38(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_39(F3Ddatasets.Round) -> round_[_rID]
REF_40(uint256) -> REF_39.end
TMP_54(bool) = _now > REF_40
REF_41(F3Ddatasets.Round) -> round_[_rID]
REF_42(bool) -> REF_41.ended
TMP_55(bool) = REF_42 == False
TMP_56(bool) = TMP_54 && TMP_55
REF_43(F3Ddatasets.Round) -> round_[_rID]
REF_44(uint256) -> REF_43.plyr
TMP_57(bool) = REF_44 != 0
TMP_58(bool) = TMP_56 && TMP_57
CONDITION TMP_58"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_45(F3Ddatasets.Round) -> round_[_rID]
REF_46(bool) -> REF_45.ended
REF_46(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_59(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_59(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_60(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_60(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_61(bool) = _eth > 0
CONDITION TMP_61"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(address) -> REF_47.addr
Transfer dest:REF_48 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_50(uint256) -> _eventData_.compressedData
REF_51(uint256) -> _eventData_.compressedData
TMP_63(uint256) = _now * 1000000000000000000
TMP_64(uint256) = REF_51 + TMP_63
REF_50(uint256) (->_eventData_) := TMP_64(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_52(uint256) -> _eventData_.compressedIDs
REF_53(uint256) -> _eventData_.compressedIDs
TMP_65(uint256) = REF_53 + _pID
REF_52(uint256) (->_eventData_) := TMP_65(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(bytes32) -> REF_55.name
REF_57(uint256) -> _eventData_.compressedData
REF_58(uint256) -> _eventData_.compressedIDs
REF_59(address) -> _eventData_.winnerAddr
REF_60(bytes32) -> _eventData_.winnerName
REF_61(uint256) -> _eventData_.amountWon
REF_62(uint256) -> _eventData_.newPot
REF_63(uint256) -> _eventData_.P3DAmount
REF_64(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_56,_eth,REF_57,REF_58,REF_59,REF_60,REF_61,REF_62,REF_63,REF_64)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_67(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_67(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_68(bool) = _eth > 0
CONDITION TMP_68"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(address) -> REF_65.addr
Transfer dest:REF_66 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_69(F3Ddatasets.Player) -> plyr_[_pID]
REF_70(bytes32) -> REF_69.name
Emit onWithdraw(_pID,msg.sender,REF_70,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
}
// Function: 2129.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_649(F3Ddatasets.Player) -> plyr_[_pID]
REF_650(uint256) -> REF_649.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_650)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_651(F3Ddatasets.Player) -> plyr_[_pID]
REF_652(uint256) -> REF_651.win
REF_654(F3Ddatasets.Player) -> plyr_[_pID]
REF_655(uint256) -> REF_654.gen
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_652', 'REF_655'] 
REF_657(F3Ddatasets.Player) -> plyr_[_pID]
REF_658(uint256) -> REF_657.aff
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_377', 'REF_658'] 
_earnings(uint256) := TMP_378(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_379(bool) = _earnings > 0
CONDITION TMP_379"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_659(F3Ddatasets.Player) -> plyr_[_pID]
REF_660(uint256) -> REF_659.win
REF_660(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_661(F3Ddatasets.Player) -> plyr_[_pID]
REF_662(uint256) -> REF_661.gen
REF_662(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_663(F3Ddatasets.Player) -> plyr_[_pID]
REF_664(uint256) -> REF_663.aff
REF_664(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2129.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_427 = CONVERT _input to bytes
_temp(bytes) := TMP_427(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_700 -> LENGTH _temp
_length(uint256) := REF_700(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_428(bool) = _length <= 32
TMP_429(bool) = _length > 0
TMP_430(bool) = TMP_428 && TMP_429
TMP_431(None) = SOLIDITY_CALL require(bool,string)(TMP_430,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_701(None) -> _temp[0]
TMP_432(bool) = REF_701 != 32
TMP_433(uint256) = _length - 1
REF_702(None) -> _temp[TMP_433]
TMP_434(bool) = REF_702 != 32
TMP_435(bool) = TMP_432 && TMP_434
TMP_436(None) = SOLIDITY_CALL require(bool,string)(TMP_435,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_703(None) -> _temp[0]
TMP_437(bool) = REF_703 == 48
CONDITION TMP_437"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_704(None) -> _temp[1]
TMP_438(bool) = REF_704 != 120
TMP_439(None) = SOLIDITY_CALL require(bool,string)(TMP_438,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_705(None) -> _temp[1]
TMP_440(bool) = REF_705 != 88
TMP_441(None) = SOLIDITY_CALL require(bool,string)(TMP_440,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_442(bool) = i < _length
CONDITION TMP_442"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_706(None) -> _temp[i]
TMP_443(bool) = REF_706 > 64
REF_707(None) -> _temp[i]
TMP_444(bool) = REF_707 < 91
TMP_445(bool) = TMP_443 && TMP_444
CONDITION TMP_445"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_708(bytes1) -> _temp[i]
REF_709(None) -> _temp[i]
TMP_446 = CONVERT REF_709 to uint256
TMP_447(uint256) = TMP_446 + 32
TMP_448 = CONVERT TMP_447 to bytes1
REF_708(bytes1) (->_temp) := TMP_448(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_449(bool) = _hasNonNumber == False
CONDITION TMP_449"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_710(None) -> _temp[i]
TMP_450(bool) = REF_710 == 32
REF_711(None) -> _temp[i]
TMP_451(bool) = REF_711 > 96
REF_712(None) -> _temp[i]
TMP_452(bool) = REF_712 < 123
TMP_453(bool) = TMP_451 && TMP_452
TMP_454(bool) = TMP_450 || TMP_453
REF_713(None) -> _temp[i]
TMP_455(bool) = REF_713 > 47
REF_714(None) -> _temp[i]
TMP_456(bool) = REF_714 < 58
TMP_457(bool) = TMP_455 && TMP_456
TMP_458(bool) = TMP_454 || TMP_457
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_715(None) -> _temp[i]
TMP_460(bool) = REF_715 == 32
CONDITION TMP_460"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_461(uint256) = i + 1
REF_716(None) -> _temp[TMP_461]
TMP_462(bool) = REF_716 != 32
TMP_463(None) = SOLIDITY_CALL require(bool,string)(TMP_462,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_464(bool) = _hasNonNumber == False
REF_717(None) -> _temp[i]
TMP_465(bool) = REF_717 < 48
REF_718(None) -> _temp[i]
TMP_466(bool) = REF_718 > 57
TMP_467(bool) = TMP_465 || TMP_466
TMP_468(bool) = TMP_464 && TMP_467
CONDITION TMP_468"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_469(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_470(bool) = _hasNonNumber == True
TMP_471(None) = SOLIDITY_CALL require(bool,string)(TMP_470,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2129.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2129.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2129.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2129.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2129.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2129.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2129.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2129.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2129.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_480(uint256) = a + b
c(uint256) := TMP_480(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_481(bool) = c >= a
TMP_482(None) = SOLIDITY_CALL require(bool,string)(TMP_481,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2129.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_472(bool) = a == 0
CONDITION TMP_472"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_473(uint256) = a * b
c(uint256) := TMP_473(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_474(uint256) = c / a
TMP_475(bool) = TMP_474 == b
TMP_476(None) = SOLIDITY_CALL require(bool,string)(TMP_475,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2129.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_490(bool) = x == 0
CONDITION TMP_490"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_491(bool) = y == 0
CONDITION TMP_491"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_492(bool) = i < y
CONDITION TMP_492"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_493(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_493(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_494(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2129.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_489(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_489"];
}
// Function: 2129.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_483(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_484(uint256) = TMP_483 / 2
z(uint256) := TMP_484(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_485(bool) = z < y
CONDITION TMP_485"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_486(uint256) = x / z
TMP_487(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_486,z)
TMP_488(uint256) = TMP_487 / 2
z(uint256) := TMP_488(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2129.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_477(bool) = b <= a
TMP_478(None) = SOLIDITY_CALL require(bool,string)(TMP_477,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_479(uint256) = a - b
RETURN TMP_479"];
}
}
