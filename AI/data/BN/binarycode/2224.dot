digraph G {
// Function: 2224.sol-GoToken-GoToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(auction_address != 0x0)

IRs:
TMP_66(bool) = auction_address != 0
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(wallet_address != 0x0)

IRs:
TMP_68(bool) = wallet_address != 0
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(initial_supply > multiplier)

IRs:
TMP_70(bool) = initial_supply > multiplier
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = initial_supply

IRs:
totalSupply(uint256) := initial_supply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[auction_address] = initial_supply / 2

IRs:
REF_42(uint256) -> balances[auction_address]
TMP_72(uint256) = initial_supply / 2
REF_42(uint256) (->balances) := TMP_72(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[wallet_address] = initial_supply / 2

IRs:
REF_43(uint256) -> balances[wallet_address]
TMP_73(uint256) = initial_supply / 2
REF_43(uint256) (->balances) := TMP_73(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(0x0,auction_address,balances[auction_address])

IRs:
REF_44(uint256) -> balances[auction_address]
Emit Transfer(0,auction_address,REF_44)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(0x0,wallet_address,balances[wallet_address])

IRs:
REF_45(uint256) -> balances[wallet_address]
Emit Transfer(0,wallet_address,REF_45)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Deployed(totalSupply)

IRs:
Emit Deployed(totalSupply)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
assert(bool)(totalSupply == balances[auction_address] + balances[wallet_address])

IRs:
REF_46(uint256) -> balances[auction_address]
REF_47(uint256) -> balances[wallet_address]
TMP_77(uint256) = REF_46 + REF_47
TMP_78(bool) = totalSupply == TMP_77
TMP_79(None) = SOLIDITY_CALL assert(bool)(TMP_78)"];
}
// Function: 2224.sol-GoToken-allowance(address,address)
digraph{
}
// Function: 2224.sol-GoToken-approve(address,uint256)
digraph{
}
// Function: 2224.sol-GoToken-balanceOf(address)
digraph{
}
// Function: 2224.sol-GoToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = GoToken

IRs:
name(string) := GoToken(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = GOT

IRs:
symbol(string) := GOT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
multiplier = 10 ** (decimals)

IRs:
TMP_80(uint256) = 10 ** decimals
multiplier(uint256) := TMP_80(uint256)"];
}
// Function: 2224.sol-GoToken-transfer(address,uint256)
digraph{
}
// Function: 2224.sol-GoToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 2224.sol-GoTokenDutchAuction-GoTokenDutchAuction(address,address,address,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_wallet_address != 0x0)

IRs:
TMP_81(bool) = _wallet_address != 0
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_whitelister_address != 0x0)

IRs:
TMP_83(bool) = _whitelister_address != 0
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_distributor_address != 0x0)

IRs:
TMP_85(bool) = _distributor_address != 0
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
wallet_address = _wallet_address

IRs:
wallet_address(address) := _wallet_address(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whitelister_address = _whitelister_address

IRs:
whitelister_address(address) := _whitelister_address(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
distributor_address = _distributor_address

IRs:
distributor_address(address) := _distributor_address(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owner_address = msg.sender

IRs:
owner_address(address) := msg.sender(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
stage = Stages.AuctionDeployed

IRs:
REF_48(GoTokenDutchAuction.Stages) -> Stages.AuctionDeployed
stage(GoTokenDutchAuction.Stages) := REF_48(GoTokenDutchAuction.Stages)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
changePriceCurveSettings(_price_start,_price_constant1,_price_exponent1,_price_constant2,_price_exponent2)

IRs:
INTERNAL_CALL, GoTokenDutchAuction.changePriceCurveSettings(uint256,uint256,uint256,uint256,uint256)(_price_start,_price_constant1,_price_exponent1,_price_constant2,_price_exponent2)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Deployed(_price_start,_price_constant1,_price_exponent1,_price_constant2,_price_exponent2)

IRs:
Emit Deployed(_price_start,_price_constant1,_price_exponent1,_price_constant2,_price_exponent2)"];
}
// Function: 2224.sol-GoTokenDutchAuction-addToPrivateSaleWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _bidder_addresses.length

IRs:
REF_65 -> LENGTH _bidder_addresses
TMP_120(bool) = i < REF_65
CONDITION TMP_120"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
privatesalewhitelist[_bidder_addresses[i]] = true

IRs:
REF_66(address) -> _bidder_addresses[i]
REF_67(bool) -> privatesalewhitelist[REF_66]
REF_67(bool) (->privatesalewhitelist) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
PrivateSaleWhitelisted(_bidder_addresses[i])

IRs:
REF_68(address) -> _bidder_addresses[i]
Emit PrivateSaleWhitelisted(REF_68)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_122(uint32) := i(uint32)
i(uint32) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isOwner()()"];
8->3;
}
// Function: 2224.sol-GoTokenDutchAuction-addToPublicSaleWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _bidder_addresses.length

IRs:
REF_55 -> LENGTH _bidder_addresses
TMP_110(bool) = i < REF_55
CONDITION TMP_110"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! privatesalewhitelist[_bidder_addresses[i]])

IRs:
REF_56(address) -> _bidder_addresses[i]
REF_57(bool) -> privatesalewhitelist[REF_56]
TMP_111 = UnaryType.BANG REF_57 
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
publicsalewhitelist[_bidder_addresses[i]] = true

IRs:
REF_58(address) -> _bidder_addresses[i]
REF_59(bool) -> publicsalewhitelist[REF_58]
REF_59(bool) (->publicsalewhitelist) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
PublicSaleWhitelisted(_bidder_addresses[i])

IRs:
REF_60(address) -> _bidder_addresses[i]
Emit PublicSaleWhitelisted(REF_60)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_114(uint32) := i(uint32)
i(uint32) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isWhitelister()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isWhitelister()()"];
9->3;
}
// Function: 2224.sol-GoTokenDutchAuction-atStage(GoTokenDutchAuction.Stages)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stage == _stage)

IRs:
TMP_277(bool) = stage == _stage
TMP_278(None) = SOLIDITY_CALL require(bool)(TMP_277)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2224.sol-GoTokenDutchAuction-bid()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stage == Stages.AuctionSetUp || stage == Stages.AuctionStarted)

IRs:
REF_75(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
TMP_131(bool) = stage == REF_75
REF_76(GoTokenDutchAuction.Stages) -> Stages.AuctionStarted
TMP_132(bool) = stage == REF_76
TMP_133(bool) = TMP_131 || TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(privatesalewhitelist[msg.sender] || publicsalewhitelist[msg.sender])

IRs:
REF_77(bool) -> privatesalewhitelist[msg.sender]
REF_78(bool) -> publicsalewhitelist[msg.sender]
TMP_135(bool) = REF_77 || REF_78
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
stage == Stages.AuctionSetUp

IRs:
REF_79(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
TMP_137(bool) = stage == REF_79
CONDITION TMP_137"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(privatesalewhitelist[msg.sender])

IRs:
REF_80(bool) -> privatesalewhitelist[msg.sender]
TMP_138(None) = SOLIDITY_CALL require(bool)(REF_80)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_139(bool) = msg.value > 0
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(bids[msg.sender].received + msg.value >= bid_threshold)

IRs:
REF_81(GoTokenDutchAuction.Account) -> bids[msg.sender]
REF_82(uint256) -> REF_81.received
TMP_141(uint256) = REF_82 + msg.value
TMP_142(bool) = TMP_141 >= bid_threshold
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(bids[msg.sender].received + msg.value >= msg.value)

IRs:
REF_83(GoTokenDutchAuction.Account) -> bids[msg.sender]
REF_84(uint256) -> REF_83.received
TMP_144(uint256) = REF_84 + msg.value
TMP_145(bool) = TMP_144 >= msg.value
TMP_146(None) = SOLIDITY_CALL assert(bool)(TMP_145)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
remaining_funds_to_end_auction = remainingFundsToEndAuction()

IRs:
TMP_147(uint256) = INTERNAL_CALL, GoTokenDutchAuction.remainingFundsToEndAuction()()
remaining_funds_to_end_auction(uint256) := TMP_147(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(msg.value <= remaining_funds_to_end_auction)

IRs:
TMP_148(bool) = msg.value <= remaining_funds_to_end_auction
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
stage == Stages.AuctionSetUp

IRs:
REF_85(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
TMP_150(bool) = stage == REF_85
CONDITION TMP_150"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(privatesalewhitelist[msg.sender])

IRs:
REF_86(bool) -> privatesalewhitelist[msg.sender]
TMP_151(None) = SOLIDITY_CALL require(bool)(REF_86)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
currentBonus = 25

IRs:
currentBonus(uint256) := 25(uint256)"];
13->42;
14[label="Node Type: IF 14

EXPRESSION:
stage == Stages.AuctionStarted

IRs:
REF_87(GoTokenDutchAuction.Stages) -> Stages.AuctionStarted
TMP_152(bool) = stage == REF_87
CONDITION TMP_152"];
14->15[label="True"];
14->40[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
privatesalewhitelist[msg.sender] && now >= auction_start_time && now < auction_start_time + BONUS_DAY1_DURATION

IRs:
REF_88(bool) -> privatesalewhitelist[msg.sender]
TMP_153(bool) = now >= auction_start_time
TMP_154(bool) = REF_88 && TMP_153
TMP_155(uint256) = auction_start_time + BONUS_DAY1_DURATION
TMP_156(bool) = now < TMP_155
TMP_157(bool) = TMP_154 && TMP_156
CONDITION TMP_157"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
currentBonus = 25

IRs:
currentBonus(uint256) := 25(uint256)"];
16->39;
17[label="Node Type: IF 17

EXPRESSION:
privatesalewhitelist[msg.sender] && now >= auction_start_time + BONUS_DAY1_DURATION && now < auction_start_time + BONUS_DAY2_DURATION

IRs:
REF_89(bool) -> privatesalewhitelist[msg.sender]
TMP_158(uint256) = auction_start_time + BONUS_DAY1_DURATION
TMP_159(bool) = now >= TMP_158
TMP_160(bool) = REF_89 && TMP_159
TMP_161(uint256) = auction_start_time + BONUS_DAY2_DURATION
TMP_162(bool) = now < TMP_161
TMP_163(bool) = TMP_160 && TMP_162
CONDITION TMP_163"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
currentBonus = 25

IRs:
currentBonus(uint256) := 25(uint256)"];
18->38;
19[label="Node Type: IF 19

EXPRESSION:
privatesalewhitelist[msg.sender] && now >= auction_start_time + BONUS_DAY2_DURATION && now < auction_start_time + BONUS_DAY3_DURATION

IRs:
REF_90(bool) -> privatesalewhitelist[msg.sender]
TMP_164(uint256) = auction_start_time + BONUS_DAY2_DURATION
TMP_165(bool) = now >= TMP_164
TMP_166(bool) = REF_90 && TMP_165
TMP_167(uint256) = auction_start_time + BONUS_DAY3_DURATION
TMP_168(bool) = now < TMP_167
TMP_169(bool) = TMP_166 && TMP_168
CONDITION TMP_169"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
currentBonus = 25

IRs:
currentBonus(uint256) := 25(uint256)"];
20->37;
21[label="Node Type: IF 21

EXPRESSION:
privatesalewhitelist[msg.sender] && now >= auction_start_time + BONUS_DAY3_DURATION

IRs:
REF_91(bool) -> privatesalewhitelist[msg.sender]
TMP_170(uint256) = auction_start_time + BONUS_DAY3_DURATION
TMP_171(bool) = now >= TMP_170
TMP_172(bool) = REF_91 && TMP_171
CONDITION TMP_172"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
currentBonus = 25

IRs:
currentBonus(uint256) := 25(uint256)"];
22->36;
23[label="Node Type: IF 23

EXPRESSION:
publicsalewhitelist[msg.sender] && now >= auction_start_time && now < auction_start_time + BONUS_DAY1_DURATION

IRs:
REF_92(bool) -> publicsalewhitelist[msg.sender]
TMP_173(bool) = now >= auction_start_time
TMP_174(bool) = REF_92 && TMP_173
TMP_175(uint256) = auction_start_time + BONUS_DAY1_DURATION
TMP_176(bool) = now < TMP_175
TMP_177(bool) = TMP_174 && TMP_176
CONDITION TMP_177"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
currentBonus = 15

IRs:
currentBonus(uint256) := 15(uint256)"];
24->35;
25[label="Node Type: IF 25

EXPRESSION:
publicsalewhitelist[msg.sender] && now >= auction_start_time + BONUS_DAY1_DURATION && now < auction_start_time + BONUS_DAY2_DURATION

IRs:
REF_93(bool) -> publicsalewhitelist[msg.sender]
TMP_178(uint256) = auction_start_time + BONUS_DAY1_DURATION
TMP_179(bool) = now >= TMP_178
TMP_180(bool) = REF_93 && TMP_179
TMP_181(uint256) = auction_start_time + BONUS_DAY2_DURATION
TMP_182(bool) = now < TMP_181
TMP_183(bool) = TMP_180 && TMP_182
CONDITION TMP_183"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
currentBonus = 10

IRs:
currentBonus(uint256) := 10(uint256)"];
26->34;
27[label="Node Type: IF 27

EXPRESSION:
publicsalewhitelist[msg.sender] && now >= auction_start_time + BONUS_DAY2_DURATION && now < auction_start_time + BONUS_DAY3_DURATION

IRs:
REF_94(bool) -> publicsalewhitelist[msg.sender]
TMP_184(uint256) = auction_start_time + BONUS_DAY2_DURATION
TMP_185(bool) = now >= TMP_184
TMP_186(bool) = REF_94 && TMP_185
TMP_187(uint256) = auction_start_time + BONUS_DAY3_DURATION
TMP_188(bool) = now < TMP_187
TMP_189(bool) = TMP_186 && TMP_188
CONDITION TMP_189"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
currentBonus = 5

IRs:
currentBonus(uint256) := 5(uint256)"];
28->33;
29[label="Node Type: IF 29

EXPRESSION:
publicsalewhitelist[msg.sender] && now >= auction_start_time + BONUS_DAY3_DURATION

IRs:
REF_95(bool) -> publicsalewhitelist[msg.sender]
TMP_190(uint256) = auction_start_time + BONUS_DAY3_DURATION
TMP_191(bool) = now >= TMP_190
TMP_192(bool) = REF_95 && TMP_191
CONDITION TMP_192"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
currentBonus = 0

IRs:
currentBonus(uint256) := 0(uint256)"];
30->32;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
currentBonus = 0

IRs:
currentBonus(uint256) := 0(uint256)"];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->41;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
currentBonus = 0

IRs:
currentBonus(uint256) := 0(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: NEW VARIABLE 43

EXPRESSION:
accounted = msg.value + msg.value * (currentBonus) / 100

IRs:
TMP_193(uint256) = msg.value * currentBonus
TMP_194(uint256) = TMP_193 / 100
TMP_195(uint256) = msg.value + TMP_194
accounted(uint256) := TMP_195(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
bids[msg.sender].accounted += accounted

IRs:
REF_96(GoTokenDutchAuction.Account) -> bids[msg.sender]
REF_97(uint256) -> REF_96.accounted
REF_97(-> bids) = REF_97 + accounted"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
bids[msg.sender].received += msg.value

IRs:
REF_98(GoTokenDutchAuction.Account) -> bids[msg.sender]
REF_99(uint256) -> REF_98.received
REF_99(-> bids) = REF_99 + msg.value"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
received_wei += msg.value

IRs:
received_wei(uint256) = received_wei + msg.value"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
received_wei_with_bonus += accounted

IRs:
received_wei_with_bonus(uint256) = received_wei_with_bonus + accounted"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
wallet_address.transfer(msg.value)

IRs:
Transfer dest:wallet_address value:msg.value"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
BidSubmission(msg.sender,msg.value,accounted,remaining_funds_to_end_auction)

IRs:
Emit BidSubmission(msg.sender,msg.value,accounted,remaining_funds_to_end_auction)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
assert(bool)(received_wei >= msg.value)

IRs:
TMP_198(bool) = received_wei >= msg.value
TMP_199(None) = SOLIDITY_CALL assert(bool)(TMP_198)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
assert(bool)(received_wei_with_bonus >= accounted)

IRs:
TMP_200(bool) = received_wei_with_bonus >= accounted
TMP_201(None) = SOLIDITY_CALL assert(bool)(TMP_200)"];
}
// Function: 2224.sol-GoTokenDutchAuction-calcTokenPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
stage == Stages.AuctionDeployed || stage == Stages.AuctionSetUp

IRs:
REF_129(GoTokenDutchAuction.Stages) -> Stages.AuctionDeployed
TMP_250(bool) = stage == REF_129
REF_130(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
TMP_251(bool) = stage == REF_130
TMP_252(bool) = TMP_250 || TMP_251
CONDITION TMP_252"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
price_start

IRs:
RETURN price_start"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
stage == Stages.AuctionStarted

IRs:
REF_131(GoTokenDutchAuction.Stages) -> Stages.AuctionStarted
TMP_253(bool) = stage == REF_131
CONDITION TMP_253"];
7->8[label="True"];
7->18[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elapsed = now - auction_start_time

IRs:
TMP_254(uint256) = now - auction_start_time
elapsed(uint256) := TMP_254(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
now >= auction_start_time && now < auction_start_time + CURVE_CUTOFF_DURATION

IRs:
TMP_255(bool) = now >= auction_start_time
TMP_256(uint256) = auction_start_time + CURVE_CUTOFF_DURATION
TMP_257(bool) = now < TMP_256
TMP_258(bool) = TMP_255 && TMP_257
CONDITION TMP_258"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
decay_rate1 = elapsed ** price_exponent1 / price_constant1

IRs:
TMP_259(uint256) = elapsed ** price_exponent1
TMP_260(uint256) = TMP_259 / price_constant1
decay_rate1(uint256) := TMP_260(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
price_start * (1 + elapsed) / (1 + elapsed + decay_rate1)

IRs:
TMP_261(uint256) = 1 + elapsed
TMP_262(uint256) = price_start * TMP_261
TMP_263(uint256) = 1 + elapsed
TMP_264(uint256) = TMP_263 + decay_rate1
TMP_265(uint256) = TMP_262 / TMP_264
RETURN TMP_265"];
12[label="Node Type: IF 12

EXPRESSION:
now >= auction_start_time && now >= auction_start_time + CURVE_CUTOFF_DURATION

IRs:
TMP_266(bool) = now >= auction_start_time
TMP_267(uint256) = auction_start_time + CURVE_CUTOFF_DURATION
TMP_268(bool) = now >= TMP_267
TMP_269(bool) = TMP_266 && TMP_268
CONDITION TMP_269"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
decay_rate2 = elapsed ** price_exponent2 / price_constant2

IRs:
TMP_270(uint256) = elapsed ** price_exponent2
TMP_271(uint256) = TMP_270 / price_constant2
decay_rate2(uint256) := TMP_271(uint256)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
price_start * (1 + elapsed) / (1 + elapsed + decay_rate2)

IRs:
TMP_272(uint256) = 1 + elapsed
TMP_273(uint256) = price_start * TMP_272
TMP_274(uint256) = 1 + elapsed
TMP_275(uint256) = TMP_274 + decay_rate2
TMP_276(uint256) = TMP_273 / TMP_275
RETURN TMP_276"];
15[label="Node Type: RETURN 15

EXPRESSION:
price_start

IRs:
RETURN price_start"];
18[label="Node Type: END_IF 18
"];
}
// Function: 2224.sol-GoTokenDutchAuction-changePriceCurveSettings(uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stage == Stages.AuctionDeployed || stage == Stages.AuctionSetUp)

IRs:
REF_53(GoTokenDutchAuction.Stages) -> Stages.AuctionDeployed
TMP_100(bool) = stage == REF_53
REF_54(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
TMP_101(bool) = stage == REF_54
TMP_102(bool) = TMP_100 || TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_price_start > 0)

IRs:
TMP_104(bool) = _price_start > 0
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_price_constant1 > 0)

IRs:
TMP_106(bool) = _price_constant1 > 0
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_price_constant2 > 0)

IRs:
TMP_108(bool) = _price_constant2 > 0
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
price_start = _price_start

IRs:
price_start(uint256) := _price_start(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
price_constant1 = _price_constant1

IRs:
price_constant1(uint256) := _price_constant1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
price_exponent1 = _price_exponent1

IRs:
price_exponent1(uint256) := _price_exponent1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
price_constant2 = _price_constant2

IRs:
price_constant2(uint256) := _price_constant2(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
price_exponent2 = _price_exponent2

IRs:
price_exponent2(uint256) := _price_exponent2(uint256)"];
}
// Function: 2224.sol-GoTokenDutchAuction-distributeGoTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->25;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > end_time + TOKEN_CLAIM_WAIT_PERIOD)

IRs:
TMP_212(uint256) = end_time + TOKEN_CLAIM_WAIT_PERIOD
TMP_213(bool) = now > TMP_212
TMP_214(None) = SOLIDITY_CALL require(bool)(TMP_213)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(receiver_address != 0x0)

IRs:
TMP_215(bool) = receiver_address != 0
TMP_216(None) = SOLIDITY_CALL require(bool)(TMP_215)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(bids[receiver_address].received > 0)

IRs:
REF_104(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_105(uint256) -> REF_104.received
TMP_217(bool) = REF_105 > 0
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
bids[receiver_address].received == 0 || bids[receiver_address].accounted == 0

IRs:
REF_106(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_107(uint256) -> REF_106.received
TMP_219(bool) = REF_107 == 0
REF_108(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_109(uint256) -> REF_108.accounted
TMP_220(bool) = REF_109 == 0
TMP_221(bool) = TMP_219 || TMP_220
CONDITION TMP_221"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
num = (token_multiplier * bids[receiver_address].accounted) / final_price

IRs:
REF_110(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_111(uint256) -> REF_110.accounted
TMP_222(uint256) = token_multiplier * REF_111
TMP_223(uint256) = TMP_222 / final_price
num(uint256) := TMP_223(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
auction_tokens_balance = token.balanceOf(address(this))

IRs:
TMP_224 = CONVERT this to address
TMP_225(uint256) = HIGH_LEVEL_CALL, dest:token(GoToken), function:balanceOf, arguments:['TMP_224']  
auction_tokens_balance(uint256) := TMP_225(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
num > auction_tokens_balance

IRs:
TMP_226(bool) = num > auction_tokens_balance
CONDITION TMP_226"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
num = auction_tokens_balance

IRs:
num(uint256) := auction_tokens_balance(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
funds_claimed += bids[receiver_address].received

IRs:
REF_113(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_114(uint256) -> REF_113.received
funds_claimed(uint256) = funds_claimed + REF_114"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
bids[receiver_address].accounted = 0

IRs:
REF_115(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_116(uint256) -> REF_115.accounted
REF_116(uint256) (->bids) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
bids[receiver_address].received = 0

IRs:
REF_117(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_118(uint256) -> REF_117.received
REF_118(uint256) (->bids) := 0(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
require(bool)(token.transfer(receiver_address,num))

IRs:
TMP_227(bool) = HIGH_LEVEL_CALL, dest:token(GoToken), function:transfer, arguments:['receiver_address', 'num']  
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ClaimedTokens(receiver_address,num)

IRs:
Emit ClaimedTokens(receiver_address,num)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
funds_claimed == received_wei

IRs:
TMP_230(bool) = funds_claimed == received_wei
CONDITION TMP_230"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
stage = Stages.TokensDistributed

IRs:
REF_120(GoTokenDutchAuction.Stages) -> Stages.TokensDistributed
stage(GoTokenDutchAuction.Stages) := REF_120(GoTokenDutchAuction.Stages)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
TokensDistributed()

IRs:
Emit TokensDistributed()"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
assert(bool)(token.balanceOf(receiver_address) >= num)

IRs:
TMP_232(uint256) = HIGH_LEVEL_CALL, dest:token(GoToken), function:balanceOf, arguments:['receiver_address']  
TMP_233(bool) = TMP_232 >= num
TMP_234(None) = SOLIDITY_CALL assert(bool)(TMP_233)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
assert(bool)(bids[receiver_address].accounted == 0)

IRs:
REF_122(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_123(uint256) -> REF_122.accounted
TMP_235(bool) = REF_123 == 0
TMP_236(None) = SOLIDITY_CALL assert(bool)(TMP_235)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
assert(bool)(bids[receiver_address].received == 0)

IRs:
REF_124(GoTokenDutchAuction.Account) -> bids[receiver_address]
REF_125(uint256) -> REF_124.received
TMP_237(bool) = REF_125 == 0
TMP_238(None) = SOLIDITY_CALL assert(bool)(TMP_237)"];
23->24;
24[label="Node Type: RETURN 24

EXPRESSION:
true

IRs:
RETURN True"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
isDistributor()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isDistributor()()"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
atStage(Stages.AuctionEnded)

IRs:
REF_126(GoTokenDutchAuction.Stages) -> Stages.AuctionEnded
MODIFIER_CALL, GoTokenDutchAuction.atStage(GoTokenDutchAuction.Stages)(REF_126)"];
26->1;
}
// Function: 2224.sol-GoTokenDutchAuction-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bid()

IRs:
INTERNAL_CALL, GoTokenDutchAuction.bid()()"];
}
// Function: 2224.sol-GoTokenDutchAuction-finalizeAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stage == Stages.AuctionSetUp || stage == Stages.AuctionStarted)

IRs:
REF_101(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
TMP_202(bool) = stage == REF_101
REF_102(GoTokenDutchAuction.Stages) -> Stages.AuctionStarted
TMP_203(bool) = stage == REF_102
TMP_204(bool) = TMP_202 || TMP_203
TMP_205(None) = SOLIDITY_CALL require(bool)(TMP_204)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
final_price = token_multiplier * received_wei_with_bonus / num_tokens_auctioned

IRs:
TMP_206(uint256) = token_multiplier * received_wei_with_bonus
TMP_207(uint256) = TMP_206 / num_tokens_auctioned
final_price(uint256) := TMP_207(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
end_time = now

IRs:
end_time(uint256) := now(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stage = Stages.AuctionEnded

IRs:
REF_103(GoTokenDutchAuction.Stages) -> Stages.AuctionEnded
stage(GoTokenDutchAuction.Stages) := REF_103(GoTokenDutchAuction.Stages)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
AuctionEnded(final_price)

IRs:
Emit AuctionEnded(final_price)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(final_price > 0)

IRs:
TMP_209(bool) = final_price > 0
TMP_210(None) = SOLIDITY_CALL assert(bool)(TMP_209)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isOwner()()"];
7->1;
}
// Function: 2224.sol-GoTokenDutchAuction-isDistributor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == distributor_address)

IRs:
TMP_283(bool) = msg.sender == distributor_address
TMP_284(None) = SOLIDITY_CALL require(bool)(TMP_283)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2224.sol-GoTokenDutchAuction-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner_address)

IRs:
TMP_279(bool) = msg.sender == owner_address
TMP_280(None) = SOLIDITY_CALL require(bool)(TMP_279)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2224.sol-GoTokenDutchAuction-isWhitelister()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == whitelister_address)

IRs:
TMP_281(bool) = msg.sender == whitelister_address
TMP_282(None) = SOLIDITY_CALL require(bool)(TMP_281)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2224.sol-GoTokenDutchAuction-price()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
stage == Stages.AuctionEnded || stage == Stages.TokensDistributed

IRs:
REF_127(GoTokenDutchAuction.Stages) -> Stages.AuctionEnded
TMP_241(bool) = stage == REF_127
REF_128(GoTokenDutchAuction.Stages) -> Stages.TokensDistributed
TMP_242(bool) = stage == REF_128
TMP_243(bool) = TMP_241 || TMP_242
CONDITION TMP_243"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
calcTokenPrice()

IRs:
TMP_244(uint256) = INTERNAL_CALL, GoTokenDutchAuction.calcTokenPrice()()
RETURN TMP_244"];
}
// Function: 2224.sol-GoTokenDutchAuction-remainingFundsToEndAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
required_wei_at_price = num_tokens_auctioned * price() / token_multiplier

IRs:
TMP_245(uint256) = INTERNAL_CALL, GoTokenDutchAuction.price()()
TMP_246(uint256) = num_tokens_auctioned * TMP_245
TMP_247(uint256) = TMP_246 / token_multiplier
required_wei_at_price(uint256) := TMP_247(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
required_wei_at_price <= received_wei

IRs:
TMP_248(bool) = required_wei_at_price <= received_wei
CONDITION TMP_248"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
required_wei_at_price - received_wei

IRs:
TMP_249(uint256) = required_wei_at_price - received_wei
RETURN TMP_249"];
}
// Function: 2224.sol-GoTokenDutchAuction-removeFromPrivateSaleWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _bidder_addresses.length

IRs:
REF_69 -> LENGTH _bidder_addresses
TMP_124(bool) = i < REF_69
CONDITION TMP_124"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
privatesalewhitelist[_bidder_addresses[i]] = false

IRs:
REF_70(address) -> _bidder_addresses[i]
REF_71(bool) -> privatesalewhitelist[REF_70]
REF_71(bool) (->privatesalewhitelist) := False(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
RemovedFromPrivateSaleWhitelist(_bidder_addresses[i])

IRs:
REF_72(address) -> _bidder_addresses[i]
Emit RemovedFromPrivateSaleWhitelist(REF_72)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_126(uint32) := i(uint32)
i(uint32) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isOwner()()"];
8->3;
}
// Function: 2224.sol-GoTokenDutchAuction-removeFromPublicSaleWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _bidder_addresses.length

IRs:
REF_61 -> LENGTH _bidder_addresses
TMP_116(bool) = i < REF_61
CONDITION TMP_116"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
publicsalewhitelist[_bidder_addresses[i]] = false

IRs:
REF_62(address) -> _bidder_addresses[i]
REF_63(bool) -> publicsalewhitelist[REF_62]
REF_63(bool) (->publicsalewhitelist) := False(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
RemovedFromPublicSaleWhitelist(_bidder_addresses[i])

IRs:
REF_64(address) -> _bidder_addresses[i]
Emit RemovedFromPublicSaleWhitelist(REF_64)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_118(uint32) := i(uint32)
i(uint32) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWhitelister()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isWhitelister()()"];
8->3;
}
// Function: 2224.sol-GoTokenDutchAuction-setup(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token_address != 0x0)

IRs:
TMP_90(bool) = _token_address != 0
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = GoToken(_token_address)

IRs:
TMP_92 = CONVERT _token_address to GoToken
token(GoToken) := TMP_92(GoToken)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
num_tokens_auctioned = token.balanceOf(address(this))

IRs:
TMP_93 = CONVERT this to address
TMP_94(uint256) = HIGH_LEVEL_CALL, dest:token(GoToken), function:balanceOf, arguments:['TMP_93']  
num_tokens_auctioned(uint256) := TMP_94(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token_multiplier = 10 ** (token.decimals())

IRs:
TMP_95(uint256) = HIGH_LEVEL_CALL, dest:token(GoToken), function:decimals, arguments:[]  
TMP_96(uint256) = 10 ** TMP_95
token_multiplier(uint256) := TMP_96(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stage = Stages.AuctionSetUp

IRs:
REF_51(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
stage(GoTokenDutchAuction.Stages) := REF_51(GoTokenDutchAuction.Stages)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Setup()

IRs:
Emit Setup()"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
atStage(Stages.AuctionDeployed)

IRs:
REF_52(GoTokenDutchAuction.Stages) -> Stages.AuctionDeployed
MODIFIER_CALL, GoTokenDutchAuction.atStage(GoTokenDutchAuction.Stages)(REF_52)"];
8->1;
}
// Function: 2224.sol-GoTokenDutchAuction-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
bid_threshold = 10000000000000000

IRs:
bid_threshold(uint256) := 10000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
CURVE_CUTOFF_DURATION = 691200

IRs:
CURVE_CUTOFF_DURATION(uint256) := 691200(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
BONUS_DAY1_DURATION = 86400

IRs:
BONUS_DAY1_DURATION(uint256) := 86400(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
BONUS_DAY2_DURATION = 172800

IRs:
BONUS_DAY2_DURATION(uint256) := 172800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
BONUS_DAY3_DURATION = 259200

IRs:
BONUS_DAY3_DURATION(uint256) := 259200(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
TOKEN_CLAIM_WAIT_PERIOD = 0

IRs:
TOKEN_CLAIM_WAIT_PERIOD(uint256) := 0(uint256)"];
}
// Function: 2224.sol-GoTokenDutchAuction-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
currentBonus = 0

IRs:
currentBonus(uint256) := 0(uint256)"];
}
// Function: 2224.sol-GoTokenDutchAuction-startAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stage = Stages.AuctionStarted

IRs:
REF_73(GoTokenDutchAuction.Stages) -> Stages.AuctionStarted
stage(GoTokenDutchAuction.Stages) := REF_73(GoTokenDutchAuction.Stages)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auction_start_time = now

IRs:
auction_start_time(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
start_block = block.number

IRs:
start_block(uint256) := block.number(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
AuctionStarted(auction_start_time,start_block)

IRs:
Emit AuctionStarted(auction_start_time,start_block)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, GoTokenDutchAuction.isOwner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
atStage(Stages.AuctionSetUp)

IRs:
REF_74(GoTokenDutchAuction.Stages) -> Stages.AuctionSetUp
MODIFIER_CALL, GoTokenDutchAuction.atStage(GoTokenDutchAuction.Stages)(REF_74)"];
6->1;
}
// Function: 2224.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_who]

IRs:
REF_18(mapping(address => uint256)) -> allowed[_owner]
REF_19(uint256) -> REF_18[_who]
RETURN REF_19"];
}
// Function: 2224.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_who != 0x0)

IRs:
TMP_26(bool) = _who != 0
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value == 0 || allowed[msg.sender][_who] == 0)

IRs:
TMP_28(bool) = _value == 0
REF_14(mapping(address => uint256)) -> allowed[msg.sender]
REF_15(uint256) -> REF_14[_who]
TMP_29(bool) = REF_15 == 0
TMP_30(bool) = TMP_28 || TMP_29
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_who] = _value

IRs:
REF_16(mapping(address => uint256)) -> allowed[msg.sender]
REF_17(uint256) -> REF_16[_who]
REF_17(uint256) (->allowed) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(msg.sender,_who,_value)

IRs:
Emit Approval(msg.sender,_who,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2224.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_20(uint256) -> balances[_owner]
RETURN REF_20"];
}
// Function: 2224.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_0(bool) = _to != 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_2 = CONVERT this to address
TMP_3(bool) = _to != TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_5(bool) = REF_0 >= _value
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balances[_to] + _value >= balances[_to])

IRs:
REF_1(uint256) -> balances[_to]
TMP_7(uint256) = REF_1 + _value
REF_2(uint256) -> balances[_to]
TMP_8(bool) = TMP_7 >= REF_2
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2224.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != 0x0)

IRs:
TMP_11(bool) = _from != 0
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_13(bool) = _to != 0
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_15 = CONVERT this to address
TMP_16(bool) = _to != TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balances[_from] >= _value)

IRs:
REF_5(uint256) -> balances[_from]
TMP_18(bool) = REF_5 >= _value
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(allowed[_from][msg.sender] >= _value)

IRs:
REF_6(mapping(address => uint256)) -> allowed[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_20(bool) = REF_7 >= _value
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(balances[_to] + _value >= balances[_to])

IRs:
REF_8(uint256) -> balances[_to]
TMP_22(uint256) = REF_8 + _value
REF_9(uint256) -> balances[_to]
TMP_23(bool) = TMP_22 >= REF_9
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] += _value

IRs:
REF_10(uint256) -> balances[_to]
REF_10(-> balances) = REF_10 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_from] -= _value

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
REF_13(-> allowed) = REF_13 - _value"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2224.sol-Token-allowance(address,address)
digraph{
}
// Function: 2224.sol-Token-approve(address,uint256)
digraph{
}
// Function: 2224.sol-Token-balanceOf(address)
digraph{
}
// Function: 2224.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 2224.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
