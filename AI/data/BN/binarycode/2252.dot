digraph G {
// Function: 2252.sol-AccessAdmin-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2252.sol-AccessAdmin-onlyAccess()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_3(bool) -> actionContracts[msg.sender]
TMP_20(None) = SOLIDITY_CALL require(bool)(REF_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2252.sol-AccessAdmin-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(adminContracts[msg.sender])

IRs:
REF_2(bool) -> adminContracts[msg.sender]
TMP_19(None) = SOLIDITY_CALL require(bool)(REF_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2252.sol-AccessAdmin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2252.sol-AccessAdmin-setActionContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
actionContracts[_actionAddr] = _useful

IRs:
REF_1(bool) -> actionContracts[_actionAddr]
REF_1(bool) (->actionContracts) := _useful(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 2252.sol-AccessAdmin-setAdminContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _addr != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adminContracts[_addr] = _useful

IRs:
REF_0(bool) -> adminContracts[_addr]
REF_0(bool) (->adminContracts) := _useful(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2252.sol-AccessAdmin-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2252.sol-CardsInterface-balanceOf(address)
digraph{
}
// Function: 2252.sol-CardsInterface-removeUnitMultipliers(address,uint256,uint256,uint256)
digraph{
}
// Function: 2252.sol-CardsInterface-updatePlayersCoinByOut(address)
digraph{
}
// Function: 2252.sol-CardsInterface-updatePlayersCoinByPurchase(address,uint256)
digraph{
}
// Function: 2252.sol-CardsInterface-upgradeUnitMultipliers(address,uint256,uint256,uint256)
digraph{
}
// Function: 2252.sol-CardsRaffle-CardsRaffle()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setAdminContract(msg.sender,true)

IRs:
INTERNAL_CALL, AccessAdmin.setAdminContract(address,bool)(msg.sender,True)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setActionContract(msg.sender,true)

IRs:
INTERNAL_CALL, AccessAdmin.setActionContract(address,bool)(msg.sender,True)"];
}
// Function: 2252.sol-CardsRaffle-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2252.sol-CardsRaffle-assignRafflePrize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
raffleWinner = winner

IRs:
raffleWinner(address) := winner(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newPrice = (rare.rareStartPrice() * 25) / 20

IRs:
TMP_104(uint256) = HIGH_LEVEL_CALL, dest:rare(RareInterface), function:rareStartPrice, arguments:[]  
TMP_105(uint256) = TMP_104 * 25
TMP_106(uint256) = TMP_105 / 20
newPrice(uint256) := TMP_106(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rare.transferTokenByContract(raffleRareId,winner)

IRs:
HIGH_LEVEL_CALL, dest:rare(RareInterface), function:transferTokenByContract, arguments:['raffleRareId', 'winner']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rare.setRarePrice(raffleRareId,newPrice)

IRs:
HIGH_LEVEL_CALL, dest:rare(RareInterface), function:setRarePrice, arguments:['raffleRareId', 'newPrice']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cards.updatePlayersCoinByOut(winner)

IRs:
HIGH_LEVEL_CALL, dest:cards(CardsInterface), function:updatePlayersCoinByOut, arguments:['winner']  "];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
(None,None,None,None,upgradeClass,unitId,upgradeValue) = rare.getRareInfo(raffleRareId)

IRs:
TUPLE_0(uint256,address,uint256,uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:rare(RareInterface), function:getRareInfo, arguments:['raffleRareId']  
upgradeClass(uint256)= UNPACK TUPLE_0 index: 4 
unitId(uint256)= UNPACK TUPLE_0 index: 5 
upgradeValue(uint256)= UNPACK TUPLE_0 index: 6 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cards.upgradeUnitMultipliers(winner,upgradeClass,unitId,upgradeValue)

IRs:
HIGH_LEVEL_CALL, dest:cards(CardsInterface), function:upgradeUnitMultipliers, arguments:['winner', 'upgradeClass', 'unitId', 'upgradeValue']  "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
RaffleSuccessful(winner)

IRs:
Emit RaffleSuccessful(winner)"];
}
// Function: 2252.sol-CardsRaffle-awardRafflePrize(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(raffleEndTime < block.timestamp)

IRs:
TMP_72(bool) = raffleEndTime < block.timestamp
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(raffleWinner == 0)

IRs:
TMP_74(bool) = raffleWinner == 0
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(rare.getRareItemsOwner(raffleRareId) == getRareAddress())

IRs:
TMP_76(address) = HIGH_LEVEL_CALL, dest:rare(RareInterface), function:getRareItemsOwner, arguments:['raffleRareId']  
TMP_77(address) = INTERNAL_CALL, CardsRaffle.getRareAddress()()
TMP_78(bool) = TMP_76 == TMP_77
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! raffleWinningTicketSelected

IRs:
TMP_80 = UnaryType.BANG raffleWinningTicketSelected 
CONDITION TMP_80"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
drawRandomWinner()

IRs:
INTERNAL_CALL, CardsRaffle.drawRandomWinner()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
checkWinner != 0

IRs:
TMP_82(bool) = checkWinner != 0
CONDITION TMP_82"];
7->8[label="True"];
7->16[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tickets = ticketsBoughtByPlayer[checkWinner]

IRs:
REF_31(CardsRaffle.TicketPurchases) -> ticketsBoughtByPlayer[checkWinner]
tickets(CardsRaffle.TicketPurchases) := REF_31(CardsRaffle.TicketPurchases)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
tickets.numPurchases > 0 && checkIndex < tickets.numPurchases && tickets.raffleRareId == raffleRareId

IRs:
REF_32(uint256) -> tickets.numPurchases
TMP_83(bool) = REF_32 > 0
REF_33(uint256) -> tickets.numPurchases
TMP_84(bool) = checkIndex < REF_33
TMP_85(bool) = TMP_83 && TMP_84
REF_34(uint256) -> tickets.raffleRareId
TMP_86(bool) = REF_34 == raffleRareId
TMP_87(bool) = TMP_85 && TMP_86
CONDITION TMP_87"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
checkTicket = tickets.ticketsBought[checkIndex]

IRs:
REF_35(CardsRaffle.TicketPurchase[]) -> tickets.ticketsBought
REF_36(CardsRaffle.TicketPurchase) -> REF_35[checkIndex]
checkTicket(CardsRaffle.TicketPurchase) := REF_36(CardsRaffle.TicketPurchase)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
raffleTicketThatWon >= checkTicket.startId && raffleTicketThatWon <= checkTicket.endId

IRs:
REF_37(uint256) -> checkTicket.startId
TMP_88(bool) = raffleTicketThatWon >= REF_37
REF_38(uint256) -> checkTicket.endId
TMP_89(bool) = raffleTicketThatWon <= REF_38
TMP_90(bool) = TMP_88 && TMP_89
CONDITION TMP_90"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
assignRafflePrize(checkWinner)

IRs:
INTERNAL_CALL, CardsRaffle.assignRafflePrize(address)(checkWinner)"];
12->13;
13[label="Node Type: RETURN 13
"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->19;
17[label="Node Type: BEGIN_LOOP 17
"];
17->20;
18[label="Node Type: END_LOOP 18
"];
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
19->17;
20[label="Node Type: IF_LOOP 20

EXPRESSION:
i < rafflePlayers[raffleRareId].length

IRs:
REF_39(address[]) -> rafflePlayers[raffleRareId]
REF_40 -> LENGTH REF_39
TMP_92(bool) = i < REF_40
CONDITION TMP_92"];
20->21[label="True"];
20->18[label="False"];
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
player = rafflePlayers[raffleRareId][i]

IRs:
REF_41(address[]) -> rafflePlayers[raffleRareId]
REF_42(address) -> REF_41[i]
player(address) := REF_42(address)"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
playersTickets = ticketsBoughtByPlayer[player]

IRs:
REF_43(CardsRaffle.TicketPurchases) -> ticketsBoughtByPlayer[player]
playersTickets(CardsRaffle.TicketPurchases) := REF_43(CardsRaffle.TicketPurchases)"];
22->23;
23[label="Node Type: NEW VARIABLE 23

EXPRESSION:
endIndex = playersTickets.numPurchases - 1

IRs:
REF_44(uint256) -> playersTickets.numPurchases
TMP_93(uint256) = REF_44 - 1
endIndex(uint256) := TMP_93(uint256)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
raffleTicketThatWon >= playersTickets.ticketsBought[0].startId && raffleTicketThatWon <= playersTickets.ticketsBought[endIndex].endId

IRs:
REF_45(CardsRaffle.TicketPurchase[]) -> playersTickets.ticketsBought
REF_46(CardsRaffle.TicketPurchase) -> REF_45[0]
REF_47(uint256) -> REF_46.startId
TMP_94(bool) = raffleTicketThatWon >= REF_47
REF_48(CardsRaffle.TicketPurchase[]) -> playersTickets.ticketsBought
REF_49(CardsRaffle.TicketPurchase) -> REF_48[endIndex]
REF_50(uint256) -> REF_49.endId
TMP_95(bool) = raffleTicketThatWon <= REF_50
TMP_96(bool) = TMP_94 && TMP_95
CONDITION TMP_96"];
24->27[label="True"];
24->35[label="False"];
25[label="Node Type: BEGIN_LOOP 25
"];
25->28;
26[label="Node Type: END_LOOP 26
"];
26->35;
27[label="Node Type: NEW VARIABLE 27

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
27->25;
28[label="Node Type: IF_LOOP 28

EXPRESSION:
j < playersTickets.numPurchases

IRs:
REF_51(uint256) -> playersTickets.numPurchases
TMP_97(bool) = j < REF_51
CONDITION TMP_97"];
28->29[label="True"];
28->26[label="False"];
29[label="Node Type: NEW VARIABLE 29

EXPRESSION:
playerTicket = playersTickets.ticketsBought[j]

IRs:
REF_52(CardsRaffle.TicketPurchase[]) -> playersTickets.ticketsBought
REF_53(CardsRaffle.TicketPurchase) -> REF_52[j]
playerTicket(CardsRaffle.TicketPurchase) := REF_53(CardsRaffle.TicketPurchase)"];
29->30;
30[label="Node Type: IF 30

EXPRESSION:
raffleTicketThatWon >= playerTicket.startId && raffleTicketThatWon <= playerTicket.endId

IRs:
REF_54(uint256) -> playerTicket.startId
TMP_98(bool) = raffleTicketThatWon >= REF_54
REF_55(uint256) -> playerTicket.endId
TMP_99(bool) = raffleTicketThatWon <= REF_55
TMP_100(bool) = TMP_98 && TMP_99
CONDITION TMP_100"];
30->31[label="True"];
30->33[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
assignRafflePrize(player)

IRs:
INTERNAL_CALL, CardsRaffle.assignRafflePrize(address)(player)"];
31->32;
32[label="Node Type: RETURN 32
"];
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
j ++

IRs:
TMP_102(uint256) := j(uint256)
j(uint256) = j + 1"];
34->28;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
i ++

IRs:
TMP_103(uint256) := i(uint256)
i(uint256) = i + 1"];
36->20;
}
// Function: 2252.sol-CardsRaffle-buyRaffleTicket(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(raffleEndTime >= block.timestamp)

IRs:
TMP_37(bool) = raffleEndTime >= block.timestamp
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount > 0 && amount <= MAX_LIMIT)

IRs:
TMP_39(bool) = amount > 0
TMP_40(bool) = amount <= MAX_LIMIT
TMP_41(bool) = TMP_39 && TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
ticketsCost = SafeMath.mul(RAFFLE_TICKET_BASE_PRICE,amount)

IRs:
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['RAFFLE_TICKET_BASE_PRICE', 'amount'] 
ticketsCost(uint256) := TMP_43(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(cards.balanceOf(msg.sender) >= ticketsCost)

IRs:
TMP_44(uint256) = HIGH_LEVEL_CALL, dest:cards(CardsInterface), function:balanceOf, arguments:['msg.sender']  
TMP_45(bool) = TMP_44 >= ticketsCost
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cards.updatePlayersCoinByPurchase(msg.sender,ticketsCost)

IRs:
HIGH_LEVEL_CALL, dest:cards(CardsInterface), function:updatePlayersCoinByPurchase, arguments:['msg.sender', 'ticketsCost']  "];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
purchases = ticketsBoughtByPlayer[msg.sender]

IRs:
REF_9(CardsRaffle.TicketPurchases) -> ticketsBoughtByPlayer[msg.sender]
purchases(CardsRaffle.TicketPurchases) := REF_9(CardsRaffle.TicketPurchases)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
purchases.raffleRareId != raffleRareId

IRs:
REF_10(uint256) -> purchases.raffleRareId
TMP_48(bool) = REF_10 != raffleRareId
CONDITION TMP_48"];
7->8[label="True"];
7->11[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
purchases.numPurchases = 0

IRs:
REF_11(uint256) -> purchases.numPurchases
REF_11(uint256) (->purchases) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
purchases.raffleRareId = raffleRareId

IRs:
REF_12(uint256) -> purchases.raffleRareId
REF_12(uint256) (->purchases) := raffleRareId(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
rafflePlayers[raffleRareId].push(msg.sender)

IRs:
REF_13(address[]) -> rafflePlayers[raffleRareId]
REF_15 -> LENGTH REF_13
TMP_50(uint256) := REF_15(uint256)
TMP_51(uint256) = TMP_50 + 1
REF_15(uint256) (->rafflePlayers) := TMP_51(uint256)
REF_16(address) -> REF_13[TMP_50]
REF_16(address) (->rafflePlayers) := msg.sender(address)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
purchases.numPurchases == purchases.ticketsBought.length

IRs:
REF_17(uint256) -> purchases.numPurchases
REF_18(CardsRaffle.TicketPurchase[]) -> purchases.ticketsBought
REF_19 -> LENGTH REF_18
TMP_52(bool) = REF_17 == REF_19
CONDITION TMP_52"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
purchases.ticketsBought.length = SafeMath.add(purchases.ticketsBought.length,1)

IRs:
REF_20(CardsRaffle.TicketPurchase[]) -> purchases.ticketsBought
REF_21 -> LENGTH REF_20
REF_23(CardsRaffle.TicketPurchase[]) -> purchases.ticketsBought
REF_24 -> LENGTH REF_23
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_24', '1'] 
REF_21(uint256) (->purchases) := TMP_53(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
purchases.ticketsBought[purchases.numPurchases ++] = TicketPurchase(raffleTicketsBought,raffleTicketsBought + (amount - 1))

IRs:
REF_25(CardsRaffle.TicketPurchase[]) -> purchases.ticketsBought
REF_26(uint256) -> purchases.numPurchases
TMP_54(uint256) := REF_26(uint256)
REF_26(-> purchases) = REF_26 + 1
REF_27(CardsRaffle.TicketPurchase) -> REF_25[TMP_54]
TMP_55(uint256) = amount - 1
TMP_56(uint256) = raffleTicketsBought + TMP_55
TMP_57(CardsRaffle.TicketPurchase) = new TicketPurchase(raffleTicketsBought,TMP_56)
REF_27(CardsRaffle.TicketPurchase) (->purchases) := TMP_57(CardsRaffle.TicketPurchase)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
raffleTicketsBought = SafeMath.add(raffleTicketsBought,amount)

IRs:
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['raffleTicketsBought', 'amount'] 
raffleTicketsBought(uint256) := TMP_58(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
UnitBought(msg.sender,raffleRareId,amount)

IRs:
Emit UnitBought(msg.sender,raffleRareId,amount)"];
}
// Function: 2252.sol-CardsRaffle-drawRandomWinner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(raffleEndTime < block.timestamp)

IRs:
TMP_112(bool) = raffleEndTime < block.timestamp
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! raffleWinningTicketSelected)

IRs:
TMP_114 = UnaryType.BANG raffleWinningTicketSelected 
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
seed = SafeMath.add(raffleTicketsBought,block.timestamp)

IRs:
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['raffleTicketsBought', 'block.timestamp'] 
seed(uint256) := TMP_116(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
raffleTicketThatWon = addmod(uint256,uint256,uint256)(uint256(block.blockhash(block.number - 1)),seed,raffleTicketsBought)

IRs:
TMP_117(uint256) = block.number - 1
TMP_118(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_117)
TMP_119 = CONVERT TMP_118 to uint256
TMP_120(uint256) = SOLIDITY_CALL addmod(uint256,uint256,uint256)(TMP_119,seed,raffleTicketsBought)
raffleTicketThatWon(uint256) := TMP_120(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
raffleWinningTicketSelected = true

IRs:
raffleWinningTicketSelected(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
6->1;
}
// Function: 2252.sol-CardsRaffle-getLatestRaffleInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(raffleEndTime,raffleRareId,raffleTicketsBought,raffleWinner,raffleTicketThatWon)

IRs:
RETURN raffleEndTime,raffleRareId,raffleTicketsBought,raffleWinner,raffleTicketThatWon"];
}
// Function: 2252.sol-CardsRaffle-getPlayersTickets(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
playersTickets = ticketsBoughtByPlayer[player]

IRs:
REF_64(CardsRaffle.TicketPurchases) -> ticketsBoughtByPlayer[player]
playersTickets(CardsRaffle.TicketPurchases) := REF_64(CardsRaffle.TicketPurchases)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
playersTickets.raffleRareId == raffleRareId

IRs:
REF_65(uint256) -> playersTickets.raffleRareId
TMP_122(bool) = REF_65 == raffleRareId
CONDITION TMP_122"];
2->3[label="True"];
2->12[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
startIds = new uint256[](playersTickets.numPurchases)

IRs:
REF_66(uint256) -> playersTickets.numPurchases
TMP_124(uint256[])  = new uint256[](REF_66)
startIds(uint256[]) = ['TMP_124(uint256[])']"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
endIds = new uint256[](playersTickets.numPurchases)

IRs:
REF_67(uint256) -> playersTickets.numPurchases
TMP_126(uint256[])  = new uint256[](REF_67)
endIds(uint256[]) = ['TMP_126(uint256[])']"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->12;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < playersTickets.numPurchases

IRs:
REF_68(uint256) -> playersTickets.numPurchases
TMP_127(bool) = i < REF_68
CONDITION TMP_127"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
startIds[i] = playersTickets.ticketsBought[i].startId

IRs:
REF_69(uint256) -> startIds[i]
REF_70(CardsRaffle.TicketPurchase[]) -> playersTickets.ticketsBought
REF_71(CardsRaffle.TicketPurchase) -> REF_70[i]
REF_72(uint256) -> REF_71.startId
REF_69(uint256) (->startIds) := REF_72(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
endIds[i] = playersTickets.ticketsBought[i].endId

IRs:
REF_73(uint256) -> endIds[i]
REF_74(CardsRaffle.TicketPurchase[]) -> playersTickets.ticketsBought
REF_75(CardsRaffle.TicketPurchase) -> REF_74[i]
REF_76(uint256) -> REF_75.endId
REF_73(uint256) (->endIds) := REF_76(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_128(uint256) := i(uint256)
i(uint256) = i + 1"];
11->8;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(startIds,endIds)

IRs:
RETURN startIds,endIds"];
}
// Function: 2252.sol-CardsRaffle-getRafflePlayers(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(rafflePlayers[raffleId])

IRs:
REF_63(address[]) -> rafflePlayers[raffleId]
RETURN REF_63"];
}
// Function: 2252.sol-CardsRaffle-getRareAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rare

IRs:
RETURN rare"];
}
// Function: 2252.sol-CardsRaffle-onlyAccess()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_78(bool) -> actionContracts[msg.sender]
TMP_130(None) = SOLIDITY_CALL require(bool)(REF_78)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2252.sol-CardsRaffle-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(adminContracts[msg.sender])

IRs:
REF_77(bool) -> adminContracts[msg.sender]
TMP_129(None) = SOLIDITY_CALL require(bool)(REF_77)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2252.sol-CardsRaffle-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_131(bool) = msg.sender == owner
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2252.sol-CardsRaffle-setActionContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
actionContracts[_actionAddr] = _useful

IRs:
REF_5(bool) -> actionContracts[_actionAddr]
REF_5(bool) (->actionContracts) := _useful(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 2252.sol-CardsRaffle-setAdminContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _addr != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adminContracts[_addr] = _useful

IRs:
REF_4(bool) -> adminContracts[_addr]
REF_4(bool) (->adminContracts) := _useful(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2252.sol-CardsRaffle-setCardsAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cards = CardsInterface(_address)

IRs:
TMP_33 = CONVERT _address to CardsInterface
cards(CardsInterface) := TMP_33(CardsInterface)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2252.sol-CardsRaffle-setRareAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rare = RareInterface(_address)

IRs:
TMP_35 = CONVERT _address to RareInterface
rare(RareInterface) := TMP_35(RareInterface)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2252.sol-CardsRaffle-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
RAFFLE_TICKET_BASE_PRICE = 10000

IRs:
RAFFLE_TICKET_BASE_PRICE(uint256) := 10000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MAX_LIMIT = 1000

IRs:
MAX_LIMIT(uint256) := 1000(uint256)"];
}
// Function: 2252.sol-CardsRaffle-startRareRaffle(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(rareId > 0)

IRs:
TMP_60(bool) = rareId > 0
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rare.getRareItemsOwner(rareId) == getRareAddress())

IRs:
TMP_62(address) = HIGH_LEVEL_CALL, dest:rare(RareInterface), function:getRareItemsOwner, arguments:['rareId']  
TMP_63(address) = INTERNAL_CALL, CardsRaffle.getRareAddress()()
TMP_64(bool) = TMP_62 == TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(block.timestamp < endTime)

IRs:
TMP_66(bool) = block.timestamp < endTime
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
raffleRareId != 0

IRs:
TMP_68(bool) = raffleRareId != 0
CONDITION TMP_68"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(raffleWinner != 0)

IRs:
TMP_69(bool) = raffleWinner != 0
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
raffleWinningTicketSelected = false

IRs:
raffleWinningTicketSelected(bool) := False(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
raffleTicketThatWon = 0

IRs:
raffleTicketThatWon(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
raffleWinner = 0

IRs:
raffleWinner(address) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
raffleTicketsBought = 0

IRs:
raffleTicketsBought(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
raffleEndTime = endTime

IRs:
raffleEndTime(uint256) := endTime(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
raffleRareId = rareId

IRs:
raffleRareId(uint256) := rareId(uint256)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
13->1;
}
// Function: 2252.sol-CardsRaffle-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = newOwner != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2252.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2252.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2252.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2252.sol-RareInterface-getRareInfo(uint256)
digraph{
}
// Function: 2252.sol-RareInterface-getRareItemsOwner(uint256)
digraph{
}
// Function: 2252.sol-RareInterface-getRareItemsPrice(uint256)
digraph{
}
// Function: 2252.sol-RareInterface-rareStartPrice()
digraph{
}
// Function: 2252.sol-RareInterface-setRarePrice(uint256,uint256)
digraph{
}
// Function: 2252.sol-RareInterface-transferToken(address,address,uint256)
digraph{
}
// Function: 2252.sol-RareInterface-transferTokenByContract(uint256,address)
digraph{
}
// Function: 2252.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_142(uint256) = a + b
c(uint256) := TMP_142(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_143(bool) = c >= a
TMP_144(None) = SOLIDITY_CALL assert(bool)(TMP_143)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2252.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_138(uint256) = a / b
c(uint256) := TMP_138(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2252.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_133(bool) = a == 0
CONDITION TMP_133"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_134(uint256) = a * b
c(uint256) := TMP_134(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_135(uint256) = c / a
TMP_136(bool) = TMP_135 == b
TMP_137(None) = SOLIDITY_CALL assert(bool)(TMP_136)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2252.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_139(bool) = b <= a
TMP_140(None) = SOLIDITY_CALL assert(bool)(TMP_139)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_141(uint256) = a - b
RETURN TMP_141"];
}
}
