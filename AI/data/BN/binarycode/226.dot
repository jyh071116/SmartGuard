digraph G {
// Function: 226.sol-KeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_400'] 
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_402'] 
TMP_404(uint256) = TMP_403 / 2
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_401', 'TMP_404'] 
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_407(uint256) = TMP_405 / TMP_406
RETURN TMP_407"];
}
// Function: 226.sol-KeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_390(uint256) = INTERNAL_CALL, KeysCalc.eth(uint256)(_curKeys)
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_392(uint256) = INTERNAL_CALL, KeysCalc.eth(uint256)(TMP_391)
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_390', 'TMP_392'] 
RETURN TMP_393"];
}
// Function: 226.sol-KeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_394', '312500000000000000000000000'] 
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_395', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_396'] 
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_397', '74999921875000000000000000000000'] 
TMP_399(uint256) = TMP_398 / 156250000
RETURN TMP_399"];
}
// Function: 226.sol-KeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_387(uint256) = INTERNAL_CALL, KeysCalc.keys(uint256)(TMP_386)
TMP_388(uint256) = INTERNAL_CALL, KeysCalc.keys(uint256)(_curEth)
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_387', 'TMP_388'] 
RETURN TMP_389"];
}
// Function: 226.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_408 = CONVERT _input to bytes
_temp(bytes) := TMP_408(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_669 -> LENGTH _temp
_length(uint256) := REF_669(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_length <= 32 && _length > 0)

IRs:
TMP_409(bool) = _length <= 32
TMP_410(bool) = _length > 0
TMP_411(bool) = TMP_409 && TMP_410
TMP_412(None) = SOLIDITY_CALL require(bool)(TMP_411)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20)

IRs:
REF_670(None) -> _temp[0]
TMP_413(bool) = REF_670 != 32
TMP_414(uint256) = _length - 1
REF_671(None) -> _temp[TMP_414]
TMP_415(bool) = REF_671 != 32
TMP_416(bool) = TMP_413 && TMP_415
TMP_417(None) = SOLIDITY_CALL require(bool)(TMP_416)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_672(None) -> _temp[0]
TMP_418(bool) = REF_672 == 48
CONDITION TMP_418"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_temp[1] != 0x78)

IRs:
REF_673(None) -> _temp[1]
TMP_419(bool) = REF_673 != 120
TMP_420(None) = SOLIDITY_CALL require(bool)(TMP_419)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(_temp[1] != 0x58)

IRs:
REF_674(None) -> _temp[1]
TMP_421(bool) = REF_674 != 88
TMP_422(None) = SOLIDITY_CALL require(bool)(TMP_421)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_423(bool) = i < _length
CONDITION TMP_423"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_675(None) -> _temp[i]
TMP_424(bool) = REF_675 > 64
REF_676(None) -> _temp[i]
TMP_425(bool) = REF_676 < 91
TMP_426(bool) = TMP_424 && TMP_425
CONDITION TMP_426"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_677(bytes1) -> _temp[i]
REF_678(None) -> _temp[i]
TMP_427 = CONVERT REF_678 to uint256
TMP_428(uint256) = TMP_427 + 32
TMP_429 = CONVERT TMP_428 to bytes1
REF_677(bytes1) (->_temp) := TMP_429(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_430(bool) = _hasNonNumber == False
CONDITION TMP_430"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a))

IRs:
REF_679(None) -> _temp[i]
TMP_431(bool) = REF_679 == 32
REF_680(None) -> _temp[i]
TMP_432(bool) = REF_680 > 96
REF_681(None) -> _temp[i]
TMP_433(bool) = REF_681 < 123
TMP_434(bool) = TMP_432 && TMP_433
TMP_435(bool) = TMP_431 || TMP_434
REF_682(None) -> _temp[i]
TMP_436(bool) = REF_682 > 47
REF_683(None) -> _temp[i]
TMP_437(bool) = REF_683 < 58
TMP_438(bool) = TMP_436 && TMP_437
TMP_439(bool) = TMP_435 || TMP_438
TMP_440(None) = SOLIDITY_CALL require(bool)(TMP_439)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_684(None) -> _temp[i]
TMP_441(bool) = REF_684 == 32
CONDITION TMP_441"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(_temp[i + 1] != 0x20)

IRs:
TMP_442(uint256) = i + 1
REF_685(None) -> _temp[TMP_442]
TMP_443(bool) = REF_685 != 32
TMP_444(None) = SOLIDITY_CALL require(bool)(TMP_443)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_445(bool) = _hasNonNumber == False
REF_686(None) -> _temp[i]
TMP_446(bool) = REF_686 < 48
REF_687(None) -> _temp[i]
TMP_447(bool) = REF_687 > 57
TMP_448(bool) = TMP_446 || TMP_447
TMP_449(bool) = TMP_445 && TMP_448
CONDITION TMP_449"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_450(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool)(_hasNonNumber == true)

IRs:
TMP_451(bool) = _hasNonNumber == True
TMP_452(None) = SOLIDITY_CALL require(bool)(TMP_451)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 226.sol-POHCONTRACT-sendDividends()
digraph{
}
// Function: 226.sol-POHMO-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_368(bool) = msg.sender == admin
TMP_369(None) = SOLIDITY_CALL require(bool)(TMP_368)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(activated_ == false)

IRs:
TMP_370(bool) = activated_ == False
TMP_371(None) = SOLIDITY_CALL require(bool)(TMP_370)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_650(POHMODATASETS.Round) -> round_[1]
REF_651(uint256) -> REF_650.strt
TMP_372(uint256) = now + rndExtra_
TMP_373(uint256) = TMP_372 - rndGap_
REF_651(uint256) (->round_) := TMP_373(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_652(POHMODATASETS.Round) -> round_[1]
REF_653(uint256) -> REF_652.end
TMP_374(uint256) = now + rndInit_
TMP_375(uint256) = TMP_374 + rndExtra_
REF_653(uint256) (->round_) := TMP_375(uint256)"];
}
// Function: 226.sol-POHMO-buyCore(uint256,uint256,POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_247(POHMODATASETS.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.strt
TMP_140(uint256) = REF_248 + rndGap_
TMP_141(bool) = _now > TMP_140
REF_249(POHMODATASETS.Round) -> round_[_rID]
REF_250(uint256) -> REF_249.end
TMP_142(bool) = _now <= REF_250
REF_251(POHMODATASETS.Round) -> round_[_rID]
REF_252(uint256) -> REF_251.end
TMP_143(bool) = _now > REF_252
REF_253(POHMODATASETS.Round) -> round_[_rID]
REF_254(uint256) -> REF_253.plyr
TMP_144(bool) = REF_254 == 0
TMP_145(bool) = TMP_143 && TMP_144
TMP_146(bool) = TMP_142 || TMP_145
TMP_147(bool) = TMP_141 && TMP_146
CONDITION TMP_147"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,0,_eventData_)

IRs:
INTERNAL_CALL, POHMO.core(uint256,uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)(_rID,_pID,msg.value,_affID,0,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_255(POHMODATASETS.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.end
TMP_149(bool) = _now > REF_256
REF_257(POHMODATASETS.Round) -> round_[_rID]
REF_258(bool) -> REF_257.ended
TMP_150(bool) = REF_258 == False
TMP_151(bool) = TMP_149 && TMP_150
CONDITION TMP_151"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_259(POHMODATASETS.Round) -> round_[_rID]
REF_260(bool) -> REF_259.ended
REF_260(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_152(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.endRound(POHMODATASETS.EventReturns)(_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_152(POHMODATASETS.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_261(uint256) -> _eventData_.compressedData
REF_262(uint256) -> _eventData_.compressedData
TMP_153(uint256) = _now * 1000000000000000000
TMP_154(uint256) = REF_262 + TMP_153
REF_261(uint256) (->_eventData_) := TMP_154(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_263(uint256) -> _eventData_.compressedIDs
REF_264(uint256) -> _eventData_.compressedIDs
TMP_155(uint256) = REF_264 + _pID
REF_263(uint256) (->_eventData_) := TMP_155(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
PoHEVENTS.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PoHAmount,_eventData_.genAmount)

IRs:
REF_266(POHMODATASETS.Player) -> plyr_[_pID]
REF_267(bytes32) -> REF_266.name
REF_268(uint256) -> _eventData_.compressedData
REF_269(uint256) -> _eventData_.compressedIDs
REF_270(address) -> _eventData_.winnerAddr
REF_271(bytes32) -> _eventData_.winnerName
REF_272(uint256) -> _eventData_.amountWon
REF_273(uint256) -> _eventData_.newPot
REF_274(uint256) -> _eventData_.PoHAmount
REF_275(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_267,msg.value,REF_268,REF_269,REF_270,REF_271,REF_272,REF_273,REF_274,REF_275)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_276(POHMODATASETS.Player) -> plyr_[_pID]
REF_277(uint256) -> REF_276.gen
REF_278(POHMODATASETS.Player) -> plyr_[_pID]
REF_279(uint256) -> REF_278.gen
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_279', 'msg.value'] 
REF_277(uint256) (->plyr_) := TMP_157(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 226.sol-POHMO-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_18(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.determinePID(POHMODATASETS.EventReturns)(_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_18(POHMODATASETS.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_14(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_14(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _affCode == TMP_19
TMP_21(bool) = _affCode == msg.sender
TMP_22(bool) = TMP_20 || TMP_21
CONDITION TMP_22"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_15(POHMODATASETS.Player) -> plyr_[_pID]
REF_16(uint256) -> REF_15.laff
_affID(uint256) := REF_16(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_17(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_17(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_18(POHMODATASETS.Player) -> plyr_[_pID]
REF_19(uint256) -> REF_18.laff
TMP_23(bool) = _affID != REF_19
CONDITION TMP_23"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_20(POHMODATASETS.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
REF_21(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, POHMO.buyCore(uint256,uint256,POHMODATASETS.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POHMO.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 226.sol-POHMO-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_9(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.determinePID(POHMODATASETS.EventReturns)(_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_9(POHMODATASETS.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_7(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_7(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_10(bool) = _affCode == 0
TMP_11(bool) = _affCode == _pID
TMP_12(bool) = TMP_10 || TMP_11
CONDITION TMP_12"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_8(POHMODATASETS.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
_affCode(uint256) := REF_9(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_10(POHMODATASETS.Player) -> plyr_[_pID]
REF_11(uint256) -> REF_10.laff
TMP_13(bool) = _affCode != REF_11
CONDITION TMP_13"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_12(POHMODATASETS.Player) -> plyr_[_pID]
REF_13(uint256) -> REF_12.laff
REF_13(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, POHMO.buyCore(uint256,uint256,POHMODATASETS.EventReturns)(_pID,_affCode,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POHMO.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 226.sol-POHMO-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_28(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.determinePID(POHMODATASETS.EventReturns)(_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_28(POHMODATASETS.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_22(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_22(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_29(bool) = _affCode == 
REF_23(POHMODATASETS.Player) -> plyr_[_pID]
REF_24(bytes32) -> REF_23.name
TMP_30(bool) = _affCode == REF_24
TMP_31(bool) = TMP_29 || TMP_30
CONDITION TMP_31"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_25(POHMODATASETS.Player) -> plyr_[_pID]
REF_26(uint256) -> REF_25.laff
_affID(uint256) := REF_26(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_27(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_27(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_28(POHMODATASETS.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
TMP_32(bool) = _affID != REF_29
CONDITION TMP_32"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_30(POHMODATASETS.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
REF_31(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, POHMO.buyCore(uint256,uint256,POHMODATASETS.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POHMO.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 226.sol-POHMO-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_384(POHMODATASETS.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.strt
TMP_204(uint256) = REF_385 + rndGap_
TMP_205(bool) = _now > TMP_204
REF_386(POHMODATASETS.Round) -> round_[_rID]
REF_387(uint256) -> REF_386.end
TMP_206(bool) = _now <= REF_387
REF_388(POHMODATASETS.Round) -> round_[_rID]
REF_389(uint256) -> REF_388.end
TMP_207(bool) = _now > REF_389
REF_390(POHMODATASETS.Round) -> round_[_rID]
REF_391(uint256) -> REF_390.plyr
TMP_208(bool) = REF_391 == 0
TMP_209(bool) = TMP_207 && TMP_208
TMP_210(bool) = TMP_206 || TMP_209
TMP_211(bool) = TMP_205 && TMP_210
CONDITION TMP_211"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_392(POHMODATASETS.Round) -> round_[_rID]
REF_393(uint256) -> REF_392.eth
TMP_212(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keysRec(uint256,uint256), arguments:['REF_393', '_eth'] 
RETURN TMP_212"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_213(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_213"];
}
// Function: 226.sol-POHMO-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_374(POHMODATASETS.Round) -> round_[_rIDlast]
REF_375(uint256) -> REF_374.mask
REF_377(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_378(POHMODATASETS.PlayerRounds) -> REF_377[_rIDlast]
REF_379(uint256) -> REF_378.keys
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_375', 'REF_379'] 
TMP_202(uint256) = TMP_201 / 1000000000000000000
REF_381(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_382(POHMODATASETS.PlayerRounds) -> REF_381[_rIDlast]
REF_383(uint256) -> REF_382.mask
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_202', 'REF_383'] 
RETURN TMP_203"];
}
// Function: 226.sol-POHMO-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
POHToken = POHCONTRACT(token)

IRs:
TMP_0 = CONVERT token to POHCONTRACT
POHToken(POHCONTRACT) := TMP_0(POHCONTRACT)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PlayerBook = PlayerBookInterface(playerbook)

IRs:
TMP_1 = CONVERT playerbook to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_1(PlayerBookInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[0] = POHMODATASETS.TeamFee(47,12)

IRs:
REF_0(POHMODATASETS.TeamFee) -> fees_[0]
TMP_2(POHMODATASETS.TeamFee) = new TeamFee(47,12)
REF_0(POHMODATASETS.TeamFee) (->fees_) := TMP_2(POHMODATASETS.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
potSplit_[0] = POHMODATASETS.PotSplit(15,10)

IRs:
REF_2(POHMODATASETS.PotSplit) -> potSplit_[0]
TMP_3(POHMODATASETS.PotSplit) = new PotSplit(15,10)
REF_2(POHMODATASETS.PotSplit) (->potSplit_) := TMP_3(POHMODATASETS.PotSplit)"];
}
// Function: 226.sol-POHMO-core(uint256,uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_313(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_314(POHMODATASETS.PlayerRounds) -> REF_313[_rID]
REF_315(uint256) -> REF_314.keys
TMP_177(bool) = REF_315 == 0
CONDITION TMP_177"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_178(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.managePlayer(uint256,POHMODATASETS.EventReturns)(_pID,_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_178(POHMODATASETS.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 5000000000000000000

IRs:
REF_316(POHMODATASETS.Round) -> round_[_rID]
REF_317(uint256) -> REF_316.eth
TMP_179(bool) = REF_317 < 100000000000000000000
REF_318(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_319(POHMODATASETS.PlayerRounds) -> REF_318[_rID]
REF_320(uint256) -> REF_319.eth
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_320', '_eth'] 
TMP_181(bool) = TMP_180 > 5000000000000000000
TMP_182(bool) = TMP_179 && TMP_181
CONDITION TMP_182"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (5000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_323(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_324(POHMODATASETS.PlayerRounds) -> REF_323[_rID]
REF_325(uint256) -> REF_324.eth
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['5000000000000000000', 'REF_325'] 
_availableLimit(uint256) := TMP_183(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_184(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_327(POHMODATASETS.Player) -> plyr_[_pID]
REF_328(uint256) -> REF_327.gen
REF_329(POHMODATASETS.Player) -> plyr_[_pID]
REF_330(uint256) -> REF_329.gen
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_330', '_refund'] 
REF_328(uint256) (->plyr_) := TMP_185(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_186(bool) = _eth > 1000000000
CONDITION TMP_186"];
10->11[label="True"];
10->30[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_332(POHMODATASETS.Round) -> round_[_rID]
REF_333(uint256) -> REF_332.eth
TMP_187(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keysRec(uint256,uint256), arguments:['REF_333', '_eth'] 
_keys(uint256) := TMP_187(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_188(bool) = _keys >= 1000000000000000000
CONDITION TMP_188"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, POHMO.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_335(POHMODATASETS.Round) -> round_[_rID]
REF_336(uint256) -> REF_335.plyr
TMP_190(bool) = REF_336 != _pID
CONDITION TMP_190"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_337(POHMODATASETS.Round) -> round_[_rID]
REF_338(uint256) -> REF_337.plyr
REF_338(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_339(POHMODATASETS.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.team
TMP_191(bool) = REF_340 != _team
CONDITION TMP_191"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_341(POHMODATASETS.Round) -> round_[_rID]
REF_342(uint256) -> REF_341.team
REF_342(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_343(uint256) -> _eventData_.compressedData
REF_344(uint256) -> _eventData_.compressedData
TMP_192(uint256) = REF_344 + 100
REF_343(uint256) (->_eventData_) := TMP_192(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_345(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_346(POHMODATASETS.PlayerRounds) -> REF_345[_rID]
REF_347(uint256) -> REF_346.keys
REF_349(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_350(POHMODATASETS.PlayerRounds) -> REF_349[_rID]
REF_351(uint256) -> REF_350.keys
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_351'] 
REF_347(uint256) (->plyrRnds_) := TMP_193(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_352(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_353(POHMODATASETS.PlayerRounds) -> REF_352[_rID]
REF_354(uint256) -> REF_353.eth
REF_356(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_357(POHMODATASETS.PlayerRounds) -> REF_356[_rID]
REF_358(uint256) -> REF_357.eth
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_358'] 
REF_354(uint256) (->plyrRnds_) := TMP_194(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_359(POHMODATASETS.Round) -> round_[_rID]
REF_360(uint256) -> REF_359.keys
REF_362(POHMODATASETS.Round) -> round_[_rID]
REF_363(uint256) -> REF_362.keys
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_363'] 
REF_360(uint256) (->round_) := TMP_195(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_364(POHMODATASETS.Round) -> round_[_rID]
REF_365(uint256) -> REF_364.eth
REF_367(POHMODATASETS.Round) -> round_[_rID]
REF_368(uint256) -> REF_367.eth
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_368'] 
REF_365(uint256) (->round_) := TMP_196(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
rndTmEth_[_rID][0] = _eth.add(rndTmEth_[_rID][0])

IRs:
REF_369(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_370(uint256) -> REF_369[0]
REF_372(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_373(uint256) -> REF_372[0]
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_373'] 
REF_370(uint256) (->rndTmEth_) := TMP_197(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,0,_eventData_)

IRs:
TMP_198(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.distributeExternal(uint256,uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)(_rID,_pID,_eth,_affID,0,_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_198(POHMODATASETS.EventReturns)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,0,_keys,_eventData_)

IRs:
TMP_199(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.distributeInternal(uint256,uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)(_rID,_pID,_eth,0,_keys,_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_199(POHMODATASETS.EventReturns)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
endTx(_pID,0,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, POHMO.endTx(uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)(_pID,0,_eth,_keys,_eventData_)"];
29->30;
30[label="Node Type: END_IF 30
"];
}
// Function: 226.sol-POHMO-determineNextRoundLength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
roundTime = uint256(keccak256()(abi.encodePacked(blockhash(uint256)(block.number - 1)))) % 6

IRs:
TMP_285(uint256) = block.number - 1
TMP_286(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_285)
TMP_287(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_286)
TMP_288(bytes32) = SOLIDITY_CALL keccak256()(TMP_287)
TMP_289 = CONVERT TMP_288 to uint256
TMP_290(uint256) = TMP_289 % 6
roundTime(uint256) := TMP_290(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
roundTime

IRs:
RETURN roundTime"];
3[label="Node Type: RETURN 3

EXPRESSION:
time

IRs:
RETURN time"];
}
// Function: 226.sol-POHMO-determinePID(POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_433(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_433(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_238(bool) = _pID == 0
CONDITION TMP_238"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_239(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_239(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_240(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_240(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_241(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_241(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_437(uint256) -> pIDxAddr_[msg.sender]
REF_437(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_438(POHMODATASETS.Player) -> plyr_[_pID]
REF_439(address) -> REF_438.addr
REF_439(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_242(bool) = _name != 
CONDITION TMP_242"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_440(uint256) -> pIDxName_[_name]
REF_440(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_441(POHMODATASETS.Player) -> plyr_[_pID]
REF_442(bytes32) -> REF_441.name
REF_442(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_443(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_444(bool) -> REF_443[_name]
REF_444(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_243(bool) = _laff != 0
TMP_244(bool) = _laff != _pID
TMP_245(bool) = TMP_243 && TMP_244
CONDITION TMP_245"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_445(POHMODATASETS.Player) -> plyr_[_pID]
REF_446(uint256) -> REF_445.laff
REF_446(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_447(uint256) -> _eventData_.compressedData
REF_448(uint256) -> _eventData_.compressedData
TMP_246(uint256) = REF_448 + 1
REF_447(uint256) (->_eventData_) := TMP_246(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 226.sol-POHMO-distributeExternal(uint256,uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_dev = _eth / 100

IRs:
TMP_307(uint256) = _eth / 100
_dev(uint256) := TMP_307(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_PoH = 0

IRs:
_PoH(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(admin).call.value(_dev)()

IRs:
TMP_308 = CONVERT admin to address
TMP_310(bool) = LOW_LEVEL_CALL, dest:TMP_308, function:call, arguments:[] value:_dev 
TMP_311 = UnaryType.BANG TMP_310 
CONDITION TMP_311"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_PoH = _dev

IRs:
_PoH(uint256) := _dev(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_dev = 0

IRs:
_dev(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_312(uint256) = _eth / 10
_aff(uint256) := TMP_312(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_313(bool) = _affID != _pID
REF_550(POHMODATASETS.Player) -> plyr_[_affID]
REF_551(bytes32) -> REF_550.name
TMP_314(bool) = REF_551 != 
TMP_315(bool) = TMP_313 && TMP_314
CONDITION TMP_315"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_552(POHMODATASETS.Player) -> plyr_[_affID]
REF_553(uint256) -> REF_552.aff
REF_555(POHMODATASETS.Player) -> plyr_[_affID]
REF_556(uint256) -> REF_555.aff
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_556'] 
REF_553(uint256) (->plyr_) := TMP_316(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
PoHEVENTS.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_558(POHMODATASETS.Player) -> plyr_[_affID]
REF_559(address) -> REF_558.addr
REF_560(POHMODATASETS.Player) -> plyr_[_affID]
REF_561(bytes32) -> REF_560.name
Emit onAffiliatePayout(_affID,REF_559,REF_561,_rID,_pID,_aff,now)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_PoH = _PoH.add(_aff)

IRs:
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_PoH', '_aff'] 
_PoH(uint256) := TMP_318(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_PoH = _PoH.add((_eth.mul(fees_[_team].poh)) / (100))

IRs:
REF_565(POHMODATASETS.TeamFee) -> fees_[_team]
REF_566(uint256) -> REF_565.poh
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_566'] 
TMP_320(uint256) = TMP_319 / 100
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_PoH', 'TMP_320'] 
_PoH(uint256) := TMP_321(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_PoH > 0

IRs:
TMP_322(bool) = _PoH > 0
CONDITION TMP_322"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
POHToken.call.value(_PoH)(bytes4(keccak256()(sendDividends())))

IRs:
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(sendDividends())
TMP_325 = CONVERT TMP_324 to bytes4
TMP_326(bool) = LOW_LEVEL_CALL, dest:POHToken, function:call, arguments:['TMP_325'] value:_PoH "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.PoHAmount = _PoH.add(_eventData_.PoHAmount)

IRs:
REF_569(uint256) -> _eventData_.PoHAmount
REF_571(uint256) -> _eventData_.PoHAmount
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_PoH', 'REF_571'] 
REF_569(uint256) (->_eventData_) := TMP_327(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 226.sol-POHMO-distributeInternal(uint256,uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_574(POHMODATASETS.TeamFee) -> fees_[_team]
REF_575(uint256) -> REF_574.gen
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_575'] 
TMP_330(uint256) = TMP_329 / 100
_gen(uint256) := TMP_330(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].poh)) / 100))

IRs:
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_332(uint256) = TMP_331 / 100
REF_580(POHMODATASETS.TeamFee) -> fees_[_team]
REF_581(uint256) -> REF_580.poh
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_581'] 
TMP_334(uint256) = TMP_333 / 100
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_332', 'TMP_334'] 
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_335'] 
_eth(uint256) := TMP_336(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_337(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_338(uint256) = INTERNAL_CALL, POHMO.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_338(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_dust > 0

IRs:
TMP_339(bool) = _dust > 0
CONDITION TMP_339"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_340(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_584(POHMODATASETS.Round) -> round_[_rID]
REF_585(uint256) -> REF_584.pot
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_588(POHMODATASETS.Round) -> round_[_rID]
REF_589(uint256) -> REF_588.pot
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_341', 'REF_589'] 
REF_585(uint256) (->round_) := TMP_342(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_590(uint256) -> _eventData_.genAmount
REF_592(uint256) -> _eventData_.genAmount
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_592'] 
REF_590(uint256) (->_eventData_) := TMP_343(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_593(uint256) -> _eventData_.potAmount
REF_593(uint256) (->_eventData_) := _pot(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 226.sol-POHMO-endRound(POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_457(POHMODATASETS.Round) -> round_[_rID]
REF_458(uint256) -> REF_457.plyr
_winPID(uint256) := REF_458(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_459(POHMODATASETS.Round) -> round_[_rID]
REF_460(uint256) -> REF_459.team
_winTID(uint256) := REF_460(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_461(POHMODATASETS.Round) -> round_[_rID]
REF_462(uint256) -> REF_461.pot
_pot(uint256) := REF_462(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_250(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_251(uint256) = TMP_250 / 100
_win(uint256) := TMP_251(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dev = (_pot / 50)

IRs:
TMP_252(uint256) = _pot / 50
_dev(uint256) := TMP_252(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_465(POHMODATASETS.PotSplit) -> potSplit_[_winTID]
REF_466(uint256) -> REF_465.gen
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_466'] 
TMP_254(uint256) = TMP_253 / 100
_gen(uint256) := TMP_254(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_PoH = (_pot.mul(potSplit_[_winTID].poh)) / 100

IRs:
REF_468(POHMODATASETS.PotSplit) -> potSplit_[_winTID]
REF_469(uint256) -> REF_468.poh
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_469'] 
TMP_256(uint256) = TMP_255 / 100
_PoH(uint256) := TMP_256(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_dev)).sub(_gen)).sub(_PoH)

IRs:
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_257', '_dev'] 
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_258', '_gen'] 
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_259', '_PoH'] 
_res(uint256) := TMP_260(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_475(POHMODATASETS.Round) -> round_[_rID]
REF_476(uint256) -> REF_475.keys
TMP_262(uint256) = TMP_261 / REF_476
_ppt(uint256) := TMP_262(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_479(POHMODATASETS.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.keys
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_480'] 
TMP_264(uint256) = TMP_263 / 1000000000000000000
TMP_265(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_264'] 
_dust(uint256) := TMP_265(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_266(bool) = _dust > 0
CONDITION TMP_266"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_267(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_268(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_483(POHMODATASETS.Player) -> plyr_[_winPID]
REF_484(uint256) -> REF_483.win
REF_486(POHMODATASETS.Player) -> plyr_[_winPID]
REF_487(uint256) -> REF_486.win
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_487'] 
REF_484(uint256) (->plyr_) := TMP_269(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_dev)

IRs:
Transfer dest:admin value:_dev"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
POHToken.call.value(_PoH)(bytes4(keccak256()(sendDividends())))

IRs:
TMP_272(bytes32) = SOLIDITY_CALL keccak256()(sendDividends())
TMP_273 = CONVERT TMP_272 to bytes4
TMP_274(bool) = LOW_LEVEL_CALL, dest:POHToken, function:call, arguments:['TMP_273'] value:_PoH "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_491(POHMODATASETS.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.mask
REF_494(POHMODATASETS.Round) -> round_[_rID]
REF_495(uint256) -> REF_494.mask
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_495'] 
REF_492(uint256) (->round_) := TMP_275(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_496(uint256) -> _eventData_.compressedData
REF_497(uint256) -> _eventData_.compressedData
REF_498(POHMODATASETS.Round) -> round_[_rID]
REF_499(uint256) -> REF_498.end
TMP_276(uint256) = REF_499 * 1000000
TMP_277(uint256) = REF_497 + TMP_276
REF_496(uint256) (->_eventData_) := TMP_277(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_500(uint256) -> _eventData_.compressedIDs
REF_501(uint256) -> _eventData_.compressedIDs
TMP_278(uint256) = _winPID * 100000000000000000000000000
TMP_279(uint256) = REF_501 + TMP_278
TMP_280(uint256) = _winTID * 100000000000000000
TMP_281(uint256) = TMP_279 + TMP_280
REF_500(uint256) (->_eventData_) := TMP_281(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_502(address) -> _eventData_.winnerAddr
REF_503(POHMODATASETS.Player) -> plyr_[_winPID]
REF_504(address) -> REF_503.addr
REF_502(address) (->_eventData_) := REF_504(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_505(bytes32) -> _eventData_.winnerName
REF_506(POHMODATASETS.Player) -> plyr_[_winPID]
REF_507(bytes32) -> REF_506.name
REF_505(bytes32) (->_eventData_) := REF_507(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_508(uint256) -> _eventData_.amountWon
REF_508(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_509(uint256) -> _eventData_.genAmount
REF_509(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.PoHAmount = _PoH

IRs:
REF_510(uint256) -> _eventData_.PoHAmount
REF_510(uint256) (->_eventData_) := _PoH(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_511(uint256) -> _eventData_.newPot
REF_511(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_282(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_283(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_512(POHMODATASETS.Round) -> round_[_rID]
REF_513(uint256) -> REF_512.strt
REF_513(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].end = now.add(rndMax_)

IRs:
REF_514(POHMODATASETS.Round) -> round_[_rID]
REF_515(uint256) -> REF_514.end
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndMax_'] 
REF_515(uint256) (->round_) := TMP_284(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_517(POHMODATASETS.Round) -> round_[_rID]
REF_518(uint256) -> REF_517.pot
REF_518(uint256) (->round_) := _res(uint256)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 226.sol-POHMO-endTx(uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_634(uint256) -> _eventData_.compressedData
REF_635(uint256) -> _eventData_.compressedData
TMP_360(uint256) = now * 1000000000000000000
TMP_361(uint256) = REF_635 + TMP_360
TMP_362(uint256) = _team * 100000000000000000000000000000
TMP_363(uint256) = TMP_361 + TMP_362
REF_634(uint256) (->_eventData_) := TMP_363(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_636(uint256) -> _eventData_.compressedIDs
REF_637(uint256) -> _eventData_.compressedIDs
TMP_364(uint256) = REF_637 + _pID
TMP_365(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_366(uint256) = TMP_364 + TMP_365
REF_636(uint256) (->_eventData_) := TMP_366(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
PoHEVENTS.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PoHAmount,_eventData_.genAmount,_eventData_.potAmount)

IRs:
REF_639(uint256) -> _eventData_.compressedData
REF_640(uint256) -> _eventData_.compressedIDs
REF_641(POHMODATASETS.Player) -> plyr_[_pID]
REF_642(bytes32) -> REF_641.name
REF_643(address) -> _eventData_.winnerAddr
REF_644(bytes32) -> _eventData_.winnerName
REF_645(uint256) -> _eventData_.amountWon
REF_646(uint256) -> _eventData_.newPot
REF_647(uint256) -> _eventData_.PoHAmount
REF_648(uint256) -> _eventData_.genAmount
REF_649(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_639,REF_640,REF_642,msg.sender,_eth,_keys,REF_643,REF_644,REF_645,REF_646,REF_647,REF_648,REF_649)"];
}
// Function: 226.sol-POHMO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_4(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.determinePID(POHMODATASETS.EventReturns)(_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_4(POHMODATASETS.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_4(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_5(POHMODATASETS.Player) -> plyr_[_pID]
REF_6(uint256) -> REF_5.laff
INTERNAL_CALL, POHMO.buyCore(uint256,uint256,POHMODATASETS.EventReturns)(_pID,REF_6,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POHMO.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 226.sol-POHMO-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_117(POHMODATASETS.Round) -> round_[_rID]
REF_118(uint256) -> REF_117.strt
TMP_93(uint256) = REF_118 + rndGap_
TMP_94(bool) = _now > TMP_93
REF_119(POHMODATASETS.Round) -> round_[_rID]
REF_120(uint256) -> REF_119.end
TMP_95(bool) = _now <= REF_120
REF_121(POHMODATASETS.Round) -> round_[_rID]
REF_122(uint256) -> REF_121.end
TMP_96(bool) = _now > REF_122
REF_123(POHMODATASETS.Round) -> round_[_rID]
REF_124(uint256) -> REF_123.plyr
TMP_97(bool) = REF_124 == 0
TMP_98(bool) = TMP_96 && TMP_97
TMP_99(bool) = TMP_95 || TMP_98
TMP_100(bool) = TMP_94 && TMP_99
CONDITION TMP_100"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_125(POHMODATASETS.Round) -> round_[_rID]
REF_126(uint256) -> REF_125.keys
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_126', '1000000000000000000'] 
TMP_102(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.ethRec(uint256,uint256), arguments:['TMP_101', '1000000000000000000'] 
RETURN TMP_102"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 226.sol-POHMO-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3])

IRs:
REF_199(POHMODATASETS.Round) -> round_[_rID]
REF_200(uint256) -> REF_199.ico
REF_201(POHMODATASETS.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.keys
REF_203(POHMODATASETS.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.end
REF_205(POHMODATASETS.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.strt
REF_207(POHMODATASETS.Round) -> round_[_rID]
REF_208(uint256) -> REF_207.pot
REF_209(POHMODATASETS.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.team
REF_211(POHMODATASETS.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.plyr
TMP_133(uint256) = REF_212 * 10
TMP_134(uint256) = REF_210 + TMP_133
REF_213(POHMODATASETS.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.plyr
REF_215(POHMODATASETS.Player) -> plyr_[REF_214]
REF_216(address) -> REF_215.addr
REF_217(POHMODATASETS.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.plyr
REF_219(POHMODATASETS.Player) -> plyr_[REF_218]
REF_220(bytes32) -> REF_219.name
REF_221(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_222(uint256) -> REF_221[0]
REF_223(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_224(uint256) -> REF_223[1]
REF_225(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_226(uint256) -> REF_225[2]
REF_227(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_228(uint256) -> REF_227[3]
RETURN REF_200,_rID,REF_202,REF_204,REF_206,REF_208,TMP_134,REF_216,REF_220,REF_222,REF_224,REF_226,REF_228"];
}
// Function: 226.sol-POHMO-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_135 = CONVERT 0 to address
TMP_136(bool) = _addr == TMP_135
CONDITION TMP_136"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_137(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_229(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_229(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_230(POHMODATASETS.Player) -> plyr_[_pID]
REF_231(bytes32) -> REF_230.name
REF_232(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_233(POHMODATASETS.PlayerRounds) -> REF_232[_rID]
REF_234(uint256) -> REF_233.keys
REF_235(POHMODATASETS.Player) -> plyr_[_pID]
REF_236(uint256) -> REF_235.win
REF_237(POHMODATASETS.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.gen
REF_240(POHMODATASETS.Player) -> plyr_[_pID]
REF_241(uint256) -> REF_240.lrnd
TMP_138(uint256) = INTERNAL_CALL, POHMO.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_241)
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_238', 'TMP_138'] 
REF_242(POHMODATASETS.Player) -> plyr_[_pID]
REF_243(uint256) -> REF_242.aff
REF_244(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_245(POHMODATASETS.PlayerRounds) -> REF_244[_rID]
REF_246(uint256) -> REF_245.eth
RETURN _pID,REF_231,REF_234,REF_236,TMP_139,REF_243,REF_246"];
}
// Function: 226.sol-POHMO-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_139(POHMODATASETS.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.end
TMP_109(bool) = now > REF_140
REF_141(POHMODATASETS.Round) -> round_[_rID]
REF_142(bool) -> REF_141.ended
TMP_110(bool) = REF_142 == False
TMP_111(bool) = TMP_109 && TMP_110
REF_143(POHMODATASETS.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.plyr
TMP_112(bool) = REF_144 != 0
TMP_113(bool) = TMP_111 && TMP_112
CONDITION TMP_113"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_145(POHMODATASETS.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.plyr
TMP_114(bool) = REF_146 == _pID
CONDITION TMP_114"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_147(POHMODATASETS.Player) -> plyr_[_pID]
REF_148(uint256) -> REF_147.win
REF_150(POHMODATASETS.Round) -> round_[_rID]
REF_151(uint256) -> REF_150.pot
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_151', '48'] 
TMP_116(uint256) = TMP_115 / 100
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_148', 'TMP_116'] 
REF_153(POHMODATASETS.Player) -> plyr_[_pID]
REF_154(uint256) -> REF_153.gen
TMP_118(uint256) = INTERNAL_CALL, POHMO.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_157(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_158(POHMODATASETS.PlayerRounds) -> REF_157[_rID]
REF_159(uint256) -> REF_158.mask
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_118', 'REF_159'] 
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_154', 'TMP_119'] 
REF_160(POHMODATASETS.Player) -> plyr_[_pID]
REF_161(uint256) -> REF_160.aff
RETURN TMP_117,TMP_120,REF_161"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_162(POHMODATASETS.Player) -> plyr_[_pID]
REF_163(uint256) -> REF_162.win
REF_164(POHMODATASETS.Player) -> plyr_[_pID]
REF_165(uint256) -> REF_164.gen
TMP_121(uint256) = INTERNAL_CALL, POHMO.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_168(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_169(POHMODATASETS.PlayerRounds) -> REF_168[_rID]
REF_170(uint256) -> REF_169.mask
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_121', 'REF_170'] 
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_165', 'TMP_122'] 
REF_171(POHMODATASETS.Player) -> plyr_[_pID]
REF_172(uint256) -> REF_171.aff
RETURN REF_163,TMP_123,REF_172"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_173(POHMODATASETS.Player) -> plyr_[_pID]
REF_174(uint256) -> REF_173.win
REF_175(POHMODATASETS.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.gen
REF_178(POHMODATASETS.Player) -> plyr_[_pID]
REF_179(uint256) -> REF_178.lrnd
TMP_124(uint256) = INTERNAL_CALL, POHMO.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_179)
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_176', 'TMP_124'] 
REF_180(POHMODATASETS.Player) -> plyr_[_pID]
REF_181(uint256) -> REF_180.aff
RETURN REF_174,TMP_125,REF_181"];
}
// Function: 226.sol-POHMO-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_182(POHMODATASETS.Round) -> round_[_rID]
REF_183(uint256) -> REF_182.mask
REF_185(POHMODATASETS.Round) -> round_[_rID]
REF_186(uint256) -> REF_185.pot
REF_188(POHMODATASETS.Round) -> round_[_rID]
REF_189(uint256) -> REF_188.team
REF_190(POHMODATASETS.PotSplit) -> potSplit_[REF_189]
REF_191(uint256) -> REF_190.gen
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_186', 'REF_191'] 
TMP_127(uint256) = TMP_126 / 100
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_127', '1000000000000000000'] 
REF_193(POHMODATASETS.Round) -> round_[_rID]
REF_194(uint256) -> REF_193.keys
TMP_129(uint256) = TMP_128 / REF_194
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_183', 'TMP_129'] 
REF_196(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_197(POHMODATASETS.PlayerRounds) -> REF_196[_rID]
REF_198(uint256) -> REF_197.keys
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_130', 'REF_198'] 
TMP_132(uint256) = TMP_131 / 1000000000000000000
RETURN TMP_132"];
}
// Function: 226.sol-POHMO-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_129(POHMODATASETS.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.end
TMP_103(bool) = _now < REF_130
CONDITION TMP_103"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_131(POHMODATASETS.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.strt
TMP_104(uint256) = REF_132 + rndGap_
TMP_105(bool) = _now > TMP_104
CONDITION TMP_105"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_133(POHMODATASETS.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.end
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_134', '_now'] 
RETURN TMP_106"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_136(POHMODATASETS.Round) -> round_[_rID]
REF_137(uint256) -> REF_136.strt
TMP_107(uint256) = REF_137 + rndGap_
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', '_now'] 
RETURN TMP_108"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 226.sol-POHMO-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_396(POHMODATASETS.Round) -> round_[_rID]
REF_397(uint256) -> REF_396.strt
TMP_214(uint256) = REF_397 + rndGap_
TMP_215(bool) = _now > TMP_214
REF_398(POHMODATASETS.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.end
TMP_216(bool) = _now <= REF_399
REF_400(POHMODATASETS.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.end
TMP_217(bool) = _now > REF_401
REF_402(POHMODATASETS.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.plyr
TMP_218(bool) = REF_403 == 0
TMP_219(bool) = TMP_217 && TMP_218
TMP_220(bool) = TMP_216 || TMP_219
TMP_221(bool) = TMP_215 && TMP_220
CONDITION TMP_221"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_404(POHMODATASETS.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.keys
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_405', '_keys'] 
TMP_223(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.ethRec(uint256,uint256), arguments:['TMP_222', '_keys'] 
RETURN TMP_223"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_224(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_224"];
}
// Function: 226.sol-POHMO-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(activated_ == true)

IRs:
TMP_376(bool) = activated_ == True
TMP_377(None) = SOLIDITY_CALL require(bool)(TMP_376)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 226.sol-POHMO-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_codeLength == 0)

IRs:
TMP_378(bool) = _codeLength == 0
TMP_379(None) = SOLIDITY_CALL require(bool)(TMP_378)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_380(bool) = _addr == tx.origin
TMP_381(None) = SOLIDITY_CALL require(bool)(TMP_380)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 226.sol-POHMO-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_eth >= 1000000000)

IRs:
TMP_382(bool) = _eth >= 1000000000
TMP_383(None) = SOLIDITY_CALL require(bool)(TMP_382)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_eth <= 100000000000000000000000)

IRs:
TMP_384(bool) = _eth <= 100000000000000000000000
TMP_385(None) = SOLIDITY_CALL require(bool)(TMP_384)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 226.sol-POHMO-managePlayer(uint256,POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_449(POHMODATASETS.Player) -> plyr_[_pID]
REF_450(uint256) -> REF_449.lrnd
TMP_247(bool) = REF_450 != 0
CONDITION TMP_247"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_451(POHMODATASETS.Player) -> plyr_[_pID]
REF_452(uint256) -> REF_451.lrnd
INTERNAL_CALL, POHMO.updateGenVault(uint256,uint256)(_pID,REF_452)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_453(POHMODATASETS.Player) -> plyr_[_pID]
REF_454(uint256) -> REF_453.lrnd
REF_454(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_455(uint256) -> _eventData_.compressedData
REF_456(uint256) -> _eventData_.compressedData
TMP_249(uint256) = REF_456 + 10
REF_455(uint256) (->_eventData_) := TMP_249(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 226.sol-POHMO-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin.transfer(msg.value)

IRs:
Transfer dest:admin value:msg.value"];
}
// Function: 226.sol-POHMO-reLoadCore(uint256,uint256,uint256,POHMODATASETS.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_281(POHMODATASETS.Round) -> round_[_rID]
REF_282(uint256) -> REF_281.strt
TMP_158(uint256) = REF_282 + rndGap_
TMP_159(bool) = _now > TMP_158
REF_283(POHMODATASETS.Round) -> round_[_rID]
REF_284(uint256) -> REF_283.end
TMP_160(bool) = _now <= REF_284
REF_285(POHMODATASETS.Round) -> round_[_rID]
REF_286(uint256) -> REF_285.end
TMP_161(bool) = _now > REF_286
REF_287(POHMODATASETS.Round) -> round_[_rID]
REF_288(uint256) -> REF_287.plyr
TMP_162(bool) = REF_288 == 0
TMP_163(bool) = TMP_161 && TMP_162
TMP_164(bool) = TMP_160 || TMP_163
TMP_165(bool) = TMP_159 && TMP_164
CONDITION TMP_165"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_289(POHMODATASETS.Player) -> plyr_[_pID]
REF_290(uint256) -> REF_289.gen
TMP_166(uint256) = INTERNAL_CALL, POHMO.withdrawEarnings(uint256)(_pID)
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_166', '_eth'] 
REF_290(uint256) (->plyr_) := TMP_167(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,0,_eventData_)

IRs:
INTERNAL_CALL, POHMO.core(uint256,uint256,uint256,uint256,uint256,POHMODATASETS.EventReturns)(_rID,_pID,_eth,_affID,0,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_292(POHMODATASETS.Round) -> round_[_rID]
REF_293(uint256) -> REF_292.end
TMP_169(bool) = _now > REF_293
REF_294(POHMODATASETS.Round) -> round_[_rID]
REF_295(bool) -> REF_294.ended
TMP_170(bool) = REF_295 == False
TMP_171(bool) = TMP_169 && TMP_170
CONDITION TMP_171"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_296(POHMODATASETS.Round) -> round_[_rID]
REF_297(bool) -> REF_296.ended
REF_297(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_172(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.endRound(POHMODATASETS.EventReturns)(_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_172(POHMODATASETS.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_298(uint256) -> _eventData_.compressedData
REF_299(uint256) -> _eventData_.compressedData
TMP_173(uint256) = _now * 1000000000000000000
TMP_174(uint256) = REF_299 + TMP_173
REF_298(uint256) (->_eventData_) := TMP_174(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_300(uint256) -> _eventData_.compressedIDs
REF_301(uint256) -> _eventData_.compressedIDs
TMP_175(uint256) = REF_301 + _pID
REF_300(uint256) (->_eventData_) := TMP_175(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
PoHEVENTS.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PoHAmount,_eventData_.genAmount)

IRs:
REF_303(POHMODATASETS.Player) -> plyr_[_pID]
REF_304(bytes32) -> REF_303.name
REF_305(uint256) -> _eventData_.compressedData
REF_306(uint256) -> _eventData_.compressedIDs
REF_307(address) -> _eventData_.winnerAddr
REF_308(bytes32) -> _eventData_.winnerName
REF_309(uint256) -> _eventData_.amountWon
REF_310(uint256) -> _eventData_.newPot
REF_311(uint256) -> _eventData_.PoHAmount
REF_312(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_304,REF_305,REF_306,REF_307,REF_308,REF_309,REF_310,REF_311,REF_312)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 226.sol-POHMO-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_39(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_39(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = _affCode == TMP_45
TMP_47(bool) = _affCode == msg.sender
TMP_48(bool) = TMP_46 || TMP_47
CONDITION TMP_48"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_40(POHMODATASETS.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
_affID(uint256) := REF_41(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_42(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_42(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_43(POHMODATASETS.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
TMP_49(bool) = _affID != REF_44
CONDITION TMP_49"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_45(POHMODATASETS.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
REF_46(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, POHMO.reLoadCore(uint256,uint256,uint256,POHMODATASETS.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POHMO.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 226.sol-POHMO-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_32(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_32(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_37(bool) = _affCode == 0
TMP_38(bool) = _affCode == _pID
TMP_39(bool) = TMP_37 || TMP_38
CONDITION TMP_39"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_33(POHMODATASETS.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
_affCode(uint256) := REF_34(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_35(POHMODATASETS.Player) -> plyr_[_pID]
REF_36(uint256) -> REF_35.laff
TMP_40(bool) = _affCode != REF_36
CONDITION TMP_40"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_37(POHMODATASETS.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
REF_38(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, POHMO.reLoadCore(uint256,uint256,uint256,POHMODATASETS.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POHMO.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 226.sol-POHMO-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_47(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_47(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_54(bool) = _affCode == 
REF_48(POHMODATASETS.Player) -> plyr_[_pID]
REF_49(bytes32) -> REF_48.name
TMP_55(bool) = _affCode == REF_49
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_50(POHMODATASETS.Player) -> plyr_[_pID]
REF_51(uint256) -> REF_50.laff
_affID(uint256) := REF_51(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_52(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_52(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_53(POHMODATASETS.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
TMP_57(bool) = _affID != REF_54
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_55(POHMODATASETS.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
REF_56(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, POHMO.reLoadCore(uint256,uint256,uint256,POHMODATASETS.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POHMO.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 226.sol-POHMO-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(PlayerBook))

IRs:
TMP_225 = CONVERT PlayerBook to address
TMP_226(bool) = msg.sender == TMP_225
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_409(uint256) -> pIDxAddr_[_addr]
TMP_228(bool) = REF_409 != _pID
CONDITION TMP_228"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_410(uint256) -> pIDxAddr_[_addr]
REF_410(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_411(uint256) -> pIDxName_[_name]
TMP_229(bool) = REF_411 != _pID
CONDITION TMP_229"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_412(uint256) -> pIDxName_[_name]
REF_412(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_413(POHMODATASETS.Player) -> plyr_[_pID]
REF_414(address) -> REF_413.addr
TMP_230(bool) = REF_414 != _addr
CONDITION TMP_230"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_415(POHMODATASETS.Player) -> plyr_[_pID]
REF_416(address) -> REF_415.addr
REF_416(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_417(POHMODATASETS.Player) -> plyr_[_pID]
REF_418(bytes32) -> REF_417.name
TMP_231(bool) = REF_418 != _name
CONDITION TMP_231"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_419(POHMODATASETS.Player) -> plyr_[_pID]
REF_420(bytes32) -> REF_419.name
REF_420(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_421(POHMODATASETS.Player) -> plyr_[_pID]
REF_422(uint256) -> REF_421.laff
TMP_232(bool) = REF_422 != _laff
CONDITION TMP_232"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_423(POHMODATASETS.Player) -> plyr_[_pID]
REF_424(uint256) -> REF_423.laff
REF_424(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_425(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_426(bool) -> REF_425[_name]
TMP_233(bool) = REF_426 == False
CONDITION TMP_233"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_427(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_428(bool) -> REF_427[_name]
REF_428(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 226.sol-POHMO-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(PlayerBook))

IRs:
TMP_234 = CONVERT PlayerBook to address
TMP_235(bool) = msg.sender == TMP_234
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_429(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_430(bool) -> REF_429[_name]
TMP_237(bool) = REF_430 == False
CONDITION TMP_237"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_431(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_432(bool) -> REF_431[_name]
REF_432(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 226.sol-POHMO-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_81(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_93(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_93(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PoHEVENTS.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_95(POHMODATASETS.Player) -> plyr_[_affID]
REF_96(address) -> REF_95.addr
REF_97(POHMODATASETS.Player) -> plyr_[_affID]
REF_98(bytes32) -> REF_97.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_96,REF_98,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
9->1;
}
// Function: 226.sol-POHMO-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_85(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_102(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_102(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PoHEVENTS.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_104(POHMODATASETS.Player) -> plyr_[_affID]
REF_105(address) -> REF_104.addr
REF_106(POHMODATASETS.Player) -> plyr_[_affID]
REF_107(bytes32) -> REF_106.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_105,REF_107,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
9->1;
}
// Function: 226.sol-POHMO-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_89(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_89(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_111(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_111(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PoHEVENTS.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_113(POHMODATASETS.Player) -> plyr_[_affID]
REF_114(address) -> REF_113.addr
REF_115(POHMODATASETS.Player) -> plyr_[_affID]
REF_116(bytes32) -> REF_115.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_114,REF_116,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
9->1;
}
// Function: 226.sol-POHMO-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = POHMO

IRs:
name(string) := POHMO(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = POHMO

IRs:
symbol(string) := POHMO(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInc_ = 10

IRs:
rndInc_(uint256) := 10(uint256)"];
}
// Function: 226.sol-POHMO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 1

IRs:
rndExtra_(uint256) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 1

IRs:
rndGap_(uint256) := 1(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 21600

IRs:
rndInit_(uint256) := 21600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 21600

IRs:
rndMax_(uint256) := 21600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 226.sol-POHMO-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_291(uint256) = INTERNAL_CALL, POHMO.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_291(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_292(bool) = _earnings > 0
CONDITION TMP_292"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_520(POHMODATASETS.Player) -> plyr_[_pID]
REF_521(uint256) -> REF_520.gen
REF_523(POHMODATASETS.Player) -> plyr_[_pID]
REF_524(uint256) -> REF_523.gen
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_524'] 
REF_521(uint256) (->plyr_) := TMP_293(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_525(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_526(POHMODATASETS.PlayerRounds) -> REF_525[_rIDlast]
REF_527(uint256) -> REF_526.mask
REF_529(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_530(POHMODATASETS.PlayerRounds) -> REF_529[_rIDlast]
REF_531(uint256) -> REF_530.mask
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_531'] 
REF_527(uint256) (->plyrRnds_) := TMP_294(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 226.sol-POHMO-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_595(POHMODATASETS.Round) -> round_[_rID]
REF_596(uint256) -> REF_595.keys
TMP_345(uint256) = TMP_344 / REF_596
_ppt(uint256) := TMP_345(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_597(POHMODATASETS.Round) -> round_[_rID]
REF_598(uint256) -> REF_597.mask
REF_600(POHMODATASETS.Round) -> round_[_rID]
REF_601(uint256) -> REF_600.mask
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_601'] 
REF_598(uint256) (->round_) := TMP_346(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_348(uint256) = TMP_347 / 1000000000000000000
_pearn(uint256) := TMP_348(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_603(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_604(POHMODATASETS.PlayerRounds) -> REF_603[_rID]
REF_605(uint256) -> REF_604.mask
REF_606(POHMODATASETS.Round) -> round_[_rID]
REF_607(uint256) -> REF_606.mask
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_607', '_keys'] 
TMP_350(uint256) = TMP_349 / 1000000000000000000
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_350', '_pearn'] 
REF_611(mapping(uint256 => POHMODATASETS.PlayerRounds)) -> plyrRnds_[_pID]
REF_612(POHMODATASETS.PlayerRounds) -> REF_611[_rID]
REF_613(uint256) -> REF_612.mask
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_351', 'REF_613'] 
REF_605(uint256) (->plyrRnds_) := TMP_352(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_616(POHMODATASETS.Round) -> round_[_rID]
REF_617(uint256) -> REF_616.keys
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_617'] 
TMP_354(uint256) = TMP_353 / 1000000000000000000
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_354'] 
RETURN TMP_355"];
}
// Function: 226.sol-POHMO-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_532(POHMODATASETS.Round) -> round_[_rID]
REF_533(uint256) -> REF_532.end
TMP_295(bool) = _now > REF_533
REF_534(POHMODATASETS.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.plyr
TMP_296(bool) = REF_535 == 0
TMP_297(bool) = TMP_295 && TMP_296
CONDITION TMP_297"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_298(uint256) = _keys / 1000000000000000000
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_298', 'rndInc_'] 
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_299', '_now'] 
_newTime(uint256) := TMP_300(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_301(uint256) = _keys / 1000000000000000000
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_301', 'rndInc_'] 
REF_540(POHMODATASETS.Round) -> round_[_rID]
REF_541(uint256) -> REF_540.end
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_302', 'REF_541'] 
_newTime(uint256) := TMP_303(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_305(bool) = _newTime < TMP_304
CONDITION TMP_305"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_543(POHMODATASETS.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.end
REF_544(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_545(POHMODATASETS.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.end
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_546(uint256) (->round_) := TMP_306(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 226.sol-POHMO-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_57(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_57(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_58(POHMODATASETS.Round) -> round_[_rID]
REF_59(uint256) -> REF_58.end
TMP_62(bool) = _now > REF_59
REF_60(POHMODATASETS.Round) -> round_[_rID]
REF_61(bool) -> REF_60.ended
TMP_63(bool) = REF_61 == False
TMP_64(bool) = TMP_62 && TMP_63
REF_62(POHMODATASETS.Round) -> round_[_rID]
REF_63(uint256) -> REF_62.plyr
TMP_65(bool) = REF_63 != 0
TMP_66(bool) = TMP_64 && TMP_65
CONDITION TMP_66"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_64(POHMODATASETS.Round) -> round_[_rID]
REF_65(bool) -> REF_64.ended
REF_65(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_67(POHMODATASETS.EventReturns) = INTERNAL_CALL, POHMO.endRound(POHMODATASETS.EventReturns)(_eventData_)
_eventData_(POHMODATASETS.EventReturns) := TMP_67(POHMODATASETS.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_68(uint256) = INTERNAL_CALL, POHMO.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_68(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_69(bool) = _eth > 0
CONDITION TMP_69"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_66(POHMODATASETS.Player) -> plyr_[_pID]
REF_67(address) -> REF_66.addr
Transfer dest:REF_67 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_69(uint256) -> _eventData_.compressedData
REF_70(uint256) -> _eventData_.compressedData
TMP_71(uint256) = _now * 1000000000000000000
TMP_72(uint256) = REF_70 + TMP_71
REF_69(uint256) (->_eventData_) := TMP_72(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_71(uint256) -> _eventData_.compressedIDs
REF_72(uint256) -> _eventData_.compressedIDs
TMP_73(uint256) = REF_72 + _pID
REF_71(uint256) (->_eventData_) := TMP_73(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
PoHEVENTS.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PoHAmount,_eventData_.genAmount)

IRs:
REF_74(POHMODATASETS.Player) -> plyr_[_pID]
REF_75(bytes32) -> REF_74.name
REF_76(uint256) -> _eventData_.compressedData
REF_77(uint256) -> _eventData_.compressedIDs
REF_78(address) -> _eventData_.winnerAddr
REF_79(bytes32) -> _eventData_.winnerName
REF_80(uint256) -> _eventData_.amountWon
REF_81(uint256) -> _eventData_.newPot
REF_82(uint256) -> _eventData_.PoHAmount
REF_83(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_75,_eth,REF_76,REF_77,REF_78,REF_79,REF_80,REF_81,REF_82,REF_83)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_75(uint256) = INTERNAL_CALL, POHMO.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_75(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_76(bool) = _eth > 0
CONDITION TMP_76"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_84(POHMODATASETS.Player) -> plyr_[_pID]
REF_85(address) -> REF_84.addr
Transfer dest:REF_85 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
PoHEVENTS.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_88(POHMODATASETS.Player) -> plyr_[_pID]
REF_89(bytes32) -> REF_88.name
Emit onWithdraw(_pID,msg.sender,REF_89,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POHMO.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POHMO.isHuman()()"];
23->1;
}
// Function: 226.sol-POHMO-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_618(POHMODATASETS.Player) -> plyr_[_pID]
REF_619(uint256) -> REF_618.lrnd
INTERNAL_CALL, POHMO.updateGenVault(uint256,uint256)(_pID,REF_619)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_620(POHMODATASETS.Player) -> plyr_[_pID]
REF_621(uint256) -> REF_620.win
REF_623(POHMODATASETS.Player) -> plyr_[_pID]
REF_624(uint256) -> REF_623.gen
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_621', 'REF_624'] 
REF_626(POHMODATASETS.Player) -> plyr_[_pID]
REF_627(uint256) -> REF_626.aff
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_357', 'REF_627'] 
_earnings(uint256) := TMP_358(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_359(bool) = _earnings > 0
CONDITION TMP_359"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_628(POHMODATASETS.Player) -> plyr_[_pID]
REF_629(uint256) -> REF_628.win
REF_629(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_630(POHMODATASETS.Player) -> plyr_[_pID]
REF_631(uint256) -> REF_630.gen
REF_631(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_632(POHMODATASETS.Player) -> plyr_[_pID]
REF_633(uint256) -> REF_632.aff
REF_633(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 226.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 226.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 226.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 226.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 226.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 226.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 226.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 226.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 226.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_461(uint256) = a + b
c(uint256) := TMP_461(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_462(bool) = c >= a
TMP_463(None) = SOLIDITY_CALL require(bool,string)(TMP_462,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 226.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_453(bool) = a == 0
CONDITION TMP_453"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_454(uint256) = a * b
c(uint256) := TMP_454(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_455(uint256) = c / a
TMP_456(bool) = TMP_455 == b
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 226.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_471(bool) = x == 0
CONDITION TMP_471"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_472(bool) = y == 0
CONDITION TMP_472"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_473(bool) = i < y
CONDITION TMP_473"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_474(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_474(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_475(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 226.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_470(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_470"];
}
// Function: 226.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_464(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_465(uint256) = TMP_464 / 2
z(uint256) := TMP_465(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_466(bool) = z < y
CONDITION TMP_466"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_467(uint256) = x / z
TMP_468(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_467,z)
TMP_469(uint256) = TMP_468 / 2
z(uint256) := TMP_469(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 226.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_458(bool) = b <= a
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_460(uint256) = a - b
RETURN TMP_460"];
}
}
