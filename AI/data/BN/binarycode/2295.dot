digraph G {
// Function: 2295.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 2295.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 2295.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_15(bool) = _value <= REF_0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2295.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 2295.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 2295.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 2295.sol-ERC20-totalSupply()
digraph{
}
// Function: 2295.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 2295.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 2295.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 2295.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 2295.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 2295.sol-ERC20Old-allowance(address,address)
digraph{
}
// Function: 2295.sol-ERC20Old-approve(address,uint256)
digraph{
}
// Function: 2295.sol-ERC20Old-balanceOf(address)
digraph{
}
// Function: 2295.sol-ERC20Old-totalSupply()
digraph{
}
// Function: 2295.sol-ERC20Old-transfer(address,uint256)
digraph{
}
// Function: 2295.sol-ERC20Old-transferFrom(address,address,uint256)
digraph{
}
// Function: 2295.sol-ERC20OldBasic-balanceOf(address)
digraph{
}
// Function: 2295.sol-ERC20OldBasic-totalSupply()
digraph{
}
// Function: 2295.sol-ERC20OldBasic-transfer(address,uint256)
digraph{
}
// Function: 2295.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2295.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_25(bool) = msg.sender == owner
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2295.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = newOwner != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2295.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2295.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2295.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2295.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 2295.sol-WrapperLock-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2295.sol-WrapperLock-WrapperLock(address,string,string,uint256,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
originalToken = _originalToken

IRs:
originalToken(address) := _originalToken(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TRANSFER_PROXY = _transferProxy

IRs:
TRANSFER_PROXY(address) := _transferProxy(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isSigner[msg.sender] = true

IRs:
REF_16(bool) -> isSigner[msg.sender]
REF_16(bool) (->isSigner) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
erc20old = _erc20old

IRs:
erc20old(bool) := _erc20old(bool)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Ownable()

IRs:
INTERNAL_CALL, Ownable.Ownable()()"];
8->1;
}
// Function: 2295.sol-WrapperLock-addSigner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isSigner[msg.sender])

IRs:
REF_60(bool) -> isSigner[msg.sender]
TMP_128(None) = SOLIDITY_CALL require(bool)(REF_60)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isSigner[_newSigner] = true

IRs:
REF_61(bool) -> isSigner[_newSigner]
REF_61(bool) (->isSigner) := True(bool)"];
}
// Function: 2295.sol-WrapperLock-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_spender == TRANSFER_PROXY

IRs:
TMP_123(bool) = _spender == TRANSFER_PROXY
CONDITION TMP_123"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
2 ** 256 - 1

IRs:
TMP_124(uint256) = 2 ** 256
TMP_125(uint256) = TMP_124 - 1
RETURN TMP_125"];
3[label="Node Type: END_IF 3
"];
}
// Function: 2295.sol-WrapperLock-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_58(uint256) -> balances[_owner]
RETURN REF_58"];
}
// Function: 2295.sol-WrapperLock-deposit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_forTime >= 1)

IRs:
TMP_41(bool) = _forTime >= 1
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now + _forTime * 3600 >= depositLock[msg.sender])

IRs:
TMP_43(uint256) = _forTime * 3600
TMP_44(uint256) = now + TMP_43
REF_17(uint256) -> depositLock[msg.sender]
TMP_45(bool) = TMP_44 >= REF_17
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
erc20old

IRs:
CONDITION erc20old"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ERC20Old(originalToken).transferFrom(msg.sender,address(this),_value)

IRs:
TMP_47 = CONVERT originalToken to ERC20Old
TMP_48 = CONVERT this to address
HIGH_LEVEL_CALL, dest:TMP_47(ERC20Old), function:transferFrom, arguments:['msg.sender', 'TMP_48', '_value']  "];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(ERC20(originalToken).transferFrom(msg.sender,address(this),_value))

IRs:
TMP_50 = CONVERT originalToken to ERC20
TMP_51 = CONVERT this to address
TMP_52(bool) = HIGH_LEVEL_CALL, dest:TMP_50(ERC20), function:transferFrom, arguments:['msg.sender', 'TMP_51', '_value']  
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(_value)

IRs:
REF_20(uint256) -> balances[msg.sender]
REF_21(uint256) -> balances[msg.sender]
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balances) := TMP_54(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply_ = totalSupply_.add(_value)

IRs:
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_55(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
depositLock[msg.sender] = now + _forTime * 3600

IRs:
REF_24(uint256) -> depositLock[msg.sender]
TMP_56(uint256) = _forTime * 3600
TMP_57(uint256) = now + TMP_56
REF_24(uint256) (->depositLock) := TMP_57(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2295.sol-WrapperLock-isValidSignature(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
isSigner[ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256()(Ethereum Signed Message:
32,hash),v,r,s)]

IRs:
TMP_126(bytes32) = SOLIDITY_CALL keccak256()(Ethereum Signed Message:
32,hash)
TMP_127(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_126,v,r,s)
REF_59(bool) -> isSigner[TMP_127]
RETURN REF_59"];
}
// Function: 2295.sol-WrapperLock-keccak(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_sender,_wrapper,_validTill)

IRs:
TMP_129(bytes32) = SOLIDITY_CALL keccak256()(_sender,_wrapper,_validTill)
RETURN TMP_129"];
}
// Function: 2295.sol-WrapperLock-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_130(bool) = msg.sender == owner
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2295.sol-WrapperLock-totalSupply()
digraph{
}
// Function: 2295.sol-WrapperLock-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 2295.sol-WrapperLock-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isSigner[_to] || isSigner[_from])

IRs:
REF_46(bool) -> isSigner[_to]
REF_47(bool) -> isSigner[_from]
TMP_114(bool) = REF_46 || REF_47
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(msg.sender == TRANSFER_PROXY)

IRs:
TMP_116(bool) = msg.sender == TRANSFER_PROXY
TMP_117(None) = SOLIDITY_CALL assert(bool)(TMP_116)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_48(uint256) -> balances[_to]
REF_49(uint256) -> balances[_to]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_49', '_value'] 
REF_48(uint256) (->balances) := TMP_118(uint256)"];
3->7;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_51(uint256) -> balances[_from]
REF_52(uint256) -> balances[_from]
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_52', '_value'] 
REF_51(uint256) (->balances) := TMP_119(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7[label="Node Type: IF 7

EXPRESSION:
depositLock[_to] > now

IRs:
REF_54(uint256) -> depositLock[_to]
TMP_121(bool) = REF_54 > now
CONDITION TMP_121"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
depositLock[_to] = depositLock[_to]

IRs:
REF_55(uint256) -> depositLock[_to]
REF_56(uint256) -> depositLock[_to]
REF_55(uint256) (->depositLock) := REF_56(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
depositLock[_to] = now + 3600

IRs:
REF_57(uint256) -> depositLock[_to]
TMP_122(uint256) = now + 3600
REF_57(uint256) (->depositLock) := TMP_122(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->5;
}
// Function: 2295.sol-WrapperLock-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = newOwner != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2295.sol-WrapperLock-withdraw(uint256,uint8,bytes32,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= _value)

IRs:
TMP_58(uint256) = INTERNAL_CALL, WrapperLock.balanceOf(address)(msg.sender)
TMP_59(bool) = TMP_58 >= _value
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now <= depositLock[msg.sender]

IRs:
REF_25(uint256) -> depositLock[msg.sender]
TMP_61(bool) = now <= REF_25
CONDITION TMP_61"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(block.number < signatureValidUntilBlock)

IRs:
TMP_62(bool) = block.number < signatureValidUntilBlock
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(isValidSignature(keccak256()(msg.sender,address(this),signatureValidUntilBlock),v,r,s))

IRs:
TMP_64 = CONVERT this to address
TMP_65(bytes32) = SOLIDITY_CALL keccak256()(msg.sender,TMP_64,signatureValidUntilBlock)
TMP_66(bool) = INTERNAL_CALL, WrapperLock.isValidSignature(bytes32,uint8,bytes32,bytes32)(TMP_65,v,r,s)
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_26(uint256) -> balances[msg.sender]
REF_27(uint256) -> balances[msg.sender]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_27', '_value'] 
REF_26(uint256) (->balances) := TMP_68(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_69(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
depositLock[msg.sender] = 0

IRs:
REF_30(uint256) -> depositLock[msg.sender]
REF_30(uint256) (->depositLock) := 0(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
erc20old

IRs:
CONDITION erc20old"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ERC20Old(originalToken).transfer(msg.sender,_value)

IRs:
TMP_70 = CONVERT originalToken to ERC20Old
HIGH_LEVEL_CALL, dest:TMP_70(ERC20Old), function:transfer, arguments:['msg.sender', '_value']  "];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(ERC20(originalToken).transfer(msg.sender,_value))

IRs:
TMP_72 = CONVERT originalToken to ERC20
TMP_73(bool) = HIGH_LEVEL_CALL, dest:TMP_72(ERC20), function:transfer, arguments:['msg.sender', '_value']  
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
true

IRs:
RETURN True"];
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2295.sol-WrapperLock-withdrawBalanceDifference()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ERC20(originalToken).balanceOf(address(this)).sub(totalSupply_) > 0)

IRs:
TMP_75 = CONVERT originalToken to ERC20
TMP_76 = CONVERT this to address
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:TMP_75(ERC20), function:balanceOf, arguments:['TMP_76']  
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_77', 'totalSupply_'] 
TMP_79(bool) = TMP_78 > 0
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
erc20old

IRs:
CONDITION erc20old"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ERC20Old(originalToken).transfer(msg.sender,ERC20(originalToken).balanceOf(address(this)).sub(totalSupply_))

IRs:
TMP_81 = CONVERT originalToken to ERC20Old
TMP_82 = CONVERT originalToken to ERC20
TMP_83 = CONVERT this to address
TMP_84(uint256) = HIGH_LEVEL_CALL, dest:TMP_82(ERC20), function:balanceOf, arguments:['TMP_83']  
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_84', 'totalSupply_'] 
HIGH_LEVEL_CALL, dest:TMP_81(ERC20Old), function:transfer, arguments:['msg.sender', 'TMP_85']  "];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(ERC20(originalToken).transfer(msg.sender,ERC20(originalToken).balanceOf(address(this)).sub(totalSupply_)))

IRs:
TMP_87 = CONVERT originalToken to ERC20
TMP_88 = CONVERT originalToken to ERC20
TMP_89 = CONVERT this to address
TMP_90(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(ERC20), function:balanceOf, arguments:['TMP_89']  
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_90', 'totalSupply_'] 
TMP_92(bool) = HIGH_LEVEL_CALL, dest:TMP_87(ERC20), function:transfer, arguments:['msg.sender', 'TMP_91']  
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2295.sol-WrapperLock-withdrawDifferentToken(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_differentToken != originalToken)

IRs:
TMP_95(bool) = _differentToken != originalToken
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ERC20(_differentToken).balanceOf(address(this)) > 0)

IRs:
TMP_97 = CONVERT _differentToken to ERC20
TMP_98 = CONVERT this to address
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(ERC20), function:balanceOf, arguments:['TMP_98']  
TMP_100(bool) = TMP_99 > 0
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_erc20old

IRs:
CONDITION _erc20old"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ERC20Old(_differentToken).transfer(msg.sender,ERC20(_differentToken).balanceOf(address(this)))

IRs:
TMP_102 = CONVERT _differentToken to ERC20Old
TMP_103 = CONVERT _differentToken to ERC20
TMP_104 = CONVERT this to address
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_103(ERC20), function:balanceOf, arguments:['TMP_104']  
HIGH_LEVEL_CALL, dest:TMP_102(ERC20Old), function:transfer, arguments:['msg.sender', 'TMP_105']  "];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(ERC20(_differentToken).transfer(msg.sender,ERC20(_differentToken).balanceOf(address(this))))

IRs:
TMP_107 = CONVERT _differentToken to ERC20
TMP_108 = CONVERT _differentToken to ERC20
TMP_109 = CONVERT this to address
TMP_110(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(ERC20), function:balanceOf, arguments:['TMP_109']  
TMP_111(bool) = HIGH_LEVEL_CALL, dest:TMP_107(ERC20), function:transfer, arguments:['msg.sender', 'TMP_110']  
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
}
