digraph G {
// Function: 2377.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_398 = CONVERT _input to bytes
_temp(bytes) := TMP_398(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_617 -> LENGTH _temp
_length(uint256) := REF_617(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_399(bool) = _length <= 32
TMP_400(bool) = _length > 0
TMP_401(bool) = TMP_399 && TMP_400
TMP_402(None) = SOLIDITY_CALL require(bool,string)(TMP_401,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_618(None) -> _temp[0]
TMP_403(bool) = REF_618 != 32
TMP_404(uint256) = _length - 1
REF_619(None) -> _temp[TMP_404]
TMP_405(bool) = REF_619 != 32
TMP_406(bool) = TMP_403 && TMP_405
TMP_407(None) = SOLIDITY_CALL require(bool,string)(TMP_406,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_620(None) -> _temp[0]
TMP_408(bool) = REF_620 == 48
CONDITION TMP_408"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_621(None) -> _temp[1]
TMP_409(bool) = REF_621 != 120
TMP_410(None) = SOLIDITY_CALL require(bool,string)(TMP_409,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_622(None) -> _temp[1]
TMP_411(bool) = REF_622 != 88
TMP_412(None) = SOLIDITY_CALL require(bool,string)(TMP_411,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_413(bool) = i < _length
CONDITION TMP_413"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_623(None) -> _temp[i]
TMP_414(bool) = REF_623 > 64
REF_624(None) -> _temp[i]
TMP_415(bool) = REF_624 < 91
TMP_416(bool) = TMP_414 && TMP_415
CONDITION TMP_416"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_625(bytes1) -> _temp[i]
REF_626(None) -> _temp[i]
TMP_417 = CONVERT REF_626 to uint256
TMP_418(uint256) = TMP_417 + 32
TMP_419 = CONVERT TMP_418 to bytes1
REF_625(bytes1) (->_temp) := TMP_419(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_420(bool) = _hasNonNumber == False
CONDITION TMP_420"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_627(None) -> _temp[i]
TMP_421(bool) = REF_627 == 32
REF_628(None) -> _temp[i]
TMP_422(bool) = REF_628 > 96
REF_629(None) -> _temp[i]
TMP_423(bool) = REF_629 < 123
TMP_424(bool) = TMP_422 && TMP_423
TMP_425(bool) = TMP_421 || TMP_424
REF_630(None) -> _temp[i]
TMP_426(bool) = REF_630 > 47
REF_631(None) -> _temp[i]
TMP_427(bool) = REF_631 < 58
TMP_428(bool) = TMP_426 && TMP_427
TMP_429(bool) = TMP_425 || TMP_428
TMP_430(None) = SOLIDITY_CALL require(bool,string)(TMP_429,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_632(None) -> _temp[i]
TMP_431(bool) = REF_632 == 32
CONDITION TMP_431"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_432(uint256) = i + 1
REF_633(None) -> _temp[TMP_432]
TMP_433(bool) = REF_633 != 32
TMP_434(None) = SOLIDITY_CALL require(bool,string)(TMP_433,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_435(bool) = _hasNonNumber == False
REF_634(None) -> _temp[i]
TMP_436(bool) = REF_634 < 48
REF_635(None) -> _temp[i]
TMP_437(bool) = REF_635 > 57
TMP_438(bool) = TMP_436 || TMP_437
TMP_439(bool) = TMP_435 && TMP_438
CONDITION TMP_439"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_440(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_441(bool) = _hasNonNumber == True
TMP_442(None) = SOLIDITY_CALL require(bool,string)(TMP_441,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2377.sol-RSKeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_390'] 
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_392'] 
TMP_394(uint256) = TMP_393 / 2
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_391', 'TMP_394'] 
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_397(uint256) = TMP_395 / TMP_396
RETURN TMP_397"];
}
// Function: 2377.sol-RSKeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_380(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(_curKeys)
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_382(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(TMP_381)
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_380', 'TMP_382'] 
RETURN TMP_383"];
}
// Function: 2377.sol-RSKeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_384', '312500000000000000000000000'] 
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_385', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_386'] 
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_387', '74999921875000000000000000000000'] 
TMP_389(uint256) = TMP_388 / 156250000
RETURN TMP_389"];
}
// Function: 2377.sol-RSKeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_377(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(TMP_376)
TMP_378(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(_curEth)
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_377', 'TMP_378'] 
RETURN TMP_379"];
}
// Function: 2377.sol-RatBookInterface-getNameFee()
digraph{
}
// Function: 2377.sol-RatBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2377.sol-RatBookInterface-getPlayerID(address)
digraph{
}
// Function: 2377.sol-RatBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2377.sol-RatBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2377.sol-RatBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2377.sol-RatBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2377.sol-RatBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2377.sol-RatScam-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == adminAddress,only owner can activate)

IRs:
TMP_356(bool) = msg.sender == adminAddress
TMP_357(None) = SOLIDITY_CALL require(bool,string)(TMP_356,only owner can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,ratscam already activated)

IRs:
TMP_358(bool) = activated_ == False
TMP_359(None) = SOLIDITY_CALL require(bool,string)(TMP_358,ratscam already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now - rndGap_

IRs:
REF_598(RSdatasets.Round) -> round_[1]
REF_599(uint256) -> REF_598.strt
TMP_360(uint256) = now - rndGap_
REF_599(uint256) (->round_) := TMP_360(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_

IRs:
REF_600(RSdatasets.Round) -> round_[1]
REF_601(uint256) -> REF_600.end
TMP_361(uint256) = now + rndInit_
REF_601(uint256) (->round_) := TMP_361(uint256)"];
}
// Function: 2377.sol-RatScam-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_294(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_295(bytes32) = SOLIDITY_CALL keccak256()(TMP_294)
TMP_296 = CONVERT TMP_295 to uint256
TMP_297(uint256) = TMP_296 / now
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_293', 'TMP_297'] 
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_298', 'block.gaslimit'] 
TMP_300(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_301(bytes32) = SOLIDITY_CALL keccak256()(TMP_300)
TMP_302 = CONVERT TMP_301 to uint256
TMP_303(uint256) = TMP_302 / now
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_299', 'TMP_303'] 
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_304', 'block.number'] 
TMP_306(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_305)
TMP_307(bytes32) = SOLIDITY_CALL keccak256()(TMP_306)
TMP_308 = CONVERT TMP_307 to uint256
seed(uint256) := TMP_308(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_309(uint256) = seed / 1000
TMP_310(uint256) = TMP_309 * 1000
TMP_311(uint256) = seed - TMP_310
TMP_312(bool) = TMP_311 < airDropTracker_
CONDITION TMP_312"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2377.sol-RatScam-buyCore(uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_226(RSdatasets.Round) -> round_[_rID]
REF_227(uint256) -> REF_226.end
TMP_136(bool) = _now > REF_227
REF_228(RSdatasets.Round) -> round_[_rID]
REF_229(bool) -> REF_228.ended
TMP_137(bool) = REF_229 == False
TMP_138(bool) = TMP_136 && TMP_137
CONDITION TMP_138"];
3->4[label="True"];
3->9[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_230(RSdatasets.Round) -> round_[_rID]
REF_231(bool) -> REF_230.ended
REF_231(bool) (->round_) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_139(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_139(RSdatasets.EventReturns)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_232(uint256) -> _eventData_.compressedData
REF_233(uint256) -> _eventData_.compressedData
TMP_140(uint256) = _now * 1000000000000000000
TMP_141(uint256) = REF_233 + TMP_140
REF_232(uint256) (->_eventData_) := TMP_141(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_234(uint256) -> _eventData_.compressedIDs
REF_235(uint256) -> _eventData_.compressedIDs
TMP_142(uint256) = REF_235 + _pID
REF_234(uint256) (->_eventData_) := TMP_142(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_237(RSdatasets.Player) -> plyr_[_pID]
REF_238(bytes32) -> REF_237.name
REF_239(uint256) -> _eventData_.compressedData
REF_240(uint256) -> _eventData_.compressedIDs
REF_241(address) -> _eventData_.winnerAddr
REF_242(bytes32) -> _eventData_.winnerName
REF_243(uint256) -> _eventData_.amountWon
REF_244(uint256) -> _eventData_.newPot
REF_245(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_238,msg.value,REF_239,REF_240,REF_241,REF_242,REF_243,REF_244,REF_245)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.core(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,msg.value,_affID,_eventData_)"];
}
// Function: 2377.sol-RatScam-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_14(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_14(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_10(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_10(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_15 = CONVERT 0 to address
TMP_16(bool) = _affCode == TMP_15
TMP_17(bool) = _affCode == msg.sender
TMP_18(bool) = TMP_16 || TMP_17
CONDITION TMP_18"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_11(RSdatasets.Player) -> plyr_[_pID]
REF_12(uint256) -> REF_11.laff
_affID(uint256) := REF_12(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_13(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_13(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_14(RSdatasets.Player) -> plyr_[_pID]
REF_15(uint256) -> REF_14.laff
TMP_19(bool) = _affID != REF_15
CONDITION TMP_19"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_16(RSdatasets.Player) -> plyr_[_pID]
REF_17(uint256) -> REF_16.laff
REF_17(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 2377.sol-RatScam-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_5(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_5(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_3(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_3(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_6(bool) = _affCode == 0
TMP_7(bool) = _affCode == _pID
TMP_8(bool) = TMP_6 || TMP_7
CONDITION TMP_8"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_4(RSdatasets.Player) -> plyr_[_pID]
REF_5(uint256) -> REF_4.laff
_affCode(uint256) := REF_5(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_6(RSdatasets.Player) -> plyr_[_pID]
REF_7(uint256) -> REF_6.laff
TMP_9(bool) = _affCode != REF_7
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_8(RSdatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
REF_9(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 2377.sol-RatScam-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_24(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_24(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_18(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_18(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_25(bool) = _affCode == 
REF_19(RSdatasets.Player) -> plyr_[_pID]
REF_20(bytes32) -> REF_19.name
TMP_26(bool) = _affCode == REF_20
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_21(RSdatasets.Player) -> plyr_[_pID]
REF_22(uint256) -> REF_21.laff
_affID(uint256) := REF_22(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_23(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_23(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_24(RSdatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
TMP_28(bool) = _affID != REF_25
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_26(RSdatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
REF_27(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 2377.sol-RatScam-calcKeysReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_356(RSdatasets.Round) -> round_[_rID]
REF_357(uint256) -> REF_356.strt
TMP_206(uint256) = REF_357 + rndGap_
TMP_207(bool) = _now > TMP_206
REF_358(RSdatasets.Round) -> round_[_rID]
REF_359(uint256) -> REF_358.end
TMP_208(bool) = _now <= REF_359
REF_360(RSdatasets.Round) -> round_[_rID]
REF_361(uint256) -> REF_360.end
TMP_209(bool) = _now > REF_361
REF_362(RSdatasets.Round) -> round_[_rID]
REF_363(uint256) -> REF_362.plyr
TMP_210(bool) = REF_363 == 0
TMP_211(bool) = TMP_209 && TMP_210
TMP_212(bool) = TMP_208 || TMP_211
TMP_213(bool) = TMP_207 && TMP_212
CONDITION TMP_213"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_364(RSdatasets.Round) -> round_[_rID]
REF_365(uint256) -> REF_364.eth
TMP_214(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_365', '_eth'] 
RETURN TMP_214"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_eth).keys())

IRs:
TMP_215(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_215"];
}
// Function: 2377.sol-RatScam-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rID].mask).mul(plyrRnds_[_pID][_rID].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rID].mask))

IRs:
REF_346(RSdatasets.Round) -> round_[_rID]
REF_347(uint256) -> REF_346.mask
REF_349(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_350(RSdatasets.PlayerRounds) -> REF_349[_rID]
REF_351(uint256) -> REF_350.keys
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_347', 'REF_351'] 
TMP_204(uint256) = TMP_203 / 1000000000000000000
REF_353(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_354(RSdatasets.PlayerRounds) -> REF_353[_rID]
REF_355(uint256) -> REF_354.mask
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_204', 'REF_355'] 
RETURN TMP_205"];
}
// Function: 2377.sol-RatScam-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adminAddress = msg.sender

IRs:
adminAddress(address) := msg.sender(address)"];
}
// Function: 2377.sol-RatScam-core(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_269(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_270(RSdatasets.PlayerRounds) -> REF_269[_rID]
REF_271(uint256) -> REF_270.keys
TMP_156(bool) = REF_271 == 0
CONDITION TMP_156"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_157(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.managePlayer(uint256,RSdatasets.EventReturns)(_pID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_157(RSdatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 10000000000000000000

IRs:
REF_272(RSdatasets.Round) -> round_[_rID]
REF_273(uint256) -> REF_272.eth
TMP_158(bool) = REF_273 < 100000000000000000000
REF_274(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_275(RSdatasets.PlayerRounds) -> REF_274[_rID]
REF_276(uint256) -> REF_275.eth
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_276', '_eth'] 
TMP_160(bool) = TMP_159 > 10000000000000000000
TMP_161(bool) = TMP_158 && TMP_160
CONDITION TMP_161"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (10000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_279(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_280(RSdatasets.PlayerRounds) -> REF_279[_rID]
REF_281(uint256) -> REF_280.eth
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['10000000000000000000', 'REF_281'] 
_availableLimit(uint256) := TMP_162(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_163(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_283(RSdatasets.Player) -> plyr_[_pID]
REF_284(uint256) -> REF_283.gen
REF_285(RSdatasets.Player) -> plyr_[_pID]
REF_286(uint256) -> REF_285.gen
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_286', '_refund'] 
REF_284(uint256) (->plyr_) := TMP_164(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_165(bool) = _eth > 1000000000
CONDITION TMP_165"];
10->11[label="True"];
10->54[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = 1000000000000000000

IRs:
_keys(uint256) := 1000000000000000000(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_166(bool) = _keys >= 1000000000000000000
CONDITION TMP_166"];
12->13[label="True"];
12->18[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, RatScam.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_288(RSdatasets.Round) -> round_[_rID]
REF_289(uint256) -> REF_288.plyr
TMP_168(bool) = REF_289 != _pID
CONDITION TMP_168"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_290(RSdatasets.Round) -> round_[_rID]
REF_291(uint256) -> REF_290.plyr
REF_291(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_292(uint256) -> _eventData_.compressedData
REF_293(uint256) -> _eventData_.compressedData
TMP_169(uint256) = REF_293 + 100
REF_292(uint256) (->_eventData_) := TMP_169(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_170(bool) = _eth >= 100000000000000000
CONDITION TMP_170"];
19->20[label="True"];
19->45[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_171(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
airdrop() == true

IRs:
TMP_172(bool) = INTERNAL_CALL, RatScam.airdrop()()
TMP_173(bool) = TMP_172 == True
CONDITION TMP_173"];
21->22[label="True"];
21->44[label="False"];
22[label="Node Type: NEW VARIABLE 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_174(bool) = _eth >= 10000000000000000000
CONDITION TMP_174"];
23->24[label="True"];
23->28[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_176(uint256) = TMP_175 / 100
_prize(uint256) := TMP_176(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_295(RSdatasets.Player) -> plyr_[_pID]
REF_296(uint256) -> REF_295.win
REF_297(RSdatasets.Player) -> plyr_[_pID]
REF_298(uint256) -> REF_297.win
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_298', '_prize'] 
REF_296(uint256) (->plyr_) := TMP_177(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_178(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_301(uint256) -> _eventData_.compressedData
REF_301(-> _eventData_) = REF_301 + 300000000000000000000000000000000"];
27->40;
28[label="Node Type: IF 28

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_179(bool) = _eth >= 1000000000000000000
TMP_180(bool) = _eth < 10000000000000000000
TMP_181(bool) = TMP_179 && TMP_180
CONDITION TMP_181"];
28->29[label="True"];
28->33[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_183(uint256) = TMP_182 / 100
_prize(uint256) := TMP_183(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_303(RSdatasets.Player) -> plyr_[_pID]
REF_304(uint256) -> REF_303.win
REF_305(RSdatasets.Player) -> plyr_[_pID]
REF_306(uint256) -> REF_305.win
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_306', '_prize'] 
REF_304(uint256) (->plyr_) := TMP_184(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_185(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_309(uint256) -> _eventData_.compressedData
REF_309(-> _eventData_) = REF_309 + 200000000000000000000000000000000"];
32->39;
33[label="Node Type: IF 33

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_186(bool) = _eth >= 100000000000000000
TMP_187(bool) = _eth < 1000000000000000000
TMP_188(bool) = TMP_186 && TMP_187
CONDITION TMP_188"];
33->34[label="True"];
33->38[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_190(uint256) = TMP_189 / 100
_prize(uint256) := TMP_190(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_311(RSdatasets.Player) -> plyr_[_pID]
REF_312(uint256) -> REF_311.win
REF_313(RSdatasets.Player) -> plyr_[_pID]
REF_314(uint256) -> REF_313.win
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_314', '_prize'] 
REF_312(uint256) (->plyr_) := TMP_191(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_192(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_eventData_.compressedData += 100000000000000000000000000000000

IRs:
REF_317(uint256) -> _eventData_.compressedData
REF_317(-> _eventData_) = REF_317 + 100000000000000000000000000000000"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_318(uint256) -> _eventData_.compressedData
REF_318(-> _eventData_) = REF_318 + 10000000000000000000000000000000"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_319(uint256) -> _eventData_.compressedData
TMP_193(uint256) = _prize * 1000000000000000000000000000000000
REF_319(-> _eventData_) = REF_319 + TMP_193"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_320(uint256) -> _eventData_.compressedData
REF_321(uint256) -> _eventData_.compressedData
TMP_194(uint256) = airDropTracker_ * 1000
TMP_195(uint256) = REF_321 + TMP_194
REF_320(uint256) (->_eventData_) := TMP_195(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_322(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_323(RSdatasets.PlayerRounds) -> REF_322[_rID]
REF_324(uint256) -> REF_323.keys
REF_326(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_327(RSdatasets.PlayerRounds) -> REF_326[_rID]
REF_328(uint256) -> REF_327.keys
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_328'] 
REF_324(uint256) (->plyrRnds_) := TMP_196(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_329(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_330(RSdatasets.PlayerRounds) -> REF_329[_rID]
REF_331(uint256) -> REF_330.eth
REF_333(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_334(RSdatasets.PlayerRounds) -> REF_333[_rID]
REF_335(uint256) -> REF_334.eth
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_335'] 
REF_331(uint256) (->plyrRnds_) := TMP_197(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_336(RSdatasets.Round) -> round_[_rID]
REF_337(uint256) -> REF_336.keys
REF_339(RSdatasets.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.keys
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_340'] 
REF_337(uint256) (->round_) := TMP_198(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_341(RSdatasets.Round) -> round_[_rID]
REF_342(uint256) -> REF_341.eth
REF_344(RSdatasets.Round) -> round_[_rID]
REF_345(uint256) -> REF_344.eth
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_345'] 
REF_342(uint256) (->round_) := TMP_199(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_eventData_)

IRs:
TMP_200(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.distributeExternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,_eth,_affID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_200(RSdatasets.EventReturns)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_keys,_eventData_)

IRs:
TMP_201(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.distributeInternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,_eth,_keys,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_201(RSdatasets.EventReturns)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
endTx(_pID,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, RatScam.endTx(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_keys,_eventData_)"];
53->54;
54[label="Node Type: END_IF 54
"];
}
// Function: 2377.sol-RatScam-determinePID(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_405(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_405(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_240(bool) = _pID == 0
CONDITION TMP_240"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = RatBook.getPlayerID(msg.sender)

IRs:
TMP_241(uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_241(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = RatBook.getPlayerName(_pID)

IRs:
TMP_242(bytes32) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_242(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = RatBook.getPlayerLAff(_pID)

IRs:
TMP_243(uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_243(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_409(uint256) -> pIDxAddr_[msg.sender]
REF_409(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_410(RSdatasets.Player) -> plyr_[_pID]
REF_411(address) -> REF_410.addr
REF_411(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_244(bool) = _name != 
CONDITION TMP_244"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_412(uint256) -> pIDxName_[_name]
REF_412(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_413(RSdatasets.Player) -> plyr_[_pID]
REF_414(bytes32) -> REF_413.name
REF_414(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_415(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_416(bool) -> REF_415[_name]
REF_416(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_245(bool) = _laff != 0
TMP_246(bool) = _laff != _pID
TMP_247(bool) = TMP_245 && TMP_246
CONDITION TMP_247"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_417(RSdatasets.Player) -> plyr_[_pID]
REF_418(uint256) -> REF_417.laff
REF_418(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_419(uint256) -> _eventData_.compressedData
REF_420(uint256) -> _eventData_.compressedData
TMP_248(uint256) = REF_420 + 1
REF_419(uint256) (->_eventData_) := TMP_248(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2377.sol-RatScam-distributeExternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth * 5 / 100

IRs:
TMP_313(uint256) = _eth * 5
TMP_314(uint256) = TMP_313 / 100
_com(uint256) := TMP_314(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_315(uint256) = _eth / 10
_aff(uint256) := TMP_315(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_316(bool) = _affID != _pID
REF_516(RSdatasets.Player) -> plyr_[_affID]
REF_517(bytes32) -> REF_516.name
TMP_317(bool) = REF_517 != 
TMP_318(bool) = TMP_316 && TMP_317
CONDITION TMP_318"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_518(RSdatasets.Player) -> plyr_[_affID]
REF_519(uint256) -> REF_518.aff
REF_521(RSdatasets.Player) -> plyr_[_affID]
REF_522(uint256) -> REF_521.aff
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_522'] 
REF_519(uint256) (->plyr_) := TMP_319(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
RSEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now)

IRs:
REF_524(RSdatasets.Player) -> plyr_[_affID]
REF_525(address) -> REF_524.addr
REF_526(RSdatasets.Player) -> plyr_[_affID]
REF_527(bytes32) -> REF_526.name
Emit onAffiliatePayout(_affID,REF_525,REF_527,_pID,_aff,now)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_com += _aff

IRs:
_com(uint256) = _com + _aff"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
adminAddress.transfer(_com)

IRs:
Transfer dest:adminAddress value:_com"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2377.sol-RatScam-distributeInternal(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_)) / 100

IRs:
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'fees_'] 
TMP_323(uint256) = TMP_322 / 100
_gen(uint256) := TMP_323(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 20)

IRs:
TMP_324(uint256) = _eth / 20
_air(uint256) := TMP_324(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_325(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = (_eth.mul(20) / 100)

IRs:
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '20'] 
TMP_327(uint256) = TMP_326 / 100
_pot(uint256) := TMP_327(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_328(uint256) = INTERNAL_CALL, RatScam.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_328(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_329(bool) = _dust > 0
CONDITION TMP_329"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_330(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_533(RSdatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.pot
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_537(RSdatasets.Round) -> round_[_rID]
REF_538(uint256) -> REF_537.pot
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_331', 'REF_538'] 
REF_534(uint256) (->round_) := TMP_332(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_539(uint256) -> _eventData_.genAmount
REF_541(uint256) -> _eventData_.genAmount
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_541'] 
REF_539(uint256) (->_eventData_) := TMP_333(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_542(uint256) -> _eventData_.potAmount
REF_542(uint256) (->_eventData_) := _pot(uint256)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2377.sol-RatScam-endRound(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_429(RSdatasets.Round) -> round_[_rID]
REF_430(uint256) -> REF_429.plyr
_winPID(uint256) := REF_430(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_431(RSdatasets.Round) -> round_[_rID]
REF_432(uint256) -> REF_431.pot
_pot(uint256) := REF_432(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_win = (_pot.mul(45)) / 100

IRs:
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '45'] 
TMP_253(uint256) = TMP_252 / 100
_win(uint256) := TMP_253(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_com = (_pot / 10)

IRs:
TMP_254(uint256) = _pot / 10
_com(uint256) := TMP_254(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_gen = (_pot.mul(potSplit_)) / 100

IRs:
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'potSplit_'] 
TMP_256(uint256) = TMP_255 / 100
_gen(uint256) := TMP_256(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_ppt = 0

IRs:
_ppt(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].keys > 0

IRs:
REF_435(RSdatasets.Round) -> round_[_rID]
REF_436(uint256) -> REF_435.keys
TMP_257(bool) = REF_436 > 0
CONDITION TMP_257"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_438(RSdatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.keys
TMP_259(uint256) = TMP_258 / REF_439
_ppt(uint256) := TMP_259(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_442(RSdatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.keys
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_443'] 
TMP_261(uint256) = TMP_260 / 1000000000000000000
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_261'] 
_dust(uint256) := TMP_262(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_263(bool) = _dust > 0
CONDITION TMP_263"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_264(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_com = _com.add(_dust)

IRs:
TMP_265(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_dust'] 
_com(uint256) := TMP_265(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_446(RSdatasets.Player) -> plyr_[_winPID]
REF_447(uint256) -> REF_446.win
REF_449(RSdatasets.Player) -> plyr_[_winPID]
REF_450(uint256) -> REF_449.win
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_450'] 
REF_447(uint256) (->plyr_) := TMP_266(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
adminAddress.transfer(_com)

IRs:
Transfer dest:adminAddress value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_452(RSdatasets.Round) -> round_[_rID]
REF_453(uint256) -> REF_452.mask
REF_455(RSdatasets.Round) -> round_[_rID]
REF_456(uint256) -> REF_455.mask
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_456'] 
REF_453(uint256) (->round_) := TMP_268(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_457(uint256) -> _eventData_.compressedData
REF_458(uint256) -> _eventData_.compressedData
REF_459(RSdatasets.Round) -> round_[_rID]
REF_460(uint256) -> REF_459.end
TMP_269(uint256) = REF_460 * 1000000
TMP_270(uint256) = REF_458 + TMP_269
REF_457(uint256) (->_eventData_) := TMP_270(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000)

IRs:
REF_461(uint256) -> _eventData_.compressedIDs
REF_462(uint256) -> _eventData_.compressedIDs
TMP_271(uint256) = _winPID * 100000000000000000000000000
TMP_272(uint256) = REF_462 + TMP_271
REF_461(uint256) (->_eventData_) := TMP_272(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_463(address) -> _eventData_.winnerAddr
REF_464(RSdatasets.Player) -> plyr_[_winPID]
REF_465(address) -> REF_464.addr
REF_463(address) (->_eventData_) := REF_465(address)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_466(bytes32) -> _eventData_.winnerName
REF_467(RSdatasets.Player) -> plyr_[_winPID]
REF_468(bytes32) -> REF_467.name
REF_466(bytes32) (->_eventData_) := REF_468(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_469(uint256) -> _eventData_.amountWon
REF_469(uint256) (->_eventData_) := _win(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_470(uint256) -> _eventData_.genAmount
REF_470(uint256) (->_eventData_) := _gen(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.newPot = 0

IRs:
REF_471(uint256) -> _eventData_.newPot
REF_471(uint256) (->_eventData_) := 0(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
rID_ ++

IRs:
TMP_273(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_rID ++

IRs:
TMP_274(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_472(RSdatasets.Round) -> round_[_rID]
REF_473(uint256) -> REF_472.strt
REF_473(uint256) (->round_) := now(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_474(RSdatasets.Round) -> round_[_rID]
REF_475(uint256) -> REF_474.end
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_275', 'rndGap_'] 
REF_475(uint256) (->round_) := TMP_276(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].pot = 0

IRs:
REF_478(RSdatasets.Round) -> round_[_rID]
REF_479(uint256) -> REF_478.pot
REF_479(uint256) (->round_) := 0(uint256)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2377.sol-RatScam-endTx(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000)

IRs:
REF_583(uint256) -> _eventData_.compressedData
REF_584(uint256) -> _eventData_.compressedData
TMP_350(uint256) = now * 1000000000000000000
TMP_351(uint256) = REF_584 + TMP_350
REF_583(uint256) (->_eventData_) := TMP_351(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_585(uint256) -> _eventData_.compressedIDs
REF_586(uint256) -> _eventData_.compressedIDs
TMP_352(uint256) = REF_586 + _pID
TMP_353(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_354(uint256) = TMP_352 + TMP_353
REF_585(uint256) (->_eventData_) := TMP_354(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RSEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_588(uint256) -> _eventData_.compressedData
REF_589(uint256) -> _eventData_.compressedIDs
REF_590(RSdatasets.Player) -> plyr_[_pID]
REF_591(bytes32) -> REF_590.name
REF_592(address) -> _eventData_.winnerAddr
REF_593(bytes32) -> _eventData_.winnerName
REF_594(uint256) -> _eventData_.amountWon
REF_595(uint256) -> _eventData_.newPot
REF_596(uint256) -> _eventData_.genAmount
REF_597(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_588,REF_589,REF_591,msg.sender,_eth,_keys,REF_592,REF_593,REF_594,REF_595,REF_596,REF_597,airDropPot_)"];
}
// Function: 2377.sol-RatScam-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_0(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_0(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_0(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_1(RSdatasets.Player) -> plyr_[_pID]
REF_2(uint256) -> REF_1.laff
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,REF_2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2377.sol-RatScam-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_112(RSdatasets.Round) -> round_[_rID]
REF_113(uint256) -> REF_112.strt
TMP_89(uint256) = REF_113 + rndGap_
TMP_90(bool) = _now > TMP_89
REF_114(RSdatasets.Round) -> round_[_rID]
REF_115(uint256) -> REF_114.end
TMP_91(bool) = _now <= REF_115
REF_116(RSdatasets.Round) -> round_[_rID]
REF_117(uint256) -> REF_116.end
TMP_92(bool) = _now > REF_117
REF_118(RSdatasets.Round) -> round_[_rID]
REF_119(uint256) -> REF_118.plyr
TMP_93(bool) = REF_119 == 0
TMP_94(bool) = TMP_92 && TMP_93
TMP_95(bool) = TMP_91 || TMP_94
TMP_96(bool) = TMP_90 && TMP_95
CONDITION TMP_96"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_120(RSdatasets.Round) -> round_[_rID]
REF_121(uint256) -> REF_120.keys
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_121', '1000000000000000000'] 
TMP_98(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_97', '1000000000000000000'] 
RETURN TMP_98"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2377.sol-RatScam-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[rID_].keys,round_[rID_].end,round_[rID_].strt,round_[rID_].pot,round_[rID_].plyr,plyr_[round_[rID_].plyr].addr,plyr_[round_[rID_].plyr].name,airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_190(RSdatasets.Round) -> round_[rID_]
REF_191(uint256) -> REF_190.keys
REF_192(RSdatasets.Round) -> round_[rID_]
REF_193(uint256) -> REF_192.end
REF_194(RSdatasets.Round) -> round_[rID_]
REF_195(uint256) -> REF_194.strt
REF_196(RSdatasets.Round) -> round_[rID_]
REF_197(uint256) -> REF_196.pot
REF_198(RSdatasets.Round) -> round_[rID_]
REF_199(uint256) -> REF_198.plyr
REF_200(RSdatasets.Round) -> round_[rID_]
REF_201(uint256) -> REF_200.plyr
REF_202(RSdatasets.Player) -> plyr_[REF_201]
REF_203(address) -> REF_202.addr
REF_204(RSdatasets.Round) -> round_[rID_]
REF_205(uint256) -> REF_204.plyr
REF_206(RSdatasets.Player) -> plyr_[REF_205]
REF_207(bytes32) -> REF_206.name
TMP_129(uint256) = airDropPot_ * 1000
TMP_130(uint256) = airDropTracker_ + TMP_129
RETURN REF_191,REF_193,REF_195,REF_197,REF_199,REF_203,REF_207,TMP_130"];
}
// Function: 2377.sol-RatScam-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = _addr == TMP_131
CONDITION TMP_132"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_133(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_208(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_208(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_209(RSdatasets.Player) -> plyr_[_pID]
REF_210(bytes32) -> REF_209.name
REF_211(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_212(RSdatasets.PlayerRounds) -> REF_211[_rID]
REF_213(uint256) -> REF_212.keys
REF_214(RSdatasets.Player) -> plyr_[_pID]
REF_215(uint256) -> REF_214.win
REF_216(RSdatasets.Player) -> plyr_[_pID]
REF_217(uint256) -> REF_216.gen
REF_219(RSdatasets.Player) -> plyr_[_pID]
REF_220(uint256) -> REF_219.lrnd
TMP_134(uint256) = INTERNAL_CALL, RatScam.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_220)
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_217', 'TMP_134'] 
REF_221(RSdatasets.Player) -> plyr_[_pID]
REF_222(uint256) -> REF_221.aff
REF_223(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_224(RSdatasets.PlayerRounds) -> REF_223[_rID]
REF_225(uint256) -> REF_224.eth
RETURN _pID,REF_210,REF_213,REF_215,TMP_135,REF_222,REF_225"];
}
// Function: 2377.sol-RatScam-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_134(RSdatasets.Round) -> round_[_rID]
REF_135(uint256) -> REF_134.end
TMP_105(bool) = now > REF_135
REF_136(RSdatasets.Round) -> round_[_rID]
REF_137(bool) -> REF_136.ended
TMP_106(bool) = REF_137 == False
TMP_107(bool) = TMP_105 && TMP_106
REF_138(RSdatasets.Round) -> round_[_rID]
REF_139(uint256) -> REF_138.plyr
TMP_108(bool) = REF_139 != 0
TMP_109(bool) = TMP_107 && TMP_108
CONDITION TMP_109"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_140(RSdatasets.Round) -> round_[_rID]
REF_141(uint256) -> REF_140.plyr
TMP_110(bool) = REF_141 == _pID
CONDITION TMP_110"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_142(RSdatasets.Player) -> plyr_[_pID]
REF_143(uint256) -> REF_142.win
REF_145(RSdatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.pot
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_146', '48'] 
TMP_112(uint256) = TMP_111 / 100
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_143', 'TMP_112'] 
REF_148(RSdatasets.Player) -> plyr_[_pID]
REF_149(uint256) -> REF_148.gen
TMP_114(uint256) = INTERNAL_CALL, RatScam.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_152(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_153(RSdatasets.PlayerRounds) -> REF_152[_rID]
REF_154(uint256) -> REF_153.mask
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_114', 'REF_154'] 
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_149', 'TMP_115'] 
REF_155(RSdatasets.Player) -> plyr_[_pID]
REF_156(uint256) -> REF_155.aff
RETURN TMP_113,TMP_116,REF_156"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_157(RSdatasets.Player) -> plyr_[_pID]
REF_158(uint256) -> REF_157.win
REF_159(RSdatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.gen
TMP_117(uint256) = INTERNAL_CALL, RatScam.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_163(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_164(RSdatasets.PlayerRounds) -> REF_163[_rID]
REF_165(uint256) -> REF_164.mask
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', 'REF_165'] 
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_118'] 
REF_166(RSdatasets.Player) -> plyr_[_pID]
REF_167(uint256) -> REF_166.aff
RETURN REF_158,TMP_119,REF_167"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_168(RSdatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.win
REF_170(RSdatasets.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.gen
REF_173(RSdatasets.Player) -> plyr_[_pID]
REF_174(uint256) -> REF_173.lrnd
TMP_120(uint256) = INTERNAL_CALL, RatScam.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_174)
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_171', 'TMP_120'] 
REF_175(RSdatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.aff
RETURN REF_169,TMP_121,REF_176"];
}
// Function: 2377.sol-RatScam-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_177(RSdatasets.Round) -> round_[_rID]
REF_178(uint256) -> REF_177.mask
REF_180(RSdatasets.Round) -> round_[_rID]
REF_181(uint256) -> REF_180.pot
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_181', 'potSplit_'] 
TMP_123(uint256) = TMP_122 / 100
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', '1000000000000000000'] 
REF_184(RSdatasets.Round) -> round_[_rID]
REF_185(uint256) -> REF_184.keys
TMP_125(uint256) = TMP_124 / REF_185
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_178', 'TMP_125'] 
REF_187(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_188(RSdatasets.PlayerRounds) -> REF_187[_rID]
REF_189(uint256) -> REF_188.keys
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_126', 'REF_189'] 
TMP_128(uint256) = TMP_127 / 1000000000000000000
RETURN TMP_128"];
}
// Function: 2377.sol-RatScam-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_124(RSdatasets.Round) -> round_[_rID]
REF_125(uint256) -> REF_124.end
TMP_99(bool) = _now < REF_125
CONDITION TMP_99"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_126(RSdatasets.Round) -> round_[_rID]
REF_127(uint256) -> REF_126.strt
TMP_100(uint256) = REF_127 + rndGap_
TMP_101(bool) = _now > TMP_100
CONDITION TMP_101"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_128(RSdatasets.Round) -> round_[_rID]
REF_129(uint256) -> REF_128.end
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_129', '_now'] 
RETURN TMP_102"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_131(RSdatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.strt
TMP_103(uint256) = REF_132 + rndGap_
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_103', '_now'] 
RETURN TMP_104"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2377.sol-RatScam-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_368(RSdatasets.Round) -> round_[_rID]
REF_369(uint256) -> REF_368.strt
TMP_216(uint256) = REF_369 + rndGap_
TMP_217(bool) = _now > TMP_216
REF_370(RSdatasets.Round) -> round_[_rID]
REF_371(uint256) -> REF_370.end
TMP_218(bool) = _now <= REF_371
REF_372(RSdatasets.Round) -> round_[_rID]
REF_373(uint256) -> REF_372.end
TMP_219(bool) = _now > REF_373
REF_374(RSdatasets.Round) -> round_[_rID]
REF_375(uint256) -> REF_374.plyr
TMP_220(bool) = REF_375 == 0
TMP_221(bool) = TMP_219 && TMP_220
TMP_222(bool) = TMP_218 || TMP_221
TMP_223(bool) = TMP_217 && TMP_222
CONDITION TMP_223"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_376(RSdatasets.Round) -> round_[_rID]
REF_377(uint256) -> REF_376.keys
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_377', '_keys'] 
TMP_225(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_224', '_keys'] 
RETURN TMP_225"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_226(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_226"];
}
// Function: 2377.sol-RatScam-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet)

IRs:
TMP_368(bool) = activated_ == True
TMP_369(None) = SOLIDITY_CALL require(bool,string)(TMP_368,its not ready yet)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2377.sol-RatScam-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,non smart contract address only)

IRs:
TMP_370(bool) = _codeLength == 0
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,non smart contract address only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2377.sol-RatScam-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,too little money)

IRs:
TMP_372(bool) = _eth >= 1000000000
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,too little money)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,too much money)

IRs:
TMP_374(bool) = _eth <= 100000000000000000000000
TMP_375(None) = SOLIDITY_CALL require(bool,string)(TMP_374,too much money)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2377.sol-RatScam-managePlayer(uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_421(RSdatasets.Player) -> plyr_[_pID]
REF_422(uint256) -> REF_421.lrnd
TMP_249(bool) = REF_422 != 0
CONDITION TMP_249"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_423(RSdatasets.Player) -> plyr_[_pID]
REF_424(uint256) -> REF_423.lrnd
INTERNAL_CALL, RatScam.updateGenVault(uint256,uint256)(_pID,REF_424)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_425(RSdatasets.Player) -> plyr_[_pID]
REF_426(uint256) -> REF_425.lrnd
REF_426(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_427(uint256) -> _eventData_.compressedData
REF_428(uint256) -> _eventData_.compressedData
TMP_251(uint256) = REF_428 + 10
REF_427(uint256) (->_eventData_) := TMP_251(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2377.sol-RatScam-reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_246(RSdatasets.Round) -> round_[_rID]
REF_247(uint256) -> REF_246.end
TMP_145(bool) = _now > REF_247
REF_248(RSdatasets.Round) -> round_[_rID]
REF_249(bool) -> REF_248.ended
TMP_146(bool) = REF_249 == False
TMP_147(bool) = TMP_145 && TMP_146
CONDITION TMP_147"];
3->4[label="True"];
3->9[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_250(RSdatasets.Round) -> round_[_rID]
REF_251(bool) -> REF_250.ended
REF_251(bool) (->round_) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_148(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_148(RSdatasets.EventReturns)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_252(uint256) -> _eventData_.compressedData
REF_253(uint256) -> _eventData_.compressedData
TMP_149(uint256) = _now * 1000000000000000000
TMP_150(uint256) = REF_253 + TMP_149
REF_252(uint256) (->_eventData_) := TMP_150(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_254(uint256) -> _eventData_.compressedIDs
REF_255(uint256) -> _eventData_.compressedIDs
TMP_151(uint256) = REF_255 + _pID
REF_254(uint256) (->_eventData_) := TMP_151(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_257(RSdatasets.Player) -> plyr_[_pID]
REF_258(bytes32) -> REF_257.name
REF_259(uint256) -> _eventData_.compressedData
REF_260(uint256) -> _eventData_.compressedIDs
REF_261(address) -> _eventData_.winnerAddr
REF_262(bytes32) -> _eventData_.winnerName
REF_263(uint256) -> _eventData_.amountWon
REF_264(uint256) -> _eventData_.newPot
REF_265(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_258,msg.value,REF_259,REF_260,REF_261,REF_262,REF_263,REF_264,REF_265)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_266(RSdatasets.Player) -> plyr_[_pID]
REF_267(uint256) -> REF_266.gen
TMP_153(uint256) = INTERNAL_CALL, RatScam.withdrawEarnings(uint256)(_pID)
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_153', '_eth'] 
REF_267(uint256) (->plyr_) := TMP_154(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
core(_rID,_pID,_eth,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.core(uint256,uint256,uint256,uint256,RSdatasets.EventReturns)(_rID,_pID,_eth,_affID,_eventData_)"];
}
// Function: 2377.sol-RatScam-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _affCode == TMP_41
TMP_43(bool) = _affCode == msg.sender
TMP_44(bool) = TMP_42 || TMP_43
CONDITION TMP_44"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_36(RSdatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
_affID(uint256) := REF_37(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_38(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_38(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_39(RSdatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
TMP_45(bool) = _affID != REF_40
CONDITION TMP_45"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_41(RSdatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
REF_42(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, RatScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 2377.sol-RatScam-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_33(bool) = _affCode == 0
TMP_34(bool) = _affCode == _pID
TMP_35(bool) = TMP_33 || TMP_34
CONDITION TMP_35"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_29(RSdatasets.Player) -> plyr_[_pID]
REF_30(uint256) -> REF_29.laff
_affCode(uint256) := REF_30(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_31(RSdatasets.Player) -> plyr_[_pID]
REF_32(uint256) -> REF_31.laff
TMP_36(bool) = _affCode != REF_32
CONDITION TMP_36"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_33(RSdatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
REF_34(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, RatScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 2377.sol-RatScam-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_43(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_43(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_50(bool) = _affCode == 
REF_44(RSdatasets.Player) -> plyr_[_pID]
REF_45(bytes32) -> REF_44.name
TMP_51(bool) = _affCode == REF_45
TMP_52(bool) = TMP_50 || TMP_51
CONDITION TMP_52"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_46(RSdatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
_affID(uint256) := REF_47(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_48(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_48(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_49(RSdatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
TMP_53(bool) = _affID != REF_50
CONDITION TMP_53"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_51(RSdatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
REF_52(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, RatScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 2377.sol-RatScam-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(RatBook),only RatBook can call this function)

IRs:
TMP_227 = CONVERT RatBook to address
TMP_228(bool) = msg.sender == TMP_227
TMP_229(None) = SOLIDITY_CALL require(bool,string)(TMP_228,only RatBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_381(uint256) -> pIDxAddr_[_addr]
TMP_230(bool) = REF_381 != _pID
CONDITION TMP_230"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_382(uint256) -> pIDxAddr_[_addr]
REF_382(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_383(uint256) -> pIDxName_[_name]
TMP_231(bool) = REF_383 != _pID
CONDITION TMP_231"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_384(uint256) -> pIDxName_[_name]
REF_384(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_385(RSdatasets.Player) -> plyr_[_pID]
REF_386(address) -> REF_385.addr
TMP_232(bool) = REF_386 != _addr
CONDITION TMP_232"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_387(RSdatasets.Player) -> plyr_[_pID]
REF_388(address) -> REF_387.addr
REF_388(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_389(RSdatasets.Player) -> plyr_[_pID]
REF_390(bytes32) -> REF_389.name
TMP_233(bool) = REF_390 != _name
CONDITION TMP_233"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_391(RSdatasets.Player) -> plyr_[_pID]
REF_392(bytes32) -> REF_391.name
REF_392(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_393(RSdatasets.Player) -> plyr_[_pID]
REF_394(uint256) -> REF_393.laff
TMP_234(bool) = REF_394 != _laff
CONDITION TMP_234"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_395(RSdatasets.Player) -> plyr_[_pID]
REF_396(uint256) -> REF_395.laff
REF_396(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_397(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_398(bool) -> REF_397[_name]
TMP_235(bool) = REF_398 == False
CONDITION TMP_235"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_399(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_400(bool) -> REF_399[_name]
REF_400(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2377.sol-RatScam-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(RatBook),only RatBook can call this function)

IRs:
TMP_236 = CONVERT RatBook to address
TMP_237(bool) = msg.sender == TMP_236
TMP_238(None) = SOLIDITY_CALL require(bool,string)(TMP_237,only RatBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_401(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_402(bool) -> REF_401[_name]
TMP_239(bool) = REF_402 == False
CONDITION TMP_239"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_403(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_404(bool) -> REF_403[_name]
REF_404(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2377.sol-RatScam-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_77(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_77(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = RatBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_88(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_88(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_90(RSdatasets.Player) -> plyr_[_affID]
REF_91(address) -> REF_90.addr
REF_92(RSdatasets.Player) -> plyr_[_affID]
REF_93(bytes32) -> REF_92.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_91,REF_93,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
9->1;
}
// Function: 2377.sol-RatScam-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_81(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = RatBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_97(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_97(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_99(RSdatasets.Player) -> plyr_[_affID]
REF_100(address) -> REF_99.addr
REF_101(RSdatasets.Player) -> plyr_[_affID]
REF_102(bytes32) -> REF_101.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_100,REF_102,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
9->1;
}
// Function: 2377.sol-RatScam-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_85(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = RatBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_106(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_106(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_108(RSdatasets.Player) -> plyr_[_affID]
REF_109(address) -> REF_108.addr
REF_110(RSdatasets.Player) -> plyr_[_affID]
REF_111(bytes32) -> REF_110.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_109,REF_111,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
9->1;
}
// Function: 2377.sol-RatScam-setNextRndTime(uint32,uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == adminAddress,only owner can setNextRndTime)

IRs:
TMP_362(bool) = msg.sender == adminAddress
TMP_363(None) = SOLIDITY_CALL require(bool,string)(TMP_362,only owner can setNextRndTime)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rndInit_ = rndInit * 3600

IRs:
TMP_364(uint32) = rndInit * 3600
rndInit_(uint256) := TMP_364(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rndInc_ = rndInc * 1

IRs:
TMP_365(uint32) = rndInc * 1
rndInc_(uint256) := TMP_365(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rndMax_ = rndMax * 3600

IRs:
TMP_366(uint32) = rndMax * 3600
rndMax_(uint256) := TMP_366(uint32)"];
}
// Function: 2377.sol-RatScam-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
RatBook = RatBookInterface(0x3257d637b8977781b4f8178365858a474b2a6195)

IRs:
TMP_367 = CONVERT 287408364363548129702614974264179514064006439317 to RatBookInterface
RatBook(RatBookInterface) := TMP_367(RatBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = RatScam In One Hour

IRs:
name(string) := RatScam In One Hour(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = RS

IRs:
symbol(string) := RS(string)"];
}
// Function: 2377.sol-RatScam-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndMax_ = 3600

IRs:
rndMax_(uint256) := 3600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
fees_ = 60

IRs:
fees_(uint256) := 60(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
potSplit_ = 45

IRs:
potSplit_(uint256) := 45(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2377.sol-RatScam-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rID)

IRs:
TMP_277(uint256) = INTERNAL_CALL, RatScam.calcUnMaskedEarnings(uint256,uint256)(_pID,_rID)
_earnings(uint256) := TMP_277(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_278(bool) = _earnings > 0
CONDITION TMP_278"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_480(RSdatasets.Player) -> plyr_[_pID]
REF_481(uint256) -> REF_480.gen
REF_483(RSdatasets.Player) -> plyr_[_pID]
REF_484(uint256) -> REF_483.gen
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_484'] 
REF_481(uint256) (->plyr_) := TMP_279(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = _earnings.add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_485(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_486(RSdatasets.PlayerRounds) -> REF_485[_rID]
REF_487(uint256) -> REF_486.mask
REF_489(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_490(RSdatasets.PlayerRounds) -> REF_489[_rID]
REF_491(uint256) -> REF_490.mask
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_491'] 
REF_487(uint256) (->plyrRnds_) := TMP_280(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2377.sol-RatScam-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_544(RSdatasets.Round) -> round_[_rID]
REF_545(uint256) -> REF_544.keys
TMP_335(uint256) = TMP_334 / REF_545
_ppt(uint256) := TMP_335(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_546(RSdatasets.Round) -> round_[_rID]
REF_547(uint256) -> REF_546.mask
REF_549(RSdatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.mask
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_550'] 
REF_547(uint256) (->round_) := TMP_336(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_338(uint256) = TMP_337 / 1000000000000000000
_pearn(uint256) := TMP_338(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_552(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_553(RSdatasets.PlayerRounds) -> REF_552[_rID]
REF_554(uint256) -> REF_553.mask
REF_555(RSdatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.mask
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_556', '_keys'] 
TMP_340(uint256) = TMP_339 / 1000000000000000000
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_340', '_pearn'] 
REF_560(mapping(uint256 => RSdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_561(RSdatasets.PlayerRounds) -> REF_560[_rID]
REF_562(uint256) -> REF_561.mask
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_341', 'REF_562'] 
REF_554(uint256) (->plyrRnds_) := TMP_342(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_565(RSdatasets.Round) -> round_[_rID]
REF_566(uint256) -> REF_565.keys
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_566'] 
TMP_344(uint256) = TMP_343 / 1000000000000000000
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_344'] 
RETURN TMP_345"];
}
// Function: 2377.sol-RatScam-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_492(RSdatasets.Round) -> round_[_rID]
REF_493(uint256) -> REF_492.end
TMP_281(bool) = _now > REF_493
REF_494(RSdatasets.Round) -> round_[_rID]
REF_495(uint256) -> REF_494.plyr
TMP_282(bool) = REF_495 == 0
TMP_283(bool) = TMP_281 && TMP_282
CONDITION TMP_283"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_284(uint256) = _keys / 1000000000000000000
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_284', 'rndInc_'] 
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_285', '_now'] 
_newTime(uint256) := TMP_286(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_287(uint256) = _keys / 1000000000000000000
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_287', 'rndInc_'] 
REF_500(RSdatasets.Round) -> round_[_rID]
REF_501(uint256) -> REF_500.end
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_288', 'REF_501'] 
_newTime(uint256) := TMP_289(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_291(bool) = _newTime < TMP_290
CONDITION TMP_291"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_503(RSdatasets.Round) -> round_[_rID]
REF_504(uint256) -> REF_503.end
REF_504(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_505(RSdatasets.Round) -> round_[_rID]
REF_506(uint256) -> REF_505.end
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_506(uint256) (->round_) := TMP_292(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 2377.sol-RatScam-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_54(RSdatasets.Round) -> round_[_rID]
REF_55(uint256) -> REF_54.end
TMP_58(bool) = _now > REF_55
REF_56(RSdatasets.Round) -> round_[_rID]
REF_57(bool) -> REF_56.ended
TMP_59(bool) = REF_57 == False
TMP_60(bool) = TMP_58 && TMP_59
REF_58(RSdatasets.Round) -> round_[_rID]
REF_59(uint256) -> REF_58.plyr
TMP_61(bool) = REF_59 != 0
TMP_62(bool) = TMP_60 && TMP_61
CONDITION TMP_62"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_60(RSdatasets.Round) -> round_[_rID]
REF_61(bool) -> REF_60.ended
REF_61(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_63(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_63(RSdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_64(uint256) = INTERNAL_CALL, RatScam.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_64(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_65(bool) = _eth > 0
CONDITION TMP_65"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_62(RSdatasets.Player) -> plyr_[_pID]
REF_63(address) -> REF_62.addr
Transfer dest:REF_63 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_65(uint256) -> _eventData_.compressedData
REF_66(uint256) -> _eventData_.compressedData
TMP_67(uint256) = _now * 1000000000000000000
TMP_68(uint256) = REF_66 + TMP_67
REF_65(uint256) (->_eventData_) := TMP_68(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_67(uint256) -> _eventData_.compressedIDs
REF_68(uint256) -> _eventData_.compressedIDs
TMP_69(uint256) = REF_68 + _pID
REF_67(uint256) (->_eventData_) := TMP_69(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
RSEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_70(RSdatasets.Player) -> plyr_[_pID]
REF_71(bytes32) -> REF_70.name
REF_72(uint256) -> _eventData_.compressedData
REF_73(uint256) -> _eventData_.compressedIDs
REF_74(address) -> _eventData_.winnerAddr
REF_75(bytes32) -> _eventData_.winnerName
REF_76(uint256) -> _eventData_.amountWon
REF_77(uint256) -> _eventData_.newPot
REF_78(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_71,_eth,REF_72,REF_73,REF_74,REF_75,REF_76,REF_77,REF_78)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_71(uint256) = INTERNAL_CALL, RatScam.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_71(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_72(bool) = _eth > 0
CONDITION TMP_72"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_79(RSdatasets.Player) -> plyr_[_pID]
REF_80(address) -> REF_79.addr
Transfer dest:REF_80 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
RSEvents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_83(RSdatasets.Player) -> plyr_[_pID]
REF_84(bytes32) -> REF_83.name
Emit onWithdraw(_pID,msg.sender,REF_84,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
23->1;
}
// Function: 2377.sol-RatScam-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_567(RSdatasets.Player) -> plyr_[_pID]
REF_568(uint256) -> REF_567.lrnd
INTERNAL_CALL, RatScam.updateGenVault(uint256,uint256)(_pID,REF_568)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_569(RSdatasets.Player) -> plyr_[_pID]
REF_570(uint256) -> REF_569.win
REF_572(RSdatasets.Player) -> plyr_[_pID]
REF_573(uint256) -> REF_572.gen
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_570', 'REF_573'] 
REF_575(RSdatasets.Player) -> plyr_[_pID]
REF_576(uint256) -> REF_575.aff
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_347', 'REF_576'] 
_earnings(uint256) := TMP_348(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_349(bool) = _earnings > 0
CONDITION TMP_349"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_577(RSdatasets.Player) -> plyr_[_pID]
REF_578(uint256) -> REF_577.win
REF_578(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_579(RSdatasets.Player) -> plyr_[_pID]
REF_580(uint256) -> REF_579.gen
REF_580(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_581(RSdatasets.Player) -> plyr_[_pID]
REF_582(uint256) -> REF_581.aff
REF_582(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2377.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_451(uint256) = a + b
c(uint256) := TMP_451(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_452(bool) = c >= a
TMP_453(None) = SOLIDITY_CALL require(bool,string)(TMP_452,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2377.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_443(bool) = a == 0
CONDITION TMP_443"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_444(uint256) = a * b
c(uint256) := TMP_444(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_445(uint256) = c / a
TMP_446(bool) = TMP_445 == b
TMP_447(None) = SOLIDITY_CALL require(bool,string)(TMP_446,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2377.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_460(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_460"];
}
// Function: 2377.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_454(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_455(uint256) = TMP_454 / 2
z(uint256) := TMP_455(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_456(bool) = z < y
CONDITION TMP_456"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_457(uint256) = x / z
TMP_458(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_457,z)
TMP_459(uint256) = TMP_458 / 2
z(uint256) := TMP_459(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2377.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_448(bool) = b <= a
TMP_449(None) = SOLIDITY_CALL require(bool,string)(TMP_448,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_450(uint256) = a - b
RETURN TMP_450"];
}
}
