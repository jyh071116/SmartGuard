digraph G {
// Function: 238.sol-DEJToken-DEJToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethFundDeposit = 0x697e6C6845212AE294E55E0adB13977de0F0BD37

IRs:
ethFundDeposit(address) := 602263368439653745762891638948203171147391483191(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isFunding = false

IRs:
isFunding(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fundingStartBlock = 0

IRs:
fundingStartBlock(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fundingStopBlock = 0

IRs:
fundingStopBlock(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentSupply = formatDecimals(1000000000)

IRs:
TMP_52(uint256) = INTERNAL_CALL, DEJToken.formatDecimals(uint256)(1000000000)
currentSupply(uint256) := TMP_52(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = formatDecimals(1000000000)

IRs:
TMP_53(uint256) = INTERNAL_CALL, DEJToken.formatDecimals(uint256)(1000000000)
totalSupply(uint256) := TMP_53(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := totalSupply(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
currentSupply > totalSupply

IRs:
TMP_54(bool) = currentSupply > totalSupply
CONDITION TMP_54"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
}
// Function: 238.sol-DEJToken-allowance(address,address)
digraph{
}
// Function: 238.sol-DEJToken-approve(address,uint256)
digraph{
}
// Function: 238.sol-DEJToken-balanceOf(address)
digraph{
}
// Function: 238.sol-DEJToken-decreaseSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = formatDecimals(_value)

IRs:
TMP_61(uint256) = INTERNAL_CALL, DEJToken.formatDecimals(uint256)(_value)
value(uint256) := TMP_61(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value + tokenRaised > currentSupply

IRs:
TMP_62(uint256) = value + tokenRaised
TMP_63(bool) = TMP_62 > currentSupply
CONDITION TMP_63"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentSupply = safeSubtract(currentSupply,value)

IRs:
TMP_64(uint256) = INTERNAL_CALL, SafeMath.safeSubtract(uint256,uint256)(currentSupply,value)
currentSupply(uint256) := TMP_64(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
DecreaseSupply(value)

IRs:
Emit DecreaseSupply(value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, DEJToken.isOwner()()"];
7->1;
}
// Function: 238.sol-DEJToken-formatDecimals(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_value * 10 ** decimals

IRs:
TMP_50(uint256) = 10 ** decimals
TMP_51(uint256) = _value * TMP_50
RETURN TMP_51"];
}
// Function: 238.sol-DEJToken-increaseSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = formatDecimals(_value)

IRs:
TMP_55(uint256) = INTERNAL_CALL, DEJToken.formatDecimals(uint256)(_value)
value(uint256) := TMP_55(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value + currentSupply > totalSupply

IRs:
TMP_56(uint256) = value + currentSupply
TMP_57(bool) = TMP_56 > totalSupply
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentSupply = safeAdd(currentSupply,value)

IRs:
TMP_58(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(currentSupply,value)
currentSupply(uint256) := TMP_58(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
IncreaseSupply(value)

IRs:
Emit IncreaseSupply(value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, DEJToken.isOwner()()"];
7->1;
}
// Function: 238.sol-DEJToken-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ethFundDeposit)

IRs:
TMP_76(bool) = msg.sender == ethFundDeposit
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 238.sol-DEJToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_25(uint256) = x + y
z(uint256) := TMP_25(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_26(bool) = z >= x
TMP_27(bool) = z >= y
TMP_28(bool) = TMP_26 && TMP_27
TMP_29(None) = SOLIDITY_CALL assert(bool)(TMP_28)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 238.sol-DEJToken-safeMult(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_33(uint256) = x * y
z(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_34(bool) = x == 0
TMP_35(uint256) = z / x
TMP_36(bool) = TMP_35 == y
TMP_37(bool) = TMP_34 || TMP_36
TMP_38(None) = SOLIDITY_CALL assert(bool)(TMP_37)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 238.sol-DEJToken-safeSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_30(bool) = x >= y
TMP_31(None) = SOLIDITY_CALL assert(bool)(TMP_30)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_32(uint256) = x - y
z(uint256) := TMP_32(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 238.sol-DEJToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = De Home

IRs:
name(string) := De Home(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = DEJ

IRs:
symbol(string) := DEJ(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 238.sol-DEJToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tokenRaised = 0

IRs:
tokenRaised(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
tokenMigrated = 0

IRs:
tokenMigrated(uint256) := 0(uint256)"];
}
// Function: 238.sol-DEJToken-startFunding(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
isFunding

IRs:
CONDITION isFunding"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_fundingStartBlock >= _fundingStopBlock

IRs:
TMP_67(bool) = _fundingStartBlock >= _fundingStopBlock
CONDITION TMP_67"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
block.number >= _fundingStartBlock

IRs:
TMP_68(bool) = block.number >= _fundingStartBlock
CONDITION TMP_68"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
fundingStartBlock = _fundingStartBlock

IRs:
fundingStartBlock(uint256) := _fundingStartBlock(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
fundingStopBlock = _fundingStopBlock

IRs:
fundingStopBlock(uint256) := _fundingStopBlock(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isFunding = true

IRs:
isFunding(bool) := True(bool)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, DEJToken.isOwner()()"];
13->1;
}
// Function: 238.sol-DEJToken-stopFunding()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
! isFunding

IRs:
TMP_70 = UnaryType.BANG isFunding 
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isFunding = false

IRs:
isFunding(bool) := False(bool)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, DEJToken.isOwner()()"];
5->1;
}
// Function: 238.sol-DEJToken-transfer(address,uint256)
digraph{
}
// Function: 238.sol-DEJToken-transferETH()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
this.balance == 0

IRs:
REF_31(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_72(bool) = REF_31 == 0
CONDITION TMP_72"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! ethFundDeposit.send(this.balance)

IRs:
REF_33(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_73 = SEND dest:ethFundDeposit value:REF_33
TMP_74 = UnaryType.BANG TMP_73 
CONDITION TMP_74"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, DEJToken.isOwner()()"];
7->1;
}
// Function: 238.sol-DEJToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 238.sol-IMigrationContract-migrate(address,uint256)
digraph{
}
// Function: 238.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_0(uint256) = x + y
z(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_1(bool) = z >= x
TMP_2(bool) = z >= y
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 238.sol-SafeMath-safeMult(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_8(uint256) = x * y
z(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_9(bool) = x == 0
TMP_10(uint256) = z / x
TMP_11(bool) = TMP_10 == y
TMP_12(bool) = TMP_9 || TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 238.sol-SafeMath-safeSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_5(bool) = x >= y
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_7(uint256) = x - y
z(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 238.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 238.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 238.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 238.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_14(bool) = REF_0 >= _value
TMP_15(bool) = _value > 0
TMP_16(bool) = TMP_14 && TMP_15
CONDITION TMP_16"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 238.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_18(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_19(bool) = REF_5 >= _value
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(bool) = _value > 0
TMP_22(bool) = TMP_20 && TMP_21
CONDITION TMP_22"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 238.sol-Token-allowance(address,address)
digraph{
}
// Function: 238.sol-Token-approve(address,uint256)
digraph{
}
// Function: 238.sol-Token-balanceOf(address)
digraph{
}
// Function: 238.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 238.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
