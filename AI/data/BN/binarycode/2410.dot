digraph G {
// Function: 2410.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_15(bool) = size > 0
RETURN TMP_15"];
}
// Function: 2410.sol-ERC165-supportsInterface(bytes4)
digraph{
}
// Function: 2410.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 2410.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 2410.sol-ERC721-exists(uint256)
digraph{
}
// Function: 2410.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 2410.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 2410.sol-ERC721-name()
digraph{
}
// Function: 2410.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 2410.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 2410.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 2410.sol-ERC721-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 2410.sol-ERC721-supportsInterface(bytes4)
digraph{
}
// Function: 2410.sol-ERC721-symbol()
digraph{
}
// Function: 2410.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 2410.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 2410.sol-ERC721-tokenURI(uint256)
digraph{
}
// Function: 2410.sol-ERC721-totalSupply()
digraph{
}
// Function: 2410.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 2410.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 2410.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 2410.sol-ERC721Basic-isApprovedForAll(address,address)
digraph{
}
// Function: 2410.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 2410.sol-ERC721Basic-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Basic-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 2410.sol-ERC721Basic-setApprovalForAll(address,bool)
digraph{
}
// Function: 2410.sol-ERC721Basic-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 2410.sol-ERC721Basic-supportsInterface(bytes4)
digraph{
}
// Function: 2410.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721BasicToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_71 = CONVERT 0 to address
Emit Transfer(_owner,TMP_71,_tokenId)"];
}
// Function: 2410.sol-ERC721BasicToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_63 = CONVERT 0 to address
TMP_64(bool) = _to != TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_67 = CONVERT 0 to address
Emit Transfer(TMP_67,_to,_tokenId)"];
}
// Function: 2410.sol-ERC721BasicToken-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_17(bool) = _interfaceId != 4294967295
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_3(bool) -> supportedInterfaces[_interfaceId]
REF_3(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 2410.sol-ERC721BasicToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_15(address) -> tokenOwner[_tokenId]
TMP_79 = CONVERT 0 to address
TMP_80(bool) = REF_15 == TMP_79
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_16(address) -> tokenOwner[_tokenId]
REF_16(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_17(uint256) -> ownedTokensCount[_to]
REF_18(uint256) -> ownedTokensCount[_to]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '1'] 
REF_17(uint256) (->ownedTokensCount) := TMP_82(uint256)"];
}
// Function: 2410.sol-ERC721BasicToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_29(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_29(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_30(bool) = _to != owner
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_32(bool) = msg.sender == owner
TMP_33(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_34(bool) = TMP_32 || TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_7(address) -> tokenApprovals[_tokenId]
REF_7(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
}
// Function: 2410.sol-ERC721BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _owner != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_4(uint256) -> ownedTokensCount[_owner]
RETURN REF_4"];
}
// Function: 2410.sol-ERC721BasicToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_88(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_89 = UnaryType.BANG TMP_88 
CONDITION TMP_89"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)

IRs:
TMP_90 = CONVERT _to to ERC721Receiver
TMP_91(bytes4) = HIGH_LEVEL_CALL, dest:TMP_90(ERC721Receiver), function:onERC721Received, arguments:['msg.sender', '_from', '_tokenId', '_data']  
retval(bytes4) := TMP_91(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_92(bool) = retval == ERC721_RECEIVED
RETURN TMP_92"];
}
// Function: 2410.sol-ERC721BasicToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_73(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_74(bool) = TMP_73 == _owner
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_13(address) -> tokenApprovals[_tokenId]
TMP_76 = CONVERT 0 to address
TMP_77(bool) = REF_13 != TMP_76
CONDITION TMP_77"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_14(address) -> tokenApprovals[_tokenId]
TMP_78 = CONVERT 0 to address
REF_14(address) (->tokenApprovals) := TMP_78(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2410.sol-ERC721BasicToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC721)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_registerInterface(InterfaceId_ERC721Exists)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Exists)"];
}
// Function: 2410.sol-ERC721BasicToken-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_6(address) -> tokenOwner[_tokenId]
owner(address) := REF_6(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = owner != TMP_27
RETURN TMP_28"];
}
// Function: 2410.sol-ERC721BasicToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_8(address) -> tokenApprovals[_tokenId]
RETURN REF_8"];
}
// Function: 2410.sol-ERC721BasicToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_11(mapping(address => bool)) -> operatorApprovals[_owner]
REF_12(bool) -> REF_11[_operator]
RETURN REF_12"];
}
// Function: 2410.sol-ERC721BasicToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_56(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_56(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_57(bool) = _spender == owner
TMP_58(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_59(bool) = TMP_58 == _spender
TMP_60(bool) = TMP_57 || TMP_59
TMP_61(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_62(bool) = TMP_60 || TMP_61
RETURN TMP_62"];
}
// Function: 2410.sol-ERC721BasicToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_5(address) -> tokenOwner[_tokenId]
owner(address) := REF_5(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = owner != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 2410.sol-ERC721BasicToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_83(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_84(bool) = TMP_83 == _from
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_20(uint256) -> ownedTokensCount[_from]
REF_21(uint256) -> ownedTokensCount[_from]
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '1'] 
REF_20(uint256) (->ownedTokensCount) := TMP_86(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_23(address) -> tokenOwner[_tokenId]
TMP_87 = CONVERT 0 to address
REF_23(address) (->tokenOwner) := TMP_87(address)"];
}
// Function: 2410.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
}
// Function: 2410.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_54(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
}
// Function: 2410.sol-ERC721BasicToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_37(bool) = _to != msg.sender
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_9(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_10(bool) -> REF_9[_to]
REF_10(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 2410.sol-ERC721BasicToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
}
// Function: 2410.sol-ERC721BasicToken-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_2(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_2"];
}
// Function: 2410.sol-ERC721BasicToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_40(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = _from != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = _to != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 2410.sol-ERC721Enumerable-approve(address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-getApproved(uint256)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-isApprovedForAll(address,address)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-setApprovalForAll(address,bool)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 2410.sol-ERC721Enumerable-supportsInterface(bytes4)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 2410.sol-ERC721Enumerable-transferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Metadata-approve(address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 2410.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 2410.sol-ERC721Metadata-getApproved(uint256)
digraph{
}
// Function: 2410.sol-ERC721Metadata-isApprovedForAll(address,address)
digraph{
}
// Function: 2410.sol-ERC721Metadata-name()
digraph{
}
// Function: 2410.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 2410.sol-ERC721Metadata-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Metadata-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 2410.sol-ERC721Metadata-setApprovalForAll(address,bool)
digraph{
}
// Function: 2410.sol-ERC721Metadata-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 2410.sol-ERC721Metadata-supportsInterface(bytes4)
digraph{
}
// Function: 2410.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 2410.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 2410.sol-ERC721Metadata-transferFrom(address,address,uint256)
digraph{
}
// Function: 2410.sol-ERC721Receiver-onERC721Received(address,address,uint256,bytes)
digraph{
}
// Function: 2410.sol-ERC721Receiver-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
}
// Function: 2410.sol-ERC721Token-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._burn(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._burn(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
bytes(tokenURIs[_tokenId]).length != 0

IRs:
REF_80(string) -> tokenURIs[_tokenId]
TMP_194 = CONVERT REF_80 to bytes
REF_81 -> LENGTH TMP_194
TMP_195(bool) = REF_81 != 0
CONDITION TMP_195"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete tokenURIs[_tokenId]

IRs:
REF_82(string) -> tokenURIs[_tokenId]
tokenURIs = delete REF_82 "];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokenIndex = allTokensIndex[_tokenId]

IRs:
REF_83(uint256) -> allTokensIndex[_tokenId]
tokenIndex(uint256) := REF_83(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTokenIndex = allTokens.length.sub(1)

IRs:
REF_84 -> LENGTH allTokens
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_84', '1'] 
lastTokenIndex(uint256) := TMP_196(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastToken = allTokens[lastTokenIndex]

IRs:
REF_86(uint256) -> allTokens[lastTokenIndex]
lastToken(uint256) := REF_86(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allTokens[tokenIndex] = lastToken

IRs:
REF_87(uint256) -> allTokens[tokenIndex]
REF_87(uint256) (->allTokens) := lastToken(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allTokens[lastTokenIndex] = 0

IRs:
REF_88(uint256) -> allTokens[lastTokenIndex]
REF_88(uint256) (->allTokens) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
allTokens.length --

IRs:
REF_89 -> LENGTH allTokens
TMP_197(uint256) := REF_89(uint256)
REF_89(-> allTokens) = REF_89 - 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
allTokensIndex[_tokenId] = 0

IRs:
REF_90(uint256) -> allTokensIndex[_tokenId]
REF_90(uint256) (->allTokensIndex) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allTokensIndex[lastToken] = tokenIndex

IRs:
REF_91(uint256) -> allTokensIndex[lastToken]
REF_91(uint256) (->allTokensIndex) := tokenIndex(uint256)"];
}
// Function: 2410.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._mint(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._mint(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allTokensIndex[_tokenId] = allTokens.length

IRs:
REF_75(uint256) -> allTokensIndex[_tokenId]
REF_76 -> LENGTH allTokens
REF_75(uint256) (->allTokensIndex) := REF_76(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allTokens.push(_tokenId)

IRs:
REF_78 -> LENGTH allTokens
TMP_191(uint256) := REF_78(uint256)
TMP_192(uint256) = TMP_191 + 1
REF_78(uint256) (->allTokens) := TMP_192(uint256)
REF_79(uint256) -> allTokens[TMP_191]
REF_79(uint256) (->allTokens) := _tokenId(uint256)"];
}
// Function: 2410.sol-ERC721Token-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_168(bool) = _interfaceId != 4294967295
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_49(bool) -> supportedInterfaces[_interfaceId]
REF_49(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 2410.sol-ERC721Token-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_180(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_55(string) -> tokenURIs[_tokenId]
REF_55(string) (->tokenURIs) := _uri(string)"];
}
// Function: 2410.sol-ERC721Token-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = ownedTokens[_to].length

IRs:
REF_56(uint256[]) -> ownedTokens[_to]
REF_57 -> LENGTH REF_56
length(uint256) := REF_57(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_58(uint256[]) -> ownedTokens[_to]
REF_60 -> LENGTH REF_58
TMP_184(uint256) := REF_60(uint256)
TMP_185(uint256) = TMP_184 + 1
REF_60(uint256) (->ownedTokens) := TMP_185(uint256)
REF_61(uint256) -> REF_58[TMP_184]
REF_61(uint256) (->ownedTokens) := _tokenId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_62(uint256) -> ownedTokensIndex[_tokenId]
REF_62(uint256) (->ownedTokensIndex) := length(uint256)"];
}
// Function: 2410.sol-ERC721Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_103(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_103(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_104(bool) = _to != owner
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_106(bool) = msg.sender == owner
TMP_107(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_108(bool) = TMP_106 || TMP_107
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_29(address) -> tokenApprovals[_tokenId]
REF_29(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
}
// Function: 2410.sol-ERC721Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_95 = CONVERT 0 to address
TMP_96(bool) = _owner != TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_26(uint256) -> ownedTokensCount[_owner]
RETURN REF_26"];
}
// Function: 2410.sol-ERC721Token-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_162(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_163 = UnaryType.BANG TMP_162 
CONDITION TMP_163"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)

IRs:
TMP_164 = CONVERT _to to ERC721Receiver
TMP_165(bytes4) = HIGH_LEVEL_CALL, dest:TMP_164(ERC721Receiver), function:onERC721Received, arguments:['msg.sender', '_from', '_tokenId', '_data']  
retval(bytes4) := TMP_165(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_166(bool) = retval == ERC721_RECEIVED
RETURN TMP_166"];
}
// Function: 2410.sol-ERC721Token-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_147(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_148(bool) = TMP_147 == _owner
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_35(address) -> tokenApprovals[_tokenId]
TMP_150 = CONVERT 0 to address
TMP_151(bool) = REF_35 != TMP_150
CONDITION TMP_151"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_36(address) -> tokenApprovals[_tokenId]
TMP_152 = CONVERT 0 to address
REF_36(address) (->tokenApprovals) := TMP_152(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2410.sol-ERC721Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC165)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC165)"];
}
// Function: 2410.sol-ERC721Token-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_registerInterface(InterfaceId_ERC721Enumerable)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Enumerable)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_registerInterface(InterfaceId_ERC721Metadata)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Metadata)"];
}
// Function: 2410.sol-ERC721Token-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_28(address) -> tokenOwner[_tokenId]
owner(address) := REF_28(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = owner != TMP_101
RETURN TMP_102"];
}
// Function: 2410.sol-ERC721Token-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_30(address) -> tokenApprovals[_tokenId]
RETURN REF_30"];
}
// Function: 2410.sol-ERC721Token-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_33(mapping(address => bool)) -> operatorApprovals[_owner]
REF_34(bool) -> REF_33[_operator]
RETURN REF_34"];
}
// Function: 2410.sol-ERC721Token-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_130(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_130(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_131(bool) = _spender == owner
TMP_132(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_133(bool) = TMP_132 == _spender
TMP_134(bool) = TMP_131 || TMP_133
TMP_135(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_136(bool) = TMP_134 || TMP_135
RETURN TMP_136"];
}
// Function: 2410.sol-ERC721Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name_

IRs:
RETURN name_"];
}
// Function: 2410.sol-ERC721Token-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_27(address) -> tokenOwner[_tokenId]
owner(address) := REF_27(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_98 = CONVERT 0 to address
TMP_99(bool) = owner != TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 2410.sol-ERC721Token-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_63(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_63(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = ownedTokens[_from].length.sub(1)

IRs:
REF_64(uint256[]) -> ownedTokens[_from]
REF_65 -> LENGTH REF_64
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_65', '1'] 
lastTokenIndex(uint256) := TMP_187(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_67(uint256[]) -> ownedTokens[_from]
REF_68(uint256) -> REF_67[lastTokenIndex]
lastToken(uint256) := REF_68(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_69(uint256[]) -> ownedTokens[_from]
REF_70(uint256) -> REF_69[tokenIndex]
REF_70(uint256) (->ownedTokens) := lastToken(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_71(uint256[]) -> ownedTokens[_from]
REF_72 -> LENGTH REF_71
TMP_188(uint256) := REF_72(uint256)
REF_72(-> ownedTokens) = REF_72 - 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_73(uint256) -> ownedTokensIndex[_tokenId]
REF_73(uint256) (->ownedTokensIndex) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_74(uint256) -> ownedTokensIndex[lastToken]
REF_74(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
}
// Function: 2410.sol-ERC721Token-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
}
// Function: 2410.sol-ERC721Token-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_128(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
}
// Function: 2410.sol-ERC721Token-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_111(bool) = _to != msg.sender
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_31(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_32(bool) -> REF_31[_to]
REF_32(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 2410.sol-ERC721Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 2410.sol-ERC721Token-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_48(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_48"];
}
// Function: 2410.sol-ERC721Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol_

IRs:
RETURN symbol_"];
}
// Function: 2410.sol-ERC721Token-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < totalSupply())

IRs:
TMP_177(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
TMP_178(bool) = _index < TMP_177
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allTokens[_index]

IRs:
REF_54(uint256) -> allTokens[_index]
RETURN REF_54"];
}
// Function: 2410.sol-ERC721Token-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < balanceOf(_owner))

IRs:
TMP_174(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
TMP_175(bool) = _index < TMP_174
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokens[_owner][_index]

IRs:
REF_51(uint256[]) -> ownedTokens[_owner]
REF_52(uint256) -> REF_51[_index]
RETURN REF_52"];
}
// Function: 2410.sol-ERC721Token-tokenURI(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_172(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenURIs[_tokenId]

IRs:
REF_50(string) -> tokenURIs[_tokenId]
RETURN REF_50"];
}
// Function: 2410.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allTokens.length

IRs:
REF_53 -> LENGTH allTokens
RETURN REF_53"];
}
// Function: 2410.sol-ERC721Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_114(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_116 = CONVERT 0 to address
TMP_117(bool) = _from != TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_119 = CONVERT 0 to address
TMP_120(bool) = _to != TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 2410.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_12(uint256) = a + b
c(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_13(bool) = c >= a
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2410.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_8(uint256) = a / b
RETURN TMP_8"];
}
// Function: 2410.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_3(bool) = a == 0
CONDITION TMP_3"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_4(uint256) = a * b
c(uint256) := TMP_4(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_5(uint256) = c / a
TMP_6(bool) = TMP_5 == b
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2410.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_9(bool) = b <= a
TMP_10(None) = SOLIDITY_CALL assert(bool)(TMP_9)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_11(uint256) = a - b
RETURN TMP_11"];
}
// Function: 2410.sol-SupportsInterfaceWithLookup-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_1(bool) = _interfaceId != 4294967295
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_1(bool) -> supportedInterfaces[_interfaceId]
REF_1(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 2410.sol-SupportsInterfaceWithLookup-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC165)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC165)"];
}
// Function: 2410.sol-SupportsInterfaceWithLookup-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
}
// Function: 2410.sol-SupportsInterfaceWithLookup-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_0(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_0"];
}
// Function: 2410.sol-lettertoken205-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_278 = CONVERT 0 to address
Emit Transfer(_owner,TMP_278,_tokenId)"];
}
// Function: 2410.sol-lettertoken205-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_270 = CONVERT 0 to address
TMP_271(bool) = _to != TMP_270
TMP_272(None) = SOLIDITY_CALL require(bool)(TMP_271)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_274 = CONVERT 0 to address
Emit Transfer(TMP_274,_to,_tokenId)"];
}
// Function: 2410.sol-lettertoken205-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_301(bool) = _interfaceId != 4294967295
TMP_302(None) = SOLIDITY_CALL require(bool)(TMP_301)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_157(bool) -> supportedInterfaces[_interfaceId]
REF_157(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 2410.sol-lettertoken205-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_208(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_209(None) = SOLIDITY_CALL require(bool)(TMP_208)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_97(string) -> tokenURIs[_tokenId]
REF_97(string) (->tokenURIs) := _uri(string)"];
}
// Function: 2410.sol-lettertoken205-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_145(address) -> tokenOwner[_tokenId]
TMP_286 = CONVERT 0 to address
TMP_287(bool) = REF_145 == TMP_286
TMP_288(None) = SOLIDITY_CALL require(bool)(TMP_287)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_146(address) -> tokenOwner[_tokenId]
REF_146(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_147(uint256) -> ownedTokensCount[_to]
REF_148(uint256) -> ownedTokensCount[_to]
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_148', '1'] 
REF_147(uint256) (->ownedTokensCount) := TMP_289(uint256)"];
}
// Function: 2410.sol-lettertoken205-appendUint8ToString(string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
maxlength = 100

IRs:
maxlength(uint256) := 100(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
reversed = new bytes(maxlength)

IRs:
TMP_340 = new bytes(maxlength)
reversed(bytes) := TMP_340(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
v != 0

IRs:
TMP_341(bool) = v != 0
CONDITION TMP_341"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
remainder = v % 10

IRs:
TMP_342(uint8) = v % 10
remainder(uint256) := TMP_342(uint8)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
v = v / 10

IRs:
TMP_343(uint8) = v / 10
v(uint8) := TMP_343(uint8)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
reversed[i ++] = bytes1(48 + remainder)

IRs:
TMP_344(uint256) := i(uint256)
i(uint256) = i + 1
REF_175(bytes1) -> reversed[TMP_344]
TMP_345(uint256) = 48 + remainder
TMP_346 = CONVERT TMP_345 to bytes1
REF_175(bytes1) (->reversed) := TMP_346(bytes1)"];
8->5;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
inStrb = bytes(inStr)

IRs:
TMP_347 = CONVERT inStr to bytes
inStrb(bytes) := TMP_347(bytes)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
s = new bytes(inStrb.length + i)

IRs:
REF_176 -> LENGTH inStrb
TMP_349(uint256) = REF_176 + i
TMP_350 = new bytes(TMP_349)
s(bytes) := TMP_350(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12
"];
12->15;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->21;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
j < inStrb.length

IRs:
REF_177 -> LENGTH inStrb
TMP_351(bool) = j < REF_177
CONDITION TMP_351"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
s[j] = inStrb[j]

IRs:
REF_178(None) -> s[j]
REF_179(None) -> inStrb[j]
REF_178(None) (->s) := REF_179(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
j ++

IRs:
TMP_352(uint256) := j(uint256)
j(uint256) = j + 1"];
18->16;
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->25;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
j < i

IRs:
TMP_353(bool) = j < i
CONDITION TMP_353"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
s[j + inStrb.length] = reversed[i - 1 - j]

IRs:
REF_180 -> LENGTH inStrb
TMP_354(uint256) = j + REF_180
REF_181(None) -> s[TMP_354]
TMP_355(uint256) = i - 1
TMP_356(uint256) = TMP_355 - j
REF_182(None) -> reversed[TMP_356]
REF_181(None) (->s) := REF_182(None)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
j ++

IRs:
TMP_357(uint256) := j(uint256)
j(uint256) = j + 1"];
24->22;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
str = string(s)

IRs:
TMP_358 = CONVERT s to string
str(string) := TMP_358(string)"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
str

IRs:
RETURN str"];
}
// Function: 2410.sol-lettertoken205-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_236(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_236(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_237(bool) = _to != owner
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_239(bool) = msg.sender == owner
TMP_240(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_241(bool) = TMP_239 || TMP_240
TMP_242(None) = SOLIDITY_CALL require(bool)(TMP_241)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_137(address) -> tokenApprovals[_tokenId]
REF_137(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
}
// Function: 2410.sol-lettertoken205-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_228 = CONVERT 0 to address
TMP_229(bool) = _owner != TMP_228
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_134(uint256) -> ownedTokensCount[_owner]
RETURN REF_134"];
}
// Function: 2410.sol-lettertoken205-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_295(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_296 = UnaryType.BANG TMP_295 
CONDITION TMP_296"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)

IRs:
TMP_297 = CONVERT _to to ERC721Receiver
TMP_298(bytes4) = HIGH_LEVEL_CALL, dest:TMP_297(ERC721Receiver), function:onERC721Received, arguments:['msg.sender', '_from', '_tokenId', '_data']  
retval(bytes4) := TMP_298(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_299(bool) = retval == ERC721_RECEIVED
RETURN TMP_299"];
}
// Function: 2410.sol-lettertoken205-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_280(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_281(bool) = TMP_280 == _owner
TMP_282(None) = SOLIDITY_CALL require(bool)(TMP_281)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_143(address) -> tokenApprovals[_tokenId]
TMP_283 = CONVERT 0 to address
TMP_284(bool) = REF_143 != TMP_283
CONDITION TMP_284"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_144(address) -> tokenApprovals[_tokenId]
TMP_285 = CONVERT 0 to address
REF_144(address) (->tokenApprovals) := TMP_285(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2410.sol-lettertoken205-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ERC721Token(lettertoken205,lettertoken205)

IRs:
INTERNAL_CALL, ERC721Token.constructor(string,string)(lettertoken205,lettertoken205)"];
}
// Function: 2410.sol-lettertoken205-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_registerInterface(InterfaceId_ERC721Enumerable)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Enumerable)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_registerInterface(InterfaceId_ERC721Metadata)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Metadata)"];
}
// Function: 2410.sol-lettertoken205-create(uint8,uint8,uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenUri = createTokenUri(data1,data2,data3,data4)

IRs:
TMP_304(string) = INTERNAL_CALL, lettertoken205.createTokenUri(uint8,uint8,uint64,uint64)(data1,data2,data3,data4)
tokenUri(string) := TMP_304(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_newToken = Token({data1:data1,data2:data2,data3:data3,data4:data4,startBlock:uint64(block.number)})

IRs:
TMP_305 = CONVERT block.number to uint64
TMP_306(lettertoken205.Token) = new Token(data1,data2,data3,data4,TMP_305)
_newToken(lettertoken205.Token) := TMP_306(lettertoken205.Token)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_tokenId = tokens.push(_newToken) - 1

IRs:
REF_159 -> LENGTH tokens
TMP_309(uint256) := REF_159(uint256)
TMP_310(uint256) = TMP_309 + 1
REF_159(uint256) (->tokens) := TMP_310(uint256)
REF_160(lettertoken205.Token) -> tokens[TMP_309]
REF_160(lettertoken205.Token) (->tokens) := _newToken(lettertoken205.Token)
TMP_308(None) = TMP_307 - 1
_tokenId(uint256) := TMP_308(None)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(msg.sender,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setTokenURI(_tokenId,tokenUri)

IRs:
INTERNAL_CALL, ERC721Token._setTokenURI(uint256,string)(_tokenId,tokenUri)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenUri = strConcat(tokenUri,-)

IRs:
TMP_313(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(tokenUri,-)
tokenUri(string) := TMP_313(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokenIdb = uint2str(_tokenId)

IRs:
TMP_314(string) = INTERNAL_CALL, lettertoken205.uint2str(uint256)(_tokenId)
tokenIdb(string) := TMP_314(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenUri = strConcat(tokenUri,tokenIdb)

IRs:
TMP_315(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(tokenUri,tokenIdb)
tokenUri(string) := TMP_315(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Create(_tokenId,msg.sender,data1,data2,data3,data4,_newToken.startBlock,tokenUri)

IRs:
REF_161(uint64) -> _newToken.startBlock
Emit Create(_tokenId,msg.sender,data1,data2,data3,data4,REF_161,tokenUri)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
_tokenId

IRs:
RETURN _tokenId"];
11[label="Node Type: RETURN 11

EXPRESSION:
_tokenId

IRs:
RETURN _tokenId"];
}
// Function: 2410.sol-lettertoken205-createTokenUri(uint8,uint8,uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
uri = https://www.millionetherwords.com/exchange/displaytoken/?s=

IRs:
uri(string) := https://www.millionetherwords.com/exchange/displaytoken/?s=(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
uri = appendUint8ToString(uri,data1)

IRs:
TMP_317(string) = INTERNAL_CALL, lettertoken205.appendUint8ToString(string,uint8)(uri,data1)
uri(string) := TMP_317(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
uri = strConcat(uri,-)

IRs:
TMP_318(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(uri,-)
uri(string) := TMP_318(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
uri = appendUint8ToString(uri,data2)

IRs:
TMP_319(string) = INTERNAL_CALL, lettertoken205.appendUint8ToString(string,uint8)(uri,data2)
uri(string) := TMP_319(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
uri = strConcat(uri,-)

IRs:
TMP_320(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(uri,-)
uri(string) := TMP_320(string)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
data3b = uint2str(data3)

IRs:
TMP_321(string) = INTERNAL_CALL, lettertoken205.uint2str(uint256)(data3)
data3b(string) := TMP_321(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
uri = strConcat(uri,data3b)

IRs:
TMP_322(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(uri,data3b)
uri(string) := TMP_322(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
uri = strConcat(uri,-)

IRs:
TMP_323(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(uri,-)
uri(string) := TMP_323(string)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
data4b = uint2str(data4)

IRs:
TMP_324(string) = INTERNAL_CALL, lettertoken205.uint2str(uint256)(data4)
data4b(string) := TMP_324(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
uri = strConcat(uri,data4b)

IRs:
TMP_325(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(uri,data4b)
uri(string) := TMP_325(string)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
uri = strConcat(uri,.png)

IRs:
TMP_326(string) = INTERNAL_CALL, lettertoken205.strConcat(string,string)(uri,.png)
uri(string) := TMP_326(string)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
uri

IRs:
RETURN uri"];
}
// Function: 2410.sol-lettertoken205-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_136(address) -> tokenOwner[_tokenId]
owner(address) := REF_136(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_234 = CONVERT 0 to address
TMP_235(bool) = owner != TMP_234
RETURN TMP_235"];
}
// Function: 2410.sol-lettertoken205-get(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(tokenOwner[_id],tokens[_id].data1,tokens[_id].data2,tokens[_id].data3,tokens[_id].data4,tokens[_id].startBlock)

IRs:
REF_162(address) -> tokenOwner[_id]
REF_163(lettertoken205.Token) -> tokens[_id]
REF_164(uint8) -> REF_163.data1
REF_165(lettertoken205.Token) -> tokens[_id]
REF_166(uint8) -> REF_165.data2
REF_167(lettertoken205.Token) -> tokens[_id]
REF_168(uint64) -> REF_167.data3
REF_169(lettertoken205.Token) -> tokens[_id]
REF_170(uint64) -> REF_169.data4
REF_171(lettertoken205.Token) -> tokens[_id]
REF_172(uint64) -> REF_171.startBlock
RETURN REF_162,REF_164,REF_166,REF_168,REF_170,REF_172"];
2[label="Node Type: RETURN 2

EXPRESSION:
(owner,data1,data2,data3,data4,startBlock)

IRs:
RETURN owner,data1,data2,data3,data4,startBlock"];
}
// Function: 2410.sol-lettertoken205-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_138(address) -> tokenApprovals[_tokenId]
RETURN REF_138"];
}
// Function: 2410.sol-lettertoken205-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_141(mapping(address => bool)) -> operatorApprovals[_owner]
REF_142(bool) -> REF_141[_operator]
RETURN REF_142"];
}
// Function: 2410.sol-lettertoken205-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_263(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_263(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_264(bool) = _spender == owner
TMP_265(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_266(bool) = TMP_265 == _spender
TMP_267(bool) = TMP_264 || TMP_266
TMP_268(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_269(bool) = TMP_267 || TMP_268
RETURN TMP_269"];
}
// Function: 2410.sol-lettertoken205-name()
digraph{
}
// Function: 2410.sol-lettertoken205-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_135(address) -> tokenOwner[_tokenId]
owner(address) := REF_135(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_231 = CONVERT 0 to address
TMP_232(bool) = owner != TMP_231
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 2410.sol-lettertoken205-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_290(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_291(bool) = TMP_290 == _from
TMP_292(None) = SOLIDITY_CALL require(bool)(TMP_291)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_150(uint256) -> ownedTokensCount[_from]
REF_151(uint256) -> ownedTokensCount[_from]
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_151', '1'] 
REF_150(uint256) (->ownedTokensCount) := TMP_293(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_153(address) -> tokenOwner[_tokenId]
TMP_294 = CONVERT 0 to address
REF_153(address) (->tokenOwner) := TMP_294(address)"];
}
// Function: 2410.sol-lettertoken205-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
}
// Function: 2410.sol-lettertoken205-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_261(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
}
// Function: 2410.sol-lettertoken205-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_244(bool) = _to != msg.sender
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_139(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_140(bool) -> REF_139[_to]
REF_140(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 2410.sol-lettertoken205-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 2410.sol-lettertoken205-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_359 = CONVERT _a to bytes
_ba(bytes) := TMP_359(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_360 = CONVERT _b to bytes
_bb(bytes) := TMP_360(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
ab = new string(_ba.length + _bb.length)

IRs:
REF_183 -> LENGTH _ba
REF_184 -> LENGTH _bb
TMP_362(uint256) = REF_183 + REF_184
TMP_363 = new string(TMP_362)
ab(string) := TMP_363(string)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
bab = bytes(ab)

IRs:
TMP_364 = CONVERT ab to bytes
bab(bytes) := TMP_364(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->14;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _ba.length

IRs:
REF_185 -> LENGTH _ba
TMP_365(bool) = i < REF_185
CONDITION TMP_365"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
bab[k ++] = _ba[i]

IRs:
TMP_366(uint256) := k(uint256)
k(uint256) = k + 1
REF_186(None) -> bab[TMP_366]
REF_187(None) -> _ba[i]
REF_186(None) (->bab) := REF_187(None)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_367(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: BEGIN_LOOP 12
"];
12->15;
13[label="Node Type: END_LOOP 13
"];
13->18;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
14->12;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
i < _bb.length

IRs:
REF_188 -> LENGTH _bb
TMP_368(bool) = i < REF_188
CONDITION TMP_368"];
15->16[label="True"];
15->13[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
bab[k ++] = _bb[i]

IRs:
TMP_369(uint256) := k(uint256)
k(uint256) = k + 1
REF_189(None) -> bab[TMP_369]
REF_190(None) -> _bb[i]
REF_189(None) (->bab) := REF_190(None)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_370(uint256) := i(uint256)
i(uint256) = i + 1"];
17->15;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bab)

IRs:
TMP_371 = CONVERT bab to string
RETURN TMP_371"];
}
// Function: 2410.sol-lettertoken205-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_156(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_156"];
}
// Function: 2410.sol-lettertoken205-symbol()
digraph{
}
// Function: 2410.sol-lettertoken205-tokenByIndex(uint256)
digraph{
}
// Function: 2410.sol-lettertoken205-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 2410.sol-lettertoken205-tokenURI(uint256)
digraph{
}
// Function: 2410.sol-lettertoken205-tokensOfOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner]

IRs:
REF_173(uint256[]) -> ownedTokens[_owner]
RETURN REF_173"];
}
// Function: 2410.sol-lettertoken205-totalSupply()
digraph{
}
// Function: 2410.sol-lettertoken205-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_247(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_248(None) = SOLIDITY_CALL require(bool)(TMP_247)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_249 = CONVERT 0 to address
TMP_250(bool) = _from != TMP_249
TMP_251(None) = SOLIDITY_CALL require(bool)(TMP_250)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_252 = CONVERT 0 to address
TMP_253(bool) = _to != TMP_252
TMP_254(None) = SOLIDITY_CALL require(bool)(TMP_253)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 2410.sol-lettertoken205-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_327(bool) = i == 0
CONDITION TMP_327"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_328(bool) = j != 0
CONDITION TMP_328"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
length ++

IRs:
TMP_329(uint256) := length(uint256)
length(uint256) = length + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(length)

IRs:
TMP_331 = new bytes(length)
bstr(bytes) := TMP_331(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = length - 1

IRs:
TMP_332(uint256) = length - 1
k(uint256) := TMP_332(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_333(bool) = i != 0
CONDITION TMP_333"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_334(uint256) := k(uint256)
k(uint256) = k - 1
REF_174(bytes1) -> bstr[TMP_334]
TMP_335(uint256) = i % 10
TMP_336(uint256) = 48 + TMP_335
TMP_337 = CONVERT TMP_336 to bytes1
REF_174(bytes1) (->bstr) := TMP_337(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_338 = CONVERT bstr to string
RETURN TMP_338"];
}
}
