digraph G {
// Function: 2529.sol-DefconPro-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2529.sol-DefconPro-defcon1()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 1)

IRs:
TMP_19(bool) = defcon > 1
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-DefconPro-defcon2()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 2)

IRs:
TMP_17(bool) = defcon > 2
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-DefconPro-defcon3()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 3)

IRs:
TMP_15(bool) = defcon > 3
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-DefconPro-defcon4()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 4)

IRs:
TMP_13(bool) = defcon > 4
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-DefconPro-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_11(bool) = msg.sender == owner
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-DefconPro-setDefconLevel(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
defcon = _defcon

IRs:
defcon(uint16) := _defcon(uint16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Defcon(uint64(block.number),_defcon)

IRs:
TMP_8 = CONVERT block.number to uint64
Emit Defcon(TMP_8,_defcon)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2529.sol-DefconPro-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
defcon = 5

IRs:
defcon(uint16) := 5(uint256)"];
}
// Function: 2529.sol-DefconPro-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = newOwner != TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2529.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2529.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2529.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_159(uint256) = a + b
c(uint256) := TMP_159(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_160(bool) = c >= a
TMP_161(None) = SOLIDITY_CALL assert(bool)(TMP_160)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2529.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_155(uint256) = a / b
RETURN TMP_155"];
}
// Function: 2529.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_150(bool) = a == 0
CONDITION TMP_150"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_151(uint256) = a * b
c(uint256) := TMP_151(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_152(uint256) = c / a
TMP_153(bool) = TMP_152 == b
TMP_154(None) = SOLIDITY_CALL assert(bool)(TMP_153)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2529.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_156(bool) = b <= a
TMP_157(None) = SOLIDITY_CALL assert(bool)(TMP_156)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_158(uint256) = a - b
RETURN TMP_158"];
}
// Function: 2529.sol-bigBankLittleBank-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2529.sol-bigBankLittleBank-_endBetListing(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete betBanks[betId]

IRs:
REF_22(bigBankLittleBank.BetBank) -> betBanks[betId]
betBanks = delete REF_22 "];
}
// Function: 2529.sol-bigBankLittleBank-_payoutWinner(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
BigBankBet(block.number,betBanks[winner].owner,betBanks[loser].owner,winner,loser,take.sub(fee))

IRs:
REF_49(bigBankLittleBank.BetBank) -> betBanks[winner]
REF_50(address) -> REF_49.owner
REF_51(bigBankLittleBank.BetBank) -> betBanks[loser]
REF_52(address) -> REF_51.owner
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['take', 'fee'] 
Emit BigBankBet(block.number,REF_50,REF_52,winner,loser,TMP_86)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
winnerAddr = betBanks[winner].owner

IRs:
REF_54(bigBankLittleBank.BetBank) -> betBanks[winner]
REF_55(address) -> REF_54.owner
winnerAddr(address) := REF_55(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_endBetListing(winner)

IRs:
TMP_88(bool) = INTERNAL_CALL, bigBankLittleBank._endBetListing(uint256)(winner)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_endBetListing(loser)

IRs:
TMP_89(bool) = INTERNAL_CALL, bigBankLittleBank._endBetListing(uint256)(loser)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
userBank[winnerAddr] = (userBank[winnerAddr]).add(take.sub(fee))

IRs:
REF_56(uint256) -> userBank[winnerAddr]
REF_57(uint256) -> userBank[winnerAddr]
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['take', 'fee'] 
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_57', 'TMP_90'] 
REF_56(uint256) (->userBank) := TMP_91(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2529.sol-bigBankLittleBank-_random()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(uint256(keccak256()(block.timestamp,block.difficulty)) % 2)

IRs:
TMP_100(bytes32) = SOLIDITY_CALL keccak256()(block.timestamp,block.difficulty)
TMP_101 = CONVERT TMP_100 to uint256
TMP_102(uint256) = TMP_101 % 2
TMP_103 = CONVERT TMP_102 to uint8
RETURN TMP_103"];
}
// Function: 2529.sol-bigBankLittleBank-_totalActiveBets()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
total = 0

IRs:
total(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < betBanks.length

IRs:
REF_62 -> LENGTH betBanks
TMP_104(bool) = i < REF_62
CONDITION TMP_104"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
betBanks[i].bet != emptyBet && betBanks[i].owner != msg.sender

IRs:
REF_63(bigBankLittleBank.BetBank) -> betBanks[i]
REF_64(bytes32) -> REF_63.bet
TMP_105(bool) = REF_64 != emptyBet
REF_65(bigBankLittleBank.BetBank) -> betBanks[i]
REF_66(address) -> REF_65.owner
TMP_106(bool) = REF_66 != msg.sender
TMP_107(bool) = TMP_105 && TMP_106
CONDITION TMP_107"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
total ++

IRs:
TMP_108(uint256) := total(uint256)
total(uint256) = total + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_109(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
total

IRs:
RETURN total"];
}
// Function: 2529.sol-bigBankLittleBank-_totalUsersBets()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
total = 0

IRs:
total(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < betBanks.length

IRs:
REF_73 -> LENGTH betBanks
TMP_122(bool) = i < REF_73
CONDITION TMP_122"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
betBanks[i].owner == msg.sender && betBanks[i].bet != emptyBet

IRs:
REF_74(bigBankLittleBank.BetBank) -> betBanks[i]
REF_75(address) -> REF_74.owner
TMP_123(bool) = REF_75 == msg.sender
REF_76(bigBankLittleBank.BetBank) -> betBanks[i]
REF_77(bytes32) -> REF_76.bet
TMP_124(bool) = REF_77 != emptyBet
TMP_125(bool) = TMP_123 && TMP_124
CONDITION TMP_125"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
total ++

IRs:
TMP_126(uint256) := total(uint256)
total(uint256) = total + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_127(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
total

IRs:
RETURN total"];
}
// Function: 2529.sol-bigBankLittleBank-betAgainstUser(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(betBanks[_betId1].bet != emptyBet && betBanks[_betId2].bet != emptyBet)

IRs:
REF_23(bigBankLittleBank.BetBank) -> betBanks[_betId1]
REF_24(bytes32) -> REF_23.bet
TMP_53(bool) = REF_24 != emptyBet
REF_25(bigBankLittleBank.BetBank) -> betBanks[_betId2]
REF_26(bytes32) -> REF_25.bet
TMP_54(bool) = REF_26 != emptyBet
TMP_55(bool) = TMP_53 && TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(betBanks[_betId1].owner == msg.sender || betBanks[_betId2].owner == msg.sender)

IRs:
REF_27(bigBankLittleBank.BetBank) -> betBanks[_betId1]
REF_28(address) -> REF_27.owner
TMP_57(bool) = REF_28 == msg.sender
REF_29(bigBankLittleBank.BetBank) -> betBanks[_betId2]
REF_30(address) -> REF_29.owner
TMP_58(bool) = REF_30 == msg.sender
TMP_59(bool) = TMP_57 || TMP_58
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(betBanks[_betId1].owner != betBanks[_betId2].owner)

IRs:
REF_31(bigBankLittleBank.BetBank) -> betBanks[_betId1]
REF_32(address) -> REF_31.owner
REF_33(bigBankLittleBank.BetBank) -> betBanks[_betId2]
REF_34(address) -> REF_33.owner
TMP_61(bool) = REF_32 != REF_34
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_betId1 != _betId2)

IRs:
TMP_63(bool) = _betId1 != _betId2
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
bet1ConvertedAddr = uint256(betBanks[_betId1].owner)

IRs:
REF_35(bigBankLittleBank.BetBank) -> betBanks[_betId1]
REF_36(address) -> REF_35.owner
TMP_65 = CONVERT REF_36 to uint256
bet1ConvertedAddr(uint256) := TMP_65(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
bet1 = (uint256(betBanks[_betId1].bet) / 7).sub(bet1ConvertedAddr)

IRs:
REF_37(bigBankLittleBank.BetBank) -> betBanks[_betId1]
REF_38(bytes32) -> REF_37.bet
TMP_66 = CONVERT REF_38 to uint256
TMP_67(uint256) = TMP_66 / 7
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_67', 'bet1ConvertedAddr'] 
bet1(uint256) := TMP_68(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
bet2ConvertedAddr = uint256(betBanks[_betId2].owner)

IRs:
REF_40(bigBankLittleBank.BetBank) -> betBanks[_betId2]
REF_41(address) -> REF_40.owner
TMP_69 = CONVERT REF_41 to uint256
bet2ConvertedAddr(uint256) := TMP_69(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
bet2 = (uint256(betBanks[_betId2].bet) / 7).sub(bet2ConvertedAddr)

IRs:
REF_42(bigBankLittleBank.BetBank) -> betBanks[_betId2]
REF_43(bytes32) -> REF_42.bet
TMP_70 = CONVERT REF_43 to uint256
TMP_71(uint256) = TMP_70 / 7
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_71', 'bet2ConvertedAddr'] 
bet2(uint256) := TMP_72(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
take = (bet1).add(bet2)

IRs:
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['bet1', 'bet2'] 
take(uint256) := TMP_73(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
fee = (take.mul(houseFee)).div(100)

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['take', 'houseFee'] 
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_74', '100'] 
fee(uint256) := TMP_75(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
houseCommission = houseCommission.add(fee)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['houseCommission', 'fee'] 
houseCommission(uint256) := TMP_76(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
bet1 != bet2

IRs:
TMP_77(bool) = bet1 != bet2
CONDITION TMP_77"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
bet1 > bet2

IRs:
TMP_78(bool) = bet1 > bet2
CONDITION TMP_78"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_payoutWinner(_betId1,_betId2,take,fee)

IRs:
TMP_79(bool) = INTERNAL_CALL, bigBankLittleBank._payoutWinner(uint256,uint256,uint256,uint256)(_betId1,_betId2,take,fee)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_payoutWinner(_betId2,_betId1,take,fee)

IRs:
TMP_80(bool) = INTERNAL_CALL, bigBankLittleBank._payoutWinner(uint256,uint256,uint256,uint256)(_betId2,_betId1,take,fee)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->21;
17[label="Node Type: IF 17

EXPRESSION:
_random() == 0

IRs:
TMP_81(uint8) = INTERNAL_CALL, bigBankLittleBank._random()()
TMP_82(bool) = TMP_81 == 0
CONDITION TMP_82"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_payoutWinner(_betId1,_betId2,take,fee)

IRs:
TMP_83(bool) = INTERNAL_CALL, bigBankLittleBank._payoutWinner(uint256,uint256,uint256,uint256)(_betId1,_betId2,take,fee)"];
18->20;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_payoutWinner(_betId2,_betId1,take,fee)

IRs:
TMP_84(bool) = INTERNAL_CALL, bigBankLittleBank._payoutWinner(uint256,uint256,uint256,uint256)(_betId2,_betId1,take,fee)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
defcon3()

IRs:
MODIFIER_CALL, DefconPro.defcon3()()"];
23->1;
}
// Function: 2529.sol-bigBankLittleBank-defcon1()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 1)

IRs:
TMP_146(bool) = defcon > 1
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-bigBankLittleBank-defcon2()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 2)

IRs:
TMP_144(bool) = defcon > 2
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-bigBankLittleBank-defcon3()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 3)

IRs:
TMP_142(bool) = defcon > 3
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-bigBankLittleBank-defcon4()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(defcon > 4)

IRs:
TMP_140(bool) = defcon > 4
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-bigBankLittleBank-depositBank()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
userBank[msg.sender] == 0

IRs:
REF_1(uint256) -> userBank[msg.sender]
TMP_27(bool) = REF_1 == 0
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
userBank[msg.sender] = msg.value

IRs:
REF_2(uint256) -> userBank[msg.sender]
REF_2(uint256) (->userBank) := msg.value(uint256)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
userBank[msg.sender] = (userBank[msg.sender]).add(msg.value)

IRs:
REF_3(uint256) -> userBank[msg.sender]
REF_4(uint256) -> userBank[msg.sender]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_4', 'msg.value'] 
REF_3(uint256) (->userBank) := TMP_28(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
bookKeeper = bookKeeper.add(msg.value)

IRs:
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['bookKeeper', 'msg.value'] 
bookKeeper(uint256) := TMP_29(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Deposit(msg.sender,msg.value)

IRs:
Emit Deposit(msg.sender,msg.value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
defcon4()

IRs:
MODIFIER_CALL, DefconPro.defcon4()()"];
7->1;
}
// Function: 2529.sol-bigBankLittleBank-listActiveBets()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
total = _totalActiveBets()

IRs:
TMP_110(uint256) = INTERNAL_CALL, bigBankLittleBank._totalActiveBets()()
total(uint256) := TMP_110(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
total == 0

IRs:
TMP_111(bool) = total == 0
CONDITION TMP_111"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_113(uint256[])  = new uint256[](0)
RETURN TMP_113"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](total)

IRs:
TMP_115(uint256[])  = new uint256[](total)
result(uint256[]) = ['TMP_115(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
rc = 0

IRs:
rc(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->15;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
idx < betBanks.length

IRs:
REF_67 -> LENGTH betBanks
TMP_116(bool) = idx < REF_67
CONDITION TMP_116"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
betBanks[idx].bet != emptyBet && betBanks[idx].owner != msg.sender

IRs:
REF_68(bigBankLittleBank.BetBank) -> betBanks[idx]
REF_69(bytes32) -> REF_68.bet
TMP_117(bool) = REF_69 != emptyBet
REF_70(bigBankLittleBank.BetBank) -> betBanks[idx]
REF_71(address) -> REF_70.owner
TMP_118(bool) = REF_71 != msg.sender
TMP_119(bool) = TMP_117 && TMP_118
CONDITION TMP_119"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
result[rc] = idx

IRs:
REF_72(uint256) -> result[rc]
REF_72(uint256) (->result) := idx(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
rc ++

IRs:
TMP_120(uint256) := rc(uint256)
rc(uint256) = rc + 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
idx ++

IRs:
TMP_121(uint256) := idx(uint256)
idx(uint256) = idx + 1"];
14->9;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 2529.sol-bigBankLittleBank-listUsersBets()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
total = _totalUsersBets()

IRs:
TMP_128(uint256) = INTERNAL_CALL, bigBankLittleBank._totalUsersBets()()
total(uint256) := TMP_128(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
total == 0

IRs:
TMP_129(bool) = total == 0
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_131(uint256[])  = new uint256[](0)
RETURN TMP_131"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](total)

IRs:
TMP_133(uint256[])  = new uint256[](total)
result(uint256[]) = ['TMP_133(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
rc = 0

IRs:
rc(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->15;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
idx < betBanks.length

IRs:
REF_78 -> LENGTH betBanks
TMP_134(bool) = idx < REF_78
CONDITION TMP_134"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
betBanks[idx].owner == msg.sender && betBanks[idx].bet != emptyBet

IRs:
REF_79(bigBankLittleBank.BetBank) -> betBanks[idx]
REF_80(address) -> REF_79.owner
TMP_135(bool) = REF_80 == msg.sender
REF_81(bigBankLittleBank.BetBank) -> betBanks[idx]
REF_82(bytes32) -> REF_81.bet
TMP_136(bool) = REF_82 != emptyBet
TMP_137(bool) = TMP_135 && TMP_136
CONDITION TMP_137"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
result[rc] = idx

IRs:
REF_83(uint256) -> result[rc]
REF_83(uint256) (->result) := idx(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
rc ++

IRs:
TMP_138(uint256) := rc(uint256)
rc(uint256) = rc + 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
idx ++

IRs:
TMP_139(uint256) := idx(uint256)
idx(uint256) = idx + 1"];
14->9;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 2529.sol-bigBankLittleBank-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_148(bool) = msg.sender == owner
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2529.sol-bigBankLittleBank-setDefconLevel(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
defcon = _defcon

IRs:
defcon(uint16) := _defcon(uint16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Defcon(uint64(block.number),_defcon)

IRs:
TMP_21 = CONVERT block.number to uint64
Emit Defcon(TMP_21,_defcon)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2529.sol-bigBankLittleBank-setHouseFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_92(bool) = msg.sender == owner
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
houseFee = newFee

IRs:
houseFee(uint256) := newFee(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2529.sol-bigBankLittleBank-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
defcon = 5

IRs:
defcon(uint16) := 5(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
houseFee = 2

IRs:
houseFee(uint256) := 2(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
houseCommission = 0

IRs:
houseCommission(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
bookKeeper = 0

IRs:
bookKeeper(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
emptyBet = 0x0000000000000000000000000000000000000000000000000000000000000000

IRs:
emptyBet(bytes32) := 0(uint256)"];
}
// Function: 2529.sol-bigBankLittleBank-startBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(userBank[msg.sender] >= _bet)

IRs:
REF_13(uint256) -> userBank[msg.sender]
TMP_39(bool) = REF_13 >= _bet
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_bet > 0)

IRs:
TMP_41(bool) = _bet > 0
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
userBank[msg.sender] = (userBank[msg.sender]).sub(_bet)

IRs:
REF_14(uint256) -> userBank[msg.sender]
REF_15(uint256) -> userBank[msg.sender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_15', '_bet'] 
REF_14(uint256) (->userBank) := TMP_43(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
convertedAddr = uint256(msg.sender)

IRs:
TMP_44 = CONVERT msg.sender to uint256
convertedAddr(uint256) := TMP_44(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
combinedBet = convertedAddr.add(_bet) * 7

IRs:
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['convertedAddr', '_bet'] 
TMP_46(uint256) = TMP_45 * 7
combinedBet(uint256) := TMP_46(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
betBank = BetBank({bet:bytes32(combinedBet),owner:msg.sender})

IRs:
TMP_47 = CONVERT combinedBet to bytes32
TMP_48(bigBankLittleBank.BetBank) = new BetBank(TMP_47,msg.sender)
betBank(bigBankLittleBank.BetBank) := TMP_48(bigBankLittleBank.BetBank)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
betId = betBanks.push(betBank).sub(1)
"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
defcon3()
"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
betId
"];
}
// Function: 2529.sol-bigBankLittleBank-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = newOwner != TMP_24
CONDITION TMP_25"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2529.sol-bigBankLittleBank-userBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
userBank[msg.sender]

IRs:
REF_0(uint256) -> userBank[msg.sender]
RETURN REF_0"];
}
// Function: 2529.sol-bigBankLittleBank-withdrawBank(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(userBank[msg.sender] >= amount)

IRs:
REF_7(uint256) -> userBank[msg.sender]
TMP_32(bool) = REF_7 >= amount
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bookKeeper = bookKeeper.sub(amount)

IRs:
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['bookKeeper', 'amount'] 
bookKeeper(uint256) := TMP_34(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
userBank[msg.sender] = userBank[msg.sender].sub(amount)

IRs:
REF_9(uint256) -> userBank[msg.sender]
REF_10(uint256) -> userBank[msg.sender]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_10', 'amount'] 
REF_9(uint256) (->userBank) := TMP_35(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Withdraw(msg.sender,amount)

IRs:
Emit Withdraw(msg.sender,amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
(msg.sender).transfer(amount)

IRs:
Transfer dest:msg.sender value:amount"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
defcon2()

IRs:
MODIFIER_CALL, DefconPro.defcon2()()"];
7->1;
}
// Function: 2529.sol-bigBankLittleBank-withdrawCommission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_95(bool) = msg.sender == owner
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bookKeeper = bookKeeper.sub(houseCommission)

IRs:
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['bookKeeper', 'houseCommission'] 
bookKeeper(uint256) := TMP_97(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
holding = houseCommission

IRs:
holding(uint256) := houseCommission(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
houseCommission = 0

IRs:
houseCommission(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner.transfer(holding)

IRs:
Transfer dest:owner value:holding"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
}
