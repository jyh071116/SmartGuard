digraph G {
// Function: 2599.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_459'] 
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_461'] 
TMP_463(uint256) = TMP_462 / 2
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_460', 'TMP_463'] 
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_466(uint256) = TMP_464 / TMP_465
RETURN TMP_466"];
}
// Function: 2599.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_449(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_451(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_450)
TMP_452(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_449', 'TMP_451'] 
RETURN TMP_452"];
}
// Function: 2599.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_453', '312500000000000000000000000'] 
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_454', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_456(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_455'] 
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_456', '74999921875000000000000000000000'] 
TMP_458(uint256) = TMP_457 / 156250000
RETURN TMP_458"];
}
// Function: 2599.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_446(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_445)
TMP_447(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_448(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_446', 'TMP_447'] 
RETURN TMP_448"];
}
// Function: 2599.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_467 = CONVERT _input to bytes
_temp(bytes) := TMP_467(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_724 -> LENGTH _temp
_length(uint256) := REF_724(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_468(bool) = _length <= 32
TMP_469(bool) = _length > 0
TMP_470(bool) = TMP_468 && TMP_469
TMP_471(None) = SOLIDITY_CALL require(bool,string)(TMP_470,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_725(None) -> _temp[0]
TMP_472(bool) = REF_725 != 32
TMP_473(uint256) = _length - 1
REF_726(None) -> _temp[TMP_473]
TMP_474(bool) = REF_726 != 32
TMP_475(bool) = TMP_472 && TMP_474
TMP_476(None) = SOLIDITY_CALL require(bool,string)(TMP_475,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_727(None) -> _temp[0]
TMP_477(bool) = REF_727 == 48
CONDITION TMP_477"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_728(None) -> _temp[1]
TMP_478(bool) = REF_728 != 120
TMP_479(None) = SOLIDITY_CALL require(bool,string)(TMP_478,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_729(None) -> _temp[1]
TMP_480(bool) = REF_729 != 88
TMP_481(None) = SOLIDITY_CALL require(bool,string)(TMP_480,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_482(bool) = i < _length
CONDITION TMP_482"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_730(None) -> _temp[i]
TMP_483(bool) = REF_730 > 64
REF_731(None) -> _temp[i]
TMP_484(bool) = REF_731 < 91
TMP_485(bool) = TMP_483 && TMP_484
CONDITION TMP_485"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_732(bytes1) -> _temp[i]
REF_733(None) -> _temp[i]
TMP_486 = CONVERT REF_733 to uint256
TMP_487(uint256) = TMP_486 + 32
TMP_488 = CONVERT TMP_487 to bytes1
REF_732(bytes1) (->_temp) := TMP_488(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_489(bool) = _hasNonNumber == False
CONDITION TMP_489"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_734(None) -> _temp[i]
TMP_490(bool) = REF_734 == 32
REF_735(None) -> _temp[i]
TMP_491(bool) = REF_735 > 96
REF_736(None) -> _temp[i]
TMP_492(bool) = REF_736 < 123
TMP_493(bool) = TMP_491 && TMP_492
TMP_494(bool) = TMP_490 || TMP_493
REF_737(None) -> _temp[i]
TMP_495(bool) = REF_737 > 47
REF_738(None) -> _temp[i]
TMP_496(bool) = REF_738 < 58
TMP_497(bool) = TMP_495 && TMP_496
TMP_498(bool) = TMP_494 || TMP_497
TMP_499(None) = SOLIDITY_CALL require(bool,string)(TMP_498,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_739(None) -> _temp[i]
TMP_500(bool) = REF_739 == 32
CONDITION TMP_500"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_501(uint256) = i + 1
REF_740(None) -> _temp[TMP_501]
TMP_502(bool) = REF_740 != 32
TMP_503(None) = SOLIDITY_CALL require(bool,string)(TMP_502,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_504(bool) = _hasNonNumber == False
REF_741(None) -> _temp[i]
TMP_505(bool) = REF_741 < 48
REF_742(None) -> _temp[i]
TMP_506(bool) = REF_742 > 57
TMP_507(bool) = TMP_505 || TMP_506
TMP_508(bool) = TMP_504 && TMP_507
CONDITION TMP_508"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_509(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_510(bool) = _hasNonNumber == True
TMP_511(None) = SOLIDITY_CALL require(bool,string)(TMP_510,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2599.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2599.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2599.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2599.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2599.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2599.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2599.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2599.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2599.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_520(uint256) = a + b
c(uint256) := TMP_520(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_521(bool) = c >= a
TMP_522(None) = SOLIDITY_CALL require(bool,string)(TMP_521,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2599.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_512(bool) = a == 0
CONDITION TMP_512"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_513(uint256) = a * b
c(uint256) := TMP_513(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_514(uint256) = c / a
TMP_515(bool) = TMP_514 == b
TMP_516(None) = SOLIDITY_CALL require(bool,string)(TMP_515,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2599.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_530(bool) = x == 0
CONDITION TMP_530"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_531(bool) = y == 0
CONDITION TMP_531"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_532(bool) = i < y
CONDITION TMP_532"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_533(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_533(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_534(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2599.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_529(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_529"];
}
// Function: 2599.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_523(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_524(uint256) = TMP_523 / 2
z(uint256) := TMP_524(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_525(bool) = z < y
CONDITION TMP_525"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_526(uint256) = x / z
TMP_527(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_526,z)
TMP_528(uint256) = TMP_527 / 2
z(uint256) := TMP_528(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2599.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_517(bool) = b <= a
TMP_518(None) = SOLIDITY_CALL require(bool,string)(TMP_517,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_519(uint256) = a - b
RETURN TMP_519"];
}
// Function: 2599.sol-Snow-buy(address)
digraph{
}
// Function: 2599.sol-Snow-myDividends(bool)
digraph{
}
// Function: 2599.sol-Snow-myTokens()
digraph{
}
// Function: 2599.sol-Snow-redistribution()
digraph{
}
// Function: 2599.sol-Snow-withdraw()
digraph{
}
// Function: 2599.sol-SnowStorm-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_428(bool) = msg.sender == admin
TMP_429(None) = SOLIDITY_CALL require(bool)(TMP_428)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(activated_ == false)

IRs:
TMP_430(bool) = activated_ == False
TMP_431(None) = SOLIDITY_CALL require(bool)(TMP_430)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_705(F3Ddatasets.Round) -> round_[1]
REF_706(uint256) -> REF_705.strt
TMP_432(uint256) = now + rndExtra_
TMP_433(uint256) = TMP_432 - rndGap_
REF_706(uint256) (->round_) := TMP_433(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_707(F3Ddatasets.Round) -> round_[1]
REF_708(uint256) -> REF_707.end
TMP_434(uint256) = now + rndInit_
TMP_435(uint256) = TMP_434 + rndExtra_
REF_708(uint256) (->round_) := TMP_435(uint256)"];
}
// Function: 2599.sol-SnowStorm-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_344(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_345(bytes32) = SOLIDITY_CALL keccak256()(TMP_344)
TMP_346 = CONVERT TMP_345 to uint256
TMP_347(uint256) = TMP_346 / now
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_343', 'TMP_347'] 
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_348', 'block.gaslimit'] 
TMP_350(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_351(bytes32) = SOLIDITY_CALL keccak256()(TMP_350)
TMP_352 = CONVERT TMP_351 to uint256
TMP_353(uint256) = TMP_352 / now
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_349', 'TMP_353'] 
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_354', 'block.number'] 
TMP_356(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_355)
TMP_357(bytes32) = SOLIDITY_CALL keccak256()(TMP_356)
TMP_358 = CONVERT TMP_357 to uint256
seed(uint256) := TMP_358(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_359(uint256) = seed / 1000
TMP_360(uint256) = TMP_359 * 1000
TMP_361(uint256) = seed - TMP_360
TMP_362(bool) = TMP_361 < airDropTracker_
CONDITION TMP_362"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2599.sol-SnowStorm-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.strt
TMP_153(uint256) = REF_260 + rndGap_
TMP_154(bool) = _now > TMP_153
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_155(bool) = _now <= REF_262
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.end
TMP_156(bool) = _now > REF_264
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.plyr
TMP_157(bool) = REF_266 == 0
TMP_158(bool) = TMP_156 && TMP_157
TMP_159(bool) = TMP_155 || TMP_158
TMP_160(bool) = TMP_154 && TMP_159
CONDITION TMP_160"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.end
TMP_162(bool) = _now > REF_268
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(bool) -> REF_269.ended
TMP_163(bool) = REF_270 == False
TMP_164(bool) = TMP_162 && TMP_163
CONDITION TMP_164"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(bool) -> REF_271.ended
REF_272(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_165(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_165(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_273(uint256) -> _eventData_.compressedData
REF_274(uint256) -> _eventData_.compressedData
TMP_166(uint256) = _now * 1000000000000000000
TMP_167(uint256) = REF_274 + TMP_166
REF_273(uint256) (->_eventData_) := TMP_167(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_275(uint256) -> _eventData_.compressedIDs
REF_276(uint256) -> _eventData_.compressedIDs
TMP_168(uint256) = REF_276 + _pID
REF_275(uint256) (->_eventData_) := TMP_168(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_278(F3Ddatasets.Player) -> plyr_[_pID]
REF_279(bytes32) -> REF_278.name
REF_280(uint256) -> _eventData_.compressedData
REF_281(uint256) -> _eventData_.compressedIDs
REF_282(address) -> _eventData_.winnerAddr
REF_283(bytes32) -> _eventData_.winnerName
REF_284(uint256) -> _eventData_.amountWon
REF_285(uint256) -> _eventData_.newPot
REF_286(uint256) -> _eventData_.P3DAmount
REF_287(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_279,msg.value,REF_280,REF_281,REF_282,REF_283,REF_284,REF_285,REF_286,REF_287)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_288(F3Ddatasets.Player) -> plyr_[_pID]
REF_289(uint256) -> REF_288.gen
REF_290(F3Ddatasets.Player) -> plyr_[_pID]
REF_291(uint256) -> REF_290.gen
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_291', 'msg.value'] 
REF_289(uint256) (->plyr_) := TMP_170(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2599.sol-SnowStorm-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_24(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_24(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = _affCode == TMP_25
TMP_27(bool) = _affCode == msg.sender
TMP_28(bool) = TMP_26 || TMP_27
CONDITION TMP_28"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_29(bool) = _affID != REF_31
CONDITION TMP_29"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_30(uint256) = INTERNAL_CALL, SnowStorm.verifyTeam(uint256)(_team)
_team(uint256) := TMP_30(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SnowStorm.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2599.sol-SnowStorm-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_14(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_14(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_15(bool) = _affCode == 0
TMP_16(bool) = _affCode == _pID
TMP_17(bool) = TMP_15 || TMP_16
CONDITION TMP_17"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_18(bool) = _affCode != REF_23
CONDITION TMP_18"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_19(uint256) = INTERNAL_CALL, SnowStorm.verifyTeam(uint256)(_team)
_team(uint256) := TMP_19(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SnowStorm.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 2599.sol-SnowStorm-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_35(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_35(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_36(bool) = _affCode == 
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_37(bool) = _affCode == REF_36
TMP_38(bool) = TMP_36 || TMP_37
CONDITION TMP_38"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_39(bool) = _affID != REF_41
CONDITION TMP_39"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_40(uint256) = INTERNAL_CALL, SnowStorm.verifyTeam(uint256)(_team)
_team(uint256) := TMP_40(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SnowStorm.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2599.sol-SnowStorm-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.strt
TMP_243(uint256) = REF_425 + rndGap_
TMP_244(bool) = _now > TMP_243
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.end
TMP_245(bool) = _now <= REF_427
REF_428(F3Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.end
TMP_246(bool) = _now > REF_429
REF_430(F3Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.plyr
TMP_247(bool) = REF_431 == 0
TMP_248(bool) = TMP_246 && TMP_247
TMP_249(bool) = TMP_245 || TMP_248
TMP_250(bool) = TMP_244 && TMP_249
CONDITION TMP_250"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.eth
TMP_251(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_433', '_eth'] 
RETURN TMP_251"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_252(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_252"];
}
// Function: 2599.sol-SnowStorm-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_414(F3Ddatasets.Round) -> round_[_rIDlast]
REF_415(uint256) -> REF_414.mask
REF_417(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_418(F3Ddatasets.PlayerRounds) -> REF_417[_rIDlast]
REF_419(uint256) -> REF_418.keys
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_415', 'REF_419'] 
TMP_241(uint256) = TMP_240 / 1000000000000000000
REF_421(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_422(F3Ddatasets.PlayerRounds) -> REF_421[_rIDlast]
REF_423(uint256) -> REF_422.mask
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_241', 'REF_423'] 
RETURN TMP_242"];
}
// Function: 2599.sol-SnowStorm-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
treat = 0x371308b6A7B6f80DF798589c48Dea369839951dd

IRs:
treat(address) := 314418965606692593833794695556120716275235770845(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
action = Snow(treat)

IRs:
TMP_0 = CONVERT treat to Snow
action(Snow) := TMP_0(Snow)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(46,10)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(46,10)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(46,10)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(46,10)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(46,10)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(46,10)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(46,10)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_4(F3Ddatasets.TeamFee) = new TeamFee(46,10)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_4(F3Ddatasets.TeamFee)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(35,5)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(35,5)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(35,5)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(35,5)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(35,5)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(35,5)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(35,5)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_8(F3Ddatasets.PotSplit) = new PotSplit(35,5)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_8(F3Ddatasets.PotSplit)"];
}
// Function: 2599.sol-SnowStorm-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_325(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_326(F3Ddatasets.PlayerRounds) -> REF_325[_rID]
REF_327(uint256) -> REF_326.keys
TMP_190(bool) = REF_327 == 0
CONDITION TMP_190"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_191(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_191(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 5000000000000000000

IRs:
REF_328(F3Ddatasets.Round) -> round_[_rID]
REF_329(uint256) -> REF_328.eth
TMP_192(bool) = REF_329 < 100000000000000000000
REF_330(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_331(F3Ddatasets.PlayerRounds) -> REF_330[_rID]
REF_332(uint256) -> REF_331.eth
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_332', '_eth'] 
TMP_194(bool) = TMP_193 > 5000000000000000000
TMP_195(bool) = TMP_192 && TMP_194
CONDITION TMP_195"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (5000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_335(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_336(F3Ddatasets.PlayerRounds) -> REF_335[_rID]
REF_337(uint256) -> REF_336.eth
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['5000000000000000000', 'REF_337'] 
_availableLimit(uint256) := TMP_196(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_197(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_339(F3Ddatasets.Player) -> plyr_[_pID]
REF_340(uint256) -> REF_339.gen
REF_341(F3Ddatasets.Player) -> plyr_[_pID]
REF_342(uint256) -> REF_341.gen
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_342', '_refund'] 
REF_340(uint256) (->plyr_) := TMP_198(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_199(bool) = _eth > 1000000000
CONDITION TMP_199"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_344(F3Ddatasets.Round) -> round_[_rID]
REF_345(uint256) -> REF_344.eth
TMP_200(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_345', '_eth'] 
_keys(uint256) := TMP_200(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_201(bool) = _keys >= 1000000000000000000
CONDITION TMP_201"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, SnowStorm.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.plyr
TMP_203(bool) = REF_348 != _pID
CONDITION TMP_203"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.plyr
REF_350(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_351(F3Ddatasets.Round) -> round_[_rID]
REF_352(uint256) -> REF_351.team
TMP_204(bool) = REF_352 != _team
CONDITION TMP_204"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_353(F3Ddatasets.Round) -> round_[_rID]
REF_354(uint256) -> REF_353.team
REF_354(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_355(uint256) -> _eventData_.compressedData
REF_356(uint256) -> _eventData_.compressedData
TMP_205(uint256) = REF_356 + 100
REF_355(uint256) (->_eventData_) := TMP_205(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_206(bool) = _eth >= 100000000000000000
CONDITION TMP_206"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_207(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_208(bool) = INTERNAL_CALL, SnowStorm.airdrop()()
TMP_209(bool) = TMP_208 == True
CONDITION TMP_209"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_210(bool) = _eth >= 10000000000000000000
CONDITION TMP_210"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_212(uint256) = TMP_211 / 100
_prize(uint256) := TMP_212(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_358(F3Ddatasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.win
REF_360(F3Ddatasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.win
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_361', '_prize'] 
REF_359(uint256) (->plyr_) := TMP_213(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_214(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_364(uint256) -> _eventData_.compressedData
REF_364(-> _eventData_) = REF_364 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_215(bool) = _eth >= 1000000000000000000
TMP_216(bool) = _eth < 10000000000000000000
TMP_217(bool) = TMP_215 && TMP_216
CONDITION TMP_217"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_219(uint256) = TMP_218 / 100
_prize(uint256) := TMP_219(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_366(F3Ddatasets.Player) -> plyr_[_pID]
REF_367(uint256) -> REF_366.win
REF_368(F3Ddatasets.Player) -> plyr_[_pID]
REF_369(uint256) -> REF_368.win
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_369', '_prize'] 
REF_367(uint256) (->plyr_) := TMP_220(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_221(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_372(uint256) -> _eventData_.compressedData
REF_372(-> _eventData_) = REF_372 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_222(bool) = _eth >= 100000000000000000
TMP_223(bool) = _eth < 1000000000000000000
TMP_224(bool) = TMP_222 && TMP_223
CONDITION TMP_224"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_226(uint256) = TMP_225 / 100
_prize(uint256) := TMP_226(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_374(F3Ddatasets.Player) -> plyr_[_pID]
REF_375(uint256) -> REF_374.win
REF_376(F3Ddatasets.Player) -> plyr_[_pID]
REF_377(uint256) -> REF_376.win
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_377', '_prize'] 
REF_375(uint256) (->plyr_) := TMP_227(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_228(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_380(uint256) -> _eventData_.compressedData
REF_380(-> _eventData_) = REF_380 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_381(uint256) -> _eventData_.compressedData
REF_381(-> _eventData_) = REF_381 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_382(uint256) -> _eventData_.compressedData
TMP_229(uint256) = _prize * 1000000000000000000000000000000000
REF_382(-> _eventData_) = REF_382 + TMP_229"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_383(uint256) -> _eventData_.compressedData
REF_384(uint256) -> _eventData_.compressedData
TMP_230(uint256) = airDropTracker_ * 1000
TMP_231(uint256) = REF_384 + TMP_230
REF_383(uint256) (->_eventData_) := TMP_231(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_385(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_386(F3Ddatasets.PlayerRounds) -> REF_385[_rID]
REF_387(uint256) -> REF_386.keys
REF_389(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_390(F3Ddatasets.PlayerRounds) -> REF_389[_rID]
REF_391(uint256) -> REF_390.keys
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_391'] 
REF_387(uint256) (->plyrRnds_) := TMP_232(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_392(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_393(F3Ddatasets.PlayerRounds) -> REF_392[_rID]
REF_394(uint256) -> REF_393.eth
REF_396(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_397(F3Ddatasets.PlayerRounds) -> REF_396[_rID]
REF_398(uint256) -> REF_397.eth
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_398'] 
REF_394(uint256) (->plyrRnds_) := TMP_233(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_399(F3Ddatasets.Round) -> round_[_rID]
REF_400(uint256) -> REF_399.keys
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.keys
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_403'] 
REF_400(uint256) (->round_) := TMP_234(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.eth
REF_407(F3Ddatasets.Round) -> round_[_rID]
REF_408(uint256) -> REF_407.eth
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_408'] 
REF_405(uint256) (->round_) := TMP_235(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_409(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_410(uint256) -> REF_409[_team]
REF_412(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_413(uint256) -> REF_412[_team]
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_413'] 
REF_410(uint256) (->rndTmEth_) := TMP_236(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_237(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_237(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_238(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_238(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 2599.sol-SnowStorm-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_473(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_473(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_277(bool) = _pID == 0
CONDITION TMP_277"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_278(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_278(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_279(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_279(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_280(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_280(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_477(uint256) -> pIDxAddr_[msg.sender]
REF_477(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_478(F3Ddatasets.Player) -> plyr_[_pID]
REF_479(address) -> REF_478.addr
REF_479(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_281(bool) = _name != 
CONDITION TMP_281"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_480(uint256) -> pIDxName_[_name]
REF_480(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_481(F3Ddatasets.Player) -> plyr_[_pID]
REF_482(bytes32) -> REF_481.name
REF_482(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_483(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_484(bool) -> REF_483[_name]
REF_484(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_282(bool) = _laff != 0
TMP_283(bool) = _laff != _pID
TMP_284(bool) = TMP_282 && TMP_283
CONDITION TMP_284"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.laff
REF_486(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_487(uint256) -> _eventData_.compressedData
REF_488(uint256) -> _eventData_.compressedData
TMP_285(uint256) = REF_488 + 1
REF_487(uint256) (->_eventData_) := TMP_285(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2599.sol-SnowStorm-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_363(uint256) = _eth / 100
_p1(uint256) := TMP_363(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_364(uint256) = _eth / 50
_com(uint256) := TMP_364(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_365(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_366 = CONVERT admin to address
TMP_368(bool) = LOW_LEVEL_CALL, dest:TMP_366, function:call, arguments:[] value:_com 
TMP_369 = UnaryType.BANG TMP_368 
CONDITION TMP_369"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_370(uint256) = _eth / 10
_aff(uint256) := TMP_370(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_371(bool) = _affID != _pID
REF_599(F3Ddatasets.Player) -> plyr_[_affID]
REF_600(bytes32) -> REF_599.name
TMP_372(bool) = REF_600 != 
TMP_373(bool) = TMP_371 && TMP_372
CONDITION TMP_373"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_601(F3Ddatasets.Player) -> plyr_[_affID]
REF_602(uint256) -> REF_601.aff
REF_604(F3Ddatasets.Player) -> plyr_[_affID]
REF_605(uint256) -> REF_604.aff
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_605'] 
REF_602(uint256) (->plyr_) := TMP_374(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_607(F3Ddatasets.Player) -> plyr_[_affID]
REF_608(address) -> REF_607.addr
REF_609(F3Ddatasets.Player) -> plyr_[_affID]
REF_610(bytes32) -> REF_609.name
Emit onAffiliatePayout(_affID,REF_608,REF_610,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_613(F3Ddatasets.TeamFee) -> fees_[_team]
REF_614(uint256) -> REF_613.p3d
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_614'] 
TMP_377(uint256) = TMP_376 / 100
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_377'] 
_p3d(uint256) := TMP_378(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_379(bool) = _p3d > 0
CONDITION TMP_379"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
action.redistribution.value(_p3d).gas(1000000)()

IRs:
HIGH_LEVEL_CALL, dest:action(Snow), function:redistribution, arguments:[] value:_p3d gas:1000000"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_618(uint256) -> _eventData_.P3DAmount
REF_620(uint256) -> _eventData_.P3DAmount
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_620'] 
REF_618(uint256) (->_eventData_) := TMP_383(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2599.sol-SnowStorm-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_628(F3Ddatasets.TeamFee) -> fees_[_team]
REF_629(uint256) -> REF_628.gen
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_629'] 
TMP_388(uint256) = TMP_387 / 100
_gen(uint256) := TMP_388(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_389(uint256) = _eth / 100
_air(uint256) := TMP_389(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_390(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_392(uint256) = TMP_391 / 100
REF_635(F3Ddatasets.TeamFee) -> fees_[_team]
REF_636(uint256) -> REF_635.p3d
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_636'] 
TMP_394(uint256) = TMP_393 / 100
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_392', 'TMP_394'] 
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_395'] 
_eth(uint256) := TMP_396(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_397(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_398(uint256) = INTERNAL_CALL, SnowStorm.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_398(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_399(bool) = _dust > 0
CONDITION TMP_399"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_400(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_639(F3Ddatasets.Round) -> round_[_rID]
REF_640(uint256) -> REF_639.pot
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_643(F3Ddatasets.Round) -> round_[_rID]
REF_644(uint256) -> REF_643.pot
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_401', 'REF_644'] 
REF_640(uint256) (->round_) := TMP_402(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_645(uint256) -> _eventData_.genAmount
REF_647(uint256) -> _eventData_.genAmount
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_647'] 
REF_645(uint256) (->_eventData_) := TMP_403(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_648(uint256) -> _eventData_.potAmount
REF_648(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2599.sol-SnowStorm-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_497(F3Ddatasets.Round) -> round_[_rID]
REF_498(uint256) -> REF_497.plyr
_winPID(uint256) := REF_498(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_499(F3Ddatasets.Round) -> round_[_rID]
REF_500(uint256) -> REF_499.team
_winTID(uint256) := REF_500(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_501(F3Ddatasets.Round) -> round_[_rID]
REF_502(uint256) -> REF_501.pot
_pot(uint256) := REF_502(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_293(uint256) = TMP_292 / 100
_win(uint256) := TMP_293(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_294(uint256) = _pot / 50
_com(uint256) := TMP_294(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_win = _win + _com

IRs:
TMP_295(uint256) = _win + _com
_win(uint256) := TMP_295(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_505(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_506(uint256) -> REF_505.gen
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_506'] 
TMP_297(uint256) = TMP_296 / 100
_gen(uint256) := TMP_297(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_508(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_509(uint256) -> REF_508.p3d
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_509'] 
TMP_299(uint256) = TMP_298 / 100
_p3d(uint256) := TMP_299(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_300', '_com'] 
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_301', '_gen'] 
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_302', '_p3d'] 
_res(uint256) := TMP_303(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_515(F3Ddatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.keys
TMP_305(uint256) = TMP_304 / REF_516
_ppt(uint256) := TMP_305(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_519(F3Ddatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.keys
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_520'] 
TMP_307(uint256) = TMP_306 / 1000000000000000000
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_307'] 
_dust(uint256) := TMP_308(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_dust > 0

IRs:
TMP_309(bool) = _dust > 0
CONDITION TMP_309"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_310(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_311(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_523(F3Ddatasets.Player) -> plyr_[_winPID]
REF_524(uint256) -> REF_523.win
REF_526(F3Ddatasets.Player) -> plyr_[_winPID]
REF_527(uint256) -> REF_526.win
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_527'] 
REF_524(uint256) (->plyr_) := TMP_312(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
action.redistribution.value(_p3d).gas(1000000)()

IRs:
HIGH_LEVEL_CALL, dest:action(Snow), function:redistribution, arguments:[] value:_p3d gas:1000000"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_531(F3Ddatasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.mask
REF_534(F3Ddatasets.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.mask
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_535'] 
REF_532(uint256) (->round_) := TMP_316(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_536(uint256) -> _eventData_.compressedData
REF_537(uint256) -> _eventData_.compressedData
REF_538(F3Ddatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.end
TMP_317(uint256) = REF_539 * 1000000
TMP_318(uint256) = REF_537 + TMP_317
REF_536(uint256) (->_eventData_) := TMP_318(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_540(uint256) -> _eventData_.compressedIDs
REF_541(uint256) -> _eventData_.compressedIDs
TMP_319(uint256) = _winPID * 100000000000000000000000000
TMP_320(uint256) = REF_541 + TMP_319
TMP_321(uint256) = _winTID * 100000000000000000
TMP_322(uint256) = TMP_320 + TMP_321
REF_540(uint256) (->_eventData_) := TMP_322(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_542(address) -> _eventData_.winnerAddr
REF_543(F3Ddatasets.Player) -> plyr_[_winPID]
REF_544(address) -> REF_543.addr
REF_542(address) (->_eventData_) := REF_544(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_545(bytes32) -> _eventData_.winnerName
REF_546(F3Ddatasets.Player) -> plyr_[_winPID]
REF_547(bytes32) -> REF_546.name
REF_545(bytes32) (->_eventData_) := REF_547(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_548(uint256) -> _eventData_.amountWon
REF_548(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_549(uint256) -> _eventData_.genAmount
REF_549(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_550(uint256) -> _eventData_.P3DAmount
REF_550(uint256) (->_eventData_) := _p3d(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_551(uint256) -> _eventData_.newPot
REF_551(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_323(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_324(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_552(F3Ddatasets.Round) -> round_[_rID]
REF_553(uint256) -> REF_552.strt
REF_553(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_554(F3Ddatasets.Round) -> round_[_rID]
REF_555(uint256) -> REF_554.end
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_325', 'rndGap_'] 
REF_555(uint256) (->round_) := TMP_326(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_558(F3Ddatasets.Round) -> round_[_rID]
REF_559(uint256) -> REF_558.pot
REF_559(uint256) (->round_) := _res(uint256)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2599.sol-SnowStorm-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_689(uint256) -> _eventData_.compressedData
REF_690(uint256) -> _eventData_.compressedData
TMP_420(uint256) = now * 1000000000000000000
TMP_421(uint256) = REF_690 + TMP_420
TMP_422(uint256) = _team * 100000000000000000000000000000
TMP_423(uint256) = TMP_421 + TMP_422
REF_689(uint256) (->_eventData_) := TMP_423(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_691(uint256) -> _eventData_.compressedIDs
REF_692(uint256) -> _eventData_.compressedIDs
TMP_424(uint256) = REF_692 + _pID
TMP_425(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_426(uint256) = TMP_424 + TMP_425
REF_691(uint256) (->_eventData_) := TMP_426(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_694(uint256) -> _eventData_.compressedData
REF_695(uint256) -> _eventData_.compressedIDs
REF_696(F3Ddatasets.Player) -> plyr_[_pID]
REF_697(bytes32) -> REF_696.name
REF_698(address) -> _eventData_.winnerAddr
REF_699(bytes32) -> _eventData_.winnerName
REF_700(uint256) -> _eventData_.amountWon
REF_701(uint256) -> _eventData_.newPot
REF_702(uint256) -> _eventData_.P3DAmount
REF_703(uint256) -> _eventData_.genAmount
REF_704(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_694,REF_695,REF_697,msg.sender,_eth,_keys,REF_698,REF_699,REF_700,REF_701,REF_702,REF_703,REF_704,airDropPot_)"];
}
// Function: 2599.sol-SnowStorm-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_9(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_9(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, SnowStorm.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SnowStorm.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2599.sol-SnowStorm-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_129(F3Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.strt
TMP_104(uint256) = REF_130 + rndGap_
TMP_105(bool) = _now > TMP_104
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_106(bool) = _now <= REF_132
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.end
TMP_107(bool) = _now > REF_134
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.plyr
TMP_108(bool) = REF_136 == 0
TMP_109(bool) = TMP_107 && TMP_108
TMP_110(bool) = TMP_106 || TMP_109
TMP_111(bool) = TMP_105 && TMP_110
CONDITION TMP_111"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.keys
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_138', '1000000000000000000'] 
TMP_113(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_112', '1000000000000000000'] 
RETURN TMP_113"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2599.sol-SnowStorm-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_211(F3Ddatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.ico
REF_213(F3Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.keys
REF_215(F3Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.end
REF_217(F3Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.strt
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.pot
REF_221(F3Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.team
REF_223(F3Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.plyr
TMP_144(uint256) = REF_224 * 10
TMP_145(uint256) = REF_222 + TMP_144
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.plyr
REF_227(F3Ddatasets.Player) -> plyr_[REF_226]
REF_228(address) -> REF_227.addr
REF_229(F3Ddatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.plyr
REF_231(F3Ddatasets.Player) -> plyr_[REF_230]
REF_232(bytes32) -> REF_231.name
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[0]
REF_235(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_236(uint256) -> REF_235[1]
REF_237(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_238(uint256) -> REF_237[2]
REF_239(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_240(uint256) -> REF_239[3]
TMP_146(uint256) = airDropPot_ * 1000
TMP_147(uint256) = airDropTracker_ + TMP_146
RETURN REF_212,_rID,REF_214,REF_216,REF_218,REF_220,TMP_145,REF_228,REF_232,REF_234,REF_236,REF_238,REF_240,TMP_147"];
}
// Function: 2599.sol-SnowStorm-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_148 = CONVERT 0 to address
TMP_149(bool) = _addr == TMP_148
CONDITION TMP_149"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_150(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_241(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_241(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_242(F3Ddatasets.Player) -> plyr_[_pID]
REF_243(bytes32) -> REF_242.name
REF_244(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_245(F3Ddatasets.PlayerRounds) -> REF_244[_rID]
REF_246(uint256) -> REF_245.keys
REF_247(F3Ddatasets.Player) -> plyr_[_pID]
REF_248(uint256) -> REF_247.win
REF_249(F3Ddatasets.Player) -> plyr_[_pID]
REF_250(uint256) -> REF_249.gen
REF_252(F3Ddatasets.Player) -> plyr_[_pID]
REF_253(uint256) -> REF_252.lrnd
TMP_151(uint256) = INTERNAL_CALL, SnowStorm.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_253)
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_250', 'TMP_151'] 
REF_254(F3Ddatasets.Player) -> plyr_[_pID]
REF_255(uint256) -> REF_254.aff
REF_256(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_257(F3Ddatasets.PlayerRounds) -> REF_256[_rID]
REF_258(uint256) -> REF_257.eth
RETURN _pID,REF_243,REF_246,REF_248,TMP_152,REF_255,REF_258"];
}
// Function: 2599.sol-SnowStorm-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_120(bool) = now > REF_152
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(bool) -> REF_153.ended
TMP_121(bool) = REF_154 == False
TMP_122(bool) = TMP_120 && TMP_121
REF_155(F3Ddatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.plyr
TMP_123(bool) = REF_156 != 0
TMP_124(bool) = TMP_122 && TMP_123
CONDITION TMP_124"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_157(F3Ddatasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.plyr
TMP_125(bool) = REF_158 == _pID
CONDITION TMP_125"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(50)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_159(F3Ddatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.win
REF_162(F3Ddatasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.pot
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_163', '50'] 
TMP_127(uint256) = TMP_126 / 100
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_127'] 
REF_165(F3Ddatasets.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.gen
TMP_129(uint256) = INTERNAL_CALL, SnowStorm.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_169(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_170(F3Ddatasets.PlayerRounds) -> REF_169[_rID]
REF_171(uint256) -> REF_170.mask
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_129', 'REF_171'] 
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_166', 'TMP_130'] 
REF_172(F3Ddatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.aff
RETURN TMP_128,TMP_131,REF_173"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_174(F3Ddatasets.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.win
REF_176(F3Ddatasets.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.gen
TMP_132(uint256) = INTERNAL_CALL, SnowStorm.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_180(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_181(F3Ddatasets.PlayerRounds) -> REF_180[_rID]
REF_182(uint256) -> REF_181.mask
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_132', 'REF_182'] 
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_177', 'TMP_133'] 
REF_183(F3Ddatasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.aff
RETURN REF_175,TMP_134,REF_184"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_185(F3Ddatasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.win
REF_187(F3Ddatasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.gen
REF_190(F3Ddatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.lrnd
TMP_135(uint256) = INTERNAL_CALL, SnowStorm.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_191)
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', 'TMP_135'] 
REF_192(F3Ddatasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.aff
RETURN REF_186,TMP_136,REF_193"];
}
// Function: 2599.sol-SnowStorm-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_194(F3Ddatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.mask
REF_197(F3Ddatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.pot
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.team
REF_202(F3Ddatasets.PotSplit) -> potSplit_[REF_201]
REF_203(uint256) -> REF_202.gen
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_198', 'REF_203'] 
TMP_138(uint256) = TMP_137 / 100
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_138', '1000000000000000000'] 
REF_205(F3Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.keys
TMP_140(uint256) = TMP_139 / REF_206
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_195', 'TMP_140'] 
REF_208(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_209(F3Ddatasets.PlayerRounds) -> REF_208[_rID]
REF_210(uint256) -> REF_209.keys
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_141', 'REF_210'] 
TMP_143(uint256) = TMP_142 / 1000000000000000000
RETURN TMP_143"];
}
// Function: 2599.sol-SnowStorm-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_114(bool) = _now < REF_142
CONDITION TMP_114"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_143(F3Ddatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.strt
TMP_115(uint256) = REF_144 + rndGap_
TMP_116(bool) = _now > TMP_115
CONDITION TMP_116"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_145(F3Ddatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_146', '_now'] 
RETURN TMP_117"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_148(F3Ddatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.strt
TMP_118(uint256) = REF_149 + rndGap_
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_118', '_now'] 
RETURN TMP_119"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2599.sol-SnowStorm-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.strt
TMP_253(uint256) = REF_437 + rndGap_
TMP_254(bool) = _now > TMP_253
REF_438(F3Ddatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.end
TMP_255(bool) = _now <= REF_439
REF_440(F3Ddatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.end
TMP_256(bool) = _now > REF_441
REF_442(F3Ddatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.plyr
TMP_257(bool) = REF_443 == 0
TMP_258(bool) = TMP_256 && TMP_257
TMP_259(bool) = TMP_255 || TMP_258
TMP_260(bool) = TMP_254 && TMP_259
CONDITION TMP_260"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_444(F3Ddatasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.keys
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_445', '_keys'] 
TMP_262(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_261', '_keys'] 
RETURN TMP_262"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_263(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_263"];
}
// Function: 2599.sol-SnowStorm-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_437(bool) = activated_ == True
TMP_438(None) = SOLIDITY_CALL require(bool,string)(TMP_437,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2599.sol-SnowStorm-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_439(bool) = _codeLength == 0
TMP_440(None) = SOLIDITY_CALL require(bool,string)(TMP_439,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2599.sol-SnowStorm-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_441(bool) = _eth >= 1000000000
TMP_442(None) = SOLIDITY_CALL require(bool,string)(TMP_441,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_443(bool) = _eth <= 100000000000000000000000
TMP_444(None) = SOLIDITY_CALL require(bool,string)(TMP_443,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2599.sol-SnowStorm-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_489(F3Ddatasets.Player) -> plyr_[_pID]
REF_490(uint256) -> REF_489.lrnd
TMP_289(bool) = REF_490 != 0
CONDITION TMP_289"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_491(F3Ddatasets.Player) -> plyr_[_pID]
REF_492(uint256) -> REF_491.lrnd
INTERNAL_CALL, SnowStorm.updateGenVault(uint256,uint256)(_pID,REF_492)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_493(F3Ddatasets.Player) -> plyr_[_pID]
REF_494(uint256) -> REF_493.lrnd
REF_494(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_495(uint256) -> _eventData_.compressedData
REF_496(uint256) -> _eventData_.compressedData
TMP_291(uint256) = REF_496 + 10
REF_495(uint256) (->_eventData_) := TMP_291(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2599.sol-SnowStorm-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_384(uint256) = rID_ + 1
_rID(uint256) := TMP_384(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_621(F3Ddatasets.Round) -> round_[_rID]
REF_622(uint256) -> REF_621.pot
REF_623(F3Ddatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.pot
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_624', 'msg.value'] 
REF_622(uint256) (->round_) := TMP_385(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 2599.sol-SnowStorm-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_293(F3Ddatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.strt
TMP_171(uint256) = REF_294 + rndGap_
TMP_172(bool) = _now > TMP_171
REF_295(F3Ddatasets.Round) -> round_[_rID]
REF_296(uint256) -> REF_295.end
TMP_173(bool) = _now <= REF_296
REF_297(F3Ddatasets.Round) -> round_[_rID]
REF_298(uint256) -> REF_297.end
TMP_174(bool) = _now > REF_298
REF_299(F3Ddatasets.Round) -> round_[_rID]
REF_300(uint256) -> REF_299.plyr
TMP_175(bool) = REF_300 == 0
TMP_176(bool) = TMP_174 && TMP_175
TMP_177(bool) = TMP_173 || TMP_176
TMP_178(bool) = TMP_172 && TMP_177
CONDITION TMP_178"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_301(F3Ddatasets.Player) -> plyr_[_pID]
REF_302(uint256) -> REF_301.gen
TMP_179(uint256) = INTERNAL_CALL, SnowStorm.withdrawEarnings(uint256)(_pID)
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_179', '_eth'] 
REF_302(uint256) (->plyr_) := TMP_180(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_304(F3Ddatasets.Round) -> round_[_rID]
REF_305(uint256) -> REF_304.end
TMP_182(bool) = _now > REF_305
REF_306(F3Ddatasets.Round) -> round_[_rID]
REF_307(bool) -> REF_306.ended
TMP_183(bool) = REF_307 == False
TMP_184(bool) = TMP_182 && TMP_183
CONDITION TMP_184"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_308(F3Ddatasets.Round) -> round_[_rID]
REF_309(bool) -> REF_308.ended
REF_309(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_185(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_185(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_310(uint256) -> _eventData_.compressedData
REF_311(uint256) -> _eventData_.compressedData
TMP_186(uint256) = _now * 1000000000000000000
TMP_187(uint256) = REF_311 + TMP_186
REF_310(uint256) (->_eventData_) := TMP_187(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_312(uint256) -> _eventData_.compressedIDs
REF_313(uint256) -> _eventData_.compressedIDs
TMP_188(uint256) = REF_313 + _pID
REF_312(uint256) (->_eventData_) := TMP_188(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_315(F3Ddatasets.Player) -> plyr_[_pID]
REF_316(bytes32) -> REF_315.name
REF_317(uint256) -> _eventData_.compressedData
REF_318(uint256) -> _eventData_.compressedIDs
REF_319(address) -> _eventData_.winnerAddr
REF_320(bytes32) -> _eventData_.winnerName
REF_321(uint256) -> _eventData_.amountWon
REF_322(uint256) -> _eventData_.newPot
REF_323(uint256) -> _eventData_.P3DAmount
REF_324(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_316,REF_317,REF_318,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2599.sol-SnowStorm-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _affCode == TMP_54
TMP_56(bool) = _affCode == msg.sender
TMP_57(bool) = TMP_55 || TMP_56
CONDITION TMP_57"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_58(bool) = _affID != REF_56
CONDITION TMP_58"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_59(uint256) = INTERNAL_CALL, SnowStorm.verifyTeam(uint256)(_team)
_team(uint256) := TMP_59(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, SnowStorm.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2599.sol-SnowStorm-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_45(bool) = _affCode == 0
TMP_46(bool) = _affCode == _pID
TMP_47(bool) = TMP_45 || TMP_46
CONDITION TMP_47"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_48(bool) = _affCode != REF_48
CONDITION TMP_48"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_49(uint256) = INTERNAL_CALL, SnowStorm.verifyTeam(uint256)(_team)
_team(uint256) := TMP_49(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, SnowStorm.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 2599.sol-SnowStorm-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_64(bool) = _affCode == 
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_65(bool) = _affCode == REF_61
TMP_66(bool) = TMP_64 || TMP_65
CONDITION TMP_66"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_67(bool) = _affID != REF_66
CONDITION TMP_67"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_68(uint256) = INTERNAL_CALL, SnowStorm.verifyTeam(uint256)(_team)
_team(uint256) := TMP_68(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, SnowStorm.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, SnowStorm.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2599.sol-SnowStorm-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_264 = CONVERT PlayerBook to address
TMP_265(bool) = msg.sender == TMP_264
TMP_266(None) = SOLIDITY_CALL require(bool,string)(TMP_265,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_449(uint256) -> pIDxAddr_[_addr]
TMP_267(bool) = REF_449 != _pID
CONDITION TMP_267"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_450(uint256) -> pIDxAddr_[_addr]
REF_450(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_451(uint256) -> pIDxName_[_name]
TMP_268(bool) = REF_451 != _pID
CONDITION TMP_268"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_452(uint256) -> pIDxName_[_name]
REF_452(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_453(F3Ddatasets.Player) -> plyr_[_pID]
REF_454(address) -> REF_453.addr
TMP_269(bool) = REF_454 != _addr
CONDITION TMP_269"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_455(F3Ddatasets.Player) -> plyr_[_pID]
REF_456(address) -> REF_455.addr
REF_456(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_pID]
REF_458(bytes32) -> REF_457.name
TMP_270(bool) = REF_458 != _name
CONDITION TMP_270"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_459(F3Ddatasets.Player) -> plyr_[_pID]
REF_460(bytes32) -> REF_459.name
REF_460(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_461(F3Ddatasets.Player) -> plyr_[_pID]
REF_462(uint256) -> REF_461.laff
TMP_271(bool) = REF_462 != _laff
CONDITION TMP_271"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_463(F3Ddatasets.Player) -> plyr_[_pID]
REF_464(uint256) -> REF_463.laff
REF_464(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_465(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_466(bool) -> REF_465[_name]
TMP_272(bool) = REF_466 == False
CONDITION TMP_272"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_467(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_468(bool) -> REF_467[_name]
REF_468(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2599.sol-SnowStorm-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_273 = CONVERT PlayerBook to address
TMP_274(bool) = msg.sender == TMP_273
TMP_275(None) = SOLIDITY_CALL require(bool,string)(TMP_274,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_469(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_470(bool) -> REF_469[_name]
TMP_276(bool) = REF_470 == False
CONDITION TMP_276"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_471(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_472(bool) -> REF_471[_name]
REF_472(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2599.sol-SnowStorm-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_92(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_92(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_105(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_105(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_107(F3Ddatasets.Player) -> plyr_[_affID]
REF_108(address) -> REF_107.addr
REF_109(F3Ddatasets.Player) -> plyr_[_affID]
REF_110(bytes32) -> REF_109.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_108,REF_110,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
9->1;
}
// Function: 2599.sol-SnowStorm-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_96(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_96(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_114(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_114(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_116(F3Ddatasets.Player) -> plyr_[_affID]
REF_117(address) -> REF_116.addr
REF_118(F3Ddatasets.Player) -> plyr_[_affID]
REF_119(bytes32) -> REF_118.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_117,REF_119,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
9->1;
}
// Function: 2599.sol-SnowStorm-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_100(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_100(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_123(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_123(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_125(F3Ddatasets.Player) -> plyr_[_affID]
REF_126(address) -> REF_125.addr
REF_127(F3Ddatasets.Player) -> plyr_[_affID]
REF_128(bytes32) -> REF_127.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_126,REF_128,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
9->1;
}
// Function: 2599.sol-SnowStorm-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0xf4FBEF849bcf02Ac4b305c2bc092FC270a14124C)

IRs:
TMP_436 = CONVERT 1398612100086563353595949960563319331392979210828 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_436(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = SnowStorm

IRs:
name(string) := SnowStorm(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = SS

IRs:
symbol(string) := SS(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 28800

IRs:
rndInit_(uint256) := 28800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 28800

IRs:
rndMax_(uint256) := 28800(uint256)"];
}
// Function: 2599.sol-SnowStorm-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 1

IRs:
rndExtra_(uint256) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 1

IRs:
rndGap_(uint256) := 1(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2599.sol-SnowStorm-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_327(uint256) = INTERNAL_CALL, SnowStorm.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_327(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_328(bool) = _earnings > 0
CONDITION TMP_328"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_560(F3Ddatasets.Player) -> plyr_[_pID]
REF_561(uint256) -> REF_560.gen
REF_563(F3Ddatasets.Player) -> plyr_[_pID]
REF_564(uint256) -> REF_563.gen
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_564'] 
REF_561(uint256) (->plyr_) := TMP_329(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_565(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_566(F3Ddatasets.PlayerRounds) -> REF_565[_rIDlast]
REF_567(uint256) -> REF_566.mask
REF_569(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_570(F3Ddatasets.PlayerRounds) -> REF_569[_rIDlast]
REF_571(uint256) -> REF_570.mask
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_571'] 
REF_567(uint256) (->plyrRnds_) := TMP_330(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2599.sol-SnowStorm-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_650(F3Ddatasets.Round) -> round_[_rID]
REF_651(uint256) -> REF_650.keys
TMP_405(uint256) = TMP_404 / REF_651
_ppt(uint256) := TMP_405(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_652(F3Ddatasets.Round) -> round_[_rID]
REF_653(uint256) -> REF_652.mask
REF_655(F3Ddatasets.Round) -> round_[_rID]
REF_656(uint256) -> REF_655.mask
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_656'] 
REF_653(uint256) (->round_) := TMP_406(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_408(uint256) = TMP_407 / 1000000000000000000
_pearn(uint256) := TMP_408(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_658(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_659(F3Ddatasets.PlayerRounds) -> REF_658[_rID]
REF_660(uint256) -> REF_659.mask
REF_661(F3Ddatasets.Round) -> round_[_rID]
REF_662(uint256) -> REF_661.mask
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_662', '_keys'] 
TMP_410(uint256) = TMP_409 / 1000000000000000000
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_410', '_pearn'] 
REF_666(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_667(F3Ddatasets.PlayerRounds) -> REF_666[_rID]
REF_668(uint256) -> REF_667.mask
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_411', 'REF_668'] 
REF_660(uint256) (->plyrRnds_) := TMP_412(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_671(F3Ddatasets.Round) -> round_[_rID]
REF_672(uint256) -> REF_671.keys
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_672'] 
TMP_414(uint256) = TMP_413 / 1000000000000000000
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_414'] 
RETURN TMP_415"];
}
// Function: 2599.sol-SnowStorm-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_572(F3Ddatasets.Round) -> round_[_rID]
REF_573(uint256) -> REF_572.end
TMP_331(bool) = _now > REF_573
REF_574(F3Ddatasets.Round) -> round_[_rID]
REF_575(uint256) -> REF_574.plyr
TMP_332(bool) = REF_575 == 0
TMP_333(bool) = TMP_331 && TMP_332
CONDITION TMP_333"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_334(uint256) = _keys / 1000000000000000000
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_334', 'rndInc_'] 
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_335', '_now'] 
_newTime(uint256) := TMP_336(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_337(uint256) = _keys / 1000000000000000000
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_337', 'rndInc_'] 
REF_580(F3Ddatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.end
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_338', 'REF_581'] 
_newTime(uint256) := TMP_339(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_341(bool) = _newTime < TMP_340
CONDITION TMP_341"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_583(F3Ddatasets.Round) -> round_[_rID]
REF_584(uint256) -> REF_583.end
REF_584(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_585(F3Ddatasets.Round) -> round_[_rID]
REF_586(uint256) -> REF_585.end
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_586(uint256) (->round_) := TMP_342(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 2599.sol-SnowStorm-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_286(bool) = _team < 0
TMP_287(bool) = _team > 3
TMP_288(bool) = TMP_286 || TMP_287
CONDITION TMP_288"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2599.sol-SnowStorm-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_73(bool) = _now > REF_71
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_74(bool) = REF_73 == False
TMP_75(bool) = TMP_73 && TMP_74
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_76(bool) = REF_75 != 0
TMP_77(bool) = TMP_75 && TMP_76
CONDITION TMP_77"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(F3Ddatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_78(F3Ddatasets.EventReturns) = INTERNAL_CALL, SnowStorm.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_78(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_79(uint256) = INTERNAL_CALL, SnowStorm.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_79(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_80(bool) = _eth > 0
CONDITION TMP_80"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_78(F3Ddatasets.Player) -> plyr_[_pID]
REF_79(address) -> REF_78.addr
Transfer dest:REF_79 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_81(uint256) -> _eventData_.compressedData
REF_82(uint256) -> _eventData_.compressedData
TMP_82(uint256) = _now * 1000000000000000000
TMP_83(uint256) = REF_82 + TMP_82
REF_81(uint256) (->_eventData_) := TMP_83(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_83(uint256) -> _eventData_.compressedIDs
REF_84(uint256) -> _eventData_.compressedIDs
TMP_84(uint256) = REF_84 + _pID
REF_83(uint256) (->_eventData_) := TMP_84(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(bytes32) -> REF_86.name
REF_88(uint256) -> _eventData_.compressedData
REF_89(uint256) -> _eventData_.compressedIDs
REF_90(address) -> _eventData_.winnerAddr
REF_91(bytes32) -> _eventData_.winnerName
REF_92(uint256) -> _eventData_.amountWon
REF_93(uint256) -> _eventData_.newPot
REF_94(uint256) -> _eventData_.P3DAmount
REF_95(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_87,_eth,REF_88,REF_89,REF_90,REF_91,REF_92,REF_93,REF_94,REF_95)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_86(uint256) = INTERNAL_CALL, SnowStorm.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_86(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_87(bool) = _eth > 0
CONDITION TMP_87"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(address) -> REF_96.addr
Transfer dest:REF_97 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_100(F3Ddatasets.Player) -> plyr_[_pID]
REF_101(bytes32) -> REF_100.name
Emit onWithdraw(_pID,msg.sender,REF_101,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SnowStorm.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SnowStorm.isHuman()()"];
23->1;
}
// Function: 2599.sol-SnowStorm-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_673(F3Ddatasets.Player) -> plyr_[_pID]
REF_674(uint256) -> REF_673.lrnd
INTERNAL_CALL, SnowStorm.updateGenVault(uint256,uint256)(_pID,REF_674)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_675(F3Ddatasets.Player) -> plyr_[_pID]
REF_676(uint256) -> REF_675.win
REF_678(F3Ddatasets.Player) -> plyr_[_pID]
REF_679(uint256) -> REF_678.gen
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_676', 'REF_679'] 
REF_681(F3Ddatasets.Player) -> plyr_[_pID]
REF_682(uint256) -> REF_681.aff
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_417', 'REF_682'] 
_earnings(uint256) := TMP_418(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_419(bool) = _earnings > 0
CONDITION TMP_419"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_683(F3Ddatasets.Player) -> plyr_[_pID]
REF_684(uint256) -> REF_683.win
REF_684(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_685(F3Ddatasets.Player) -> plyr_[_pID]
REF_686(uint256) -> REF_685.gen
REF_686(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_687(F3Ddatasets.Player) -> plyr_[_pID]
REF_688(uint256) -> REF_687.aff
REF_688(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
}
