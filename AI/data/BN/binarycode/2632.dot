digraph G {
// Function: 2632.sol-AntiFakeLabelToken-AntiFakeLabelToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethFundDeposit = _ethFundDeposit

IRs:
ethFundDeposit(address) := _ethFundDeposit(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isFunding = false

IRs:
isFunding(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fundingStartBlock = 0

IRs:
fundingStartBlock(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fundingStopBlock = 0

IRs:
fundingStopBlock(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentSupply = formatDecimals(_currentSupply)

IRs:
TMP_52(uint256) = INTERNAL_CALL, AntiFakeLabelToken.formatDecimals(uint256)(_currentSupply)
currentSupply(uint256) := TMP_52(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = formatDecimals(5000000000)

IRs:
TMP_53(uint256) = INTERNAL_CALL, AntiFakeLabelToken.formatDecimals(uint256)(5000000000)
totalSupply(uint256) := TMP_53(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := totalSupply(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
currentSupply > totalSupply

IRs:
TMP_54(bool) = currentSupply > totalSupply
CONDITION TMP_54"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
}
// Function: 2632.sol-AntiFakeLabelToken-allocateToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
_eth == 0

IRs:
TMP_92(bool) = _eth == 0
CONDITION TMP_92"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_addr == address(0x0)

IRs:
TMP_93 = CONVERT 0 to address
TMP_94(bool) = _addr == TMP_93
CONDITION TMP_94"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokens = safeMult(formatDecimals(_eth),tokenExchangeRate)

IRs:
TMP_95(uint256) = INTERNAL_CALL, AntiFakeLabelToken.formatDecimals(uint256)(_eth)
TMP_96(uint256) = INTERNAL_CALL, SafeMath.safeMult(uint256,uint256)(TMP_95,tokenExchangeRate)
tokens(uint256) := TMP_96(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
tokens + tokenRaised > currentSupply

IRs:
TMP_97(uint256) = tokens + tokenRaised
TMP_98(bool) = TMP_97 > currentSupply
CONDITION TMP_98"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokenRaised = safeAdd(tokenRaised,tokens)

IRs:
TMP_99(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tokenRaised,tokens)
tokenRaised(uint256) := TMP_99(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[_addr] += tokens

IRs:
REF_37(uint256) -> balances[_addr]
REF_37(-> balances) = REF_37 + tokens"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
AllocateToken(_addr,tokens)

IRs:
Emit AllocateToken(_addr,tokens)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
14->1;
}
// Function: 2632.sol-AntiFakeLabelToken-allowance(address,address)
digraph{
}
// Function: 2632.sol-AntiFakeLabelToken-approve(address,uint256)
digraph{
}
// Function: 2632.sol-AntiFakeLabelToken-balanceOf(address)
digraph{
}
// Function: 2632.sol-AntiFakeLabelToken-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_newFundDeposit == address(0x0)

IRs:
TMP_77 = CONVERT 0 to address
TMP_78(bool) = _newFundDeposit == TMP_77
CONDITION TMP_78"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ethFundDeposit = _newFundDeposit

IRs:
ethFundDeposit(address) := _newFundDeposit(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
5->1;
}
// Function: 2632.sol-AntiFakeLabelToken-decreaseSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = formatDecimals(_value)

IRs:
TMP_64(uint256) = INTERNAL_CALL, AntiFakeLabelToken.formatDecimals(uint256)(_value)
value(uint256) := TMP_64(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value + tokenRaised > currentSupply

IRs:
TMP_65(uint256) = value + tokenRaised
TMP_66(bool) = TMP_65 > currentSupply
CONDITION TMP_66"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentSupply = safeSubtract(currentSupply,value)

IRs:
TMP_67(uint256) = INTERNAL_CALL, SafeMath.safeSubtract(uint256,uint256)(currentSupply,value)
currentSupply(uint256) := TMP_67(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
DecreaseSupply(value)

IRs:
Emit DecreaseSupply(value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
7->1;
}
// Function: 2632.sol-AntiFakeLabelToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isFunding

IRs:
TMP_102 = UnaryType.BANG isFunding 
CONDITION TMP_102"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.value == 0

IRs:
TMP_103(bool) = msg.value == 0
CONDITION TMP_103"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
block.number < fundingStartBlock

IRs:
TMP_104(bool) = block.number < fundingStartBlock
CONDITION TMP_104"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
block.number > fundingStopBlock

IRs:
TMP_105(bool) = block.number > fundingStopBlock
CONDITION TMP_105"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
tokens = safeMult(msg.value,tokenExchangeRate)

IRs:
TMP_106(uint256) = INTERNAL_CALL, SafeMath.safeMult(uint256,uint256)(msg.value,tokenExchangeRate)
tokens(uint256) := TMP_106(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
tokens + tokenRaised > currentSupply

IRs:
TMP_107(uint256) = tokens + tokenRaised
TMP_108(bool) = TMP_107 > currentSupply
CONDITION TMP_108"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tokenRaised = safeAdd(tokenRaised,tokens)

IRs:
TMP_109(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tokenRaised,tokens)
tokenRaised(uint256) := TMP_109(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[msg.sender] += tokens

IRs:
REF_38(uint256) -> balances[msg.sender]
REF_38(-> balances) = REF_38 + tokens"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
IssueToken(msg.sender,tokens)

IRs:
Emit IssueToken(msg.sender,tokens)"];
}
// Function: 2632.sol-AntiFakeLabelToken-formatDecimals(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_value * 10 ** decimals

IRs:
TMP_50(uint256) = 10 ** decimals
TMP_51(uint256) = _value * TMP_50
RETURN TMP_51"];
}
// Function: 2632.sol-AntiFakeLabelToken-increaseSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = formatDecimals(_value)

IRs:
TMP_58(uint256) = INTERNAL_CALL, AntiFakeLabelToken.formatDecimals(uint256)(_value)
value(uint256) := TMP_58(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value + currentSupply > totalSupply

IRs:
TMP_59(uint256) = value + currentSupply
TMP_60(bool) = TMP_59 > totalSupply
CONDITION TMP_60"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentSupply = safeAdd(currentSupply,value)

IRs:
TMP_61(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(currentSupply,value)
currentSupply(uint256) := TMP_61(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
IncreaseSupply(value)

IRs:
Emit IncreaseSupply(value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
7->1;
}
// Function: 2632.sol-AntiFakeLabelToken-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ethFundDeposit)

IRs:
TMP_111(bool) = msg.sender == ethFundDeposit
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2632.sol-AntiFakeLabelToken-migrate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isFunding

IRs:
CONDITION isFunding"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
newContractAddr == address(0x0)

IRs:
TMP_80 = CONVERT 0 to address
TMP_81(bool) = newContractAddr == TMP_80
CONDITION TMP_81"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokens = balances[msg.sender]

IRs:
REF_31(uint256) -> balances[msg.sender]
tokens(uint256) := REF_31(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
tokens == 0

IRs:
TMP_82(bool) = tokens == 0
CONDITION TMP_82"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_32(uint256) -> balances[msg.sender]
REF_32(uint256) (->balances) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokenMigrated = safeAdd(tokenMigrated,tokens)

IRs:
TMP_83(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tokenMigrated,tokens)
tokenMigrated(uint256) := TMP_83(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
newContract = IMigrationContract(newContractAddr)

IRs:
TMP_84 = CONVERT newContractAddr to IMigrationContract
newContract(IMigrationContract) := TMP_84(IMigrationContract)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! newContract.migrate(msg.sender,tokens)

IRs:
TMP_85(bool) = HIGH_LEVEL_CALL, dest:newContract(IMigrationContract), function:migrate, arguments:['msg.sender', 'tokens']  
TMP_86 = UnaryType.BANG TMP_85 
CONDITION TMP_86"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Migrate(msg.sender,tokens)

IRs:
Emit Migrate(msg.sender,tokens)"];
}
// Function: 2632.sol-AntiFakeLabelToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_25(uint256) = x + y
z(uint256) := TMP_25(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_26(bool) = z >= x
TMP_27(bool) = z >= y
TMP_28(bool) = TMP_26 && TMP_27
TMP_29(None) = SOLIDITY_CALL assert(bool)(TMP_28)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 2632.sol-AntiFakeLabelToken-safeMult(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_33(uint256) = x * y
z(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_34(bool) = x == 0
TMP_35(uint256) = z / x
TMP_36(bool) = TMP_35 == y
TMP_37(bool) = TMP_34 || TMP_36
TMP_38(None) = SOLIDITY_CALL assert(bool)(TMP_37)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 2632.sol-AntiFakeLabelToken-safeSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_30(bool) = x >= y
TMP_31(None) = SOLIDITY_CALL assert(bool)(TMP_30)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_32(uint256) = x - y
z(uint256) := TMP_32(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 2632.sol-AntiFakeLabelToken-setMigrateContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_newContractAddr == newContractAddr

IRs:
TMP_75(bool) = _newContractAddr == newContractAddr
CONDITION TMP_75"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newContractAddr = _newContractAddr

IRs:
newContractAddr(address) := _newContractAddr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
5->1;
}
// Function: 2632.sol-AntiFakeLabelToken-setTokenExchangeRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
_tokenExchangeRate == 0

IRs:
TMP_55(bool) = _tokenExchangeRate == 0
CONDITION TMP_55"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_tokenExchangeRate == tokenExchangeRate

IRs:
TMP_56(bool) = _tokenExchangeRate == tokenExchangeRate
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenExchangeRate = _tokenExchangeRate

IRs:
tokenExchangeRate(uint256) := _tokenExchangeRate(uint256)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
8->1;
}
// Function: 2632.sol-AntiFakeLabelToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Anti-Fake Label

IRs:
name(string) := Anti-Fake Label(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = AFL

IRs:
symbol(string) := AFL(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 2632.sol-AntiFakeLabelToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tokenRaised = 0

IRs:
tokenRaised(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
tokenMigrated = 0

IRs:
tokenMigrated(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenExchangeRate = 3500

IRs:
tokenExchangeRate(uint256) := 3500(uint256)"];
}
// Function: 2632.sol-AntiFakeLabelToken-startFunding(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
isFunding

IRs:
CONDITION isFunding"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_fundingStartBlock >= _fundingStopBlock

IRs:
TMP_70(bool) = _fundingStartBlock >= _fundingStopBlock
CONDITION TMP_70"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
block.number >= _fundingStartBlock

IRs:
TMP_71(bool) = block.number >= _fundingStartBlock
CONDITION TMP_71"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
fundingStartBlock = _fundingStartBlock

IRs:
fundingStartBlock(uint256) := _fundingStartBlock(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
fundingStopBlock = _fundingStopBlock

IRs:
fundingStopBlock(uint256) := _fundingStopBlock(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isFunding = true

IRs:
isFunding(bool) := True(bool)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
13->1;
}
// Function: 2632.sol-AntiFakeLabelToken-stopFunding()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
! isFunding

IRs:
TMP_73 = UnaryType.BANG isFunding 
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isFunding = false

IRs:
isFunding(bool) := False(bool)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
5->1;
}
// Function: 2632.sol-AntiFakeLabelToken-transfer(address,uint256)
digraph{
}
// Function: 2632.sol-AntiFakeLabelToken-transferETH()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
this.balance == 0

IRs:
REF_34(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_88(bool) = REF_34 == 0
CONDITION TMP_88"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! ethFundDeposit.send(this.balance)

IRs:
REF_36(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_89 = SEND dest:ethFundDeposit value:REF_36
TMP_90 = UnaryType.BANG TMP_89 
CONDITION TMP_90"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, AntiFakeLabelToken.isOwner()()"];
7->1;
}
// Function: 2632.sol-AntiFakeLabelToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 2632.sol-IMigrationContract-migrate(address,uint256)
digraph{
}
// Function: 2632.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_0(uint256) = x + y
z(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_1(bool) = z >= x
TMP_2(bool) = z >= y
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 2632.sol-SafeMath-safeMult(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_8(uint256) = x * y
z(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_9(bool) = x == 0
TMP_10(uint256) = z / x
TMP_11(bool) = TMP_10 == y
TMP_12(bool) = TMP_9 || TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 2632.sol-SafeMath-safeSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_5(bool) = x >= y
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_7(uint256) = x - y
z(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 2632.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 2632.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2632.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 2632.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_14(bool) = REF_0 >= _value
TMP_15(bool) = _value > 0
TMP_16(bool) = TMP_14 && TMP_15
CONDITION TMP_16"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2632.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_18(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_19(bool) = REF_5 >= _value
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(bool) = _value > 0
TMP_22(bool) = TMP_20 && TMP_21
CONDITION TMP_22"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2632.sol-Token-allowance(address,address)
digraph{
}
// Function: 2632.sol-Token-approve(address,uint256)
digraph{
}
// Function: 2632.sol-Token-balanceOf(address)
digraph{
}
// Function: 2632.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 2632.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
