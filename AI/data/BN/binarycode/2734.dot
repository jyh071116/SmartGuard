digraph G {
// Function: 2734.sol-DivMultisigHackable-Encrypt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Multisigs[nmbr].owner == msg.sender)

IRs:
REF_25(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_26(address) -> REF_25.owner
TMP_31(bool) = REF_26 == msg.sender
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Multisigs[nmbr].encryption += msg.value

IRs:
REF_27(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_28(uint256) -> REF_27.encryption
REF_28(-> Multisigs) = REF_28 + msg.value"];
}
// Function: 2734.sol-DivMultisigHackable-Expand()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethtosend = this.balance / 100

IRs:
REF_33(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_51([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7ff173c63a30>]) = REF_33 / 100
ethtosend(uint256) := TMP_51([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7ff173c63a30>])"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(ethtosend)

IRs:
Transfer dest:owner value:ethtosend"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyp3d(this.balance)

IRs:
REF_35(uint256) = SOLIDITY_CALL balance(address)(this)
INTERNAL_CALL, DivMultisigHackable.buyp3d(uint256)(REF_35)"];
}
// Function: 2734.sol-DivMultisigHackable-HackDivs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
div = harvestabledivs()

IRs:
TMP_33(uint256) = INTERNAL_CALL, DivMultisigHackable.harvestabledivs()()
div(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value >= 1000000000000000)

IRs:
TMP_34(bool) = msg.value >= 1000000000000000
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(div > 0)

IRs:
TMP_36(bool) = div > 0
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nexId = 0

IRs:
nexId(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
nexId < totalsigs

IRs:
TMP_38(bool) = nexId < totalsigs
CONDITION TMP_38"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
Multisigs[nexId].owner == msg.sender

IRs:
REF_29(DivMultisigHackable.HackableSignature) -> Multisigs[nexId]
REF_30(address) -> REF_29.owner
TMP_39(bool) = REF_30 == msg.sender
CONDITION TMP_39"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
count ++

IRs:
TMP_40(uint256) := count(uint256)
count(uint256) = count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
nexId ++

IRs:
TMP_41(uint256) := nexId(uint256)
nexId(uint256) = nexId + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(count > totalsigs / 2)

IRs:
TMP_42(uint256) = totalsigs / 2
TMP_43(bool) = count > TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
claimdivs()

IRs:
INTERNAL_CALL, DivMultisigHackable.claimdivs()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ethtosend = div / 100

IRs:
TMP_46(uint256) = div / 100
ethtosend(uint256) := TMP_46(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
owner.transfer(ethtosend)

IRs:
Transfer dest:owner value:ethtosend"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ethtosend = ethtosend * 99

IRs:
TMP_48(uint256) = ethtosend * 99
ethtosend(uint256) := TMP_48(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
msg.sender.transfer(ethtosend)

IRs:
Transfer dest:msg.sender value:ethtosend"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onHarvest(msg.sender,ethtosend)

IRs:
Emit onHarvest(msg.sender,ethtosend)"];
}
// Function: 2734.sol-DivMultisigHackable-Hacksig(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(lasthack[msg.sender] < block.number)

IRs:
REF_11(uint256) -> lasthack[msg.sender]
TMP_21(bool) = REF_11 < block.number
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nmbr < totalsigs)

IRs:
TMP_23(bool) = nmbr < totalsigs
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(Multisigs[nmbr].owner != msg.sender)

IRs:
REF_12(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_13(address) -> REF_12.owner
TMP_25(bool) = REF_13 != msg.sender
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value >= Multisigs[nmbr].hackingcost + Multisigs[nmbr].encryption)

IRs:
REF_14(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_15(uint256) -> REF_14.hackingcost
REF_16(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_17(uint256) -> REF_16.encryption
TMP_27(uint256) = REF_15 + REF_17
TMP_28(bool) = msg.value >= TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Multisigs[nmbr].owner = msg.sender

IRs:
REF_18(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_19(address) -> REF_18.owner
REF_19(address) (->Multisigs) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Multisigs[nmbr].hackingcost ++

IRs:
REF_20(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_21(uint256) -> REF_20.hackingcost
TMP_30(uint256) := REF_21(uint256)
REF_21(-> Multisigs) = REF_21 + 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Multisigs[nmbr].encryption = 0

IRs:
REF_22(DivMultisigHackable.HackableSignature) -> Multisigs[nmbr]
REF_23(uint256) -> REF_22.encryption
REF_23(uint256) (->Multisigs) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lasthack[msg.sender] = block.number

IRs:
REF_24(uint256) -> lasthack[msg.sender]
REF_24(uint256) (->lasthack) := block.number(uint256)"];
}
// Function: 2734.sol-DivMultisigHackable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_8(bool) = msg.sender == newOwner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_11 = CONVERT 0 to address
newOwner(address) := TMP_11(address)"];
}
// Function: 2734.sol-DivMultisigHackable-amountofp3d()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(P3Dcontract_.balanceOf(address(this)))

IRs:
TMP_19 = CONVERT this to address
TMP_20(uint256) = HIGH_LEVEL_CALL, dest:P3Dcontract_(HourglassInterface), function:balanceOf, arguments:['TMP_19']  
RETURN TMP_20"];
}
// Function: 2734.sol-DivMultisigHackable-buyp3d(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
P3Dcontract_.buy.value(amt)(this)

IRs:
TMP_13(uint256) = HIGH_LEVEL_CALL, dest:P3Dcontract_(HourglassInterface), function:buy, arguments:['this'] value:amt "];
}
// Function: 2734.sol-DivMultisigHackable-claimdivs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
P3Dcontract_.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:P3Dcontract_(HourglassInterface), function:withdraw, arguments:[]  "];
}
// Function: 2734.sol-DivMultisigHackable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220

IRs:
owner(address) := 63132959354516410259346061757283036995022197280(address)"];
}
// Function: 2734.sol-DivMultisigHackable-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nexId = 0

IRs:
nexId(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
nexId < amtsigs

IRs:
TMP_15(bool) = nexId < amtsigs
CONDITION TMP_15"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Multisigs[nexId].owner = msg.sender

IRs:
REF_3(DivMultisigHackable.HackableSignature) -> Multisigs[nexId]
REF_4(address) -> REF_3.owner
REF_4(address) (->Multisigs) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Multisigs[nexId].hackingcost = 1

IRs:
REF_5(DivMultisigHackable.HackableSignature) -> Multisigs[nexId]
REF_6(uint256) -> REF_5.hackingcost
REF_6(uint256) (->Multisigs) := 1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Multisigs[nexId].encryption = 1

IRs:
REF_7(DivMultisigHackable.HackableSignature) -> Multisigs[nexId]
REF_8(uint256) -> REF_7.encryption
REF_8(uint256) (->Multisigs) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nexId ++

IRs:
TMP_16(uint256) := nexId(uint256)
nexId(uint256) = nexId + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalsigs = amtsigs

IRs:
totalsigs(uint256) := amtsigs(uint256)"];
}
// Function: 2734.sol-DivMultisigHackable-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2734.sol-DivMultisigHackable-harvestabledivs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(P3Dcontract_.dividendsOf(address(this)))

IRs:
TMP_17 = CONVERT this to address
TMP_18(uint256) = HIGH_LEVEL_CALL, dest:P3Dcontract_(HourglassInterface), function:dividendsOf, arguments:['TMP_17']  
RETURN TMP_18"];
}
// Function: 2734.sol-DivMultisigHackable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_55(bool) = msg.sender == owner
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2734.sol-DivMultisigHackable-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe)

IRs:
TMP_54 = CONVERT 1024571475019602228541062862604156821122634084286 to HourglassInterface
P3Dcontract_(HourglassInterface) := TMP_54(HourglassInterface)"];
}
// Function: 2734.sol-DivMultisigHackable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
contrp3d = 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe

IRs:
contrp3d(address) := 1024571475019602228541062862604156821122634084286(address)"];
}
// Function: 2734.sol-DivMultisigHackable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 2734.sol-HourglassInterface-balanceOf(address)
digraph{
}
// Function: 2734.sol-HourglassInterface-buy(address)
digraph{
}
// Function: 2734.sol-HourglassInterface-dividendsOf(address)
digraph{
}
// Function: 2734.sol-HourglassInterface-exit()
digraph{
}
// Function: 2734.sol-HourglassInterface-fallback()
digraph{
}
// Function: 2734.sol-HourglassInterface-reinvest()
digraph{
}
// Function: 2734.sol-HourglassInterface-sell(uint256)
digraph{
}
// Function: 2734.sol-HourglassInterface-stakingRequirement()
digraph{
}
// Function: 2734.sol-HourglassInterface-transfer(address,uint256)
digraph{
}
// Function: 2734.sol-HourglassInterface-withdraw()
digraph{
}
// Function: 2734.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_1(bool) = msg.sender == newOwner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_4 = CONVERT 0 to address
newOwner(address) := TMP_4(address)"];
}
// Function: 2734.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220

IRs:
owner(address) := 63132959354516410259346061757283036995022197280(address)"];
}
// Function: 2734.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2734.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
}
