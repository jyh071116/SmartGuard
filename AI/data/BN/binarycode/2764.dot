digraph G {
// Function: 2764.sol-DiviesInterface-deposit()
digraph{
}
// Function: 2764.sol-F3DGoQuick-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only team just can activate)

IRs:
TMP_490(bool) = msg.sender == admin
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_492(bool) = activated_ == False
TMP_493(None) = SOLIDITY_CALL require(bool,string)(TMP_492,fomo3d already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now

IRs:
REF_861(F3Ddatasets.Round) -> round_[1]
REF_862(uint256) -> REF_861.strt
REF_862(uint256) (->round_) := now(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndGap_

IRs:
REF_863(F3Ddatasets.Round) -> round_[1]
REF_864(uint256) -> REF_863.end
TMP_494(uint256) = now + rndInit_
TMP_495(uint256) = TMP_494 + rndGap_
REF_864(uint256) (->round_) := TMP_495(uint256)"];
}
// Function: 2764.sol-F3DGoQuick-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_408(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_409(bytes32) = SOLIDITY_CALL keccak256()(TMP_408)
TMP_410 = CONVERT TMP_409 to uint256
TMP_411(uint256) = TMP_410 / now
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_407', 'TMP_411'] 
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_412', 'block.gaslimit'] 
TMP_414(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_415(bytes32) = SOLIDITY_CALL keccak256()(TMP_414)
TMP_416 = CONVERT TMP_415 to uint256
TMP_417(uint256) = TMP_416 / now
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_413', 'TMP_417'] 
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_418', 'block.number'] 
TMP_420(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_419)
TMP_421(bytes32) = SOLIDITY_CALL keccak256()(TMP_420)
TMP_422 = CONVERT TMP_421 to uint256
seed(uint256) := TMP_422(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_423(uint256) = seed / 1000
TMP_424(uint256) = TMP_423 * 1000
TMP_425(uint256) = seed - TMP_424
TMP_426(bool) = TMP_425 < airDropTracker_
CONDITION TMP_426"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2764.sol-F3DGoQuick-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_ = manageRoundAndPlayer(_pID,_eventData_)

IRs:
TMP_171(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.manageRoundAndPlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_171(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now <= round_[rID_].strt + rndGap_

IRs:
REF_330(F3Ddatasets.Round) -> round_[rID_]
REF_331(uint256) -> REF_330.strt
TMP_172(uint256) = REF_331 + rndGap_
TMP_173(bool) = now <= TMP_172
CONDITION TMP_173"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 2000000000000000000000000000000

IRs:
REF_332(uint256) -> _eventData_.compressedData
REF_333(uint256) -> _eventData_.compressedData
TMP_174(uint256) = REF_333 + 2000000000000000000000000000000
REF_332(uint256) (->_eventData_) := TMP_174(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
icoPhaseCore(_pID,msg.value,_team,_affID,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.icoPhaseCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,msg.value,_team,_affID,_eventData_)"];
4->7;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1000000000000000000000000000000

IRs:
REF_334(uint256) -> _eventData_.compressedData
REF_335(uint256) -> _eventData_.compressedData
TMP_176(uint256) = REF_335 + 1000000000000000000000000000000
REF_334(uint256) (->_eventData_) := TMP_176(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
core(_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.core(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,msg.value,_affID,_team,_eventData_)"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 2764.sol-F3DGoQuick-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_23(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, F3DGoQuick.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F3DGoQuick.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2764.sol-F3DGoQuick-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, F3DGoQuick.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F3DGoQuick.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 2764.sol-F3DGoQuick-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_34(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_36(bool) = _affCode == REF_36
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_38(bool) = _affID != REF_41
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, F3DGoQuick.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F3DGoQuick.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2764.sol-F3DGoQuick-calcAverageICOPhaseKeyPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((round_[_rID].ico).mul(1000000000000000000) / (round_[_rID].ico).keys())

IRs:
REF_514(F3Ddatasets.Round) -> round_[_rID]
REF_515(uint256) -> REF_514.ico
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_515', '1000000000000000000'] 
REF_517(F3Ddatasets.Round) -> round_[_rID]
REF_518(uint256) -> REF_517.ico
TMP_279(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['REF_518'] 
TMP_280(uint256) = TMP_278 / TMP_279
RETURN TMP_280"];
}
// Function: 2764.sol-F3DGoQuick-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && round_[_rID].eth != 0 && _now <= round_[_rID].end

IRs:
REF_534(F3Ddatasets.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.strt
TMP_289(uint256) = REF_535 + rndGap_
TMP_290(bool) = _now > TMP_289
REF_536(F3Ddatasets.Round) -> round_[_rID]
REF_537(uint256) -> REF_536.eth
TMP_291(bool) = REF_537 != 0
TMP_292(bool) = TMP_290 && TMP_291
REF_538(F3Ddatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.end
TMP_293(bool) = _now <= REF_539
TMP_294(bool) = TMP_292 && TMP_293
CONDITION TMP_294"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_540(F3Ddatasets.Round) -> round_[_rID]
REF_541(uint256) -> REF_540.eth
TMP_295(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keysRec(uint256,uint256), arguments:['REF_541', '_eth'] 
RETURN TMP_295"];
4[label="Node Type: IF 4

EXPRESSION:
_now <= round_[_rID].end

IRs:
REF_543(F3Ddatasets.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.end
TMP_296(bool) = _now <= REF_544
CONDITION TMP_296"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].ico).keysRec(_eth))

IRs:
REF_545(F3Ddatasets.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.ico
TMP_297(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keysRec(uint256,uint256), arguments:['REF_546', '_eth'] 
RETURN TMP_297"];
6[label="Node Type: RETURN 6

EXPRESSION:
((_eth).keys())

IRs:
TMP_298(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['_eth'] 
RETURN TMP_298"];
}
// Function: 2764.sol-F3DGoQuick-calcPlayerICOPhaseKeys(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
round_[_rID].icoAvg != 0 || round_[_rID].ico == 0

IRs:
REF_520(F3Ddatasets.Round) -> round_[_rID]
REF_521(uint256) -> REF_520.icoAvg
TMP_281(bool) = REF_521 != 0
REF_522(F3Ddatasets.Round) -> round_[_rID]
REF_523(uint256) -> REF_522.ico
TMP_282(bool) = REF_523 == 0
TMP_283(bool) = TMP_281 || TMP_282
CONDITION TMP_283"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(((plyrRnds_[_pID][_rID].ico).mul(1000000000000000000)) / round_[_rID].icoAvg)

IRs:
REF_524(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_525(F3Ddatasets.PlayerRounds) -> REF_524[_rID]
REF_526(uint256) -> REF_525.ico
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_526', '1000000000000000000'] 
REF_528(F3Ddatasets.Round) -> round_[_rID]
REF_529(uint256) -> REF_528.icoAvg
TMP_285(uint256) = TMP_284 / REF_529
RETURN TMP_285"];
3[label="Node Type: RETURN 3

EXPRESSION:
(((plyrRnds_[_pID][_rID].ico).mul(1000000000000000000)) / calcAverageICOPhaseKeyPrice(_rID))

IRs:
REF_530(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_531(F3Ddatasets.PlayerRounds) -> REF_530[_rID]
REF_532(uint256) -> REF_531.ico
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_532', '1000000000000000000'] 
TMP_287(uint256) = INTERNAL_CALL, F3DGoQuick.calcAverageICOPhaseKeyPrice(uint256)(_rID)
TMP_288(uint256) = TMP_286 / TMP_287
RETURN TMP_288"];
}
// Function: 2764.sol-F3DGoQuick-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rIDlast].ico == 0

IRs:
REF_479(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_480(F3Ddatasets.PlayerRounds) -> REF_479[_rIDlast]
REF_481(uint256) -> REF_480.ico
TMP_259(bool) = REF_481 == 0
CONDITION TMP_259"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_482(F3Ddatasets.Round) -> round_[_rIDlast]
REF_483(uint256) -> REF_482.mask
REF_485(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_486(F3Ddatasets.PlayerRounds) -> REF_485[_rIDlast]
REF_487(uint256) -> REF_486.keys
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_483', 'REF_487'] 
TMP_261(uint256) = TMP_260 / 1000000000000000000
REF_489(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_490(F3Ddatasets.PlayerRounds) -> REF_489[_rIDlast]
REF_491(uint256) -> REF_490.mask
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_261', 'REF_491'] 
RETURN TMP_262"];
3[label="Node Type: IF 3

EXPRESSION:
now > round_[_rIDlast].strt + rndGap_ && round_[_rIDlast].eth == 0

IRs:
REF_492(F3Ddatasets.Round) -> round_[_rIDlast]
REF_493(uint256) -> REF_492.strt
TMP_263(uint256) = REF_493 + rndGap_
TMP_264(bool) = now > TMP_263
REF_494(F3Ddatasets.Round) -> round_[_rIDlast]
REF_495(uint256) -> REF_494.eth
TMP_265(bool) = REF_495 == 0
TMP_266(bool) = TMP_264 && TMP_265
CONDITION TMP_266"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((((((round_[_rIDlast].icoGen).mul(1000000000000000000)) / (round_[_rIDlast].ico).keys()).mul(calcPlayerICOPhaseKeys(_pID,_rIDlast))) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_496(F3Ddatasets.Round) -> round_[_rIDlast]
REF_497(uint256) -> REF_496.icoGen
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_497', '1000000000000000000'] 
REF_499(F3Ddatasets.Round) -> round_[_rIDlast]
REF_500(uint256) -> REF_499.ico
TMP_268(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['REF_500'] 
TMP_269(uint256) = TMP_267 / TMP_268
TMP_270(uint256) = INTERNAL_CALL, F3DGoQuick.calcPlayerICOPhaseKeys(uint256,uint256)(_pID,_rIDlast)
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_269', 'TMP_270'] 
TMP_272(uint256) = TMP_271 / 1000000000000000000
REF_504(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_505(F3Ddatasets.PlayerRounds) -> REF_504[_rIDlast]
REF_506(uint256) -> REF_505.mask
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_272', 'REF_506'] 
RETURN TMP_273"];
5[label="Node Type: RETURN 5

EXPRESSION:
((((round_[_rIDlast].mask).mul(calcPlayerICOPhaseKeys(_pID,_rIDlast))) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_507(F3Ddatasets.Round) -> round_[_rIDlast]
REF_508(uint256) -> REF_507.mask
TMP_274(uint256) = INTERNAL_CALL, F3DGoQuick.calcPlayerICOPhaseKeys(uint256,uint256)(_pID,_rIDlast)
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_508', 'TMP_274'] 
TMP_276(uint256) = TMP_275 / 1000000000000000000
REF_511(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_512(F3Ddatasets.PlayerRounds) -> REF_511[_rIDlast]
REF_513(uint256) -> REF_512.mask
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_276', 'REF_513'] 
RETURN TMP_277"];
}
// Function: 2764.sol-F3DGoQuick-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 2764.sol-F3DGoQuick-core(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
round_[_rID].eth == 0 && round_[_rID].ico > 0

IRs:
REF_400(F3Ddatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.eth
TMP_212(bool) = REF_401 == 0
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.ico
TMP_213(bool) = REF_403 > 0
TMP_214(bool) = TMP_212 && TMP_213
CONDITION TMP_214"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
roundClaimICOKeys(_rID)

IRs:
INTERNAL_CALL, F3DGoQuick.roundClaimICOKeys(uint256)(_rID)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0 && plyrRnds_[_pID][_rID].ico > 0

IRs:
REF_404(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_405(F3Ddatasets.PlayerRounds) -> REF_404[_rID]
REF_406(uint256) -> REF_405.keys
TMP_216(bool) = REF_406 == 0
REF_407(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_408(F3Ddatasets.PlayerRounds) -> REF_407[_rID]
REF_409(uint256) -> REF_408.ico
TMP_217(bool) = REF_409 > 0
TMP_218(bool) = TMP_216 && TMP_217
CONDITION TMP_218"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrRnds_[_pID][_rID].keys = calcPlayerICOPhaseKeys(_pID,_rID)

IRs:
REF_410(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_411(F3Ddatasets.PlayerRounds) -> REF_410[_rID]
REF_412(uint256) -> REF_411.keys
TMP_219(uint256) = INTERNAL_CALL, F3DGoQuick.calcPlayerICOPhaseKeys(uint256,uint256)(_pID,_rID)
REF_412(uint256) (->plyrRnds_) := TMP_219(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrRnds_[_pID][_rID].ico = 0

IRs:
REF_413(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_414(F3Ddatasets.PlayerRounds) -> REF_413[_rID]
REF_415(uint256) -> REF_414.ico
REF_415(uint256) (->plyrRnds_) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_416(F3Ddatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.eth
TMP_220(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keysRec(uint256,uint256), arguments:['REF_417', '_eth'] 
_keys(uint256) := TMP_220(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_221(bool) = _keys >= 1000000000000000000
CONDITION TMP_221"];
10->11[label="True"];
10->19[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, F3DGoQuick.updateTimer(uint256,uint256)(_keys,_rID)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_419(F3Ddatasets.Round) -> round_[_rID]
REF_420(uint256) -> REF_419.plyr
TMP_223(bool) = REF_420 != _pID
CONDITION TMP_223"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_421(F3Ddatasets.Round) -> round_[_rID]
REF_422(uint256) -> REF_421.plyr
REF_422(uint256) (->round_) := _pID(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_423(F3Ddatasets.Round) -> round_[_rID]
REF_424(uint256) -> REF_423.team
TMP_224(bool) = REF_424 != _team
CONDITION TMP_224"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_425(F3Ddatasets.Round) -> round_[_rID]
REF_426(uint256) -> REF_425.team
REF_426(uint256) (->round_) := _team(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_427(uint256) -> _eventData_.compressedData
REF_428(uint256) -> _eventData_.compressedData
TMP_225(uint256) = REF_428 + 100
REF_427(uint256) (->_eventData_) := TMP_225(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_226(bool) = _eth >= 100000000000000000
CONDITION TMP_226"];
20->21[label="True"];
20->46[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_227(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
airdrop() == true

IRs:
TMP_228(bool) = INTERNAL_CALL, F3DGoQuick.airdrop()()
TMP_229(bool) = TMP_228 == True
CONDITION TMP_229"];
22->23[label="True"];
22->45[label="False"];
23[label="Node Type: NEW VARIABLE 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_230(bool) = _eth >= 10000000000000000000
CONDITION TMP_230"];
24->25[label="True"];
24->29[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_232(uint256) = TMP_231 / 100
_prize(uint256) := TMP_232(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_430(F3Ddatasets.Player) -> plyr_[_pID]
REF_431(uint256) -> REF_430.win
REF_432(F3Ddatasets.Player) -> plyr_[_pID]
REF_433(uint256) -> REF_432.win
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_433', '_prize'] 
REF_431(uint256) (->plyr_) := TMP_233(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_234(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_436(uint256) -> _eventData_.compressedData
REF_436(-> _eventData_) = REF_436 + 300000000000000000000000000000000"];
28->41;
29[label="Node Type: IF 29

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_235(bool) = _eth >= 1000000000000000000
TMP_236(bool) = _eth < 10000000000000000000
TMP_237(bool) = TMP_235 && TMP_236
CONDITION TMP_237"];
29->30[label="True"];
29->34[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_239(uint256) = TMP_238 / 100
_prize(uint256) := TMP_239(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_438(F3Ddatasets.Player) -> plyr_[_pID]
REF_439(uint256) -> REF_438.win
REF_440(F3Ddatasets.Player) -> plyr_[_pID]
REF_441(uint256) -> REF_440.win
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_441', '_prize'] 
REF_439(uint256) (->plyr_) := TMP_240(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_241(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_444(uint256) -> _eventData_.compressedData
REF_444(-> _eventData_) = REF_444 + 200000000000000000000000000000000"];
33->40;
34[label="Node Type: IF 34

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_242(bool) = _eth >= 100000000000000000
TMP_243(bool) = _eth < 1000000000000000000
TMP_244(bool) = TMP_242 && TMP_243
CONDITION TMP_244"];
34->35[label="True"];
34->39[label="False"];
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_245(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_246(uint256) = TMP_245 / 100
_prize(uint256) := TMP_246(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_446(F3Ddatasets.Player) -> plyr_[_pID]
REF_447(uint256) -> REF_446.win
REF_448(F3Ddatasets.Player) -> plyr_[_pID]
REF_449(uint256) -> REF_448.win
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_449', '_prize'] 
REF_447(uint256) (->plyr_) := TMP_247(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_248(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 100000000000000000000000000000000

IRs:
REF_452(uint256) -> _eventData_.compressedData
REF_452(-> _eventData_) = REF_452 + 100000000000000000000000000000000"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_453(uint256) -> _eventData_.compressedData
REF_453(-> _eventData_) = REF_453 + 10000000000000000000000000000000"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_454(uint256) -> _eventData_.compressedData
TMP_249(uint256) = _prize * 1000000000000000000000000000000000
REF_454(-> _eventData_) = REF_454 + TMP_249"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: END_IF 46
"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_455(uint256) -> _eventData_.compressedData
REF_456(uint256) -> _eventData_.compressedData
TMP_250(uint256) = airDropTracker_ * 1000
TMP_251(uint256) = REF_456 + TMP_250
REF_455(uint256) (->_eventData_) := TMP_251(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_457(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_458(F3Ddatasets.PlayerRounds) -> REF_457[_rID]
REF_459(uint256) -> REF_458.keys
REF_461(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_462(F3Ddatasets.PlayerRounds) -> REF_461[_rID]
REF_463(uint256) -> REF_462.keys
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_463'] 
REF_459(uint256) (->plyrRnds_) := TMP_252(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_464(F3Ddatasets.Round) -> round_[_rID]
REF_465(uint256) -> REF_464.keys
REF_467(F3Ddatasets.Round) -> round_[_rID]
REF_468(uint256) -> REF_467.keys
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_468'] 
REF_465(uint256) (->round_) := TMP_253(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_469(F3Ddatasets.Round) -> round_[_rID]
REF_470(uint256) -> REF_469.eth
REF_472(F3Ddatasets.Round) -> round_[_rID]
REF_473(uint256) -> REF_472.eth
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_473'] 
REF_470(uint256) (->round_) := TMP_254(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_474(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_475(uint256) -> REF_474[_team]
REF_477(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_478(uint256) -> REF_477[_team]
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_478'] 
REF_475(uint256) (->rndTmEth_) := TMP_255(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_256(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_256(F3Ddatasets.EventReturns)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_257(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_257(F3Ddatasets.EventReturns)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
endTx(_rID,_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.endTx(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_team,_eth,_keys,_eventData_)"];
}
// Function: 2764.sol-F3DGoQuick-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_591(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_591(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_325(bool) = _pID == 0
CONDITION TMP_325"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_326(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_326(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_327(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_327(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_328(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_328(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_595(uint256) -> pIDxAddr_[msg.sender]
REF_595(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_596(F3Ddatasets.Player) -> plyr_[_pID]
REF_597(address) -> REF_596.addr
REF_597(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_329(bool) = _name != 
CONDITION TMP_329"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_598(uint256) -> pIDxName_[_name]
REF_598(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_599(F3Ddatasets.Player) -> plyr_[_pID]
REF_600(bytes32) -> REF_599.name
REF_600(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_601(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_602(bool) -> REF_601[_name]
REF_602(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_330(bool) = _laff != 0
TMP_331(bool) = _laff != _pID
TMP_332(bool) = TMP_330 && TMP_331
CONDITION TMP_332"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_603(F3Ddatasets.Player) -> plyr_[_pID]
REF_604(uint256) -> REF_603.laff
REF_604(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_605(uint256) -> _eventData_.compressedData
REF_606(uint256) -> _eventData_.compressedData
TMP_333(uint256) = REF_606 + 1
REF_605(uint256) (->_eventData_) := TMP_333(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2764.sol-F3DGoQuick-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_427(uint256) = _eth / 50
_com(uint256) := TMP_427(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(coin_base).call.value(_com)()

IRs:
TMP_428 = CONVERT coin_base to address
TMP_430(bool) = LOW_LEVEL_CALL, dest:TMP_428, function:call, arguments:[] value:_com 
TMP_431 = UnaryType.BANG TMP_430 
CONDITION TMP_431"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_long = _eth / 100

IRs:
TMP_432(uint256) = _eth / 100
_long(uint256) := TMP_432(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID + 1].pot += _long

IRs:
TMP_433(uint256) = _rID + 1
REF_755(F3Ddatasets.Round) -> round_[TMP_433]
REF_756(uint256) -> REF_755.pot
REF_756(-> round_) = REF_756 + _long"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_434(uint256) = _eth / 10
_aff(uint256) := TMP_434(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_435(bool) = _affID != _pID
REF_757(F3Ddatasets.Player) -> plyr_[_affID]
REF_758(bytes32) -> REF_757.name
TMP_436(bool) = REF_758 != 
TMP_437(bool) = TMP_435 && TMP_436
CONDITION TMP_437"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_759(F3Ddatasets.Player) -> plyr_[_affID]
REF_760(uint256) -> REF_759.aff
REF_762(F3Ddatasets.Player) -> plyr_[_affID]
REF_763(uint256) -> REF_762.aff
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_763'] 
REF_760(uint256) (->plyr_) := TMP_438(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_765(F3Ddatasets.Player) -> plyr_[_affID]
REF_766(address) -> REF_765.addr
REF_767(F3Ddatasets.Player) -> plyr_[_affID]
REF_768(bytes32) -> REF_767.name
Emit onAffiliatePayout(_affID,REF_766,REF_768,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_771(F3Ddatasets.TeamFee) -> fees_[_team]
REF_772(uint256) -> REF_771.p3d
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_772'] 
TMP_441(uint256) = TMP_440 / 100
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_441'] 
_p3d(uint256) := TMP_442(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_443(bool) = _p3d > 0
CONDITION TMP_443"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
coin_base.transfer(_p3d)

IRs:
Transfer dest:coin_base value:_p3d"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_774(uint256) -> _eventData_.P3DAmount
REF_776(uint256) -> _eventData_.P3DAmount
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_776'] 
REF_774(uint256) (->_eventData_) := TMP_445(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2764.sol-F3DGoQuick-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_784(F3Ddatasets.TeamFee) -> fees_[_team]
REF_785(uint256) -> REF_784.gen
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_785'] 
TMP_450(uint256) = TMP_449 / 100
_gen(uint256) := TMP_450(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_451(uint256) = _eth / 100
_air(uint256) := TMP_451(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_452(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_452(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_454(uint256) = TMP_453 / 100
REF_791(F3Ddatasets.TeamFee) -> fees_[_team]
REF_792(uint256) -> REF_791.p3d
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_792'] 
TMP_456(uint256) = TMP_455 / 100
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_454', 'TMP_456'] 
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_457'] 
_eth(uint256) := TMP_458(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_459(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_460(uint256) = INTERNAL_CALL, F3DGoQuick.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_460(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_461(bool) = _dust > 0
CONDITION TMP_461"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_462(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_795(F3Ddatasets.Round) -> round_[_rID]
REF_796(uint256) -> REF_795.pot
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_799(F3Ddatasets.Round) -> round_[_rID]
REF_800(uint256) -> REF_799.pot
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_463', 'REF_800'] 
REF_796(uint256) (->round_) := TMP_464(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_801(uint256) -> _eventData_.genAmount
REF_803(uint256) -> _eventData_.genAmount
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_803'] 
REF_801(uint256) (->_eventData_) := TMP_465(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_804(uint256) -> _eventData_.potAmount
REF_804(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2764.sol-F3DGoQuick-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
round_[_rID].eth == 0 && round_[_rID].ico > 0

IRs:
REF_629(F3Ddatasets.Round) -> round_[_rID]
REF_630(uint256) -> REF_629.eth
TMP_348(bool) = REF_630 == 0
REF_631(F3Ddatasets.Round) -> round_[_rID]
REF_632(uint256) -> REF_631.ico
TMP_349(bool) = REF_632 > 0
TMP_350(bool) = TMP_348 && TMP_349
CONDITION TMP_350"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
roundClaimICOKeys(_rID)

IRs:
INTERNAL_CALL, F3DGoQuick.roundClaimICOKeys(uint256)(_rID)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_633(F3Ddatasets.Round) -> round_[_rID]
REF_634(uint256) -> REF_633.plyr
_winPID(uint256) := REF_634(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_635(F3Ddatasets.Round) -> round_[_rID]
REF_636(uint256) -> REF_635.team
_winTID(uint256) := REF_636(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_637(F3Ddatasets.Round) -> round_[_rID]
REF_638(uint256) -> REF_637.pot
_pot(uint256) := REF_638(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_353(uint256) = TMP_352 / 100
_win(uint256) := TMP_353(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_354(uint256) = _pot / 50
_com(uint256) := TMP_354(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_641(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_642(uint256) -> REF_641.gen
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_642'] 
TMP_356(uint256) = TMP_355 / 100
_gen(uint256) := TMP_356(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_644(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_645(uint256) -> REF_644.p3d
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_645'] 
TMP_358(uint256) = TMP_357 / 100
_p3d(uint256) := TMP_358(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_359', '_com'] 
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_360', '_gen'] 
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_361', '_p3d'] 
_res(uint256) := TMP_362(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_651(F3Ddatasets.Round) -> round_[_rID]
REF_652(uint256) -> REF_651.keys
TMP_364(uint256) = TMP_363 / REF_652
_ppt(uint256) := TMP_364(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_655(F3Ddatasets.Round) -> round_[_rID]
REF_656(uint256) -> REF_655.keys
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_656'] 
TMP_366(uint256) = TMP_365 / 1000000000000000000
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_366'] 
_dust(uint256) := TMP_367(uint256)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
_dust > 0

IRs:
TMP_368(bool) = _dust > 0
CONDITION TMP_368"];
15->16[label="True"];
15->18[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_369(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_370(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_659(F3Ddatasets.Player) -> plyr_[_winPID]
REF_660(uint256) -> REF_659.win
REF_662(F3Ddatasets.Player) -> plyr_[_winPID]
REF_663(uint256) -> REF_662.win
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_663'] 
REF_660(uint256) (->plyr_) := TMP_371(uint256)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
! address(coin_base).call.value(_com)()

IRs:
TMP_372 = CONVERT coin_base to address
TMP_374(bool) = LOW_LEVEL_CALL, dest:TMP_372, function:call, arguments:[] value:_com 
TMP_375 = UnaryType.BANG TMP_374 
CONDITION TMP_375"];
20->21[label="True"];
20->23[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_p3d = _p3d.add(_com)

IRs:
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_com'] 
_p3d(uint256) := TMP_376(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_667(F3Ddatasets.Round) -> round_[_rID]
REF_668(uint256) -> REF_667.mask
REF_670(F3Ddatasets.Round) -> round_[_rID]
REF_671(uint256) -> REF_670.mask
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_671'] 
REF_668(uint256) (->round_) := TMP_377(uint256)"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
_p3d > 0

IRs:
TMP_378(bool) = _p3d > 0
CONDITION TMP_378"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
coin_base.transfer(_p3d)

IRs:
Transfer dest:coin_base value:_p3d"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
round_[_rID + 1].pot += _res

IRs:
TMP_380(uint256) = _rID + 1
REF_673(F3Ddatasets.Round) -> round_[TMP_380]
REF_674(uint256) -> REF_673.pot
REF_674(-> round_) = REF_674 + _res"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_675(uint256) -> _eventData_.compressedData
REF_676(uint256) -> _eventData_.compressedData
REF_677(F3Ddatasets.Round) -> round_[_rID]
REF_678(uint256) -> REF_677.end
TMP_381(uint256) = REF_678 * 1000000
TMP_382(uint256) = REF_676 + TMP_381
REF_675(uint256) (->_eventData_) := TMP_382(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_679(uint256) -> _eventData_.compressedIDs
REF_680(uint256) -> _eventData_.compressedIDs
TMP_383(uint256) = _winPID * 100000000000000000000000000
TMP_384(uint256) = REF_680 + TMP_383
TMP_385(uint256) = _winTID * 100000000000000000
TMP_386(uint256) = TMP_384 + TMP_385
REF_679(uint256) (->_eventData_) := TMP_386(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_681(address) -> _eventData_.winnerAddr
REF_682(F3Ddatasets.Player) -> plyr_[_winPID]
REF_683(address) -> REF_682.addr
REF_681(address) (->_eventData_) := REF_683(address)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_684(bytes32) -> _eventData_.winnerName
REF_685(F3Ddatasets.Player) -> plyr_[_winPID]
REF_686(bytes32) -> REF_685.name
REF_684(bytes32) (->_eventData_) := REF_686(bytes32)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_687(uint256) -> _eventData_.amountWon
REF_687(uint256) (->_eventData_) := _win(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_688(uint256) -> _eventData_.genAmount
REF_688(uint256) (->_eventData_) := _gen(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_689(uint256) -> _eventData_.P3DAmount
REF_689(uint256) (->_eventData_) := _p3d(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_690(uint256) -> _eventData_.newPot
REF_690(uint256) (->_eventData_) := _res(uint256)"];
36->37;
37[label="Node Type: RETURN 37

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2764.sol-F3DGoQuick-endTx(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_845(uint256) -> _eventData_.compressedData
REF_846(uint256) -> _eventData_.compressedData
TMP_482(uint256) = now * 1000000000000000000
TMP_483(uint256) = REF_846 + TMP_482
TMP_484(uint256) = _team * 100000000000000000000000000000
TMP_485(uint256) = TMP_483 + TMP_484
REF_845(uint256) (->_eventData_) := TMP_485(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (_rID * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_847(uint256) -> _eventData_.compressedIDs
REF_848(uint256) -> _eventData_.compressedIDs
TMP_486(uint256) = REF_848 + _pID
TMP_487(uint256) = _rID * 10000000000000000000000000000000000000000000000000000
TMP_488(uint256) = TMP_486 + TMP_487
REF_847(uint256) (->_eventData_) := TMP_488(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_850(uint256) -> _eventData_.compressedData
REF_851(uint256) -> _eventData_.compressedIDs
REF_852(F3Ddatasets.Player) -> plyr_[_pID]
REF_853(bytes32) -> REF_852.name
REF_854(address) -> _eventData_.winnerAddr
REF_855(bytes32) -> _eventData_.winnerName
REF_856(uint256) -> _eventData_.amountWon
REF_857(uint256) -> _eventData_.newPot
REF_858(uint256) -> _eventData_.P3DAmount
REF_859(uint256) -> _eventData_.genAmount
REF_860(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_850,REF_851,REF_853,msg.sender,_eth,_keys,REF_854,REF_855,REF_856,REF_857,REF_858,REF_859,REF_860,airDropPot_)"];
}
// Function: 2764.sol-F3DGoQuick-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, F3DGoQuick.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, F3DGoQuick.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2764.sol-F3DGoQuick-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && round_[_rID].eth != 0 && _now <= round_[_rID].end

IRs:
REF_127(F3Ddatasets.Round) -> round_[_rID]
REF_128(uint256) -> REF_127.strt
TMP_101(uint256) = REF_128 + rndGap_
TMP_102(bool) = _now > TMP_101
REF_129(F3Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.eth
TMP_103(bool) = REF_130 != 0
TMP_104(bool) = TMP_102 && TMP_103
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_105(bool) = _now <= REF_132
TMP_106(bool) = TMP_104 && TMP_105
CONDITION TMP_106"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.keys
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_134', '1000000000000000000'] 
TMP_108(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.ethRec(uint256,uint256), arguments:['TMP_107', '1000000000000000000'] 
RETURN TMP_108"];
5[label="Node Type: IF 5

EXPRESSION:
_now <= round_[_rID].end

IRs:
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.end
TMP_109(bool) = _now <= REF_138
CONDITION TMP_109"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
(((round_[_rID].ico.keys()).add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.ico
TMP_110(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['REF_140'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_110', '1000000000000000000'] 
TMP_112(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.ethRec(uint256,uint256), arguments:['TMP_111', '1000000000000000000'] 
RETURN TMP_112"];
7[label="Node Type: RETURN 7

EXPRESSION:
(100000000000000)

IRs:
RETURN 100000000000000"];
}
// Function: 2764.sol-F3DGoQuick-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
round_[_rID].eth != 0

IRs:
REF_235(F3Ddatasets.Round) -> round_[_rID]
REF_236(uint256) -> REF_235.eth
TMP_152(bool) = REF_236 != 0
CONDITION TMP_152"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_237(F3Ddatasets.Round) -> round_[_rID]
REF_238(uint256) -> REF_237.ico
REF_239(F3Ddatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.keys
REF_241(F3Ddatasets.Round) -> round_[_rID]
REF_242(uint256) -> REF_241.end
REF_243(F3Ddatasets.Round) -> round_[_rID]
REF_244(uint256) -> REF_243.strt
REF_245(F3Ddatasets.Round) -> round_[_rID]
REF_246(uint256) -> REF_245.pot
REF_247(F3Ddatasets.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.team
REF_249(F3Ddatasets.Round) -> round_[_rID]
REF_250(uint256) -> REF_249.plyr
TMP_153(uint256) = REF_250 * 10
TMP_154(uint256) = REF_248 + TMP_153
REF_251(F3Ddatasets.Round) -> round_[_rID]
REF_252(uint256) -> REF_251.plyr
REF_253(F3Ddatasets.Player) -> plyr_[REF_252]
REF_254(address) -> REF_253.addr
REF_255(F3Ddatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.plyr
REF_257(F3Ddatasets.Player) -> plyr_[REF_256]
REF_258(bytes32) -> REF_257.name
REF_259(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_260(uint256) -> REF_259[0]
REF_261(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_262(uint256) -> REF_261[1]
REF_263(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_264(uint256) -> REF_263[2]
REF_265(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_266(uint256) -> REF_265[3]
TMP_155(uint256) = airDropPot_ * 1000
TMP_156(uint256) = airDropTracker_ + TMP_155
RETURN REF_238,_rID,REF_240,REF_242,REF_244,REF_246,TMP_154,REF_254,REF_258,REF_260,REF_262,REF_264,REF_266,TMP_156"];
4[label="Node Type: RETURN 4

EXPRESSION:
(round_[_rID].ico,_rID,(round_[_rID].ico).keys(),round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.ico
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.ico
TMP_157(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['REF_270'] 
REF_272(F3Ddatasets.Round) -> round_[_rID]
REF_273(uint256) -> REF_272.end
REF_274(F3Ddatasets.Round) -> round_[_rID]
REF_275(uint256) -> REF_274.strt
REF_276(F3Ddatasets.Round) -> round_[_rID]
REF_277(uint256) -> REF_276.pot
REF_278(F3Ddatasets.Round) -> round_[_rID]
REF_279(uint256) -> REF_278.team
REF_280(F3Ddatasets.Round) -> round_[_rID]
REF_281(uint256) -> REF_280.plyr
TMP_158(uint256) = REF_281 * 10
TMP_159(uint256) = REF_279 + TMP_158
REF_282(F3Ddatasets.Round) -> round_[_rID]
REF_283(uint256) -> REF_282.plyr
REF_284(F3Ddatasets.Player) -> plyr_[REF_283]
REF_285(address) -> REF_284.addr
REF_286(F3Ddatasets.Round) -> round_[_rID]
REF_287(uint256) -> REF_286.plyr
REF_288(F3Ddatasets.Player) -> plyr_[REF_287]
REF_289(bytes32) -> REF_288.name
REF_290(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_291(uint256) -> REF_290[0]
REF_292(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_293(uint256) -> REF_292[1]
REF_294(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_295(uint256) -> REF_294[2]
REF_296(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_297(uint256) -> REF_296[3]
TMP_160(uint256) = airDropPot_ * 1000
TMP_161(uint256) = airDropTracker_ + TMP_160
RETURN REF_268,_rID,TMP_157,REF_273,REF_275,REF_277,TMP_159,REF_285,REF_289,REF_291,REF_293,REF_295,REF_297,TMP_161"];
}
// Function: 2764.sol-F3DGoQuick-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_162 = CONVERT 0 to address
TMP_163(bool) = _addr == TMP_162
CONDITION TMP_163"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_164(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_298(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_298(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrRnds_[_pID][_rID].ico == 0

IRs:
REF_299(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_300(F3Ddatasets.PlayerRounds) -> REF_299[_rID]
REF_301(uint256) -> REF_300.ico
TMP_165(bool) = REF_301 == 0
CONDITION TMP_165"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,0)

IRs:
REF_302(F3Ddatasets.Player) -> plyr_[_pID]
REF_303(bytes32) -> REF_302.name
REF_304(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_305(F3Ddatasets.PlayerRounds) -> REF_304[_rID]
REF_306(uint256) -> REF_305.keys
REF_307(F3Ddatasets.Player) -> plyr_[_pID]
REF_308(uint256) -> REF_307.win
REF_309(F3Ddatasets.Player) -> plyr_[_pID]
REF_310(uint256) -> REF_309.gen
REF_312(F3Ddatasets.Player) -> plyr_[_pID]
REF_313(uint256) -> REF_312.lrnd
TMP_166(uint256) = INTERNAL_CALL, F3DGoQuick.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_313)
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_310', 'TMP_166'] 
REF_314(F3Ddatasets.Player) -> plyr_[_pID]
REF_315(uint256) -> REF_314.aff
RETURN _pID,REF_303,REF_306,REF_308,TMP_167,REF_315,0"];
8[label="Node Type: RETURN 8

EXPRESSION:
(_pID,plyr_[_pID].name,calcPlayerICOPhaseKeys(_pID,_rID),plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].ico)

IRs:
REF_316(F3Ddatasets.Player) -> plyr_[_pID]
REF_317(bytes32) -> REF_316.name
TMP_168(uint256) = INTERNAL_CALL, F3DGoQuick.calcPlayerICOPhaseKeys(uint256,uint256)(_pID,_rID)
REF_318(F3Ddatasets.Player) -> plyr_[_pID]
REF_319(uint256) -> REF_318.win
REF_320(F3Ddatasets.Player) -> plyr_[_pID]
REF_321(uint256) -> REF_320.gen
REF_323(F3Ddatasets.Player) -> plyr_[_pID]
REF_324(uint256) -> REF_323.lrnd
TMP_169(uint256) = INTERNAL_CALL, F3DGoQuick.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_324)
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_321', 'TMP_169'] 
REF_325(F3Ddatasets.Player) -> plyr_[_pID]
REF_326(uint256) -> REF_325.aff
REF_327(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_328(F3Ddatasets.PlayerRounds) -> REF_327[_rID]
REF_329(uint256) -> REF_328.ico
RETURN _pID,REF_317,TMP_168,REF_319,TMP_170,REF_326,REF_329"];
}
// Function: 2764.sol-F3DGoQuick-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_155(F3Ddatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.end
TMP_119(bool) = now > REF_156
REF_157(F3Ddatasets.Round) -> round_[_rID]
REF_158(bool) -> REF_157.ended
TMP_120(bool) = REF_158 == False
TMP_121(bool) = TMP_119 && TMP_120
CONDITION TMP_121"];
2->3[label="True"];
2->26[label="False"];
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
round_[_rID].eth == 0 && round_[_rID].ico > 0

IRs:
REF_159(F3Ddatasets.Round) -> round_[_rID]
REF_160(uint256) -> REF_159.eth
TMP_122(bool) = REF_160 == 0
REF_161(F3Ddatasets.Round) -> round_[_rID]
REF_162(uint256) -> REF_161.ico
TMP_123(bool) = REF_162 > 0
TMP_124(bool) = TMP_122 && TMP_123
CONDITION TMP_124"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_roundEth = round_[_rID].ico

IRs:
REF_163(F3Ddatasets.Round) -> round_[_rID]
REF_164(uint256) -> REF_163.ico
_roundEth(uint256) := REF_164(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_roundKeys = (round_[_rID].ico).keys()

IRs:
REF_165(F3Ddatasets.Round) -> round_[_rID]
REF_166(uint256) -> REF_165.ico
TMP_125(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['REF_166'] 
_roundKeys(uint256) := TMP_125(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_roundMask = ((round_[_rID].icoGen).mul(1000000000000000000)) / _roundKeys

IRs:
REF_168(F3Ddatasets.Round) -> round_[_rID]
REF_169(uint256) -> REF_168.icoGen
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_169', '1000000000000000000'] 
TMP_127(uint256) = TMP_126 / _roundKeys
_roundMask(uint256) := TMP_127(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_roundPot = (round_[_rID].pot).add((round_[_rID].icoGen).sub((_roundMask.mul(_roundKeys)) / (1000000000000000000)))

IRs:
REF_171(F3Ddatasets.Round) -> round_[_rID]
REF_172(uint256) -> REF_171.pot
REF_174(F3Ddatasets.Round) -> round_[_rID]
REF_175(uint256) -> REF_174.icoGen
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_roundMask', '_roundKeys'] 
TMP_129(uint256) = TMP_128 / 1000000000000000000
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_175', 'TMP_129'] 
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_172', 'TMP_130'] 
_roundPot(uint256) := TMP_131(uint256)"];
11->16;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_roundEth = round_[_rID].eth

IRs:
REF_178(F3Ddatasets.Round) -> round_[_rID]
REF_179(uint256) -> REF_178.eth
_roundEth(uint256) := REF_179(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_roundKeys = round_[_rID].keys

IRs:
REF_180(F3Ddatasets.Round) -> round_[_rID]
REF_181(uint256) -> REF_180.keys
_roundKeys(uint256) := REF_181(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_roundMask = round_[_rID].mask

IRs:
REF_182(F3Ddatasets.Round) -> round_[_rID]
REF_183(uint256) -> REF_182.mask
_roundMask(uint256) := REF_183(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_roundPot = round_[_rID].pot

IRs:
REF_184(F3Ddatasets.Round) -> round_[_rID]
REF_185(uint256) -> REF_184.pot
_roundPot(uint256) := REF_185(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: NEW VARIABLE 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
plyrRnds_[_pID][plyr_[_pID].lrnd].ico == 0

IRs:
REF_186(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_187(F3Ddatasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.lrnd
REF_189(F3Ddatasets.PlayerRounds) -> REF_186[REF_188]
REF_190(uint256) -> REF_189.ico
TMP_132(bool) = REF_190 == 0
CONDITION TMP_132"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_playerKeys = plyrRnds_[_pID][plyr_[_pID].lrnd].keys

IRs:
REF_191(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_192(F3Ddatasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.lrnd
REF_194(F3Ddatasets.PlayerRounds) -> REF_191[REF_193]
REF_195(uint256) -> REF_194.keys
_playerKeys(uint256) := REF_195(uint256)"];
19->21;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_playerKeys = calcPlayerICOPhaseKeys(_pID,_rID)

IRs:
TMP_133(uint256) = INTERNAL_CALL, F3DGoQuick.calcPlayerICOPhaseKeys(uint256,uint256)(_pID,_rID)
_playerKeys(uint256) := TMP_133(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_196(F3Ddatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.plyr
TMP_134(bool) = REF_197 == _pID
CONDITION TMP_134"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: RETURN 23

EXPRESSION:
((plyr_[_pID].win).add((_roundPot.mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_roundMask,_roundPot,_roundKeys,_playerKeys)),plyr_[_pID].aff)

IRs:
REF_198(F3Ddatasets.Player) -> plyr_[_pID]
REF_199(uint256) -> REF_198.win
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_roundPot', '48'] 
TMP_136(uint256) = TMP_135 / 100
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_199', 'TMP_136'] 
REF_202(F3Ddatasets.Player) -> plyr_[_pID]
REF_203(uint256) -> REF_202.gen
TMP_138(uint256) = INTERNAL_CALL, F3DGoQuick.getPlayerVaultsHelper(uint256,uint256,uint256,uint256,uint256)(_pID,_roundMask,_roundPot,_roundKeys,_playerKeys)
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_203', 'TMP_138'] 
REF_205(F3Ddatasets.Player) -> plyr_[_pID]
REF_206(uint256) -> REF_205.aff
RETURN TMP_137,TMP_139,REF_206"];
24[label="Node Type: RETURN 24

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_roundMask,_roundPot,_roundKeys,_playerKeys)),plyr_[_pID].aff)

IRs:
REF_207(F3Ddatasets.Player) -> plyr_[_pID]
REF_208(uint256) -> REF_207.win
REF_209(F3Ddatasets.Player) -> plyr_[_pID]
REF_210(uint256) -> REF_209.gen
TMP_140(uint256) = INTERNAL_CALL, F3DGoQuick.getPlayerVaultsHelper(uint256,uint256,uint256,uint256,uint256)(_pID,_roundMask,_roundPot,_roundKeys,_playerKeys)
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_210', 'TMP_140'] 
REF_212(F3Ddatasets.Player) -> plyr_[_pID]
REF_213(uint256) -> REF_212.aff
RETURN REF_208,TMP_141,REF_213"];
26[label="Node Type: RETURN 26

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_214(F3Ddatasets.Player) -> plyr_[_pID]
REF_215(uint256) -> REF_214.win
REF_216(F3Ddatasets.Player) -> plyr_[_pID]
REF_217(uint256) -> REF_216.gen
REF_219(F3Ddatasets.Player) -> plyr_[_pID]
REF_220(uint256) -> REF_219.lrnd
TMP_142(uint256) = INTERNAL_CALL, F3DGoQuick.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_220)
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_217', 'TMP_142'] 
REF_221(F3Ddatasets.Player) -> plyr_[_pID]
REF_222(uint256) -> REF_221.aff
RETURN REF_215,TMP_143,REF_222"];
}
// Function: 2764.sol-F3DGoQuick-getPlayerVaultsHelper(uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((_roundMask.add((((_roundPot.mul(potSplit_[round_[rID_].team].gen)) / 100).mul(1000000000000000000)) / _roundKeys)).mul(_playerKeys)) / 1000000000000000000).sub(plyrRnds_[_pID][rID_].mask))

IRs:
REF_225(F3Ddatasets.Round) -> round_[rID_]
REF_226(uint256) -> REF_225.team
REF_227(F3Ddatasets.PotSplit) -> potSplit_[REF_226]
REF_228(uint256) -> REF_227.gen
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_roundPot', 'REF_228'] 
TMP_145(uint256) = TMP_144 / 100
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_145', '1000000000000000000'] 
TMP_147(uint256) = TMP_146 / _roundKeys
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_roundMask', 'TMP_147'] 
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_148', '_playerKeys'] 
TMP_150(uint256) = TMP_149 / 1000000000000000000
REF_232(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_233(F3Ddatasets.PlayerRounds) -> REF_232[rID_]
REF_234(uint256) -> REF_233.mask
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_150', 'REF_234'] 
RETURN TMP_151"];
}
// Function: 2764.sol-F3DGoQuick-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now <= round_[_rID].strt + rndGap_

IRs:
REF_144(F3Ddatasets.Round) -> round_[_rID]
REF_145(uint256) -> REF_144.strt
TMP_113(uint256) = REF_145 + rndGap_
TMP_114(bool) = _now <= TMP_113
CONDITION TMP_114"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(((round_[_rID].end).sub(rndInit_)).sub(_now))

IRs:
REF_146(F3Ddatasets.Round) -> round_[_rID]
REF_147(uint256) -> REF_146.end
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_147', 'rndInit_'] 
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_115', '_now'] 
RETURN TMP_116"];
5[label="Node Type: IF 5

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_150(F3Ddatasets.Round) -> round_[_rID]
REF_151(uint256) -> REF_150.end
TMP_117(bool) = _now < REF_151
CONDITION TMP_117"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_152(F3Ddatasets.Round) -> round_[_rID]
REF_153(uint256) -> REF_152.end
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_153', '_now'] 
RETURN TMP_118"];
7[label="Node Type: RETURN 7

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2764.sol-F3DGoQuick-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && round_[_rID].eth != 0 && _now <= round_[_rID].end

IRs:
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.strt
TMP_299(uint256) = REF_550 + rndGap_
TMP_300(bool) = _now > TMP_299
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.eth
TMP_301(bool) = REF_552 != 0
TMP_302(bool) = TMP_300 && TMP_301
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.end
TMP_303(bool) = _now <= REF_554
TMP_304(bool) = TMP_302 && TMP_303
CONDITION TMP_304"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_555(F3Ddatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.keys
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_556', '_keys'] 
TMP_306(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.ethRec(uint256,uint256), arguments:['TMP_305', '_keys'] 
RETURN TMP_306"];
5[label="Node Type: IF 5

EXPRESSION:
_now <= round_[_rID].end

IRs:
REF_559(F3Ddatasets.Round) -> round_[_rID]
REF_560(uint256) -> REF_559.end
TMP_307(bool) = _now <= REF_560
CONDITION TMP_307"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
((((round_[_rID].ico).keys()).add(_keys)).ethRec(_keys))

IRs:
REF_561(F3Ddatasets.Round) -> round_[_rID]
REF_562(uint256) -> REF_561.ico
TMP_308(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['REF_562'] 
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_308', '_keys'] 
TMP_310(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.ethRec(uint256,uint256), arguments:['TMP_309', '_keys'] 
RETURN TMP_310"];
7[label="Node Type: RETURN 7

EXPRESSION:
((_keys).eth())

IRs:
TMP_311(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.eth(uint256), arguments:['_keys'] 
RETURN TMP_311"];
}
// Function: 2764.sol-F3DGoQuick-icoPhaseCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(round_[_rID].ico).keysRec(_eth) >= 1000000000000000000 || round_[_rID].plyr == 0

IRs:
REF_343(F3Ddatasets.Round) -> round_[_rID]
REF_344(uint256) -> REF_343.ico
TMP_186(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keysRec(uint256,uint256), arguments:['REF_344', '_eth'] 
TMP_187(bool) = TMP_186 >= 1000000000000000000
REF_346(F3Ddatasets.Round) -> round_[_rID]
REF_347(uint256) -> REF_346.plyr
TMP_188(bool) = REF_347 == 0
TMP_189(bool) = TMP_187 || TMP_188
CONDITION TMP_189"];
2->3[label="True"];
2->10[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_348(F3Ddatasets.Round) -> round_[_rID]
REF_349(uint256) -> REF_348.plyr
TMP_190(bool) = REF_349 != _pID
CONDITION TMP_190"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_350(F3Ddatasets.Round) -> round_[_rID]
REF_351(uint256) -> REF_350.plyr
REF_351(uint256) (->round_) := _pID(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_352(F3Ddatasets.Round) -> round_[_rID]
REF_353(uint256) -> REF_352.team
TMP_191(bool) = REF_353 != _team
CONDITION TMP_191"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_354(F3Ddatasets.Round) -> round_[_rID]
REF_355(uint256) -> REF_354.team
REF_355(uint256) (->round_) := _team(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_356(uint256) -> _eventData_.compressedData
REF_357(uint256) -> _eventData_.compressedData
TMP_192(uint256) = REF_357 + 100
REF_356(uint256) (->_eventData_) := TMP_192(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrRnds_[_pID][_rID].ico = _eth.add(plyrRnds_[_pID][_rID].ico)

IRs:
REF_358(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_359(F3Ddatasets.PlayerRounds) -> REF_358[_rID]
REF_360(uint256) -> REF_359.ico
REF_362(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_363(F3Ddatasets.PlayerRounds) -> REF_362[_rID]
REF_364(uint256) -> REF_363.ico
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_364'] 
REF_360(uint256) (->plyrRnds_) := TMP_193(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].ico = _eth.add(round_[_rID].ico)

IRs:
REF_365(F3Ddatasets.Round) -> round_[_rID]
REF_366(uint256) -> REF_365.ico
REF_368(F3Ddatasets.Round) -> round_[_rID]
REF_369(uint256) -> REF_368.ico
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_369'] 
REF_366(uint256) (->round_) := TMP_194(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_370(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_371(uint256) -> REF_370[_team]
REF_373(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_374(uint256) -> REF_373[_team]
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_374'] 
REF_371(uint256) (->rndTmEth_) := TMP_195(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_196(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_196(F3Ddatasets.EventReturns)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_376(F3Ddatasets.TeamFee) -> fees_[_team]
REF_377(uint256) -> REF_376.gen
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_377'] 
TMP_198(uint256) = TMP_197 / 100
_gen(uint256) := TMP_198(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
round_[_rID].icoGen = _gen.add(round_[_rID].icoGen)

IRs:
REF_378(F3Ddatasets.Round) -> round_[_rID]
REF_379(uint256) -> REF_378.icoGen
REF_381(F3Ddatasets.Round) -> round_[_rID]
REF_382(uint256) -> REF_381.icoGen
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_382'] 
REF_379(uint256) (->round_) := TMP_199(uint256)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_200(uint256) = _eth / 100
_air(uint256) := TMP_200(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_201(uint256)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
_pot = (_eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))).sub(_gen)

IRs:
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_203(uint256) = TMP_202 / 100
REF_388(F3Ddatasets.TeamFee) -> fees_[_team]
REF_389(uint256) -> REF_388.p3d
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_389'] 
TMP_205(uint256) = TMP_204 / 100
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_203', 'TMP_205'] 
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_206'] 
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_207', '_gen'] 
_pot(uint256) := TMP_208(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].pot = _pot.add(round_[_rID].pot)

IRs:
REF_391(F3Ddatasets.Round) -> round_[_rID]
REF_392(uint256) -> REF_391.pot
REF_394(F3Ddatasets.Round) -> round_[_rID]
REF_395(uint256) -> REF_394.pot
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', 'REF_395'] 
REF_392(uint256) (->round_) := TMP_209(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_396(uint256) -> _eventData_.genAmount
REF_398(uint256) -> _eventData_.genAmount
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_398'] 
REF_396(uint256) (->_eventData_) := TMP_210(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_399(uint256) -> _eventData_.potAmount
REF_399(uint256) (->_eventData_) := _pot(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
endTx(_rID,_pID,_team,_eth,0,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.endTx(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_team,_eth,0,_eventData_)"];
}
// Function: 2764.sol-F3DGoQuick-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_497(bool) = activated_ == True
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2764.sol-F3DGoQuick-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_499(bool) = _addr == tx.origin
TMP_500(None) = SOLIDITY_CALL require(bool)(TMP_499)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_501(bool) = _codeLength == 0
TMP_502(None) = SOLIDITY_CALL require(bool,string)(TMP_501,sorry humans only)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 2764.sol-F3DGoQuick-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_503(bool) = _eth >= 1000000000
TMP_504(None) = SOLIDITY_CALL require(bool,string)(TMP_503,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_505(bool) = _eth <= 100000000000000000000000
TMP_506(None) = SOLIDITY_CALL require(bool,string)(TMP_505,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2764.sol-F3DGoQuick-manageRoundAndPlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end

IRs:
REF_607(F3Ddatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.end
TMP_337(bool) = _now > REF_608
CONDITION TMP_337"];
3->4[label="True"];
3->12[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].ended == false

IRs:
REF_609(F3Ddatasets.Round) -> round_[_rID]
REF_610(bool) -> REF_609.ended
TMP_338(bool) = REF_610 == False
CONDITION TMP_338"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_339(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_339(F3Ddatasets.EventReturns)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_611(F3Ddatasets.Round) -> round_[_rID]
REF_612(bool) -> REF_611.ended
REF_612(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rID_ ++

IRs:
TMP_340(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_rID ++

IRs:
TMP_341(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].strt = _now

IRs:
REF_613(F3Ddatasets.Round) -> round_[_rID]
REF_614(uint256) -> REF_613.strt
REF_614(uint256) (->round_) := _now(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
round_[_rID].end = _now.add(rndInit_).add(rndGap_)

IRs:
REF_615(F3Ddatasets.Round) -> round_[_rID]
REF_616(uint256) -> REF_615.end
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_now', 'rndInit_'] 
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_342', 'rndGap_'] 
REF_616(uint256) (->round_) := TMP_343(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
plyr_[_pID].lrnd != _rID

IRs:
REF_619(F3Ddatasets.Player) -> plyr_[_pID]
REF_620(uint256) -> REF_619.lrnd
TMP_344(bool) = REF_620 != _rID
CONDITION TMP_344"];
13->14[label="True"];
13->19[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_621(F3Ddatasets.Player) -> plyr_[_pID]
REF_622(uint256) -> REF_621.lrnd
TMP_345(bool) = REF_622 != 0
CONDITION TMP_345"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_623(F3Ddatasets.Player) -> plyr_[_pID]
REF_624(uint256) -> REF_623.lrnd
INTERNAL_CALL, F3DGoQuick.updateGenVault(uint256,uint256)(_pID,REF_624)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[_pID].lrnd = _rID

IRs:
REF_625(F3Ddatasets.Player) -> plyr_[_pID]
REF_626(uint256) -> REF_625.lrnd
REF_626(uint256) (->plyr_) := _rID(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_627(uint256) -> _eventData_.compressedData
REF_628(uint256) -> _eventData_.compressedData
TMP_347(uint256) = REF_628 + 10
REF_627(uint256) (->_eventData_) := TMP_347(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2764.sol-F3DGoQuick-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_446(uint256) = rID_ + 1
_rID(uint256) := TMP_446(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_777(F3Ddatasets.Round) -> round_[_rID]
REF_778(uint256) -> REF_777.pot
REF_779(F3Ddatasets.Round) -> round_[_rID]
REF_780(uint256) -> REF_779.pot
TMP_447(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_780', 'msg.value'] 
REF_778(uint256) (->round_) := TMP_447(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 2764.sol-F3DGoQuick-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_ = manageRoundAndPlayer(_pID,_eventData_)

IRs:
TMP_178(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.manageRoundAndPlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_178(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_336(F3Ddatasets.Player) -> plyr_[_pID]
REF_337(uint256) -> REF_336.gen
TMP_179(uint256) = INTERNAL_CALL, F3DGoQuick.withdrawEarnings(uint256)(_pID)
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_179', '_eth'] 
REF_337(uint256) (->plyr_) := TMP_180(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
now <= round_[rID_].strt + rndGap_

IRs:
REF_339(F3Ddatasets.Round) -> round_[rID_]
REF_340(uint256) -> REF_339.strt
TMP_181(uint256) = REF_340 + rndGap_
TMP_182(bool) = now <= TMP_181
CONDITION TMP_182"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 3000000000000000000000000000000

IRs:
REF_341(uint256) -> _eventData_.compressedData
REF_342(uint256) -> _eventData_.compressedData
TMP_183(uint256) = REF_342 + 3000000000000000000000000000000
REF_341(uint256) (->_eventData_) := TMP_183(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
icoPhaseCore(_pID,_eth,_team,_affID,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.icoPhaseCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_eth,_team,_affID,_eventData_)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
core(_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.core(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_eth,_affID,_team,_eventData_)"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 2764.sol-F3DGoQuick-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_57(bool) = _affID != REF_56
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, F3DGoQuick.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, F3DGoQuick.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2764.sol-F3DGoQuick-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_47(bool) = _affCode != REF_48
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, F3DGoQuick.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, F3DGoQuick.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 2764.sol-F3DGoQuick-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_64(bool) = _affCode == REF_61
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_66(bool) = _affID != REF_66
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, F3DGoQuick.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, F3DGoQuick.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, F3DGoQuick.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2764.sol-F3DGoQuick-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_312 = CONVERT PlayerBook to address
TMP_313(bool) = msg.sender == TMP_312
TMP_314(None) = SOLIDITY_CALL require(bool,string)(TMP_313,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_567(uint256) -> pIDxAddr_[_addr]
TMP_315(bool) = REF_567 != _pID
CONDITION TMP_315"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_568(uint256) -> pIDxAddr_[_addr]
REF_568(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_569(uint256) -> pIDxName_[_name]
TMP_316(bool) = REF_569 != _pID
CONDITION TMP_316"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_570(uint256) -> pIDxName_[_name]
REF_570(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_571(F3Ddatasets.Player) -> plyr_[_pID]
REF_572(address) -> REF_571.addr
TMP_317(bool) = REF_572 != _addr
CONDITION TMP_317"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_573(F3Ddatasets.Player) -> plyr_[_pID]
REF_574(address) -> REF_573.addr
REF_574(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_575(F3Ddatasets.Player) -> plyr_[_pID]
REF_576(bytes32) -> REF_575.name
TMP_318(bool) = REF_576 != _name
CONDITION TMP_318"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_577(F3Ddatasets.Player) -> plyr_[_pID]
REF_578(bytes32) -> REF_577.name
REF_578(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_579(F3Ddatasets.Player) -> plyr_[_pID]
REF_580(uint256) -> REF_579.laff
TMP_319(bool) = REF_580 != _laff
CONDITION TMP_319"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_581(F3Ddatasets.Player) -> plyr_[_pID]
REF_582(uint256) -> REF_581.laff
REF_582(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_583(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_584(bool) -> REF_583[_name]
TMP_320(bool) = REF_584 == False
CONDITION TMP_320"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_585(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_586(bool) -> REF_585[_name]
REF_586(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2764.sol-F3DGoQuick-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_321 = CONVERT PlayerBook to address
TMP_322(bool) = msg.sender == TMP_321
TMP_323(None) = SOLIDITY_CALL require(bool,string)(TMP_322,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_587(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_588(bool) -> REF_587[_name]
TMP_324(bool) = REF_588 == False
CONDITION TMP_324"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_589(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_590(bool) -> REF_589[_name]
REF_590(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2764.sol-F3DGoQuick-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_89(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_89(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_103(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_103(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_105(F3Ddatasets.Player) -> plyr_[_affID]
REF_106(address) -> REF_105.addr
REF_107(F3Ddatasets.Player) -> plyr_[_affID]
REF_108(bytes32) -> REF_107.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_106,REF_108,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
9->1;
}
// Function: 2764.sol-F3DGoQuick-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_93(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_93(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_112(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_112(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_114(F3Ddatasets.Player) -> plyr_[_affID]
REF_115(address) -> REF_114.addr
REF_116(F3Ddatasets.Player) -> plyr_[_affID]
REF_117(bytes32) -> REF_116.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_115,REF_117,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
9->1;
}
// Function: 2764.sol-F3DGoQuick-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_97(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_97(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_121(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_121(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_123(F3Ddatasets.Player) -> plyr_[_affID]
REF_124(address) -> REF_123.addr
REF_125(F3Ddatasets.Player) -> plyr_[_affID]
REF_126(bytes32) -> REF_125.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_124,REF_126,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
9->1;
}
// Function: 2764.sol-F3DGoQuick-roundClaimICOKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
round_[_rID].eth = round_[_rID].ico

IRs:
REF_691(F3Ddatasets.Round) -> round_[_rID]
REF_692(uint256) -> REF_691.eth
REF_693(F3Ddatasets.Round) -> round_[_rID]
REF_694(uint256) -> REF_693.ico
REF_692(uint256) (->round_) := REF_694(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].keys = (round_[_rID].ico).keys()

IRs:
REF_695(F3Ddatasets.Round) -> round_[_rID]
REF_696(uint256) -> REF_695.keys
REF_697(F3Ddatasets.Round) -> round_[_rID]
REF_698(uint256) -> REF_697.ico
TMP_387(uint256) = LIBRARY_CALL, dest:F3DKeysCalcFast, function:F3DKeysCalcFast.keys(uint256), arguments:['REF_698'] 
REF_696(uint256) (->round_) := TMP_387(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[_rID].icoAvg = calcAverageICOPhaseKeyPrice(_rID)

IRs:
REF_700(F3Ddatasets.Round) -> round_[_rID]
REF_701(uint256) -> REF_700.icoAvg
TMP_388(uint256) = INTERNAL_CALL, F3DGoQuick.calcAverageICOPhaseKeyPrice(uint256)(_rID)
REF_701(uint256) (->round_) := TMP_388(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_ppt = ((round_[_rID].icoGen).mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
REF_702(F3Ddatasets.Round) -> round_[_rID]
REF_703(uint256) -> REF_702.icoGen
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_703', '1000000000000000000'] 
REF_705(F3Ddatasets.Round) -> round_[_rID]
REF_706(uint256) -> REF_705.keys
TMP_390(uint256) = TMP_389 / REF_706
_ppt(uint256) := TMP_390(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = (round_[_rID].icoGen).sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000))

IRs:
REF_707(F3Ddatasets.Round) -> round_[_rID]
REF_708(uint256) -> REF_707.icoGen
REF_711(F3Ddatasets.Round) -> round_[_rID]
REF_712(uint256) -> REF_711.keys
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_712'] 
TMP_392(uint256) = TMP_391 / 1000000000000000000
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_708', 'TMP_392'] 
_dust(uint256) := TMP_393(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_394(bool) = _dust > 0
CONDITION TMP_394"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].pot = (_dust).add(round_[_rID].pot)

IRs:
REF_713(F3Ddatasets.Round) -> round_[_rID]
REF_714(uint256) -> REF_713.pot
REF_716(F3Ddatasets.Round) -> round_[_rID]
REF_717(uint256) -> REF_716.pot
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_dust', 'REF_717'] 
REF_714(uint256) (->round_) := TMP_395(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_718(F3Ddatasets.Round) -> round_[_rID]
REF_719(uint256) -> REF_718.mask
REF_721(F3Ddatasets.Round) -> round_[_rID]
REF_722(uint256) -> REF_721.mask
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_722'] 
REF_719(uint256) (->round_) := TMP_396(uint256)"];
}
// Function: 2764.sol-F3DGoQuick-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x82e0C3626622d9a8234BFBaf6DD0f8d070C2609D)

IRs:
TMP_496 = CONVERT 747181187510760857501468947392672981264478920861 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_496(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = F3DLink Quick

IRs:
name(string) := F3DLink Quick(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = F3D

IRs:
symbol(string) := F3D(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 300

IRs:
rndInit_(uint256) := 300(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 300

IRs:
rndInc_(uint256) := 300(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 300

IRs:
rndMax_(uint256) := 300(uint256)"];
}
// Function: 2764.sol-F3DGoQuick-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = 0xacb257873b064b956BD9be84dc347C55F7b2ae8C

IRs:
admin(address) := 985923570012491585107000795290586386768636063372(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
coin_base = 0x345A756a49DF0eD24002857dd25DAb6a5F4E83FF

IRs:
coin_base(address) := 298884815456284147414407271681969575907073885183(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 60

IRs:
rndGap_(uint256) := 60(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2764.sol-F3DGoQuick-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_397(uint256) = INTERNAL_CALL, F3DGoQuick.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_397(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_398(bool) = _earnings > 0
CONDITION TMP_398"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_723(F3Ddatasets.Player) -> plyr_[_pID]
REF_724(uint256) -> REF_723.gen
REF_726(F3Ddatasets.Player) -> plyr_[_pID]
REF_727(uint256) -> REF_726.gen
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_727'] 
REF_724(uint256) (->plyr_) := TMP_399(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_728(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_729(F3Ddatasets.PlayerRounds) -> REF_728[_rIDlast]
REF_730(uint256) -> REF_729.mask
REF_732(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_733(F3Ddatasets.PlayerRounds) -> REF_732[_rIDlast]
REF_734(uint256) -> REF_733.mask
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_734'] 
REF_730(uint256) (->plyrRnds_) := TMP_400(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2764.sol-F3DGoQuick-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_466(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_806(F3Ddatasets.Round) -> round_[_rID]
REF_807(uint256) -> REF_806.keys
TMP_467(uint256) = TMP_466 / REF_807
_ppt(uint256) := TMP_467(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_808(F3Ddatasets.Round) -> round_[_rID]
REF_809(uint256) -> REF_808.mask
REF_811(F3Ddatasets.Round) -> round_[_rID]
REF_812(uint256) -> REF_811.mask
TMP_468(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_812'] 
REF_809(uint256) (->round_) := TMP_468(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_470(uint256) = TMP_469 / 1000000000000000000
_pearn(uint256) := TMP_470(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_814(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_815(F3Ddatasets.PlayerRounds) -> REF_814[_rID]
REF_816(uint256) -> REF_815.mask
REF_817(F3Ddatasets.Round) -> round_[_rID]
REF_818(uint256) -> REF_817.mask
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_818', '_keys'] 
TMP_472(uint256) = TMP_471 / 1000000000000000000
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_472', '_pearn'] 
REF_822(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_823(F3Ddatasets.PlayerRounds) -> REF_822[_rID]
REF_824(uint256) -> REF_823.mask
TMP_474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_473', 'REF_824'] 
REF_816(uint256) (->plyrRnds_) := TMP_474(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_827(F3Ddatasets.Round) -> round_[_rID]
REF_828(uint256) -> REF_827.keys
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_828'] 
TMP_476(uint256) = TMP_475 / 1000000000000000000
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_476'] 
RETURN TMP_477"];
}
// Function: 2764.sol-F3DGoQuick-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_401(uint256) = _keys / 1000000000000000000
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_401', 'rndInc_'] 
REF_737(F3Ddatasets.Round) -> round_[_rID]
REF_738(uint256) -> REF_737.end
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_402', 'REF_738'] 
_newTime(uint256) := TMP_403(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_405(bool) = _newTime < TMP_404
CONDITION TMP_405"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_740(F3Ddatasets.Round) -> round_[_rID]
REF_741(uint256) -> REF_740.end
REF_741(uint256) (->round_) := _newTime(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_742(F3Ddatasets.Round) -> round_[_rID]
REF_743(uint256) -> REF_742.end
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_743(uint256) (->round_) := TMP_406(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 2764.sol-F3DGoQuick-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_334(bool) = _team < 0
TMP_335(bool) = _team > 3
TMP_336(bool) = TMP_334 || TMP_335
CONDITION TMP_336"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2764.sol-F3DGoQuick-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_72(bool) = _now > REF_71
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_73(bool) = REF_73 == False
TMP_74(bool) = TMP_72 && TMP_73
CONDITION TMP_74"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(bool) -> REF_74.ended
REF_75(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_75(F3Ddatasets.EventReturns) = INTERNAL_CALL, F3DGoQuick.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_75(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_76(uint256) = INTERNAL_CALL, F3DGoQuick.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_76(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_77(bool) = _eth > 0
CONDITION TMP_77"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(address) -> REF_76.addr
Transfer dest:REF_77 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_79(uint256) -> _eventData_.compressedData
REF_80(uint256) -> _eventData_.compressedData
TMP_79(uint256) = _now * 1000000000000000000
TMP_80(uint256) = REF_80 + TMP_79
REF_79(uint256) (->_eventData_) := TMP_80(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_81(uint256) -> _eventData_.compressedIDs
REF_82(uint256) -> _eventData_.compressedIDs
TMP_81(uint256) = REF_82 + _pID
REF_81(uint256) (->_eventData_) := TMP_81(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_84(F3Ddatasets.Player) -> plyr_[_pID]
REF_85(bytes32) -> REF_84.name
REF_86(uint256) -> _eventData_.compressedData
REF_87(uint256) -> _eventData_.compressedIDs
REF_88(address) -> _eventData_.winnerAddr
REF_89(bytes32) -> _eventData_.winnerName
REF_90(uint256) -> _eventData_.amountWon
REF_91(uint256) -> _eventData_.newPot
REF_92(uint256) -> _eventData_.P3DAmount
REF_93(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_85,_eth,REF_86,REF_87,REF_88,REF_89,REF_90,REF_91,REF_92,REF_93)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_83(uint256) = INTERNAL_CALL, F3DGoQuick.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_83(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_84(bool) = _eth > 0
CONDITION TMP_84"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_94(F3Ddatasets.Player) -> plyr_[_pID]
REF_95(address) -> REF_94.addr
Transfer dest:REF_95 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_98(F3Ddatasets.Player) -> plyr_[_pID]
REF_99(bytes32) -> REF_98.name
Emit onWithdraw(_pID,msg.sender,REF_99,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, F3DGoQuick.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, F3DGoQuick.isHuman()()"];
23->1;
}
// Function: 2764.sol-F3DGoQuick-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_829(F3Ddatasets.Player) -> plyr_[_pID]
REF_830(uint256) -> REF_829.lrnd
INTERNAL_CALL, F3DGoQuick.updateGenVault(uint256,uint256)(_pID,REF_830)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_831(F3Ddatasets.Player) -> plyr_[_pID]
REF_832(uint256) -> REF_831.win
REF_834(F3Ddatasets.Player) -> plyr_[_pID]
REF_835(uint256) -> REF_834.gen
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_832', 'REF_835'] 
REF_837(F3Ddatasets.Player) -> plyr_[_pID]
REF_838(uint256) -> REF_837.aff
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_479', 'REF_838'] 
_earnings(uint256) := TMP_480(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_481(bool) = _earnings > 0
CONDITION TMP_481"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_839(F3Ddatasets.Player) -> plyr_[_pID]
REF_840(uint256) -> REF_839.win
REF_840(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_841(F3Ddatasets.Player) -> plyr_[_pID]
REF_842(uint256) -> REF_841.gen
REF_842(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_843(F3Ddatasets.Player) -> plyr_[_pID]
REF_844(uint256) -> REF_843.aff
REF_844(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2764.sol-F3DKeysCalcFast-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((50000000000000).mul(_keys.sq()).add(((100000000000000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_521(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_522(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['50000000000000', 'TMP_521'] 
TMP_523(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_524(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['100000000000000', 'TMP_523'] 
TMP_525(uint256) = TMP_524 / 2
TMP_526(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_522', 'TMP_525'] 
TMP_527(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_528(uint256) = TMP_526 / TMP_527
RETURN TMP_528"];
}
// Function: 2764.sol-F3DKeysCalcFast-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_511(uint256) = INTERNAL_CALL, F3DKeysCalcFast.eth(uint256)(_curKeys)
TMP_512(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_513(uint256) = INTERNAL_CALL, F3DKeysCalcFast.eth(uint256)(TMP_512)
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_511', 'TMP_513'] 
RETURN TMP_514"];
}
// Function: 2764.sol-F3DKeysCalcFast-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(200000000000000000000000000000000)).add(2500000000000000000000000000000000000000000000000000000000000000)).sqrt()).sub(50000000000000000000000000000000)) / (100000000000000)

IRs:
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_516(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_515', '200000000000000000000000000000000'] 
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_516', '2500000000000000000000000000000000000000000000000000000000000000'] 
TMP_518(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_517'] 
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_518', '50000000000000000000000000000000'] 
TMP_520(uint256) = TMP_519 / 100000000000000
RETURN TMP_520"];
}
// Function: 2764.sol-F3DKeysCalcFast-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_508(uint256) = INTERNAL_CALL, F3DKeysCalcFast.keys(uint256)(TMP_507)
TMP_509(uint256) = INTERNAL_CALL, F3DKeysCalcFast.keys(uint256)(_curEth)
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_508', 'TMP_509'] 
RETURN TMP_510"];
}
// Function: 2764.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 2764.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 2764.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 2764.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 2764.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 2764.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 2764.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_529 = CONVERT _input to bytes
_temp(bytes) := TMP_529(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_880 -> LENGTH _temp
_length(uint256) := REF_880(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_530(bool) = _length <= 32
TMP_531(bool) = _length > 0
TMP_532(bool) = TMP_530 && TMP_531
TMP_533(None) = SOLIDITY_CALL require(bool,string)(TMP_532,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_881(None) -> _temp[0]
TMP_534(bool) = REF_881 != 32
TMP_535(uint256) = _length - 1
REF_882(None) -> _temp[TMP_535]
TMP_536(bool) = REF_882 != 32
TMP_537(bool) = TMP_534 && TMP_536
TMP_538(None) = SOLIDITY_CALL require(bool,string)(TMP_537,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_883(None) -> _temp[0]
TMP_539(bool) = REF_883 == 48
CONDITION TMP_539"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_884(None) -> _temp[1]
TMP_540(bool) = REF_884 != 120
TMP_541(None) = SOLIDITY_CALL require(bool,string)(TMP_540,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_885(None) -> _temp[1]
TMP_542(bool) = REF_885 != 88
TMP_543(None) = SOLIDITY_CALL require(bool,string)(TMP_542,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_544(bool) = i < _length
CONDITION TMP_544"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_886(None) -> _temp[i]
TMP_545(bool) = REF_886 > 64
REF_887(None) -> _temp[i]
TMP_546(bool) = REF_887 < 91
TMP_547(bool) = TMP_545 && TMP_546
CONDITION TMP_547"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_888(bytes1) -> _temp[i]
REF_889(None) -> _temp[i]
TMP_548 = CONVERT REF_889 to uint256
TMP_549(uint256) = TMP_548 + 32
TMP_550 = CONVERT TMP_549 to bytes1
REF_888(bytes1) (->_temp) := TMP_550(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_551(bool) = _hasNonNumber == False
CONDITION TMP_551"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_890(None) -> _temp[i]
TMP_552(bool) = REF_890 == 32
REF_891(None) -> _temp[i]
TMP_553(bool) = REF_891 > 96
REF_892(None) -> _temp[i]
TMP_554(bool) = REF_892 < 123
TMP_555(bool) = TMP_553 && TMP_554
TMP_556(bool) = TMP_552 || TMP_555
REF_893(None) -> _temp[i]
TMP_557(bool) = REF_893 > 47
REF_894(None) -> _temp[i]
TMP_558(bool) = REF_894 < 58
TMP_559(bool) = TMP_557 && TMP_558
TMP_560(bool) = TMP_556 || TMP_559
TMP_561(None) = SOLIDITY_CALL require(bool,string)(TMP_560,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_895(None) -> _temp[i]
TMP_562(bool) = REF_895 == 32
CONDITION TMP_562"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_563(uint256) = i + 1
REF_896(None) -> _temp[TMP_563]
TMP_564(bool) = REF_896 != 32
TMP_565(None) = SOLIDITY_CALL require(bool,string)(TMP_564,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_566(bool) = _hasNonNumber == False
REF_897(None) -> _temp[i]
TMP_567(bool) = REF_897 < 48
REF_898(None) -> _temp[i]
TMP_568(bool) = REF_898 > 57
TMP_569(bool) = TMP_567 || TMP_568
TMP_570(bool) = TMP_566 && TMP_569
CONDITION TMP_570"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_571(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_572(bool) = _hasNonNumber == True
TMP_573(None) = SOLIDITY_CALL require(bool,string)(TMP_572,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2764.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2764.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2764.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2764.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2764.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2764.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2764.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2764.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2764.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_582(uint256) = a + b
c(uint256) := TMP_582(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_583(bool) = c >= a
TMP_584(None) = SOLIDITY_CALL require(bool,string)(TMP_583,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2764.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_574(bool) = a == 0
CONDITION TMP_574"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_575(uint256) = a * b
c(uint256) := TMP_575(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_576(uint256) = c / a
TMP_577(bool) = TMP_576 == b
TMP_578(None) = SOLIDITY_CALL require(bool,string)(TMP_577,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2764.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_592(bool) = x == 0
CONDITION TMP_592"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_593(bool) = y == 0
CONDITION TMP_593"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_594(bool) = i < y
CONDITION TMP_594"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_595(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_595(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_596(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2764.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_591(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_591"];
}
// Function: 2764.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_585(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_586(uint256) = TMP_585 / 2
z(uint256) := TMP_586(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_587(bool) = z < y
CONDITION TMP_587"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_588(uint256) = x / z
TMP_589(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_588,z)
TMP_590(uint256) = TMP_589 / 2
z(uint256) := TMP_590(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2764.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_579(bool) = b <= a
TMP_580(None) = SOLIDITY_CALL require(bool,string)(TMP_579,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_581(uint256) = a - b
RETURN TMP_581"];
}
}
