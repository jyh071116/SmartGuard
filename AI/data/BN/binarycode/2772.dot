digraph G {
// Function: 2772.sol-Random-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2772.sol-Random-isDrop(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(sender)))) / (now)).add(block.number))))

IRs:
TMP_0(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_1(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_2(bytes32) = SOLIDITY_CALL keccak256()(TMP_1)
TMP_3 = CONVERT TMP_2 to uint256
TMP_4(uint256) = TMP_3 / now
TMP_5(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_0', 'TMP_4'] 
TMP_6(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_5', 'block.gaslimit'] 
TMP_7(bytes) = SOLIDITY_CALL abi.encodePacked()(sender)
TMP_8(bytes32) = SOLIDITY_CALL keccak256()(TMP_7)
TMP_9 = CONVERT TMP_8 to uint256
TMP_10(uint256) = TMP_9 / now
TMP_11(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_6', 'TMP_10'] 
TMP_12(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_11', 'block.number'] 
TMP_13(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_12)
TMP_14(bytes32) = SOLIDITY_CALL keccak256()(TMP_13)
TMP_15 = CONVERT TMP_14 to uint256
seed(uint256) := TMP_15(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker

IRs:
TMP_16(uint256) = seed / 1000
TMP_17(uint256) = TMP_16 * 1000
TMP_18(uint256) = seed - TMP_17
TMP_19(bool) = TMP_18 < airDropTracker
CONDITION TMP_19"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2772.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_28(uint256) = a + b
c(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_29(bool) = c >= a
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2772.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_20(bool) = a == 0
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_21(uint256) = a * b
c(uint256) := TMP_21(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_22(uint256) = c / a
TMP_23(bool) = TMP_22 == b
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2772.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_38(bool) = x == 0
CONDITION TMP_38"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_39(bool) = y == 0
CONDITION TMP_39"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_40(bool) = i < y
CONDITION TMP_40"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_41(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_41(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_42(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2772.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_37(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_37"];
}
// Function: 2772.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_31(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_32(uint256) = TMP_31 / 2
z(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_33(bool) = z < y
CONDITION TMP_33"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_34(uint256) = x / z
TMP_35(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_34,z)
TMP_36(uint256) = TMP_35 / 2
z(uint256) := TMP_36(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2772.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_25(bool) = b <= a
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_27(uint256) = a - b
RETURN TMP_27"];
}
}
