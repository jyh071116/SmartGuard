digraph G {
// Function: 2792.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_435'] 
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_437'] 
TMP_439(uint256) = TMP_438 / 2
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_436', 'TMP_439'] 
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_442(uint256) = TMP_440 / TMP_441
RETURN TMP_442"];
}
// Function: 2792.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_425(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_427(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_426)
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_425', 'TMP_427'] 
RETURN TMP_428"];
}
// Function: 2792.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_429', '312500000000000000000000000'] 
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_430', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_431'] 
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_432', '74999921875000000000000000000000'] 
TMP_434(uint256) = TMP_433 / 156250000
RETURN TMP_434"];
}
// Function: 2792.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_422(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_421)
TMP_423(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_422', 'TMP_423'] 
RETURN TMP_424"];
}
// Function: 2792.sol-F3DexternalSettingsInterface-getFastExtra()
digraph{
}
// Function: 2792.sol-F3DexternalSettingsInterface-getFastGap()
digraph{
}
// Function: 2792.sol-F3DexternalSettingsInterface-getLongExtra()
digraph{
}
// Function: 2792.sol-F3DexternalSettingsInterface-getLongGap()
digraph{
}
// Function: 2792.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == god,only team just can activate)

IRs:
TMP_404(bool) = msg.sender == god
TMP_405(None) = SOLIDITY_CALL require(bool,string)(TMP_404,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_406(bool) = activated_ == False
TMP_407(None) = SOLIDITY_CALL require(bool,string)(TMP_406,fomo3d already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_656(F3Ddatasets.Round) -> round_[1]
REF_657(uint256) -> REF_656.strt
TMP_408(uint256) = now + rndExtra_
TMP_409(uint256) = TMP_408 - rndGap_
REF_657(uint256) (->round_) := TMP_409(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_658(F3Ddatasets.Round) -> round_[1]
REF_659(uint256) -> REF_658.end
TMP_410(uint256) = now + rndInit_
TMP_411(uint256) = TMP_410 + rndExtra_
REF_659(uint256) (->round_) := TMP_411(uint256)"];
}
// Function: 2792.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_334(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_335(bytes32) = SOLIDITY_CALL keccak256()(TMP_334)
TMP_336 = CONVERT TMP_335 to uint256
TMP_337(uint256) = TMP_336 / now
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_333', 'TMP_337'] 
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_338', 'block.gaslimit'] 
TMP_340(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_341(bytes32) = SOLIDITY_CALL keccak256()(TMP_340)
TMP_342 = CONVERT TMP_341 to uint256
TMP_343(uint256) = TMP_342 / now
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_339', 'TMP_343'] 
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_344', 'block.number'] 
TMP_346(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_345)
TMP_347(bytes32) = SOLIDITY_CALL keccak256()(TMP_346)
TMP_348 = CONVERT TMP_347 to uint256
seed(uint256) := TMP_348(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_349(uint256) = seed / 1000
TMP_350(uint256) = TMP_349 * 1000
TMP_351(uint256) = seed - TMP_350
TMP_352(bool) = TMP_351 < airDropTracker_
CONDITION TMP_352"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2792.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_253(F3Ddatasets.Round) -> round_[_rID]
REF_254(uint256) -> REF_253.strt
TMP_159(uint256) = REF_254 + rndGap_
TMP_160(bool) = _now > TMP_159
REF_255(F3Ddatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.end
TMP_161(bool) = _now <= REF_256
REF_257(F3Ddatasets.Round) -> round_[_rID]
REF_258(uint256) -> REF_257.end
TMP_162(bool) = _now > REF_258
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.plyr
TMP_163(bool) = REF_260 == 0
TMP_164(bool) = TMP_162 && TMP_163
TMP_165(bool) = TMP_161 || TMP_164
TMP_166(bool) = TMP_160 && TMP_165
CONDITION TMP_166"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_168(bool) = _now > REF_262
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(bool) -> REF_263.ended
TMP_169(bool) = REF_264 == False
TMP_170(bool) = TMP_168 && TMP_169
CONDITION TMP_170"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(bool) -> REF_265.ended
REF_266(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_171(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_171(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_267(uint256) -> _eventData_.compressedData
REF_268(uint256) -> _eventData_.compressedData
TMP_172(uint256) = _now * 1000000000000000000
TMP_173(uint256) = REF_268 + TMP_172
REF_267(uint256) (->_eventData_) := TMP_173(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_269(uint256) -> _eventData_.compressedIDs
REF_270(uint256) -> _eventData_.compressedIDs
TMP_174(uint256) = REF_270 + _pID
REF_269(uint256) (->_eventData_) := TMP_174(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_272(F3Ddatasets.Player) -> plyr_[_pID]
REF_273(bytes32) -> REF_272.name
REF_274(uint256) -> _eventData_.compressedData
REF_275(uint256) -> _eventData_.compressedIDs
REF_276(address) -> _eventData_.winnerAddr
REF_277(bytes32) -> _eventData_.winnerName
REF_278(uint256) -> _eventData_.amountWon
REF_279(uint256) -> _eventData_.newPot
REF_280(uint256) -> _eventData_.P3DAmount
REF_281(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_273,msg.value,REF_274,REF_275,REF_276,REF_277,REF_278,REF_279,REF_280,REF_281)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_282(F3Ddatasets.Player) -> plyr_[_pID]
REF_283(uint256) -> REF_282.gen
REF_284(F3Ddatasets.Player) -> plyr_[_pID]
REF_285(uint256) -> REF_284.gen
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_285', 'msg.value'] 
REF_283(uint256) (->plyr_) := TMP_176(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2792.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_25(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_25(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_30(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_30(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = _affCode == TMP_26
TMP_28(bool) = _affCode == msg.sender
TMP_29(bool) = TMP_27 || TMP_28
CONDITION TMP_29"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_31(F3Ddatasets.Player) -> plyr_[_pID]
REF_32(uint256) -> REF_31.laff
_affID(uint256) := REF_32(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_33(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_33(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_34(F3Ddatasets.Player) -> plyr_[_pID]
REF_35(uint256) -> REF_34.laff
TMP_30(bool) = _affID != REF_35
CONDITION TMP_30"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = determineAffID(_pID,_affID)

IRs:
TMP_31(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affID)
_affID(uint256) := TMP_31(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_32(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_32(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2792.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_14(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_14(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_25(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_25(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_15(bool) = _affCode == 0
TMP_16(bool) = _affCode == _pID
TMP_17(bool) = TMP_15 || TMP_16
CONDITION TMP_17"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_26(F3Ddatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
_affCode(uint256) := REF_27(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_28(F3Ddatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
TMP_18(bool) = _affCode != REF_29
CONDITION TMP_18"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affCode = determineAffID(_pID,_affCode)

IRs:
TMP_19(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affCode)
_affCode(uint256) := TMP_19(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_20(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_20(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 2792.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_37(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_37(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_36(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_36(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_38(bool) = _affCode == 
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(bytes32) -> REF_37.name
TMP_39(bool) = _affCode == REF_38
TMP_40(bool) = TMP_38 || TMP_39
CONDITION TMP_40"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_39(F3Ddatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
_affID(uint256) := REF_40(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_41(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_41(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
TMP_41(bool) = _affID != REF_43
CONDITION TMP_41"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = determineAffID(_pID,_affID)

IRs:
TMP_42(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affID)
_affID(uint256) := TMP_42(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_43(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_43(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2792.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.strt
TMP_242(uint256) = REF_403 + rndGap_
TMP_243(bool) = _now > TMP_242
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.end
TMP_244(bool) = _now <= REF_405
REF_406(F3Ddatasets.Round) -> round_[_rID]
REF_407(uint256) -> REF_406.end
TMP_245(bool) = _now > REF_407
REF_408(F3Ddatasets.Round) -> round_[_rID]
REF_409(uint256) -> REF_408.plyr
TMP_246(bool) = REF_409 == 0
TMP_247(bool) = TMP_245 && TMP_246
TMP_248(bool) = TMP_244 || TMP_247
TMP_249(bool) = TMP_243 && TMP_248
CONDITION TMP_249"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_410(F3Ddatasets.Round) -> round_[_rID]
REF_411(uint256) -> REF_410.eth
TMP_250(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_411', '_eth'] 
RETURN TMP_250"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_251(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_251"];
}
// Function: 2792.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_392(F3Ddatasets.Round) -> round_[_rIDlast]
REF_393(uint256) -> REF_392.mask
REF_395(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_396(F3Ddatasets.PlayerRounds) -> REF_395[_rIDlast]
REF_397(uint256) -> REF_396.keys
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_393', 'REF_397'] 
TMP_240(uint256) = TMP_239 / 1000000000000000000
REF_399(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_400(F3Ddatasets.PlayerRounds) -> REF_399[_rIDlast]
REF_401(uint256) -> REF_400.mask
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_240', 'REF_401'] 
RETURN TMP_241"];
}
// Function: 2792.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(40,0)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(40,0)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(40,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(40,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(40,0)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(40,0)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(40,0)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(40,0)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(95,0)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(95,0)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(95,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(95,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(95,0)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(95,0)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(95,0)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(95,0)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 2792.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_319(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_320(F3Ddatasets.PlayerRounds) -> REF_319[_rID]
REF_321(uint256) -> REF_320.keys
TMP_196(bool) = REF_321 == 0
CONDITION TMP_196"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_197(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_197(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_eth > 1000000000

IRs:
TMP_198(bool) = _eth > 1000000000
CONDITION TMP_198"];
4->5[label="True"];
4->52[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_322(F3Ddatasets.Round) -> round_[_rID]
REF_323(uint256) -> REF_322.eth
TMP_199(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_323', '_eth'] 
_keys(uint256) := TMP_199(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_200(bool) = _keys >= 1000000000000000000
CONDITION TMP_200"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_325(F3Ddatasets.Round) -> round_[_rID]
REF_326(uint256) -> REF_325.plyr
TMP_202(bool) = REF_326 != _pID
CONDITION TMP_202"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_327(F3Ddatasets.Round) -> round_[_rID]
REF_328(uint256) -> REF_327.plyr
REF_328(uint256) (->round_) := _pID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_329(F3Ddatasets.Round) -> round_[_rID]
REF_330(uint256) -> REF_329.team
TMP_203(bool) = REF_330 != _team
CONDITION TMP_203"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_331(F3Ddatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.team
REF_332(uint256) (->round_) := _team(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_333(uint256) -> _eventData_.compressedData
REF_334(uint256) -> _eventData_.compressedData
TMP_204(uint256) = REF_334 + 100
REF_333(uint256) (->_eventData_) := TMP_204(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_205(bool) = _eth >= 100000000000000000
CONDITION TMP_205"];
16->17[label="True"];
16->42[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_206(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
airdrop() == true

IRs:
TMP_207(bool) = INTERNAL_CALL, FoMo3Dlong.airdrop()()
TMP_208(bool) = TMP_207 == True
CONDITION TMP_208"];
18->19[label="True"];
18->41[label="False"];
19[label="Node Type: NEW VARIABLE 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_209(bool) = _eth >= 10000000000000000000
CONDITION TMP_209"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_211(uint256) = TMP_210 / 100
_prize(uint256) := TMP_211(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_336(F3Ddatasets.Player) -> plyr_[_pID]
REF_337(uint256) -> REF_336.win
REF_338(F3Ddatasets.Player) -> plyr_[_pID]
REF_339(uint256) -> REF_338.win
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_339', '_prize'] 
REF_337(uint256) (->plyr_) := TMP_212(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_213(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_342(uint256) -> _eventData_.compressedData
REF_342(-> _eventData_) = REF_342 + 300000000000000000000000000000000"];
24->37;
25[label="Node Type: IF 25

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_214(bool) = _eth >= 1000000000000000000
TMP_215(bool) = _eth < 10000000000000000000
TMP_216(bool) = TMP_214 && TMP_215
CONDITION TMP_216"];
25->26[label="True"];
25->30[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_218(uint256) = TMP_217 / 100
_prize(uint256) := TMP_218(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_344(F3Ddatasets.Player) -> plyr_[_pID]
REF_345(uint256) -> REF_344.win
REF_346(F3Ddatasets.Player) -> plyr_[_pID]
REF_347(uint256) -> REF_346.win
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_347', '_prize'] 
REF_345(uint256) (->plyr_) := TMP_219(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_220(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_350(uint256) -> _eventData_.compressedData
REF_350(-> _eventData_) = REF_350 + 200000000000000000000000000000000"];
29->36;
30[label="Node Type: IF 30

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_221(bool) = _eth >= 100000000000000000
TMP_222(bool) = _eth < 1000000000000000000
TMP_223(bool) = TMP_221 && TMP_222
CONDITION TMP_223"];
30->31[label="True"];
30->35[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_225(uint256) = TMP_224 / 100
_prize(uint256) := TMP_225(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_352(F3Ddatasets.Player) -> plyr_[_pID]
REF_353(uint256) -> REF_352.win
REF_354(F3Ddatasets.Player) -> plyr_[_pID]
REF_355(uint256) -> REF_354.win
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_355', '_prize'] 
REF_353(uint256) (->plyr_) := TMP_226(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_227(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_358(uint256) -> _eventData_.compressedData
REF_358(-> _eventData_) = REF_358 + 300000000000000000000000000000000"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_359(uint256) -> _eventData_.compressedData
REF_359(-> _eventData_) = REF_359 + 10000000000000000000000000000000"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_360(uint256) -> _eventData_.compressedData
TMP_228(uint256) = _prize * 1000000000000000000000000000000000
REF_360(-> _eventData_) = REF_360 + TMP_228"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_361(uint256) -> _eventData_.compressedData
REF_362(uint256) -> _eventData_.compressedData
TMP_229(uint256) = airDropTracker_ * 1000
TMP_230(uint256) = REF_362 + TMP_229
REF_361(uint256) (->_eventData_) := TMP_230(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_363(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_364(F3Ddatasets.PlayerRounds) -> REF_363[_rID]
REF_365(uint256) -> REF_364.keys
REF_367(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_368(F3Ddatasets.PlayerRounds) -> REF_367[_rID]
REF_369(uint256) -> REF_368.keys
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_369'] 
REF_365(uint256) (->plyrRnds_) := TMP_231(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_370(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_371(F3Ddatasets.PlayerRounds) -> REF_370[_rID]
REF_372(uint256) -> REF_371.eth
REF_374(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_375(F3Ddatasets.PlayerRounds) -> REF_374[_rID]
REF_376(uint256) -> REF_375.eth
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_376'] 
REF_372(uint256) (->plyrRnds_) := TMP_232(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_377(F3Ddatasets.Round) -> round_[_rID]
REF_378(uint256) -> REF_377.keys
REF_380(F3Ddatasets.Round) -> round_[_rID]
REF_381(uint256) -> REF_380.keys
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_381'] 
REF_378(uint256) (->round_) := TMP_233(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_382(F3Ddatasets.Round) -> round_[_rID]
REF_383(uint256) -> REF_382.eth
REF_385(F3Ddatasets.Round) -> round_[_rID]
REF_386(uint256) -> REF_385.eth
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_386'] 
REF_383(uint256) (->round_) := TMP_234(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_387(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_388(uint256) -> REF_387[_team]
REF_390(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_391(uint256) -> REF_390[_team]
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_391'] 
REF_388(uint256) (->rndTmEth_) := TMP_235(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_236(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_236(F3Ddatasets.EventReturns)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_237(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_237(F3Ddatasets.EventReturns)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
51->52;
52[label="Node Type: END_IF 52
"];
}
// Function: 2792.sol-FoMo3Dlong-determineAffID(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].laff == 0

IRs:
REF_19(F3Ddatasets.Player) -> plyr_[_pID]
REF_20(uint256) -> REF_19.laff
TMP_13(bool) = REF_20 == 0
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[_pID].laff = _inAffID

IRs:
REF_21(F3Ddatasets.Player) -> plyr_[_pID]
REF_22(uint256) -> REF_21.laff
REF_22(uint256) (->plyr_) := _inAffID(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
plyr_[_pID].laff

IRs:
REF_23(F3Ddatasets.Player) -> plyr_[_pID]
REF_24(uint256) -> REF_23.laff
RETURN REF_24"];
}
// Function: 2792.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_451(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_451(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_276(bool) = _pID == 0
CONDITION TMP_276"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_277(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_277(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_278(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_278(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_279(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_279(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_455(uint256) -> pIDxAddr_[msg.sender]
REF_455(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_456(F3Ddatasets.Player) -> plyr_[_pID]
REF_457(address) -> REF_456.addr
REF_457(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_280(bool) = _name != 
CONDITION TMP_280"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_458(uint256) -> pIDxName_[_name]
REF_458(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_459(F3Ddatasets.Player) -> plyr_[_pID]
REF_460(bytes32) -> REF_459.name
REF_460(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_461(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_462(bool) -> REF_461[_name]
REF_462(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_281(bool) = _laff != 0
TMP_282(bool) = _laff != _pID
TMP_283(bool) = TMP_281 && TMP_282
CONDITION TMP_283"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_463(F3Ddatasets.Player) -> plyr_[_pID]
REF_464(uint256) -> REF_463.laff
REF_464(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_465(uint256) -> _eventData_.compressedData
REF_466(uint256) -> _eventData_.compressedData
TMP_284(uint256) = REF_466 + 1
REF_465(uint256) (->_eventData_) := TMP_284(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2792.sol-FoMo3Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 20

IRs:
TMP_353(uint256) = _eth / 20
_com(uint256) := TMP_353(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
address(god).transfer(_com)

IRs:
TMP_354 = CONVERT god to address
Transfer dest:TMP_354 value:_com"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_aff = _eth.mul(35) / (100)

IRs:
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '35'] 
TMP_357(uint256) = TMP_356 / 100
_aff(uint256) := TMP_357(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_358(bool) = _affID != _pID
REF_567(F3Ddatasets.Player) -> plyr_[_affID]
REF_568(bytes32) -> REF_567.name
TMP_359(bool) = REF_568 != 
TMP_360(bool) = TMP_358 && TMP_359
CONDITION TMP_360"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_569(F3Ddatasets.Player) -> plyr_[_affID]
REF_570(uint256) -> REF_569.aff
REF_572(F3Ddatasets.Player) -> plyr_[_affID]
REF_573(uint256) -> REF_572.aff
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_573'] 
REF_570(uint256) (->plyr_) := TMP_361(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_575(F3Ddatasets.Player) -> plyr_[_affID]
REF_576(address) -> REF_575.addr
REF_577(F3Ddatasets.Player) -> plyr_[_affID]
REF_578(bytes32) -> REF_577.name
Emit onAffiliatePayout(_affID,REF_576,REF_578,_rID,_pID,_aff,now)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_581(F3Ddatasets.TeamFee) -> fees_[_team]
REF_582(uint256) -> REF_581.p3d
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_582'] 
TMP_364(uint256) = TMP_363 / 100
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_364'] 
_p3d(uint256) := TMP_365(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_p3d > 0

IRs:
TMP_366(bool) = _p3d > 0
CONDITION TMP_366"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
address(god).transfer(_p3d)

IRs:
TMP_367 = CONVERT god to address
Transfer dest:TMP_367 value:_p3d"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2792.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_585(F3Ddatasets.TeamFee) -> fees_[_team]
REF_586(uint256) -> REF_585.gen
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_586'] 
TMP_370(uint256) = TMP_369 / 100
_gen(uint256) := TMP_370(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = 0

IRs:
_air(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_371(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = (_eth.mul(20)) / 100

IRs:
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '20'] 
TMP_373(uint256) = TMP_372 / 100
_pot(uint256) := TMP_373(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_374(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_374(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_375(bool) = _dust > 0
CONDITION TMP_375"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_376(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_590(F3Ddatasets.Round) -> round_[_rID]
REF_591(uint256) -> REF_590.pot
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_594(F3Ddatasets.Round) -> round_[_rID]
REF_595(uint256) -> REF_594.pot
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_377', 'REF_595'] 
REF_591(uint256) (->round_) := TMP_378(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_596(uint256) -> _eventData_.genAmount
REF_598(uint256) -> _eventData_.genAmount
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_598'] 
REF_596(uint256) (->_eventData_) := TMP_379(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_599(uint256) -> _eventData_.potAmount
REF_599(uint256) (->_eventData_) := _pot(uint256)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2792.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_475(F3Ddatasets.Round) -> round_[_rID]
REF_476(uint256) -> REF_475.plyr
_winPID(uint256) := REF_476(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_477(F3Ddatasets.Round) -> round_[_rID]
REF_478(uint256) -> REF_477.team
_winTID(uint256) := REF_478(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_479(F3Ddatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.pot
_pot(uint256) := REF_480(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(95)) / 100

IRs:
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '95'] 
TMP_292(uint256) = TMP_291 / 100
_win(uint256) := TMP_292(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = 0

IRs:
_gen(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = 0

IRs:
_p3d(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_293', '_com'] 
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_294', '_gen'] 
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_295', '_p3d'] 
_res(uint256) := TMP_296(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_487(F3Ddatasets.Round) -> round_[_rID]
REF_488(uint256) -> REF_487.keys
TMP_298(uint256) = TMP_297 / REF_488
_ppt(uint256) := TMP_298(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_491(F3Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.keys
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_492'] 
TMP_300(uint256) = TMP_299 / 1000000000000000000
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_300'] 
_dust(uint256) := TMP_301(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_302(bool) = _dust > 0
CONDITION TMP_302"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_303(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_304(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_495(F3Ddatasets.Player) -> plyr_[_winPID]
REF_496(uint256) -> REF_495.win
REF_498(F3Ddatasets.Player) -> plyr_[_winPID]
REF_499(uint256) -> REF_498.win
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_499'] 
REF_496(uint256) (->plyr_) := TMP_305(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_500(F3Ddatasets.Round) -> round_[_rID]
REF_501(uint256) -> REF_500.mask
REF_503(F3Ddatasets.Round) -> round_[_rID]
REF_504(uint256) -> REF_503.mask
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_504'] 
REF_501(uint256) (->round_) := TMP_306(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_505(uint256) -> _eventData_.compressedData
REF_506(uint256) -> _eventData_.compressedData
REF_507(F3Ddatasets.Round) -> round_[_rID]
REF_508(uint256) -> REF_507.end
TMP_307(uint256) = REF_508 * 1000000
TMP_308(uint256) = REF_506 + TMP_307
REF_505(uint256) (->_eventData_) := TMP_308(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_509(uint256) -> _eventData_.compressedIDs
REF_510(uint256) -> _eventData_.compressedIDs
TMP_309(uint256) = _winPID * 100000000000000000000000000
TMP_310(uint256) = REF_510 + TMP_309
TMP_311(uint256) = _winTID * 100000000000000000
TMP_312(uint256) = TMP_310 + TMP_311
REF_509(uint256) (->_eventData_) := TMP_312(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_511(address) -> _eventData_.winnerAddr
REF_512(F3Ddatasets.Player) -> plyr_[_winPID]
REF_513(address) -> REF_512.addr
REF_511(address) (->_eventData_) := REF_513(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_514(bytes32) -> _eventData_.winnerName
REF_515(F3Ddatasets.Player) -> plyr_[_winPID]
REF_516(bytes32) -> REF_515.name
REF_514(bytes32) (->_eventData_) := REF_516(bytes32)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_517(uint256) -> _eventData_.amountWon
REF_517(uint256) (->_eventData_) := _win(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_518(uint256) -> _eventData_.genAmount
REF_518(uint256) (->_eventData_) := _gen(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_519(uint256) -> _eventData_.P3DAmount
REF_519(uint256) (->_eventData_) := _p3d(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_520(uint256) -> _eventData_.newPot
REF_520(uint256) (->_eventData_) := _res(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
rID_ ++

IRs:
TMP_313(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_rID ++

IRs:
TMP_314(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_521(F3Ddatasets.Round) -> round_[_rID]
REF_522(uint256) -> REF_521.strt
REF_522(uint256) (->round_) := now(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_523(F3Ddatasets.Round) -> round_[_rID]
REF_524(uint256) -> REF_523.end
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_315', 'rndGap_'] 
REF_524(uint256) (->round_) := TMP_316(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_527(F3Ddatasets.Round) -> round_[_rID]
REF_528(uint256) -> REF_527.pot
REF_528(uint256) (->round_) := _res(uint256)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2792.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_640(uint256) -> _eventData_.compressedData
REF_641(uint256) -> _eventData_.compressedData
TMP_396(uint256) = now * 1000000000000000000
TMP_397(uint256) = REF_641 + TMP_396
TMP_398(uint256) = _team * 100000000000000000000000000000
TMP_399(uint256) = TMP_397 + TMP_398
REF_640(uint256) (->_eventData_) := TMP_399(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_642(uint256) -> _eventData_.compressedIDs
REF_643(uint256) -> _eventData_.compressedIDs
TMP_400(uint256) = REF_643 + _pID
TMP_401(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_402(uint256) = TMP_400 + TMP_401
REF_642(uint256) (->_eventData_) := TMP_402(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_645(uint256) -> _eventData_.compressedData
REF_646(uint256) -> _eventData_.compressedIDs
REF_647(F3Ddatasets.Player) -> plyr_[_pID]
REF_648(bytes32) -> REF_647.name
REF_649(address) -> _eventData_.winnerAddr
REF_650(bytes32) -> _eventData_.winnerName
REF_651(uint256) -> _eventData_.amountWon
REF_652(uint256) -> _eventData_.newPot
REF_653(uint256) -> _eventData_.P3DAmount
REF_654(uint256) -> _eventData_.genAmount
REF_655(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_645,REF_646,REF_648,msg.sender,_eth,_keys,REF_649,REF_650,REF_651,REF_652,REF_653,REF_654,REF_655,airDropPot_)"];
}
// Function: 2792.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2792.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_123(F3Ddatasets.Round) -> round_[_rID]
REF_124(uint256) -> REF_123.strt
TMP_110(uint256) = REF_124 + rndGap_
TMP_111(bool) = _now > TMP_110
REF_125(F3Ddatasets.Round) -> round_[_rID]
REF_126(uint256) -> REF_125.end
TMP_112(bool) = _now <= REF_126
REF_127(F3Ddatasets.Round) -> round_[_rID]
REF_128(uint256) -> REF_127.end
TMP_113(bool) = _now > REF_128
REF_129(F3Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.plyr
TMP_114(bool) = REF_130 == 0
TMP_115(bool) = TMP_113 && TMP_114
TMP_116(bool) = TMP_112 || TMP_115
TMP_117(bool) = TMP_111 && TMP_116
CONDITION TMP_117"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.keys
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_132', '1000000000000000000'] 
TMP_119(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_118', '1000000000000000000'] 
RETURN TMP_119"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2792.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_205(F3Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.ico
REF_207(F3Ddatasets.Round) -> round_[_rID]
REF_208(uint256) -> REF_207.keys
REF_209(F3Ddatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.end
REF_211(F3Ddatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.strt
REF_213(F3Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.pot
REF_215(F3Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.team
REF_217(F3Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.plyr
TMP_150(uint256) = REF_218 * 10
TMP_151(uint256) = REF_216 + TMP_150
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.plyr
REF_221(F3Ddatasets.Player) -> plyr_[REF_220]
REF_222(address) -> REF_221.addr
REF_223(F3Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.plyr
REF_225(F3Ddatasets.Player) -> plyr_[REF_224]
REF_226(bytes32) -> REF_225.name
REF_227(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_228(uint256) -> REF_227[0]
REF_229(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_230(uint256) -> REF_229[1]
REF_231(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_232(uint256) -> REF_231[2]
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[3]
TMP_152(uint256) = airDropPot_ * 1000
TMP_153(uint256) = airDropTracker_ + TMP_152
RETURN REF_206,_rID,REF_208,REF_210,REF_212,REF_214,TMP_151,REF_222,REF_226,REF_228,REF_230,REF_232,REF_234,TMP_153"];
}
// Function: 2792.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_154 = CONVERT 0 to address
TMP_155(bool) = _addr == TMP_154
CONDITION TMP_155"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_156(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_235(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_235(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_236(F3Ddatasets.Player) -> plyr_[_pID]
REF_237(bytes32) -> REF_236.name
REF_238(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_239(F3Ddatasets.PlayerRounds) -> REF_238[_rID]
REF_240(uint256) -> REF_239.keys
REF_241(F3Ddatasets.Player) -> plyr_[_pID]
REF_242(uint256) -> REF_241.win
REF_243(F3Ddatasets.Player) -> plyr_[_pID]
REF_244(uint256) -> REF_243.gen
REF_246(F3Ddatasets.Player) -> plyr_[_pID]
REF_247(uint256) -> REF_246.lrnd
TMP_157(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_247)
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_244', 'TMP_157'] 
REF_248(F3Ddatasets.Player) -> plyr_[_pID]
REF_249(uint256) -> REF_248.aff
REF_250(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_251(F3Ddatasets.PlayerRounds) -> REF_250[_rID]
REF_252(uint256) -> REF_251.eth
RETURN _pID,REF_237,REF_240,REF_242,TMP_158,REF_249,REF_252"];
}
// Function: 2792.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_145(F3Ddatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_126(bool) = now > REF_146
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(bool) -> REF_147.ended
TMP_127(bool) = REF_148 == False
TMP_128(bool) = TMP_126 && TMP_127
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.plyr
TMP_129(bool) = REF_150 != 0
TMP_130(bool) = TMP_128 && TMP_129
CONDITION TMP_130"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.plyr
TMP_131(bool) = REF_152 == _pID
CONDITION TMP_131"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_153(F3Ddatasets.Player) -> plyr_[_pID]
REF_154(uint256) -> REF_153.win
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(uint256) -> REF_156.pot
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_157', '48'] 
TMP_133(uint256) = TMP_132 / 100
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_154', 'TMP_133'] 
REF_159(F3Ddatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.gen
TMP_135(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_163(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_164(F3Ddatasets.PlayerRounds) -> REF_163[_rID]
REF_165(uint256) -> REF_164.mask
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_135', 'REF_165'] 
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_136'] 
REF_166(F3Ddatasets.Player) -> plyr_[_pID]
REF_167(uint256) -> REF_166.aff
RETURN TMP_134,TMP_137,REF_167"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_168(F3Ddatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.win
REF_170(F3Ddatasets.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.gen
TMP_138(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_174(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_175(F3Ddatasets.PlayerRounds) -> REF_174[_rID]
REF_176(uint256) -> REF_175.mask
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_138', 'REF_176'] 
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_171', 'TMP_139'] 
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(uint256) -> REF_177.aff
RETURN REF_169,TMP_140,REF_178"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_179(F3Ddatasets.Player) -> plyr_[_pID]
REF_180(uint256) -> REF_179.win
REF_181(F3Ddatasets.Player) -> plyr_[_pID]
REF_182(uint256) -> REF_181.gen
REF_184(F3Ddatasets.Player) -> plyr_[_pID]
REF_185(uint256) -> REF_184.lrnd
TMP_141(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_185)
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_182', 'TMP_141'] 
REF_186(F3Ddatasets.Player) -> plyr_[_pID]
REF_187(uint256) -> REF_186.aff
RETURN REF_180,TMP_142,REF_187"];
}
// Function: 2792.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_188(F3Ddatasets.Round) -> round_[_rID]
REF_189(uint256) -> REF_188.mask
REF_191(F3Ddatasets.Round) -> round_[_rID]
REF_192(uint256) -> REF_191.pot
REF_194(F3Ddatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.team
REF_196(F3Ddatasets.PotSplit) -> potSplit_[REF_195]
REF_197(uint256) -> REF_196.gen
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_192', 'REF_197'] 
TMP_144(uint256) = TMP_143 / 100
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_144', '1000000000000000000'] 
REF_199(F3Ddatasets.Round) -> round_[_rID]
REF_200(uint256) -> REF_199.keys
TMP_146(uint256) = TMP_145 / REF_200
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_189', 'TMP_146'] 
REF_202(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_203(F3Ddatasets.PlayerRounds) -> REF_202[_rID]
REF_204(uint256) -> REF_203.keys
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_147', 'REF_204'] 
TMP_149(uint256) = TMP_148 / 1000000000000000000
RETURN TMP_149"];
}
// Function: 2792.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.end
TMP_120(bool) = _now < REF_136
CONDITION TMP_120"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.strt
TMP_121(uint256) = REF_138 + rndGap_
TMP_122(bool) = _now > TMP_121
CONDITION TMP_122"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.end
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_140', '_now'] 
RETURN TMP_123"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_142(F3Ddatasets.Round) -> round_[_rID]
REF_143(uint256) -> REF_142.strt
TMP_124(uint256) = REF_143 + rndGap_
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_124', '_now'] 
RETURN TMP_125"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2792.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_414(F3Ddatasets.Round) -> round_[_rID]
REF_415(uint256) -> REF_414.strt
TMP_252(uint256) = REF_415 + rndGap_
TMP_253(bool) = _now > TMP_252
REF_416(F3Ddatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.end
TMP_254(bool) = _now <= REF_417
REF_418(F3Ddatasets.Round) -> round_[_rID]
REF_419(uint256) -> REF_418.end
TMP_255(bool) = _now > REF_419
REF_420(F3Ddatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.plyr
TMP_256(bool) = REF_421 == 0
TMP_257(bool) = TMP_255 && TMP_256
TMP_258(bool) = TMP_254 || TMP_257
TMP_259(bool) = TMP_253 && TMP_258
CONDITION TMP_259"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_422(F3Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.keys
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_423', '_keys'] 
TMP_261(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_260', '_keys'] 
RETURN TMP_261"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_262(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_262"];
}
// Function: 2792.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_413(bool) = activated_ == True
TMP_414(None) = SOLIDITY_CALL require(bool,string)(TMP_413,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2792.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_415(bool) = _codeLength == 0
TMP_416(None) = SOLIDITY_CALL require(bool,string)(TMP_415,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2792.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_417(bool) = _eth >= 1000000000
TMP_418(None) = SOLIDITY_CALL require(bool,string)(TMP_417,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_419(bool) = _eth <= 100000000000000000000000
TMP_420(None) = SOLIDITY_CALL require(bool,string)(TMP_419,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2792.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_467(F3Ddatasets.Player) -> plyr_[_pID]
REF_468(uint256) -> REF_467.lrnd
TMP_288(bool) = REF_468 != 0
CONDITION TMP_288"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_469(F3Ddatasets.Player) -> plyr_[_pID]
REF_470(uint256) -> REF_469.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_470)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_471(F3Ddatasets.Player) -> plyr_[_pID]
REF_472(uint256) -> REF_471.lrnd
REF_472(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_473(uint256) -> _eventData_.compressedData
REF_474(uint256) -> _eventData_.compressedData
TMP_290(uint256) = REF_474 + 10
REF_473(uint256) (->_eventData_) := TMP_290(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2792.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_287(F3Ddatasets.Round) -> round_[_rID]
REF_288(uint256) -> REF_287.strt
TMP_177(uint256) = REF_288 + rndGap_
TMP_178(bool) = _now > TMP_177
REF_289(F3Ddatasets.Round) -> round_[_rID]
REF_290(uint256) -> REF_289.end
TMP_179(bool) = _now <= REF_290
REF_291(F3Ddatasets.Round) -> round_[_rID]
REF_292(uint256) -> REF_291.end
TMP_180(bool) = _now > REF_292
REF_293(F3Ddatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.plyr
TMP_181(bool) = REF_294 == 0
TMP_182(bool) = TMP_180 && TMP_181
TMP_183(bool) = TMP_179 || TMP_182
TMP_184(bool) = TMP_178 && TMP_183
CONDITION TMP_184"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_295(F3Ddatasets.Player) -> plyr_[_pID]
REF_296(uint256) -> REF_295.gen
TMP_185(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_185', '_eth'] 
REF_296(uint256) (->plyr_) := TMP_186(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_298(F3Ddatasets.Round) -> round_[_rID]
REF_299(uint256) -> REF_298.end
TMP_188(bool) = _now > REF_299
REF_300(F3Ddatasets.Round) -> round_[_rID]
REF_301(bool) -> REF_300.ended
TMP_189(bool) = REF_301 == False
TMP_190(bool) = TMP_188 && TMP_189
CONDITION TMP_190"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_302(F3Ddatasets.Round) -> round_[_rID]
REF_303(bool) -> REF_302.ended
REF_303(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_191(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_191(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_304(uint256) -> _eventData_.compressedData
REF_305(uint256) -> _eventData_.compressedData
TMP_192(uint256) = _now * 1000000000000000000
TMP_193(uint256) = REF_305 + TMP_192
REF_304(uint256) (->_eventData_) := TMP_193(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_306(uint256) -> _eventData_.compressedIDs
REF_307(uint256) -> _eventData_.compressedIDs
TMP_194(uint256) = REF_307 + _pID
REF_306(uint256) (->_eventData_) := TMP_194(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_309(F3Ddatasets.Player) -> plyr_[_pID]
REF_310(bytes32) -> REF_309.name
REF_311(uint256) -> _eventData_.compressedData
REF_312(uint256) -> _eventData_.compressedIDs
REF_313(address) -> _eventData_.winnerAddr
REF_314(bytes32) -> _eventData_.winnerName
REF_315(uint256) -> _eventData_.amountWon
REF_316(uint256) -> _eventData_.newPot
REF_317(uint256) -> _eventData_.P3DAmount
REF_318(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_310,REF_311,REF_312,REF_313,REF_314,REF_315,REF_316,REF_317,REF_318)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2792.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_49(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_49(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_58 = CONVERT 0 to address
TMP_59(bool) = _affCode == TMP_58
TMP_60(bool) = _affCode == msg.sender
TMP_61(bool) = TMP_59 || TMP_60
CONDITION TMP_61"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_50(F3Ddatasets.Player) -> plyr_[_pID]
REF_51(uint256) -> REF_50.laff
_affID(uint256) := REF_51(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_52(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_52(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_53(F3Ddatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
TMP_62(bool) = _affID != REF_54
CONDITION TMP_62"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = determineAffID(_pID,_affID)

IRs:
TMP_63(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affID)
_affID(uint256) := TMP_63(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_64(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_64(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2792.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_48(bool) = _affCode == 0
TMP_49(bool) = _affCode == _pID
TMP_50(bool) = TMP_48 || TMP_49
CONDITION TMP_50"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_51(bool) = _affCode != REF_48
CONDITION TMP_51"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affCode = determineAffID(_pID,_affCode)

IRs:
TMP_52(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affCode)
_affCode(uint256) := TMP_52(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_53(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_53(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 2792.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_55(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_55(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_69(bool) = _affCode == 
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(bytes32) -> REF_56.name
TMP_70(bool) = _affCode == REF_57
TMP_71(bool) = TMP_69 || TMP_70
CONDITION TMP_71"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
_affID(uint256) := REF_59(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_60(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_60(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
TMP_72(bool) = _affID != REF_62
CONDITION TMP_72"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = determineAffID(_pID,_affID)

IRs:
TMP_73(uint256) = INTERNAL_CALL, FoMo3Dlong.determineAffID(uint256,uint256)(_pID,_affID)
_affID(uint256) := TMP_73(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_74(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_74(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2792.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_263 = CONVERT PlayerBook to address
TMP_264(bool) = msg.sender == TMP_263
TMP_265(None) = SOLIDITY_CALL require(bool,string)(TMP_264,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_427(uint256) -> pIDxAddr_[_addr]
TMP_266(bool) = REF_427 != _pID
CONDITION TMP_266"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_428(uint256) -> pIDxAddr_[_addr]
REF_428(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_429(uint256) -> pIDxName_[_name]
TMP_267(bool) = REF_429 != _pID
CONDITION TMP_267"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_430(uint256) -> pIDxName_[_name]
REF_430(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_431(F3Ddatasets.Player) -> plyr_[_pID]
REF_432(address) -> REF_431.addr
TMP_268(bool) = REF_432 != _addr
CONDITION TMP_268"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_433(F3Ddatasets.Player) -> plyr_[_pID]
REF_434(address) -> REF_433.addr
REF_434(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_435(F3Ddatasets.Player) -> plyr_[_pID]
REF_436(bytes32) -> REF_435.name
TMP_269(bool) = REF_436 != _name
CONDITION TMP_269"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_437(F3Ddatasets.Player) -> plyr_[_pID]
REF_438(bytes32) -> REF_437.name
REF_438(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_439(F3Ddatasets.Player) -> plyr_[_pID]
REF_440(uint256) -> REF_439.laff
TMP_270(bool) = REF_440 != _laff
CONDITION TMP_270"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_441(F3Ddatasets.Player) -> plyr_[_pID]
REF_442(uint256) -> REF_441.laff
REF_442(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_443(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_444(bool) -> REF_443[_name]
TMP_271(bool) = REF_444 == False
CONDITION TMP_271"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_445(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_446(bool) -> REF_445[_name]
REF_446(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2792.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_272 = CONVERT PlayerBook to address
TMP_273(bool) = msg.sender == TMP_272
TMP_274(None) = SOLIDITY_CALL require(bool,string)(TMP_273,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_447(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_448(bool) -> REF_447[_name]
TMP_275(bool) = REF_448 == False
CONDITION TMP_275"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_449(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_450(bool) -> REF_449[_name]
REF_450(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2792.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_98(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_98(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_99(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_99(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_affID]
REF_102(address) -> REF_101.addr
REF_103(F3Ddatasets.Player) -> plyr_[_affID]
REF_104(bytes32) -> REF_103.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_102,REF_104,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 2792.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_102(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_102(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_108(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_108(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_110(F3Ddatasets.Player) -> plyr_[_affID]
REF_111(address) -> REF_110.addr
REF_112(F3Ddatasets.Player) -> plyr_[_affID]
REF_113(bytes32) -> REF_112.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_111,REF_113,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 2792.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_106(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_106(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_117(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_117(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_119(F3Ddatasets.Player) -> plyr_[_affID]
REF_120(address) -> REF_119.addr
REF_121(F3Ddatasets.Player) -> plyr_[_affID]
REF_122(bytes32) -> REF_121.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_120,REF_122,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 2792.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
god = 0xe1B35fEBaB9Ff6da5b29C3A7A44eef06cD86B0f9

IRs:
god(address) := 1288523112687549187391205813325129093386487640313(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PlayerBook = PlayerBookInterface(0x99a1cac09c1c07037c3c7b821ce4ddc4a9fe564d)

IRs:
TMP_412 = CONVERT 877083670136488635830952691409950105463739536973 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_412(PlayerBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = FM3D More Award~

IRs:
name(string) := FM3D More Award~(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = F3D

IRs:
symbol(string) := F3D(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 28800

IRs:
rndMax_(uint256) := 28800(uint256)"];
}
// Function: 2792.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 600

IRs:
rndExtra_(uint256) := 600(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 1800

IRs:
rndGap_(uint256) := 1800(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2792.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_317(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_317(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_318(bool) = _earnings > 0
CONDITION TMP_318"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_529(F3Ddatasets.Player) -> plyr_[_pID]
REF_530(uint256) -> REF_529.gen
REF_532(F3Ddatasets.Player) -> plyr_[_pID]
REF_533(uint256) -> REF_532.gen
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_533'] 
REF_530(uint256) (->plyr_) := TMP_319(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_534(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_535(F3Ddatasets.PlayerRounds) -> REF_534[_rIDlast]
REF_536(uint256) -> REF_535.mask
REF_538(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_539(F3Ddatasets.PlayerRounds) -> REF_538[_rIDlast]
REF_540(uint256) -> REF_539.mask
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_540'] 
REF_536(uint256) (->plyrRnds_) := TMP_320(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2792.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_601(F3Ddatasets.Round) -> round_[_rID]
REF_602(uint256) -> REF_601.keys
TMP_381(uint256) = TMP_380 / REF_602
_ppt(uint256) := TMP_381(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(uint256) -> REF_603.mask
REF_606(F3Ddatasets.Round) -> round_[_rID]
REF_607(uint256) -> REF_606.mask
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_607'] 
REF_604(uint256) (->round_) := TMP_382(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_384(uint256) = TMP_383 / 1000000000000000000
_pearn(uint256) := TMP_384(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_609(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_610(F3Ddatasets.PlayerRounds) -> REF_609[_rID]
REF_611(uint256) -> REF_610.mask
REF_612(F3Ddatasets.Round) -> round_[_rID]
REF_613(uint256) -> REF_612.mask
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_613', '_keys'] 
TMP_386(uint256) = TMP_385 / 1000000000000000000
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_386', '_pearn'] 
REF_617(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_618(F3Ddatasets.PlayerRounds) -> REF_617[_rID]
REF_619(uint256) -> REF_618.mask
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_387', 'REF_619'] 
REF_611(uint256) (->plyrRnds_) := TMP_388(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_622(F3Ddatasets.Round) -> round_[_rID]
REF_623(uint256) -> REF_622.keys
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_623'] 
TMP_390(uint256) = TMP_389 / 1000000000000000000
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_390'] 
RETURN TMP_391"];
}
// Function: 2792.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_541(F3Ddatasets.Round) -> round_[_rID]
REF_542(uint256) -> REF_541.end
TMP_321(bool) = _now > REF_542
REF_543(F3Ddatasets.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.plyr
TMP_322(bool) = REF_544 == 0
TMP_323(bool) = TMP_321 && TMP_322
CONDITION TMP_323"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_324(uint256) = _keys / 1000000000000000000
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_324', 'rndInc_'] 
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_325', '_now'] 
_newTime(uint256) := TMP_326(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_327(uint256) = _keys / 1000000000000000000
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_327', 'rndInc_'] 
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.end
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_328', 'REF_550'] 
_newTime(uint256) := TMP_329(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_331(bool) = _newTime < TMP_330
CONDITION TMP_331"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_552(F3Ddatasets.Round) -> round_[_rID]
REF_553(uint256) -> REF_552.end
REF_553(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_554(F3Ddatasets.Round) -> round_[_rID]
REF_555(uint256) -> REF_554.end
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_555(uint256) (->round_) := TMP_332(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 2792.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_285(bool) = _team < 0
TMP_286(bool) = _team > 3
TMP_287(bool) = TMP_285 || TMP_286
CONDITION TMP_287"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2792.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_63(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_63(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_64(F3Ddatasets.Round) -> round_[_rID]
REF_65(uint256) -> REF_64.end
TMP_79(bool) = _now > REF_65
REF_66(F3Ddatasets.Round) -> round_[_rID]
REF_67(bool) -> REF_66.ended
TMP_80(bool) = REF_67 == False
TMP_81(bool) = TMP_79 && TMP_80
REF_68(F3Ddatasets.Round) -> round_[_rID]
REF_69(uint256) -> REF_68.plyr
TMP_82(bool) = REF_69 != 0
TMP_83(bool) = TMP_81 && TMP_82
CONDITION TMP_83"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(bool) -> REF_70.ended
REF_71(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_84(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_84(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_85(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_85(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_86(bool) = _eth > 0
CONDITION TMP_86"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_72(F3Ddatasets.Player) -> plyr_[_pID]
REF_73(address) -> REF_72.addr
Transfer dest:REF_73 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_75(uint256) -> _eventData_.compressedData
REF_76(uint256) -> _eventData_.compressedData
TMP_88(uint256) = _now * 1000000000000000000
TMP_89(uint256) = REF_76 + TMP_88
REF_75(uint256) (->_eventData_) := TMP_89(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_77(uint256) -> _eventData_.compressedIDs
REF_78(uint256) -> _eventData_.compressedIDs
TMP_90(uint256) = REF_78 + _pID
REF_77(uint256) (->_eventData_) := TMP_90(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_80(F3Ddatasets.Player) -> plyr_[_pID]
REF_81(bytes32) -> REF_80.name
REF_82(uint256) -> _eventData_.compressedData
REF_83(uint256) -> _eventData_.compressedIDs
REF_84(address) -> _eventData_.winnerAddr
REF_85(bytes32) -> _eventData_.winnerName
REF_86(uint256) -> _eventData_.amountWon
REF_87(uint256) -> _eventData_.newPot
REF_88(uint256) -> _eventData_.P3DAmount
REF_89(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_81,_eth,REF_82,REF_83,REF_84,REF_85,REF_86,REF_87,REF_88,REF_89)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_92(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_92(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_93(bool) = _eth > 0
CONDITION TMP_93"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_90(F3Ddatasets.Player) -> plyr_[_pID]
REF_91(address) -> REF_90.addr
Transfer dest:REF_91 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_94(F3Ddatasets.Player) -> plyr_[_pID]
REF_95(bytes32) -> REF_94.name
Emit onWithdraw(_pID,msg.sender,REF_95,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
}
// Function: 2792.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_624(F3Ddatasets.Player) -> plyr_[_pID]
REF_625(uint256) -> REF_624.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_625)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_626(F3Ddatasets.Player) -> plyr_[_pID]
REF_627(uint256) -> REF_626.win
REF_629(F3Ddatasets.Player) -> plyr_[_pID]
REF_630(uint256) -> REF_629.gen
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_627', 'REF_630'] 
REF_632(F3Ddatasets.Player) -> plyr_[_pID]
REF_633(uint256) -> REF_632.aff
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_393', 'REF_633'] 
_earnings(uint256) := TMP_394(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_395(bool) = _earnings > 0
CONDITION TMP_395"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_634(F3Ddatasets.Player) -> plyr_[_pID]
REF_635(uint256) -> REF_634.win
REF_635(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_636(F3Ddatasets.Player) -> plyr_[_pID]
REF_637(uint256) -> REF_636.gen
REF_637(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_638(F3Ddatasets.Player) -> plyr_[_pID]
REF_639(uint256) -> REF_638.aff
REF_639(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2792.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_443 = CONVERT _input to bytes
_temp(bytes) := TMP_443(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_675 -> LENGTH _temp
_length(uint256) := REF_675(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_444(bool) = _length <= 32
TMP_445(bool) = _length > 0
TMP_446(bool) = TMP_444 && TMP_445
TMP_447(None) = SOLIDITY_CALL require(bool,string)(TMP_446,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_676(None) -> _temp[0]
TMP_448(bool) = REF_676 != 32
TMP_449(uint256) = _length - 1
REF_677(None) -> _temp[TMP_449]
TMP_450(bool) = REF_677 != 32
TMP_451(bool) = TMP_448 && TMP_450
TMP_452(None) = SOLIDITY_CALL require(bool,string)(TMP_451,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_678(None) -> _temp[0]
TMP_453(bool) = REF_678 == 48
CONDITION TMP_453"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_679(None) -> _temp[1]
TMP_454(bool) = REF_679 != 120
TMP_455(None) = SOLIDITY_CALL require(bool,string)(TMP_454,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_680(None) -> _temp[1]
TMP_456(bool) = REF_680 != 88
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_458(bool) = i < _length
CONDITION TMP_458"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_681(None) -> _temp[i]
TMP_459(bool) = REF_681 > 64
REF_682(None) -> _temp[i]
TMP_460(bool) = REF_682 < 91
TMP_461(bool) = TMP_459 && TMP_460
CONDITION TMP_461"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_683(bytes1) -> _temp[i]
REF_684(None) -> _temp[i]
TMP_462 = CONVERT REF_684 to uint256
TMP_463(uint256) = TMP_462 + 32
TMP_464 = CONVERT TMP_463 to bytes1
REF_683(bytes1) (->_temp) := TMP_464(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_465(bool) = _hasNonNumber == False
CONDITION TMP_465"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_685(None) -> _temp[i]
TMP_466(bool) = REF_685 == 32
REF_686(None) -> _temp[i]
TMP_467(bool) = REF_686 > 96
REF_687(None) -> _temp[i]
TMP_468(bool) = REF_687 < 123
TMP_469(bool) = TMP_467 && TMP_468
TMP_470(bool) = TMP_466 || TMP_469
REF_688(None) -> _temp[i]
TMP_471(bool) = REF_688 > 47
REF_689(None) -> _temp[i]
TMP_472(bool) = REF_689 < 58
TMP_473(bool) = TMP_471 && TMP_472
TMP_474(bool) = TMP_470 || TMP_473
TMP_475(None) = SOLIDITY_CALL require(bool,string)(TMP_474,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_690(None) -> _temp[i]
TMP_476(bool) = REF_690 == 32
CONDITION TMP_476"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_477(uint256) = i + 1
REF_691(None) -> _temp[TMP_477]
TMP_478(bool) = REF_691 != 32
TMP_479(None) = SOLIDITY_CALL require(bool,string)(TMP_478,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_480(bool) = _hasNonNumber == False
REF_692(None) -> _temp[i]
TMP_481(bool) = REF_692 < 48
REF_693(None) -> _temp[i]
TMP_482(bool) = REF_693 > 57
TMP_483(bool) = TMP_481 || TMP_482
TMP_484(bool) = TMP_480 && TMP_483
CONDITION TMP_484"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_485(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_486(bool) = _hasNonNumber == True
TMP_487(None) = SOLIDITY_CALL require(bool,string)(TMP_486,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2792.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2792.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2792.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2792.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2792.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2792.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2792.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2792.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2792.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_496(uint256) = a + b
c(uint256) := TMP_496(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_497(bool) = c >= a
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2792.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_488(bool) = a == 0
CONDITION TMP_488"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_489(uint256) = a * b
c(uint256) := TMP_489(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_490(uint256) = c / a
TMP_491(bool) = TMP_490 == b
TMP_492(None) = SOLIDITY_CALL require(bool,string)(TMP_491,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2792.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_506(bool) = x == 0
CONDITION TMP_506"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_507(bool) = y == 0
CONDITION TMP_507"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_508(bool) = i < y
CONDITION TMP_508"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_509(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_509(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_510(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2792.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_505(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_505"];
}
// Function: 2792.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_499(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_500(uint256) = TMP_499 / 2
z(uint256) := TMP_500(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_501(bool) = z < y
CONDITION TMP_501"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_502(uint256) = x / z
TMP_503(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_502,z)
TMP_504(uint256) = TMP_503 / 2
z(uint256) := TMP_504(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2792.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_493(bool) = b <= a
TMP_494(None) = SOLIDITY_CALL require(bool,string)(TMP_493,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_495(uint256) = a - b
RETURN TMP_495"];
}
}
