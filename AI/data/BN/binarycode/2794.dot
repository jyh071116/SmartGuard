digraph G {
// Function: 2794.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_101'] 
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_103'] 
TMP_105(uint256) = TMP_104 / 2
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_102', 'TMP_105'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_108(uint256) = TMP_106 / TMP_107
RETURN TMP_108"];
}
// Function: 2794.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_91(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_93(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_92)
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_91', 'TMP_93'] 
RETURN TMP_94"];
}
// Function: 2794.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_95', '312500000000000000000000000'] 
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_96', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_97'] 
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_98', '74999921875000000000000000000000'] 
TMP_100(uint256) = TMP_99 / 156250000
RETURN TMP_100"];
}
// Function: 2794.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_88(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_87)
TMP_89(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_88', 'TMP_89'] 
RETURN TMP_90"];
}
// Function: 2794.sol-F3DexternalSettingsInterface-getFastExtra()
digraph{
}
// Function: 2794.sol-F3DexternalSettingsInterface-getFastGap()
digraph{
}
// Function: 2794.sol-F3DexternalSettingsInterface-getLongExtra()
digraph{
}
// Function: 2794.sol-F3DexternalSettingsInterface-getLongGap()
digraph{
}
// Function: 2794.sol-FoMo3DlongUnlimited-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == DEV_1_ADDRESS,only team just can activate)

IRs:
TMP_831(bool) = msg.sender == DEV_1_ADDRESS
TMP_832(None) = SOLIDITY_CALL require(bool,string)(TMP_831,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(otherF3D_) != address(0),must link to other FoMo3D first)

IRs:
TMP_833 = CONVERT otherF3D_ to address
TMP_834 = CONVERT 0 to address
TMP_835(bool) = TMP_833 != TMP_834
TMP_836(None) = SOLIDITY_CALL require(bool,string)(TMP_835,must link to other FoMo3D first)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_837(bool) = activated_ == False
TMP_838(None) = SOLIDITY_CALL require(bool,string)(TMP_837,fomo3d already activated)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_1039(F3Ddatasets.Round) -> round_[1]
REF_1040(uint256) -> REF_1039.strt
TMP_839(uint256) = now + rndExtra_
TMP_840(uint256) = TMP_839 - rndGap_
REF_1040(uint256) (->round_) := TMP_840(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_1041(F3Ddatasets.Round) -> round_[1]
REF_1042(uint256) -> REF_1041.end
TMP_841(uint256) = now + rndInit_
TMP_842(uint256) = TMP_841 + rndExtra_
REF_1042(uint256) (->round_) := TMP_842(uint256)"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_744(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_745(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_746(bytes32) = SOLIDITY_CALL keccak256()(TMP_745)
TMP_747 = CONVERT TMP_746 to uint256
TMP_748(uint256) = TMP_747 / now
TMP_749(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_744', 'TMP_748'] 
TMP_750(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_749', 'block.gaslimit'] 
TMP_751(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_752(bytes32) = SOLIDITY_CALL keccak256()(TMP_751)
TMP_753 = CONVERT TMP_752 to uint256
TMP_754(uint256) = TMP_753 / now
TMP_755(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_750', 'TMP_754'] 
TMP_756(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_755', 'block.number'] 
TMP_757(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_756)
TMP_758(bytes32) = SOLIDITY_CALL keccak256()(TMP_757)
TMP_759 = CONVERT TMP_758 to uint256
seed(uint256) := TMP_759(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_760(uint256) = seed / 1000
TMP_761(uint256) = TMP_760 * 1000
TMP_762(uint256) = seed - TMP_761
TMP_763(bool) = TMP_762 < airDropTracker_
CONDITION TMP_763"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.strt
TMP_548(uint256) = REF_592 + rndGap_
TMP_549(bool) = _now > TMP_548
REF_593(F3Ddatasets.Round) -> round_[_rID]
REF_594(uint256) -> REF_593.end
TMP_550(bool) = _now <= REF_594
REF_595(F3Ddatasets.Round) -> round_[_rID]
REF_596(uint256) -> REF_595.end
TMP_551(bool) = _now > REF_596
REF_597(F3Ddatasets.Round) -> round_[_rID]
REF_598(uint256) -> REF_597.plyr
TMP_552(bool) = REF_598 == 0
TMP_553(bool) = TMP_551 && TMP_552
TMP_554(bool) = TMP_550 || TMP_553
TMP_555(bool) = TMP_549 && TMP_554
CONDITION TMP_555"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_599(F3Ddatasets.Round) -> round_[_rID]
REF_600(uint256) -> REF_599.end
TMP_557(bool) = _now > REF_600
REF_601(F3Ddatasets.Round) -> round_[_rID]
REF_602(bool) -> REF_601.ended
TMP_558(bool) = REF_602 == False
TMP_559(bool) = TMP_557 && TMP_558
CONDITION TMP_559"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(bool) -> REF_603.ended
REF_604(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_560(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_560(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_605(uint256) -> _eventData_.compressedData
REF_606(uint256) -> _eventData_.compressedData
TMP_561(uint256) = _now * 1000000000000000000
TMP_562(uint256) = REF_606 + TMP_561
REF_605(uint256) (->_eventData_) := TMP_562(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_607(uint256) -> _eventData_.compressedIDs
REF_608(uint256) -> _eventData_.compressedIDs
TMP_563(uint256) = REF_608 + _pID
REF_607(uint256) (->_eventData_) := TMP_563(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_610(F3Ddatasets.Player) -> plyr_[_pID]
REF_611(bytes32) -> REF_610.name
REF_612(uint256) -> _eventData_.compressedData
REF_613(uint256) -> _eventData_.compressedIDs
REF_614(address) -> _eventData_.winnerAddr
REF_615(bytes32) -> _eventData_.winnerName
REF_616(uint256) -> _eventData_.amountWon
REF_617(uint256) -> _eventData_.newPot
REF_618(uint256) -> _eventData_.P3DAmount
REF_619(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_611,msg.value,REF_612,REF_613,REF_614,REF_615,REF_616,REF_617,REF_618,REF_619)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_620(F3Ddatasets.Player) -> plyr_[_pID]
REF_621(uint256) -> REF_620.gen
REF_622(F3Ddatasets.Player) -> plyr_[_pID]
REF_623(uint256) -> REF_622.gen
TMP_565(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_623', 'msg.value'] 
REF_621(uint256) (->plyr_) := TMP_565(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_419(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_419(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_358(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_358(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_420 = CONVERT 0 to address
TMP_421(bool) = _affCode == TMP_420
TMP_422(bool) = _affCode == msg.sender
TMP_423(bool) = TMP_421 || TMP_422
CONDITION TMP_423"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_359(F3Ddatasets.Player) -> plyr_[_pID]
REF_360(uint256) -> REF_359.laff
_affID(uint256) := REF_360(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_361(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_361(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_362(F3Ddatasets.Player) -> plyr_[_pID]
REF_363(uint256) -> REF_362.laff
TMP_424(bool) = _affID != REF_363
CONDITION TMP_424"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_364(F3Ddatasets.Player) -> plyr_[_pID]
REF_365(uint256) -> REF_364.laff
REF_365(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_425(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.verifyTeam(uint256)(_team)
_team(uint256) := TMP_425(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_409(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_409(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_351(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_351(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_410(bool) = _affCode == 0
TMP_411(bool) = _affCode == _pID
TMP_412(bool) = TMP_410 || TMP_411
CONDITION TMP_412"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_352(F3Ddatasets.Player) -> plyr_[_pID]
REF_353(uint256) -> REF_352.laff
_affCode(uint256) := REF_353(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_354(F3Ddatasets.Player) -> plyr_[_pID]
REF_355(uint256) -> REF_354.laff
TMP_413(bool) = _affCode != REF_355
CONDITION TMP_413"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_356(F3Ddatasets.Player) -> plyr_[_pID]
REF_357(uint256) -> REF_356.laff
REF_357(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_414(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.verifyTeam(uint256)(_team)
_team(uint256) := TMP_414(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_430(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_430(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_366(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_366(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_431(bool) = _affCode == 
REF_367(F3Ddatasets.Player) -> plyr_[_pID]
REF_368(bytes32) -> REF_367.name
TMP_432(bool) = _affCode == REF_368
TMP_433(bool) = TMP_431 || TMP_432
CONDITION TMP_433"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_369(F3Ddatasets.Player) -> plyr_[_pID]
REF_370(uint256) -> REF_369.laff
_affID(uint256) := REF_370(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_371(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_371(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_372(F3Ddatasets.Player) -> plyr_[_pID]
REF_373(uint256) -> REF_372.laff
TMP_434(bool) = _affID != REF_373
CONDITION TMP_434"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_374(F3Ddatasets.Player) -> plyr_[_pID]
REF_375(uint256) -> REF_374.laff
REF_375(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_435(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.verifyTeam(uint256)(_team)
_team(uint256) := TMP_435(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_756(F3Ddatasets.Round) -> round_[_rID]
REF_757(uint256) -> REF_756.strt
TMP_638(uint256) = REF_757 + rndGap_
TMP_639(bool) = _now > TMP_638
REF_758(F3Ddatasets.Round) -> round_[_rID]
REF_759(uint256) -> REF_758.end
TMP_640(bool) = _now <= REF_759
REF_760(F3Ddatasets.Round) -> round_[_rID]
REF_761(uint256) -> REF_760.end
TMP_641(bool) = _now > REF_761
REF_762(F3Ddatasets.Round) -> round_[_rID]
REF_763(uint256) -> REF_762.plyr
TMP_642(bool) = REF_763 == 0
TMP_643(bool) = TMP_641 && TMP_642
TMP_644(bool) = TMP_640 || TMP_643
TMP_645(bool) = TMP_639 && TMP_644
CONDITION TMP_645"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_764(F3Ddatasets.Round) -> round_[_rID]
REF_765(uint256) -> REF_764.eth
TMP_646(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_765', '_eth'] 
RETURN TMP_646"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_647(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_647"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_746(F3Ddatasets.Round) -> round_[_rIDlast]
REF_747(uint256) -> REF_746.mask
REF_749(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_750(F3Ddatasets.PlayerRounds) -> REF_749[_rIDlast]
REF_751(uint256) -> REF_750.keys
TMP_635(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_747', 'REF_751'] 
TMP_636(uint256) = TMP_635 / 1000000000000000000
REF_753(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_754(F3Ddatasets.PlayerRounds) -> REF_753[_rIDlast]
REF_755(uint256) -> REF_754.mask
TMP_637(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_636', 'REF_755'] 
RETURN TMP_637"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(36,0)

IRs:
REF_332(F3Ddatasets.TeamFee) -> fees_[0]
TMP_396(F3Ddatasets.TeamFee) = new TeamFee(36,0)
REF_332(F3Ddatasets.TeamFee) (->fees_) := TMP_396(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_334(F3Ddatasets.TeamFee) -> fees_[1]
TMP_397(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_334(F3Ddatasets.TeamFee) (->fees_) := TMP_397(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(66,0)

IRs:
REF_336(F3Ddatasets.TeamFee) -> fees_[2]
TMP_398(F3Ddatasets.TeamFee) = new TeamFee(66,0)
REF_336(F3Ddatasets.TeamFee) (->fees_) := TMP_398(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(51,0)

IRs:
REF_338(F3Ddatasets.TeamFee) -> fees_[3]
TMP_399(F3Ddatasets.TeamFee) = new TeamFee(51,0)
REF_338(F3Ddatasets.TeamFee) (->fees_) := TMP_399(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_340(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_400(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_340(F3Ddatasets.PotSplit) (->potSplit_) := TMP_400(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_342(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_401(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_342(F3Ddatasets.PotSplit) (->potSplit_) := TMP_401(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(40,0)

IRs:
REF_344(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_402(F3Ddatasets.PotSplit) = new PotSplit(40,0)
REF_344(F3Ddatasets.PotSplit) (->potSplit_) := TMP_402(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(40,0)

IRs:
REF_346(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_403(F3Ddatasets.PotSplit) = new PotSplit(40,0)
REF_346(F3Ddatasets.PotSplit) (->potSplit_) := TMP_403(F3Ddatasets.PotSplit)"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_657(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_658(F3Ddatasets.PlayerRounds) -> REF_657[_rID]
REF_659(uint256) -> REF_658.keys
TMP_585(bool) = REF_659 == 0
CONDITION TMP_585"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_586(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_586(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_660(F3Ddatasets.Round) -> round_[_rID]
REF_661(uint256) -> REF_660.eth
TMP_587(bool) = REF_661 < 100000000000000000000
REF_662(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_663(F3Ddatasets.PlayerRounds) -> REF_662[_rID]
REF_664(uint256) -> REF_663.eth
TMP_588(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_664', '_eth'] 
TMP_589(bool) = TMP_588 > 1000000000000000000
TMP_590(bool) = TMP_587 && TMP_589
CONDITION TMP_590"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_667(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_668(F3Ddatasets.PlayerRounds) -> REF_667[_rID]
REF_669(uint256) -> REF_668.eth
TMP_591(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_669'] 
_availableLimit(uint256) := TMP_591(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_592(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_592(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_671(F3Ddatasets.Player) -> plyr_[_pID]
REF_672(uint256) -> REF_671.gen
REF_673(F3Ddatasets.Player) -> plyr_[_pID]
REF_674(uint256) -> REF_673.gen
TMP_593(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_674', '_refund'] 
REF_672(uint256) (->plyr_) := TMP_593(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_594(bool) = _eth > 1000000000
CONDITION TMP_594"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_676(F3Ddatasets.Round) -> round_[_rID]
REF_677(uint256) -> REF_676.eth
TMP_595(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_677', '_eth'] 
_keys(uint256) := TMP_595(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_596(bool) = _keys >= 1000000000000000000
CONDITION TMP_596"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_679(F3Ddatasets.Round) -> round_[_rID]
REF_680(uint256) -> REF_679.plyr
TMP_598(bool) = REF_680 != _pID
CONDITION TMP_598"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_681(F3Ddatasets.Round) -> round_[_rID]
REF_682(uint256) -> REF_681.plyr
REF_682(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_683(F3Ddatasets.Round) -> round_[_rID]
REF_684(uint256) -> REF_683.team
TMP_599(bool) = REF_684 != _team
CONDITION TMP_599"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_685(F3Ddatasets.Round) -> round_[_rID]
REF_686(uint256) -> REF_685.team
REF_686(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_687(uint256) -> _eventData_.compressedData
REF_688(uint256) -> _eventData_.compressedData
TMP_600(uint256) = REF_688 + 100
REF_687(uint256) (->_eventData_) := TMP_600(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_601(bool) = _eth >= 100000000000000000
CONDITION TMP_601"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_602(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_603(bool) = INTERNAL_CALL, FoMo3DlongUnlimited.airdrop()()
TMP_604(bool) = TMP_603 == True
CONDITION TMP_604"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_605(bool) = _eth >= 10000000000000000000
CONDITION TMP_605"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_606(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_607(uint256) = TMP_606 / 100
_prize(uint256) := TMP_607(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_690(F3Ddatasets.Player) -> plyr_[_pID]
REF_691(uint256) -> REF_690.win
REF_692(F3Ddatasets.Player) -> plyr_[_pID]
REF_693(uint256) -> REF_692.win
TMP_608(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_693', '_prize'] 
REF_691(uint256) (->plyr_) := TMP_608(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_609(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_609(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_696(uint256) -> _eventData_.compressedData
REF_696(-> _eventData_) = REF_696 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_610(bool) = _eth >= 1000000000000000000
TMP_611(bool) = _eth < 10000000000000000000
TMP_612(bool) = TMP_610 && TMP_611
CONDITION TMP_612"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_613(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_614(uint256) = TMP_613 / 100
_prize(uint256) := TMP_614(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_698(F3Ddatasets.Player) -> plyr_[_pID]
REF_699(uint256) -> REF_698.win
REF_700(F3Ddatasets.Player) -> plyr_[_pID]
REF_701(uint256) -> REF_700.win
TMP_615(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_701', '_prize'] 
REF_699(uint256) (->plyr_) := TMP_615(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_616(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_616(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_704(uint256) -> _eventData_.compressedData
REF_704(-> _eventData_) = REF_704 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_617(bool) = _eth >= 100000000000000000
TMP_618(bool) = _eth < 1000000000000000000
TMP_619(bool) = TMP_617 && TMP_618
CONDITION TMP_619"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_620(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_621(uint256) = TMP_620 / 100
_prize(uint256) := TMP_621(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_706(F3Ddatasets.Player) -> plyr_[_pID]
REF_707(uint256) -> REF_706.win
REF_708(F3Ddatasets.Player) -> plyr_[_pID]
REF_709(uint256) -> REF_708.win
TMP_622(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_709', '_prize'] 
REF_707(uint256) (->plyr_) := TMP_622(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_623(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_623(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_712(uint256) -> _eventData_.compressedData
REF_712(-> _eventData_) = REF_712 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_713(uint256) -> _eventData_.compressedData
REF_713(-> _eventData_) = REF_713 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_714(uint256) -> _eventData_.compressedData
TMP_624(uint256) = _prize * 1000000000000000000000000000000000
REF_714(-> _eventData_) = REF_714 + TMP_624"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_715(uint256) -> _eventData_.compressedData
REF_716(uint256) -> _eventData_.compressedData
TMP_625(uint256) = airDropTracker_ * 1000
TMP_626(uint256) = REF_716 + TMP_625
REF_715(uint256) (->_eventData_) := TMP_626(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_717(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_718(F3Ddatasets.PlayerRounds) -> REF_717[_rID]
REF_719(uint256) -> REF_718.keys
REF_721(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_722(F3Ddatasets.PlayerRounds) -> REF_721[_rID]
REF_723(uint256) -> REF_722.keys
TMP_627(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_723'] 
REF_719(uint256) (->plyrRnds_) := TMP_627(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_724(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_725(F3Ddatasets.PlayerRounds) -> REF_724[_rID]
REF_726(uint256) -> REF_725.eth
REF_728(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_729(F3Ddatasets.PlayerRounds) -> REF_728[_rID]
REF_730(uint256) -> REF_729.eth
TMP_628(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_730'] 
REF_726(uint256) (->plyrRnds_) := TMP_628(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_731(F3Ddatasets.Round) -> round_[_rID]
REF_732(uint256) -> REF_731.keys
REF_734(F3Ddatasets.Round) -> round_[_rID]
REF_735(uint256) -> REF_734.keys
TMP_629(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_735'] 
REF_732(uint256) (->round_) := TMP_629(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_736(F3Ddatasets.Round) -> round_[_rID]
REF_737(uint256) -> REF_736.eth
REF_739(F3Ddatasets.Round) -> round_[_rID]
REF_740(uint256) -> REF_739.eth
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_740'] 
REF_737(uint256) (->round_) := TMP_630(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_741(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_742(uint256) -> REF_741[_team]
REF_744(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_745(uint256) -> REF_744[_team]
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_745'] 
REF_742(uint256) (->rndTmEth_) := TMP_631(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_632(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_632(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_633(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_633(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_805(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_805(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_672(bool) = _pID == 0
CONDITION TMP_672"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBookMain.getPlayerID(msg.sender)

IRs:
TMP_673(uint256) = HIGH_LEVEL_CALL, dest:PlayerBookMain(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_673(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBookMain.getPlayerName(_pID)

IRs:
TMP_674(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBookMain(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_674(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBookMain.getPlayerLAff(_pID)

IRs:
TMP_675(uint256) = HIGH_LEVEL_CALL, dest:PlayerBookMain(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_675(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_809(uint256) -> pIDxAddr_[msg.sender]
REF_809(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_810(F3Ddatasets.Player) -> plyr_[_pID]
REF_811(address) -> REF_810.addr
REF_811(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_676(bool) = _name != 
CONDITION TMP_676"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_812(uint256) -> pIDxName_[_name]
REF_812(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_813(F3Ddatasets.Player) -> plyr_[_pID]
REF_814(bytes32) -> REF_813.name
REF_814(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_815(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_816(bool) -> REF_815[_name]
REF_816(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_677(bool) = _laff != 0
TMP_678(bool) = _laff != _pID
TMP_679(bool) = TMP_677 && TMP_678
CONDITION TMP_679"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_817(F3Ddatasets.Player) -> plyr_[_pID]
REF_818(uint256) -> REF_817.laff
REF_818(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_819(uint256) -> _eventData_.compressedData
REF_820(uint256) -> _eventData_.compressedData
TMP_680(uint256) = REF_820 + 1
REF_819(uint256) (->_eventData_) := TMP_680(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_764(uint256) = _eth / 50
_com(uint256) := TMP_764(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(FundForwarderMain).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_765 = CONVERT FundForwarderMain to address
TMP_767(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_768 = CONVERT TMP_767 to bytes4
TMP_769(bool) = LOW_LEVEL_CALL, dest:TMP_765, function:call, arguments:['TMP_768'] value:_com 
TMP_770 = UnaryType.BANG TMP_769 
CONDITION TMP_770"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_long = _eth / 100

IRs:
TMP_771(uint256) = _eth / 100
_long(uint256) := TMP_771(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
otherF3D_.potSwap.value(_long)()

IRs:
HIGH_LEVEL_CALL, dest:otherF3D_(otherFoMo3D), function:potSwap, arguments:[] value:_long "];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_774(uint256) = _eth / 10
_aff(uint256) := TMP_774(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_775(bool) = _affID != _pID
REF_934(F3Ddatasets.Player) -> plyr_[_affID]
REF_935(bytes32) -> REF_934.name
TMP_776(bool) = REF_935 != 
TMP_777(bool) = TMP_775 && TMP_776
CONDITION TMP_777"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_936(F3Ddatasets.Player) -> plyr_[_affID]
REF_937(uint256) -> REF_936.aff
REF_939(F3Ddatasets.Player) -> plyr_[_affID]
REF_940(uint256) -> REF_939.aff
TMP_778(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_940'] 
REF_937(uint256) (->plyr_) := TMP_778(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_942(F3Ddatasets.Player) -> plyr_[_affID]
REF_943(address) -> REF_942.addr
REF_944(F3Ddatasets.Player) -> plyr_[_affID]
REF_945(bytes32) -> REF_944.name
Emit onAffiliatePayout(_affID,REF_943,REF_945,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_948(F3Ddatasets.TeamFee) -> fees_[_team]
REF_949(uint256) -> REF_948.p3d
TMP_780(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_949'] 
TMP_781(uint256) = TMP_780 / 100
TMP_782(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_781'] 
_p3d(uint256) := TMP_782(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_783(bool) = _p3d > 0
CONDITION TMP_783"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
FundForwarderMain.deposit.value(_p3d)()

IRs:
TMP_785(bool) = HIGH_LEVEL_CALL, dest:FundForwarderMain(FundForwarderInterface), function:deposit, arguments:[] value:_p3d "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_952(uint256) -> _eventData_.P3DAmount
REF_954(uint256) -> _eventData_.P3DAmount
TMP_786(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_954'] 
REF_952(uint256) (->_eventData_) := TMP_786(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_962(F3Ddatasets.TeamFee) -> fees_[_team]
REF_963(uint256) -> REF_962.gen
TMP_790(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_963'] 
TMP_791(uint256) = TMP_790 / 100
_gen(uint256) := TMP_791(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_792(uint256) = _eth / 100
_air(uint256) := TMP_792(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_793(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_793(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_794(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_795(uint256) = TMP_794 / 100
REF_969(F3Ddatasets.TeamFee) -> fees_[_team]
REF_970(uint256) -> REF_969.p3d
TMP_796(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_970'] 
TMP_797(uint256) = TMP_796 / 100
TMP_798(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_795', 'TMP_797'] 
TMP_799(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_798'] 
_eth(uint256) := TMP_799(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_800(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_800(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_801(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_801(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_802(bool) = _dust > 0
CONDITION TMP_802"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_803(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_803(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_973(F3Ddatasets.Round) -> round_[_rID]
REF_974(uint256) -> REF_973.pot
TMP_804(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_977(F3Ddatasets.Round) -> round_[_rID]
REF_978(uint256) -> REF_977.pot
TMP_805(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_804', 'REF_978'] 
REF_974(uint256) (->round_) := TMP_805(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_979(uint256) -> _eventData_.genAmount
REF_981(uint256) -> _eventData_.genAmount
TMP_806(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_981'] 
REF_979(uint256) (->_eventData_) := TMP_806(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_982(uint256) -> _eventData_.potAmount
REF_982(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_829(F3Ddatasets.Round) -> round_[_rID]
REF_830(uint256) -> REF_829.plyr
_winPID(uint256) := REF_830(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_831(F3Ddatasets.Round) -> round_[_rID]
REF_832(uint256) -> REF_831.team
_winTID(uint256) := REF_832(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_833(F3Ddatasets.Round) -> round_[_rID]
REF_834(uint256) -> REF_833.pot
_pot(uint256) := REF_834(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_687(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_688(uint256) = TMP_687 / 100
_win(uint256) := TMP_688(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_689(uint256) = _pot / 50
_com(uint256) := TMP_689(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_837(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_838(uint256) -> REF_837.gen
TMP_690(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_838'] 
TMP_691(uint256) = TMP_690 / 100
_gen(uint256) := TMP_691(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_840(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_841(uint256) -> REF_840.p3d
TMP_692(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_841'] 
TMP_693(uint256) = TMP_692 / 100
_p3d(uint256) := TMP_693(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_694(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_695(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_694', '_com'] 
TMP_696(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_695', '_gen'] 
TMP_697(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_696', '_p3d'] 
_res(uint256) := TMP_697(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_698(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_847(F3Ddatasets.Round) -> round_[_rID]
REF_848(uint256) -> REF_847.keys
TMP_699(uint256) = TMP_698 / REF_848
_ppt(uint256) := TMP_699(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_851(F3Ddatasets.Round) -> round_[_rID]
REF_852(uint256) -> REF_851.keys
TMP_700(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_852'] 
TMP_701(uint256) = TMP_700 / 1000000000000000000
TMP_702(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_701'] 
_dust(uint256) := TMP_702(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_703(bool) = _dust > 0
CONDITION TMP_703"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_704(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_704(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_705(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_705(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_855(F3Ddatasets.Player) -> plyr_[_winPID]
REF_856(uint256) -> REF_855.win
REF_858(F3Ddatasets.Player) -> plyr_[_winPID]
REF_859(uint256) -> REF_858.win
TMP_706(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_859'] 
REF_856(uint256) (->plyr_) := TMP_706(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
! address(FundForwarderMain).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_707 = CONVERT FundForwarderMain to address
TMP_709(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_710 = CONVERT TMP_709 to bytes4
TMP_711(bool) = LOW_LEVEL_CALL, dest:TMP_707, function:call, arguments:['TMP_710'] value:_com 
TMP_712 = UnaryType.BANG TMP_711 
CONDITION TMP_712"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_p3d = _p3d.add(_com)

IRs:
TMP_713(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_com'] 
_p3d(uint256) := TMP_713(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_863(F3Ddatasets.Round) -> round_[_rID]
REF_864(uint256) -> REF_863.mask
REF_866(F3Ddatasets.Round) -> round_[_rID]
REF_867(uint256) -> REF_866.mask
TMP_714(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_867'] 
REF_864(uint256) (->round_) := TMP_714(uint256)"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_p3d > 0

IRs:
TMP_715(bool) = _p3d > 0
CONDITION TMP_715"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
FundForwarderMain.deposit.value(_p3d)()

IRs:
TMP_717(bool) = HIGH_LEVEL_CALL, dest:FundForwarderMain(FundForwarderInterface), function:deposit, arguments:[] value:_p3d "];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_870(uint256) -> _eventData_.compressedData
REF_871(uint256) -> _eventData_.compressedData
REF_872(F3Ddatasets.Round) -> round_[_rID]
REF_873(uint256) -> REF_872.end
TMP_718(uint256) = REF_873 * 1000000
TMP_719(uint256) = REF_871 + TMP_718
REF_870(uint256) (->_eventData_) := TMP_719(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_874(uint256) -> _eventData_.compressedIDs
REF_875(uint256) -> _eventData_.compressedIDs
TMP_720(uint256) = _winPID * 100000000000000000000000000
TMP_721(uint256) = REF_875 + TMP_720
TMP_722(uint256) = _winTID * 100000000000000000
TMP_723(uint256) = TMP_721 + TMP_722
REF_874(uint256) (->_eventData_) := TMP_723(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_876(address) -> _eventData_.winnerAddr
REF_877(F3Ddatasets.Player) -> plyr_[_winPID]
REF_878(address) -> REF_877.addr
REF_876(address) (->_eventData_) := REF_878(address)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_879(bytes32) -> _eventData_.winnerName
REF_880(F3Ddatasets.Player) -> plyr_[_winPID]
REF_881(bytes32) -> REF_880.name
REF_879(bytes32) (->_eventData_) := REF_881(bytes32)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_882(uint256) -> _eventData_.amountWon
REF_882(uint256) (->_eventData_) := _win(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_883(uint256) -> _eventData_.genAmount
REF_883(uint256) (->_eventData_) := _gen(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_884(uint256) -> _eventData_.P3DAmount
REF_884(uint256) (->_eventData_) := _p3d(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_885(uint256) -> _eventData_.newPot
REF_885(uint256) (->_eventData_) := _res(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
rID_ ++

IRs:
TMP_724(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_rID ++

IRs:
TMP_725(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_886(F3Ddatasets.Round) -> round_[_rID]
REF_887(uint256) -> REF_886.strt
REF_887(uint256) (->round_) := now(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_888(F3Ddatasets.Round) -> round_[_rID]
REF_889(uint256) -> REF_888.end
TMP_726(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_727(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_726', 'rndGap_'] 
REF_889(uint256) (->round_) := TMP_727(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_892(F3Ddatasets.Round) -> round_[_rID]
REF_893(uint256) -> REF_892.pot
REF_893(uint256) (->round_) := _res(uint256)"];
37->38;
38[label="Node Type: RETURN 38

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_1023(uint256) -> _eventData_.compressedData
REF_1024(uint256) -> _eventData_.compressedData
TMP_823(uint256) = now * 1000000000000000000
TMP_824(uint256) = REF_1024 + TMP_823
TMP_825(uint256) = _team * 100000000000000000000000000000
TMP_826(uint256) = TMP_824 + TMP_825
REF_1023(uint256) (->_eventData_) := TMP_826(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_1025(uint256) -> _eventData_.compressedIDs
REF_1026(uint256) -> _eventData_.compressedIDs
TMP_827(uint256) = REF_1026 + _pID
TMP_828(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_829(uint256) = TMP_827 + TMP_828
REF_1025(uint256) (->_eventData_) := TMP_829(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_1028(uint256) -> _eventData_.compressedData
REF_1029(uint256) -> _eventData_.compressedIDs
REF_1030(F3Ddatasets.Player) -> plyr_[_pID]
REF_1031(bytes32) -> REF_1030.name
REF_1032(address) -> _eventData_.winnerAddr
REF_1033(bytes32) -> _eventData_.winnerName
REF_1034(uint256) -> _eventData_.amountWon
REF_1035(uint256) -> _eventData_.newPot
REF_1036(uint256) -> _eventData_.P3DAmount
REF_1037(uint256) -> _eventData_.genAmount
REF_1038(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_1028,REF_1029,REF_1031,msg.sender,_eth,_keys,REF_1032,REF_1033,REF_1034,REF_1035,REF_1036,REF_1037,REF_1038,airDropPot_)"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_404(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_404(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_348(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_348(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_349(F3Ddatasets.Player) -> plyr_[_pID]
REF_350(uint256) -> REF_349.laff
INTERNAL_CALL, FoMo3DlongUnlimited.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_350,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_461(F3Ddatasets.Round) -> round_[_rID]
REF_462(uint256) -> REF_461.strt
TMP_499(uint256) = REF_462 + rndGap_
TMP_500(bool) = _now > TMP_499
REF_463(F3Ddatasets.Round) -> round_[_rID]
REF_464(uint256) -> REF_463.end
TMP_501(bool) = _now <= REF_464
REF_465(F3Ddatasets.Round) -> round_[_rID]
REF_466(uint256) -> REF_465.end
TMP_502(bool) = _now > REF_466
REF_467(F3Ddatasets.Round) -> round_[_rID]
REF_468(uint256) -> REF_467.plyr
TMP_503(bool) = REF_468 == 0
TMP_504(bool) = TMP_502 && TMP_503
TMP_505(bool) = TMP_501 || TMP_504
TMP_506(bool) = TMP_500 && TMP_505
CONDITION TMP_506"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_469(F3Ddatasets.Round) -> round_[_rID]
REF_470(uint256) -> REF_469.keys
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_470', '1000000000000000000'] 
TMP_508(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_507', '1000000000000000000'] 
RETURN TMP_508"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_543(F3Ddatasets.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.ico
REF_545(F3Ddatasets.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.keys
REF_547(F3Ddatasets.Round) -> round_[_rID]
REF_548(uint256) -> REF_547.end
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.strt
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.pot
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.team
REF_555(F3Ddatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.plyr
TMP_539(uint256) = REF_556 * 10
TMP_540(uint256) = REF_554 + TMP_539
REF_557(F3Ddatasets.Round) -> round_[_rID]
REF_558(uint256) -> REF_557.plyr
REF_559(F3Ddatasets.Player) -> plyr_[REF_558]
REF_560(address) -> REF_559.addr
REF_561(F3Ddatasets.Round) -> round_[_rID]
REF_562(uint256) -> REF_561.plyr
REF_563(F3Ddatasets.Player) -> plyr_[REF_562]
REF_564(bytes32) -> REF_563.name
REF_565(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_566(uint256) -> REF_565[0]
REF_567(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_568(uint256) -> REF_567[1]
REF_569(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_570(uint256) -> REF_569[2]
REF_571(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_572(uint256) -> REF_571[3]
TMP_541(uint256) = airDropPot_ * 1000
TMP_542(uint256) = airDropTracker_ + TMP_541
RETURN REF_544,_rID,REF_546,REF_548,REF_550,REF_552,TMP_540,REF_560,REF_564,REF_566,REF_568,REF_570,REF_572,TMP_542"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_543 = CONVERT 0 to address
TMP_544(bool) = _addr == TMP_543
CONDITION TMP_544"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_545(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_573(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_573(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_574(F3Ddatasets.Player) -> plyr_[_pID]
REF_575(bytes32) -> REF_574.name
REF_576(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_577(F3Ddatasets.PlayerRounds) -> REF_576[_rID]
REF_578(uint256) -> REF_577.keys
REF_579(F3Ddatasets.Player) -> plyr_[_pID]
REF_580(uint256) -> REF_579.win
REF_581(F3Ddatasets.Player) -> plyr_[_pID]
REF_582(uint256) -> REF_581.gen
REF_584(F3Ddatasets.Player) -> plyr_[_pID]
REF_585(uint256) -> REF_584.lrnd
TMP_546(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_585)
TMP_547(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_582', 'TMP_546'] 
REF_586(F3Ddatasets.Player) -> plyr_[_pID]
REF_587(uint256) -> REF_586.aff
REF_588(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_589(F3Ddatasets.PlayerRounds) -> REF_588[_rID]
REF_590(uint256) -> REF_589.eth
RETURN _pID,REF_575,REF_578,REF_580,TMP_547,REF_587,REF_590"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_483(F3Ddatasets.Round) -> round_[_rID]
REF_484(uint256) -> REF_483.end
TMP_515(bool) = now > REF_484
REF_485(F3Ddatasets.Round) -> round_[_rID]
REF_486(bool) -> REF_485.ended
TMP_516(bool) = REF_486 == False
TMP_517(bool) = TMP_515 && TMP_516
REF_487(F3Ddatasets.Round) -> round_[_rID]
REF_488(uint256) -> REF_487.plyr
TMP_518(bool) = REF_488 != 0
TMP_519(bool) = TMP_517 && TMP_518
CONDITION TMP_519"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_489(F3Ddatasets.Round) -> round_[_rID]
REF_490(uint256) -> REF_489.plyr
TMP_520(bool) = REF_490 == _pID
CONDITION TMP_520"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_491(F3Ddatasets.Player) -> plyr_[_pID]
REF_492(uint256) -> REF_491.win
REF_494(F3Ddatasets.Round) -> round_[_rID]
REF_495(uint256) -> REF_494.pot
TMP_521(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_495', '48'] 
TMP_522(uint256) = TMP_521 / 100
TMP_523(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_492', 'TMP_522'] 
REF_497(F3Ddatasets.Player) -> plyr_[_pID]
REF_498(uint256) -> REF_497.gen
TMP_524(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_501(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_502(F3Ddatasets.PlayerRounds) -> REF_501[_rID]
REF_503(uint256) -> REF_502.mask
TMP_525(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_524', 'REF_503'] 
TMP_526(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_498', 'TMP_525'] 
REF_504(F3Ddatasets.Player) -> plyr_[_pID]
REF_505(uint256) -> REF_504.aff
RETURN TMP_523,TMP_526,REF_505"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_506(F3Ddatasets.Player) -> plyr_[_pID]
REF_507(uint256) -> REF_506.win
REF_508(F3Ddatasets.Player) -> plyr_[_pID]
REF_509(uint256) -> REF_508.gen
TMP_527(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_512(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_513(F3Ddatasets.PlayerRounds) -> REF_512[_rID]
REF_514(uint256) -> REF_513.mask
TMP_528(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_527', 'REF_514'] 
TMP_529(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_509', 'TMP_528'] 
REF_515(F3Ddatasets.Player) -> plyr_[_pID]
REF_516(uint256) -> REF_515.aff
RETURN REF_507,TMP_529,REF_516"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_517(F3Ddatasets.Player) -> plyr_[_pID]
REF_518(uint256) -> REF_517.win
REF_519(F3Ddatasets.Player) -> plyr_[_pID]
REF_520(uint256) -> REF_519.gen
REF_522(F3Ddatasets.Player) -> plyr_[_pID]
REF_523(uint256) -> REF_522.lrnd
TMP_530(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_523)
TMP_531(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_520', 'TMP_530'] 
REF_524(F3Ddatasets.Player) -> plyr_[_pID]
REF_525(uint256) -> REF_524.aff
RETURN REF_518,TMP_531,REF_525"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_526(F3Ddatasets.Round) -> round_[_rID]
REF_527(uint256) -> REF_526.mask
REF_529(F3Ddatasets.Round) -> round_[_rID]
REF_530(uint256) -> REF_529.pot
REF_532(F3Ddatasets.Round) -> round_[_rID]
REF_533(uint256) -> REF_532.team
REF_534(F3Ddatasets.PotSplit) -> potSplit_[REF_533]
REF_535(uint256) -> REF_534.gen
TMP_532(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_530', 'REF_535'] 
TMP_533(uint256) = TMP_532 / 100
TMP_534(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_533', '1000000000000000000'] 
REF_537(F3Ddatasets.Round) -> round_[_rID]
REF_538(uint256) -> REF_537.keys
TMP_535(uint256) = TMP_534 / REF_538
TMP_536(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_527', 'TMP_535'] 
REF_540(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_541(F3Ddatasets.PlayerRounds) -> REF_540[_rID]
REF_542(uint256) -> REF_541.keys
TMP_537(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_536', 'REF_542'] 
TMP_538(uint256) = TMP_537 / 1000000000000000000
RETURN TMP_538"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_473(F3Ddatasets.Round) -> round_[_rID]
REF_474(uint256) -> REF_473.end
TMP_509(bool) = _now < REF_474
CONDITION TMP_509"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_475(F3Ddatasets.Round) -> round_[_rID]
REF_476(uint256) -> REF_475.strt
TMP_510(uint256) = REF_476 + rndGap_
TMP_511(bool) = _now > TMP_510
CONDITION TMP_511"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_477(F3Ddatasets.Round) -> round_[_rID]
REF_478(uint256) -> REF_477.end
TMP_512(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_478', '_now'] 
RETURN TMP_512"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_480(F3Ddatasets.Round) -> round_[_rID]
REF_481(uint256) -> REF_480.strt
TMP_513(uint256) = REF_481 + rndGap_
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_513', '_now'] 
RETURN TMP_514"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_768(F3Ddatasets.Round) -> round_[_rID]
REF_769(uint256) -> REF_768.strt
TMP_648(uint256) = REF_769 + rndGap_
TMP_649(bool) = _now > TMP_648
REF_770(F3Ddatasets.Round) -> round_[_rID]
REF_771(uint256) -> REF_770.end
TMP_650(bool) = _now <= REF_771
REF_772(F3Ddatasets.Round) -> round_[_rID]
REF_773(uint256) -> REF_772.end
TMP_651(bool) = _now > REF_773
REF_774(F3Ddatasets.Round) -> round_[_rID]
REF_775(uint256) -> REF_774.plyr
TMP_652(bool) = REF_775 == 0
TMP_653(bool) = TMP_651 && TMP_652
TMP_654(bool) = TMP_650 || TMP_653
TMP_655(bool) = TMP_649 && TMP_654
CONDITION TMP_655"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_776(F3Ddatasets.Round) -> round_[_rID]
REF_777(uint256) -> REF_776.keys
TMP_656(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_777', '_keys'] 
TMP_657(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_656', '_keys'] 
RETURN TMP_657"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_658(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_658"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_852(bool) = activated_ == True
TMP_853(None) = SOLIDITY_CALL require(bool,string)(TMP_852,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_854(bool) = _codeLength == 0
TMP_855(None) = SOLIDITY_CALL require(bool,string)(TMP_854,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_856(bool) = _eth >= 1000000000
TMP_857(None) = SOLIDITY_CALL require(bool,string)(TMP_856,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_858(bool) = _eth <= 100000000000000000000000
TMP_859(None) = SOLIDITY_CALL require(bool,string)(TMP_858,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_821(F3Ddatasets.Player) -> plyr_[_pID]
REF_822(uint256) -> REF_821.lrnd
TMP_684(bool) = REF_822 != 0
CONDITION TMP_684"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_823(F3Ddatasets.Player) -> plyr_[_pID]
REF_824(uint256) -> REF_823.lrnd
INTERNAL_CALL, FoMo3DlongUnlimited.updateGenVault(uint256,uint256)(_pID,REF_824)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_825(F3Ddatasets.Player) -> plyr_[_pID]
REF_826(uint256) -> REF_825.lrnd
REF_826(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_827(uint256) -> _eventData_.compressedData
REF_828(uint256) -> _eventData_.compressedData
TMP_686(uint256) = REF_828 + 10
REF_827(uint256) (->_eventData_) := TMP_686(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_787(uint256) = rID_ + 1
_rID(uint256) := TMP_787(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_955(F3Ddatasets.Round) -> round_[_rID]
REF_956(uint256) -> REF_955.pot
REF_957(F3Ddatasets.Round) -> round_[_rID]
REF_958(uint256) -> REF_957.pot
TMP_788(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_958', 'msg.value'] 
REF_956(uint256) (->round_) := TMP_788(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_625(F3Ddatasets.Round) -> round_[_rID]
REF_626(uint256) -> REF_625.strt
TMP_566(uint256) = REF_626 + rndGap_
TMP_567(bool) = _now > TMP_566
REF_627(F3Ddatasets.Round) -> round_[_rID]
REF_628(uint256) -> REF_627.end
TMP_568(bool) = _now <= REF_628
REF_629(F3Ddatasets.Round) -> round_[_rID]
REF_630(uint256) -> REF_629.end
TMP_569(bool) = _now > REF_630
REF_631(F3Ddatasets.Round) -> round_[_rID]
REF_632(uint256) -> REF_631.plyr
TMP_570(bool) = REF_632 == 0
TMP_571(bool) = TMP_569 && TMP_570
TMP_572(bool) = TMP_568 || TMP_571
TMP_573(bool) = TMP_567 && TMP_572
CONDITION TMP_573"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_633(F3Ddatasets.Player) -> plyr_[_pID]
REF_634(uint256) -> REF_633.gen
TMP_574(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.withdrawEarnings(uint256)(_pID)
TMP_575(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_574', '_eth'] 
REF_634(uint256) (->plyr_) := TMP_575(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_636(F3Ddatasets.Round) -> round_[_rID]
REF_637(uint256) -> REF_636.end
TMP_577(bool) = _now > REF_637
REF_638(F3Ddatasets.Round) -> round_[_rID]
REF_639(bool) -> REF_638.ended
TMP_578(bool) = REF_639 == False
TMP_579(bool) = TMP_577 && TMP_578
CONDITION TMP_579"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_640(F3Ddatasets.Round) -> round_[_rID]
REF_641(bool) -> REF_640.ended
REF_641(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_580(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_580(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_642(uint256) -> _eventData_.compressedData
REF_643(uint256) -> _eventData_.compressedData
TMP_581(uint256) = _now * 1000000000000000000
TMP_582(uint256) = REF_643 + TMP_581
REF_642(uint256) (->_eventData_) := TMP_582(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_644(uint256) -> _eventData_.compressedIDs
REF_645(uint256) -> _eventData_.compressedIDs
TMP_583(uint256) = REF_645 + _pID
REF_644(uint256) (->_eventData_) := TMP_583(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_647(F3Ddatasets.Player) -> plyr_[_pID]
REF_648(bytes32) -> REF_647.name
REF_649(uint256) -> _eventData_.compressedData
REF_650(uint256) -> _eventData_.compressedIDs
REF_651(address) -> _eventData_.winnerAddr
REF_652(bytes32) -> _eventData_.winnerName
REF_653(uint256) -> _eventData_.amountWon
REF_654(uint256) -> _eventData_.newPot
REF_655(uint256) -> _eventData_.P3DAmount
REF_656(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_648,REF_649,REF_650,REF_651,REF_652,REF_653,REF_654,REF_655,REF_656)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_383(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_383(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_449 = CONVERT 0 to address
TMP_450(bool) = _affCode == TMP_449
TMP_451(bool) = _affCode == msg.sender
TMP_452(bool) = TMP_450 || TMP_451
CONDITION TMP_452"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_384(F3Ddatasets.Player) -> plyr_[_pID]
REF_385(uint256) -> REF_384.laff
_affID(uint256) := REF_385(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_386(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_386(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_387(F3Ddatasets.Player) -> plyr_[_pID]
REF_388(uint256) -> REF_387.laff
TMP_453(bool) = _affID != REF_388
CONDITION TMP_453"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_389(F3Ddatasets.Player) -> plyr_[_pID]
REF_390(uint256) -> REF_389.laff
REF_390(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_454(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.verifyTeam(uint256)(_team)
_team(uint256) := TMP_454(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_376(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_376(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_440(bool) = _affCode == 0
TMP_441(bool) = _affCode == _pID
TMP_442(bool) = TMP_440 || TMP_441
CONDITION TMP_442"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_377(F3Ddatasets.Player) -> plyr_[_pID]
REF_378(uint256) -> REF_377.laff
_affCode(uint256) := REF_378(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_379(F3Ddatasets.Player) -> plyr_[_pID]
REF_380(uint256) -> REF_379.laff
TMP_443(bool) = _affCode != REF_380
CONDITION TMP_443"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_381(F3Ddatasets.Player) -> plyr_[_pID]
REF_382(uint256) -> REF_381.laff
REF_382(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_444(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.verifyTeam(uint256)(_team)
_team(uint256) := TMP_444(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_391(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_391(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_459(bool) = _affCode == 
REF_392(F3Ddatasets.Player) -> plyr_[_pID]
REF_393(bytes32) -> REF_392.name
TMP_460(bool) = _affCode == REF_393
TMP_461(bool) = TMP_459 || TMP_460
CONDITION TMP_461"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_394(F3Ddatasets.Player) -> plyr_[_pID]
REF_395(uint256) -> REF_394.laff
_affID(uint256) := REF_395(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_396(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_396(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_397(F3Ddatasets.Player) -> plyr_[_pID]
REF_398(uint256) -> REF_397.laff
TMP_462(bool) = _affID != REF_398
CONDITION TMP_462"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_399(F3Ddatasets.Player) -> plyr_[_pID]
REF_400(uint256) -> REF_399.laff
REF_400(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_463(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.verifyTeam(uint256)(_team)
_team(uint256) := TMP_463(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DlongUnlimited.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBookMain),your not playerNames contract... hmmm..)

IRs:
TMP_659 = CONVERT PlayerBookMain to address
TMP_660(bool) = msg.sender == TMP_659
TMP_661(None) = SOLIDITY_CALL require(bool,string)(TMP_660,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_781(uint256) -> pIDxAddr_[_addr]
TMP_662(bool) = REF_781 != _pID
CONDITION TMP_662"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_782(uint256) -> pIDxAddr_[_addr]
REF_782(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_783(uint256) -> pIDxName_[_name]
TMP_663(bool) = REF_783 != _pID
CONDITION TMP_663"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_784(uint256) -> pIDxName_[_name]
REF_784(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_785(F3Ddatasets.Player) -> plyr_[_pID]
REF_786(address) -> REF_785.addr
TMP_664(bool) = REF_786 != _addr
CONDITION TMP_664"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_787(F3Ddatasets.Player) -> plyr_[_pID]
REF_788(address) -> REF_787.addr
REF_788(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_789(F3Ddatasets.Player) -> plyr_[_pID]
REF_790(bytes32) -> REF_789.name
TMP_665(bool) = REF_790 != _name
CONDITION TMP_665"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_791(F3Ddatasets.Player) -> plyr_[_pID]
REF_792(bytes32) -> REF_791.name
REF_792(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_793(F3Ddatasets.Player) -> plyr_[_pID]
REF_794(uint256) -> REF_793.laff
TMP_666(bool) = REF_794 != _laff
CONDITION TMP_666"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_795(F3Ddatasets.Player) -> plyr_[_pID]
REF_796(uint256) -> REF_795.laff
REF_796(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_797(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_798(bool) -> REF_797[_name]
TMP_667(bool) = REF_798 == False
CONDITION TMP_667"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_799(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_800(bool) -> REF_799[_name]
REF_800(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBookMain),your not playerNames contract... hmmm..)

IRs:
TMP_668 = CONVERT PlayerBookMain to address
TMP_669(bool) = msg.sender == TMP_668
TMP_670(None) = SOLIDITY_CALL require(bool,string)(TMP_669,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_801(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_802(bool) -> REF_801[_name]
TMP_671(bool) = REF_802 == False
CONDITION TMP_671"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_803(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_804(bool) -> REF_803[_name]
REF_804(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_487(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_487(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBookMain.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBookMain(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_437(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_437(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_439(F3Ddatasets.Player) -> plyr_[_affID]
REF_440(address) -> REF_439.addr
REF_441(F3Ddatasets.Player) -> plyr_[_affID]
REF_442(bytes32) -> REF_441.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_440,REF_442,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
9->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_491(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_491(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBookMain.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBookMain(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_446(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_446(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_448(F3Ddatasets.Player) -> plyr_[_affID]
REF_449(address) -> REF_448.addr
REF_450(F3Ddatasets.Player) -> plyr_[_affID]
REF_451(bytes32) -> REF_450.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_449,REF_451,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
9->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_495(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_495(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBookMain.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBookMain(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_455(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_455(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_affID]
REF_458(address) -> REF_457.addr
REF_459(F3Ddatasets.Player) -> plyr_[_affID]
REF_460(bytes32) -> REF_459.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_458,REF_460,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
9->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-setOtherFomo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == DEV_1_ADDRESS,only team just can set)

IRs:
TMP_843(bool) = msg.sender == DEV_1_ADDRESS
TMP_844(None) = SOLIDITY_CALL require(bool,string)(TMP_843,only team just can set)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(otherF3D_) == address(0),silly dev, you already did that)

IRs:
TMP_845 = CONVERT otherF3D_ to address
TMP_846 = CONVERT 0 to address
TMP_847(bool) = TMP_845 == TMP_846
TMP_848(None) = SOLIDITY_CALL require(bool,string)(TMP_847,silly dev, you already did that)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
otherF3D_ = otherFoMo3D(_otherF3D)

IRs:
TMP_849 = CONVERT _otherF3D to otherFoMo3D
otherF3D_(otherFoMo3D) := TMP_849(otherFoMo3D)"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DEV_1_ADDRESS = 0x7a9E13E044CB905957eA465488DabD5F5D34E2C4

IRs:
DEV_1_ADDRESS(address) := 700022123230003621868862953825840895416945926852(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
FundForwarderMain = FundForwarderInterface(0x5095072aEE46a39D0b3753184514ead86405780f)

IRs:
TMP_850 = CONVERT 460042697095072200039847868154607798061323614223 to FundForwarderInterface
FundForwarderMain(FundForwarderInterface) := TMP_850(FundForwarderInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PlayerBookMain = PlayerBookInterface(0xf72848D3426d8dB71e52FAc6Df29585649bb7CBD)

IRs:
TMP_851 = CONVERT 1411019094173893976874299779530883402652515531965 to PlayerBookInterface
PlayerBookMain(PlayerBookInterface) := TMP_851(PlayerBookInterface)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
name = Fomo3D Long Unlimited

IRs:
name(string) := Fomo3D Long Unlimited(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
symbol = F3DLong

IRs:
symbol(string) := F3DLong(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndInc_ = 0

IRs:
rndInc_(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
rndMax_ = 7200

IRs:
rndMax_(uint256) := 7200(uint256)"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 600

IRs:
rndExtra_(uint256) := 600(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 600

IRs:
rndGap_(uint256) := 600(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_728(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_728(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_729(bool) = _earnings > 0
CONDITION TMP_729"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_894(F3Ddatasets.Player) -> plyr_[_pID]
REF_895(uint256) -> REF_894.gen
REF_897(F3Ddatasets.Player) -> plyr_[_pID]
REF_898(uint256) -> REF_897.gen
TMP_730(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_898'] 
REF_895(uint256) (->plyr_) := TMP_730(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_899(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_900(F3Ddatasets.PlayerRounds) -> REF_899[_rIDlast]
REF_901(uint256) -> REF_900.mask
REF_903(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_904(F3Ddatasets.PlayerRounds) -> REF_903[_rIDlast]
REF_905(uint256) -> REF_904.mask
TMP_731(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_905'] 
REF_901(uint256) (->plyrRnds_) := TMP_731(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_807(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_984(F3Ddatasets.Round) -> round_[_rID]
REF_985(uint256) -> REF_984.keys
TMP_808(uint256) = TMP_807 / REF_985
_ppt(uint256) := TMP_808(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_986(F3Ddatasets.Round) -> round_[_rID]
REF_987(uint256) -> REF_986.mask
REF_989(F3Ddatasets.Round) -> round_[_rID]
REF_990(uint256) -> REF_989.mask
TMP_809(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_990'] 
REF_987(uint256) (->round_) := TMP_809(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_810(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_811(uint256) = TMP_810 / 1000000000000000000
_pearn(uint256) := TMP_811(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_992(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_993(F3Ddatasets.PlayerRounds) -> REF_992[_rID]
REF_994(uint256) -> REF_993.mask
REF_995(F3Ddatasets.Round) -> round_[_rID]
REF_996(uint256) -> REF_995.mask
TMP_812(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_996', '_keys'] 
TMP_813(uint256) = TMP_812 / 1000000000000000000
TMP_814(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_813', '_pearn'] 
REF_1000(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_1001(F3Ddatasets.PlayerRounds) -> REF_1000[_rID]
REF_1002(uint256) -> REF_1001.mask
TMP_815(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_814', 'REF_1002'] 
REF_994(uint256) (->plyrRnds_) := TMP_815(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_1005(F3Ddatasets.Round) -> round_[_rID]
REF_1006(uint256) -> REF_1005.keys
TMP_816(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_1006'] 
TMP_817(uint256) = TMP_816 / 1000000000000000000
TMP_818(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_817'] 
RETURN TMP_818"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_906(F3Ddatasets.Round) -> round_[_rID]
REF_907(uint256) -> REF_906.end
TMP_732(bool) = _now > REF_907
REF_908(F3Ddatasets.Round) -> round_[_rID]
REF_909(uint256) -> REF_908.plyr
TMP_733(bool) = REF_909 == 0
TMP_734(bool) = TMP_732 && TMP_733
CONDITION TMP_734"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_735(uint256) = _keys / 1000000000000000000
TMP_736(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_735', 'rndInc_'] 
TMP_737(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_736', '_now'] 
_newTime(uint256) := TMP_737(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_738(uint256) = _keys / 1000000000000000000
TMP_739(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_738', 'rndInc_'] 
REF_914(F3Ddatasets.Round) -> round_[_rID]
REF_915(uint256) -> REF_914.end
TMP_740(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_739', 'REF_915'] 
_newTime(uint256) := TMP_740(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_741(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_742(bool) = _newTime < TMP_741
CONDITION TMP_742"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_917(F3Ddatasets.Round) -> round_[_rID]
REF_918(uint256) -> REF_917.end
REF_918(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_919(F3Ddatasets.Round) -> round_[_rID]
REF_920(uint256) -> REF_919.end
TMP_743(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_920(uint256) (->round_) := TMP_743(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_681(bool) = _team < 0
TMP_682(bool) = _team > 3
TMP_683(bool) = TMP_681 || TMP_682
CONDITION TMP_683"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2794.sol-FoMo3DlongUnlimited-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_401(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_401(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.end
TMP_468(bool) = _now > REF_403
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(bool) -> REF_404.ended
TMP_469(bool) = REF_405 == False
TMP_470(bool) = TMP_468 && TMP_469
REF_406(F3Ddatasets.Round) -> round_[_rID]
REF_407(uint256) -> REF_406.plyr
TMP_471(bool) = REF_407 != 0
TMP_472(bool) = TMP_470 && TMP_471
CONDITION TMP_472"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_408(F3Ddatasets.Round) -> round_[_rID]
REF_409(bool) -> REF_408.ended
REF_409(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_473(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DlongUnlimited.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_473(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_474(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_474(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_475(bool) = _eth > 0
CONDITION TMP_475"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_410(F3Ddatasets.Player) -> plyr_[_pID]
REF_411(address) -> REF_410.addr
Transfer dest:REF_411 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_413(uint256) -> _eventData_.compressedData
REF_414(uint256) -> _eventData_.compressedData
TMP_477(uint256) = _now * 1000000000000000000
TMP_478(uint256) = REF_414 + TMP_477
REF_413(uint256) (->_eventData_) := TMP_478(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_415(uint256) -> _eventData_.compressedIDs
REF_416(uint256) -> _eventData_.compressedIDs
TMP_479(uint256) = REF_416 + _pID
REF_415(uint256) (->_eventData_) := TMP_479(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_418(F3Ddatasets.Player) -> plyr_[_pID]
REF_419(bytes32) -> REF_418.name
REF_420(uint256) -> _eventData_.compressedData
REF_421(uint256) -> _eventData_.compressedIDs
REF_422(address) -> _eventData_.winnerAddr
REF_423(bytes32) -> _eventData_.winnerName
REF_424(uint256) -> _eventData_.amountWon
REF_425(uint256) -> _eventData_.newPot
REF_426(uint256) -> _eventData_.P3DAmount
REF_427(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_419,_eth,REF_420,REF_421,REF_422,REF_423,REF_424,REF_425,REF_426,REF_427)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_481(uint256) = INTERNAL_CALL, FoMo3DlongUnlimited.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_481(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_482(bool) = _eth > 0
CONDITION TMP_482"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_428(F3Ddatasets.Player) -> plyr_[_pID]
REF_429(address) -> REF_428.addr
Transfer dest:REF_429 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_432(F3Ddatasets.Player) -> plyr_[_pID]
REF_433(bytes32) -> REF_432.name
Emit onWithdraw(_pID,msg.sender,REF_433,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DlongUnlimited.isHuman()()"];
23->1;
}
// Function: 2794.sol-FoMo3DlongUnlimited-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_1007(F3Ddatasets.Player) -> plyr_[_pID]
REF_1008(uint256) -> REF_1007.lrnd
INTERNAL_CALL, FoMo3DlongUnlimited.updateGenVault(uint256,uint256)(_pID,REF_1008)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_1009(F3Ddatasets.Player) -> plyr_[_pID]
REF_1010(uint256) -> REF_1009.win
REF_1012(F3Ddatasets.Player) -> plyr_[_pID]
REF_1013(uint256) -> REF_1012.gen
TMP_820(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1010', 'REF_1013'] 
REF_1015(F3Ddatasets.Player) -> plyr_[_pID]
REF_1016(uint256) -> REF_1015.aff
TMP_821(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_820', 'REF_1016'] 
_earnings(uint256) := TMP_821(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_822(bool) = _earnings > 0
CONDITION TMP_822"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_1017(F3Ddatasets.Player) -> plyr_[_pID]
REF_1018(uint256) -> REF_1017.win
REF_1018(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_1019(F3Ddatasets.Player) -> plyr_[_pID]
REF_1020(uint256) -> REF_1019.gen
REF_1020(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_1021(F3Ddatasets.Player) -> plyr_[_pID]
REF_1022(uint256) -> REF_1021.aff
REF_1022(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2794.sol-FundForwarder-cancelMigration()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(currentCorpBank_),Forwarder cancelMigration failed - msg.sender must be current corp bank)

IRs:
TMP_166 = CONVERT currentCorpBank_ to address
TMP_167(bool) = msg.sender == TMP_166
TMP_168(None) = SOLIDITY_CALL require(bool,string)(TMP_167,Forwarder cancelMigration failed - msg.sender must be current corp bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newCorpBank_ = address(0x0)

IRs:
TMP_169 = CONVERT 0 to address
newCorpBank_(address) := TMP_169(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
}
// Function: 2794.sol-FundForwarder-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2794.sol-FundForwarder-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value > 0,Forwarder Deposit failed - zero deposits not allowed)

IRs:
TMP_151(bool) = msg.value > 0
TMP_152(None) = SOLIDITY_CALL require(bool,string)(TMP_151,Forwarder Deposit failed - zero deposits not allowed)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(needsBank_ == false,Forwarder Deposit failed - no registered bank)

IRs:
TMP_153(bool) = needsBank_ == False
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,Forwarder Deposit failed - no registered bank)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
currentCorpBank_.deposit.value(msg.value)(msg.sender) == true

IRs:
TMP_156(bool) = HIGH_LEVEL_CALL, dest:currentCorpBank_(FundInterfaceForForwarder), function:deposit, arguments:['msg.sender'] value:msg.value 
TMP_157(bool) = TMP_156 == True
CONDITION TMP_157"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(true)

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2794.sol-FundForwarder-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
currentCorpBank_.deposit.value(address(this).balance)(address(currentCorpBank_))

IRs:
TMP_146 = CONVERT this to address
TMP_147(uint256) = SOLIDITY_CALL balance(address)(TMP_146)
TMP_149 = CONVERT currentCorpBank_ to address
TMP_150(bool) = HIGH_LEVEL_CALL, dest:currentCorpBank_(FundInterfaceForForwarder), function:deposit, arguments:['TMP_149'] value:TMP_147 "];
}
// Function: 2794.sol-FundForwarder-finishMigration()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == newCorpBank_,Forwarder finishMigration failed - msg.sender must be new corp bank)

IRs:
TMP_170(bool) = msg.sender == newCorpBank_
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,Forwarder finishMigration failed - msg.sender must be new corp bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
currentCorpBank_ = (FundInterfaceForForwarder(newCorpBank_))

IRs:
TMP_172 = CONVERT newCorpBank_ to FundInterfaceForForwarder
currentCorpBank_(FundInterfaceForForwarder) := TMP_172(FundInterfaceForForwarder)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newCorpBank_ = address(0x0)

IRs:
TMP_173 = CONVERT 0 to address
newCorpBank_(address) := TMP_173(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(true)

IRs:
RETURN True"];
}
// Function: 2794.sol-FundForwarder-setup(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(needsBank_ == true,Forwarder setup failed - corp bank already registered)

IRs:
TMP_174(bool) = needsBank_ == True
TMP_175(None) = SOLIDITY_CALL require(bool,string)(TMP_174,Forwarder setup failed - corp bank already registered)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
currentCorpBank_ = FundInterfaceForForwarder(_firstCorpBank)

IRs:
TMP_176 = CONVERT _firstCorpBank to FundInterfaceForForwarder
currentCorpBank_(FundInterfaceForForwarder) := TMP_176(FundInterfaceForForwarder)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
needsBank_ = false

IRs:
needsBank_(bool) := False(bool)"];
}
// Function: 2794.sol-FundForwarder-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = FundForwarder

IRs:
name(string) := FundForwarder(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
needsBank_ = true

IRs:
needsBank_(bool) := True(bool)"];
}
// Function: 2794.sol-FundForwarder-startMigration(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(currentCorpBank_),Forwarder startMigration failed - msg.sender must be current corp bank)

IRs:
TMP_160 = CONVERT currentCorpBank_ to address
TMP_161(bool) = msg.sender == TMP_160
TMP_162(None) = SOLIDITY_CALL require(bool,string)(TMP_161,Forwarder startMigration failed - msg.sender must be current corp bank)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
FundInterfaceForForwarder(_newCorpBank).migrationReceiver_setup() == true

IRs:
TMP_163 = CONVERT _newCorpBank to FundInterfaceForForwarder
TMP_164(bool) = HIGH_LEVEL_CALL, dest:TMP_163(FundInterfaceForForwarder), function:migrationReceiver_setup, arguments:[]  
TMP_165(bool) = TMP_164 == True
CONDITION TMP_165"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newCorpBank_ = _newCorpBank

IRs:
newCorpBank_(address) := _newCorpBank(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(true)

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2794.sol-FundForwarder-status()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(address(currentCorpBank_),address(newCorpBank_),needsBank_)

IRs:
TMP_158 = CONVERT currentCorpBank_ to address
TMP_159 = CONVERT newCorpBank_ to address
RETURN TMP_158,TMP_159,needsBank_"];
}
// Function: 2794.sol-FundForwarderInterface-cancelMigration()
digraph{
}
// Function: 2794.sol-FundForwarderInterface-deposit()
digraph{
}
// Function: 2794.sol-FundForwarderInterface-finishMigration()
digraph{
}
// Function: 2794.sol-FundForwarderInterface-setup(address)
digraph{
}
// Function: 2794.sol-FundForwarderInterface-startMigration(address)
digraph{
}
// Function: 2794.sol-FundForwarderInterface-status()
digraph{
}
// Function: 2794.sol-FundInterfaceForForwarder-deposit(address)
digraph{
}
// Function: 2794.sol-FundInterfaceForForwarder-migrationReceiver_setup()
digraph{
}
// Function: 2794.sol-HourglassInterface-balanceOf(address)
digraph{
}
// Function: 2794.sol-HourglassInterface-buy(address)
digraph{
}
// Function: 2794.sol-HourglassInterface-dividendsOf(address)
digraph{
}
// Function: 2794.sol-HourglassInterface-exit()
digraph{
}
// Function: 2794.sol-HourglassInterface-fallback()
digraph{
}
// Function: 2794.sol-HourglassInterface-reinvest()
digraph{
}
// Function: 2794.sol-HourglassInterface-sell(uint256)
digraph{
}
// Function: 2794.sol-HourglassInterface-stakingRequirement()
digraph{
}
// Function: 2794.sol-HourglassInterface-transfer(address,uint256)
digraph{
}
// Function: 2794.sol-HourglassInterface-withdraw()
digraph{
}
// Function: 2794.sol-MSFun-checkCount(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_82(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_82(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].count)

IRs:
REF_81(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_82(MSFun.ProposalData) -> REF_81[_whatProposal]
REF_83(uint256) -> REF_82.count
RETURN REF_83"];
3[label="Node Type: RETURN 3

EXPRESSION:
signature_count

IRs:
RETURN signature_count"];
}
// Function: 2794.sol-MSFun-checkMsgData(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_81(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].msgData)

IRs:
REF_78(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_79(MSFun.ProposalData) -> REF_78[_whatProposal]
REF_80(bytes32) -> REF_79.msgData
RETURN REF_80"];
3[label="Node Type: RETURN 3

EXPRESSION:
msg_data

IRs:
RETURN msg_data"];
}
// Function: 2794.sol-MSFun-checkSigner(MSFun.Data,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_signer > 0,MSFun checkSigner failed - 0 not allowed)

IRs:
TMP_83(bool) = _signer > 0
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,MSFun checkSigner failed - 0 not allowed)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_85(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_85(bytes32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(self.proposal_[_whatProposal].log[_signer - 1])

IRs:
REF_84(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_85(MSFun.ProposalData) -> REF_84[_whatProposal]
REF_86(mapping(uint256 => address)) -> REF_85.log
TMP_86(uint256) = _signer - 1
REF_87(address) -> REF_86[TMP_86]
RETURN REF_87"];
4[label="Node Type: RETURN 4

EXPRESSION:
signer

IRs:
RETURN signer"];
}
// Function: 2794.sol-MSFun-deleteProposal(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_76(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_76(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < self.proposal_[_whatProposal].count

IRs:
REF_60(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_61(MSFun.ProposalData) -> REF_60[_whatProposal]
REF_62(uint256) -> REF_61.count
TMP_77(bool) = i < REF_62
CONDITION TMP_77"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_whichAdmin = self.proposal_[_whatProposal].log[i]

IRs:
REF_63(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_64(MSFun.ProposalData) -> REF_63[_whatProposal]
REF_65(mapping(uint256 => address)) -> REF_64.log
REF_66(address) -> REF_65[i]
_whichAdmin(address) := REF_66(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete self.proposal_[_whatProposal].admin[_whichAdmin]

IRs:
REF_67(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_68(MSFun.ProposalData) -> REF_67[_whatProposal]
REF_69(mapping(address => bool)) -> REF_68.admin
REF_70(bool) -> REF_69[_whichAdmin]
REF_69 = delete REF_70 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete self.proposal_[_whatProposal].log[i]

IRs:
REF_71(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_72(MSFun.ProposalData) -> REF_71[_whatProposal]
REF_73(mapping(uint256 => address)) -> REF_72.log
REF_74(address) -> REF_73[i]
REF_73 = delete REF_74 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_78(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete self.proposal_[_whatProposal]

IRs:
REF_75(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_76(MSFun.ProposalData) -> REF_75[_whatProposal]
REF_75 = delete REF_76 "];
}
// Function: 2794.sol-MSFun-multiSig(MSFun.Data,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_69(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_69(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_currentCount = self.proposal_[_whatProposal].count

IRs:
REF_19(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_20(MSFun.ProposalData) -> REF_19[_whatProposal]
REF_21(uint256) -> REF_20.count
_currentCount(uint256) := REF_21(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_whichAdmin = msg.sender

IRs:
_whichAdmin(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_msgData = keccak256()(msg.data)

IRs:
TMP_70(bytes32) = SOLIDITY_CALL keccak256()(msg.data)
_msgData(bytes32) := TMP_70(bytes32)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_currentCount == 0

IRs:
TMP_71(bool) = _currentCount == 0
CONDITION TMP_71"];
5->6[label="True"];
5->13[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self.proposal_[_whatProposal].msgData = _msgData

IRs:
REF_22(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_23(MSFun.ProposalData) -> REF_22[_whatProposal]
REF_24(bytes32) -> REF_23.msgData
REF_24(bytes32) (->self) := _msgData(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_25(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_26(MSFun.ProposalData) -> REF_25[_whatProposal]
REF_27(mapping(address => bool)) -> REF_26.admin
REF_28(bool) -> REF_27[_whichAdmin]
REF_28(bool) (->self) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_29(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_30(MSFun.ProposalData) -> REF_29[_whatProposal]
REF_31(mapping(uint256 => address)) -> REF_30.log
REF_32(address) -> REF_31[_currentCount]
REF_32(address) (->self) := _whichAdmin(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_33(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_34(MSFun.ProposalData) -> REF_33[_whatProposal]
REF_35(uint256) -> REF_34.count
REF_35(-> self) = REF_35 + 1"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_36(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_37(MSFun.ProposalData) -> REF_36[_whatProposal]
REF_38(uint256) -> REF_37.count
TMP_72(bool) = REF_38 == _requiredSignatures
CONDITION TMP_72"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
(true)

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
12->23;
13[label="Node Type: IF 13

EXPRESSION:
self.proposal_[_whatProposal].msgData == _msgData

IRs:
REF_39(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_40(MSFun.ProposalData) -> REF_39[_whatProposal]
REF_41(bytes32) -> REF_40.msgData
TMP_73(bool) = REF_41 == _msgData
CONDITION TMP_73"];
13->14[label="True"];
13->22[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] == false

IRs:
REF_42(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_43(MSFun.ProposalData) -> REF_42[_whatProposal]
REF_44(mapping(address => bool)) -> REF_43.admin
REF_45(bool) -> REF_44[_whichAdmin]
TMP_74(bool) = REF_45 == False
CONDITION TMP_74"];
14->15[label="True"];
14->18[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_46(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_47(MSFun.ProposalData) -> REF_46[_whatProposal]
REF_48(mapping(address => bool)) -> REF_47.admin
REF_49(bool) -> REF_48[_whichAdmin]
REF_49(bool) (->self) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_50(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_51(MSFun.ProposalData) -> REF_50[_whatProposal]
REF_52(mapping(uint256 => address)) -> REF_51.log
REF_53(address) -> REF_52[_currentCount]
REF_53(address) (->self) := _whichAdmin(address)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_54(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_55(MSFun.ProposalData) -> REF_54[_whatProposal]
REF_56(uint256) -> REF_55.count
REF_56(-> self) = REF_56 + 1"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_57(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_58(MSFun.ProposalData) -> REF_57[_whatProposal]
REF_59(uint256) -> REF_58.count
TMP_75(bool) = REF_59 == _requiredSignatures
CONDITION TMP_75"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
(true)

IRs:
RETURN True"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 2794.sol-MSFun-whatProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keccak256()(abi.encodePacked(_whatFunction,this)))

IRs:
TMP_79(bytes) = SOLIDITY_CALL abi.encodePacked()(_whatFunction,this)
TMP_80(bytes32) = SOLIDITY_CALL keccak256()(TMP_79)
RETURN TMP_80"];
}
// Function: 2794.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_24 = CONVERT _input to bytes
_temp(bytes) := TMP_24(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_25(bool) = _length <= 32
TMP_26(bool) = _length > 0
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_29(bool) = REF_1 != 32
TMP_30(uint256) = _length - 1
REF_2(None) -> _temp[TMP_30]
TMP_31(bool) = REF_2 != 32
TMP_32(bool) = TMP_29 && TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_34(bool) = REF_3 == 48
CONDITION TMP_34"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_35(bool) = REF_4 != 120
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_37(bool) = REF_5 != 88
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_39(bool) = i < _length
CONDITION TMP_39"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_40(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_41(bool) = REF_7 < 91
TMP_42(bool) = TMP_40 && TMP_41
CONDITION TMP_42"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_43 = CONVERT REF_9 to uint256
TMP_44(uint256) = TMP_43 + 32
TMP_45 = CONVERT TMP_44 to bytes1
REF_8(bytes1) (->_temp) := TMP_45(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_46(bool) = _hasNonNumber == False
CONDITION TMP_46"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_47(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_48(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_49(bool) = REF_12 < 123
TMP_50(bool) = TMP_48 && TMP_49
TMP_51(bool) = TMP_47 || TMP_50
REF_13(None) -> _temp[i]
TMP_52(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_53(bool) = REF_14 < 58
TMP_54(bool) = TMP_52 && TMP_53
TMP_55(bool) = TMP_51 || TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_57(bool) = REF_15 == 32
CONDITION TMP_57"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_58(uint256) = i + 1
REF_16(None) -> _temp[TMP_58]
TMP_59(bool) = REF_16 != 32
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_61(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_62(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_63(bool) = REF_18 > 57
TMP_64(bool) = TMP_62 || TMP_63
TMP_65(bool) = TMP_61 && TMP_64
CONDITION TMP_65"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_66(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_67(bool) = _hasNonNumber == True
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2794.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,derp, that games already been registered)

IRs:
REF_253(uint256) -> gameIDs_[_gameAddress]
TMP_303(bool) = REF_253 == 0
TMP_304(None) = SOLIDITY_CALL require(bool,string)(TMP_303,derp, that games already been registered)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
multiSigDev(addGame) == true

IRs:
TMP_305(bool) = INTERNAL_CALL, PlayerBook.multiSigDev(bytes32)(addGame)
TMP_306(bool) = TMP_305 == True
CONDITION TMP_306"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
deleteProposal(addGame)

IRs:
INTERNAL_CALL, PlayerBook.deleteProposal(bytes32)(addGame)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gID_ ++

IRs:
TMP_308(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_309(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_309(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_255(uint256) -> gameIDs_[_gameAddress]
REF_255(uint256) (->gameIDs_) := gID_(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_256(bytes32) -> gameNames_[_gameAddress]
REF_256(bytes32) (->gameNames_) := _name(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_257(PlayerBookReceiverInterface) -> games_[gID_]
TMP_310 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_257(PlayerBookReceiverInterface) (->games_) := TMP_310(PlayerBookReceiverInterface)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
games_[gID_].receivePlayerInfo(1,plyr_[1].addr,plyr_[1].name,0)

IRs:
REF_258(PlayerBookReceiverInterface) -> games_[gID_]
REF_260(PlayerBook.Player) -> plyr_[1]
REF_261(address) -> REF_260.addr
REF_262(PlayerBook.Player) -> plyr_[1]
REF_263(bytes32) -> REF_262.name
HIGH_LEVEL_CALL, dest:REF_258(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['1', 'REF_261', 'REF_263', '0']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
games_[gID_].receivePlayerInfo(2,plyr_[2].addr,plyr_[2].name,0)

IRs:
REF_264(PlayerBookReceiverInterface) -> games_[gID_]
REF_266(PlayerBook.Player) -> plyr_[2]
REF_267(address) -> REF_266.addr
REF_268(PlayerBook.Player) -> plyr_[2]
REF_269(bytes32) -> REF_268.name
HIGH_LEVEL_CALL, dest:REF_264(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['2', 'REF_267', 'REF_269', '0']  "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[gID_].receivePlayerInfo(3,plyr_[3].addr,plyr_[3].name,0)

IRs:
REF_270(PlayerBookReceiverInterface) -> games_[gID_]
REF_272(PlayerBook.Player) -> plyr_[3]
REF_273(address) -> REF_272.addr
REF_274(PlayerBook.Player) -> plyr_[3]
REF_275(bytes32) -> REF_274.name
HIGH_LEVEL_CALL, dest:REF_270(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['3', 'REF_273', 'REF_275', '0']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[gID_].receivePlayerInfo(4,plyr_[4].addr,plyr_[4].name,0)

IRs:
REF_276(PlayerBookReceiverInterface) -> games_[gID_]
REF_278(PlayerBook.Player) -> plyr_[4]
REF_279(address) -> REF_278.addr
REF_280(PlayerBook.Player) -> plyr_[4]
REF_281(bytes32) -> REF_280.name
HIGH_LEVEL_CALL, dest:REF_276(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['4', 'REF_279', 'REF_281', '0']  "];
12->13;
13[label="Node Type: END_IF 13
"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
14->1;
}
// Function: 2794.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_182(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_182(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_241(bool) = _pID != 0
TMP_242(None) = SOLIDITY_CALL require(bool,string)(TMP_241,hey there buddy, you dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_183(PlayerBook.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.laff
_laff(uint256) := REF_184(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_185(PlayerBook.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.names
_totalNames(uint256) := REF_186(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_187(PlayerBook.Player) -> plyr_[_pID]
REF_188(bytes32) -> REF_187.name
_name(bytes32) := REF_188(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_243(bool) = i <= gID_
CONDITION TMP_243"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_189(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_189(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_245(bool) = _totalNames > 1
CONDITION TMP_245"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_246(bool) = ii <= _totalNames
CONDITION TMP_246"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_191(PlayerBookReceiverInterface) -> games_[i]
REF_193(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_194(bytes32) -> REF_193[ii]
HIGH_LEVEL_CALL, dest:REF_191(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_194']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_248(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_249(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 2794.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,silly player, that game doesn't exist yet)

IRs:
TMP_231(bool) = _gameID <= gID_
TMP_232(None) = SOLIDITY_CALL require(bool,string)(TMP_231,silly player, that game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_169(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_169(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_233(bool) = _pID != 0
TMP_234(None) = SOLIDITY_CALL require(bool,string)(TMP_233,hey there buddy, you dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_170(PlayerBook.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.names
_totalNames(uint256) := REF_171(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_172(PlayerBookReceiverInterface) -> games_[_gameID]
REF_174(PlayerBook.Player) -> plyr_[_pID]
REF_175(bytes32) -> REF_174.name
REF_176(PlayerBook.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.laff
HIGH_LEVEL_CALL, dest:REF_172(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_175', 'REF_177']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_236(bool) = _totalNames > 1
CONDITION TMP_236"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_237(bool) = ii <= _totalNames
CONDITION TMP_237"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_178(PlayerBookReceiverInterface) -> games_[_gameID]
REF_180(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_181(bytes32) -> REF_180[ii]
HIGH_LEVEL_CALL, dest:REF_178(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_181']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_239(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 2794.sol-PlayerBook-checkData(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.checkMsgData(msData,_whatFunction),MSFun.checkCount(msData,_whatFunction))

IRs:
TMP_182(bytes32) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkMsgData(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
TMP_183(uint256) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkCount(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
RETURN TMP_182,TMP_183"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 2794.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_196(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_196(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_148(uint256) -> pIDxName_[_name]
TMP_197(bool) = REF_148 == 0
CONDITION TMP_197"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2794.sol-PlayerBook-checkSignersByAddress(bytes32,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.checkSigner(msData,_whatFunction,_signerA),MSFun.checkSigner(msData,_whatFunction,_signerB),MSFun.checkSigner(msData,_whatFunction,_signerC))

IRs:
TMP_185(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerA'] 
TMP_186(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerB'] 
TMP_187(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerC'] 
RETURN TMP_185,TMP_186,TMP_187"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 2794.sol-PlayerBook-checkSignersByName(bytes32,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(TeamJust.adminName(MSFun.checkSigner(msData,_whatFunction,_signerA)),TeamJust.adminName(MSFun.checkSigner(msData,_whatFunction,_signerB)),TeamJust.adminName(MSFun.checkSigner(msData,_whatFunction,_signerC)))

IRs:
TMP_189(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerA'] 
TMP_190(bytes32) = HIGH_LEVEL_CALL, dest:TeamJust(TeamInterface), function:adminName, arguments:['TMP_189']  
TMP_191(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerB'] 
TMP_192(bytes32) = HIGH_LEVEL_CALL, dest:TeamJust(TeamInterface), function:adminName, arguments:['TMP_191']  
TMP_193(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerC'] 
TMP_194(bytes32) = HIGH_LEVEL_CALL, dest:TeamJust(TeamInterface), function:adminName, arguments:['TMP_193']  
RETURN TMP_190,TMP_192,TMP_194"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 2794.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
plyr_[1].addr = DEV_1_ADDRESS

IRs:
REF_135(PlayerBook.Player) -> plyr_[1]
REF_136(address) -> REF_135.addr
REF_136(address) (->plyr_) := DEV_1_ADDRESS(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[1].name = DEV_1_NAME

IRs:
REF_137(PlayerBook.Player) -> plyr_[1]
REF_138(bytes32) -> REF_137.name
REF_138(bytes32) (->plyr_) := DEV_1_NAME(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[1].names = 1

IRs:
REF_139(PlayerBook.Player) -> plyr_[1]
REF_140(uint256) -> REF_139.names
REF_140(uint256) (->plyr_) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pIDxAddr_[DEV_1_ADDRESS] = 1

IRs:
REF_141(uint256) -> pIDxAddr_[DEV_1_ADDRESS]
REF_141(uint256) (->pIDxAddr_) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[DEV_1_NAME] = 1

IRs:
REF_142(uint256) -> pIDxName_[DEV_1_NAME]
REF_142(uint256) (->pIDxName_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrNames_[1][DEV_1_NAME] = true

IRs:
REF_143(mapping(bytes32 => bool)) -> plyrNames_[1]
REF_144(bool) -> REF_143[DEV_1_NAME]
REF_144(bool) (->plyrNames_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNameList_[1][1] = DEV_1_NAME

IRs:
REF_145(mapping(uint256 => bytes32)) -> plyrNameList_[1]
REF_146(bytes32) -> REF_145[1]
REF_146(bytes32) (->plyrNameList_) := DEV_1_NAME(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
pID_ = 1

IRs:
pID_(uint256) := 1(uint256)"];
}
// Function: 2794.sol-PlayerBook-deleteAnyProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
MSFun.deleteProposal(msData,_whatFunction)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 2794.sol-PlayerBook-deleteProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
MSFun.deleteProposal(msData,_whatFunction)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] "];
}
// Function: 2794.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_225(uint256) -> pIDxAddr_[_addr]
TMP_269(bool) = REF_225 == 0
CONDITION TMP_269"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_270(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_226(uint256) -> pIDxAddr_[_addr]
REF_226(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_227(PlayerBook.Player) -> plyr_[pID_]
REF_228(address) -> REF_227.addr
REF_228(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2794.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 2794.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_234(PlayerBook.Player) -> plyr_[_pID]
REF_235(address) -> REF_234.addr
RETURN REF_235"];
}
// Function: 2794.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_271(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_229(uint256) -> pIDxAddr_[_addr]
RETURN REF_229"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 2794.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_232(PlayerBook.Player) -> plyr_[_pID]
REF_233(uint256) -> REF_232.laff
RETURN REF_233"];
}
// Function: 2794.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_230(PlayerBook.Player) -> plyr_[_pID]
REF_231(bytes32) -> REF_230.name
RETURN REF_231"];
}
// Function: 2794.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_322(bool) = _codeLength == 0
TMP_323(None) = SOLIDITY_CALL require(bool,string)(TMP_322,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2794.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_283(uint256) -> gameIDs_[msg.sender]
TMP_327(bool) = REF_283 != 0
TMP_328(None) = SOLIDITY_CALL require(bool)(TMP_327)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2794.sol-PlayerBook-multiSigDev(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.multiSig(msData,TeamJust.requiredDevSignatures(),_whatFunction))

IRs:
TMP_177(uint256) = HIGH_LEVEL_CALL, dest:TeamJust(TeamInterface), function:requiredDevSignatures, arguments:[]  
TMP_178(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'TMP_177', '_whatFunction'] 
RETURN TMP_178"];
}
// Function: 2794.sol-PlayerBook-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(TeamJust.isDev(msg.sender) == true,msg sender is not a dev)

IRs:
TMP_324(bool) = HIGH_LEVEL_CALL, dest:TeamJust(TeamInterface), function:isDev, arguments:['msg.sender']  
TMP_325(bool) = TMP_324 == True
TMP_326(None) = SOLIDITY_CALL require(bool,string)(TMP_325,msg sender is not a dev)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2794.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_201(uint256) -> pIDxName_[_name]
TMP_255(bool) = REF_201 != 0
CONDITION TMP_255"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,sorry that names already taken)

IRs:
REF_202(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_203(bool) -> REF_202[_name]
TMP_256(bool) = REF_203 == True
TMP_257(None) = SOLIDITY_CALL require(bool,string)(TMP_256,sorry that names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_204(PlayerBook.Player) -> plyr_[_pID]
REF_205(bytes32) -> REF_204.name
REF_205(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_206(uint256) -> pIDxName_[_name]
REF_206(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_207(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_208(bool) -> REF_207[_name]
TMP_258(bool) = REF_208 == False
CONDITION TMP_258"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_209(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_210(bool) -> REF_209[_name]
REF_210(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_211(PlayerBook.Player) -> plyr_[_pID]
REF_212(uint256) -> REF_211.names
TMP_259(uint256) := REF_212(uint256)
REF_212(-> plyr_) = REF_212 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_213(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_214(PlayerBook.Player) -> plyr_[_pID]
REF_215(uint256) -> REF_214.names
REF_216(bytes32) -> REF_213[REF_215]
REF_216(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
FundForwarderConst.deposit.value(address(this).balance)()

IRs:
TMP_260 = CONVERT this to address
TMP_261(uint256) = SOLIDITY_CALL balance(address)(TMP_260)
TMP_263(bool) = HIGH_LEVEL_CALL, dest:FundForwarderConst(FundForwarderInterface), function:deposit, arguments:[] value:TMP_261 "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_264(bool) = _all == True
CONDITION TMP_264"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_265(bool) = i <= gID_
CONDITION TMP_265"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_219(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_219(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_267(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_221(PlayerBook.Player) -> plyr_[_affID]
REF_222(address) -> REF_221.addr
REF_223(PlayerBook.Player) -> plyr_[_affID]
REF_224(bytes32) -> REF_223.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_222,REF_224,msg.value,now)"];
}
// Function: 2794.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_198(bool) = msg.value >= registrationFee_
TMP_199(None) = SOLIDITY_CALL require(bool,string)(TMP_198,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_200(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_200(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_201(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_201(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_150(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_150(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_202(bool) = _affCode != 0
REF_151(PlayerBook.Player) -> plyr_[_pID]
REF_152(uint256) -> REF_151.laff
TMP_203(bool) = _affCode != REF_152
TMP_204(bool) = TMP_202 && TMP_203
TMP_205(bool) = _affCode != _pID
TMP_206(bool) = TMP_204 && TMP_205
CONDITION TMP_206"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_153(PlayerBook.Player) -> plyr_[_pID]
REF_154(uint256) -> REF_153.laff
REF_154(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_207(bool) = _affCode == _pID
CONDITION TMP_207"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 2794.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_273(bool) = msg.value >= registrationFee_
TMP_274(None) = SOLIDITY_CALL require(bool,string)(TMP_273,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_275(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_275(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_236(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_236(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_276(bool) = _affID != 0
REF_237(PlayerBook.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.laff
TMP_277(bool) = _affID != REF_238
TMP_278(bool) = TMP_276 && TMP_277
TMP_279(bool) = _affID != _pID
TMP_280(bool) = TMP_278 && TMP_279
CONDITION TMP_280"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_239(PlayerBook.Player) -> plyr_[_pID]
REF_240(uint256) -> REF_239.laff
REF_240(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_281(bool) = _affID == _pID
CONDITION TMP_281"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 2794.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_210(bool) = msg.value >= registrationFee_
TMP_211(None) = SOLIDITY_CALL require(bool,string)(TMP_210,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_212(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_212(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_213(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_213(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_156(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_156(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_214 = CONVERT 0 to address
TMP_215(bool) = _affCode != TMP_214
TMP_216(bool) = _affCode != _addr
TMP_217(bool) = TMP_215 && TMP_216
CONDITION TMP_217"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_157(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_157(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_158(PlayerBook.Player) -> plyr_[_pID]
REF_159(uint256) -> REF_158.laff
TMP_218(bool) = _affID != REF_159
CONDITION TMP_218"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_160(PlayerBook.Player) -> plyr_[_pID]
REF_161(uint256) -> REF_160.laff
REF_161(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 2794.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_284(bool) = msg.value >= registrationFee_
TMP_285(None) = SOLIDITY_CALL require(bool,string)(TMP_284,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_286(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_286(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_241(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_241(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_287 = CONVERT 0 to address
TMP_288(bool) = _affCode != TMP_287
TMP_289(bool) = _affCode != _addr
TMP_290(bool) = TMP_288 && TMP_289
CONDITION TMP_290"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_242(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_242(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_243(PlayerBook.Player) -> plyr_[_pID]
REF_244(uint256) -> REF_243.laff
TMP_291(bool) = _affID != REF_244
CONDITION TMP_291"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_245(PlayerBook.Player) -> plyr_[_pID]
REF_246(uint256) -> REF_245.laff
REF_246(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 2794.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_221(bool) = msg.value >= registrationFee_
TMP_222(None) = SOLIDITY_CALL require(bool,string)(TMP_221,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_223(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_223(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_224(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_224(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_163(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_163(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_225(bool) = _affCode != 
TMP_226(bool) = _affCode != _name
TMP_227(bool) = TMP_225 && TMP_226
CONDITION TMP_227"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_164(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_164(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_165(PlayerBook.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.laff
TMP_228(bool) = _affID != REF_166
CONDITION TMP_228"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_167(PlayerBook.Player) -> plyr_[_pID]
REF_168(uint256) -> REF_167.laff
REF_168(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 2794.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_294(bool) = msg.value >= registrationFee_
TMP_295(None) = SOLIDITY_CALL require(bool,string)(TMP_294,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_296(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_296(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_247(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_247(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_297(bool) = _affCode != 
TMP_298(bool) = _affCode != _name
TMP_299(bool) = TMP_297 && TMP_298
CONDITION TMP_299"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_248(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_248(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_249(PlayerBook.Player) -> plyr_[_pID]
REF_250(uint256) -> REF_249.laff
TMP_300(bool) = _affID != REF_250
CONDITION TMP_300"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_251(PlayerBook.Player) -> plyr_[_pID]
REF_252(uint256) -> REF_251.laff
REF_252(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 2794.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
multiSigDev(setRegistrationFee) == true

IRs:
TMP_316(bool) = INTERNAL_CALL, PlayerBook.multiSigDev(bytes32)(setRegistrationFee)
TMP_317(bool) = TMP_316 == True
CONDITION TMP_317"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deleteProposal(setRegistrationFee)

IRs:
INTERNAL_CALL, PlayerBook.deleteProposal(bytes32)(setRegistrationFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
5->1;
}
// Function: 2794.sol-PlayerBook-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DEV_1_ADDRESS = 0x7a9E13E044CB905957eA465488DabD5F5D34E2C4

IRs:
DEV_1_ADDRESS(address) := 700022123230003621868862953825840895416945926852(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
DEV_1_NAME = master

IRs:
DEV_1_NAME(bytes32) := master(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
FundForwarderConst = FundForwarderInterface(0x5095072aEE46a39D0b3753184514ead86405780f)

IRs:
TMP_320 = CONVERT 460042697095072200039847868154607798061323614223 to FundForwarderInterface
FundForwarderConst(FundForwarderInterface) := TMP_320(FundForwarderInterface)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TeamJust = TeamInterface(0xf72848D3426d8dB71e52FAc6Df29585649bb7CBD)

IRs:
TMP_321 = CONVERT 1411019094173893976874299779530883402652515531965 to TeamInterface
TeamJust(TeamInterface) := TMP_321(TeamInterface)"];
}
// Function: 2794.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 2794.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_251(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_251(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_196(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_196(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_197(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_198(bool) -> REF_197[_name]
TMP_252(bool) = REF_198 == True
TMP_253(None) = SOLIDITY_CALL require(bool,string)(TMP_252,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_199(PlayerBook.Player) -> plyr_[_pID]
REF_200(bytes32) -> REF_199.name
REF_200(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 2794.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2794.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2794.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2794.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2794.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2794.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2794.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2794.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2794.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 2794.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 2794.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2794.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2794.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2794.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_19(bool) = x == 0
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_20(bool) = y == 0
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_21(bool) = i < y
CONDITION TMP_21"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_22(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2794.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_18(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_18"];
}
// Function: 2794.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_13(uint256) = TMP_12 / 2
z(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_14(bool) = z < y
CONDITION TMP_14"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_15(uint256) = x / z
TMP_16(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_15,z)
TMP_17(uint256) = TMP_16 / 2
z(uint256) := TMP_17(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2794.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 2794.sol-Team-addAdmin(address,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: IF 1

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,addAdmin) == true

IRs:
TMP_352(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'addAdmin'] 
TMP_353(bool) = TMP_352 == True
CONDITION TMP_353"];
1->2[label="True"];
1->13[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MSFun.deleteProposal(msData,addAdmin)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'addAdmin'] "];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
admins_[_who].isAdmin == false

IRs:
REF_298(Team.Admin) -> admins_[_who]
REF_299(bool) -> REF_298.isAdmin
TMP_355(bool) = REF_299 == False
CONDITION TMP_355"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
admins_[_who].isAdmin = true

IRs:
REF_300(Team.Admin) -> admins_[_who]
REF_301(bool) -> REF_300.isAdmin
REF_301(bool) (->admins_) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
adminCount_ += 1

IRs:
adminCount_(uint256) = adminCount_ + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
requiredSignatures_ += 1

IRs:
requiredSignatures_(uint256) = requiredSignatures_ + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_isDev == true

IRs:
TMP_356(bool) = _isDev == True
CONDITION TMP_356"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
admins_[_who].isDev = _isDev

IRs:
REF_302(Team.Admin) -> admins_[_who]
REF_303(bool) -> REF_302.isDev
REF_303(bool) (->admins_) := _isDev(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
devCount_ += 1

IRs:
devCount_(uint256) = devCount_ + 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
requiredDevSignatures_ += 1

IRs:
requiredDevSignatures_(uint256) = requiredDevSignatures_ + 1"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins_[_who].name = _name

IRs:
REF_304(Team.Admin) -> admins_[_who]
REF_305(bytes32) -> REF_304.name
REF_305(bytes32) (->admins_) := _name(bytes32)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, Team.onlyDevs()()"];
15->1;
}
// Function: 2794.sol-Team-adminCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(adminCount_)

IRs:
RETURN adminCount_"];
}
// Function: 2794.sol-Team-adminName(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(admins_[_who].name)

IRs:
REF_322(Team.Admin) -> admins_[_who]
REF_323(bytes32) -> REF_322.name
RETURN REF_323"];
}
// Function: 2794.sol-Team-changeRequiredDevSignatures(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_howMany > 0 && _howMany <= devCount_,changeRequiredDevSignatures failed - must be between 1 and number of devs)

IRs:
TMP_383(bool) = _howMany > 0
TMP_384(bool) = _howMany <= devCount_
TMP_385(bool) = TMP_383 && TMP_384
TMP_386(None) = SOLIDITY_CALL require(bool,string)(TMP_385,changeRequiredDevSignatures failed - must be between 1 and number of devs)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,changeRequiredDevSignatures) == true

IRs:
TMP_387(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'changeRequiredDevSignatures'] 
TMP_388(bool) = TMP_387 == True
CONDITION TMP_388"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MSFun.deleteProposal(msData,changeRequiredDevSignatures)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'changeRequiredDevSignatures'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
requiredDevSignatures_ = _howMany

IRs:
requiredDevSignatures_(uint256) := _howMany(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, Team.onlyDevs()()"];
6->1;
}
// Function: 2794.sol-Team-changeRequiredSignatures(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_howMany > 0 && _howMany <= adminCount_,changeRequiredSignatures failed - must be between 1 and number of admins)

IRs:
TMP_375(bool) = _howMany > 0
TMP_376(bool) = _howMany <= adminCount_
TMP_377(bool) = TMP_375 && TMP_376
TMP_378(None) = SOLIDITY_CALL require(bool,string)(TMP_377,changeRequiredSignatures failed - must be between 1 and number of admins)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,changeRequiredSignatures) == true

IRs:
TMP_379(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'changeRequiredSignatures'] 
TMP_380(bool) = TMP_379 == True
CONDITION TMP_380"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MSFun.deleteProposal(msData,changeRequiredSignatures)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'changeRequiredSignatures'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
requiredSignatures_ = _howMany

IRs:
requiredSignatures_(uint256) := _howMany(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, Team.onlyDevs()()"];
6->1;
}
// Function: 2794.sol-Team-checkData(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.checkMsgData(msData,_whatFunction),MSFun.checkCount(msData,_whatFunction))

IRs:
TMP_331(bytes32) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkMsgData(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
TMP_332(uint256) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkCount(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
RETURN TMP_331,TMP_332"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Team.onlyAdmins()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
(message_data,signature_count)

IRs:
RETURN message_data,signature_count"];
}
// Function: 2794.sol-Team-checkSignersByName(bytes32,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(this.adminName(MSFun.checkSigner(msData,_whatFunction,_signerA)),this.adminName(MSFun.checkSigner(msData,_whatFunction,_signerB)),this.adminName(MSFun.checkSigner(msData,_whatFunction,_signerC)))

IRs:
TMP_334(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerA'] 
TMP_335(bytes32) = HIGH_LEVEL_CALL, dest:this(address), function:adminName, arguments:['TMP_334']  
TMP_336(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerB'] 
TMP_337(bytes32) = HIGH_LEVEL_CALL, dest:this(address), function:adminName, arguments:['TMP_336']  
TMP_338(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerC'] 
TMP_339(bytes32) = HIGH_LEVEL_CALL, dest:this(address), function:adminName, arguments:['TMP_338']  
RETURN TMP_335,TMP_337,TMP_339"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Team.onlyAdmins()()"];
2->1;
}
// Function: 2794.sol-Team-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins_[DEV_1_ADDRESS] = Admin(true,true,DEV_1_NAME)

IRs:
REF_293(Team.Admin) -> admins_[DEV_1_ADDRESS]
TMP_341(Team.Admin) = new Admin(True,True,DEV_1_NAME)
REF_293(Team.Admin) (->admins_) := TMP_341(Team.Admin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adminCount_ = 1

IRs:
adminCount_(uint256) := 1(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
devCount_ = 1

IRs:
devCount_(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
requiredSignatures_ = 1

IRs:
requiredSignatures_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
requiredDevSignatures_ = 1

IRs:
requiredDevSignatures_(uint256) := 1(uint256)"];
}
// Function: 2794.sol-Team-deleteAnyProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
MSFun.deleteProposal(msData,_whatFunction)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, Team.onlyDevs()()"];
2->1;
}
// Function: 2794.sol-Team-devCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(devCount_)

IRs:
RETURN devCount_"];
}
// Function: 2794.sol-Team-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FundForwarderTeam.deposit.value(address(this).balance)()

IRs:
TMP_342 = CONVERT this to address
TMP_343(uint256) = SOLIDITY_CALL balance(address)(TMP_342)
TMP_345(bool) = HIGH_LEVEL_CALL, dest:FundForwarderTeam(FundForwarderInterface), function:deposit, arguments:[] value:TMP_343 "];
}
// Function: 2794.sol-Team-isAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(admins_[_who].isAdmin)

IRs:
REF_324(Team.Admin) -> admins_[_who]
REF_325(bool) -> REF_324.isAdmin
RETURN REF_325"];
}
// Function: 2794.sol-Team-isDev(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(admins_[_who].isDev)

IRs:
REF_326(Team.Admin) -> admins_[_who]
REF_327(bool) -> REF_326.isDev
RETURN REF_327"];
}
// Function: 2794.sol-Team-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(admins_[msg.sender].isAdmin == true,onlyAdmins failed - msg.sender is not an admin)

IRs:
REF_330(Team.Admin) -> admins_[msg.sender]
REF_331(bool) -> REF_330.isAdmin
TMP_394(bool) = REF_331 == True
TMP_395(None) = SOLIDITY_CALL require(bool,string)(TMP_394,onlyAdmins failed - msg.sender is not an admin)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2794.sol-Team-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(admins_[msg.sender].isDev == true,onlyDevs failed - msg.sender is not a dev)

IRs:
REF_328(Team.Admin) -> admins_[msg.sender]
REF_329(bool) -> REF_328.isDev
TMP_392(bool) = REF_329 == True
TMP_393(None) = SOLIDITY_CALL require(bool,string)(TMP_392,onlyDevs failed - msg.sender is not a dev)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2794.sol-Team-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(adminCount_ > 1,removeAdmin failed - cannot have less than 2 admins)

IRs:
TMP_358(bool) = adminCount_ > 1
TMP_359(None) = SOLIDITY_CALL require(bool,string)(TMP_358,removeAdmin failed - cannot have less than 2 admins)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(adminCount_ >= requiredSignatures_,removeAdmin failed - cannot have less admins than number of required signatures)

IRs:
TMP_360(bool) = adminCount_ >= requiredSignatures_
TMP_361(None) = SOLIDITY_CALL require(bool,string)(TMP_360,removeAdmin failed - cannot have less admins than number of required signatures)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
admins_[_who].isDev == true

IRs:
REF_306(Team.Admin) -> admins_[_who]
REF_307(bool) -> REF_306.isDev
TMP_362(bool) = REF_307 == True
CONDITION TMP_362"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(devCount_ > 1,removeAdmin failed - cannot have less than 2 devs)

IRs:
TMP_363(bool) = devCount_ > 1
TMP_364(None) = SOLIDITY_CALL require(bool,string)(TMP_363,removeAdmin failed - cannot have less than 2 devs)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(devCount_ >= requiredDevSignatures_,removeAdmin failed - cannot have less devs than number of required dev signatures)

IRs:
TMP_365(bool) = devCount_ >= requiredDevSignatures_
TMP_366(None) = SOLIDITY_CALL require(bool,string)(TMP_365,removeAdmin failed - cannot have less devs than number of required dev signatures)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,removeAdmin) == true

IRs:
TMP_367(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'removeAdmin'] 
TMP_368(bool) = TMP_367 == True
CONDITION TMP_368"];
7->8[label="True"];
7->23[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MSFun.deleteProposal(msData,removeAdmin)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'removeAdmin'] "];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
admins_[_who].isAdmin == true

IRs:
REF_310(Team.Admin) -> admins_[_who]
REF_311(bool) -> REF_310.isAdmin
TMP_370(bool) = REF_311 == True
CONDITION TMP_370"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
admins_[_who].isAdmin = false

IRs:
REF_312(Team.Admin) -> admins_[_who]
REF_313(bool) -> REF_312.isAdmin
REF_313(bool) (->admins_) := False(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
adminCount_ -= 1

IRs:
adminCount_(uint256) = adminCount_ - 1"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
requiredSignatures_ > 1

IRs:
TMP_371(bool) = requiredSignatures_ > 1
CONDITION TMP_371"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
requiredSignatures_ -= 1

IRs:
requiredSignatures_(uint256) = requiredSignatures_ - 1"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
admins_[_who].isDev == true

IRs:
REF_314(Team.Admin) -> admins_[_who]
REF_315(bool) -> REF_314.isDev
TMP_372(bool) = REF_315 == True
CONDITION TMP_372"];
16->17[label="True"];
16->22[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admins_[_who].isDev = false

IRs:
REF_316(Team.Admin) -> admins_[_who]
REF_317(bool) -> REF_316.isDev
REF_317(bool) (->admins_) := False(bool)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
devCount_ -= 1

IRs:
devCount_(uint256) = devCount_ - 1"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
requiredDevSignatures_ > 1

IRs:
TMP_373(bool) = requiredDevSignatures_ > 1
CONDITION TMP_373"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
requiredDevSignatures_ -= 1

IRs:
requiredDevSignatures_(uint256) = requiredDevSignatures_ - 1"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, Team.onlyDevs()()"];
24->1;
}
// Function: 2794.sol-Team-requiredDevSignatures()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(requiredDevSignatures_)

IRs:
RETURN requiredDevSignatures_"];
}
// Function: 2794.sol-Team-requiredSignatures()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(requiredSignatures_)

IRs:
RETURN requiredSignatures_"];
}
// Function: 2794.sol-Team-setup(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(FundForwarderTeam) == address(0))

IRs:
TMP_346 = CONVERT FundForwarderTeam to address
TMP_347 = CONVERT 0 to address
TMP_348(bool) = TMP_346 == TMP_347
TMP_349(None) = SOLIDITY_CALL require(bool)(TMP_348)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FundForwarderTeam = FundForwarderInterface(_addr)

IRs:
TMP_350 = CONVERT _addr to FundForwarderInterface
FundForwarderTeam(FundForwarderInterface) := TMP_350(FundForwarderInterface)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, Team.onlyDevs()()"];
3->1;
}
// Function: 2794.sol-Team-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DEV_1_ADDRESS = 0x7a9E13E044CB905957eA465488DabD5F5D34E2C4

IRs:
DEV_1_ADDRESS(address) := 700022123230003621868862953825840895416945926852(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
DEV_1_NAME = master

IRs:
DEV_1_NAME(bytes32) := master(string)"];
}
// Function: 2794.sol-Team-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
FundForwarderTeam = FundForwarderInterface(0x0)

IRs:
TMP_391 = CONVERT 0 to FundForwarderInterface
FundForwarderTeam(FundForwarderInterface) := TMP_391(FundForwarderInterface)"];
}
// Function: 2794.sol-TeamInterface-adminCount()
digraph{
}
// Function: 2794.sol-TeamInterface-adminName(address)
digraph{
}
// Function: 2794.sol-TeamInterface-devCount()
digraph{
}
// Function: 2794.sol-TeamInterface-isAdmin(address)
digraph{
}
// Function: 2794.sol-TeamInterface-isDev(address)
digraph{
}
// Function: 2794.sol-TeamInterface-requiredDevSignatures()
digraph{
}
// Function: 2794.sol-TeamInterface-requiredSignatures()
digraph{
}
// Function: 2794.sol-UintCompressor-exponent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((10).pwr(_position))

IRs:
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.pwr(uint256,uint256), arguments:['10', '_position'] 
RETURN TMP_145"];
}
// Function: 2794.sol-UintCompressor-extract(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_130(bool) = _end < 77
TMP_131(bool) = _start < 77
TMP_132(bool) = TMP_130 && TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool,string)(TMP_132,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_134(bool) = _end >= _start
TMP_135(None) = SOLIDITY_CALL require(bool,string)(TMP_134,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_136(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_136', '10'] 
_end(uint256) := TMP_137(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_138(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_138(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start)

IRs:
TMP_139(uint256) = _input / _start
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_139', '_start'] 
TMP_141(uint256) = _input / _end
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_141', '_end'] 
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_140', 'TMP_142'] 
TMP_144(uint256) = TMP_143 / _start
RETURN TMP_144"];
}
// Function: 2794.sol-UintCompressor-insert(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_109(bool) = _end < 77
TMP_110(bool) = _start < 77
TMP_111(bool) = TMP_109 && TMP_110
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_113(bool) = _end >= _start
TMP_114(None) = SOLIDITY_CALL require(bool,string)(TMP_113,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_115(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_115', '10'] 
_end(uint256) := TMP_116(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_117(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_117(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_include < (_end / _start))

IRs:
TMP_118(uint256) = _end / _start
TMP_119(bool) = _include < TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_include > 0

IRs:
TMP_121(bool) = _include > 0
CONDITION TMP_121"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_include = _include.mul(_start)

IRs:
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_include', '_start'] 
_include(uint256) := TMP_122(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)))

IRs:
TMP_123(uint256) = _var / _start
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', '_start'] 
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_var', 'TMP_124'] 
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_125', '_include'] 
TMP_127(uint256) = _var / _end
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_127', '_end'] 
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_126', 'TMP_128'] 
RETURN TMP_129"];
}
// Function: 2794.sol-otherFoMo3D-potSwap()
digraph{
}
}
