digraph G {
// Function: 2859.sol-ArtMuseumBase-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_15 = CONVERT 0 to address
pendingOwner(address) := TMP_15(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Ownable.onlyPendingOwner()()"];
4->1;
}
// Function: 2859.sol-ArtMuseumBase-collectFees(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
collectedFees = getFees()

IRs:
TMP_28(uint256) = INTERNAL_CALL, ArtMuseumBase.getFees()()
collectedFees(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
amount <= collectedFees

IRs:
TMP_29(bool) = amount <= collectedFees
CONDITION TMP_29"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
like.transfer(owner,amount)

IRs:
TMP_30(bool) = HIGH_LEVEL_CALL, dest:like(LikeCoinInterface), function:transfer, arguments:['owner', 'amount']  "];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 2859.sol-ArtMuseumBase-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2859.sol-ArtMuseumBase-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2859.sol-ArtMuseumBase-getAllArtworks()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
artworkIds = new uint32[](numArtworks)

IRs:
TMP_33(uint32[])  = new uint32[](numArtworks)
artworkIds(uint32[]) = ['TMP_33(uint32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
types = new uint8[](numArtworks)

IRs:
TMP_35(uint8[])  = new uint8[](numArtworks)
types(uint8[]) = ['TMP_35(uint8[])']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
sequenceNumbers = new uint32[](numArtworks)

IRs:
TMP_37(uint32[])  = new uint32[](numArtworks)
sequenceNumbers(uint32[]) = ['TMP_37(uint32[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
artworkValues = new uint128[](numArtworks)

IRs:
TMP_39(uint128[])  = new uint128[](numArtworks)
artworkValues(uint128[]) = ['TMP_39(uint128[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->16;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < numArtworks

IRs:
TMP_40(bool) = i < numArtworks
CONDITION TMP_40"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
id = ids[i]

IRs:
REF_10(uint32) -> ids[i]
id(uint32) := REF_10(uint32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
artworkIds[i] = id

IRs:
REF_11(uint32) -> artworkIds[i]
REF_11(uint32) (->artworkIds) := id(uint32)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
types[i] = artworks[id].artworkType

IRs:
REF_12(uint8) -> types[i]
REF_13(ArtMuseumBase.Artwork) -> artworks[id]
REF_14(uint8) -> REF_13.artworkType
REF_12(uint8) (->types) := REF_14(uint8)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
sequenceNumbers[i] = artworks[id].sequenceNumber

IRs:
REF_15(uint32) -> sequenceNumbers[i]
REF_16(ArtMuseumBase.Artwork) -> artworks[id]
REF_17(uint32) -> REF_16.sequenceNumber
REF_15(uint32) (->sequenceNumbers) := REF_17(uint32)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
artworkValues[i] = artworks[id].value

IRs:
REF_18(uint128) -> artworkValues[i]
REF_19(ArtMuseumBase.Artwork) -> artworks[id]
REF_20(uint128) -> REF_19.value
REF_18(uint128) (->artworkValues) := REF_20(uint128)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_41(uint16) := i(uint16)
i(uint16) = i + 1"];
15->9;
16[label="Node Type: RETURN 16

EXPRESSION:
(artworkIds,types,sequenceNumbers,artworkValues)

IRs:
RETURN artworkIds,types,sequenceNumbers,artworkValues"];
}
// Function: 2859.sol-ArtMuseumBase-getAllArtworksByOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
howmany = 0

IRs:
howmany(uint16) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
player = address(msg.sender)

IRs:
TMP_42 = CONVERT msg.sender to address
player(address) := TMP_42(address)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
k = 0

IRs:
k(uint16) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
k < numArtworks

IRs:
TMP_43(bool) = k < numArtworks
CONDITION TMP_43"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
artworks[ids[k]].player == player

IRs:
REF_21(uint32) -> ids[k]
REF_22(ArtMuseumBase.Artwork) -> artworks[REF_21]
REF_23(address) -> REF_22.player
TMP_44(bool) = REF_23 == player
CONDITION TMP_44"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
howmany ++

IRs:
TMP_45(uint16) := howmany(uint16)
howmany(uint16) = howmany + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
k ++

IRs:
TMP_46(uint16) := k(uint16)
k(uint16) = k + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
artworkIds = new uint32[](howmany)

IRs:
TMP_48(uint32[])  = new uint32[](howmany)
artworkIds(uint32[]) = ['TMP_48(uint32[])']"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
types = new uint8[](howmany)

IRs:
TMP_50(uint8[])  = new uint8[](howmany)
types(uint8[]) = ['TMP_50(uint8[])']"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
sequenceNumbers = new uint32[](howmany)

IRs:
TMP_52(uint32[])  = new uint32[](howmany)
sequenceNumbers(uint32[]) = ['TMP_52(uint32[])']"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
artworkValues = new uint128[](howmany)

IRs:
TMP_54(uint128[])  = new uint128[](howmany)
artworkValues(uint128[]) = ['TMP_54(uint128[])']"];
16->19;
17[label="Node Type: BEGIN_LOOP 17
"];
17->20;
18[label="Node Type: END_LOOP 18
"];
18->30;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
19->17;
20[label="Node Type: IF_LOOP 20

EXPRESSION:
i < numArtworks

IRs:
TMP_55(bool) = i < numArtworks
CONDITION TMP_55"];
20->21[label="True"];
20->18[label="False"];
21[label="Node Type: IF 21

EXPRESSION:
artworks[ids[i]].player == player

IRs:
REF_24(uint32) -> ids[i]
REF_25(ArtMuseumBase.Artwork) -> artworks[REF_24]
REF_26(address) -> REF_25.player
TMP_56(bool) = REF_26 == player
CONDITION TMP_56"];
21->22[label="True"];
21->28[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
id = ids[i]

IRs:
REF_27(uint32) -> ids[i]
id(uint32) := REF_27(uint32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
artworkIds[j] = id

IRs:
REF_28(uint32) -> artworkIds[j]
REF_28(uint32) (->artworkIds) := id(uint32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
types[j] = artworks[id].artworkType

IRs:
REF_29(uint8) -> types[j]
REF_30(ArtMuseumBase.Artwork) -> artworks[id]
REF_31(uint8) -> REF_30.artworkType
REF_29(uint8) (->types) := REF_31(uint8)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
sequenceNumbers[j] = artworks[id].sequenceNumber

IRs:
REF_32(uint32) -> sequenceNumbers[j]
REF_33(ArtMuseumBase.Artwork) -> artworks[id]
REF_34(uint32) -> REF_33.sequenceNumber
REF_32(uint32) (->sequenceNumbers) := REF_34(uint32)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
artworkValues[j] = artworks[id].value

IRs:
REF_35(uint128) -> artworkValues[j]
REF_36(ArtMuseumBase.Artwork) -> artworks[id]
REF_37(uint128) -> REF_36.value
REF_35(uint128) (->artworkValues) := REF_37(uint128)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
j ++

IRs:
TMP_57(uint16) := j(uint16)
j(uint16) = j + 1"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i ++

IRs:
TMP_58(uint16) := i(uint16)
i(uint16) = i + 1"];
29->20;
30[label="Node Type: RETURN 30

EXPRESSION:
(artworkIds,types,sequenceNumbers,artworkValues)

IRs:
RETURN artworkIds,types,sequenceNumbers,artworkValues"];
}
// Function: 2859.sol-ArtMuseumBase-getArtwork(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(artworks[artworkId].artworkType,artworks[artworkId].sequenceNumber,artworks[artworkId].value,artworks[artworkId].player)

IRs:
REF_2(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_3(uint8) -> REF_2.artworkType
REF_4(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_5(uint32) -> REF_4.sequenceNumber
REF_6(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_7(uint128) -> REF_6.value
REF_8(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_9(address) -> REF_8.player
RETURN REF_3,REF_5,REF_7,REF_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
(artworkType,sequenceNumber,value,player)

IRs:
RETURN artworkType,sequenceNumber,value,player"];
}
// Function: 2859.sol-ArtMuseumBase-getFees()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reserved = 0

IRs:
reserved(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
j < numArtworks

IRs:
TMP_79(bool) = j < numArtworks
CONDITION TMP_79"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
reserved += artworks[ids[j]].value

IRs:
REF_53(uint32) -> ids[j]
REF_54(ArtMuseumBase.Artwork) -> artworks[REF_53]
REF_55(uint128) -> REF_54.value
reserved(uint256) = reserved + REF_55"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
j ++

IRs:
TMP_80(uint16) := j(uint16)
j(uint16) = j + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
like.balanceOf(this) - reserved

IRs:
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:like(LikeCoinInterface), function:balanceOf, arguments:['this']  
TMP_82(uint256) = TMP_81 - reserved
RETURN TMP_82"];
}
// Function: 2859.sol-ArtMuseumBase-getNumArtworksXType()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_numArtworksXType = numArtworksXType

IRs:
_numArtworksXType(uint32[]) := numArtworksXType(uint32[])"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_numArtworksXType

IRs:
RETURN _numArtworksXType"];
}
// Function: 2859.sol-ArtMuseumBase-init(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(like == address(0))

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = like == TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
like = LikeCoinInterface(_likeAddr)

IRs:
TMP_21 = CONVERT _likeAddr to LikeCoinInterface
like(LikeCoinInterface) := TMP_21(LikeCoinInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
costs = (800000000000000000000,2000000000000000000000,5000000000000000000000,12000000000000000000000,25000000000000000000000)

IRs:
costs(uint128[]) = ['800000000000000000000(uint256)', '2000000000000000000000(uint256)', '5000000000000000000000(uint256)', '12000000000000000000000(uint256)', '25000000000000000000000(uint256)']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFee(5)

IRs:
INTERNAL_CALL, ArtMuseumBase.setFee(uint8)(5)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
maxArtworks = 1000

IRs:
maxArtworks(uint16) := 1000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastId = 1

IRs:
lastId(uint32) := 1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oldest = 0

IRs:
oldest(uint32) := 0(uint256)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 2859.sol-ArtMuseumBase-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_83(bool) = msg.sender == owner
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-ArtMuseumBase-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_85(bool) = msg.sender == pendingOwner
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-ArtMuseumBase-ownerOrOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == operator)

IRs:
TMP_87(bool) = msg.sender == owner
TMP_88(bool) = msg.sender == operator
TMP_89(bool) = TMP_87 || TMP_88
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-ArtMuseumBase-setCosts(uint128[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_costs.length >= costs.length)

IRs:
REF_38 -> LENGTH _costs
REF_39 -> LENGTH costs
TMP_59(bool) = REF_38 >= REF_39
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
costs = _costs

IRs:
costs(uint128[]) := _costs(uint128[])"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFee(fee)

IRs:
INTERNAL_CALL, ArtMuseumBase.setFee(uint8)(fee)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2859.sol-ArtMuseumBase-setFee(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fee = _fee

IRs:
fee(uint8) := _fee(uint8)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < costs.length

IRs:
REF_40 -> LENGTH costs
TMP_63(bool) = i < REF_40
CONDITION TMP_63"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
i < values.length

IRs:
REF_41 -> LENGTH values
TMP_64(bool) = i < REF_41
CONDITION TMP_64"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
values[i] = costs[i] - costs[i] / 100 * fee

IRs:
REF_42(uint128) -> values[i]
REF_43(uint128) -> costs[i]
REF_44(uint128) -> costs[i]
TMP_65(uint128) = REF_44 / 100
TMP_66(uint128) = TMP_65 * fee
TMP_67(uint128) = REF_43 - TMP_66
REF_42(uint128) (->values) := TMP_67(uint128)"];
7->10;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
values.push(costs[i] - costs[i] / 100 * fee)

IRs:
REF_46(uint128) -> costs[i]
REF_47(uint128) -> costs[i]
TMP_68(uint128) = REF_47 / 100
TMP_69(uint128) = TMP_68 * fee
TMP_70(uint128) = REF_46 - TMP_69
REF_48 -> LENGTH values
TMP_72(uint256) := REF_48(uint256)
TMP_73(uint256) = TMP_72 + 1
REF_48(uint256) (->values) := TMP_73(uint256)
REF_49(uint128) -> values[TMP_72]
REF_49(uint128) (->values) := TMP_70(uint128)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
numArtworksXType.push(0)

IRs:
REF_51 -> LENGTH numArtworksXType
TMP_75(uint256) := REF_51(uint256)
TMP_76(uint256) = TMP_75 + 1
REF_51(uint256) (->numArtworksXType) := TMP_76(uint256)
REF_52(uint32) -> numArtworksXType[TMP_75]
REF_52(uint32) (->numArtworksXType) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_77(uint8) := i(uint8)
i(uint8) = i + 1"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
12->1;
}
// Function: 2859.sol-ArtMuseumBase-setOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumBase-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumBase-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_24 = CONVERT this to address
TMP_25(uint256) = SOLIDITY_CALL balance(address)(TMP_24)
Transfer dest:owner value:TMP_25"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
res

IRs:
RETURN res"];
}
// Function: 2859.sol-ArtMuseumV1-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
gaslimit = gasleft()()

IRs:
TMP_599(uint256) = SOLIDITY_CALL gasleft()()
gaslimit(uint256) := TMP_599(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
oraclizeFeeTmp = 0

IRs:
oraclizeFeeTmp(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender == oraclize_cbAddress() && myid == nextStealId

IRs:
TMP_600(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_601(bool) = msg.sender == TMP_600
TMP_602(bool) = myid == nextStealId
TMP_603(bool) = TMP_601 && TMP_602
CONDITION TMP_603"];
7->19[label="True"];
7->17[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pot = removeArtworksByString(result,howmany)

IRs:
TMP_604(uint128) = INTERNAL_CALL, ArtMuseumV1.removeArtworksByString(string,uint32)(result,howmany)
pot(uint128) := TMP_604(uint128)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
gasCost = ((oraclizeFee * etherExchangeLikeCoin) / 1000000000000000000) * 1000000000000000000 + 1000000000000000000

IRs:
TMP_605(uint256) = oraclizeFee * etherExchangeLikeCoin
TMP_606(uint256) = TMP_605 / 1000000000000000000
TMP_607(uint256) = TMP_606 * 1000000000000000000
TMP_608(uint256) = TMP_607 + 1000000000000000000
gasCost(uint256) := TMP_608(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
pot > gasCost

IRs:
TMP_609(bool) = pot > gasCost
CONDITION TMP_609"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
distpot = uint128(pot - gasCost)

IRs:
TMP_610(uint128) = pot - gasCost
TMP_611 = CONVERT TMP_610 to uint128
distpot(uint128) := TMP_611(uint128)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
distribute(distpot)

IRs:
INTERNAL_CALL, ArtMuseumV1.distribute(uint128)(distpot)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
oraclizeFeeTmp = oraclizeFee

IRs:
oraclizeFeeTmp(uint256) := oraclizeFee(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
oraclizeFee = 0

IRs:
oraclizeFee(uint256) := 0(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
newOraclizeCallback(myid,result,howmany,pot,distpot,oraclizeFeeTmp,gaslimit,etherExchangeLikeCoin)

IRs:
Emit newOraclizeCallback(myid,result,howmany,pot,distpot,oraclizeFeeTmp,gaslimit,etherExchangeLikeCoin)"];
19[label="Node Type: IF 19

EXPRESSION:
numArtworks < 100

IRs:
TMP_614(bool) = numArtworks < 100
CONDITION TMP_614"];
19->23[label="True"];
19->21[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
howmany = 10

IRs:
howmany(uint32) := 10(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->9;
23[label="Node Type: IF 23

EXPRESSION:
numArtworks < 10

IRs:
TMP_615(bool) = numArtworks < 10
CONDITION TMP_615"];
23->27[label="True"];
23->25[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
howmany = numArtworks / 10

IRs:
TMP_616(uint32) = numArtworks / 10
howmany(uint32) := TMP_616(uint32)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->22;
27[label="Node Type: IF 27

EXPRESSION:
numArtworks < 2

IRs:
TMP_617(bool) = numArtworks < 2
CONDITION TMP_617"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
howmany = 0

IRs:
howmany(uint32) := 0(uint256)"];
28->30;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
howmany = 1

IRs:
howmany(uint32) := 1(uint256)"];
29->30;
30[label="Node Type: END_IF 30
"];
30->26;
}
// Function: 2859.sol-ArtMuseumV1-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_430 = CONVERT 0 to address
pendingOwner(address) := TMP_430(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Ownable.onlyPendingOwner()()"];
4->1;
}
// Function: 2859.sol-ArtMuseumV1-collectFees(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
collectedFees = getFees()

IRs:
TMP_373(uint256) = INTERNAL_CALL, ArtMuseumBase.getFees()()
collectedFees(uint256) := TMP_373(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
amount <= collectedFees

IRs:
TMP_374(bool) = amount <= collectedFees
CONDITION TMP_374"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
like.transfer(owner,amount)

IRs:
TMP_375(bool) = HIGH_LEVEL_CALL, dest:like(LikeCoinInterface), function:transfer, arguments:['owner', 'amount']  "];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 2859.sol-ArtMuseumV1-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2859.sol-ArtMuseumV1-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2859.sol-ArtMuseumV1-distribute(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = (totalAmount * 60) / 100

IRs:
TMP_619(uint128) = totalAmount * 60
TMP_620(uint128) = TMP_619 / 100
amount(uint128) := TMP_620(uint128)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
valueSum = 0

IRs:
valueSum(uint128) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
totalAmountRemain = totalAmount

IRs:
totalAmountRemain(uint128) := totalAmount(uint128)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
shares = new uint128[](values.length + 1)

IRs:
REF_284 -> LENGTH values
TMP_622(uint256) = REF_284 + 1
TMP_623(uint128[])  = new uint128[](TMP_622)
shares(uint128[]) = ['TMP_623(uint128[])']"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
totalAmount > 0

IRs:
TMP_624(bool) = totalAmount > 0
CONDITION TMP_624"];
6->9[label="True"];
6->35[label="False"];
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->17;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
v = 0

IRs:
v(uint8) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
v < values.length

IRs:
REF_285 -> LENGTH values
TMP_625(bool) = v < REF_285
CONDITION TMP_625"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
numArtworksXType[v] > 0

IRs:
REF_286(uint32) -> numArtworksXType[v]
TMP_626(bool) = REF_286 > 0
CONDITION TMP_626"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
valueSum += values[v]

IRs:
REF_287(uint128) -> values[v]
valueSum(uint128) = valueSum + REF_287"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
v ++

IRs:
TMP_627(uint8) := v(uint8)
v(uint8) = v + 1"];
14->10;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->25;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
m = 0

IRs:
m(uint8) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
m < values.length

IRs:
REF_288 -> LENGTH values
TMP_628(bool) = m < REF_288
CONDITION TMP_628"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: IF 19

EXPRESSION:
numArtworksXType[m] > 0

IRs:
REF_289(uint32) -> numArtworksXType[m]
TMP_629(bool) = REF_289 > 0
CONDITION TMP_629"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
shares[m] = ((amount * (values[m] * 1000 / valueSum) / numArtworksXType[m]) / (1000000000000000000000)) * (1000000000000000000)

IRs:
REF_290(uint128) -> shares[m]
REF_291(uint128) -> values[m]
TMP_630(uint128) = REF_291 * 1000
TMP_631(uint128) = TMP_630 / valueSum
TMP_632(uint128) = amount * TMP_631
REF_292(uint32) -> numArtworksXType[m]
TMP_633(uint128) = TMP_632 / REF_292
TMP_634(uint128) = TMP_633 / 1000000000000000000000
TMP_635(uint128) = TMP_634 * 1000000000000000000
REF_290(uint128) (->shares) := TMP_635(uint128)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
m ++

IRs:
TMP_636(uint8) := m(uint8)
m(uint8) = m + 1"];
22->18;
23[label="Node Type: BEGIN_LOOP 23
"];
23->26;
24[label="Node Type: END_LOOP 24
"];
24->32;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
25->23;
26[label="Node Type: IF_LOOP 26

EXPRESSION:
i < numArtworks

IRs:
TMP_637(bool) = i < numArtworks
CONDITION TMP_637"];
26->27[label="True"];
26->24[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
artworkId = ids[i]

IRs:
REF_293(uint32) -> ids[i]
artworkId(uint32) := REF_293(uint32)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
amount = shares[artworks[artworkId].artworkType]

IRs:
REF_294(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_295(uint8) -> REF_294.artworkType
REF_296(uint128) -> shares[REF_295]
amount(uint128) := REF_296(uint128)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
artworks[artworkId].value += amount

IRs:
REF_297(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_298(uint128) -> REF_297.value
REF_298(-> artworks) = REF_298 + amount"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
totalAmountRemain -= amount

IRs:
totalAmountRemain(uint128) = totalAmountRemain - amount"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i ++

IRs:
TMP_638(uint16) := i(uint16)
i(uint16) = i + 1"];
31->26;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
setOldest()

IRs:
TUPLE_2(uint32,uint16) = INTERNAL_CALL, ArtMuseumV1.setOldest()()"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
artworks[oldest].value += totalAmountRemain

IRs:
REF_299(ArtMuseumBase.Artwork) -> artworks[oldest]
REF_300(uint128) -> REF_299.value
REF_300(-> artworks) = REF_300 + totalAmountRemain"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
shares[shares.length - 1] = totalAmountRemain

IRs:
REF_301 -> LENGTH shares
TMP_639(uint256) = REF_301 - 1
REF_302(uint128) -> shares[TMP_639]
REF_302(uint128) (->shares) := totalAmountRemain(uint128)"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
lastStealBlockNumber = block.number

IRs:
lastStealBlockNumber(uint256) := block.number(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
updateNextStealTime(timeTillNextSteal())

IRs:
TMP_640(uint32) = INTERNAL_CALL, ArtMuseumV1.timeTillNextSteal()()
INTERNAL_CALL, ArtMuseumV1.updateNextStealTime(uint32)(TMP_640)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
newStealRewards(totalAmount,shares)

IRs:
Emit newStealRewards(totalAmount,shares)"];
}
// Function: 2859.sol-ArtMuseumV1-findIndexFromRandomNumber(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
oldest == 0

IRs:
TMP_571(bool) = oldest == 0
CONDITION TMP_571"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastcombo = 0

IRs:
lastcombo(uint32) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
(artworkId,indexOldest) = setOldest()

IRs:
TUPLE_0(uint32,uint16) = INTERNAL_CALL, ArtMuseumV1.setOldest()()
artworkId(uint32)= UNPACK TUPLE_0 index: 0 
indexOldest(uint16)= UNPACK TUPLE_0 index: 1 "];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
lastcombo > oldestExtraStealProbability.length - 1

IRs:
REF_267 -> LENGTH oldestExtraStealProbability
TMP_572(uint256) = REF_267 - 1
TMP_573(bool) = lastcombo > TMP_572
CONDITION TMP_573"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
extraProbability = oldestExtraStealProbability[oldestExtraStealProbability.length - 1]

IRs:
REF_268 -> LENGTH oldestExtraStealProbability
TMP_574(uint256) = REF_268 - 1
REF_269(uint8) -> oldestExtraStealProbability[TMP_574]
extraProbability(uint8) := REF_269(uint8)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
extraProbability = oldestExtraStealProbability[lastcombo]

IRs:
REF_270(uint8) -> oldestExtraStealProbability[lastcombo]
extraProbability(uint8) := REF_270(uint8)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
maxNumber = 100000 - extraProbability * 1000

IRs:
TMP_575(uint8) = extraProbability * 1000
TMP_576(uint256) = 100000 - TMP_575
maxNumber(uint256) := TMP_576(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
extraProbability > 0 && randomNumbers > maxNumber

IRs:
TMP_577(bool) = extraProbability > 0
TMP_578(bool) = randomNumbers > maxNumber
TMP_579(bool) = TMP_577 && TMP_578
CONDITION TMP_579"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
index = indexOldest

IRs:
index(uint16) := indexOldest(uint16)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
artworkId = oldest

IRs:
artworkId(uint32) := oldest(uint32)"];
15->18;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
index = mapToNewRange(randomNumbers,numArtworks,maxNumber)

IRs:
TMP_580(uint16) = INTERNAL_CALL, ArtMuseumV1.mapToNewRange(uint256,uint256,uint256)(randomNumbers,numArtworks,maxNumber)
index(uint16) := TMP_580(uint16)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
artworkId = ids[index]

IRs:
REF_271(uint32) -> ids[index]
artworkId(uint32) := REF_271(uint32)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
(artworkId,index)

IRs:
RETURN artworkId,index"];
}
// Function: 2859.sol-ArtMuseumV1-get30Artworks(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
num = endIndex - startIndex

IRs:
TMP_643(uint32) = endIndex - startIndex
num(uint32) := TMP_643(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
artworkIds = new uint32[](num)

IRs:
TMP_645(uint32[])  = new uint32[](num)
artworkIds(uint32[]) = ['TMP_645(uint32[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
types = new uint8[](num)

IRs:
TMP_647(uint8[])  = new uint8[](num)
types(uint8[]) = ['TMP_647(uint8[])']"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
sequenceNumbers = new uint32[](num)

IRs:
TMP_649(uint32[])  = new uint32[](num)
sequenceNumbers(uint32[]) = ['TMP_649(uint32[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
artworkValues = new uint128[](num)

IRs:
TMP_651(uint128[])  = new uint128[](num)
artworkValues(uint128[]) = ['TMP_651(uint128[])']"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
players = new address[](num)

IRs:
TMP_653(address[])  = new address[](num)
players(address[]) = ['TMP_653(address[])']"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->26;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = startIndex

IRs:
i(uint16) := startIndex(uint16)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < endIndex

IRs:
TMP_654(bool) = i < endIndex
CONDITION TMP_654"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
id = ids[i]

IRs:
REF_303(uint32) -> ids[i]
id(uint32) := REF_303(uint32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
artworkIds[j] = id

IRs:
REF_304(uint32) -> artworkIds[j]
REF_304(uint32) (->artworkIds) := id(uint32)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
types[j] = artworks[id].artworkType

IRs:
REF_305(uint8) -> types[j]
REF_306(ArtMuseumBase.Artwork) -> artworks[id]
REF_307(uint8) -> REF_306.artworkType
REF_305(uint8) (->types) := REF_307(uint8)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
sequenceNumbers[j] = artworks[id].sequenceNumber

IRs:
REF_308(uint32) -> sequenceNumbers[j]
REF_309(ArtMuseumBase.Artwork) -> artworks[id]
REF_310(uint32) -> REF_309.sequenceNumber
REF_308(uint32) (->sequenceNumbers) := REF_310(uint32)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
artworkValues[j] = artworks[id].value

IRs:
REF_311(uint128) -> artworkValues[j]
REF_312(ArtMuseumBase.Artwork) -> artworks[id]
REF_313(uint128) -> REF_312.value
REF_311(uint128) (->artworkValues) := REF_313(uint128)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
players[j] = artworks[id].player

IRs:
REF_314(address) -> players[j]
REF_315(ArtMuseumBase.Artwork) -> artworks[id]
REF_316(address) -> REF_315.player
REF_314(address) (->players) := REF_316(address)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
j ++

IRs:
TMP_655(uint16) := j(uint16)
j(uint16) = j + 1"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_656(uint16) := i(uint16)
i(uint16) = i + 1"];
21->13;
22[label="Node Type: IF 22

EXPRESSION:
startIndex + 30 > numArtworks

IRs:
TMP_657(uint16) = startIndex + 30
TMP_658(bool) = TMP_657 > numArtworks
CONDITION TMP_658"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
endIndex = numArtworks

IRs:
endIndex(uint32) := numArtworks(uint32)"];
23->25;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
endIndex = startIndex + 30

IRs:
TMP_659(uint16) = startIndex + 30
endIndex(uint32) := TMP_659(uint16)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->2;
26[label="Node Type: RETURN 26

EXPRESSION:
(artworkIds,types,sequenceNumbers,artworkValues,players)

IRs:
RETURN artworkIds,types,sequenceNumbers,artworkValues,players"];
}
// Function: 2859.sol-ArtMuseumV1-getAllArtworks()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
artworkIds = new uint32[](numArtworks)

IRs:
TMP_378(uint32[])  = new uint32[](numArtworks)
artworkIds(uint32[]) = ['TMP_378(uint32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
types = new uint8[](numArtworks)

IRs:
TMP_380(uint8[])  = new uint8[](numArtworks)
types(uint8[]) = ['TMP_380(uint8[])']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
sequenceNumbers = new uint32[](numArtworks)

IRs:
TMP_382(uint32[])  = new uint32[](numArtworks)
sequenceNumbers(uint32[]) = ['TMP_382(uint32[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
artworkValues = new uint128[](numArtworks)

IRs:
TMP_384(uint128[])  = new uint128[](numArtworks)
artworkValues(uint128[]) = ['TMP_384(uint128[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->16;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < numArtworks

IRs:
TMP_385(bool) = i < numArtworks
CONDITION TMP_385"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
id = ids[i]

IRs:
REF_167(uint32) -> ids[i]
id(uint32) := REF_167(uint32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
artworkIds[i] = id

IRs:
REF_168(uint32) -> artworkIds[i]
REF_168(uint32) (->artworkIds) := id(uint32)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
types[i] = artworks[id].artworkType

IRs:
REF_169(uint8) -> types[i]
REF_170(ArtMuseumBase.Artwork) -> artworks[id]
REF_171(uint8) -> REF_170.artworkType
REF_169(uint8) (->types) := REF_171(uint8)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
sequenceNumbers[i] = artworks[id].sequenceNumber

IRs:
REF_172(uint32) -> sequenceNumbers[i]
REF_173(ArtMuseumBase.Artwork) -> artworks[id]
REF_174(uint32) -> REF_173.sequenceNumber
REF_172(uint32) (->sequenceNumbers) := REF_174(uint32)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
artworkValues[i] = artworks[id].value

IRs:
REF_175(uint128) -> artworkValues[i]
REF_176(ArtMuseumBase.Artwork) -> artworks[id]
REF_177(uint128) -> REF_176.value
REF_175(uint128) (->artworkValues) := REF_177(uint128)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_386(uint16) := i(uint16)
i(uint16) = i + 1"];
15->9;
16[label="Node Type: RETURN 16

EXPRESSION:
(artworkIds,types,sequenceNumbers,artworkValues)

IRs:
RETURN artworkIds,types,sequenceNumbers,artworkValues"];
}
// Function: 2859.sol-ArtMuseumV1-getAllArtworksByOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
howmany = 0

IRs:
howmany(uint16) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
player = address(msg.sender)

IRs:
TMP_387 = CONVERT msg.sender to address
player(address) := TMP_387(address)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
k = 0

IRs:
k(uint16) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
k < numArtworks

IRs:
TMP_388(bool) = k < numArtworks
CONDITION TMP_388"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
artworks[ids[k]].player == player

IRs:
REF_178(uint32) -> ids[k]
REF_179(ArtMuseumBase.Artwork) -> artworks[REF_178]
REF_180(address) -> REF_179.player
TMP_389(bool) = REF_180 == player
CONDITION TMP_389"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
howmany ++

IRs:
TMP_390(uint16) := howmany(uint16)
howmany(uint16) = howmany + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
k ++

IRs:
TMP_391(uint16) := k(uint16)
k(uint16) = k + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
artworkIds = new uint32[](howmany)

IRs:
TMP_393(uint32[])  = new uint32[](howmany)
artworkIds(uint32[]) = ['TMP_393(uint32[])']"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
types = new uint8[](howmany)

IRs:
TMP_395(uint8[])  = new uint8[](howmany)
types(uint8[]) = ['TMP_395(uint8[])']"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
sequenceNumbers = new uint32[](howmany)

IRs:
TMP_397(uint32[])  = new uint32[](howmany)
sequenceNumbers(uint32[]) = ['TMP_397(uint32[])']"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
artworkValues = new uint128[](howmany)

IRs:
TMP_399(uint128[])  = new uint128[](howmany)
artworkValues(uint128[]) = ['TMP_399(uint128[])']"];
16->19;
17[label="Node Type: BEGIN_LOOP 17
"];
17->20;
18[label="Node Type: END_LOOP 18
"];
18->30;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
19->17;
20[label="Node Type: IF_LOOP 20

EXPRESSION:
i < numArtworks

IRs:
TMP_400(bool) = i < numArtworks
CONDITION TMP_400"];
20->21[label="True"];
20->18[label="False"];
21[label="Node Type: IF 21

EXPRESSION:
artworks[ids[i]].player == player

IRs:
REF_181(uint32) -> ids[i]
REF_182(ArtMuseumBase.Artwork) -> artworks[REF_181]
REF_183(address) -> REF_182.player
TMP_401(bool) = REF_183 == player
CONDITION TMP_401"];
21->22[label="True"];
21->28[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
id = ids[i]

IRs:
REF_184(uint32) -> ids[i]
id(uint32) := REF_184(uint32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
artworkIds[j] = id

IRs:
REF_185(uint32) -> artworkIds[j]
REF_185(uint32) (->artworkIds) := id(uint32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
types[j] = artworks[id].artworkType

IRs:
REF_186(uint8) -> types[j]
REF_187(ArtMuseumBase.Artwork) -> artworks[id]
REF_188(uint8) -> REF_187.artworkType
REF_186(uint8) (->types) := REF_188(uint8)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
sequenceNumbers[j] = artworks[id].sequenceNumber

IRs:
REF_189(uint32) -> sequenceNumbers[j]
REF_190(ArtMuseumBase.Artwork) -> artworks[id]
REF_191(uint32) -> REF_190.sequenceNumber
REF_189(uint32) (->sequenceNumbers) := REF_191(uint32)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
artworkValues[j] = artworks[id].value

IRs:
REF_192(uint128) -> artworkValues[j]
REF_193(ArtMuseumBase.Artwork) -> artworks[id]
REF_194(uint128) -> REF_193.value
REF_192(uint128) (->artworkValues) := REF_194(uint128)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
j ++

IRs:
TMP_402(uint16) := j(uint16)
j(uint16) = j + 1"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i ++

IRs:
TMP_403(uint16) := i(uint16)
i(uint16) = i + 1"];
29->20;
30[label="Node Type: RETURN 30

EXPRESSION:
(artworkIds,types,sequenceNumbers,artworkValues)

IRs:
RETURN artworkIds,types,sequenceNumbers,artworkValues"];
}
// Function: 2859.sol-ArtMuseumV1-getArtwork(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(artworks[artworkId].artworkType,artworks[artworkId].sequenceNumber,artworks[artworkId].value,artworks[artworkId].player)

IRs:
REF_159(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_160(uint8) -> REF_159.artworkType
REF_161(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_162(uint32) -> REF_161.sequenceNumber
REF_163(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_164(uint128) -> REF_163.value
REF_165(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_166(address) -> REF_165.player
RETURN REF_160,REF_162,REF_164,REF_166"];
2[label="Node Type: RETURN 2

EXPRESSION:
(artworkType,sequenceNumber,value,player)

IRs:
RETURN artworkType,sequenceNumber,value,player"];
}
// Function: 2859.sol-ArtMuseumV1-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 2859.sol-ArtMuseumV1-getFees()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reserved = 0

IRs:
reserved(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
j < numArtworks

IRs:
TMP_424(bool) = j < numArtworks
CONDITION TMP_424"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
reserved += artworks[ids[j]].value

IRs:
REF_210(uint32) -> ids[j]
REF_211(ArtMuseumBase.Artwork) -> artworks[REF_210]
REF_212(uint128) -> REF_211.value
reserved(uint256) = reserved + REF_212"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
j ++

IRs:
TMP_425(uint16) := j(uint16)
j(uint16) = j + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
like.balanceOf(this) - reserved

IRs:
TMP_426(uint256) = HIGH_LEVEL_CALL, dest:like(LikeCoinInterface), function:balanceOf, arguments:['this']  
TMP_427(uint256) = TMP_426 - reserved
RETURN TMP_427"];
}
// Function: 2859.sol-ArtMuseumV1-getNumArtworksXType()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_numArtworksXType = numArtworksXType

IRs:
_numArtworksXType(uint32[]) := numArtworksXType(uint32[])"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_numArtworksXType

IRs:
RETURN _numArtworksXType"];
}
// Function: 2859.sol-ArtMuseumV1-getNumbersFromString(string,string,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
s2 = s.toSlice()

IRs:
TMP_674(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['s'] 
s2(strings.slice) := TMP_674(strings.slice)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
delim = delimiter.toSlice()

IRs:
TMP_675(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['delimiter'] 
delim(strings.slice) := TMP_675(strings.slice)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
parts = new string[](s2.count(delim) + 1)

IRs:
TMP_677(uint256) = LIBRARY_CALL, dest:strings, function:strings.count(strings.slice,strings.slice), arguments:['s2', 'delim'] 
TMP_678(uint256) = TMP_677 + 1
TMP_679(string[])  = new string[](TMP_678)
parts(string[]) = ['TMP_679(string[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < parts.length

IRs:
REF_320 -> LENGTH parts
TMP_680(bool) = i < REF_320
CONDITION TMP_680"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
parts[i] = s2.split(delim).toString()

IRs:
REF_321(string) -> parts[i]
TMP_681(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.split(strings.slice,strings.slice), arguments:['s2', 'delim'] 
TMP_682(string) = LIBRARY_CALL, dest:strings, function:strings.toString(strings.slice), arguments:['TMP_681'] 
REF_321(string) (->parts) := TMP_682(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_683(uint8) := i(uint8)
i(uint8) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
numbers = new uint32[](howmany)

IRs:
TMP_685(uint32[])  = new uint32[](howmany)
numbers(uint32[]) = ['TMP_685(uint32[])']"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
howmany > parts.length

IRs:
REF_324 -> LENGTH parts
TMP_686(bool) = howmany > REF_324
CONDITION TMP_686"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
howmany = uint32(parts.length)

IRs:
REF_325 -> LENGTH parts
TMP_687 = CONVERT REF_325 to uint32
howmany(uint32) := TMP_687(uint32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
j = 0

IRs:
j(uint8) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < howmany

IRs:
TMP_688(bool) = j < howmany
CONDITION TMP_688"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
numbers[j] = uint32(parseInt(parts[j]))

IRs:
REF_326(uint32) -> numbers[j]
REF_327(string) -> parts[j]
TMP_689(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string)(REF_327)
TMP_690 = CONVERT TMP_689 to uint32
REF_326(uint32) (->numbers) := TMP_690(uint32)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
j ++

IRs:
TMP_691(uint8) := j(uint8)
j(uint8) = j + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
numbers

IRs:
RETURN numbers"];
21[label="Node Type: RETURN 21

EXPRESSION:
numbers

IRs:
RETURN numbers"];
}
// Function: 2859.sol-ArtMuseumV1-getOldest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numArtworks == 0

IRs:
TMP_471(bool) = numArtworks == 0
CONDITION TMP_471"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
artworkId = 0

IRs:
artworkId(uint32) := 0(uint256)"];
2->19;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
artworkId = oldest

IRs:
artworkId(uint32) := oldest(uint32)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
artworkId == 0

IRs:
TMP_472(bool) = artworkId == 0
CONDITION TMP_472"];
4->5[label="True"];
4->14[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
artworkId = ids[0]

IRs:
REF_245(uint32) -> ids[0]
artworkId(uint32) := REF_245(uint32)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->14;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint16) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < numArtworks

IRs:
TMP_473(bool) = i < numArtworks
CONDITION TMP_473"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
ids[i] < artworkId

IRs:
REF_246(uint32) -> ids[i]
TMP_474(bool) = REF_246 < artworkId
CONDITION TMP_474"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
artworkId = ids[i]

IRs:
REF_247(uint32) -> ids[i]
artworkId(uint32) := REF_247(uint32)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_475(uint16) := i(uint16)
i(uint16) = i + 1"];
13->9;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
artworkType = artworks[artworkId].artworkType

IRs:
REF_248(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_249(uint8) -> REF_248.artworkType
artworkType(uint8) := REF_249(uint8)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
sequenceNumber = artworks[artworkId].sequenceNumber

IRs:
REF_250(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_251(uint32) -> REF_250.sequenceNumber
sequenceNumber(uint32) := REF_251(uint32)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
value = artworks[artworkId].value

IRs:
REF_252(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_253(uint128) -> REF_252.value
value(uint128) := REF_253(uint128)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
player = artworks[artworkId].player

IRs:
REF_254(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_255(address) -> REF_254.player
player(address) := REF_255(address)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(artworkId,artworkType,sequenceNumber,value,player)

IRs:
RETURN artworkId,artworkType,sequenceNumber,value,player"];
}
// Function: 2859.sol-ArtMuseumV1-getRemainTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
nextStealTimestamp > now

IRs:
TMP_660(bool) = nextStealTimestamp > now
CONDITION TMP_660"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
remainTime = nextStealTimestamp - now

IRs:
TMP_661(uint256) = nextStealTimestamp - now
remainTime(uint256) := TMP_661(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
remainTime

IRs:
RETURN remainTime"];
}
// Function: 2859.sol-ArtMuseumV1-giveArtworks(uint8[],address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
len = uint32(artworkTypes.length)

IRs:
REF_214 -> LENGTH artworkTypes
TMP_442 = CONVERT REF_214 to uint32
len(uint32) := TMP_442(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(numArtworks + len < maxArtworks)

IRs:
TMP_443(uint32) = numArtworks + len
TMP_444(bool) = TMP_443 < maxArtworks
TMP_445(None) = SOLIDITY_CALL require(bool)(TMP_444)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amount = 0

IRs:
amount(uint256) := 0(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < len

IRs:
TMP_446(bool) = i < len
CONDITION TMP_446"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(artworkTypes[i] < costs.length)

IRs:
REF_215(uint8) -> artworkTypes[i]
REF_216 -> LENGTH costs
TMP_447(bool) = REF_215 < REF_216
TMP_448(None) = SOLIDITY_CALL require(bool)(TMP_447)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount += costs[artworkTypes[i]]

IRs:
REF_217(uint8) -> artworkTypes[i]
REF_218(uint128) -> costs[REF_217]
amount(uint256) = amount + REF_218"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_449(uint16) := i(uint16)
i(uint16) = i + 1"];
10->7;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(_value >= amount)

IRs:
TMP_450(bool) = _value >= amount
TMP_451(None) = SOLIDITY_CALL require(bool)(TMP_450)"];
11->12;
12[label="Node Type: NEW VARIABLE 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
seqnolist = new uint32[](len)

IRs:
TMP_453(uint32[])  = new uint32[](len)
seqnolist(uint32[]) = ['TMP_453(uint32[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->30;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < len

IRs:
TMP_454(bool) = j < len
CONDITION TMP_454"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: IF 18

EXPRESSION:
numArtworks < ids.length

IRs:
REF_219 -> LENGTH ids
TMP_455(bool) = numArtworks < REF_219
CONDITION TMP_455"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ids[numArtworks] = lastId

IRs:
REF_220(uint32) -> ids[numArtworks]
REF_220(uint32) (->ids) := lastId(uint32)"];
19->21;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
ids.push(lastId)

IRs:
REF_222 -> LENGTH ids
TMP_457(uint256) := REF_222(uint256)
TMP_458(uint256) = TMP_457 + 1
REF_222(uint256) (->ids) := TMP_458(uint256)
REF_223(uint32) -> ids[TMP_457]
REF_223(uint32) (->ids) := lastId(uint32)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
artworkType = artworkTypes[j]

IRs:
REF_224(uint8) -> artworkTypes[j]
artworkType(uint8) := REF_224(uint8)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
userArtworkSequenceNumber[receiver][artworkType] ++

IRs:
REF_225(mapping(uint8 => uint32)) -> userArtworkSequenceNumber[receiver]
REF_226(uint32) -> REF_225[artworkType]
TMP_459(uint32) := REF_226(uint32)
REF_226(-> userArtworkSequenceNumber) = REF_226 + 1"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
seqnolist[j] = userArtworkSequenceNumber[receiver][artworkType]

IRs:
REF_227(uint32) -> seqnolist[j]
REF_228(mapping(uint8 => uint32)) -> userArtworkSequenceNumber[receiver]
REF_229(uint32) -> REF_228[artworkType]
REF_227(uint32) (->seqnolist) := REF_229(uint32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
artworks[lastId] = Artwork(artworkTypes[j],userArtworkSequenceNumber[receiver][artworkType],values[artworkType],receiver)

IRs:
REF_230(ArtMuseumBase.Artwork) -> artworks[lastId]
REF_231(uint8) -> artworkTypes[j]
REF_232(mapping(uint8 => uint32)) -> userArtworkSequenceNumber[receiver]
REF_233(uint32) -> REF_232[artworkType]
REF_234(uint128) -> values[artworkType]
TMP_460(ArtMuseumBase.Artwork) = new Artwork(REF_231,REF_233,REF_234,receiver)
REF_230(ArtMuseumBase.Artwork) (->artworks) := TMP_460(ArtMuseumBase.Artwork)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
numArtworks ++

IRs:
TMP_461(uint32) := numArtworks(uint32)
numArtworks(uint32) = numArtworks + 1"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
lastId ++

IRs:
TMP_462(uint32) := lastId(uint32)
lastId(uint32) = lastId + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
numArtworksXType[artworkType] ++

IRs:
REF_235(uint32) -> numArtworksXType[artworkType]
TMP_463(uint32) := REF_235(uint32)
REF_235(-> numArtworksXType) = REF_235 + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
j ++

IRs:
TMP_464(uint16) := j(uint16)
j(uint16) = j + 1"];
29->17;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
newPurchase(receiver,lastId - len,artworkTypes,seqnolist)

IRs:
TMP_465(uint32) = lastId - len
Emit newPurchase(receiver,TMP_465,artworkTypes,seqnolist)"];
}
// Function: 2859.sol-ArtMuseumV1-init(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(like == address(0))

IRs:
TMP_363 = CONVERT 0 to address
TMP_364(bool) = like == TMP_363
TMP_365(None) = SOLIDITY_CALL require(bool)(TMP_364)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
like = LikeCoinInterface(_likeAddr)

IRs:
TMP_366 = CONVERT _likeAddr to LikeCoinInterface
like(LikeCoinInterface) := TMP_366(LikeCoinInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
costs = (800000000000000000000,2000000000000000000000,5000000000000000000000,12000000000000000000000,25000000000000000000000)

IRs:
costs(uint128[]) = ['800000000000000000000(uint256)', '2000000000000000000000(uint256)', '5000000000000000000000(uint256)', '12000000000000000000000(uint256)', '25000000000000000000000(uint256)']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFee(5)

IRs:
INTERNAL_CALL, ArtMuseumBase.setFee(uint8)(5)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
maxArtworks = 1000

IRs:
maxArtworks(uint16) := 1000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastId = 1

IRs:
lastId(uint32) := 1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oldest = 0

IRs:
oldest(uint32) := 0(uint256)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 2859.sol-ArtMuseumV1-init1()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
randomQuery = 10 random numbers between 1 and 100000

IRs:
randomQuery(string) := 10 random numbers between 1 and 100000(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
queryType = WolframAlpha

IRs:
queryType(string) := WolframAlpha(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclizeGas = 150000

IRs:
oraclizeGas(uint32) := 150000(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeGasExtraArtwork = 14000

IRs:
oraclizeGasExtraArtwork(uint32) := 14000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
etherExchangeLikeCoin = 50000

IRs:
etherExchangeLikeCoin(uint32) := 50000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oldestExtraStealProbability = (3,5,10,15,30,50)

IRs:
oldestExtraStealProbability(uint8[]) = ['3(uint256)', '5(uint256)', '10(uint256)', '15(uint256)', '30(uint256)', '50(uint256)']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
numOfTimesSteal = 1

IRs:
numOfTimesSteal(uint8) := 1(uint256)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 2859.sol-ArtMuseumV1-initOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_433 = CONVERT OAR to address
TMP_434(bool) = TMP_433 == 0
TMP_435 = CONVERT OAR to address
TMP_436(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_435)
TMP_437(bool) = TMP_436 == 0
TMP_438(bool) = TMP_434 || TMP_437
CONDITION TMP_438"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_439(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2859.sol-ArtMuseumV1-mapToNewRange(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint16(number * range / max)

IRs:
TMP_671(uint256) = number * range
TMP_672(uint256) = TMP_671 / max
TMP_673 = CONVERT TMP_672 to uint16
RETURN TMP_673"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 2859.sol-ArtMuseumV1-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_721(bool) = msg.sender == owner
TMP_722(None) = SOLIDITY_CALL require(bool)(TMP_721)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-ArtMuseumV1-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_723(bool) = msg.sender == pendingOwner
TMP_724(None) = SOLIDITY_CALL require(bool)(TMP_723)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-ArtMuseumV1-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_709 = CONVERT OAR to address
TMP_710(bool) = TMP_709 == 0
TMP_711 = CONVERT OAR to address
TMP_712(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_711)
TMP_713(bool) = TMP_712 == 0
TMP_714(bool) = TMP_710 || TMP_713
CONDITION TMP_714"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_715(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_716 = CONVERT oraclize to address
TMP_717(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_718(bool) = TMP_716 != TMP_717
CONDITION TMP_718"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_719(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_720 = CONVERT TMP_719 to OraclizeI
oraclize(OraclizeI) := TMP_720(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_345(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_345"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_285(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_285"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_287(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_287"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_289(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_289(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_290(uint256) = tx.gasprice * 200000
TMP_291(uint256) = 1000000000000000000 + TMP_290
TMP_292(bool) = price > TMP_291
CONDITION TMP_292"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_294(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_294"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_317(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_317(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_318(uint256) = tx.gasprice * 200000
TMP_319(uint256) = 1000000000000000000 + TMP_318
TMP_320(bool) = price > TMP_319
CONDITION TMP_320"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_322(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_322"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_338(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_338(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_339(uint256) = tx.gasprice * gaslimit
TMP_340(uint256) = 1000000000000000000 + TMP_339
TMP_341(bool) = price > TMP_340
CONDITION TMP_341"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_343(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_343"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_310(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_310(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_311(uint256) = tx.gasprice * gaslimit
TMP_312(uint256) = 1000000000000000000 + TMP_311
TMP_313(bool) = price > TMP_312
CONDITION TMP_313"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_315(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_315"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_296(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_296(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_297(uint256) = tx.gasprice * 200000
TMP_298(uint256) = 1000000000000000000 + TMP_297
TMP_299(bool) = price > TMP_298
CONDITION TMP_299"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_301(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_301"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_324(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_324(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_325(uint256) = tx.gasprice * 200000
TMP_326(uint256) = 1000000000000000000 + TMP_325
TMP_327(bool) = price > TMP_326
CONDITION TMP_327"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_329(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_329"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_331(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_331(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_332(uint256) = tx.gasprice * gaslimit
TMP_333(uint256) = 1000000000000000000 + TMP_332
TMP_334(bool) = price > TMP_333
CONDITION TMP_334"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_336(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_336"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_303(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_303(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_304(uint256) = tx.gasprice * gaslimit
TMP_305(uint256) = 1000000000000000000 + TMP_304
TMP_306(bool) = price > TMP_305
CONDITION TMP_306"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_308(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_308"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_347"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_260(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_261(bool) = TMP_260 > 0
CONDITION TMP_261"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_262 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_262(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_264(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_265(bool) = TMP_264 > 0
CONDITION TMP_265"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_266 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_266(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_268(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_269(bool) = TMP_268 > 0
CONDITION TMP_269"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_270 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_270(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_272(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_273(bool) = TMP_272 > 0
CONDITION TMP_273"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_274 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_274(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_276(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_277(bool) = TMP_276 > 0
CONDITION TMP_277"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_278 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_278(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_279(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_280(bool) = TMP_279 > 0
CONDITION TMP_280"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_281 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_281(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_282(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_283(bool) = TMP_282 > 0
CONDITION TMP_283"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_284 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_284(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_259(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_259"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 2859.sol-ArtMuseumV1-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 2859.sol-ArtMuseumV1-ownerOrOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == operator)

IRs:
TMP_725(bool) = msg.sender == owner
TMP_726(bool) = msg.sender == operator
TMP_727(bool) = TMP_725 || TMP_726
TMP_728(None) = SOLIDITY_CALL require(bool)(TMP_727)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-ArtMuseumV1-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_349(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_349"];
}
// Function: 2859.sol-ArtMuseumV1-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_350 = CONVERT _a to bytes
bresult(bytes) := TMP_350(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_152 -> LENGTH bresult
TMP_351(bool) = i < REF_152
CONDITION TMP_351"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_153(None) -> bresult[i]
TMP_352(bool) = REF_153 >= 48
REF_154(None) -> bresult[i]
TMP_353(bool) = REF_154 <= 57
TMP_354(bool) = TMP_352 && TMP_353
CONDITION TMP_354"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_355(bool) = _b == 0
CONDITION TMP_355"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_356(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_155(None) -> bresult[i]
TMP_357 = CONVERT REF_155 to uint256
TMP_358(uint256) = TMP_357 - 48
mint(uint256) = mint + TMP_358"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_156(None) -> bresult[i]
TMP_359(bool) = REF_156 == 46
CONDITION TMP_359"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_360(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_361(bool) = _b > 0
CONDITION TMP_361"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_362(uint256) = 10 ** _b
mint(uint256) = mint * TMP_362"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 2859.sol-ArtMuseumV1-removeArtworksByString(string,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
stolenArtworks = new uint32[](howmany)

IRs:
TMP_582(uint32[])  = new uint32[](howmany)
stolenArtworks(uint32[]) = ['TMP_582(uint32[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
artworkTypes = new uint8[](howmany)

IRs:
TMP_584(uint8[])  = new uint8[](howmany)
artworkTypes(uint8[]) = ['TMP_584(uint8[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
sequenceNumbers = new uint32[](howmany)

IRs:
TMP_586(uint32[])  = new uint32[](howmany)
sequenceNumbers(uint32[]) = ['TMP_586(uint32[])']"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
artworkValues = new uint256[](howmany)

IRs:
TMP_588(uint256[])  = new uint256[](howmany)
artworkValues(uint256[]) = ['TMP_588(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
players = new address[](howmany)

IRs:
TMP_590(address[])  = new address[](howmany)
players(address[]) = ['TMP_590(address[])']"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
howmany > 0

IRs:
TMP_591(bool) = howmany > 0
CONDITION TMP_591"];
6->7[label="True"];
6->29[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
randomNumbers = getNumbersFromString(result,,,howmany)

IRs:
TMP_592(uint32[]) = INTERNAL_CALL, ArtMuseumV1.getNumbersFromString(string,string,uint32)(result,,,howmany)
randomNumbers(uint32[]) = ['TMP_592(uint32[])']"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
pot = 0

IRs:
pot(uint128) := 0(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
oldest != 0

IRs:
TMP_593(bool) = oldest != 0
CONDITION TMP_593"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lastcombo ++

IRs:
TMP_594(uint32) := lastcombo(uint32)
lastcombo(uint32) = lastcombo + 1"];
13->14;
14[label="Node Type: END_IF 14
"];
14->17;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->30;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < howmany

IRs:
TMP_595(bool) = i < howmany
CONDITION TMP_595"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
(artworkId,index) = findIndexFromRandomNumber(randomNumbers[i])

IRs:
REF_272(uint32) -> randomNumbers[i]
TUPLE_1(uint32,uint16) = INTERNAL_CALL, ArtMuseumV1.findIndexFromRandomNumber(uint32)(REF_272)
artworkId(uint32)= UNPACK TUPLE_1 index: 0 
index(uint16)= UNPACK TUPLE_1 index: 1 "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
artworkData = artworks[artworkId]

IRs:
REF_273(ArtMuseumBase.Artwork) -> artworks[artworkId]
artworkData(ArtMuseumBase.Artwork) := REF_273(ArtMuseumBase.Artwork)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
pot += artworkData.value

IRs:
REF_274(uint128) -> artworkData.value
pot(uint128) = pot + REF_274"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
stolenArtworks[i] = artworkId

IRs:
REF_275(uint32) -> stolenArtworks[i]
REF_275(uint32) (->stolenArtworks) := artworkId(uint32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
artworkTypes[i] = artworkData.artworkType

IRs:
REF_276(uint8) -> artworkTypes[i]
REF_277(uint8) -> artworkData.artworkType
REF_276(uint8) (->artworkTypes) := REF_277(uint8)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
sequenceNumbers[i] = artworkData.sequenceNumber

IRs:
REF_278(uint32) -> sequenceNumbers[i]
REF_279(uint32) -> artworkData.sequenceNumber
REF_278(uint32) (->sequenceNumbers) := REF_279(uint32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
artworkValues[i] = artworkData.value

IRs:
REF_280(uint256) -> artworkValues[i]
REF_281(uint128) -> artworkData.value
REF_280(uint256) (->artworkValues) := REF_281(uint128)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
players[i] = artworkData.player

IRs:
REF_282(address) -> players[i]
REF_283(address) -> artworkData.player
REF_282(address) (->players) := REF_283(address)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
replaceArtwork(index)

IRs:
INTERNAL_CALL, ArtMuseumV1.replaceArtwork(uint16)(index)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
i ++

IRs:
TMP_597(uint32) := i(uint32)
i(uint32) = i + 1"];
28->18;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
pot = 0

IRs:
pot(uint128) := 0(uint256)"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
newSteal(now,stolenArtworks,artworkTypes,sequenceNumbers,artworkValues,players)

IRs:
Emit newSteal(now,stolenArtworks,artworkTypes,sequenceNumbers,artworkValues,players)"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
pot

IRs:
RETURN pot"];
}
// Function: 2859.sol-ArtMuseumV1-replaceArtwork(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
artworkId = ids[index]

IRs:
REF_236(uint32) -> ids[index]
artworkId(uint32) := REF_236(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
numArtworksXType[artworks[artworkId].artworkType] --

IRs:
REF_237(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_238(uint8) -> REF_237.artworkType
REF_239(uint32) -> numArtworksXType[REF_238]
TMP_467(uint32) := REF_239(uint32)
REF_239(-> numArtworksXType) = REF_239 - 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
numArtworks --

IRs:
TMP_468(uint32) := numArtworks(uint32)
numArtworks(uint32) = numArtworks - 1"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
artworkId == oldest

IRs:
TMP_469(bool) = artworkId == oldest
CONDITION TMP_469"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oldest = 0

IRs:
oldest(uint32) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete artworks[artworkId]

IRs:
REF_240(ArtMuseumBase.Artwork) -> artworks[artworkId]
artworks = delete REF_240 "];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
numArtworks > 0

IRs:
TMP_470(bool) = numArtworks > 0
CONDITION TMP_470"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ids[index] = ids[numArtworks]

IRs:
REF_241(uint32) -> ids[index]
REF_242(uint32) -> ids[numArtworks]
REF_241(uint32) (->ids) := REF_242(uint32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete ids[numArtworks]

IRs:
REF_243(uint32) -> ids[numArtworks]
ids = delete REF_243 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ids.length = numArtworks

IRs:
REF_244 -> LENGTH ids
REF_244(uint256) (->ids) := numArtworks(uint32)"];
}
// Function: 2859.sol-ArtMuseumV1-sellArtwork(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == artworks[artworkId].player)

IRs:
REF_260(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_261(address) -> REF_260.player
TMP_484(bool) = msg.sender == REF_261
TMP_485(None) = SOLIDITY_CALL require(bool)(TMP_484)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
val = uint256(artworks[artworkId].value)

IRs:
REF_262(ArtMuseumBase.Artwork) -> artworks[artworkId]
REF_263(uint128) -> REF_262.value
TMP_486 = CONVERT REF_263 to uint256
val(uint256) := TMP_486(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
found = false

IRs:
found(bool) := False(bool)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->15;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < numArtworks

IRs:
TMP_487(bool) = i < numArtworks
CONDITION TMP_487"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
ids[i] == artworkId

IRs:
REF_264(uint32) -> ids[i]
TMP_488(bool) = REF_264 == artworkId
CONDITION TMP_488"];
9->10[label="True"];
9->13[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
artworkIndex = i

IRs:
artworkIndex(uint16) := i(uint16)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
found = true

IRs:
found(bool) := True(bool)"];
11->12;
12[label="Node Type: BREAK 12
"];
12->6;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_489(uint16) := i(uint16)
i(uint16) = i + 1"];
14->8;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
require(bool)(found == true)

IRs:
TMP_490(bool) = found == True
TMP_491(None) = SOLIDITY_CALL require(bool)(TMP_490)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
replaceArtwork(artworkIndex)

IRs:
INTERNAL_CALL, ArtMuseumV1.replaceArtwork(uint16)(artworkIndex)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
val > 0

IRs:
TMP_493(bool) = val > 0
CONDITION TMP_493"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
like.transfer(msg.sender,val)

IRs:
TMP_494(bool) = HIGH_LEVEL_CALL, dest:like(LikeCoinInterface), function:transfer, arguments:['msg.sender', 'val']  "];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
artworkIds = new uint32[](1)

IRs:
TMP_496(uint32[])  = new uint32[](1)
artworkIds(uint32[]) = ['TMP_496(uint32[])']"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
artworkIds[0] = artworkId

IRs:
REF_266(uint32) -> artworkIds[0]
REF_266(uint32) (->artworkIds) := artworkId(uint32)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
newSell(artworkIds,msg.sender,val)

IRs:
Emit newSell(artworkIds,msg.sender,val)"];
}
// Function: 2859.sol-ArtMuseumV1-setCosts(uint128[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_costs.length >= costs.length)

IRs:
REF_195 -> LENGTH _costs
REF_196 -> LENGTH costs
TMP_404(bool) = REF_195 >= REF_196
TMP_405(None) = SOLIDITY_CALL require(bool)(TMP_404)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
costs = _costs

IRs:
costs(uint128[]) := _costs(uint128[])"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFee(fee)

IRs:
INTERNAL_CALL, ArtMuseumBase.setFee(uint8)(fee)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2859.sol-ArtMuseumV1-setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_setCustomGasPrice(gasPrice)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setCustomGasPrice(uint256)(gasPrice)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-setEtherExchangeLikeCoin(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
etherExchangeLikeCoin = newValue

IRs:
etherExchangeLikeCoin(uint32) := newValue(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-setFee(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fee = _fee

IRs:
fee(uint8) := _fee(uint8)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < costs.length

IRs:
REF_197 -> LENGTH costs
TMP_408(bool) = i < REF_197
CONDITION TMP_408"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
i < values.length

IRs:
REF_198 -> LENGTH values
TMP_409(bool) = i < REF_198
CONDITION TMP_409"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
values[i] = costs[i] - costs[i] / 100 * fee

IRs:
REF_199(uint128) -> values[i]
REF_200(uint128) -> costs[i]
REF_201(uint128) -> costs[i]
TMP_410(uint128) = REF_201 / 100
TMP_411(uint128) = TMP_410 * fee
TMP_412(uint128) = REF_200 - TMP_411
REF_199(uint128) (->values) := TMP_412(uint128)"];
7->10;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
values.push(costs[i] - costs[i] / 100 * fee)

IRs:
REF_203(uint128) -> costs[i]
REF_204(uint128) -> costs[i]
TMP_413(uint128) = REF_204 / 100
TMP_414(uint128) = TMP_413 * fee
TMP_415(uint128) = REF_203 - TMP_414
REF_205 -> LENGTH values
TMP_417(uint256) := REF_205(uint256)
TMP_418(uint256) = TMP_417 + 1
REF_205(uint256) (->values) := TMP_418(uint256)
REF_206(uint128) -> values[TMP_417]
REF_206(uint128) (->values) := TMP_415(uint128)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
numArtworksXType.push(0)

IRs:
REF_208 -> LENGTH numArtworksXType
TMP_420(uint256) := REF_208(uint256)
TMP_421(uint256) = TMP_420 + 1
REF_208(uint256) (->numArtworksXType) := TMP_421(uint256)
REF_209(uint32) -> numArtworksXType[TMP_420]
REF_209(uint32) (->numArtworksXType) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_422(uint8) := i(uint8)
i(uint8) = i + 1"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
12->1;
}
// Function: 2859.sol-ArtMuseumV1-setMaxArtworks(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxArtworks = number

IRs:
maxArtworks(uint16) := number(uint16)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-setNumOfTimesSteal(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
numOfTimesSteal = adjust

IRs:
numOfTimesSteal(uint8) := adjust(uint8)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-setOldest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numArtworks == 0

IRs:
TMP_476(bool) = numArtworks == 0
CONDITION TMP_476"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
artworkId = 0

IRs:
artworkId(uint32) := 0(uint256)"];
2->26;
3[label="Node Type: IF 3

EXPRESSION:
oldest == 0

IRs:
TMP_477(bool) = oldest == 0
CONDITION TMP_477"];
3->4[label="True"];
3->17[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oldest = ids[0]

IRs:
REF_256(uint32) -> ids[0]
oldest(uint32) := REF_256(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
index = 0

IRs:
index(uint16) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->24;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint16) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < numArtworks

IRs:
TMP_478(bool) = i < numArtworks
CONDITION TMP_478"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
ids[i] < oldest

IRs:
REF_257(uint32) -> ids[i]
TMP_479(bool) = REF_257 < oldest
CONDITION TMP_479"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
oldest = ids[i]

IRs:
REF_258(uint32) -> ids[i]
oldest(uint32) := REF_258(uint32)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
index = i

IRs:
index(uint16) := i(uint16)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_480(uint16) := i(uint16)
i(uint16) = i + 1"];
14->9;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->24;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
j < numArtworks

IRs:
TMP_481(bool) = j < numArtworks
CONDITION TMP_481"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: IF 19

EXPRESSION:
ids[j] == oldest

IRs:
REF_259(uint32) -> ids[j]
TMP_482(bool) = REF_259 == oldest
CONDITION TMP_482"];
19->20[label="True"];
19->22[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
index = j

IRs:
index(uint16) := j(uint16)"];
20->21;
21[label="Node Type: BREAK 21
"];
21->16;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
j ++

IRs:
TMP_483(uint16) := j(uint16)
j(uint16) = j + 1"];
23->18;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
artworkId = oldest

IRs:
artworkId(uint32) := oldest(uint32)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
(artworkId,index)

IRs:
RETURN artworkId,index"];
}
// Function: 2859.sol-ArtMuseumV1-setOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-setOraclizeGas(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclizeGas = newGas

IRs:
oraclizeGas(uint32) := newGas(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-setOraclizeGasExtraArtwork(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclizeGasExtraArtwork = newGas

IRs:
oraclizeGasExtraArtwork(uint32) := newGas(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_701(uint256) = 60 * 60
TMP_702(uint256) = TMP_701 * 24
day(uint256) := TMP_702(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_703(uint256) = 60 * 60
TMP_704(uint256) = TMP_703 * 24
TMP_705(uint256) = TMP_704 * 7
week(uint256) := TMP_705(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_706(uint256) = 60 * 60
TMP_707(uint256) = TMP_706 * 24
TMP_708(uint256) = TMP_707 * 30
month(uint256) := TMP_708(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 2859.sol-ArtMuseumV1-timeTillNextSteal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(86400 / (1 + numArtworks / 100)) / (numOfTimesSteal)

IRs:
TMP_547(uint32) = numArtworks / 100
TMP_548(uint256) = 1 + TMP_547
TMP_549(uint256) = 86400 / TMP_548
TMP_550(uint256) = TMP_549 / numOfTimesSteal
RETURN TMP_550"];
}
// Function: 2859.sol-ArtMuseumV1-tokenCallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(like))

IRs:
TMP_692 = CONVERT like to address
TMP_693(bool) = msg.sender == TMP_692
TMP_694(None) = SOLIDITY_CALL require(bool)(TMP_693)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
result2 = new uint8[](result.length)

IRs:
REF_328 -> LENGTH result
TMP_696(uint8[])  = new uint8[](REF_328)
result2(uint8[]) = ['TMP_696(uint8[])']"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
j = 0

IRs:
j(uint16) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
j < result.length

IRs:
REF_329 -> LENGTH result
TMP_697(bool) = j < REF_329
CONDITION TMP_697"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
result2[j] = uint8(result[j])

IRs:
REF_330(uint8) -> result2[j]
REF_331(uint256) -> result[j]
TMP_698 = CONVERT REF_331 to uint8
REF_330(uint8) (->result2) := TMP_698(uint8)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j ++

IRs:
TMP_699(uint16) := j(uint16)
j(uint16) = j + 1"];
12->10;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
giveArtworks(result2,_from,_value)

IRs:
INTERNAL_CALL, ArtMuseumV1.giveArtworks(uint8[],address,uint256)(result2,_from,_value)"];
}
// Function: 2859.sol-ArtMuseumV1-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-triggerSteal(uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
gaslimit = gasleft()()

IRs:
TMP_551(uint256) = SOLIDITY_CALL gasleft()()
gaslimit(uint256) := TMP_551(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = oraclize_getPrice(queryType,gasAmount)

IRs:
TMP_552(uint256) = INTERNAL_CALL, usingOraclize.oraclize_getPrice(string,uint256)(queryType,gasAmount)
price(uint256) := TMP_552(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balancebefore = address(this).balance

IRs:
TMP_553 = CONVERT this to address
TMP_554(uint256) = SOLIDITY_CALL balance(address)(TMP_553)
balancebefore(uint256) := TMP_554(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(price <= address(this).balance)

IRs:
TMP_555 = CONVERT this to address
TMP_556(uint256) = SOLIDITY_CALL balance(address)(TMP_555)
TMP_557(bool) = price <= TMP_556
TMP_558(None) = SOLIDITY_CALL require(bool)(TMP_557)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
numArtworks <= 1

IRs:
TMP_559(bool) = numArtworks <= 1
CONDITION TMP_559"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
removeArtworksByString(,0)

IRs:
TMP_560(uint128) = INTERNAL_CALL, ArtMuseumV1.removeArtworksByString(string,uint32)(,0)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
distribute(0)

IRs:
INTERNAL_CALL, ArtMuseumV1.distribute(uint128)(0)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nextStealId = 0x0

IRs:
nextStealId(bytes32) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
price = 0

IRs:
price(uint256) := 0(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
nextStealId = oraclize_query(nextStealTimestamp,queryType,randomQuery,gasAmount)

IRs:
TMP_562(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string,uint256)(nextStealTimestamp,queryType,randomQuery,gasAmount)
nextStealId(bytes32) := TMP_562(bytes32)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
newTriggerOraclize(nextStealId,inseconds,gasAmount,price,balancebefore,address(this).balance)

IRs:
TMP_563 = CONVERT this to address
TMP_564(uint256) = SOLIDITY_CALL balance(address)(TMP_563)
Emit newTriggerOraclize(nextStealId,inseconds,gasAmount,price,balancebefore,TMP_564)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclizeFee = price + (gaslimit - gasleft()() + 200000) * tx.gasprice

IRs:
TMP_566(uint256) = SOLIDITY_CALL gasleft()()
TMP_567(uint256) = gaslimit - TMP_566
TMP_568(uint256) = TMP_567 + 200000
TMP_569(uint256) = TMP_568 * tx.gasprice
TMP_570(uint256) = price + TMP_569
oraclizeFee(uint256) := TMP_570(uint256)"];
}
// Function: 2859.sol-ArtMuseumV1-triggerStealManually(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((nextStealTimestamp) < now)

IRs:
TMP_498(bool) = nextStealTimestamp < now
TMP_499(None) = SOLIDITY_CALL require(bool)(TMP_498)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
triggerSteal(inseconds,(oraclizeGas + oraclizeGasExtraArtwork * numArtworks))

IRs:
TMP_500(uint32) = oraclizeGasExtraArtwork * numArtworks
TMP_501(uint32) = oraclizeGas + TMP_500
INTERNAL_CALL, ArtMuseumV1.triggerSteal(uint32,uint256)(inseconds,TMP_501)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
3->1;
}
// Function: 2859.sol-ArtMuseumV1-triggerStealManually2(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
gaslimit = gasleft()()

IRs:
TMP_504(uint256) = SOLIDITY_CALL gasleft()()
gaslimit(uint256) := TMP_504(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeFee = (gaslimit) * tx.gasprice + oraclizeFee

IRs:
TMP_505(uint256) = gaslimit * tx.gasprice
TMP_506(uint256) = TMP_505 + oraclizeFee
oraclizeFee(uint256) := TMP_506(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(nextStealTimestamp < now)

IRs:
TMP_507(bool) = nextStealTimestamp < now
TMP_508(None) = SOLIDITY_CALL require(bool)(TMP_507)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
oraclizeFeeTmp = 0

IRs:
oraclizeFeeTmp(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
numArtworks <= 1

IRs:
TMP_509(bool) = numArtworks <= 1
CONDITION TMP_509"];
9->10[label="True"];
9->25[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
removeArtworksByString(,0)

IRs:
TMP_510(uint128) = INTERNAL_CALL, ArtMuseumV1.removeArtworksByString(string,uint32)(,0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
distribute(0)

IRs:
INTERNAL_CALL, ArtMuseumV1.distribute(uint128)(0)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
oraclizeFeeTmp = oraclizeFee

IRs:
oraclizeFeeTmp(uint256) := oraclizeFee(uint256)"];
12->22;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
pot = removeArtworksByString(result,howmany)

IRs:
TMP_512(uint128) = INTERNAL_CALL, ArtMuseumV1.removeArtworksByString(string,uint32)(result,howmany)
pot(uint128) := TMP_512(uint128)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
gasCost = ((oraclizeFee * etherExchangeLikeCoin) / 1000000000000000000) * 1000000000000000000

IRs:
TMP_513(uint256) = oraclizeFee * etherExchangeLikeCoin
TMP_514(uint256) = TMP_513 / 1000000000000000000
TMP_515(uint256) = TMP_514 * 1000000000000000000
gasCost(uint256) := TMP_515(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
pot > gasCost

IRs:
TMP_516(bool) = pot > gasCost
CONDITION TMP_516"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
distpot = uint128(pot - gasCost)

IRs:
TMP_517(uint128) = pot - gasCost
TMP_518 = CONVERT TMP_517 to uint128
distpot(uint128) := TMP_518(uint128)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
distribute(distpot)

IRs:
INTERNAL_CALL, ArtMuseumV1.distribute(uint128)(distpot)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclizeFeeTmp = oraclizeFee

IRs:
oraclizeFeeTmp(uint256) := oraclizeFee(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
oraclizeFee = 0

IRs:
oraclizeFee(uint256) := 0(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
newOraclizeCallback(0x0,result,howmany,pot,distpot,oraclizeFeeTmp,gaslimit,etherExchangeLikeCoin)

IRs:
Emit newOraclizeCallback(0,result,howmany,pot,distpot,oraclizeFeeTmp,gaslimit,etherExchangeLikeCoin)"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
24->1;
25[label="Node Type: IF 25

EXPRESSION:
numArtworks < 100

IRs:
TMP_522(bool) = numArtworks < 100
CONDITION TMP_522"];
25->29[label="True"];
25->27[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
howmany = 10

IRs:
howmany(uint32) := 10(uint256)"];
27->28;
28[label="Node Type: END_IF 28
"];
28->14;
29[label="Node Type: IF 29

EXPRESSION:
numArtworks < 10

IRs:
TMP_523(bool) = numArtworks < 10
CONDITION TMP_523"];
29->33[label="True"];
29->31[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
howmany = numArtworks / 10

IRs:
TMP_524(uint32) = numArtworks / 10
howmany(uint32) := TMP_524(uint32)"];
31->32;
32[label="Node Type: END_IF 32
"];
32->28;
33[label="Node Type: IF 33

EXPRESSION:
numArtworks < 2

IRs:
TMP_525(bool) = numArtworks < 2
CONDITION TMP_525"];
33->34[label="True"];
33->35[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
howmany = 0

IRs:
howmany(uint32) := 0(uint256)"];
34->36;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
howmany = 1

IRs:
howmany(uint32) := 1(uint256)"];
35->36;
36[label="Node Type: END_IF 36
"];
36->32;
}
// Function: 2859.sol-ArtMuseumV1-triggerStealManually3(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclizeFee = (gaslimit) * tx.gasprice + oraclizeFee

IRs:
TMP_526(uint256) = gaslimit * tx.gasprice
TMP_527(uint256) = TMP_526 + oraclizeFee
oraclizeFee(uint256) := TMP_527(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nextStealTimestamp < now)

IRs:
TMP_528(bool) = nextStealTimestamp < now
TMP_529(None) = SOLIDITY_CALL require(bool)(TMP_528)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
oraclizeFeeTmp = 0

IRs:
oraclizeFeeTmp(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
numArtworks <= 1

IRs:
TMP_530(bool) = numArtworks <= 1
CONDITION TMP_530"];
8->9[label="True"];
8->24[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
removeArtworksByString(,0)

IRs:
TMP_531(uint128) = INTERNAL_CALL, ArtMuseumV1.removeArtworksByString(string,uint32)(,0)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
distribute(0)

IRs:
INTERNAL_CALL, ArtMuseumV1.distribute(uint128)(0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
oraclizeFeeTmp = oraclizeFee

IRs:
oraclizeFeeTmp(uint256) := oraclizeFee(uint256)"];
11->21;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
pot = removeArtworksByString(result,howmany)

IRs:
TMP_533(uint128) = INTERNAL_CALL, ArtMuseumV1.removeArtworksByString(string,uint32)(result,howmany)
pot(uint128) := TMP_533(uint128)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
gasCost = ((oraclizeFee * etherExchangeLikeCoin) / 1000000000000000000) * 1000000000000000000

IRs:
TMP_534(uint256) = oraclizeFee * etherExchangeLikeCoin
TMP_535(uint256) = TMP_534 / 1000000000000000000
TMP_536(uint256) = TMP_535 * 1000000000000000000
gasCost(uint256) := TMP_536(uint256)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
pot > gasCost

IRs:
TMP_537(bool) = pot > gasCost
CONDITION TMP_537"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
distpot = uint128(pot - gasCost)

IRs:
TMP_538(uint128) = pot - gasCost
TMP_539 = CONVERT TMP_538 to uint128
distpot(uint128) := TMP_539(uint128)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
distribute(distpot)

IRs:
INTERNAL_CALL, ArtMuseumV1.distribute(uint128)(distpot)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
oraclizeFeeTmp = oraclizeFee

IRs:
oraclizeFeeTmp(uint256) := oraclizeFee(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclizeFee = 0

IRs:
oraclizeFee(uint256) := 0(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
newOraclizeCallback(0x0,result,howmany,pot,distpot,oraclizeFeeTmp,gaslimit,etherExchangeLikeCoin)

IRs:
Emit newOraclizeCallback(0,result,howmany,pot,distpot,oraclizeFeeTmp,gaslimit,etherExchangeLikeCoin)"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
23->1;
24[label="Node Type: IF 24

EXPRESSION:
numArtworks < 100

IRs:
TMP_543(bool) = numArtworks < 100
CONDITION TMP_543"];
24->28[label="True"];
24->26[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
howmany = 10

IRs:
howmany(uint32) := 10(uint256)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->13;
28[label="Node Type: IF 28

EXPRESSION:
numArtworks < 10

IRs:
TMP_544(bool) = numArtworks < 10
CONDITION TMP_544"];
28->32[label="True"];
28->30[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
howmany = numArtworks / 10

IRs:
TMP_545(uint32) = numArtworks / 10
howmany(uint32) := TMP_545(uint32)"];
30->31;
31[label="Node Type: END_IF 31
"];
31->27;
32[label="Node Type: IF 32

EXPRESSION:
numArtworks < 2

IRs:
TMP_546(bool) = numArtworks < 2
CONDITION TMP_546"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
howmany = 0

IRs:
howmany(uint32) := 0(uint256)"];
33->35;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
howmany = 1

IRs:
howmany(uint32) := 1(uint256)"];
34->35;
35[label="Node Type: END_IF 35
"];
35->31;
}
// Function: 2859.sol-ArtMuseumV1-updateNextStealTime(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nextStealTimestamp = now + inseconds

IRs:
TMP_618(uint256) = now + inseconds
nextStealTimestamp(uint256) := TMP_618(uint256)"];
}
// Function: 2859.sol-ArtMuseumV1-updateNextStealTimeByOperator(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nextStealTimestamp = now + inseconds

IRs:
TMP_669(uint256) = now + inseconds
nextStealTimestamp(uint256) := TMP_669(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOrOperator()

IRs:
MODIFIER_CALL, Ownable.ownerOrOperator()()"];
2->1;
}
// Function: 2859.sol-ArtMuseumV1-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_369 = CONVERT this to address
TMP_370(uint256) = SOLIDITY_CALL balance(address)(TMP_369)
Transfer dest:owner value:TMP_370"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
res

IRs:
RETURN res"];
}
// Function: 2859.sol-LikeCoinInterface-approve(address,uint256)
digraph{
}
// Function: 2859.sol-LikeCoinInterface-balanceOf(address)
digraph{
}
// Function: 2859.sol-LikeCoinInterface-transfer(address,uint256)
digraph{
}
// Function: 2859.sol-LikeCoinInterface-transferFrom(address,address,uint256)
digraph{
}
// Function: 2859.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 2859.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 2859.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 2859.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 2859.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 2859.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 2859.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 2859.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 2859.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 2859.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 2859.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 2859.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 2859.sol-Ownable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_2 = CONVERT 0 to address
pendingOwner(address) := TMP_2(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Ownable.onlyPendingOwner()()"];
4->1;
}
// Function: 2859.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2859.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-Ownable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_7(bool) = msg.sender == pendingOwner
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-Ownable-ownerOrOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == operator)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(bool) = msg.sender == operator
TMP_11(bool) = TMP_9 || TMP_10
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2859.sol-Ownable-setOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2859.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2859.sol-strings-count(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = findPtr(self._len,self._ptr,needle._len,needle._ptr) + needle._len

IRs:
REF_112(uint256) -> self._len
REF_113(uint256) -> self._ptr
REF_114(uint256) -> needle._len
REF_115(uint256) -> needle._ptr
TMP_250(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(REF_112,REF_113,REF_114,REF_115)
REF_116(uint256) -> needle._len
TMP_251(uint256) = TMP_250 + REF_116
ptr(uint256) := TMP_251(uint256)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
ptr <= self._ptr + self._len

IRs:
REF_117(uint256) -> self._ptr
REF_118(uint256) -> self._len
TMP_252(uint256) = REF_117 + REF_118
TMP_253(bool) = ptr <= TMP_252
CONDITION TMP_253"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cnt ++

IRs:
TMP_254(uint256) := cnt(uint256)
cnt(uint256) = cnt + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ptr = findPtr(self._len - (ptr - self._ptr),ptr,needle._len,needle._ptr) + needle._len

IRs:
REF_119(uint256) -> self._len
REF_120(uint256) -> self._ptr
TMP_255(uint256) = ptr - REF_120
TMP_256(uint256) = REF_119 - TMP_255
REF_121(uint256) -> needle._len
REF_122(uint256) -> needle._ptr
TMP_257(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(TMP_256,ptr,REF_121,REF_122)
REF_123(uint256) -> needle._len
TMP_258(uint256) = TMP_257 + REF_123
ptr(uint256) := TMP_258(uint256)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
cnt

IRs:
RETURN cnt"];
}
// Function: 2859.sol-strings-findPtr(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = selfptr

IRs:
ptr(uint256) := selfptr(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
needlelen <= selflen

IRs:
TMP_224(bool) = needlelen <= selflen
CONDITION TMP_224"];
3->4[label="True"];
3->39[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
needlelen <= 32

IRs:
TMP_225(bool) = needlelen <= 32
CONDITION TMP_225"];
4->5[label="True"];
4->23[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
mask = bytes32(~ (2 ** (8 * (32 - needlelen)) - 1))

IRs:
TMP_226(uint256) = 32 - needlelen
TMP_227(uint256) = 8 * TMP_226
TMP_228(uint256) = 2 ** TMP_227
TMP_229(uint256) = TMP_228 - 1
TMP_230 = UnaryType.TILD TMP_229 
TMP_231 = CONVERT TMP_230 to bytes32
mask(bytes32) := TMP_231(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
end = selfptr + selflen - needlelen

IRs:
TMP_232(uint256) = selfptr + selflen
TMP_233(uint256) = TMP_232 - needlelen
end(uint256) := TMP_233(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
ptrdata != needledata

IRs:
TMP_234(bool) = ptrdata != needledata
CONDITION TMP_234"];
14->15[label="True"];
14->21[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
ptr >= end

IRs:
TMP_235(bool) = ptr >= end
CONDITION TMP_235"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: RETURN 16

EXPRESSION:
selfptr + selflen

IRs:
TMP_236(uint256) = selfptr + selflen
RETURN TMP_236"];
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ptr ++

IRs:
TMP_237(uint256) := ptr(uint256)
ptr(uint256) = ptr + 1"];
18->19;
19[label="Node Type: INLINE ASM 19
"];
19->20;
20[label="Node Type: END INLINE ASM 20
"];
20->14;
21[label="Node Type: END_LOOP 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
ptr

IRs:
RETURN ptr"];
23[label="Node Type: NEW VARIABLE 23
"];
23->24;
24[label="Node Type: INLINE ASM 24
"];
24->25;
25[label="Node Type: END INLINE ASM 25
"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->38;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
idx <= selflen - needlelen

IRs:
TMP_238(uint256) = selflen - needlelen
TMP_239(bool) = idx <= TMP_238
CONDITION TMP_239"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: NEW VARIABLE 30
"];
30->31;
31[label="Node Type: INLINE ASM 31
"];
31->32;
32[label="Node Type: END INLINE ASM 32
"];
32->33;
33[label="Node Type: IF 33

EXPRESSION:
hash == testHash

IRs:
TMP_240(bool) = hash == testHash
CONDITION TMP_240"];
33->34[label="True"];
33->35[label="False"];
34[label="Node Type: RETURN 34

EXPRESSION:
ptr

IRs:
RETURN ptr"];
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
ptr += 1

IRs:
ptr(uint256) = ptr + 1"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
idx ++

IRs:
TMP_241(uint256) := idx(uint256)
idx(uint256) = idx + 1"];
37->29;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: RETURN 40

EXPRESSION:
selfptr + selflen

IRs:
TMP_242(uint256) = selfptr + selflen
RETURN TMP_242"];
}
// Function: 2859.sol-strings-memcpy(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: BEGIN_LOOP 1
"];
1->3;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
len >= 32

IRs:
TMP_215(bool) = len >= 32
CONDITION TMP_215"];
3->4[label="True"];
3->2[label="False"];
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dest += 32

IRs:
dest(uint256) = dest + 32"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
src += 32

IRs:
src(uint256) = src + 32"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len -= 32

IRs:
len(uint256) = len - 32"];
8->3;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
mask = 256 ** (32 - len) - 1

IRs:
TMP_216(uint256) = 32 - len
TMP_217(uint256) = 256 ** TMP_216
TMP_218(uint256) = TMP_217 - 1
mask(uint256) := TMP_218(uint256)"];
9->10;
10[label="Node Type: INLINE ASM 10
"];
10->11;
11[label="Node Type: END INLINE ASM 11
"];
}
// Function: 2859.sol-strings-split(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
split(self,needle,token)

IRs:
TMP_249(strings.slice) = INTERNAL_CALL, strings.split(strings.slice,strings.slice,strings.slice)(self,needle,token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 2859.sol-strings-split(strings.slice,strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = findPtr(self._len,self._ptr,needle._len,needle._ptr)

IRs:
REF_96(uint256) -> self._len
REF_97(uint256) -> self._ptr
REF_98(uint256) -> needle._len
REF_99(uint256) -> needle._ptr
TMP_243(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(REF_96,REF_97,REF_98,REF_99)
ptr(uint256) := TMP_243(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token._ptr = self._ptr

IRs:
REF_100(uint256) -> token._ptr
REF_101(uint256) -> self._ptr
REF_100(uint256) (->token) := REF_101(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token._len = ptr - self._ptr

IRs:
REF_102(uint256) -> token._len
REF_103(uint256) -> self._ptr
TMP_244(uint256) = ptr - REF_103
REF_102(uint256) (->token) := TMP_244(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
ptr == self._ptr + self._len

IRs:
REF_104(uint256) -> self._ptr
REF_105(uint256) -> self._len
TMP_245(uint256) = REF_104 + REF_105
TMP_246(bool) = ptr == TMP_245
CONDITION TMP_246"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
self._len = 0

IRs:
REF_106(uint256) -> self._len
REF_106(uint256) (->self) := 0(uint256)"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self._len -= token._len + needle._len

IRs:
REF_107(uint256) -> self._len
REF_108(uint256) -> token._len
REF_109(uint256) -> needle._len
TMP_247(uint256) = REF_108 + REF_109
REF_107(-> self) = REF_107 - TMP_247"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self._ptr = ptr + needle._len

IRs:
REF_110(uint256) -> self._ptr
REF_111(uint256) -> needle._len
TMP_248(uint256) = ptr + REF_111
REF_110(uint256) (->self) := TMP_248(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 2859.sol-strings-toSlice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
slice(bytes(self).length,ptr)

IRs:
TMP_219 = CONVERT self to bytes
REF_92 -> LENGTH TMP_219
TMP_220(strings.slice) = new slice(REF_92,ptr)
RETURN TMP_220"];
}
// Function: 2859.sol-strings-toString(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ret = new string(self._len)

IRs:
REF_93(uint256) -> self._len
TMP_222 = new string(REF_93)
ret(string) := TMP_222(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
memcpy(retptr,self._ptr,self._len)

IRs:
REF_94(uint256) -> self._ptr
REF_95(uint256) -> self._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(retptr,REF_94,REF_95)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 2859.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 2859.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_203 = CONVERT OAR to address
TMP_204(bool) = TMP_203 == 0
TMP_205 = CONVERT OAR to address
TMP_206(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_205)
TMP_207(bool) = TMP_206 == 0
TMP_208(bool) = TMP_204 || TMP_207
CONDITION TMP_208"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_209(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_210 = CONVERT oraclize to address
TMP_211(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_212(bool) = TMP_210 != TMP_211
CONDITION TMP_212"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_213(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_214 = CONVERT TMP_213 to OraclizeI
oraclize(OraclizeI) := TMP_214(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 2859.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_177(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_177"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 2859.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_117"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_119(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_119"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_121(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_121(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_122(uint256) = tx.gasprice * 200000
TMP_123(uint256) = 1000000000000000000 + TMP_122
TMP_124(bool) = price > TMP_123
CONDITION TMP_124"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_126(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_126"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_149(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_149(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_150(uint256) = tx.gasprice * 200000
TMP_151(uint256) = 1000000000000000000 + TMP_150
TMP_152(bool) = price > TMP_151
CONDITION TMP_152"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_154(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_154"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_170(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_170(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_171(uint256) = tx.gasprice * gaslimit
TMP_172(uint256) = 1000000000000000000 + TMP_171
TMP_173(bool) = price > TMP_172
CONDITION TMP_173"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_175(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_175"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_142(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_143(uint256) = tx.gasprice * gaslimit
TMP_144(uint256) = 1000000000000000000 + TMP_143
TMP_145(bool) = price > TMP_144
CONDITION TMP_145"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_147(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_147"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_128(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_128(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_129(uint256) = tx.gasprice * 200000
TMP_130(uint256) = 1000000000000000000 + TMP_129
TMP_131(bool) = price > TMP_130
CONDITION TMP_131"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_133(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_133"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_156(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_156(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_157(uint256) = tx.gasprice * 200000
TMP_158(uint256) = 1000000000000000000 + TMP_157
TMP_159(bool) = price > TMP_158
CONDITION TMP_159"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_161(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_161"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_163(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_163(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_164(uint256) = tx.gasprice * gaslimit
TMP_165(uint256) = 1000000000000000000 + TMP_164
TMP_166(bool) = price > TMP_165
CONDITION TMP_166"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_168(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_168"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_135(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_135(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_136(uint256) = tx.gasprice * gaslimit
TMP_137(uint256) = 1000000000000000000 + TMP_136
TMP_138(bool) = price > TMP_137
CONDITION TMP_138"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_140(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_140"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 2859.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_179"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 2859.sol-usingOraclize-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_92(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_93(bool) = TMP_92 > 0
CONDITION TMP_93"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_94 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_94(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_96(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_97(bool) = TMP_96 > 0
CONDITION TMP_97"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_98 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_98(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_100(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_101(bool) = TMP_100 > 0
CONDITION TMP_101"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_102 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_102(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_104(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_105(bool) = TMP_104 > 0
CONDITION TMP_105"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_106 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_106(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_108(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_109(bool) = TMP_108 > 0
CONDITION TMP_109"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_110 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_110(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_111(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_112(bool) = TMP_111 > 0
CONDITION TMP_112"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_113 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_113(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_114(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_115(bool) = TMP_114 > 0
CONDITION TMP_115"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_116 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_116(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 2859.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_91(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_91"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 2859.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 2859.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_181(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_181"];
}
// Function: 2859.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_182 = CONVERT _a to bytes
bresult(bytes) := TMP_182(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_85 -> LENGTH bresult
TMP_183(bool) = i < REF_85
CONDITION TMP_183"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_86(None) -> bresult[i]
TMP_184(bool) = REF_86 >= 48
REF_87(None) -> bresult[i]
TMP_185(bool) = REF_87 <= 57
TMP_186(bool) = TMP_184 && TMP_185
CONDITION TMP_186"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_187(bool) = _b == 0
CONDITION TMP_187"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_188(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_88(None) -> bresult[i]
TMP_189 = CONVERT REF_88 to uint256
TMP_190(uint256) = TMP_189 - 48
mint(uint256) = mint + TMP_190"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_89(None) -> bresult[i]
TMP_191(bool) = REF_89 == 46
CONDITION TMP_191"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_192(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_193(bool) = _b > 0
CONDITION TMP_193"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_194(uint256) = 10 ** _b
mint(uint256) = mint * TMP_194"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 2859.sol-usingOraclize-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_195(uint256) = 60 * 60
TMP_196(uint256) = TMP_195 * 24
day(uint256) := TMP_196(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_197(uint256) = 60 * 60
TMP_198(uint256) = TMP_197 * 24
TMP_199(uint256) = TMP_198 * 7
week(uint256) := TMP_199(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_200(uint256) = 60 * 60
TMP_201(uint256) = TMP_200 * 24
TMP_202(uint256) = TMP_201 * 30
month(uint256) := TMP_202(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
}
