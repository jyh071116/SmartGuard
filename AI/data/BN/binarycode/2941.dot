digraph G {
// Function: 2941.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_440'] 
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_442'] 
TMP_444(uint256) = TMP_443 / 2
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_441', 'TMP_444'] 
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_447(uint256) = TMP_445 / TMP_446
RETURN TMP_447"];
}
// Function: 2941.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_430(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_432(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_431)
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_430', 'TMP_432'] 
RETURN TMP_433"];
}
// Function: 2941.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_434', '312500000000000000000000000'] 
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_435', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_436'] 
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_437', '74999921875000000000000000000000'] 
TMP_439(uint256) = TMP_438 / 156250000
RETURN TMP_439"];
}
// Function: 2941.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_427(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_426)
TMP_428(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_427', 'TMP_428'] 
RETURN TMP_429"];
}
// Function: 2941.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_448 = CONVERT _input to bytes
_temp(bytes) := TMP_448(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_706 -> LENGTH _temp
_length(uint256) := REF_706(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_449(bool) = _length <= 32
TMP_450(bool) = _length > 0
TMP_451(bool) = TMP_449 && TMP_450
TMP_452(None) = SOLIDITY_CALL require(bool,string)(TMP_451,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_707(None) -> _temp[0]
TMP_453(bool) = REF_707 != 32
TMP_454(uint256) = _length - 1
REF_708(None) -> _temp[TMP_454]
TMP_455(bool) = REF_708 != 32
TMP_456(bool) = TMP_453 && TMP_455
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_709(None) -> _temp[0]
TMP_458(bool) = REF_709 == 48
CONDITION TMP_458"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_710(None) -> _temp[1]
TMP_459(bool) = REF_710 != 120
TMP_460(None) = SOLIDITY_CALL require(bool,string)(TMP_459,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_711(None) -> _temp[1]
TMP_461(bool) = REF_711 != 88
TMP_462(None) = SOLIDITY_CALL require(bool,string)(TMP_461,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_463(bool) = i < _length
CONDITION TMP_463"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_712(None) -> _temp[i]
TMP_464(bool) = REF_712 > 64
REF_713(None) -> _temp[i]
TMP_465(bool) = REF_713 < 91
TMP_466(bool) = TMP_464 && TMP_465
CONDITION TMP_466"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_714(bytes1) -> _temp[i]
REF_715(None) -> _temp[i]
TMP_467 = CONVERT REF_715 to uint256
TMP_468(uint256) = TMP_467 + 32
TMP_469 = CONVERT TMP_468 to bytes1
REF_714(bytes1) (->_temp) := TMP_469(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_470(bool) = _hasNonNumber == False
CONDITION TMP_470"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_716(None) -> _temp[i]
TMP_471(bool) = REF_716 == 32
REF_717(None) -> _temp[i]
TMP_472(bool) = REF_717 > 96
REF_718(None) -> _temp[i]
TMP_473(bool) = REF_718 < 123
TMP_474(bool) = TMP_472 && TMP_473
TMP_475(bool) = TMP_471 || TMP_474
REF_719(None) -> _temp[i]
TMP_476(bool) = REF_719 > 47
REF_720(None) -> _temp[i]
TMP_477(bool) = REF_720 < 58
TMP_478(bool) = TMP_476 && TMP_477
TMP_479(bool) = TMP_475 || TMP_478
TMP_480(None) = SOLIDITY_CALL require(bool,string)(TMP_479,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_721(None) -> _temp[i]
TMP_481(bool) = REF_721 == 32
CONDITION TMP_481"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_482(uint256) = i + 1
REF_722(None) -> _temp[TMP_482]
TMP_483(bool) = REF_722 != 32
TMP_484(None) = SOLIDITY_CALL require(bool,string)(TMP_483,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_485(bool) = _hasNonNumber == False
REF_723(None) -> _temp[i]
TMP_486(bool) = REF_723 < 48
REF_724(None) -> _temp[i]
TMP_487(bool) = REF_724 > 57
TMP_488(bool) = TMP_486 || TMP_487
TMP_489(bool) = TMP_485 && TMP_488
CONDITION TMP_489"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_490(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_491(bool) = _hasNonNumber == True
TMP_492(None) = SOLIDITY_CALL require(bool,string)(TMP_491,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2941.sol-NewChance-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_409(bool) = msg.sender == admin
TMP_410(None) = SOLIDITY_CALL require(bool,string)(TMP_409,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_411(bool) = activated_ == False
TMP_412(None) = SOLIDITY_CALL require(bool,string)(TMP_411,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_687(F3Ddatasets.Round) -> round_[1]
REF_688(uint256) -> REF_687.strt
TMP_413(uint256) = now + rndExtra_
TMP_414(uint256) = TMP_413 - rndGap_
REF_688(uint256) (->round_) := TMP_414(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_689(F3Ddatasets.Round) -> round_[1]
REF_690(uint256) -> REF_689.end
TMP_415(uint256) = now + rndInit_
TMP_416(uint256) = TMP_415 + rndExtra_
REF_690(uint256) (->round_) := TMP_416(uint256)"];
}
// Function: 2941.sol-NewChance-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_327(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_328(bytes32) = SOLIDITY_CALL keccak256()(TMP_327)
TMP_329 = CONVERT TMP_328 to uint256
TMP_330(uint256) = TMP_329 / now
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_326', 'TMP_330'] 
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_331', 'block.gaslimit'] 
TMP_333(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_334(bytes32) = SOLIDITY_CALL keccak256()(TMP_333)
TMP_335 = CONVERT TMP_334 to uint256
TMP_336(uint256) = TMP_335 / now
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_332', 'TMP_336'] 
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_337', 'block.number'] 
TMP_339(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_338)
TMP_340(bytes32) = SOLIDITY_CALL keccak256()(TMP_339)
TMP_341 = CONVERT TMP_340 to uint256
seed(uint256) := TMP_341(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_342(uint256) = seed / 1000
TMP_343(uint256) = TMP_342 * 1000
TMP_344(uint256) = seed - TMP_343
TMP_345(bool) = TMP_344 < airDropTracker_
CONDITION TMP_345"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2941.sol-NewChance-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_239(F3Ddatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.strt
TMP_133(uint256) = REF_240 + rndGap_
TMP_134(bool) = _now > TMP_133
REF_241(F3Ddatasets.Round) -> round_[_rID]
REF_242(uint256) -> REF_241.end
TMP_135(bool) = _now <= REF_242
REF_243(F3Ddatasets.Round) -> round_[_rID]
REF_244(uint256) -> REF_243.end
TMP_136(bool) = _now > REF_244
REF_245(F3Ddatasets.Round) -> round_[_rID]
REF_246(uint256) -> REF_245.plyr
TMP_137(bool) = REF_246 == 0
TMP_138(bool) = TMP_136 && TMP_137
TMP_139(bool) = TMP_135 || TMP_138
TMP_140(bool) = TMP_134 && TMP_139
CONDITION TMP_140"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, NewChance.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_247(F3Ddatasets.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.end
TMP_142(bool) = _now > REF_248
REF_249(F3Ddatasets.Round) -> round_[_rID]
REF_250(bool) -> REF_249.ended
TMP_143(bool) = REF_250 == False
TMP_144(bool) = TMP_142 && TMP_143
CONDITION TMP_144"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_251(F3Ddatasets.Round) -> round_[_rID]
REF_252(bool) -> REF_251.ended
REF_252(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_145(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_145(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_253(uint256) -> _eventData_.compressedData
REF_254(uint256) -> _eventData_.compressedData
TMP_146(uint256) = _now * 1000000000000000000
TMP_147(uint256) = REF_254 + TMP_146
REF_253(uint256) (->_eventData_) := TMP_147(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_255(uint256) -> _eventData_.compressedIDs
REF_256(uint256) -> _eventData_.compressedIDs
TMP_148(uint256) = REF_256 + _pID
REF_255(uint256) (->_eventData_) := TMP_148(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_258(F3Ddatasets.Player) -> plyr_[_pID]
REF_259(bytes32) -> REF_258.name
REF_260(uint256) -> _eventData_.compressedData
REF_261(uint256) -> _eventData_.compressedIDs
REF_262(address) -> _eventData_.winnerAddr
REF_263(bytes32) -> _eventData_.winnerName
REF_264(uint256) -> _eventData_.amountWon
REF_265(uint256) -> _eventData_.newPot
REF_266(uint256) -> _eventData_.P3DAmount
REF_267(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_259,msg.value,REF_260,REF_261,REF_262,REF_263,REF_264,REF_265,REF_266,REF_267)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_268(F3Ddatasets.Player) -> plyr_[_pID]
REF_269(uint256) -> REF_268.gen
REF_270(F3Ddatasets.Player) -> plyr_[_pID]
REF_271(uint256) -> REF_270.gen
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_271', 'msg.value'] 
REF_269(uint256) (->plyr_) := TMP_150(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2941.sol-NewChance-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_23(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, NewChance.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, NewChance.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NewChance.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, NewChance.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2941.sol-NewChance-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, NewChance.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, NewChance.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NewChance.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, NewChance.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 2941.sol-NewChance-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.strt
TMP_223(uint256) = REF_405 + rndGap_
TMP_224(bool) = _now > TMP_223
REF_406(F3Ddatasets.Round) -> round_[_rID]
REF_407(uint256) -> REF_406.end
TMP_225(bool) = _now <= REF_407
REF_408(F3Ddatasets.Round) -> round_[_rID]
REF_409(uint256) -> REF_408.end
TMP_226(bool) = _now > REF_409
REF_410(F3Ddatasets.Round) -> round_[_rID]
REF_411(uint256) -> REF_410.plyr
TMP_227(bool) = REF_411 == 0
TMP_228(bool) = TMP_226 && TMP_227
TMP_229(bool) = TMP_225 || TMP_228
TMP_230(bool) = TMP_224 && TMP_229
CONDITION TMP_230"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_412(F3Ddatasets.Round) -> round_[_rID]
REF_413(uint256) -> REF_412.eth
TMP_231(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_413', '_eth'] 
RETURN TMP_231"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_232(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_232"];
}
// Function: 2941.sol-NewChance-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_394(F3Ddatasets.Round) -> round_[_rIDlast]
REF_395(uint256) -> REF_394.mask
REF_397(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_398(F3Ddatasets.PlayerRounds) -> REF_397[_rIDlast]
REF_399(uint256) -> REF_398.keys
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_395', 'REF_399'] 
TMP_221(uint256) = TMP_220 / 1000000000000000000
REF_401(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_402(F3Ddatasets.PlayerRounds) -> REF_401[_rIDlast]
REF_403(uint256) -> REF_402.mask
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_221', 'REF_403'] 
RETURN TMP_222"];
}
// Function: 2941.sol-NewChance-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(22,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(22,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 2941.sol-NewChance-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_305(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_306(F3Ddatasets.PlayerRounds) -> REF_305[_rID]
REF_307(uint256) -> REF_306.keys
TMP_170(bool) = REF_307 == 0
CONDITION TMP_170"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_171(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_171(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_308(F3Ddatasets.Round) -> round_[_rID]
REF_309(uint256) -> REF_308.eth
TMP_172(bool) = REF_309 < 100000000000000000000
REF_310(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_311(F3Ddatasets.PlayerRounds) -> REF_310[_rID]
REF_312(uint256) -> REF_311.eth
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_312', '_eth'] 
TMP_174(bool) = TMP_173 > 1000000000000000000
TMP_175(bool) = TMP_172 && TMP_174
CONDITION TMP_175"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_315(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_316(F3Ddatasets.PlayerRounds) -> REF_315[_rID]
REF_317(uint256) -> REF_316.eth
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_317'] 
_availableLimit(uint256) := TMP_176(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_177(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_319(F3Ddatasets.Player) -> plyr_[_pID]
REF_320(uint256) -> REF_319.gen
REF_321(F3Ddatasets.Player) -> plyr_[_pID]
REF_322(uint256) -> REF_321.gen
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_322', '_refund'] 
REF_320(uint256) (->plyr_) := TMP_178(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_179(bool) = _eth > 1000000000
CONDITION TMP_179"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_324(F3Ddatasets.Round) -> round_[_rID]
REF_325(uint256) -> REF_324.eth
TMP_180(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_325', '_eth'] 
_keys(uint256) := TMP_180(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_181(bool) = _keys >= 1000000000000000000
CONDITION TMP_181"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, NewChance.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_327(F3Ddatasets.Round) -> round_[_rID]
REF_328(uint256) -> REF_327.plyr
TMP_183(bool) = REF_328 != _pID
CONDITION TMP_183"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_329(F3Ddatasets.Round) -> round_[_rID]
REF_330(uint256) -> REF_329.plyr
REF_330(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_331(F3Ddatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.team
TMP_184(bool) = REF_332 != _team
CONDITION TMP_184"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_333(F3Ddatasets.Round) -> round_[_rID]
REF_334(uint256) -> REF_333.team
REF_334(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_335(uint256) -> _eventData_.compressedData
REF_336(uint256) -> _eventData_.compressedData
TMP_185(uint256) = REF_336 + 100
REF_335(uint256) (->_eventData_) := TMP_185(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_186(bool) = _eth >= 100000000000000000
CONDITION TMP_186"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_187(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_188(bool) = INTERNAL_CALL, NewChance.airdrop()()
TMP_189(bool) = TMP_188 == True
CONDITION TMP_189"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_190(bool) = _eth >= 10000000000000000000
CONDITION TMP_190"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_192(uint256) = TMP_191 / 100
_prize(uint256) := TMP_192(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_338(F3Ddatasets.Player) -> plyr_[_pID]
REF_339(uint256) -> REF_338.win
REF_340(F3Ddatasets.Player) -> plyr_[_pID]
REF_341(uint256) -> REF_340.win
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_341', '_prize'] 
REF_339(uint256) (->plyr_) := TMP_193(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_194(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_344(uint256) -> _eventData_.compressedData
REF_344(-> _eventData_) = REF_344 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_195(bool) = _eth >= 1000000000000000000
TMP_196(bool) = _eth < 10000000000000000000
TMP_197(bool) = TMP_195 && TMP_196
CONDITION TMP_197"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_199(uint256) = TMP_198 / 100
_prize(uint256) := TMP_199(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_346(F3Ddatasets.Player) -> plyr_[_pID]
REF_347(uint256) -> REF_346.win
REF_348(F3Ddatasets.Player) -> plyr_[_pID]
REF_349(uint256) -> REF_348.win
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_349', '_prize'] 
REF_347(uint256) (->plyr_) := TMP_200(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_201(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_352(uint256) -> _eventData_.compressedData
REF_352(-> _eventData_) = REF_352 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_202(bool) = _eth >= 100000000000000000
TMP_203(bool) = _eth < 1000000000000000000
TMP_204(bool) = TMP_202 && TMP_203
CONDITION TMP_204"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_206(uint256) = TMP_205 / 100
_prize(uint256) := TMP_206(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_354(F3Ddatasets.Player) -> plyr_[_pID]
REF_355(uint256) -> REF_354.win
REF_356(F3Ddatasets.Player) -> plyr_[_pID]
REF_357(uint256) -> REF_356.win
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_357', '_prize'] 
REF_355(uint256) (->plyr_) := TMP_207(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_208(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_360(uint256) -> _eventData_.compressedData
REF_360(-> _eventData_) = REF_360 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_361(uint256) -> _eventData_.compressedData
REF_361(-> _eventData_) = REF_361 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_362(uint256) -> _eventData_.compressedData
TMP_209(uint256) = _prize * 1000000000000000000000000000000000
REF_362(-> _eventData_) = REF_362 + TMP_209"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_363(uint256) -> _eventData_.compressedData
REF_364(uint256) -> _eventData_.compressedData
TMP_210(uint256) = airDropTracker_ * 1000
TMP_211(uint256) = REF_364 + TMP_210
REF_363(uint256) (->_eventData_) := TMP_211(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_365(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_366(F3Ddatasets.PlayerRounds) -> REF_365[_rID]
REF_367(uint256) -> REF_366.keys
REF_369(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_370(F3Ddatasets.PlayerRounds) -> REF_369[_rID]
REF_371(uint256) -> REF_370.keys
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_371'] 
REF_367(uint256) (->plyrRnds_) := TMP_212(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_372(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_373(F3Ddatasets.PlayerRounds) -> REF_372[_rID]
REF_374(uint256) -> REF_373.eth
REF_376(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_377(F3Ddatasets.PlayerRounds) -> REF_376[_rID]
REF_378(uint256) -> REF_377.eth
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_378'] 
REF_374(uint256) (->plyrRnds_) := TMP_213(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_379(F3Ddatasets.Round) -> round_[_rID]
REF_380(uint256) -> REF_379.keys
REF_382(F3Ddatasets.Round) -> round_[_rID]
REF_383(uint256) -> REF_382.keys
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_383'] 
REF_380(uint256) (->round_) := TMP_214(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_384(F3Ddatasets.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.eth
REF_387(F3Ddatasets.Round) -> round_[_rID]
REF_388(uint256) -> REF_387.eth
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_388'] 
REF_385(uint256) (->round_) := TMP_215(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_389(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_390(uint256) -> REF_389[_team]
REF_392(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_393(uint256) -> REF_392[_team]
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_393'] 
REF_390(uint256) (->rndTmEth_) := TMP_216(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_217(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_217(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_218(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_218(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, NewChance.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 2941.sol-NewChance-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_453(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_453(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_257(bool) = _pID == 0
CONDITION TMP_257"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_258(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_258(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_259(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_259(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_260(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_260(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_457(uint256) -> pIDxAddr_[msg.sender]
REF_457(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_458(F3Ddatasets.Player) -> plyr_[_pID]
REF_459(address) -> REF_458.addr
REF_459(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_261(bool) = _name != 
CONDITION TMP_261"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_460(uint256) -> pIDxName_[_name]
REF_460(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_461(F3Ddatasets.Player) -> plyr_[_pID]
REF_462(bytes32) -> REF_461.name
REF_462(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_463(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_464(bool) -> REF_463[_name]
REF_464(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_262(bool) = _laff != 0
TMP_263(bool) = _laff != _pID
TMP_264(bool) = TMP_262 && TMP_263
CONDITION TMP_264"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_465(F3Ddatasets.Player) -> plyr_[_pID]
REF_466(uint256) -> REF_465.laff
REF_466(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_467(uint256) -> _eventData_.compressedData
REF_468(uint256) -> _eventData_.compressedData
TMP_265(uint256) = REF_468 + 1
REF_467(uint256) (->_eventData_) := TMP_265(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2941.sol-NewChance-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_346(uint256) = _eth / 100
_p1(uint256) := TMP_346(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_347(uint256) = _eth / 50
_com(uint256) := TMP_347(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_348(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_349 = CONVERT admin to address
TMP_351(bool) = LOW_LEVEL_CALL, dest:TMP_349, function:call, arguments:[] value:_com 
TMP_352 = UnaryType.BANG TMP_351 
CONDITION TMP_352"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_353(uint256) = _eth / 10
_aff(uint256) := TMP_353(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_354(bool) = _affID != _pID
REF_583(F3Ddatasets.Player) -> plyr_[_affID]
REF_584(bytes32) -> REF_583.name
TMP_355(bool) = REF_584 != 
TMP_356(bool) = TMP_354 && TMP_355
CONDITION TMP_356"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_585(F3Ddatasets.Player) -> plyr_[_affID]
REF_586(uint256) -> REF_585.aff
REF_588(F3Ddatasets.Player) -> plyr_[_affID]
REF_589(uint256) -> REF_588.aff
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_589'] 
REF_586(uint256) (->plyr_) := TMP_357(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_591(F3Ddatasets.Player) -> plyr_[_affID]
REF_592(address) -> REF_591.addr
REF_593(F3Ddatasets.Player) -> plyr_[_affID]
REF_594(bytes32) -> REF_593.name
Emit onAffiliatePayout(_affID,REF_592,REF_594,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_597(F3Ddatasets.TeamFee) -> fees_[_team]
REF_598(uint256) -> REF_597.p3d
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_598'] 
TMP_360(uint256) = TMP_359 / 100
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_360'] 
_p3d(uint256) := TMP_361(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_362(bool) = _p3d > 0
CONDITION TMP_362"];
16->17[label="True"];
16->21[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_363(uint256) = _p3d / 2
_potAmount(uint256) := TMP_363(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_364"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_601(F3Ddatasets.Round) -> round_[_rID]
REF_602(uint256) -> REF_601.pot
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(uint256) -> REF_603.pot
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_604', '_potAmount'] 
REF_602(uint256) (->round_) := TMP_366(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_606(uint256) -> _eventData_.P3DAmount
REF_608(uint256) -> _eventData_.P3DAmount
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_608'] 
REF_606(uint256) (->_eventData_) := TMP_367(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2941.sol-NewChance-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_610(F3Ddatasets.TeamFee) -> fees_[_team]
REF_611(uint256) -> REF_610.gen
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_611'] 
TMP_369(uint256) = TMP_368 / 100
_gen(uint256) := TMP_369(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_370(uint256) = _eth / 100
_air(uint256) := TMP_370(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_371(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_373(uint256) = TMP_372 / 100
REF_617(F3Ddatasets.TeamFee) -> fees_[_team]
REF_618(uint256) -> REF_617.p3d
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_618'] 
TMP_375(uint256) = TMP_374 / 100
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_373', 'TMP_375'] 
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_376'] 
_eth(uint256) := TMP_377(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_378(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_379(uint256) = INTERNAL_CALL, NewChance.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_379(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_380(bool) = _dust > 0
CONDITION TMP_380"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_381(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_621(F3Ddatasets.Round) -> round_[_rID]
REF_622(uint256) -> REF_621.pot
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_625(F3Ddatasets.Round) -> round_[_rID]
REF_626(uint256) -> REF_625.pot
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_382', 'REF_626'] 
REF_622(uint256) (->round_) := TMP_383(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_627(uint256) -> _eventData_.genAmount
REF_629(uint256) -> _eventData_.genAmount
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_629'] 
REF_627(uint256) (->_eventData_) := TMP_384(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_630(uint256) -> _eventData_.potAmount
REF_630(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2941.sol-NewChance-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_477(F3Ddatasets.Round) -> round_[_rID]
REF_478(uint256) -> REF_477.plyr
_winPID(uint256) := REF_478(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_479(F3Ddatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.team
_winTID(uint256) := REF_480(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_481(F3Ddatasets.Round) -> round_[_rID]
REF_482(uint256) -> REF_481.pot
_pot(uint256) := REF_482(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_273(uint256) = TMP_272 / 100
_win(uint256) := TMP_273(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot.mul(20)) / 100

IRs:
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '20'] 
TMP_275(uint256) = TMP_274 / 100
_com(uint256) := TMP_275(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_486(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_487(uint256) -> REF_486.gen
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_487'] 
TMP_277(uint256) = TMP_276 / 100
_gen(uint256) := TMP_277(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_489(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_490(uint256) -> REF_489.p3d
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_490'] 
TMP_279(uint256) = TMP_278 / 100
_p3d(uint256) := TMP_279(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_280', '_com'] 
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_281', '_gen'] 
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_282', '_p3d'] 
_res(uint256) := TMP_283(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_496(F3Ddatasets.Round) -> round_[_rID]
REF_497(uint256) -> REF_496.keys
TMP_285(uint256) = TMP_284 / REF_497
_ppt(uint256) := TMP_285(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_500(F3Ddatasets.Round) -> round_[_rID]
REF_501(uint256) -> REF_500.keys
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_501'] 
TMP_287(uint256) = TMP_286 / 1000000000000000000
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_287'] 
_dust(uint256) := TMP_288(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_289(bool) = _dust > 0
CONDITION TMP_289"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_290(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_291(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_504(F3Ddatasets.Player) -> plyr_[_winPID]
REF_505(uint256) -> REF_504.win
REF_507(F3Ddatasets.Player) -> plyr_[_winPID]
REF_508(uint256) -> REF_507.win
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_508'] 
REF_505(uint256) (->plyr_) := TMP_292(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_p3d / 2))

IRs:
TMP_294(uint256) = _p3d / 2
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_294'] 
Transfer dest:admin value:TMP_295"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = _pot.add(_p3d / 2)

IRs:
REF_512(F3Ddatasets.Round) -> round_[_rID]
REF_513(uint256) -> REF_512.pot
TMP_297(uint256) = _p3d / 2
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', 'TMP_297'] 
REF_513(uint256) (->round_) := TMP_298(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_515(F3Ddatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.mask
REF_518(F3Ddatasets.Round) -> round_[_rID]
REF_519(uint256) -> REF_518.mask
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_519'] 
REF_516(uint256) (->round_) := TMP_299(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_520(uint256) -> _eventData_.compressedData
REF_521(uint256) -> _eventData_.compressedData
REF_522(F3Ddatasets.Round) -> round_[_rID]
REF_523(uint256) -> REF_522.end
TMP_300(uint256) = REF_523 * 1000000
TMP_301(uint256) = REF_521 + TMP_300
REF_520(uint256) (->_eventData_) := TMP_301(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_524(uint256) -> _eventData_.compressedIDs
REF_525(uint256) -> _eventData_.compressedIDs
TMP_302(uint256) = _winPID * 100000000000000000000000000
TMP_303(uint256) = REF_525 + TMP_302
TMP_304(uint256) = _winTID * 100000000000000000
TMP_305(uint256) = TMP_303 + TMP_304
REF_524(uint256) (->_eventData_) := TMP_305(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_526(address) -> _eventData_.winnerAddr
REF_527(F3Ddatasets.Player) -> plyr_[_winPID]
REF_528(address) -> REF_527.addr
REF_526(address) (->_eventData_) := REF_528(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_529(bytes32) -> _eventData_.winnerName
REF_530(F3Ddatasets.Player) -> plyr_[_winPID]
REF_531(bytes32) -> REF_530.name
REF_529(bytes32) (->_eventData_) := REF_531(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_532(uint256) -> _eventData_.amountWon
REF_532(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_533(uint256) -> _eventData_.genAmount
REF_533(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_534(uint256) -> _eventData_.P3DAmount
REF_534(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_535(uint256) -> _eventData_.newPot
REF_535(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_306(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_307(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_536(F3Ddatasets.Round) -> round_[_rID]
REF_537(uint256) -> REF_536.strt
REF_537(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_538(F3Ddatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.end
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_308', 'rndGap_'] 
REF_539(uint256) (->round_) := TMP_309(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_542(F3Ddatasets.Round) -> round_[_rID]
REF_543(uint256) -> REF_542.pot
REF_543(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2941.sol-NewChance-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_671(uint256) -> _eventData_.compressedData
REF_672(uint256) -> _eventData_.compressedData
TMP_401(uint256) = now * 1000000000000000000
TMP_402(uint256) = REF_672 + TMP_401
TMP_403(uint256) = _team * 100000000000000000000000000000
TMP_404(uint256) = TMP_402 + TMP_403
REF_671(uint256) (->_eventData_) := TMP_404(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_673(uint256) -> _eventData_.compressedIDs
REF_674(uint256) -> _eventData_.compressedIDs
TMP_405(uint256) = REF_674 + _pID
TMP_406(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_407(uint256) = TMP_405 + TMP_406
REF_673(uint256) (->_eventData_) := TMP_407(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_676(uint256) -> _eventData_.compressedData
REF_677(uint256) -> _eventData_.compressedIDs
REF_678(F3Ddatasets.Player) -> plyr_[_pID]
REF_679(bytes32) -> REF_678.name
REF_680(address) -> _eventData_.winnerAddr
REF_681(bytes32) -> _eventData_.winnerName
REF_682(uint256) -> _eventData_.amountWon
REF_683(uint256) -> _eventData_.newPot
REF_684(uint256) -> _eventData_.P3DAmount
REF_685(uint256) -> _eventData_.genAmount
REF_686(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_676,REF_677,REF_679,msg.sender,_eth,_keys,REF_680,REF_681,REF_682,REF_683,REF_684,REF_685,REF_686,airDropPot_)"];
}
// Function: 2941.sol-NewChance-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,1,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, NewChance.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,1,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NewChance.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, NewChance.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2941.sol-NewChance-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_109(F3Ddatasets.Round) -> round_[_rID]
REF_110(uint256) -> REF_109.strt
TMP_84(uint256) = REF_110 + rndGap_
TMP_85(bool) = _now > TMP_84
REF_111(F3Ddatasets.Round) -> round_[_rID]
REF_112(uint256) -> REF_111.end
TMP_86(bool) = _now <= REF_112
REF_113(F3Ddatasets.Round) -> round_[_rID]
REF_114(uint256) -> REF_113.end
TMP_87(bool) = _now > REF_114
REF_115(F3Ddatasets.Round) -> round_[_rID]
REF_116(uint256) -> REF_115.plyr
TMP_88(bool) = REF_116 == 0
TMP_89(bool) = TMP_87 && TMP_88
TMP_90(bool) = TMP_86 || TMP_89
TMP_91(bool) = TMP_85 && TMP_90
CONDITION TMP_91"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_117(F3Ddatasets.Round) -> round_[_rID]
REF_118(uint256) -> REF_117.keys
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_118', '1000000000000000000'] 
TMP_93(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_92', '1000000000000000000'] 
RETURN TMP_93"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2941.sol-NewChance-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_191(F3Ddatasets.Round) -> round_[_rID]
REF_192(uint256) -> REF_191.ico
REF_193(F3Ddatasets.Round) -> round_[_rID]
REF_194(uint256) -> REF_193.keys
REF_195(F3Ddatasets.Round) -> round_[_rID]
REF_196(uint256) -> REF_195.end
REF_197(F3Ddatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.strt
REF_199(F3Ddatasets.Round) -> round_[_rID]
REF_200(uint256) -> REF_199.pot
REF_201(F3Ddatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.team
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.plyr
TMP_124(uint256) = REF_204 * 10
TMP_125(uint256) = REF_202 + TMP_124
REF_205(F3Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.plyr
REF_207(F3Ddatasets.Player) -> plyr_[REF_206]
REF_208(address) -> REF_207.addr
REF_209(F3Ddatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.plyr
REF_211(F3Ddatasets.Player) -> plyr_[REF_210]
REF_212(bytes32) -> REF_211.name
REF_213(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_214(uint256) -> REF_213[0]
REF_215(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_216(uint256) -> REF_215[1]
REF_217(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_218(uint256) -> REF_217[2]
REF_219(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_220(uint256) -> REF_219[3]
TMP_126(uint256) = airDropPot_ * 1000
TMP_127(uint256) = airDropTracker_ + TMP_126
RETURN REF_192,_rID,REF_194,REF_196,REF_198,REF_200,TMP_125,REF_208,REF_212,REF_214,REF_216,REF_218,REF_220,TMP_127"];
}
// Function: 2941.sol-NewChance-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_128 = CONVERT 0 to address
TMP_129(bool) = _addr == TMP_128
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_130(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_221(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_221(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_222(F3Ddatasets.Player) -> plyr_[_pID]
REF_223(bytes32) -> REF_222.name
REF_224(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_225(F3Ddatasets.PlayerRounds) -> REF_224[_rID]
REF_226(uint256) -> REF_225.keys
REF_227(F3Ddatasets.Player) -> plyr_[_pID]
REF_228(uint256) -> REF_227.win
REF_229(F3Ddatasets.Player) -> plyr_[_pID]
REF_230(uint256) -> REF_229.gen
REF_232(F3Ddatasets.Player) -> plyr_[_pID]
REF_233(uint256) -> REF_232.lrnd
TMP_131(uint256) = INTERNAL_CALL, NewChance.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_233)
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_230', 'TMP_131'] 
REF_234(F3Ddatasets.Player) -> plyr_[_pID]
REF_235(uint256) -> REF_234.aff
REF_236(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_237(F3Ddatasets.PlayerRounds) -> REF_236[_rID]
REF_238(uint256) -> REF_237.eth
RETURN _pID,REF_223,REF_226,REF_228,TMP_132,REF_235,REF_238"];
}
// Function: 2941.sol-NewChance-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_100(bool) = now > REF_132
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(bool) -> REF_133.ended
TMP_101(bool) = REF_134 == False
TMP_102(bool) = TMP_100 && TMP_101
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.plyr
TMP_103(bool) = REF_136 != 0
TMP_104(bool) = TMP_102 && TMP_103
CONDITION TMP_104"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.plyr
TMP_105(bool) = REF_138 == _pID
CONDITION TMP_105"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_139(F3Ddatasets.Player) -> plyr_[_pID]
REF_140(uint256) -> REF_139.win
REF_142(F3Ddatasets.Round) -> round_[_rID]
REF_143(uint256) -> REF_142.pot
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_143', '48'] 
TMP_107(uint256) = TMP_106 / 100
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_140', 'TMP_107'] 
REF_145(F3Ddatasets.Player) -> plyr_[_pID]
REF_146(uint256) -> REF_145.gen
TMP_109(uint256) = INTERNAL_CALL, NewChance.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_149(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_150(F3Ddatasets.PlayerRounds) -> REF_149[_rID]
REF_151(uint256) -> REF_150.mask
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_109', 'REF_151'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', 'TMP_110'] 
REF_152(F3Ddatasets.Player) -> plyr_[_pID]
REF_153(uint256) -> REF_152.aff
RETURN TMP_108,TMP_111,REF_153"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_154(F3Ddatasets.Player) -> plyr_[_pID]
REF_155(uint256) -> REF_154.win
REF_156(F3Ddatasets.Player) -> plyr_[_pID]
REF_157(uint256) -> REF_156.gen
TMP_112(uint256) = INTERNAL_CALL, NewChance.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_160(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_161(F3Ddatasets.PlayerRounds) -> REF_160[_rID]
REF_162(uint256) -> REF_161.mask
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_112', 'REF_162'] 
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_157', 'TMP_113'] 
REF_163(F3Ddatasets.Player) -> plyr_[_pID]
REF_164(uint256) -> REF_163.aff
RETURN REF_155,TMP_114,REF_164"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_165(F3Ddatasets.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.win
REF_167(F3Ddatasets.Player) -> plyr_[_pID]
REF_168(uint256) -> REF_167.gen
REF_170(F3Ddatasets.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.lrnd
TMP_115(uint256) = INTERNAL_CALL, NewChance.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_171)
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_168', 'TMP_115'] 
REF_172(F3Ddatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.aff
RETURN REF_166,TMP_116,REF_173"];
}
// Function: 2941.sol-NewChance-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_174(F3Ddatasets.Round) -> round_[_rID]
REF_175(uint256) -> REF_174.mask
REF_177(F3Ddatasets.Round) -> round_[_rID]
REF_178(uint256) -> REF_177.pot
REF_180(F3Ddatasets.Round) -> round_[_rID]
REF_181(uint256) -> REF_180.team
REF_182(F3Ddatasets.PotSplit) -> potSplit_[REF_181]
REF_183(uint256) -> REF_182.gen
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_178', 'REF_183'] 
TMP_118(uint256) = TMP_117 / 100
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_118', '1000000000000000000'] 
REF_185(F3Ddatasets.Round) -> round_[_rID]
REF_186(uint256) -> REF_185.keys
TMP_120(uint256) = TMP_119 / REF_186
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_175', 'TMP_120'] 
REF_188(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_189(F3Ddatasets.PlayerRounds) -> REF_188[_rID]
REF_190(uint256) -> REF_189.keys
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_121', 'REF_190'] 
TMP_123(uint256) = TMP_122 / 1000000000000000000
RETURN TMP_123"];
}
// Function: 2941.sol-NewChance-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_121(F3Ddatasets.Round) -> round_[_rID]
REF_122(uint256) -> REF_121.end
TMP_94(bool) = _now < REF_122
CONDITION TMP_94"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_123(F3Ddatasets.Round) -> round_[_rID]
REF_124(uint256) -> REF_123.strt
TMP_95(uint256) = REF_124 + rndGap_
TMP_96(bool) = _now > TMP_95
CONDITION TMP_96"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_125(F3Ddatasets.Round) -> round_[_rID]
REF_126(uint256) -> REF_125.end
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_126', '_now'] 
RETURN TMP_97"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_128(F3Ddatasets.Round) -> round_[_rID]
REF_129(uint256) -> REF_128.strt
TMP_98(uint256) = REF_129 + rndGap_
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_98', '_now'] 
RETURN TMP_99"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2941.sol-NewChance-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_416(F3Ddatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.strt
TMP_233(uint256) = REF_417 + rndGap_
TMP_234(bool) = _now > TMP_233
REF_418(F3Ddatasets.Round) -> round_[_rID]
REF_419(uint256) -> REF_418.end
TMP_235(bool) = _now <= REF_419
REF_420(F3Ddatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.end
TMP_236(bool) = _now > REF_421
REF_422(F3Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.plyr
TMP_237(bool) = REF_423 == 0
TMP_238(bool) = TMP_236 && TMP_237
TMP_239(bool) = TMP_235 || TMP_238
TMP_240(bool) = TMP_234 && TMP_239
CONDITION TMP_240"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.keys
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_425', '_keys'] 
TMP_242(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_241', '_keys'] 
RETURN TMP_242"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_243(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_243"];
}
// Function: 2941.sol-NewChance-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_418(bool) = activated_ == True
TMP_419(None) = SOLIDITY_CALL require(bool,string)(TMP_418,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2941.sol-NewChance-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_420(bool) = _codeLength == 0
TMP_421(None) = SOLIDITY_CALL require(bool,string)(TMP_420,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2941.sol-NewChance-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_422(bool) = _eth >= 1000000000
TMP_423(None) = SOLIDITY_CALL require(bool,string)(TMP_422,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_424(bool) = _eth <= 100000000000000000000000
TMP_425(None) = SOLIDITY_CALL require(bool,string)(TMP_424,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2941.sol-NewChance-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_469(F3Ddatasets.Player) -> plyr_[_pID]
REF_470(uint256) -> REF_469.lrnd
TMP_269(bool) = REF_470 != 0
CONDITION TMP_269"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_471(F3Ddatasets.Player) -> plyr_[_pID]
REF_472(uint256) -> REF_471.lrnd
INTERNAL_CALL, NewChance.updateGenVault(uint256,uint256)(_pID,REF_472)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_473(F3Ddatasets.Player) -> plyr_[_pID]
REF_474(uint256) -> REF_473.lrnd
REF_474(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_475(uint256) -> _eventData_.compressedData
REF_476(uint256) -> _eventData_.compressedData
TMP_271(uint256) = REF_476 + 10
REF_475(uint256) (->_eventData_) := TMP_271(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2941.sol-NewChance-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_273(F3Ddatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.strt
TMP_151(uint256) = REF_274 + rndGap_
TMP_152(bool) = _now > TMP_151
REF_275(F3Ddatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.end
TMP_153(bool) = _now <= REF_276
REF_277(F3Ddatasets.Round) -> round_[_rID]
REF_278(uint256) -> REF_277.end
TMP_154(bool) = _now > REF_278
REF_279(F3Ddatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.plyr
TMP_155(bool) = REF_280 == 0
TMP_156(bool) = TMP_154 && TMP_155
TMP_157(bool) = TMP_153 || TMP_156
TMP_158(bool) = TMP_152 && TMP_157
CONDITION TMP_158"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_281(F3Ddatasets.Player) -> plyr_[_pID]
REF_282(uint256) -> REF_281.gen
TMP_159(uint256) = INTERNAL_CALL, NewChance.withdrawEarnings(uint256)(_pID)
TMP_160(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_159', '_eth'] 
REF_282(uint256) (->plyr_) := TMP_160(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, NewChance.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_284(F3Ddatasets.Round) -> round_[_rID]
REF_285(uint256) -> REF_284.end
TMP_162(bool) = _now > REF_285
REF_286(F3Ddatasets.Round) -> round_[_rID]
REF_287(bool) -> REF_286.ended
TMP_163(bool) = REF_287 == False
TMP_164(bool) = TMP_162 && TMP_163
CONDITION TMP_164"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_288(F3Ddatasets.Round) -> round_[_rID]
REF_289(bool) -> REF_288.ended
REF_289(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_165(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_165(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_290(uint256) -> _eventData_.compressedData
REF_291(uint256) -> _eventData_.compressedData
TMP_166(uint256) = _now * 1000000000000000000
TMP_167(uint256) = REF_291 + TMP_166
REF_290(uint256) (->_eventData_) := TMP_167(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_292(uint256) -> _eventData_.compressedIDs
REF_293(uint256) -> _eventData_.compressedIDs
TMP_168(uint256) = REF_293 + _pID
REF_292(uint256) (->_eventData_) := TMP_168(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_295(F3Ddatasets.Player) -> plyr_[_pID]
REF_296(bytes32) -> REF_295.name
REF_297(uint256) -> _eventData_.compressedData
REF_298(uint256) -> _eventData_.compressedIDs
REF_299(address) -> _eventData_.winnerAddr
REF_300(bytes32) -> _eventData_.winnerName
REF_301(uint256) -> _eventData_.amountWon
REF_302(uint256) -> _eventData_.newPot
REF_303(uint256) -> _eventData_.P3DAmount
REF_304(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_296,REF_297,REF_298,REF_299,REF_300,REF_301,REF_302,REF_303,REF_304)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2941.sol-NewChance-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_41(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_41(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = _affCode == TMP_43
TMP_45(bool) = _affCode == msg.sender
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
_affID(uint256) := REF_43(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_44(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_44(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
TMP_47(bool) = _affID != REF_46
CONDITION TMP_47"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
REF_48(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, NewChance.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, NewChance.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NewChance.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, NewChance.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2941.sol-NewChance-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_34(bool) = _affCode == 0
TMP_35(bool) = _affCode == _pID
TMP_36(bool) = TMP_34 || TMP_35
CONDITION TMP_36"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(uint256) -> REF_35.laff
_affCode(uint256) := REF_36(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
TMP_37(bool) = _affCode != REF_38
CONDITION TMP_37"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_39(F3Ddatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
REF_40(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_38(uint256) = INTERNAL_CALL, NewChance.verifyTeam(uint256)(_team)
_team(uint256) := TMP_38(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, NewChance.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NewChance.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, NewChance.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 2941.sol-NewChance-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_244 = CONVERT PlayerBook to address
TMP_245(bool) = msg.sender == TMP_244
TMP_246(None) = SOLIDITY_CALL require(bool,string)(TMP_245,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_429(uint256) -> pIDxAddr_[_addr]
TMP_247(bool) = REF_429 != _pID
CONDITION TMP_247"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_430(uint256) -> pIDxAddr_[_addr]
REF_430(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_431(uint256) -> pIDxName_[_name]
TMP_248(bool) = REF_431 != _pID
CONDITION TMP_248"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_432(uint256) -> pIDxName_[_name]
REF_432(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_433(F3Ddatasets.Player) -> plyr_[_pID]
REF_434(address) -> REF_433.addr
TMP_249(bool) = REF_434 != _addr
CONDITION TMP_249"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_435(F3Ddatasets.Player) -> plyr_[_pID]
REF_436(address) -> REF_435.addr
REF_436(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_437(F3Ddatasets.Player) -> plyr_[_pID]
REF_438(bytes32) -> REF_437.name
TMP_250(bool) = REF_438 != _name
CONDITION TMP_250"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_439(F3Ddatasets.Player) -> plyr_[_pID]
REF_440(bytes32) -> REF_439.name
REF_440(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_441(F3Ddatasets.Player) -> plyr_[_pID]
REF_442(uint256) -> REF_441.laff
TMP_251(bool) = REF_442 != _laff
CONDITION TMP_251"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_443(F3Ddatasets.Player) -> plyr_[_pID]
REF_444(uint256) -> REF_443.laff
REF_444(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_445(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_446(bool) -> REF_445[_name]
TMP_252(bool) = REF_446 == False
CONDITION TMP_252"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_447(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_448(bool) -> REF_447[_name]
REF_448(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2941.sol-NewChance-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_253 = CONVERT PlayerBook to address
TMP_254(bool) = msg.sender == TMP_253
TMP_255(None) = SOLIDITY_CALL require(bool,string)(TMP_254,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_449(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_450(bool) -> REF_449[_name]
TMP_256(bool) = REF_450 == False
CONDITION TMP_256"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_451(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_452(bool) -> REF_451[_name]
REF_452(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2941.sol-NewChance-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_72(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_72(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_85(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_85(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_87(F3Ddatasets.Player) -> plyr_[_affID]
REF_88(address) -> REF_87.addr
REF_89(F3Ddatasets.Player) -> plyr_[_affID]
REF_90(bytes32) -> REF_89.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_88,REF_90,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
9->1;
}
// Function: 2941.sol-NewChance-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_76(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_76(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_94(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_94(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_affID]
REF_97(address) -> REF_96.addr
REF_98(F3Ddatasets.Player) -> plyr_[_affID]
REF_99(bytes32) -> REF_98.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_97,REF_99,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
9->1;
}
// Function: 2941.sol-NewChance-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_80(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_80(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_103(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_103(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_105(F3Ddatasets.Player) -> plyr_[_affID]
REF_106(address) -> REF_105.addr
REF_107(F3Ddatasets.Player) -> plyr_[_affID]
REF_108(bytes32) -> REF_107.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_106,REF_108,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
9->1;
}
// Function: 2941.sol-NewChance-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x2A8Cc43F5124Af19386A34DCb8BF0b2EFc3594Ba)

IRs:
TMP_417 = CONVERT 242916812256085230050402677622884469783164982458 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_417(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = New Chance

IRs:
name(string) := New Chance(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = NEWCH

IRs:
symbol(string) := NEWCH(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 10

IRs:
rndInc_(uint256) := 10(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 1800

IRs:
rndMax_(uint256) := 1800(uint256)"];
}
// Function: 2941.sol-NewChance-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 1800

IRs:
rndExtra_(uint256) := 1800(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 1800

IRs:
rndGap_(uint256) := 1800(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2941.sol-NewChance-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_310(uint256) = INTERNAL_CALL, NewChance.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_310(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_311(bool) = _earnings > 0
CONDITION TMP_311"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_544(F3Ddatasets.Player) -> plyr_[_pID]
REF_545(uint256) -> REF_544.gen
REF_547(F3Ddatasets.Player) -> plyr_[_pID]
REF_548(uint256) -> REF_547.gen
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_548'] 
REF_545(uint256) (->plyr_) := TMP_312(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_549(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_550(F3Ddatasets.PlayerRounds) -> REF_549[_rIDlast]
REF_551(uint256) -> REF_550.mask
REF_553(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_554(F3Ddatasets.PlayerRounds) -> REF_553[_rIDlast]
REF_555(uint256) -> REF_554.mask
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_555'] 
REF_551(uint256) (->plyrRnds_) := TMP_313(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2941.sol-NewChance-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_632(F3Ddatasets.Round) -> round_[_rID]
REF_633(uint256) -> REF_632.keys
TMP_386(uint256) = TMP_385 / REF_633
_ppt(uint256) := TMP_386(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_634(F3Ddatasets.Round) -> round_[_rID]
REF_635(uint256) -> REF_634.mask
REF_637(F3Ddatasets.Round) -> round_[_rID]
REF_638(uint256) -> REF_637.mask
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_638'] 
REF_635(uint256) (->round_) := TMP_387(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_389(uint256) = TMP_388 / 1000000000000000000
_pearn(uint256) := TMP_389(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_640(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_641(F3Ddatasets.PlayerRounds) -> REF_640[_rID]
REF_642(uint256) -> REF_641.mask
REF_643(F3Ddatasets.Round) -> round_[_rID]
REF_644(uint256) -> REF_643.mask
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_644', '_keys'] 
TMP_391(uint256) = TMP_390 / 1000000000000000000
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_391', '_pearn'] 
REF_648(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_649(F3Ddatasets.PlayerRounds) -> REF_648[_rID]
REF_650(uint256) -> REF_649.mask
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_392', 'REF_650'] 
REF_642(uint256) (->plyrRnds_) := TMP_393(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_653(F3Ddatasets.Round) -> round_[_rID]
REF_654(uint256) -> REF_653.keys
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_654'] 
TMP_395(uint256) = TMP_394 / 1000000000000000000
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_395'] 
RETURN TMP_396"];
}
// Function: 2941.sol-NewChance-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_556(F3Ddatasets.Round) -> round_[_rID]
REF_557(uint256) -> REF_556.end
TMP_314(bool) = _now > REF_557
REF_558(F3Ddatasets.Round) -> round_[_rID]
REF_559(uint256) -> REF_558.plyr
TMP_315(bool) = REF_559 == 0
TMP_316(bool) = TMP_314 && TMP_315
CONDITION TMP_316"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_317(uint256) = _keys / 1000000000000000000
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_317', 'rndInc_'] 
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_318', '_now'] 
_newTime(uint256) := TMP_319(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_320(uint256) = _keys / 1000000000000000000
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_320', 'rndInc_'] 
REF_564(F3Ddatasets.Round) -> round_[_rID]
REF_565(uint256) -> REF_564.end
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_321', 'REF_565'] 
_newTime(uint256) := TMP_322(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_324(bool) = _newTime < TMP_323
CONDITION TMP_324"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_567(F3Ddatasets.Round) -> round_[_rID]
REF_568(uint256) -> REF_567.end
REF_568(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_569(F3Ddatasets.Round) -> round_[_rID]
REF_570(uint256) -> REF_569.end
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_570(uint256) (->round_) := TMP_325(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 2941.sol-NewChance-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_266(bool) = _team < 0
TMP_267(bool) = _team > 3
TMP_268(bool) = TMP_266 || TMP_267
CONDITION TMP_268"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2941.sol-NewChance-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_49(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_49(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_50(F3Ddatasets.Round) -> round_[_rID]
REF_51(uint256) -> REF_50.end
TMP_53(bool) = _now > REF_51
REF_52(F3Ddatasets.Round) -> round_[_rID]
REF_53(bool) -> REF_52.ended
TMP_54(bool) = REF_53 == False
TMP_55(bool) = TMP_53 && TMP_54
REF_54(F3Ddatasets.Round) -> round_[_rID]
REF_55(uint256) -> REF_54.plyr
TMP_56(bool) = REF_55 != 0
TMP_57(bool) = TMP_55 && TMP_56
CONDITION TMP_57"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_56(F3Ddatasets.Round) -> round_[_rID]
REF_57(bool) -> REF_56.ended
REF_57(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_58(F3Ddatasets.EventReturns) = INTERNAL_CALL, NewChance.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_58(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_59(uint256) = INTERNAL_CALL, NewChance.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_59(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_60(bool) = _eth > 0
CONDITION TMP_60"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(address) -> REF_58.addr
Transfer dest:REF_59 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_61(uint256) -> _eventData_.compressedData
REF_62(uint256) -> _eventData_.compressedData
TMP_62(uint256) = _now * 1000000000000000000
TMP_63(uint256) = REF_62 + TMP_62
REF_61(uint256) (->_eventData_) := TMP_63(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_63(uint256) -> _eventData_.compressedIDs
REF_64(uint256) -> _eventData_.compressedIDs
TMP_64(uint256) = REF_64 + _pID
REF_63(uint256) (->_eventData_) := TMP_64(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(bytes32) -> REF_66.name
REF_68(uint256) -> _eventData_.compressedData
REF_69(uint256) -> _eventData_.compressedIDs
REF_70(address) -> _eventData_.winnerAddr
REF_71(bytes32) -> _eventData_.winnerName
REF_72(uint256) -> _eventData_.amountWon
REF_73(uint256) -> _eventData_.newPot
REF_74(uint256) -> _eventData_.P3DAmount
REF_75(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_67,_eth,REF_68,REF_69,REF_70,REF_71,REF_72,REF_73,REF_74,REF_75)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_66(uint256) = INTERNAL_CALL, NewChance.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_66(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_67(bool) = _eth > 0
CONDITION TMP_67"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(address) -> REF_76.addr
Transfer dest:REF_77 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_80(F3Ddatasets.Player) -> plyr_[_pID]
REF_81(bytes32) -> REF_80.name
Emit onWithdraw(_pID,msg.sender,REF_81,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, NewChance.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, NewChance.isHuman()()"];
23->1;
}
// Function: 2941.sol-NewChance-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_655(F3Ddatasets.Player) -> plyr_[_pID]
REF_656(uint256) -> REF_655.lrnd
INTERNAL_CALL, NewChance.updateGenVault(uint256,uint256)(_pID,REF_656)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_657(F3Ddatasets.Player) -> plyr_[_pID]
REF_658(uint256) -> REF_657.win
REF_660(F3Ddatasets.Player) -> plyr_[_pID]
REF_661(uint256) -> REF_660.gen
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_658', 'REF_661'] 
REF_663(F3Ddatasets.Player) -> plyr_[_pID]
REF_664(uint256) -> REF_663.aff
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_398', 'REF_664'] 
_earnings(uint256) := TMP_399(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_400(bool) = _earnings > 0
CONDITION TMP_400"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_665(F3Ddatasets.Player) -> plyr_[_pID]
REF_666(uint256) -> REF_665.win
REF_666(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_667(F3Ddatasets.Player) -> plyr_[_pID]
REF_668(uint256) -> REF_667.gen
REF_668(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_669(F3Ddatasets.Player) -> plyr_[_pID]
REF_670(uint256) -> REF_669.aff
REF_670(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2941.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2941.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2941.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2941.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2941.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2941.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2941.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2941.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2941.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_501(uint256) = a + b
c(uint256) := TMP_501(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_502(bool) = c >= a
TMP_503(None) = SOLIDITY_CALL require(bool,string)(TMP_502,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2941.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_493(bool) = a == 0
CONDITION TMP_493"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_494(uint256) = a * b
c(uint256) := TMP_494(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_495(uint256) = c / a
TMP_496(bool) = TMP_495 == b
TMP_497(None) = SOLIDITY_CALL require(bool,string)(TMP_496,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2941.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_511(bool) = x == 0
CONDITION TMP_511"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_512(bool) = y == 0
CONDITION TMP_512"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_513(bool) = i < y
CONDITION TMP_513"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_514(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_514(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_515(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2941.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_510(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_510"];
}
// Function: 2941.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_504(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_505(uint256) = TMP_504 / 2
z(uint256) := TMP_505(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_506(bool) = z < y
CONDITION TMP_506"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_507(uint256) = x / z
TMP_508(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_507,z)
TMP_509(uint256) = TMP_508 / 2
z(uint256) := TMP_509(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2941.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_498(bool) = b <= a
TMP_499(None) = SOLIDITY_CALL require(bool,string)(TMP_498,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_500(uint256) = a - b
RETURN TMP_500"];
}
}
