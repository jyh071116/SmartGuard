digraph G {
// Function: 2947.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_544 = CONVERT _input to bytes
_temp(bytes) := TMP_544(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_763 -> LENGTH _temp
_length(uint256) := REF_763(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_545(bool) = _length <= 32
TMP_546(bool) = _length > 0
TMP_547(bool) = TMP_545 && TMP_546
TMP_548(None) = SOLIDITY_CALL require(bool,string)(TMP_547,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_764(None) -> _temp[0]
TMP_549(bool) = REF_764 != 32
TMP_550(uint256) = _length - 1
REF_765(None) -> _temp[TMP_550]
TMP_551(bool) = REF_765 != 32
TMP_552(bool) = TMP_549 && TMP_551
TMP_553(None) = SOLIDITY_CALL require(bool,string)(TMP_552,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_766(None) -> _temp[0]
TMP_554(bool) = REF_766 == 48
CONDITION TMP_554"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_767(None) -> _temp[1]
TMP_555(bool) = REF_767 != 120
TMP_556(None) = SOLIDITY_CALL require(bool,string)(TMP_555,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_768(None) -> _temp[1]
TMP_557(bool) = REF_768 != 88
TMP_558(None) = SOLIDITY_CALL require(bool,string)(TMP_557,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_559(bool) = i < _length
CONDITION TMP_559"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_769(None) -> _temp[i]
TMP_560(bool) = REF_769 > 64
REF_770(None) -> _temp[i]
TMP_561(bool) = REF_770 < 91
TMP_562(bool) = TMP_560 && TMP_561
CONDITION TMP_562"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_771(bytes1) -> _temp[i]
REF_772(None) -> _temp[i]
TMP_563 = CONVERT REF_772 to uint256
TMP_564(uint256) = TMP_563 + 32
TMP_565 = CONVERT TMP_564 to bytes1
REF_771(bytes1) (->_temp) := TMP_565(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_566(bool) = _hasNonNumber == False
CONDITION TMP_566"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_773(None) -> _temp[i]
TMP_567(bool) = REF_773 == 32
REF_774(None) -> _temp[i]
TMP_568(bool) = REF_774 > 96
REF_775(None) -> _temp[i]
TMP_569(bool) = REF_775 < 123
TMP_570(bool) = TMP_568 && TMP_569
TMP_571(bool) = TMP_567 || TMP_570
REF_776(None) -> _temp[i]
TMP_572(bool) = REF_776 > 47
REF_777(None) -> _temp[i]
TMP_573(bool) = REF_777 < 58
TMP_574(bool) = TMP_572 && TMP_573
TMP_575(bool) = TMP_571 || TMP_574
TMP_576(None) = SOLIDITY_CALL require(bool,string)(TMP_575,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_778(None) -> _temp[i]
TMP_577(bool) = REF_778 == 32
CONDITION TMP_577"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_578(uint256) = i + 1
REF_779(None) -> _temp[TMP_578]
TMP_579(bool) = REF_779 != 32
TMP_580(None) = SOLIDITY_CALL require(bool,string)(TMP_579,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_581(bool) = _hasNonNumber == False
REF_780(None) -> _temp[i]
TMP_582(bool) = REF_780 < 48
REF_781(None) -> _temp[i]
TMP_583(bool) = REF_781 > 57
TMP_584(bool) = TMP_582 || TMP_583
TMP_585(bool) = TMP_581 && TMP_584
CONDITION TMP_585"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_586(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_587(bool) = _hasNonNumber == True
TMP_588(None) = SOLIDITY_CALL require(bool,string)(TMP_587,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2947.sol-PCKExtSettingInterface-getFastExtra()
digraph{
}
// Function: 2947.sol-PCKExtSettingInterface-getFastGap()
digraph{
}
// Function: 2947.sol-PCKExtSettingInterface-getLongExtra()
digraph{
}
// Function: 2947.sol-PCKExtSettingInterface-getLongGap()
digraph{
}
// Function: 2947.sol-PCKKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_536(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_537(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_536'] 
TMP_538(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_539(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_538'] 
TMP_540(uint256) = TMP_539 / 2
TMP_541(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_537', 'TMP_540'] 
TMP_542(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_543(uint256) = TMP_541 / TMP_542
RETURN TMP_543"];
}
// Function: 2947.sol-PCKKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_526(uint256) = INTERNAL_CALL, PCKKeysCalcLong.eth(uint256)(_curKeys)
TMP_527(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_528(uint256) = INTERNAL_CALL, PCKKeysCalcLong.eth(uint256)(TMP_527)
TMP_529(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_526', 'TMP_528'] 
RETURN TMP_529"];
}
// Function: 2947.sol-PCKKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_530(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_531(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_530', '312500000000000000000000000'] 
TMP_532(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_531', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_533(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_532'] 
TMP_534(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_533', '74999921875000000000000000000000'] 
TMP_535(uint256) = TMP_534 / 156250000
RETURN TMP_535"];
}
// Function: 2947.sol-PCKKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_522(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_523(uint256) = INTERNAL_CALL, PCKKeysCalcLong.keys(uint256)(TMP_522)
TMP_524(uint256) = INTERNAL_CALL, PCKKeysCalcLong.keys(uint256)(_curEth)
TMP_525(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_523', 'TMP_524'] 
RETURN TMP_525"];
}
// Function: 2947.sol-PlayCoinGodInterface-deposit()
digraph{
}
// Function: 2947.sol-PlayCoinKey-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only team just can activate)

IRs:
TMP_499(bool) = msg.sender == admin
TMP_500(None) = SOLIDITY_CALL require(bool,string)(TMP_499,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,PCK already activated)

IRs:
TMP_501(bool) = activated_ == False
TMP_502(None) = SOLIDITY_CALL require(bool,string)(TMP_501,PCK already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_741(PCKdatasets.Round) -> round_[1]
REF_742(uint256) -> REF_741.strt
TMP_503(uint256) = now + rndExtra_
TMP_504(uint256) = TMP_503 - rndGap_
REF_742(uint256) (->round_) := TMP_504(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_743(PCKdatasets.Round) -> round_[1]
REF_744(uint256) -> REF_743.end
TMP_505(uint256) = now + rndInit_
TMP_506(uint256) = TMP_505 + rndExtra_
REF_744(uint256) (->round_) := TMP_506(uint256)"];
}
// Function: 2947.sol-PlayCoinKey-addBlacklist(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_in

IRs:
CONDITION _in"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
blacklist_[_black] = 1

IRs:
REF_17(uint256) -> blacklist_[_black]
REF_17(uint256) (->blacklist_) := 1(uint256)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete blacklist_[_black]

IRs:
REF_18(uint256) -> blacklist_[_black]
blacklist_ = delete REF_18 "];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
5->1;
}
// Function: 2947.sol-PlayCoinKey-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_413(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_414(bytes32) = SOLIDITY_CALL keccak256()(TMP_413)
TMP_415 = CONVERT TMP_414 to uint256
TMP_416(uint256) = TMP_415 / now
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_412', 'TMP_416'] 
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_417', 'block.gaslimit'] 
TMP_419(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_420(bytes32) = SOLIDITY_CALL keccak256()(TMP_419)
TMP_421 = CONVERT TMP_420 to uint256
TMP_422(uint256) = TMP_421 / now
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_418', 'TMP_422'] 
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_423', 'block.number'] 
TMP_425(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_424)
TMP_426(bytes32) = SOLIDITY_CALL keccak256()(TMP_425)
TMP_427 = CONVERT TMP_426 to uint256
seed(uint256) := TMP_427(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_428(uint256) = seed / 1000
TMP_429(uint256) = TMP_428 * 1000
TMP_430(uint256) = seed - TMP_429
TMP_431(bool) = TMP_430 < airDropTracker_
CONDITION TMP_431"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2947.sol-PlayCoinKey-buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_275(PCKdatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.strt
TMP_189(uint256) = REF_276 + rndGap_
TMP_190(bool) = _now > TMP_189
REF_277(PCKdatasets.Round) -> round_[_rID]
REF_278(uint256) -> REF_277.end
TMP_191(bool) = _now <= REF_278
REF_279(PCKdatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.end
TMP_192(bool) = _now > REF_280
REF_281(PCKdatasets.Round) -> round_[_rID]
REF_282(uint256) -> REF_281.plyr
TMP_193(bool) = REF_282 == 0
TMP_194(bool) = TMP_192 && TMP_193
TMP_195(bool) = TMP_191 || TMP_194
TMP_196(bool) = TMP_190 && TMP_195
CONDITION TMP_196"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.core(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->16;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_283(PCKdatasets.Round) -> round_[_rID]
REF_284(uint256) -> REF_283.end
TMP_198(bool) = _now > REF_284
REF_285(PCKdatasets.Round) -> round_[_rID]
REF_286(bool) -> REF_285.ended
TMP_199(bool) = REF_286 == False
TMP_200(bool) = TMP_198 && TMP_199
CONDITION TMP_200"];
5->6[label="True"];
5->14[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_287(PCKdatasets.Round) -> round_[_rID]
REF_288(bool) -> REF_287.ended
REF_288(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_201(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.endRound(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_201(PCKdatasets.EventReturns)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! closed_

IRs:
TMP_202 = UnaryType.BANG closed_ 
CONDITION TMP_202"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nextRound()

IRs:
INTERNAL_CALL, PlayCoinKey.nextRound()()"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_289(uint256) -> _eventData_.compressedData
REF_290(uint256) -> _eventData_.compressedData
TMP_204(uint256) = _now * 1000000000000000000
TMP_205(uint256) = REF_290 + TMP_204
REF_289(uint256) (->_eventData_) := TMP_205(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_291(uint256) -> _eventData_.compressedIDs
REF_292(uint256) -> _eventData_.compressedIDs
TMP_206(uint256) = REF_292 + _pID
REF_291(uint256) (->_eventData_) := TMP_206(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
PCKevents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount)

IRs:
REF_294(PCKdatasets.Player) -> plyr_[_pID]
REF_295(bytes32) -> REF_294.name
REF_296(uint256) -> _eventData_.compressedData
REF_297(uint256) -> _eventData_.compressedIDs
REF_298(address) -> _eventData_.winnerAddr
REF_299(bytes32) -> _eventData_.winnerName
REF_300(uint256) -> _eventData_.amountWon
REF_301(uint256) -> _eventData_.newPot
REF_302(uint256) -> _eventData_.PCPAmount
REF_303(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_295,msg.value,REF_296,REF_297,REF_298,REF_299,REF_300,REF_301,REF_302,REF_303)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_304(PCKdatasets.Player) -> plyr_[_pID]
REF_305(uint256) -> REF_304.gen
REF_306(PCKdatasets.Player) -> plyr_[_pID]
REF_307(uint256) -> REF_306.gen
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_307', 'msg.value'] 
REF_305(uint256) (->plyr_) := TMP_208(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
notBlacklist()

IRs:
MODIFIER_CALL, PlayCoinKey.notBlacklist()()"];
17->1;
}
// Function: 2947.sol-PlayCoinKey-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_55(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_55(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_42(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_42(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_56 = CONVERT 0 to address
TMP_57(bool) = _affCode == TMP_56
TMP_58(bool) = _affCode == msg.sender
TMP_59(bool) = TMP_57 || TMP_58
CONDITION TMP_59"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_43(PCKdatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
_affID(uint256) := REF_44(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_45(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_45(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_46(PCKdatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
TMP_60(bool) = _affID != REF_47
CONDITION TMP_60"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_48(PCKdatasets.Player) -> plyr_[_pID]
REF_49(uint256) -> REF_48.laff
REF_49(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_61(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_61(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
16->1;
}
// Function: 2947.sol-PlayCoinKey-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_44(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_44(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_45(bool) = _affCode == 0
TMP_46(bool) = _affCode == _pID
TMP_47(bool) = TMP_45 || TMP_46
CONDITION TMP_47"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_36(PCKdatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
_affCode(uint256) := REF_37(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_38(PCKdatasets.Player) -> plyr_[_pID]
REF_39(uint256) -> REF_38.laff
TMP_48(bool) = _affCode != REF_39
CONDITION TMP_48"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_40(PCKdatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
REF_41(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_49(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_49(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 2947.sol-PlayCoinKey-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_67(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_67(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_50(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_50(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_68(bool) = _affCode == 
REF_51(PCKdatasets.Player) -> plyr_[_pID]
REF_52(bytes32) -> REF_51.name
TMP_69(bool) = _affCode == REF_52
TMP_70(bool) = TMP_68 || TMP_69
CONDITION TMP_70"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_53(PCKdatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
_affID(uint256) := REF_54(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_55(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_55(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_56(PCKdatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
TMP_71(bool) = _affID != REF_57
CONDITION TMP_71"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_58(PCKdatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
REF_59(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_72(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_72(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
16->1;
}
// Function: 2947.sol-PlayCoinKey-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_440(PCKdatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.strt
TMP_284(uint256) = REF_441 + rndGap_
TMP_285(bool) = _now > TMP_284
REF_442(PCKdatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.end
TMP_286(bool) = _now <= REF_443
REF_444(PCKdatasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.end
TMP_287(bool) = _now > REF_445
REF_446(PCKdatasets.Round) -> round_[_rID]
REF_447(uint256) -> REF_446.plyr
TMP_288(bool) = REF_447 == 0
TMP_289(bool) = TMP_287 && TMP_288
TMP_290(bool) = TMP_286 || TMP_289
TMP_291(bool) = TMP_285 && TMP_290
CONDITION TMP_291"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_448(PCKdatasets.Round) -> round_[_rID]
REF_449(uint256) -> REF_448.eth
TMP_292(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_449', '_eth'] 
RETURN TMP_292"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_293(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_293"];
}
// Function: 2947.sol-PlayCoinKey-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_430(PCKdatasets.Round) -> round_[_rIDlast]
REF_431(uint256) -> REF_430.mask
REF_433(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_434(PCKdatasets.PlayerRounds) -> REF_433[_rIDlast]
REF_435(uint256) -> REF_434.keys
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_431', 'REF_435'] 
TMP_282(uint256) = TMP_281 / 1000000000000000000
REF_437(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_438(PCKdatasets.PlayerRounds) -> REF_437[_rIDlast]
REF_439(uint256) -> REF_438.mask
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_282', 'REF_439'] 
RETURN TMP_283"];
}
// Function: 2947.sol-PlayCoinKey-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
blacklist_[0xB04B473418b6f09e5A1f809Ae2d01f14211e03fF] = 1

IRs:
REF_0(uint256) -> blacklist_[1006461134254721138118298119892369577870807139327]
REF_0(uint256) (->blacklist_) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[0] = PCKdatasets.TeamFee(30,6)

IRs:
REF_1(PCKdatasets.TeamFee) -> fees_[0]
TMP_0(PCKdatasets.TeamFee) = new TeamFee(30,6)
REF_1(PCKdatasets.TeamFee) (->fees_) := TMP_0(PCKdatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[1] = PCKdatasets.TeamFee(43,0)

IRs:
REF_3(PCKdatasets.TeamFee) -> fees_[1]
TMP_1(PCKdatasets.TeamFee) = new TeamFee(43,0)
REF_3(PCKdatasets.TeamFee) (->fees_) := TMP_1(PCKdatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[2] = PCKdatasets.TeamFee(56,10)

IRs:
REF_5(PCKdatasets.TeamFee) -> fees_[2]
TMP_2(PCKdatasets.TeamFee) = new TeamFee(56,10)
REF_5(PCKdatasets.TeamFee) (->fees_) := TMP_2(PCKdatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
fees_[3] = PCKdatasets.TeamFee(43,8)

IRs:
REF_7(PCKdatasets.TeamFee) -> fees_[3]
TMP_3(PCKdatasets.TeamFee) = new TeamFee(43,8)
REF_7(PCKdatasets.TeamFee) (->fees_) := TMP_3(PCKdatasets.TeamFee)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[0] = PCKdatasets.PotSplit(15,10)

IRs:
REF_9(PCKdatasets.PotSplit) -> potSplit_[0]
TMP_4(PCKdatasets.PotSplit) = new PotSplit(15,10)
REF_9(PCKdatasets.PotSplit) (->potSplit_) := TMP_4(PCKdatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[1] = PCKdatasets.PotSplit(25,0)

IRs:
REF_11(PCKdatasets.PotSplit) -> potSplit_[1]
TMP_5(PCKdatasets.PotSplit) = new PotSplit(25,0)
REF_11(PCKdatasets.PotSplit) (->potSplit_) := TMP_5(PCKdatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[2] = PCKdatasets.PotSplit(20,20)

IRs:
REF_13(PCKdatasets.PotSplit) -> potSplit_[2]
TMP_6(PCKdatasets.PotSplit) = new PotSplit(20,20)
REF_13(PCKdatasets.PotSplit) (->potSplit_) := TMP_6(PCKdatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
potSplit_[3] = PCKdatasets.PotSplit(30,10)

IRs:
REF_15(PCKdatasets.PotSplit) -> potSplit_[3]
TMP_7(PCKdatasets.PotSplit) = new PotSplit(30,10)
REF_15(PCKdatasets.PotSplit) (->potSplit_) := TMP_7(PCKdatasets.PotSplit)"];
}
// Function: 2947.sol-PlayCoinKey-core(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_341(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_342(PCKdatasets.PlayerRounds) -> REF_341[_rID]
REF_343(uint256) -> REF_342.keys
TMP_231(bool) = REF_343 == 0
CONDITION TMP_231"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_232(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.managePlayer(uint256,PCKdatasets.EventReturns)(_pID,_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_232(PCKdatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_344(PCKdatasets.Round) -> round_[_rID]
REF_345(uint256) -> REF_344.eth
TMP_233(bool) = REF_345 < 100000000000000000000
REF_346(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_347(PCKdatasets.PlayerRounds) -> REF_346[_rID]
REF_348(uint256) -> REF_347.eth
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_348', '_eth'] 
TMP_235(bool) = TMP_234 > 1000000000000000000
TMP_236(bool) = TMP_233 && TMP_235
CONDITION TMP_236"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_351(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_352(PCKdatasets.PlayerRounds) -> REF_351[_rID]
REF_353(uint256) -> REF_352.eth
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_353'] 
_availableLimit(uint256) := TMP_237(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_238(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_355(PCKdatasets.Player) -> plyr_[_pID]
REF_356(uint256) -> REF_355.gen
REF_357(PCKdatasets.Player) -> plyr_[_pID]
REF_358(uint256) -> REF_357.gen
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_358', '_refund'] 
REF_356(uint256) (->plyr_) := TMP_239(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_240(bool) = _eth > 1000000000
CONDITION TMP_240"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_360(PCKdatasets.Round) -> round_[_rID]
REF_361(uint256) -> REF_360.eth
TMP_241(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_361', '_eth'] 
_keys(uint256) := TMP_241(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_242(bool) = _keys >= 1000000000000000000
CONDITION TMP_242"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID,_eth)

IRs:
INTERNAL_CALL, PlayCoinKey.updateTimer(uint256,uint256,uint256)(_keys,_rID,_eth)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_363(PCKdatasets.Round) -> round_[_rID]
REF_364(uint256) -> REF_363.plyr
TMP_244(bool) = REF_364 != _pID
CONDITION TMP_244"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_365(PCKdatasets.Round) -> round_[_rID]
REF_366(uint256) -> REF_365.plyr
REF_366(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_367(PCKdatasets.Round) -> round_[_rID]
REF_368(uint256) -> REF_367.team
TMP_245(bool) = REF_368 != _team
CONDITION TMP_245"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_369(PCKdatasets.Round) -> round_[_rID]
REF_370(uint256) -> REF_369.team
REF_370(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_371(uint256) -> _eventData_.compressedData
REF_372(uint256) -> _eventData_.compressedData
TMP_246(uint256) = REF_372 + 100
REF_371(uint256) (->_eventData_) := TMP_246(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_247(bool) = _eth >= 100000000000000000
CONDITION TMP_247"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_248(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_249(bool) = INTERNAL_CALL, PlayCoinKey.airdrop()()
TMP_250(bool) = TMP_249 == True
CONDITION TMP_250"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_251(bool) = _eth >= 10000000000000000000
CONDITION TMP_251"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_253(uint256) = TMP_252 / 100
_prize(uint256) := TMP_253(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_374(PCKdatasets.Player) -> plyr_[_pID]
REF_375(uint256) -> REF_374.win
REF_376(PCKdatasets.Player) -> plyr_[_pID]
REF_377(uint256) -> REF_376.win
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_377', '_prize'] 
REF_375(uint256) (->plyr_) := TMP_254(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_255(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_380(uint256) -> _eventData_.compressedData
REF_380(-> _eventData_) = REF_380 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_256(bool) = _eth >= 1000000000000000000
TMP_257(bool) = _eth < 10000000000000000000
TMP_258(bool) = TMP_256 && TMP_257
CONDITION TMP_258"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_260(uint256) = TMP_259 / 100
_prize(uint256) := TMP_260(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_382(PCKdatasets.Player) -> plyr_[_pID]
REF_383(uint256) -> REF_382.win
REF_384(PCKdatasets.Player) -> plyr_[_pID]
REF_385(uint256) -> REF_384.win
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_385', '_prize'] 
REF_383(uint256) (->plyr_) := TMP_261(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_262(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_388(uint256) -> _eventData_.compressedData
REF_388(-> _eventData_) = REF_388 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_263(bool) = _eth >= 100000000000000000
TMP_264(bool) = _eth < 1000000000000000000
TMP_265(bool) = TMP_263 && TMP_264
CONDITION TMP_265"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_267(uint256) = TMP_266 / 100
_prize(uint256) := TMP_267(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_390(PCKdatasets.Player) -> plyr_[_pID]
REF_391(uint256) -> REF_390.win
REF_392(PCKdatasets.Player) -> plyr_[_pID]
REF_393(uint256) -> REF_392.win
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_393', '_prize'] 
REF_391(uint256) (->plyr_) := TMP_268(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_269(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_396(uint256) -> _eventData_.compressedData
REF_396(-> _eventData_) = REF_396 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_397(uint256) -> _eventData_.compressedData
REF_397(-> _eventData_) = REF_397 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_398(uint256) -> _eventData_.compressedData
TMP_270(uint256) = _prize * 1000000000000000000000000000000000
REF_398(-> _eventData_) = REF_398 + TMP_270"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_399(uint256) -> _eventData_.compressedData
REF_400(uint256) -> _eventData_.compressedData
TMP_271(uint256) = airDropTracker_ * 1000
TMP_272(uint256) = REF_400 + TMP_271
REF_399(uint256) (->_eventData_) := TMP_272(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_401(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_402(PCKdatasets.PlayerRounds) -> REF_401[_rID]
REF_403(uint256) -> REF_402.keys
REF_405(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_406(PCKdatasets.PlayerRounds) -> REF_405[_rID]
REF_407(uint256) -> REF_406.keys
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_407'] 
REF_403(uint256) (->plyrRnds_) := TMP_273(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_408(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_409(PCKdatasets.PlayerRounds) -> REF_408[_rID]
REF_410(uint256) -> REF_409.eth
REF_412(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_413(PCKdatasets.PlayerRounds) -> REF_412[_rID]
REF_414(uint256) -> REF_413.eth
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_414'] 
REF_410(uint256) (->plyrRnds_) := TMP_274(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_415(PCKdatasets.Round) -> round_[_rID]
REF_416(uint256) -> REF_415.keys
REF_418(PCKdatasets.Round) -> round_[_rID]
REF_419(uint256) -> REF_418.keys
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_419'] 
REF_416(uint256) (->round_) := TMP_275(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_420(PCKdatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.eth
REF_423(PCKdatasets.Round) -> round_[_rID]
REF_424(uint256) -> REF_423.eth
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_424'] 
REF_421(uint256) (->round_) := TMP_276(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_425(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_426(uint256) -> REF_425[_team]
REF_428(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_429(uint256) -> REF_428[_team]
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_429'] 
REF_426(uint256) (->rndTmEth_) := TMP_277(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_278(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.distributeExternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_278(PCKdatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_279(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.distributeInternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_279(PCKdatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.endTx(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 2947.sol-PlayCoinKey-determinePID(PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_489(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_489(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_318(bool) = _pID == 0
CONDITION TMP_318"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_319(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_320(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_320(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_321(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_321(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_493(uint256) -> pIDxAddr_[msg.sender]
REF_493(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_494(PCKdatasets.Player) -> plyr_[_pID]
REF_495(address) -> REF_494.addr
REF_495(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_322(bool) = _name != 
CONDITION TMP_322"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_496(uint256) -> pIDxName_[_name]
REF_496(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_497(PCKdatasets.Player) -> plyr_[_pID]
REF_498(bytes32) -> REF_497.name
REF_498(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_499(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_500(bool) -> REF_499[_name]
REF_500(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_323(bool) = _laff != 0
TMP_324(bool) = _laff != _pID
TMP_325(bool) = TMP_323 && TMP_324
CONDITION TMP_325"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_501(PCKdatasets.Player) -> plyr_[_pID]
REF_502(uint256) -> REF_501.laff
REF_502(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_503(uint256) -> _eventData_.compressedData
REF_504(uint256) -> _eventData_.compressedData
TMP_326(uint256) = REF_504 + 1
REF_503(uint256) (->_eventData_) := TMP_326(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2947.sol-PlayCoinKey-distributeExternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_432(uint256) = _eth / 50
_com(uint256) := TMP_432(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_433 = CONVERT admin to address
TMP_435(bool) = LOW_LEVEL_CALL, dest:TMP_433, function:call, arguments:[] value:_com 
TMP_436 = UnaryType.BANG TMP_435 
CONDITION TMP_436"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_long = _eth / 100

IRs:
TMP_437(uint256) = _eth / 100
_long(uint256) := TMP_437(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSwap(_long)

IRs:
INTERNAL_CALL, PlayCoinKey.potSwap(uint256)(_long)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_439(uint256) = _eth / 10
_aff(uint256) := TMP_439(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_440(bool) = _affID != _pID
REF_631(PCKdatasets.Player) -> plyr_[_affID]
REF_632(bytes32) -> REF_631.name
TMP_441(bool) = REF_632 != 
TMP_442(bool) = TMP_440 && TMP_441
CONDITION TMP_442"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_633(PCKdatasets.Player) -> plyr_[_affID]
REF_634(uint256) -> REF_633.aff
REF_636(PCKdatasets.Player) -> plyr_[_affID]
REF_637(uint256) -> REF_636.aff
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_637'] 
REF_634(uint256) (->plyr_) := TMP_443(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
PCKevents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_639(PCKdatasets.Player) -> plyr_[_affID]
REF_640(address) -> REF_639.addr
REF_641(PCKdatasets.Player) -> plyr_[_affID]
REF_642(bytes32) -> REF_641.name
Emit onAffiliatePayout(_affID,REF_640,REF_642,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_645(PCKdatasets.TeamFee) -> fees_[_team]
REF_646(uint256) -> REF_645.p3d
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_646'] 
TMP_446(uint256) = TMP_445 / 100
TMP_447(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_446'] 
_p3d(uint256) := TMP_447(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_448(bool) = _p3d > 0
CONDITION TMP_448"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_p3d.sub(_p3d / 2))

IRs:
TMP_449(uint256) = _p3d / 2
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_449'] 
Transfer dest:admin value:TMP_450"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_p3d / 2)

IRs:
REF_649(PCKdatasets.Round) -> round_[_rID]
REF_650(uint256) -> REF_649.pot
REF_651(PCKdatasets.Round) -> round_[_rID]
REF_652(uint256) -> REF_651.pot
TMP_452(uint256) = _p3d / 2
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_652', 'TMP_452'] 
REF_650(uint256) (->round_) := TMP_453(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.PCPAmount = _p3d.add(_eventData_.PCPAmount)

IRs:
REF_654(uint256) -> _eventData_.PCPAmount
REF_656(uint256) -> _eventData_.PCPAmount
TMP_454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_656'] 
REF_654(uint256) (->_eventData_) := TMP_454(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2947.sol-PlayCoinKey-distributeInternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_664(PCKdatasets.TeamFee) -> fees_[_team]
REF_665(uint256) -> REF_664.gen
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_665'] 
TMP_459(uint256) = TMP_458 / 100
_gen(uint256) := TMP_459(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_460(uint256) = _eth / 100
_air(uint256) := TMP_460(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_461(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_463(uint256) = TMP_462 / 100
REF_671(PCKdatasets.TeamFee) -> fees_[_team]
REF_672(uint256) -> REF_671.p3d
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_672'] 
TMP_465(uint256) = TMP_464 / 100
TMP_466(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_463', 'TMP_465'] 
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_466'] 
_eth(uint256) := TMP_467(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_468(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_468(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_469(uint256) = INTERNAL_CALL, PlayCoinKey.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_469(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_470(bool) = _dust > 0
CONDITION TMP_470"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_471(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_675(PCKdatasets.Round) -> round_[_rID]
REF_676(uint256) -> REF_675.pot
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_679(PCKdatasets.Round) -> round_[_rID]
REF_680(uint256) -> REF_679.pot
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_472', 'REF_680'] 
REF_676(uint256) (->round_) := TMP_473(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_681(uint256) -> _eventData_.genAmount
REF_683(uint256) -> _eventData_.genAmount
TMP_474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_683'] 
REF_681(uint256) (->_eventData_) := TMP_474(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_684(uint256) -> _eventData_.potAmount
REF_684(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2947.sol-PlayCoinKey-endRound(PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_519(PCKdatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.plyr
_winPID(uint256) := REF_520(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_521(PCKdatasets.Round) -> round_[_rID]
REF_522(uint256) -> REF_521.team
_winTID(uint256) := REF_522(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_523(PCKdatasets.Round) -> round_[_rID]
REF_524(uint256) -> REF_523.pot
_pot(uint256) := REF_524(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_337(uint256) = TMP_336 / 100
_win(uint256) := TMP_337(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_338(uint256) = _pot / 50
_com(uint256) := TMP_338(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_527(PCKdatasets.PotSplit) -> potSplit_[_winTID]
REF_528(uint256) -> REF_527.gen
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_528'] 
TMP_340(uint256) = TMP_339 / 100
_gen(uint256) := TMP_340(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_530(PCKdatasets.PotSplit) -> potSplit_[_winTID]
REF_531(uint256) -> REF_530.p3d
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_531'] 
TMP_342(uint256) = TMP_341 / 100
_p3d(uint256) := TMP_342(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_343', '_com'] 
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_344', '_gen'] 
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_345', '_p3d'] 
_res(uint256) := TMP_346(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_537(PCKdatasets.Round) -> round_[_rID]
REF_538(uint256) -> REF_537.keys
TMP_348(uint256) = TMP_347 / REF_538
_ppt(uint256) := TMP_348(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_541(PCKdatasets.Round) -> round_[_rID]
REF_542(uint256) -> REF_541.keys
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_542'] 
TMP_350(uint256) = TMP_349 / 1000000000000000000
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_350'] 
_dust(uint256) := TMP_351(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_352(bool) = _dust > 0
CONDITION TMP_352"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_353(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_354(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_545(PCKdatasets.Player) -> plyr_[_winPID]
REF_546(uint256) -> REF_545.win
REF_548(PCKdatasets.Player) -> plyr_[_winPID]
REF_549(uint256) -> REF_548.win
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_549'] 
REF_546(uint256) (->plyr_) := TMP_355(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_com.add(_p3d.sub(_p3d / 2)))

IRs:
TMP_356(uint256) = _p3d / 2
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_356'] 
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', 'TMP_357'] 
Transfer dest:admin value:TMP_358"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_553(PCKdatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.mask
REF_556(PCKdatasets.Round) -> round_[_rID]
REF_557(uint256) -> REF_556.mask
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_557'] 
REF_554(uint256) (->round_) := TMP_360(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_res = _res.add(_p3d / 2)

IRs:
TMP_361(uint256) = _p3d / 2
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', 'TMP_361'] 
_res(uint256) := TMP_362(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_559(uint256) -> _eventData_.compressedData
REF_560(uint256) -> _eventData_.compressedData
REF_561(PCKdatasets.Round) -> round_[_rID]
REF_562(uint256) -> REF_561.end
TMP_363(uint256) = REF_562 * 1000000
TMP_364(uint256) = REF_560 + TMP_363
REF_559(uint256) (->_eventData_) := TMP_364(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_563(uint256) -> _eventData_.compressedIDs
REF_564(uint256) -> _eventData_.compressedIDs
TMP_365(uint256) = _winPID * 100000000000000000000000000
TMP_366(uint256) = REF_564 + TMP_365
TMP_367(uint256) = _winTID * 100000000000000000
TMP_368(uint256) = TMP_366 + TMP_367
REF_563(uint256) (->_eventData_) := TMP_368(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_565(address) -> _eventData_.winnerAddr
REF_566(PCKdatasets.Player) -> plyr_[_winPID]
REF_567(address) -> REF_566.addr
REF_565(address) (->_eventData_) := REF_567(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_568(bytes32) -> _eventData_.winnerName
REF_569(PCKdatasets.Player) -> plyr_[_winPID]
REF_570(bytes32) -> REF_569.name
REF_568(bytes32) (->_eventData_) := REF_570(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_571(uint256) -> _eventData_.amountWon
REF_571(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_572(uint256) -> _eventData_.genAmount
REF_572(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.PCPAmount = _p3d

IRs:
REF_573(uint256) -> _eventData_.PCPAmount
REF_573(uint256) (->_eventData_) := _p3d(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_574(uint256) -> _eventData_.newPot
REF_574(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
round_[_rID].pot = 0

IRs:
REF_575(PCKdatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.pot
REF_576(uint256) (->round_) := 0(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_369(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].ended = false

IRs:
REF_577(PCKdatasets.Round) -> round_[_rID]
REF_578(bool) -> REF_577.ended
REF_578(bool) (->round_) := False(bool)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_579(PCKdatasets.Round) -> round_[_rID]
REF_580(uint256) -> REF_579.strt
REF_580(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_581(PCKdatasets.Round) -> round_[_rID]
REF_582(uint256) -> REF_581.end
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_370', 'rndGap_'] 
REF_582(uint256) (->round_) := TMP_371(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = (round_[_rID].pot).add(_res)

IRs:
REF_585(PCKdatasets.Round) -> round_[_rID]
REF_586(uint256) -> REF_585.pot
REF_587(PCKdatasets.Round) -> round_[_rID]
REF_588(uint256) -> REF_587.pot
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_588', '_res'] 
REF_586(uint256) (->round_) := TMP_372(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2947.sol-PlayCoinKey-endTx(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_725(uint256) -> _eventData_.compressedData
REF_726(uint256) -> _eventData_.compressedData
TMP_491(uint256) = now * 1000000000000000000
TMP_492(uint256) = REF_726 + TMP_491
TMP_493(uint256) = _team * 100000000000000000000000000000
TMP_494(uint256) = TMP_492 + TMP_493
REF_725(uint256) (->_eventData_) := TMP_494(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_727(uint256) -> _eventData_.compressedIDs
REF_728(uint256) -> _eventData_.compressedIDs
TMP_495(uint256) = REF_728 + _pID
TMP_496(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_497(uint256) = TMP_495 + TMP_496
REF_727(uint256) (->_eventData_) := TMP_497(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
PCKevents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_730(uint256) -> _eventData_.compressedData
REF_731(uint256) -> _eventData_.compressedIDs
REF_732(PCKdatasets.Player) -> plyr_[_pID]
REF_733(bytes32) -> REF_732.name
REF_734(address) -> _eventData_.winnerAddr
REF_735(bytes32) -> _eventData_.winnerName
REF_736(uint256) -> _eventData_.amountWon
REF_737(uint256) -> _eventData_.newPot
REF_738(uint256) -> _eventData_.PCPAmount
REF_739(uint256) -> _eventData_.genAmount
REF_740(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_730,REF_731,REF_733,msg.sender,_eth,_keys,REF_734,REF_735,REF_736,REF_737,REF_738,REF_739,REF_740,airDropPot_)"];
}
// Function: 2947.sol-PlayCoinKey-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_38(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_38(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_32(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_32(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_33(PCKdatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,REF_34,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
7->1;
}
// Function: 2947.sol-PlayCoinKey-getBlacklist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
blacklist_[_black] > 0

IRs:
REF_19(uint256) -> blacklist_[_black]
TMP_9(bool) = REF_19 > 0
RETURN TMP_9"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
2->1;
}
// Function: 2947.sol-PlayCoinKey-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_145(PCKdatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.strt
TMP_140(uint256) = REF_146 + rndGap_
TMP_141(bool) = _now > TMP_140
REF_147(PCKdatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.end
TMP_142(bool) = _now <= REF_148
REF_149(PCKdatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.end
TMP_143(bool) = _now > REF_150
REF_151(PCKdatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.plyr
TMP_144(bool) = REF_152 == 0
TMP_145(bool) = TMP_143 && TMP_144
TMP_146(bool) = TMP_142 || TMP_145
TMP_147(bool) = TMP_141 && TMP_146
CONDITION TMP_147"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_153(PCKdatasets.Round) -> round_[_rID]
REF_154(uint256) -> REF_153.keys
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_154', '1000000000000000000'] 
TMP_149(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_148', '1000000000000000000'] 
RETURN TMP_149"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2947.sol-PlayCoinKey-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_227(PCKdatasets.Round) -> round_[_rID]
REF_228(uint256) -> REF_227.ico
REF_229(PCKdatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.keys
REF_231(PCKdatasets.Round) -> round_[_rID]
REF_232(uint256) -> REF_231.end
REF_233(PCKdatasets.Round) -> round_[_rID]
REF_234(uint256) -> REF_233.strt
REF_235(PCKdatasets.Round) -> round_[_rID]
REF_236(uint256) -> REF_235.pot
REF_237(PCKdatasets.Round) -> round_[_rID]
REF_238(uint256) -> REF_237.team
REF_239(PCKdatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.plyr
TMP_180(uint256) = REF_240 * 10
TMP_181(uint256) = REF_238 + TMP_180
REF_241(PCKdatasets.Round) -> round_[_rID]
REF_242(uint256) -> REF_241.plyr
REF_243(PCKdatasets.Player) -> plyr_[REF_242]
REF_244(address) -> REF_243.addr
REF_245(PCKdatasets.Round) -> round_[_rID]
REF_246(uint256) -> REF_245.plyr
REF_247(PCKdatasets.Player) -> plyr_[REF_246]
REF_248(bytes32) -> REF_247.name
REF_249(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_250(uint256) -> REF_249[0]
REF_251(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_252(uint256) -> REF_251[1]
REF_253(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_254(uint256) -> REF_253[2]
REF_255(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_256(uint256) -> REF_255[3]
TMP_182(uint256) = airDropPot_ * 1000
TMP_183(uint256) = airDropTracker_ + TMP_182
RETURN REF_228,_rID,REF_230,REF_232,REF_234,REF_236,TMP_181,REF_244,REF_248,REF_250,REF_252,REF_254,REF_256,TMP_183"];
}
// Function: 2947.sol-PlayCoinKey-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_184 = CONVERT 0 to address
TMP_185(bool) = _addr == TMP_184
CONDITION TMP_185"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_186(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_257(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_257(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_258(PCKdatasets.Player) -> plyr_[_pID]
REF_259(bytes32) -> REF_258.name
REF_260(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_261(PCKdatasets.PlayerRounds) -> REF_260[_rID]
REF_262(uint256) -> REF_261.keys
REF_263(PCKdatasets.Player) -> plyr_[_pID]
REF_264(uint256) -> REF_263.win
REF_265(PCKdatasets.Player) -> plyr_[_pID]
REF_266(uint256) -> REF_265.gen
REF_268(PCKdatasets.Player) -> plyr_[_pID]
REF_269(uint256) -> REF_268.lrnd
TMP_187(uint256) = INTERNAL_CALL, PlayCoinKey.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_269)
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_266', 'TMP_187'] 
REF_270(PCKdatasets.Player) -> plyr_[_pID]
REF_271(uint256) -> REF_270.aff
REF_272(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_273(PCKdatasets.PlayerRounds) -> REF_272[_rID]
REF_274(uint256) -> REF_273.eth
RETURN _pID,REF_259,REF_262,REF_264,TMP_188,REF_271,REF_274"];
}
// Function: 2947.sol-PlayCoinKey-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_167(PCKdatasets.Round) -> round_[_rID]
REF_168(uint256) -> REF_167.end
TMP_156(bool) = now > REF_168
REF_169(PCKdatasets.Round) -> round_[_rID]
REF_170(bool) -> REF_169.ended
TMP_157(bool) = REF_170 == False
TMP_158(bool) = TMP_156 && TMP_157
REF_171(PCKdatasets.Round) -> round_[_rID]
REF_172(uint256) -> REF_171.plyr
TMP_159(bool) = REF_172 != 0
TMP_160(bool) = TMP_158 && TMP_159
CONDITION TMP_160"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_173(PCKdatasets.Round) -> round_[_rID]
REF_174(uint256) -> REF_173.plyr
TMP_161(bool) = REF_174 == _pID
CONDITION TMP_161"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_175(PCKdatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.win
REF_178(PCKdatasets.Round) -> round_[_rID]
REF_179(uint256) -> REF_178.pot
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_179', '48'] 
TMP_163(uint256) = TMP_162 / 100
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_176', 'TMP_163'] 
REF_181(PCKdatasets.Player) -> plyr_[_pID]
REF_182(uint256) -> REF_181.gen
TMP_165(uint256) = INTERNAL_CALL, PlayCoinKey.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_185(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_186(PCKdatasets.PlayerRounds) -> REF_185[_rID]
REF_187(uint256) -> REF_186.mask
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_165', 'REF_187'] 
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_182', 'TMP_166'] 
REF_188(PCKdatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.aff
RETURN TMP_164,TMP_167,REF_189"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_190(PCKdatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.win
REF_192(PCKdatasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.gen
TMP_168(uint256) = INTERNAL_CALL, PlayCoinKey.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_196(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_197(PCKdatasets.PlayerRounds) -> REF_196[_rID]
REF_198(uint256) -> REF_197.mask
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_168', 'REF_198'] 
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_193', 'TMP_169'] 
REF_199(PCKdatasets.Player) -> plyr_[_pID]
REF_200(uint256) -> REF_199.aff
RETURN REF_191,TMP_170,REF_200"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_201(PCKdatasets.Player) -> plyr_[_pID]
REF_202(uint256) -> REF_201.win
REF_203(PCKdatasets.Player) -> plyr_[_pID]
REF_204(uint256) -> REF_203.gen
REF_206(PCKdatasets.Player) -> plyr_[_pID]
REF_207(uint256) -> REF_206.lrnd
TMP_171(uint256) = INTERNAL_CALL, PlayCoinKey.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_207)
TMP_172(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_204', 'TMP_171'] 
REF_208(PCKdatasets.Player) -> plyr_[_pID]
REF_209(uint256) -> REF_208.aff
RETURN REF_202,TMP_172,REF_209"];
}
// Function: 2947.sol-PlayCoinKey-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_210(PCKdatasets.Round) -> round_[_rID]
REF_211(uint256) -> REF_210.mask
REF_213(PCKdatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.pot
REF_216(PCKdatasets.Round) -> round_[_rID]
REF_217(uint256) -> REF_216.team
REF_218(PCKdatasets.PotSplit) -> potSplit_[REF_217]
REF_219(uint256) -> REF_218.gen
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_214', 'REF_219'] 
TMP_174(uint256) = TMP_173 / 100
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_174', '1000000000000000000'] 
REF_221(PCKdatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.keys
TMP_176(uint256) = TMP_175 / REF_222
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_211', 'TMP_176'] 
REF_224(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_225(PCKdatasets.PlayerRounds) -> REF_224[_rID]
REF_226(uint256) -> REF_225.keys
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_177', 'REF_226'] 
TMP_179(uint256) = TMP_178 / 1000000000000000000
RETURN TMP_179"];
}
// Function: 2947.sol-PlayCoinKey-getReduce(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_keys = calcKeysReceived(_rID,_eth)

IRs:
TMP_402(uint256) = INTERNAL_CALL, PlayCoinKey.calcKeysReceived(uint256,uint256)(_rID,_eth)
_keys(uint256) := TMP_402(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_eth >= rndReduceThreshold_

IRs:
TMP_403(bool) = _eth >= rndReduceThreshold_
CONDITION TMP_403"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(((((_keys) / (1000000000000000000))).mul(rndInc_ * reduceMul_) / reduceDiv_),(((_keys) / (1000000000000000000)).mul(rndInc_)))

IRs:
TMP_404(uint256) = _keys / 1000000000000000000
TMP_405(uint256) = rndInc_ * reduceMul_
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_404', 'TMP_405'] 
TMP_407(uint256) = TMP_406 / reduceDiv_
TMP_408(uint256) = _keys / 1000000000000000000
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_408', 'rndInc_'] 
RETURN TMP_407,TMP_409"];
4[label="Node Type: RETURN 4

EXPRESSION:
(0,(((_keys) / (1000000000000000000)).mul(rndInc_)))

IRs:
TMP_410(uint256) = _keys / 1000000000000000000
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_410', 'rndInc_'] 
RETURN 0,TMP_411"];
}
// Function: 2947.sol-PlayCoinKey-getRoundStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(rID_,round_[rID_].ended)

IRs:
REF_22(PCKdatasets.Round) -> round_[rID_]
REF_23(bool) -> REF_22.ended
RETURN rID_,REF_23"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
2->1;
}
// Function: 2947.sol-PlayCoinKey-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_157(PCKdatasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.end
TMP_150(bool) = _now < REF_158
CONDITION TMP_150"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_159(PCKdatasets.Round) -> round_[_rID]
REF_160(uint256) -> REF_159.strt
TMP_151(uint256) = REF_160 + rndGap_
TMP_152(bool) = _now > TMP_151
CONDITION TMP_152"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_161(PCKdatasets.Round) -> round_[_rID]
REF_162(uint256) -> REF_161.end
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_162', '_now'] 
RETURN TMP_153"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_164(PCKdatasets.Round) -> round_[_rID]
REF_165(uint256) -> REF_164.strt
TMP_154(uint256) = REF_165 + rndGap_
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_154', '_now'] 
RETURN TMP_155"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2947.sol-PlayCoinKey-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_452(PCKdatasets.Round) -> round_[_rID]
REF_453(uint256) -> REF_452.strt
TMP_294(uint256) = REF_453 + rndGap_
TMP_295(bool) = _now > TMP_294
REF_454(PCKdatasets.Round) -> round_[_rID]
REF_455(uint256) -> REF_454.end
TMP_296(bool) = _now <= REF_455
REF_456(PCKdatasets.Round) -> round_[_rID]
REF_457(uint256) -> REF_456.end
TMP_297(bool) = _now > REF_457
REF_458(PCKdatasets.Round) -> round_[_rID]
REF_459(uint256) -> REF_458.plyr
TMP_298(bool) = REF_459 == 0
TMP_299(bool) = TMP_297 && TMP_298
TMP_300(bool) = TMP_296 || TMP_299
TMP_301(bool) = TMP_295 && TMP_300
CONDITION TMP_301"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_460(PCKdatasets.Round) -> round_[_rID]
REF_461(uint256) -> REF_460.keys
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_461', '_keys'] 
TMP_303(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_302', '_keys'] 
RETURN TMP_303"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_304(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_304"];
}
// Function: 2947.sol-PlayCoinKey-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_508(bool) = activated_ == True
TMP_509(None) = SOLIDITY_CALL require(bool,string)(TMP_508,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2947.sol-PlayCoinKey-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == tx.origin,sorry humans only)

IRs:
TMP_512(bool) = msg.sender == tx.origin
TMP_513(None) = SOLIDITY_CALL require(bool,string)(TMP_512,sorry humans only)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2947.sol-PlayCoinKey-isRoundActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(round_[rID_].ended == false,the round is finished)

IRs:
REF_745(PCKdatasets.Round) -> round_[rID_]
REF_746(bool) -> REF_745.ended
TMP_510(bool) = REF_746 == False
TMP_511(None) = SOLIDITY_CALL require(bool,string)(TMP_510,the round is finished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2947.sol-PlayCoinKey-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_514(bool) = _eth >= 1000000000
TMP_515(None) = SOLIDITY_CALL require(bool,string)(TMP_514,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_516(bool) = _eth <= 100000000000000000000000
TMP_517(None) = SOLIDITY_CALL require(bool,string)(TMP_516,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2947.sol-PlayCoinKey-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(round_[rID_].ended == true && closed_ == true,the round is active or not close)

IRs:
REF_20(PCKdatasets.Round) -> round_[rID_]
REF_21(bool) -> REF_20.ended
TMP_11(bool) = REF_21 == True
TMP_12(bool) = closed_ == True
TMP_13(bool) = TMP_11 && TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,the round is active or not close)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(admin)

IRs:
TMP_15(None) = SOLIDITY_CALL selfdestruct(address)(admin)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
3->1;
}
// Function: 2947.sol-PlayCoinKey-managePlayer(uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_505(PCKdatasets.Player) -> plyr_[_pID]
REF_506(uint256) -> REF_505.lrnd
TMP_330(bool) = REF_506 != 0
CONDITION TMP_330"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_507(PCKdatasets.Player) -> plyr_[_pID]
REF_508(uint256) -> REF_507.lrnd
INTERNAL_CALL, PlayCoinKey.updateGenVault(uint256,uint256)(_pID,REF_508)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_509(PCKdatasets.Player) -> plyr_[_pID]
REF_510(uint256) -> REF_509.lrnd
REF_510(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_511(uint256) -> _eventData_.compressedData
REF_512(uint256) -> _eventData_.compressedData
TMP_332(uint256) = REF_512 + 10
REF_511(uint256) (->_eventData_) := TMP_332(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2947.sol-PlayCoinKey-nextRound()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rID_ ++

IRs:
TMP_333(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[rID_].strt = now

IRs:
REF_513(PCKdatasets.Round) -> round_[rID_]
REF_514(uint256) -> REF_513.strt
REF_514(uint256) (->round_) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[rID_].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_515(PCKdatasets.Round) -> round_[rID_]
REF_516(uint256) -> REF_515.end
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_334', 'rndGap_'] 
REF_516(uint256) (->round_) := TMP_335(uint256)"];
}
// Function: 2947.sol-PlayCoinKey-notBlacklist()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(blacklist_[msg.sender] == 0,bad man,shut!)

IRs:
REF_747(uint256) -> blacklist_[msg.sender]
TMP_520(bool) = REF_747 == 0
TMP_521(None) = SOLIDITY_CALL require(bool,string)(TMP_520,bad man,shut!)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2947.sol-PlayCoinKey-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,onlyAdmins failed - msg.sender is not an admin)

IRs:
TMP_518(bool) = msg.sender == admin
TMP_519(None) = SOLIDITY_CALL require(bool,string)(TMP_518,onlyAdmins failed - msg.sender is not an admin)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2947.sol-PlayCoinKey-potSwap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_455(uint256) = rID_ + 1
_rID(uint256) := TMP_455(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_pot)

IRs:
REF_657(PCKdatasets.Round) -> round_[_rID]
REF_658(uint256) -> REF_657.pot
REF_659(PCKdatasets.Round) -> round_[_rID]
REF_660(uint256) -> REF_659.pot
TMP_456(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_660', '_pot'] 
REF_658(uint256) (->round_) := TMP_456(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
PCKevents.onPotSwapDeposit(_rID,_pot)

IRs:
Emit onPotSwapDeposit(_rID,_pot)"];
}
// Function: 2947.sol-PlayCoinKey-reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > (round_[_rID].strt + rndGap_) && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_309(PCKdatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.strt
TMP_210(uint256) = REF_310 + rndGap_
TMP_211(bool) = _now > TMP_210
REF_311(PCKdatasets.Round) -> round_[_rID]
REF_312(uint256) -> REF_311.end
TMP_212(bool) = _now <= REF_312
REF_313(PCKdatasets.Round) -> round_[_rID]
REF_314(uint256) -> REF_313.end
TMP_213(bool) = _now > REF_314
REF_315(PCKdatasets.Round) -> round_[_rID]
REF_316(uint256) -> REF_315.plyr
TMP_214(bool) = REF_316 == 0
TMP_215(bool) = TMP_213 && TMP_214
TMP_216(bool) = TMP_212 || TMP_215
TMP_217(bool) = TMP_211 && TMP_216
CONDITION TMP_217"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_317(PCKdatasets.Player) -> plyr_[_pID]
REF_318(uint256) -> REF_317.gen
TMP_218(uint256) = INTERNAL_CALL, PlayCoinKey.withdrawEarnings(uint256)(_pID)
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_218', '_eth'] 
REF_318(uint256) (->plyr_) := TMP_219(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.core(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->16;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_320(PCKdatasets.Round) -> round_[_rID]
REF_321(uint256) -> REF_320.end
TMP_221(bool) = _now > REF_321
REF_322(PCKdatasets.Round) -> round_[_rID]
REF_323(bool) -> REF_322.ended
TMP_222(bool) = REF_323 == False
TMP_223(bool) = TMP_221 && TMP_222
CONDITION TMP_223"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_324(PCKdatasets.Round) -> round_[_rID]
REF_325(bool) -> REF_324.ended
REF_325(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_224(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.endRound(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_224(PCKdatasets.EventReturns)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! closed_

IRs:
TMP_225 = UnaryType.BANG closed_ 
CONDITION TMP_225"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
nextRound()

IRs:
INTERNAL_CALL, PlayCoinKey.nextRound()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_326(uint256) -> _eventData_.compressedData
REF_327(uint256) -> _eventData_.compressedData
TMP_227(uint256) = _now * 1000000000000000000
TMP_228(uint256) = REF_327 + TMP_227
REF_326(uint256) (->_eventData_) := TMP_228(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_328(uint256) -> _eventData_.compressedIDs
REF_329(uint256) -> _eventData_.compressedIDs
TMP_229(uint256) = REF_329 + _pID
REF_328(uint256) (->_eventData_) := TMP_229(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
PCKevents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount)

IRs:
REF_331(PCKdatasets.Player) -> plyr_[_pID]
REF_332(bytes32) -> REF_331.name
REF_333(uint256) -> _eventData_.compressedData
REF_334(uint256) -> _eventData_.compressedIDs
REF_335(address) -> _eventData_.winnerAddr
REF_336(bytes32) -> _eventData_.winnerName
REF_337(uint256) -> _eventData_.amountWon
REF_338(uint256) -> _eventData_.newPot
REF_339(uint256) -> _eventData_.PCPAmount
REF_340(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_332,REF_333,REF_334,REF_335,REF_336,REF_337,REF_338,REF_339,REF_340)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
}
// Function: 2947.sol-PlayCoinKey-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_67(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_67(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_88 = CONVERT 0 to address
TMP_89(bool) = _affCode == TMP_88
TMP_90(bool) = _affCode == msg.sender
TMP_91(bool) = TMP_89 || TMP_90
CONDITION TMP_91"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_68(PCKdatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
_affID(uint256) := REF_69(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_70(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_70(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_71(PCKdatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
TMP_92(bool) = _affID != REF_72
CONDITION TMP_92"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_73(PCKdatasets.Player) -> plyr_[_pID]
REF_74(uint256) -> REF_73.laff
REF_74(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_93(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_93(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(_eth)"];
16->1;
}
// Function: 2947.sol-PlayCoinKey-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_60(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_60(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_78(bool) = _affCode == 0
TMP_79(bool) = _affCode == _pID
TMP_80(bool) = TMP_78 || TMP_79
CONDITION TMP_80"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_61(PCKdatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
_affCode(uint256) := REF_62(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_63(PCKdatasets.Player) -> plyr_[_pID]
REF_64(uint256) -> REF_63.laff
TMP_81(bool) = _affCode != REF_64
CONDITION TMP_81"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_65(PCKdatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
REF_66(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_82(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_82(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 2947.sol-PlayCoinKey-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_75(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_75(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_99(bool) = _affCode == 
REF_76(PCKdatasets.Player) -> plyr_[_pID]
REF_77(bytes32) -> REF_76.name
TMP_100(bool) = _affCode == REF_77
TMP_101(bool) = TMP_99 || TMP_100
CONDITION TMP_101"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_78(PCKdatasets.Player) -> plyr_[_pID]
REF_79(uint256) -> REF_78.laff
_affID(uint256) := REF_79(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_80(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_80(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_81(PCKdatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
TMP_102(bool) = _affID != REF_82
CONDITION TMP_102"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_83(PCKdatasets.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
REF_84(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_103(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_103(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(_eth)"];
16->1;
}
// Function: 2947.sol-PlayCoinKey-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_305 = CONVERT PlayerBook to address
TMP_306(bool) = msg.sender == TMP_305
TMP_307(None) = SOLIDITY_CALL require(bool,string)(TMP_306,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_465(uint256) -> pIDxAddr_[_addr]
TMP_308(bool) = REF_465 != _pID
CONDITION TMP_308"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_466(uint256) -> pIDxAddr_[_addr]
REF_466(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_467(uint256) -> pIDxName_[_name]
TMP_309(bool) = REF_467 != _pID
CONDITION TMP_309"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_468(uint256) -> pIDxName_[_name]
REF_468(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_469(PCKdatasets.Player) -> plyr_[_pID]
REF_470(address) -> REF_469.addr
TMP_310(bool) = REF_470 != _addr
CONDITION TMP_310"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_471(PCKdatasets.Player) -> plyr_[_pID]
REF_472(address) -> REF_471.addr
REF_472(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_473(PCKdatasets.Player) -> plyr_[_pID]
REF_474(bytes32) -> REF_473.name
TMP_311(bool) = REF_474 != _name
CONDITION TMP_311"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_475(PCKdatasets.Player) -> plyr_[_pID]
REF_476(bytes32) -> REF_475.name
REF_476(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_477(PCKdatasets.Player) -> plyr_[_pID]
REF_478(uint256) -> REF_477.laff
TMP_312(bool) = REF_478 != _laff
CONDITION TMP_312"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_479(PCKdatasets.Player) -> plyr_[_pID]
REF_480(uint256) -> REF_479.laff
REF_480(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_481(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_482(bool) -> REF_481[_name]
TMP_313(bool) = REF_482 == False
CONDITION TMP_313"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_483(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_484(bool) -> REF_483[_name]
REF_484(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2947.sol-PlayCoinKey-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_314 = CONVERT PlayerBook to address
TMP_315(bool) = msg.sender == TMP_314
TMP_316(None) = SOLIDITY_CALL require(bool,string)(TMP_315,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_485(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_486(bool) -> REF_485[_name]
TMP_317(bool) = REF_486 == False
CONDITION TMP_317"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_487(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_488(bool) -> REF_487[_name]
REF_488(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2947.sol-PlayCoinKey-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_128(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_128(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_121(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_121(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PCKevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_123(PCKdatasets.Player) -> plyr_[_affID]
REF_124(address) -> REF_123.addr
REF_125(PCKdatasets.Player) -> plyr_[_affID]
REF_126(bytes32) -> REF_125.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_124,REF_126,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
9->1;
}
// Function: 2947.sol-PlayCoinKey-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_132(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_132(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_130(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_130(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PCKevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_132(PCKdatasets.Player) -> plyr_[_affID]
REF_133(address) -> REF_132.addr
REF_134(PCKdatasets.Player) -> plyr_[_affID]
REF_135(bytes32) -> REF_134.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_133,REF_135,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
9->1;
}
// Function: 2947.sol-PlayCoinKey-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_136(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_136(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_139(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_139(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PCKevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_141(PCKdatasets.Player) -> plyr_[_affID]
REF_142(address) -> REF_141.addr
REF_143(PCKdatasets.Player) -> plyr_[_affID]
REF_144(bytes32) -> REF_143.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_142,REF_144,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
9->1;
}
// Function: 2947.sol-PlayCoinKey-setEnforce(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
closed_ = _closed

IRs:
closed_(bool) := _closed(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! closed_ && round_[rID_].ended == true && activated_ == true

IRs:
TMP_25 = UnaryType.BANG closed_ 
REF_24(PCKdatasets.Round) -> round_[rID_]
REF_25(bool) -> REF_24.ended
TMP_26(bool) = REF_25 == True
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(bool) = activated_ == True
TMP_29(bool) = TMP_27 && TMP_28
CONDITION TMP_29"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nextRound()

IRs:
INTERNAL_CALL, PlayCoinKey.nextRound()()"];
3->7;
4[label="Node Type: IF 4

EXPRESSION:
closed_ && round_[rID_].ended == false && activated_ == true

IRs:
REF_26(PCKdatasets.Round) -> round_[rID_]
REF_27(bool) -> REF_26.ended
TMP_31(bool) = REF_27 == False
TMP_32(bool) = closed_ && TMP_31
TMP_33(bool) = activated_ == True
TMP_34(bool) = TMP_32 && TMP_33
CONDITION TMP_34"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[rID_].end = now - 1

IRs:
REF_28(PCKdatasets.Round) -> round_[rID_]
REF_29(uint256) -> REF_28.end
TMP_35(uint256) = now - 1
REF_29(uint256) (->round_) := TMP_35(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(closed_,rID_,now > round_[rID_].end)

IRs:
REF_30(PCKdatasets.Round) -> round_[rID_]
REF_31(uint256) -> REF_30.end
TMP_36(bool) = now > REF_31
RETURN closed_,rID_,TMP_36"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
9->1;
}
// Function: 2947.sol-PlayCoinKey-setThreshold(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_threshold > 0,threshold must greater 0)

IRs:
TMP_18(bool) = _threshold > 0
TMP_19(None) = SOLIDITY_CALL require(bool,string)(TMP_18,threshold must greater 0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_mul > 0,mul must greater 0)

IRs:
TMP_20(bool) = _mul > 0
TMP_21(None) = SOLIDITY_CALL require(bool,string)(TMP_20,mul must greater 0)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_div > 0,div must greater 0)

IRs:
TMP_22(bool) = _div > 0
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,div must greater 0)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rndReduceThreshold_ = _threshold

IRs:
rndReduceThreshold_(uint256) := _threshold(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
reduceMul_ = _mul

IRs:
reduceMul_(uint256) := _mul(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
reduceDiv_ = _div

IRs:
reduceDiv_(uint256) := _div(uint256)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
7->1;
}
// Function: 2947.sol-PlayCoinKey-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x14229878e85e57FF4109dc27bb2EfB5EA8067E6E)

IRs:
TMP_507 = CONVERT 114951322963443245461329155182706212027496824430 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_507(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = PlayCoin Game

IRs:
name(string) := PlayCoin Game(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = PCK

IRs:
symbol(string) := PCK(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 86400

IRs:
rndInit_(uint256) := 86400(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMin_ = 600

IRs:
rndMin_(uint256) := 600(uint256)"];
}
// Function: 2947.sol-PlayCoinKey-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 120

IRs:
rndExtra_(uint256) := 120(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 900

IRs:
rndGap_(uint256) := 900(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
reduceMul_ = 3

IRs:
reduceMul_(uint256) := 3(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
reduceDiv_ = 2

IRs:
reduceDiv_(uint256) := 2(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndReduceThreshold_ = 10e18

IRs:
rndReduceThreshold_(uint256) := 10000000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
closed_ = false

IRs:
closed_(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2947.sol-PlayCoinKey-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_373(uint256) = INTERNAL_CALL, PlayCoinKey.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_373(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_374(bool) = _earnings > 0
CONDITION TMP_374"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_590(PCKdatasets.Player) -> plyr_[_pID]
REF_591(uint256) -> REF_590.gen
REF_593(PCKdatasets.Player) -> plyr_[_pID]
REF_594(uint256) -> REF_593.gen
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_594'] 
REF_591(uint256) (->plyr_) := TMP_375(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_595(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_596(PCKdatasets.PlayerRounds) -> REF_595[_rIDlast]
REF_597(uint256) -> REF_596.mask
REF_599(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_600(PCKdatasets.PlayerRounds) -> REF_599[_rIDlast]
REF_601(uint256) -> REF_600.mask
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_601'] 
REF_597(uint256) (->plyrRnds_) := TMP_376(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2947.sol-PlayCoinKey-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_686(PCKdatasets.Round) -> round_[_rID]
REF_687(uint256) -> REF_686.keys
TMP_476(uint256) = TMP_475 / REF_687
_ppt(uint256) := TMP_476(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_688(PCKdatasets.Round) -> round_[_rID]
REF_689(uint256) -> REF_688.mask
REF_691(PCKdatasets.Round) -> round_[_rID]
REF_692(uint256) -> REF_691.mask
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_692'] 
REF_689(uint256) (->round_) := TMP_477(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_479(uint256) = TMP_478 / 1000000000000000000
_pearn(uint256) := TMP_479(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_694(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_695(PCKdatasets.PlayerRounds) -> REF_694[_rID]
REF_696(uint256) -> REF_695.mask
REF_697(PCKdatasets.Round) -> round_[_rID]
REF_698(uint256) -> REF_697.mask
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_698', '_keys'] 
TMP_481(uint256) = TMP_480 / 1000000000000000000
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_481', '_pearn'] 
REF_702(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_703(PCKdatasets.PlayerRounds) -> REF_702[_rID]
REF_704(uint256) -> REF_703.mask
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_482', 'REF_704'] 
REF_696(uint256) (->plyrRnds_) := TMP_483(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_707(PCKdatasets.Round) -> round_[_rID]
REF_708(uint256) -> REF_707.keys
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_708'] 
TMP_485(uint256) = TMP_484 / 1000000000000000000
TMP_486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_485'] 
RETURN TMP_486"];
}
// Function: 2947.sol-PlayCoinKey-updateTimer(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_602(PCKdatasets.Round) -> round_[_rID]
REF_603(uint256) -> REF_602.end
TMP_377(bool) = _now > REF_603
REF_604(PCKdatasets.Round) -> round_[_rID]
REF_605(uint256) -> REF_604.plyr
TMP_378(bool) = REF_605 == 0
TMP_379(bool) = TMP_377 && TMP_378
CONDITION TMP_379"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_380(uint256) = _keys / 1000000000000000000
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_380', 'rndInc_'] 
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_381', '_now'] 
_newTime(uint256) := TMP_382(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_383(uint256) = _keys / 1000000000000000000
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_383', 'rndInc_'] 
REF_610(PCKdatasets.Round) -> round_[_rID]
REF_611(uint256) -> REF_610.end
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_384', 'REF_611'] 
_newTime(uint256) := TMP_385(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_387(bool) = _newTime < TMP_386
CONDITION TMP_387"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_newEndTime = _newTime

IRs:
_newEndTime(uint256) := _newTime(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_newEndTime = rndMax_.add(_now)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
_newEndTime(uint256) := TMP_388(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_eth >= rndReduceThreshold_

IRs:
TMP_389(bool) = _eth >= rndReduceThreshold_
CONDITION TMP_389"];
12->13[label="True"];
12->20[label="False"];
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
reduce = ((((_keys) / (1000000000000000000))).mul(rndInc_ * reduceMul_) / reduceDiv_)

IRs:
TMP_390(uint256) = _keys / 1000000000000000000
TMP_391(uint256) = rndInc_ * reduceMul_
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_390', 'TMP_391'] 
TMP_393(uint256) = TMP_392 / reduceDiv_
reduce(uint256) := TMP_393(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_newEndTime > reduce && _now + rndMin_ + reduce < _newEndTime

IRs:
TMP_394(bool) = _newEndTime > reduce
TMP_395(uint256) = _now + rndMin_
TMP_396(uint256) = TMP_395 + reduce
TMP_397(bool) = TMP_396 < _newEndTime
TMP_398(bool) = TMP_394 && TMP_397
CONDITION TMP_398"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_newEndTime = (_newEndTime).sub(reduce)

IRs:
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_newEndTime', 'reduce'] 
_newEndTime(uint256) := TMP_399(uint256)"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
_newEndTime > reduce

IRs:
TMP_400(bool) = _newEndTime > reduce
CONDITION TMP_400"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_newEndTime = _now + rndMin_

IRs:
TMP_401(uint256) = _now + rndMin_
_newEndTime(uint256) := TMP_401(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
round_[_rID].end = _newEndTime

IRs:
REF_616(PCKdatasets.Round) -> round_[_rID]
REF_617(uint256) -> REF_616.end
REF_617(uint256) (->round_) := _newEndTime(uint256)"];
}
// Function: 2947.sol-PlayCoinKey-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_327(bool) = _team < 0
TMP_328(bool) = _team > 3
TMP_329(bool) = TMP_327 || TMP_328
CONDITION TMP_329"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2947.sol-PlayCoinKey-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_85(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_85(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_86(PCKdatasets.Round) -> round_[_rID]
REF_87(uint256) -> REF_86.end
TMP_109(bool) = _now > REF_87
REF_88(PCKdatasets.Round) -> round_[_rID]
REF_89(bool) -> REF_88.ended
TMP_110(bool) = REF_89 == False
TMP_111(bool) = TMP_109 && TMP_110
REF_90(PCKdatasets.Round) -> round_[_rID]
REF_91(uint256) -> REF_90.plyr
TMP_112(bool) = REF_91 != 0
TMP_113(bool) = TMP_111 && TMP_112
CONDITION TMP_113"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_92(PCKdatasets.Round) -> round_[_rID]
REF_93(bool) -> REF_92.ended
REF_93(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_114(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.endRound(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_114(PCKdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_115(uint256) = INTERNAL_CALL, PlayCoinKey.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_115(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_116(bool) = _eth > 0
CONDITION TMP_116"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_94(PCKdatasets.Player) -> plyr_[_pID]
REF_95(address) -> REF_94.addr
Transfer dest:REF_95 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_97(uint256) -> _eventData_.compressedData
REF_98(uint256) -> _eventData_.compressedData
TMP_118(uint256) = _now * 1000000000000000000
TMP_119(uint256) = REF_98 + TMP_118
REF_97(uint256) (->_eventData_) := TMP_119(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_99(uint256) -> _eventData_.compressedIDs
REF_100(uint256) -> _eventData_.compressedIDs
TMP_120(uint256) = REF_100 + _pID
REF_99(uint256) (->_eventData_) := TMP_120(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
PCKevents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount)

IRs:
REF_102(PCKdatasets.Player) -> plyr_[_pID]
REF_103(bytes32) -> REF_102.name
REF_104(uint256) -> _eventData_.compressedData
REF_105(uint256) -> _eventData_.compressedIDs
REF_106(address) -> _eventData_.winnerAddr
REF_107(bytes32) -> _eventData_.winnerName
REF_108(uint256) -> _eventData_.amountWon
REF_109(uint256) -> _eventData_.newPot
REF_110(uint256) -> _eventData_.PCPAmount
REF_111(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_103,_eth,REF_104,REF_105,REF_106,REF_107,REF_108,REF_109,REF_110,REF_111)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_122(uint256) = INTERNAL_CALL, PlayCoinKey.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_122(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_123(bool) = _eth > 0
CONDITION TMP_123"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_112(PCKdatasets.Player) -> plyr_[_pID]
REF_113(address) -> REF_112.addr
Transfer dest:REF_113 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
PCKevents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_116(PCKdatasets.Player) -> plyr_[_pID]
REF_117(bytes32) -> REF_116.name
Emit onWithdraw(_pID,msg.sender,REF_117,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
23->1;
}
// Function: 2947.sol-PlayCoinKey-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_709(PCKdatasets.Player) -> plyr_[_pID]
REF_710(uint256) -> REF_709.lrnd
INTERNAL_CALL, PlayCoinKey.updateGenVault(uint256,uint256)(_pID,REF_710)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_711(PCKdatasets.Player) -> plyr_[_pID]
REF_712(uint256) -> REF_711.win
REF_714(PCKdatasets.Player) -> plyr_[_pID]
REF_715(uint256) -> REF_714.gen
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_712', 'REF_715'] 
REF_717(PCKdatasets.Player) -> plyr_[_pID]
REF_718(uint256) -> REF_717.aff
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_488', 'REF_718'] 
_earnings(uint256) := TMP_489(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_490(bool) = _earnings > 0
CONDITION TMP_490"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_719(PCKdatasets.Player) -> plyr_[_pID]
REF_720(uint256) -> REF_719.win
REF_720(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_721(PCKdatasets.Player) -> plyr_[_pID]
REF_722(uint256) -> REF_721.gen
REF_722(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_723(PCKdatasets.Player) -> plyr_[_pID]
REF_724(uint256) -> REF_723.aff
REF_724(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2947.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2947.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2947.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2947.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2947.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2947.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2947.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2947.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2947.sol-ProForwarderInterface-cancelMigration()
digraph{
}
// Function: 2947.sol-ProForwarderInterface-deposit()
digraph{
}
// Function: 2947.sol-ProForwarderInterface-finishMigration()
digraph{
}
// Function: 2947.sol-ProForwarderInterface-setup(address)
digraph{
}
// Function: 2947.sol-ProForwarderInterface-startMigration(address)
digraph{
}
// Function: 2947.sol-ProForwarderInterface-status()
digraph{
}
// Function: 2947.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_597(uint256) = a + b
c(uint256) := TMP_597(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_598(bool) = c >= a
TMP_599(None) = SOLIDITY_CALL require(bool,string)(TMP_598,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2947.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_589(bool) = a == 0
CONDITION TMP_589"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_590(uint256) = a * b
c(uint256) := TMP_590(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_591(uint256) = c / a
TMP_592(bool) = TMP_591 == b
TMP_593(None) = SOLIDITY_CALL require(bool,string)(TMP_592,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2947.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_607(bool) = x == 0
CONDITION TMP_607"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_608(bool) = y == 0
CONDITION TMP_608"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_609(bool) = i < y
CONDITION TMP_609"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_610(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_610(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_611(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2947.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_606(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_606"];
}
// Function: 2947.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_600(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_601(uint256) = TMP_600 / 2
z(uint256) := TMP_601(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_602(bool) = z < y
CONDITION TMP_602"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_603(uint256) = x / z
TMP_604(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_603,z)
TMP_605(uint256) = TMP_604 / 2
z(uint256) := TMP_605(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2947.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_594(bool) = b <= a
TMP_595(None) = SOLIDITY_CALL require(bool,string)(TMP_594,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_596(uint256) = a - b
RETURN TMP_596"];
}
}
