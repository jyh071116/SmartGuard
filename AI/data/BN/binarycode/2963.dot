digraph G {
// Function: 2963.sol-IMDEX-approve(address,uint256)
digraph{
}
// Function: 2963.sol-IMDEX-approveAndCall(address,uint256,bytes)
digraph{
}
// Function: 2963.sol-IMDEX-transfer(address,uint256)
digraph{
}
// Function: 2963.sol-IMDEX-transferFrom(address,address,uint256)
digraph{
}
// Function: 2963.sol-IMDEXDexchange-IMDEXadminWithdraw(address,uint256,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
feeWithdrawal > 50000000000000000

IRs:
TMP_58(bool) = feeWithdrawal > 50000000000000000
CONDITION TMP_58"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
feeWithdrawal = 50000000000000000

IRs:
feeWithdrawal(uint256) := 50000000000000000(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(tokens[token][user] > amount)

IRs:
REF_29(mapping(address => uint256)) -> tokens[token]
REF_30(uint256) -> REF_29[user]
TMP_59(bool) = REF_30 > amount
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokens[token][user] = safeSub(tokens[token][user],amount)

IRs:
REF_31(mapping(address => uint256)) -> tokens[token]
REF_32(uint256) -> REF_31[user]
REF_33(mapping(address => uint256)) -> tokens[token]
REF_34(uint256) -> REF_33[user]
TMP_61(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_34,amount)
REF_32(uint256) (->tokens) := TMP_61(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokens[token][feeAccount] = safeAdd(tokens[token][feeAccount],safeMul(feeWithdrawal,amount) / 1000000000000000000)

IRs:
REF_35(mapping(address => uint256)) -> tokens[token]
REF_36(uint256) -> REF_35[feeAccount]
REF_37(mapping(address => uint256)) -> tokens[token]
REF_38(uint256) -> REF_37[feeAccount]
TMP_62(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(feeWithdrawal,amount)
TMP_63(uint256) = TMP_62 / 1000000000000000000
TMP_64(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_38,TMP_63)
REF_36(uint256) (->tokens) := TMP_64(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amount = safeMul((1000000000000000000 - feeWithdrawal),amount) / 1000000000000000000

IRs:
TMP_65(uint256) = 1000000000000000000 - feeWithdrawal
TMP_66(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(TMP_65,amount)
TMP_67(uint256) = TMP_66 / 1000000000000000000
amount(uint256) := TMP_67(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
token == address(0)

IRs:
TMP_68 = CONVERT 0 to address
TMP_69(bool) = token == TMP_68
CONDITION TMP_69"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
user.transfer(amount)

IRs:
Transfer dest:user value:amount"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(IMDEX(token).transfer(user,amount))

IRs:
TMP_71 = CONVERT token to IMDEX
TMP_72(bool) = HIGH_LEVEL_CALL, dest:TMP_71(IMDEX), function:transfer, arguments:['user', 'amount']  
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
lastActiveTransaction[user] = block.number

IRs:
REF_41(uint256) -> lastActiveTransaction[user]
REF_41(uint256) (->lastActiveTransaction) := block.number(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Withdraw(token,user,amount,tokens[token][user])

IRs:
REF_42(mapping(address => uint256)) -> tokens[token]
REF_43(uint256) -> REF_42[user]
Emit Withdraw(token,user,amount,REF_43)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, IMDEXDexchange.onlyAdmin()()"];
14->1;
}
// Function: 2963.sol-IMDEXDexchange-IMDEXdeposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokens[address(0)][msg.sender] = safeAdd(tokens[address(0)][msg.sender],msg.value)

IRs:
TMP_39 = CONVERT 0 to address
REF_11(mapping(address => uint256)) -> tokens[TMP_39]
REF_12(uint256) -> REF_11[msg.sender]
TMP_40 = CONVERT 0 to address
REF_13(mapping(address => uint256)) -> tokens[TMP_40]
REF_14(uint256) -> REF_13[msg.sender]
TMP_41(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_14,msg.value)
REF_12(uint256) (->tokens) := TMP_41(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastActiveTransaction[msg.sender] = block.number

IRs:
REF_15(uint256) -> lastActiveTransaction[msg.sender]
REF_15(uint256) (->lastActiveTransaction) := block.number(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Deposit(address(0),msg.sender,msg.value,tokens[address(0)][msg.sender])

IRs:
TMP_42 = CONVERT 0 to address
TMP_43 = CONVERT 0 to address
REF_16(mapping(address => uint256)) -> tokens[TMP_43]
REF_17(uint256) -> REF_16[msg.sender]
Emit Deposit(TMP_42,msg.sender,msg.value,REF_17)"];
}
// Function: 2963.sol-IMDEXDexchange-IMDEXdepositToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender],amount)

IRs:
REF_3(mapping(address => uint256)) -> tokens[token]
REF_4(uint256) -> REF_3[msg.sender]
REF_5(mapping(address => uint256)) -> tokens[token]
REF_6(uint256) -> REF_5[msg.sender]
TMP_34(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_6,amount)
REF_4(uint256) (->tokens) := TMP_34(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastActiveTransaction[msg.sender] = block.number

IRs:
REF_7(uint256) -> lastActiveTransaction[msg.sender]
REF_7(uint256) (->lastActiveTransaction) := block.number(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(IMDEX(token).transferFrom(msg.sender,this,amount))

IRs:
TMP_35 = CONVERT token to IMDEX
TMP_36(bool) = HIGH_LEVEL_CALL, dest:TMP_35(IMDEX), function:transferFrom, arguments:['msg.sender', 'this', 'amount']  
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Deposit(token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_9(mapping(address => uint256)) -> tokens[token]
REF_10(uint256) -> REF_9[msg.sender]
Emit Deposit(token,msg.sender,amount,REF_10)"];
}
// Function: 2963.sol-IMDEXDexchange-IMDEXinvalidateOrdersBefore(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nonce > invalidOrder[user])

IRs:
REF_0(uint256) -> invalidOrder[user]
TMP_26(bool) = nonce > REF_0
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
invalidOrder[user] = nonce

IRs:
REF_1(uint256) -> invalidOrder[user]
REF_1(uint256) (->invalidOrder) := nonce(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, IMDEXDexchange.onlyAdmin()()"];
3->1;
}
// Function: 2963.sol-IMDEXDexchange-IMDEXsetAdmin(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins[admin] = isAdmin

IRs:
REF_2(bool) -> admins[admin]
REF_2(bool) (->admins) := isAdmin(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, IMDEXDexchange.onlyOwner()()"];
2->1;
}
// Function: 2963.sol-IMDEXDexchange-IMDEXsetInactivityReleasePeriod(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(expiry < 1000000)

IRs:
TMP_29(bool) = expiry < 1000000
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
inactivityReleasePeriod = expiry

IRs:
inactivityReleasePeriod(uint256) := expiry(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, IMDEXDexchange.onlyAdmin()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2963.sol-IMDEXDexchange-IMDEXsetOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
SetOwner(owner,newOwner)

IRs:
Emit SetOwner(owner,newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, IMDEXDexchange.onlyOwner()()"];
3->1;
}
// Function: 2963.sol-IMDEXDexchange-IMDEXtrade(uint256[8],address[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(invalidOrder[Y[2]] < X[3])

IRs:
REF_46(address) -> Y[2]
REF_47(uint256) -> invalidOrder[REF_46]
REF_48(uint256) -> X[3]
TMP_76(bool) = REF_47 < REF_48
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
X[6] > 100000000000000000

IRs:
REF_49(uint256) -> X[6]
TMP_78(bool) = REF_49 > 100000000000000000
CONDITION TMP_78"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
X[6] = 100000000000000000

IRs:
REF_50(uint256) -> X[6]
REF_50(uint256) (->X) := 100000000000000000(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
X[7] > 100000000000000000

IRs:
REF_51(uint256) -> X[7]
TMP_79(bool) = REF_51 > 100000000000000000
CONDITION TMP_79"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
X[7] = 100000000000000000

IRs:
REF_52(uint256) -> X[7]
REF_52(uint256) (->X) := 100000000000000000(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(tokens[Y[0]][Y[3]] > X[4])

IRs:
REF_53(address) -> Y[0]
REF_54(mapping(address => uint256)) -> tokens[REF_53]
REF_55(address) -> Y[3]
REF_56(uint256) -> REF_54[REF_55]
REF_57(uint256) -> X[4]
TMP_80(bool) = REF_56 > REF_57
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(tokens[Y[1]][Y[2]] > (safeMul(X[1],X[4]) / X[0]))

IRs:
REF_58(address) -> Y[1]
REF_59(mapping(address => uint256)) -> tokens[REF_58]
REF_60(address) -> Y[2]
REF_61(uint256) -> REF_59[REF_60]
REF_62(uint256) -> X[1]
REF_63(uint256) -> X[4]
TMP_82(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(REF_62,REF_63)
REF_64(uint256) -> X[0]
TMP_83(uint256) = TMP_82 / REF_64
TMP_84(bool) = REF_61 > TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokens[Y[0]][Y[3]] = safeSub(tokens[Y[0]][Y[3]],X[4])

IRs:
REF_65(address) -> Y[0]
REF_66(mapping(address => uint256)) -> tokens[REF_65]
REF_67(address) -> Y[3]
REF_68(uint256) -> REF_66[REF_67]
REF_69(address) -> Y[0]
REF_70(mapping(address => uint256)) -> tokens[REF_69]
REF_71(address) -> Y[3]
REF_72(uint256) -> REF_70[REF_71]
REF_73(uint256) -> X[4]
TMP_86(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_72,REF_73)
REF_68(uint256) (->tokens) := TMP_86(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokens[Y[0]][Y[2]] = safeAdd(tokens[Y[0]][Y[2]],safeMul(X[4],((1000000000000000000) - X[6])) / (1000000000000000000))

IRs:
REF_74(address) -> Y[0]
REF_75(mapping(address => uint256)) -> tokens[REF_74]
REF_76(address) -> Y[2]
REF_77(uint256) -> REF_75[REF_76]
REF_78(address) -> Y[0]
REF_79(mapping(address => uint256)) -> tokens[REF_78]
REF_80(address) -> Y[2]
REF_81(uint256) -> REF_79[REF_80]
REF_82(uint256) -> X[4]
REF_83(uint256) -> X[6]
TMP_87(uint256) = 1000000000000000000 - REF_83
TMP_88(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(REF_82,TMP_87)
TMP_89(uint256) = TMP_88 / 1000000000000000000
TMP_90(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_81,TMP_89)
REF_77(uint256) (->tokens) := TMP_90(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokens[Y[0]][feeAccount] = safeAdd(tokens[Y[0]][feeAccount],safeMul(X[4],X[6]) / (1000000000000000000))

IRs:
REF_84(address) -> Y[0]
REF_85(mapping(address => uint256)) -> tokens[REF_84]
REF_86(uint256) -> REF_85[feeAccount]
REF_87(address) -> Y[0]
REF_88(mapping(address => uint256)) -> tokens[REF_87]
REF_89(uint256) -> REF_88[feeAccount]
REF_90(uint256) -> X[4]
REF_91(uint256) -> X[6]
TMP_91(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(REF_90,REF_91)
TMP_92(uint256) = TMP_91 / 1000000000000000000
TMP_93(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_89,TMP_92)
REF_86(uint256) (->tokens) := TMP_93(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tokens[Y[1]][Y[2]] = safeSub(tokens[Y[1]][Y[2]],safeMul(X[1],X[4]) / X[0])

IRs:
REF_92(address) -> Y[1]
REF_93(mapping(address => uint256)) -> tokens[REF_92]
REF_94(address) -> Y[2]
REF_95(uint256) -> REF_93[REF_94]
REF_96(address) -> Y[1]
REF_97(mapping(address => uint256)) -> tokens[REF_96]
REF_98(address) -> Y[2]
REF_99(uint256) -> REF_97[REF_98]
REF_100(uint256) -> X[1]
REF_101(uint256) -> X[4]
TMP_94(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(REF_100,REF_101)
REF_102(uint256) -> X[0]
TMP_95(uint256) = TMP_94 / REF_102
TMP_96(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_99,TMP_95)
REF_95(uint256) (->tokens) := TMP_96(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
tokens[Y[1]][Y[3]] = safeAdd(tokens[Y[1]][Y[3]],safeMul(safeMul(((1000000000000000000) - X[7]),X[1]),X[4]) / X[0] / (1000000000000000000))

IRs:
REF_103(address) -> Y[1]
REF_104(mapping(address => uint256)) -> tokens[REF_103]
REF_105(address) -> Y[3]
REF_106(uint256) -> REF_104[REF_105]
REF_107(address) -> Y[1]
REF_108(mapping(address => uint256)) -> tokens[REF_107]
REF_109(address) -> Y[3]
REF_110(uint256) -> REF_108[REF_109]
REF_111(uint256) -> X[7]
TMP_97(uint256) = 1000000000000000000 - REF_111
REF_112(uint256) -> X[1]
TMP_98(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(TMP_97,REF_112)
REF_113(uint256) -> X[4]
TMP_99(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(TMP_98,REF_113)
REF_114(uint256) -> X[0]
TMP_100(uint256) = TMP_99 / REF_114
TMP_101(uint256) = TMP_100 / 1000000000000000000
TMP_102(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_110,TMP_101)
REF_106(uint256) (->tokens) := TMP_102(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokens[Y[1]][feeAccount] = safeAdd(tokens[Y[1]][feeAccount],safeMul(safeMul(X[7],X[1]),X[4]) / X[0] / (1000000000000000000))

IRs:
REF_115(address) -> Y[1]
REF_116(mapping(address => uint256)) -> tokens[REF_115]
REF_117(uint256) -> REF_116[feeAccount]
REF_118(address) -> Y[1]
REF_119(mapping(address => uint256)) -> tokens[REF_118]
REF_120(uint256) -> REF_119[feeAccount]
REF_121(uint256) -> X[7]
REF_122(uint256) -> X[1]
TMP_103(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(REF_121,REF_122)
REF_123(uint256) -> X[4]
TMP_104(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(TMP_103,REF_123)
REF_124(uint256) -> X[0]
TMP_105(uint256) = TMP_104 / REF_124
TMP_106(uint256) = TMP_105 / 1000000000000000000
TMP_107(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_120,TMP_106)
REF_117(uint256) (->tokens) := TMP_107(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
lastActiveTransaction[Y[2]] = block.number

IRs:
REF_125(address) -> Y[2]
REF_126(uint256) -> lastActiveTransaction[REF_125]
REF_126(uint256) (->lastActiveTransaction) := block.number(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lastActiveTransaction[Y[3]] = block.number

IRs:
REF_127(address) -> Y[3]
REF_128(uint256) -> lastActiveTransaction[REF_127]
REF_128(uint256) (->lastActiveTransaction) := block.number(uint256)"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, IMDEXDexchange.onlyAdmin()()"];
18->1;
}
// Function: 2963.sol-IMDEXDexchange-IMDEXwithdrawToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeSub(block.number,lastActiveTransaction[msg.sender]) > inactivityReleasePeriod)

IRs:
REF_18(uint256) -> lastActiveTransaction[msg.sender]
TMP_45(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(block.number,REF_18)
TMP_46(bool) = TMP_45 > inactivityReleasePeriod
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokens[token][msg.sender] > amount)

IRs:
REF_19(mapping(address => uint256)) -> tokens[token]
REF_20(uint256) -> REF_19[msg.sender]
TMP_48(bool) = REF_20 > amount
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[token][msg.sender] = safeSub(tokens[token][msg.sender],amount)

IRs:
REF_21(mapping(address => uint256)) -> tokens[token]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> tokens[token]
REF_24(uint256) -> REF_23[msg.sender]
TMP_50(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_24,amount)
REF_22(uint256) (->tokens) := TMP_50(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
token == address(0)

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = token == TMP_51
CONDITION TMP_52"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(IMDEX(token).transfer(msg.sender,amount))

IRs:
TMP_54 = CONVERT token to IMDEX
TMP_55(bool) = HIGH_LEVEL_CALL, dest:TMP_54(IMDEX), function:transfer, arguments:['msg.sender', 'amount']  
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Withdraw(token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_27(mapping(address => uint256)) -> tokens[token]
REF_28(uint256) -> REF_27[msg.sender]
Emit Withdraw(token,msg.sender,amount,REF_28)"];
}
// Function: 2963.sol-IMDEXDexchange-balanceOf(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokens[token][user]

IRs:
REF_44(mapping(address => uint256)) -> tokens[token]
REF_45(uint256) -> REF_44[user]
RETURN REF_45"];
}
// Function: 2963.sol-IMDEXDexchange-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
feeAccount = feeAccount_

IRs:
feeAccount(address) := feeAccount_(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inactivityReleasePeriod = 100000

IRs:
inactivityReleasePeriod(uint256) := 100000(uint256)"];
}
// Function: 2963.sol-IMDEXDexchange-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_33(None) = SOLIDITY_CALL revert()()"];
}
// Function: 2963.sol-IMDEXDexchange-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner && admins[msg.sender])

IRs:
TMP_111(bool) = msg.sender == owner
REF_129(bool) -> admins[msg.sender]
TMP_112(bool) = TMP_111 && REF_129
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2963.sol-IMDEXDexchange-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_109(bool) = msg.sender == owner
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2963.sol-IMDEXDexchange-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_21(uint256) = a + b
c(uint256) := TMP_21(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_22(bool) = c >= a
TMP_23(None) = SOLIDITY_CALL assert(bool)(TMP_22)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2963.sol-IMDEXDexchange-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_17(uint256) = a / b
RETURN TMP_17"];
}
// Function: 2963.sol-IMDEXDexchange-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_12(bool) = a == 0
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_13(uint256) = a * b
c(uint256) := TMP_13(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_14(uint256) = c / a
TMP_15(bool) = TMP_14 == b
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2963.sol-IMDEXDexchange-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_18(bool) = b <= a
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_20(uint256) = a - b
RETURN TMP_20"];
}
// Function: 2963.sol-IMDEXDexchange-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
IMDEXtoken = 0x46705E8fef2E868FACAFeDc45F47114EC01c2EEd

IRs:
IMDEXtoken(address) := 402135274953087317519602860891064396201638768365(address)"];
}
// Function: 2963.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2963.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 2963.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2963.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
