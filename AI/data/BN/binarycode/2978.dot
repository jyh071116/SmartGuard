digraph G {
// Function: 2978.sol-ApproveAndCallReceiver-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 2978.sol-Controllable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = msg.sender

IRs:
controller(address) := msg.sender(address)"];
}
// Function: 2978.sol-Controllable-onlyController()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller)

IRs:
TMP_22(bool) = msg.sender == controller
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Controllable-transferControl(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newController != address(0)

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newController != TMP_19
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller = newController

IRs:
controller(address) := newController(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
4->1;
}
// Function: 2978.sol-ControllerInterface-onApprove(address,address,uint256)
digraph{
}
// Function: 2978.sol-ControllerInterface-onTransfer(address,address,uint256)
digraph{
}
// Function: 2978.sol-ControllerInterface-proxyPayment(address)
digraph{
}
// Function: 2978.sol-Crowdsale-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.balanceOf(_owner)

IRs:
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:balanceOf, arguments:['_owner']  
RETURN TMP_41"];
}
// Function: 2978.sol-Crowdsale-changeController(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isContract(_newController))

IRs:
TMP_42(bool) = INTERNAL_CALL, Crowdsale.isContract(address)(_newController)
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ledToken.transferControl(_newController)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['_newController']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2978.sol-Crowdsale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2978.sol-Crowdsale-enableMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(true)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['True']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-Crowdsale-forceStart()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
started = true

IRs:
started(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-Crowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledMultiSig.transfer(msg.value)

IRs:
Transfer dest:ledMultiSig value:msg.value"];
}
// Function: 2978.sol-Crowdsale-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == 0

IRs:
TMP_51(bool) = _addr == 0
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
size > 0

IRs:
TMP_52(bool) = size > 0
RETURN TMP_52"];
}
// Function: 2978.sol-Crowdsale-lockMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(false)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['False']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_56(bool) = msg.sender == owner
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Crowdsale-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 2978.sol-Crowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
PRIVATESALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PRESALE_BASE_PRICE_IN_WEI = 600000000000000

IRs:
PRESALE_BASE_PRICE_IN_WEI(uint256) := 600000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ICO_BASE_PRICE_IN_WEI = 800000000000000

IRs:
ICO_BASE_PRICE_IN_WEI(uint256) := 800000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
FIRSTSALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MIN_PURCHASE_OTHERSALES = 80000000000000000

IRs:
MIN_PURCHASE_OTHERSALES(uint256) := 80000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MIN_PURCHASE = 1000000000000000000

IRs:
MIN_PURCHASE(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_PURCHASE = 1000000000000000000000

IRs:
MAX_PURCHASE(uint256) := 1000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
PRESALE_PERCENTAGE_1 = 10

IRs:
PRESALE_PERCENTAGE_1(uint256) := 10(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_PERCENTAGE_2 = 15

IRs:
PRESALE_PERCENTAGE_2(uint256) := 15(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PRESALE_PERCENTAGE_3 = 20

IRs:
PRESALE_PERCENTAGE_3(uint256) := 20(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PRESALE_PERCENTAGE_4 = 25

IRs:
PRESALE_PERCENTAGE_4(uint256) := 25(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PRESALE_PERCENTAGE_5 = 35

IRs:
PRESALE_PERCENTAGE_5(uint256) := 35(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
ICO_PERCENTAGE_1 = 5

IRs:
ICO_PERCENTAGE_1(uint256) := 5(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
ICO_PERCENTAGE_2 = 10

IRs:
ICO_PERCENTAGE_2(uint256) := 10(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ICO_PERCENTAGE_3 = 15

IRs:
ICO_PERCENTAGE_3(uint256) := 15(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ICO_PERCENTAGE_4 = 20

IRs:
ICO_PERCENTAGE_4(uint256) := 20(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ICO_PERCENTAGE_5 = 25

IRs:
ICO_PERCENTAGE_5(uint256) := 25(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
PRESALE_LEVEL_1 = 5000000000000000000

IRs:
PRESALE_LEVEL_1(uint256) := 5000000000000000000(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
PRESALE_LEVEL_2 = 10000000000000000000

IRs:
PRESALE_LEVEL_2(uint256) := 10000000000000000000(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
PRESALE_LEVEL_3 = 15000000000000000000

IRs:
PRESALE_LEVEL_3(uint256) := 15000000000000000000(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
PRESALE_LEVEL_4 = 20000000000000000000

IRs:
PRESALE_LEVEL_4(uint256) := 20000000000000000000(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
PRESALE_LEVEL_5 = 25000000000000000000

IRs:
PRESALE_LEVEL_5(uint256) := 25000000000000000000(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
ICO_LEVEL_1 = 6666666666666666666

IRs:
ICO_LEVEL_1(uint256) := 6666666666666666666(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
ICO_LEVEL_2 = 13333333333333333333

IRs:
ICO_LEVEL_2(uint256) := 13333333333333333333(uint256)"];
23->24;
24[label="Node Type: OTHER_ENTRYPOINT 24

EXPRESSION:
ICO_LEVEL_3 = 20000000000000000000

IRs:
ICO_LEVEL_3(uint256) := 20000000000000000000(uint256)"];
24->25;
25[label="Node Type: OTHER_ENTRYPOINT 25

EXPRESSION:
ICO_LEVEL_4 = 26666666666666666666

IRs:
ICO_LEVEL_4(uint256) := 26666666666666666666(uint256)"];
25->26;
26[label="Node Type: OTHER_ENTRYPOINT 26

EXPRESSION:
ICO_LEVEL_5 = 33333333333333333333

IRs:
ICO_LEVEL_5(uint256) := 33333333333333333333(uint256)"];
26->27;
27[label="Node Type: OTHER_ENTRYPOINT 27

EXPRESSION:
PRIVATESALE_TOKENCAP = 18750000

IRs:
PRIVATESALE_TOKENCAP(uint256) := 18750000(uint256)"];
27->28;
28[label="Node Type: OTHER_ENTRYPOINT 28

EXPRESSION:
PRESALE_TOKENCAP = 18750000

IRs:
PRESALE_TOKENCAP(uint256) := 18750000(uint256)"];
28->29;
29[label="Node Type: OTHER_ENTRYPOINT 29

EXPRESSION:
ICO_TOKENCAP = 22500000

IRs:
ICO_TOKENCAP(uint256) := 22500000(uint256)"];
29->30;
30[label="Node Type: OTHER_ENTRYPOINT 30

EXPRESSION:
FIRSTSALE_TOKENCAP = 5000000

IRs:
FIRSTSALE_TOKENCAP(uint256) := 5000000(uint256)"];
30->31;
31[label="Node Type: OTHER_ENTRYPOINT 31

EXPRESSION:
LEDTEAM_TOKENS = 35000000

IRs:
LEDTEAM_TOKENS(uint256) := 35000000(uint256)"];
31->32;
32[label="Node Type: OTHER_ENTRYPOINT 32

EXPRESSION:
TOTAL_TOKENCAP = 100000000

IRs:
TOTAL_TOKENCAP(uint256) := 100000000(uint256)"];
32->33;
33[label="Node Type: OTHER_ENTRYPOINT 33

EXPRESSION:
DECIMALS_MULTIPLIER = 1000000000000000000

IRs:
DECIMALS_MULTIPLIER(uint256) := 1000000000000000000(uint256)"];
33->34;
34[label="Node Type: OTHER_ENTRYPOINT 34

EXPRESSION:
LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4

IRs:
LED_MULTISIG(address) := 767111519343181381934891368477998475932213935860(uint256)"];
}
// Function: 2978.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ledMultiSig = LED_MULTISIG

IRs:
ledMultiSig(address) := LED_MULTISIG(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
started = false

IRs:
started(bool) := False(bool)"];
}
// Function: 2978.sol-Crowdsale-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.totalSupply()

IRs:
TMP_40(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:totalSupply, arguments:[]  
RETURN TMP_40"];
}
// Function: 2978.sol-Crowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = newOwner != TMP_30
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2978.sol-Crowdsale-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
5->1;
}
// Function: 2978.sol-Crowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
current = now

IRs:
current(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
presaleStarted = (current >= startTime || started)

IRs:
TMP_34(bool) = current >= startTime
TMP_35(bool) = TMP_34 || started
presaleStarted(bool) := TMP_35(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
presaleNotEnded = current <= endTime

IRs:
TMP_36(bool) = current <= endTime
presaleNotEnded(bool) := TMP_36(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_37(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_37(bool)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
nonZeroPurchase && presaleStarted && presaleNotEnded

IRs:
TMP_38(bool) = nonZeroPurchase && presaleStarted
TMP_39(bool) = TMP_38 && presaleNotEnded
RETURN TMP_39"];
}
// Function: 2978.sol-Crowdsale-whenNotFinalized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_58 = UnaryType.BANG finalized 
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Crowdsale-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_53 = UnaryType.BANG paused 
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Crowdsale-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_55(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 2978.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 2978.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 2978.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 2978.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 2978.sol-FirstSale-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.balanceOf(_owner)

IRs:
TMP_68(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:balanceOf, arguments:['_owner']  
RETURN TMP_68"];
}
// Function: 2978.sol-FirstSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != 0x0)

IRs:
TMP_97(bool) = _beneficiary != 0
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_99(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(weiAmount >= MIN_PURCHASE && weiAmount <= MAX_PURCHASE)

IRs:
TMP_101(bool) = weiAmount >= MIN_PURCHASE
TMP_102(bool) = weiAmount <= MAX_PURCHASE
TMP_103(bool) = TMP_101 && TMP_102
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
priceInWei = FIRSTSALE_BASE_PRICE_IN_WEI

IRs:
priceInWei(uint256) := FIRSTSALE_BASE_PRICE_IN_WEI(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalWeiRaised = totalWeiRaised.add(weiAmount)

IRs:
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalWeiRaised', 'weiAmount'] 
totalWeiRaised(uint256) := TMP_105(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei)

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'DECIMALS_MULTIPLIER'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_106', 'priceInWei'] 
tokens(uint256) := TMP_107(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokensMinted = tokensMinted.add(tokens)

IRs:
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'tokens'] 
tokensMinted(uint256) := TMP_108(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(tokensMinted < cap)

IRs:
TMP_109(bool) = tokensMinted < cap
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
contributors = contributors.add(1)

IRs:
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contributors', '1'] 
contributors(uint256) := TMP_111(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ledToken.mint(_beneficiary,tokens)

IRs:
TMP_112(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['_beneficiary', 'tokens']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenNotFinalized()

IRs:
MODIFIER_CALL, Crowdsale.whenNotFinalized()()"];
15->1;
}
// Function: 2978.sol-FirstSale-changeController(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isContract(_newController))

IRs:
TMP_69(bool) = INTERNAL_CALL, Crowdsale.isContract(address)(_newController)
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ledToken.transferControl(_newController)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['_newController']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2978.sol-FirstSale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2978.sol-FirstSale-constructor(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ledToken = LedTokenInterface(_tokenAddress)

IRs:
TMP_89 = CONVERT _tokenAddress to LedTokenInterface
ledToken(LedTokenInterface) := TMP_89(LedTokenInterface)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(_tokenAddress != 0x0)

IRs:
TMP_90(bool) = _tokenAddress != 0
TMP_91(None) = SOLIDITY_CALL assert(bool)(TMP_90)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(_startTime > 0)

IRs:
TMP_92(bool) = _startTime > 0
TMP_93(None) = SOLIDITY_CALL assert(bool)(TMP_92)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_endTime > _startTime)

IRs:
TMP_94(bool) = _endTime > _startTime
TMP_95(None) = SOLIDITY_CALL assert(bool)(TMP_94)"];
}
// Function: 2978.sol-FirstSale-enableMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(true)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['True']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-FirstSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, FirstSale.buyTokens(address)(msg.sender)"];
}
// Function: 2978.sol-FirstSale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_118(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_119 = UnaryType.BANG finalized 
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
surplusTokens = cap - tokensMinted

IRs:
TMP_121(uint256) = cap - tokensMinted
surplusTokens(uint256) := TMP_121(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ledToken.mint(ledMultiSig,surplusTokens)

IRs:
TMP_122(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['ledMultiSig', 'surplusTokens']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ledToken.transferControl(owner)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['owner']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 2978.sol-FirstSale-forceStart()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
started = true

IRs:
started(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-FirstSale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledMultiSig.transfer(msg.value)

IRs:
Transfer dest:ledMultiSig value:msg.value"];
}
// Function: 2978.sol-FirstSale-getInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
symbol = LED

IRs:
symbol(string) := LED(string)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
transfersEnabled = ledToken.transfersEnabled()

IRs:
TMP_117(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transfersEnabled, arguments:[]  
transfersEnabled(bool) := TMP_117(bool)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime)

IRs:
RETURN TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime"];
}
// Function: 2978.sol-FirstSale-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == 0

IRs:
TMP_78(bool) = _addr == 0
CONDITION TMP_78"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
size > 0

IRs:
TMP_79(bool) = size > 0
RETURN TMP_79"];
}
// Function: 2978.sol-FirstSale-lockMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(false)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['False']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-FirstSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_133(bool) = msg.sender == owner
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-FirstSale-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 2978.sol-FirstSale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
PRIVATESALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PRESALE_BASE_PRICE_IN_WEI = 600000000000000

IRs:
PRESALE_BASE_PRICE_IN_WEI(uint256) := 600000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ICO_BASE_PRICE_IN_WEI = 800000000000000

IRs:
ICO_BASE_PRICE_IN_WEI(uint256) := 800000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
FIRSTSALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MIN_PURCHASE_OTHERSALES = 80000000000000000

IRs:
MIN_PURCHASE_OTHERSALES(uint256) := 80000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MIN_PURCHASE = 1000000000000000000

IRs:
MIN_PURCHASE(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_PURCHASE = 1000000000000000000000

IRs:
MAX_PURCHASE(uint256) := 1000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
PRESALE_PERCENTAGE_1 = 10

IRs:
PRESALE_PERCENTAGE_1(uint256) := 10(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_PERCENTAGE_2 = 15

IRs:
PRESALE_PERCENTAGE_2(uint256) := 15(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PRESALE_PERCENTAGE_3 = 20

IRs:
PRESALE_PERCENTAGE_3(uint256) := 20(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PRESALE_PERCENTAGE_4 = 25

IRs:
PRESALE_PERCENTAGE_4(uint256) := 25(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PRESALE_PERCENTAGE_5 = 35

IRs:
PRESALE_PERCENTAGE_5(uint256) := 35(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
ICO_PERCENTAGE_1 = 5

IRs:
ICO_PERCENTAGE_1(uint256) := 5(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
ICO_PERCENTAGE_2 = 10

IRs:
ICO_PERCENTAGE_2(uint256) := 10(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ICO_PERCENTAGE_3 = 15

IRs:
ICO_PERCENTAGE_3(uint256) := 15(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ICO_PERCENTAGE_4 = 20

IRs:
ICO_PERCENTAGE_4(uint256) := 20(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ICO_PERCENTAGE_5 = 25

IRs:
ICO_PERCENTAGE_5(uint256) := 25(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
PRESALE_LEVEL_1 = 5000000000000000000

IRs:
PRESALE_LEVEL_1(uint256) := 5000000000000000000(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
PRESALE_LEVEL_2 = 10000000000000000000

IRs:
PRESALE_LEVEL_2(uint256) := 10000000000000000000(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
PRESALE_LEVEL_3 = 15000000000000000000

IRs:
PRESALE_LEVEL_3(uint256) := 15000000000000000000(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
PRESALE_LEVEL_4 = 20000000000000000000

IRs:
PRESALE_LEVEL_4(uint256) := 20000000000000000000(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
PRESALE_LEVEL_5 = 25000000000000000000

IRs:
PRESALE_LEVEL_5(uint256) := 25000000000000000000(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
ICO_LEVEL_1 = 6666666666666666666

IRs:
ICO_LEVEL_1(uint256) := 6666666666666666666(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
ICO_LEVEL_2 = 13333333333333333333

IRs:
ICO_LEVEL_2(uint256) := 13333333333333333333(uint256)"];
23->24;
24[label="Node Type: OTHER_ENTRYPOINT 24

EXPRESSION:
ICO_LEVEL_3 = 20000000000000000000

IRs:
ICO_LEVEL_3(uint256) := 20000000000000000000(uint256)"];
24->25;
25[label="Node Type: OTHER_ENTRYPOINT 25

EXPRESSION:
ICO_LEVEL_4 = 26666666666666666666

IRs:
ICO_LEVEL_4(uint256) := 26666666666666666666(uint256)"];
25->26;
26[label="Node Type: OTHER_ENTRYPOINT 26

EXPRESSION:
ICO_LEVEL_5 = 33333333333333333333

IRs:
ICO_LEVEL_5(uint256) := 33333333333333333333(uint256)"];
26->27;
27[label="Node Type: OTHER_ENTRYPOINT 27

EXPRESSION:
PRIVATESALE_TOKENCAP = 18750000

IRs:
PRIVATESALE_TOKENCAP(uint256) := 18750000(uint256)"];
27->28;
28[label="Node Type: OTHER_ENTRYPOINT 28

EXPRESSION:
PRESALE_TOKENCAP = 18750000

IRs:
PRESALE_TOKENCAP(uint256) := 18750000(uint256)"];
28->29;
29[label="Node Type: OTHER_ENTRYPOINT 29

EXPRESSION:
ICO_TOKENCAP = 22500000

IRs:
ICO_TOKENCAP(uint256) := 22500000(uint256)"];
29->30;
30[label="Node Type: OTHER_ENTRYPOINT 30

EXPRESSION:
FIRSTSALE_TOKENCAP = 5000000

IRs:
FIRSTSALE_TOKENCAP(uint256) := 5000000(uint256)"];
30->31;
31[label="Node Type: OTHER_ENTRYPOINT 31

EXPRESSION:
LEDTEAM_TOKENS = 35000000

IRs:
LEDTEAM_TOKENS(uint256) := 35000000(uint256)"];
31->32;
32[label="Node Type: OTHER_ENTRYPOINT 32

EXPRESSION:
TOTAL_TOKENCAP = 100000000

IRs:
TOTAL_TOKENCAP(uint256) := 100000000(uint256)"];
32->33;
33[label="Node Type: OTHER_ENTRYPOINT 33

EXPRESSION:
DECIMALS_MULTIPLIER = 1000000000000000000

IRs:
DECIMALS_MULTIPLIER(uint256) := 1000000000000000000(uint256)"];
33->34;
34[label="Node Type: OTHER_ENTRYPOINT 34

EXPRESSION:
LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4

IRs:
LED_MULTISIG(address) := 767111519343181381934891368477998475932213935860(uint256)"];
}
// Function: 2978.sol-FirstSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ledMultiSig = LED_MULTISIG

IRs:
ledMultiSig(address) := LED_MULTISIG(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
started = false

IRs:
started(bool) := False(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenCap = FIRSTSALE_TOKENCAP

IRs:
tokenCap(uint256) := FIRSTSALE_TOKENCAP(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
cap = tokenCap * DECIMALS_MULTIPLIER

IRs:
TMP_126(uint256) = tokenCap * DECIMALS_MULTIPLIER
cap(uint256) := TMP_126(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
weiCap = tokenCap * FIRSTSALE_BASE_PRICE_IN_WEI

IRs:
TMP_127(uint256) = tokenCap * FIRSTSALE_BASE_PRICE_IN_WEI
weiCap(uint256) := TMP_127(uint256)"];
}
// Function: 2978.sol-FirstSale-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.totalSupply()

IRs:
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:totalSupply, arguments:[]  
RETURN TMP_67"];
}
// Function: 2978.sol-FirstSale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_86 = CONVERT 0 to address
TMP_87(bool) = newOwner != TMP_86
CONDITION TMP_87"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2978.sol-FirstSale-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
5->1;
}
// Function: 2978.sol-FirstSale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
current = now

IRs:
current(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
presaleStarted = (current >= startTime || started)

IRs:
TMP_61(bool) = current >= startTime
TMP_62(bool) = TMP_61 || started
presaleStarted(bool) := TMP_62(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
presaleNotEnded = current <= endTime

IRs:
TMP_63(bool) = current <= endTime
presaleNotEnded(bool) := TMP_63(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_64(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_64(bool)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
nonZeroPurchase && presaleStarted && presaleNotEnded

IRs:
TMP_65(bool) = nonZeroPurchase && presaleStarted
TMP_66(bool) = TMP_65 && presaleNotEnded
RETURN TMP_66"];
}
// Function: 2978.sol-FirstSale-whenNotFinalized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_128 = UnaryType.BANG finalized 
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-FirstSale-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_130 = UnaryType.BANG paused 
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-FirstSale-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_132(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-LedToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[_owner]
REF_42(uint256) -> REF_41[_spender]
RETURN REF_42"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 2978.sol-LedToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(transfersEnabled)

IRs:
TMP_162(None) = SOLIDITY_CALL require(bool)(transfersEnabled)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)((_amount == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_163(bool) = _amount == 0
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_164(bool) = REF_37 == 0
TMP_165(bool) = TMP_163 || TMP_164
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = _amount

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
REF_39(uint256) (->allowed) := _amount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(msg.sender,_spender,_amount)

IRs:
Emit Approval(msg.sender,_spender,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2978.sol-LedToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
approve(_spender,_amount)

IRs:
TMP_168(bool) = INTERNAL_CALL, LedToken.approve(address,uint256)(_spender,_amount)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ApproveAndCallReceiver(_spender).receiveApproval(msg.sender,_amount,this,_extraData)

IRs:
TMP_169 = CONVERT _spender to ApproveAndCallReceiver
HIGH_LEVEL_CALL, dest:TMP_169(ApproveAndCallReceiver), function:receiveApproval, arguments:['msg.sender', '_amount', 'this', '_extraData']  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2978.sol-LedToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balanceOfAt(_owner,block.number)

IRs:
TMP_149(uint256) = INTERNAL_CALL, LedToken.balanceOfAt(address,uint256)(_owner,block.number)
RETURN TMP_149"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 2978.sol-LedToken-balanceOfAt(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)

IRs:
REF_25(LedToken.Checkpoint[]) -> balances[_owner]
REF_26 -> LENGTH REF_25
TMP_150(bool) = REF_26 == 0
REF_27(LedToken.Checkpoint[]) -> balances[_owner]
REF_28(LedToken.Checkpoint) -> REF_27[0]
REF_29(uint128) -> REF_28.fromBlock
TMP_151(bool) = REF_29 > _blockNumber
TMP_152(bool) = TMP_150 || TMP_151
CONDITION TMP_152"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
address(parentToken) != 0x0

IRs:
TMP_153 = CONVERT parentToken to address
TMP_154(bool) = TMP_153 != 0
CONDITION TMP_154"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
parentToken.balanceOfAt(_owner,min(_blockNumber,parentSnapShotBlock))

IRs:
TMP_155(uint256) = INTERNAL_CALL, LedToken.min(uint256,uint256)(_blockNumber,parentSnapShotBlock)
TMP_156(uint256) = HIGH_LEVEL_CALL, dest:parentToken(LedTokenInterface), function:balanceOfAt, arguments:['_owner', 'TMP_155']  
RETURN TMP_156"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: RETURN 6

EXPRESSION:
getValueAt(balances[_owner],_blockNumber)

IRs:
REF_31(LedToken.Checkpoint[]) -> balances[_owner]
TMP_157(uint256) = INTERNAL_CALL, LedToken.getValueAt(LedToken.Checkpoint[],uint256)(REF_31,_blockNumber)
RETURN TMP_157"];
}
// Function: 2978.sol-LedToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_255 = UnaryType.BANG mintingFinished 
TMP_256(None) = SOLIDITY_CALL require(bool)(TMP_255)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-LedToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = msg.sender

IRs:
controller(address) := msg.sender(address)"];
}
// Function: 2978.sol-LedToken-constructor(address,address,uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenFactory = TokenFactoryInterface(_tokenFactory)

IRs:
TMP_138 = CONVERT _tokenFactory to TokenFactoryInterface
tokenFactory(TokenFactoryInterface) := TMP_138(TokenFactoryInterface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
parentToken = LedTokenInterface(_parentToken)

IRs:
TMP_139 = CONVERT _parentToken to LedTokenInterface
parentToken(LedTokenInterface) := TMP_139(LedTokenInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
parentSnapShotBlock = _parentSnapShotBlock

IRs:
parentSnapShotBlock(uint256) := _parentSnapShotBlock(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transfersEnabled = false

IRs:
transfersEnabled(bool) := False(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
masterTransfersEnabled = false

IRs:
masterTransfersEnabled(bool) := False(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
creationBlock = block.number

IRs:
creationBlock(uint256) := block.number(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
version = 0.1

IRs:
version(string) := 0.1(string)"];
}
// Function: 2978.sol-LedToken-createCloneToken(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_snapshotBlock == 0

IRs:
TMP_246(bool) = _snapshotBlock == 0
CONDITION TMP_246"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_snapshotBlock = block.number

IRs:
_snapshotBlock(uint256) := block.number(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_snapshotBlock > block.number

IRs:
TMP_247(bool) = _snapshotBlock > block.number
CONDITION TMP_247"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_snapshotBlock = block.number

IRs:
_snapshotBlock(uint256) := block.number(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
cloneToken = tokenFactory.createCloneToken(this,_snapshotBlock,_name,_symbol)

IRs:
TMP_248(LedToken) = HIGH_LEVEL_CALL, dest:tokenFactory(TokenFactoryInterface), function:createCloneToken, arguments:['this', '_snapshotBlock', '_name', '_symbol']  
cloneToken(LedToken) := TMP_248(LedToken)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cloneToken.transferControl(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:cloneToken(LedToken), function:transferControl, arguments:['msg.sender']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
NewCloneToken(address(cloneToken))

IRs:
TMP_250 = CONVERT cloneToken to address
Emit NewCloneToken(TMP_250)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
address(cloneToken)

IRs:
TMP_252 = CONVERT cloneToken to address
RETURN TMP_252"];
}
// Function: 2978.sol-LedToken-doTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != masterWallet

IRs:
TMP_171(bool) = msg.sender != masterWallet
CONDITION TMP_171"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(transfersEnabled)

IRs:
TMP_172(None) = SOLIDITY_CALL require(bool)(transfersEnabled)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(masterTransfersEnabled)

IRs:
TMP_173(None) = SOLIDITY_CALL require(bool)(masterTransfersEnabled)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_174(bool) = _amount > 0
TMP_175(None) = SOLIDITY_CALL require(bool)(TMP_174)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(parentSnapShotBlock < block.number)

IRs:
TMP_176(bool) = parentSnapShotBlock < block.number
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)((_to != address(0)) && (_to != address(this)))

IRs:
TMP_178 = CONVERT 0 to address
TMP_179(bool) = _to != TMP_178
TMP_180 = CONVERT this to address
TMP_181(bool) = _to != TMP_180
TMP_182(bool) = TMP_179 && TMP_181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
previousBalanceFrom = balanceOfAt(_from,block.number)

IRs:
TMP_184(uint256) = INTERNAL_CALL, LedToken.balanceOfAt(address,uint256)(_from,block.number)
previousBalanceFrom(uint256) := TMP_184(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(previousBalanceFrom >= _amount)

IRs:
TMP_185(bool) = previousBalanceFrom >= _amount
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
updateValueAtNow(balances[_from],previousBalanceFrom - _amount)

IRs:
REF_43(LedToken.Checkpoint[]) -> balances[_from]
TMP_187(uint256) = previousBalanceFrom - _amount
INTERNAL_CALL, LedToken.updateValueAtNow(LedToken.Checkpoint[],uint256)(REF_43,TMP_187)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
previousBalanceTo = balanceOfAt(_to,block.number)

IRs:
TMP_189(uint256) = INTERNAL_CALL, LedToken.balanceOfAt(address,uint256)(_to,block.number)
previousBalanceTo(uint256) := TMP_189(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(previousBalanceTo + _amount >= previousBalanceTo)

IRs:
TMP_190(uint256) = previousBalanceTo + _amount
TMP_191(bool) = TMP_190 >= previousBalanceTo
TMP_192(None) = SOLIDITY_CALL require(bool)(TMP_191)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateValueAtNow(balances[_to],previousBalanceTo + _amount)

IRs:
REF_44(LedToken.Checkpoint[]) -> balances[_to]
TMP_193(uint256) = previousBalanceTo + _amount
INTERNAL_CALL, LedToken.updateValueAtNow(LedToken.Checkpoint[],uint256)(REF_44,TMP_193)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2978.sol-LedToken-enableMasterTransfers(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
masterTransfersEnabled = _value

IRs:
masterTransfersEnabled(bool) := _value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
2->1;
}
// Function: 2978.sol-LedToken-enableTransfers(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfersEnabled = _value

IRs:
transfersEnabled(bool) := _value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
2->1;
}
// Function: 2978.sol-LedToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
4->1;
}
// Function: 2978.sol-LedToken-getValueAt(LedToken.Checkpoint[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_checkpoints.length == 0

IRs:
REF_53 -> LENGTH _checkpoints
TMP_224(bool) = REF_53 == 0
CONDITION TMP_224"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_block >= _checkpoints[_checkpoints.length - 1].fromBlock

IRs:
REF_54 -> LENGTH _checkpoints
TMP_225(uint256) = REF_54 - 1
REF_55(LedToken.Checkpoint) -> _checkpoints[TMP_225]
REF_56(uint128) -> REF_55.fromBlock
TMP_226(bool) = _block >= REF_56
CONDITION TMP_226"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
_checkpoints[_checkpoints.length - 1].value

IRs:
REF_57 -> LENGTH _checkpoints
TMP_227(uint256) = REF_57 - 1
REF_58(LedToken.Checkpoint) -> _checkpoints[TMP_227]
REF_59(uint128) -> REF_58.value
RETURN REF_59"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_block < _checkpoints[0].fromBlock

IRs:
REF_60(LedToken.Checkpoint) -> _checkpoints[0]
REF_61(uint128) -> REF_60.fromBlock
TMP_228(bool) = _block < REF_61
CONDITION TMP_228"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
min = 0

IRs:
min(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
max = _checkpoints.length - 1

IRs:
REF_62 -> LENGTH _checkpoints
TMP_229(uint256) = REF_62 - 1
max(uint256) := TMP_229(uint256)"];
11->12;
12[label="Node Type: BEGIN_LOOP 12
"];
12->13;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
max > min

IRs:
TMP_230(bool) = max > min
CONDITION TMP_230"];
13->14[label="True"];
13->19[label="False"];
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
mid = (max + min + 1) / 2

IRs:
TMP_231(uint256) = max + min
TMP_232(uint256) = TMP_231 + 1
TMP_233(uint256) = TMP_232 / 2
mid(uint256) := TMP_233(uint256)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
_checkpoints[mid].fromBlock <= _block

IRs:
REF_63(LedToken.Checkpoint) -> _checkpoints[mid]
REF_64(uint128) -> REF_63.fromBlock
TMP_234(bool) = REF_64 <= _block
CONDITION TMP_234"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
min = mid

IRs:
min(uint256) := mid(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
max = mid - 1

IRs:
TMP_235(uint256) = mid - 1
max(uint256) := TMP_235(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->13;
19[label="Node Type: END_LOOP 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
_checkpoints[min].value

IRs:
REF_65(LedToken.Checkpoint) -> _checkpoints[min]
REF_66(uint128) -> REF_65.value
RETURN REF_66"];
}
// Function: 2978.sol-LedToken-importPresaleBalances(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(presaleBalancesLocked == false)

IRs:
TMP_211(bool) = presaleBalancesLocked == False
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _addresses.length

IRs:
REF_46 -> LENGTH _addresses
TMP_213(bool) = i < REF_46
CONDITION TMP_213"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupplyAtCheckpoint += _balances[i]

IRs:
REF_47(uint256) -> _balances[i]
totalSupplyAtCheckpoint(uint256) = totalSupplyAtCheckpoint + REF_47"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateValueAtNow(balances[_addresses[i]],_balances[i])

IRs:
REF_48(address) -> _addresses[i]
REF_49(LedToken.Checkpoint[]) -> balances[REF_48]
REF_50(uint256) -> _balances[i]
INTERNAL_CALL, LedToken.updateValueAtNow(LedToken.Checkpoint[],uint256)(REF_49,REF_50)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
updateValueAtNow(totalSupplyHistory,totalSupplyAtCheckpoint)

IRs:
INTERNAL_CALL, LedToken.updateValueAtNow(LedToken.Checkpoint[],uint256)(totalSupplyHistory,totalSupplyAtCheckpoint)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(0,_addresses[i],_balances[i])

IRs:
REF_51(address) -> _addresses[i]
REF_52(uint256) -> _balances[i]
Emit Transfer(0,REF_51,REF_52)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_217(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
12->1;
}
// Function: 2978.sol-LedToken-lockPresaleBalances()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
presaleBalancesLocked = true

IRs:
presaleBalancesLocked(bool) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
3->1;
}
// Function: 2978.sol-LedToken-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_245(bool) = a < b
CONDITION TMP_245"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 2978.sol-LedToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
curTotalSupply = totalSupply()

IRs:
TMP_196(uint256) = INTERNAL_CALL, LedToken.totalSupply()()
curTotalSupply(uint256) := TMP_196(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
previousBalanceTo = balanceOf(_owner)

IRs:
TMP_197(uint256) = INTERNAL_CALL, LedToken.balanceOf(address)(_owner)
previousBalanceTo(uint256) := TMP_197(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(curTotalSupply + _amount >= curTotalSupply)

IRs:
TMP_198(uint256) = curTotalSupply + _amount
TMP_199(bool) = TMP_198 >= curTotalSupply
TMP_200(None) = SOLIDITY_CALL require(bool)(TMP_199)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(previousBalanceTo + _amount >= previousBalanceTo)

IRs:
TMP_201(uint256) = previousBalanceTo + _amount
TMP_202(bool) = TMP_201 >= previousBalanceTo
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
updateValueAtNow(totalSupplyHistory,curTotalSupply + _amount)

IRs:
TMP_204(uint256) = curTotalSupply + _amount
INTERNAL_CALL, LedToken.updateValueAtNow(LedToken.Checkpoint[],uint256)(totalSupplyHistory,TMP_204)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
updateValueAtNow(balances[_owner],previousBalanceTo + _amount)

IRs:
REF_45(LedToken.Checkpoint[]) -> balances[_owner]
TMP_206(uint256) = previousBalanceTo + _amount
INTERNAL_CALL, LedToken.updateValueAtNow(LedToken.Checkpoint[],uint256)(REF_45,TMP_206)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(0,_owner,_amount)

IRs:
Emit Transfer(0,_owner,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, LedToken.canMint()()"];
10->1;
}
// Function: 2978.sol-LedToken-onlyController()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller)

IRs:
TMP_253(bool) = msg.sender == controller
TMP_254(None) = SOLIDITY_CALL require(bool)(TMP_253)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-LedToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
masterWallet = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4

IRs:
masterWallet(address) := 767111519343181381934891368477998475932213935860(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
presaleBalancesLocked = false

IRs:
presaleBalancesLocked(bool) := False(bool)"];
}
// Function: 2978.sol-LedToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupplyAt(block.number)

IRs:
TMP_140(uint256) = INTERNAL_CALL, LedToken.totalSupplyAt(uint256)(block.number)
RETURN TMP_140"];
}
// Function: 2978.sol-LedToken-totalSupplyAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)

IRs:
REF_21 -> LENGTH totalSupplyHistory
TMP_141(bool) = REF_21 == 0
REF_22(LedToken.Checkpoint) -> totalSupplyHistory[0]
REF_23(uint128) -> REF_22.fromBlock
TMP_142(bool) = REF_23 > _blockNumber
TMP_143(bool) = TMP_141 || TMP_142
CONDITION TMP_143"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
address(parentToken) != 0x0

IRs:
TMP_144 = CONVERT parentToken to address
TMP_145(bool) = TMP_144 != 0
CONDITION TMP_145"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
parentToken.totalSupplyAt(min(_blockNumber,parentSnapShotBlock))

IRs:
TMP_146(uint256) = INTERNAL_CALL, LedToken.min(uint256,uint256)(_blockNumber,parentSnapShotBlock)
TMP_147(uint256) = HIGH_LEVEL_CALL, dest:parentToken(LedTokenInterface), function:totalSupplyAt, arguments:['TMP_146']  
RETURN TMP_147"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: RETURN 6

EXPRESSION:
getValueAt(totalSupplyHistory,_blockNumber)

IRs:
TMP_148(uint256) = INTERNAL_CALL, LedToken.getValueAt(LedToken.Checkpoint[],uint256)(totalSupplyHistory,_blockNumber)
RETURN TMP_148"];
}
// Function: 2978.sol-LedToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
doTransfer(msg.sender,_to,_amount)

IRs:
TMP_158(bool) = INTERNAL_CALL, LedToken.doTransfer(address,address,uint256)(msg.sender,_to,_amount)
RETURN TMP_158"];
2[label="Node Type: RETURN 2

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2978.sol-LedToken-transferControl(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newController != address(0)

IRs:
TMP_135 = CONVERT 0 to address
TMP_136(bool) = newController != TMP_135
CONDITION TMP_136"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller = newController

IRs:
controller(address) := newController(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
4->1;
}
// Function: 2978.sol-LedToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_from][msg.sender] >= _amount)

IRs:
REF_32(mapping(address => uint256)) -> allowed[_from]
REF_33(uint256) -> REF_32[msg.sender]
TMP_159(bool) = REF_33 >= _amount
TMP_160(None) = SOLIDITY_CALL require(bool)(TMP_159)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] -= _amount

IRs:
REF_34(mapping(address => uint256)) -> allowed[_from]
REF_35(uint256) -> REF_34[msg.sender]
REF_35(-> allowed) = REF_35 - _amount"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
doTransfer(_from,_to,_amount)

IRs:
TMP_161(bool) = INTERNAL_CALL, LedToken.doTransfer(address,address,uint256)(_from,_to,_amount)
RETURN TMP_161"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2978.sol-LedToken-updateValueAtNow(LedToken.Checkpoint[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_checkpoints.length == 0) || (_checkpoints[_checkpoints.length - 1].fromBlock < block.number)

IRs:
REF_67 -> LENGTH _checkpoints
TMP_236(bool) = REF_67 == 0
REF_68 -> LENGTH _checkpoints
TMP_237(uint256) = REF_68 - 1
REF_69(LedToken.Checkpoint) -> _checkpoints[TMP_237]
REF_70(uint128) -> REF_69.fromBlock
TMP_238(bool) = REF_70 < block.number
TMP_239(bool) = TMP_236 || TMP_238
CONDITION TMP_239"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newCheckPoint = _checkpoints[_checkpoints.length ++]

IRs:
REF_71 -> LENGTH _checkpoints
TMP_240(uint256) := REF_71(uint256)
REF_71(-> _checkpoints) = REF_71 + 1
REF_72(LedToken.Checkpoint) -> _checkpoints[TMP_240]
newCheckPoint(LedToken.Checkpoint) := REF_72(LedToken.Checkpoint)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newCheckPoint.fromBlock = uint128(block.number)

IRs:
REF_73(uint128) -> newCheckPoint.fromBlock
TMP_241 = CONVERT block.number to uint128
REF_73(uint128) (->newCheckPoint) := TMP_241(uint128)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newCheckPoint.value = uint128(_value)

IRs:
REF_74(uint128) -> newCheckPoint.value
TMP_242 = CONVERT _value to uint128
REF_74(uint128) (->newCheckPoint) := TMP_242(uint128)"];
4->7;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
oldCheckPoint = _checkpoints[_checkpoints.length - 1]

IRs:
REF_75 -> LENGTH _checkpoints
TMP_243(uint256) = REF_75 - 1
REF_76(LedToken.Checkpoint) -> _checkpoints[TMP_243]
oldCheckPoint(LedToken.Checkpoint) := REF_76(LedToken.Checkpoint)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oldCheckPoint.value = uint128(_value)

IRs:
REF_77(uint128) -> oldCheckPoint.value
TMP_244 = CONVERT _value to uint128
REF_77(uint128) (->oldCheckPoint) := TMP_244(uint128)"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 2978.sol-LedTokenInterface-allowance(address,address)
digraph{
}
// Function: 2978.sol-LedTokenInterface-approve(address,uint256)
digraph{
}
// Function: 2978.sol-LedTokenInterface-approveAndCall(address,uint256,bytes)
digraph{
}
// Function: 2978.sol-LedTokenInterface-balanceOf(address)
digraph{
}
// Function: 2978.sol-LedTokenInterface-balanceOfAt(address,uint256)
digraph{
}
// Function: 2978.sol-LedTokenInterface-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = msg.sender

IRs:
controller(address) := msg.sender(address)"];
}
// Function: 2978.sol-LedTokenInterface-createCloneToken(uint256,string,string)
digraph{
}
// Function: 2978.sol-LedTokenInterface-enableMasterTransfers(bool)
digraph{
}
// Function: 2978.sol-LedTokenInterface-enableTransfers(bool)
digraph{
}
// Function: 2978.sol-LedTokenInterface-finishMinting()
digraph{
}
// Function: 2978.sol-LedTokenInterface-importPresaleBalances(address[],uint256[],address)
digraph{
}
// Function: 2978.sol-LedTokenInterface-lockPresaleBalances()
digraph{
}
// Function: 2978.sol-LedTokenInterface-mint(address,uint256)
digraph{
}
// Function: 2978.sol-LedTokenInterface-onlyController()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller)

IRs:
TMP_260(bool) = msg.sender == controller
TMP_261(None) = SOLIDITY_CALL require(bool)(TMP_260)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-LedTokenInterface-totalSupply()
digraph{
}
// Function: 2978.sol-LedTokenInterface-totalSupplyAt(uint256)
digraph{
}
// Function: 2978.sol-LedTokenInterface-transfer(address,uint256)
digraph{
}
// Function: 2978.sol-LedTokenInterface-transferControl(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newController != address(0)

IRs:
TMP_257 = CONVERT 0 to address
TMP_258(bool) = newController != TMP_257
CONDITION TMP_258"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller = newController

IRs:
controller(address) := newController(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controllable.onlyController()()"];
4->1;
}
// Function: 2978.sol-LedTokenInterface-transferFrom(address,address,uint256)
digraph{
}
// Function: 2978.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2978.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2978.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2978.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_14(bool) = msg.sender == owner
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 2978.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 2978.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = newOwner != TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2978.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
5->1;
}
// Function: 2978.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_16 = UnaryType.BANG paused 
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_18(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Presale-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.balanceOf(_owner)

IRs:
TMP_270(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:balanceOf, arguments:['_owner']  
RETURN TMP_270"];
}
// Function: 2978.sol-Presale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != 0x0)

IRs:
TMP_299(bool) = _beneficiary != 0
TMP_300(None) = SOLIDITY_CALL require(bool)(TMP_299)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_301(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_302(None) = SOLIDITY_CALL require(bool)(TMP_301)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE)

IRs:
TMP_303(bool) = weiAmount >= MIN_PURCHASE_OTHERSALES
TMP_304(bool) = weiAmount <= MAX_PURCHASE
TMP_305(bool) = TMP_303 && TMP_304
TMP_306(None) = SOLIDITY_CALL require(bool)(TMP_305)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
priceInWei = PRESALE_BASE_PRICE_IN_WEI

IRs:
priceInWei(uint256) := PRESALE_BASE_PRICE_IN_WEI(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalWeiRaised = totalWeiRaised.add(weiAmount)

IRs:
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalWeiRaised', 'weiAmount'] 
totalWeiRaised(uint256) := TMP_307(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
bonusPercentage = determineBonus(weiAmount)

IRs:
TMP_308(uint256) = INTERNAL_CALL, Presale.determineBonus(uint256)(weiAmount)
bonusPercentage(uint256) := TMP_308(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
initialTokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei)

IRs:
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'DECIMALS_MULTIPLIER'] 
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_309', 'priceInWei'] 
initialTokens(uint256) := TMP_310(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
bonusPercentage > 0

IRs:
TMP_311(bool) = bonusPercentage > 0
CONDITION TMP_311"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
initialDivided = initialTokens.div(100)

IRs:
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['initialTokens', '100'] 
initialDivided(uint256) := TMP_312(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
bonusTokens = initialDivided.mul(bonusPercentage)

IRs:
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['initialDivided', 'bonusPercentage'] 
bonusTokens(uint256) := TMP_313(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
bonusTokens = 0

IRs:
bonusTokens(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
tokens = initialTokens.add(bonusTokens)

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['initialTokens', 'bonusTokens'] 
tokens(uint256) := TMP_314(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokensMinted = tokensMinted.add(tokens)

IRs:
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'tokens'] 
tokensMinted(uint256) := TMP_315(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
require(bool)(tokensMinted < cap)

IRs:
TMP_316(bool) = tokensMinted < cap
TMP_317(None) = SOLIDITY_CALL require(bool)(TMP_316)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
contributors = contributors.add(1)

IRs:
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contributors', '1'] 
contributors(uint256) := TMP_318(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ledToken.mint(_beneficiary,tokens)

IRs:
TMP_319(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['_beneficiary', 'tokens']  "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
whenNotFinalized()

IRs:
MODIFIER_CALL, Crowdsale.whenNotFinalized()()"];
23->1;
}
// Function: 2978.sol-Presale-changeController(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isContract(_newController))

IRs:
TMP_271(bool) = INTERNAL_CALL, Crowdsale.isContract(address)(_newController)
TMP_272(None) = SOLIDITY_CALL require(bool)(TMP_271)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ledToken.transferControl(_newController)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['_newController']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2978.sol-Presale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2978.sol-Presale-constructor(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ledToken = LedTokenInterface(_tokenAddress)

IRs:
TMP_291 = CONVERT _tokenAddress to LedTokenInterface
ledToken(LedTokenInterface) := TMP_291(LedTokenInterface)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(_tokenAddress != 0x0)

IRs:
TMP_292(bool) = _tokenAddress != 0
TMP_293(None) = SOLIDITY_CALL assert(bool)(TMP_292)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(_startTime > 0)

IRs:
TMP_294(bool) = _startTime > 0
TMP_295(None) = SOLIDITY_CALL assert(bool)(TMP_294)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_endTime > _startTime)

IRs:
TMP_296(bool) = _endTime > _startTime
TMP_297(None) = SOLIDITY_CALL assert(bool)(TMP_296)"];
}
// Function: 2978.sol-Presale-determineBonus(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_wei > PRESALE_LEVEL_1

IRs:
TMP_324(bool) = _wei > PRESALE_LEVEL_1
CONDITION TMP_324"];
1->2[label="True"];
1->15[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
_wei > PRESALE_LEVEL_2

IRs:
TMP_325(bool) = _wei > PRESALE_LEVEL_2
CONDITION TMP_325"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
_wei > PRESALE_LEVEL_3

IRs:
TMP_326(bool) = _wei > PRESALE_LEVEL_3
CONDITION TMP_326"];
3->4[label="True"];
3->11[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_wei > PRESALE_LEVEL_4

IRs:
TMP_327(bool) = _wei > PRESALE_LEVEL_4
CONDITION TMP_327"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
_wei > PRESALE_LEVEL_5

IRs:
TMP_328(bool) = _wei > PRESALE_LEVEL_5
CONDITION TMP_328"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
PRESALE_PERCENTAGE_5

IRs:
RETURN PRESALE_PERCENTAGE_5"];
7[label="Node Type: RETURN 7

EXPRESSION:
PRESALE_PERCENTAGE_4

IRs:
RETURN PRESALE_PERCENTAGE_4"];
9[label="Node Type: RETURN 9

EXPRESSION:
PRESALE_PERCENTAGE_3

IRs:
RETURN PRESALE_PERCENTAGE_3"];
11[label="Node Type: RETURN 11

EXPRESSION:
PRESALE_PERCENTAGE_2

IRs:
RETURN PRESALE_PERCENTAGE_2"];
13[label="Node Type: RETURN 13

EXPRESSION:
PRESALE_PERCENTAGE_1

IRs:
RETURN PRESALE_PERCENTAGE_1"];
15[label="Node Type: RETURN 15

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 2978.sol-Presale-enableMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(true)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['True']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-Presale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Presale.buyTokens(address)(msg.sender)"];
}
// Function: 2978.sol-Presale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_329(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_330 = UnaryType.BANG finalized 
TMP_331(None) = SOLIDITY_CALL require(bool)(TMP_330)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
surplusTokens = cap - tokensMinted

IRs:
TMP_332(uint256) = cap - tokensMinted
surplusTokens(uint256) := TMP_332(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ledToken.mint(ledMultiSig,surplusTokens)

IRs:
TMP_333(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['ledMultiSig', 'surplusTokens']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ledToken.transferControl(owner)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['owner']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 2978.sol-Presale-forceStart()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
started = true

IRs:
started(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-Presale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledMultiSig.transfer(msg.value)

IRs:
Transfer dest:ledMultiSig value:msg.value"];
}
// Function: 2978.sol-Presale-getInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
symbol = LED

IRs:
symbol(string) := LED(string)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
transfersEnabled = ledToken.transfersEnabled()

IRs:
TMP_337(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transfersEnabled, arguments:[]  
transfersEnabled(bool) := TMP_337(bool)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime)

IRs:
RETURN TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime"];
}
// Function: 2978.sol-Presale-getInfoLevels()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(PRESALE_LEVEL_1,PRESALE_LEVEL_2,PRESALE_LEVEL_3,PRESALE_LEVEL_4,PRESALE_LEVEL_5,PRESALE_PERCENTAGE_1,PRESALE_PERCENTAGE_2,PRESALE_PERCENTAGE_3,PRESALE_PERCENTAGE_4,PRESALE_PERCENTAGE_5)

IRs:
RETURN PRESALE_LEVEL_1,PRESALE_LEVEL_2,PRESALE_LEVEL_3,PRESALE_LEVEL_4,PRESALE_LEVEL_5,PRESALE_PERCENTAGE_1,PRESALE_PERCENTAGE_2,PRESALE_PERCENTAGE_3,PRESALE_PERCENTAGE_4,PRESALE_PERCENTAGE_5"];
}
// Function: 2978.sol-Presale-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == 0

IRs:
TMP_280(bool) = _addr == 0
CONDITION TMP_280"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
size > 0

IRs:
TMP_281(bool) = size > 0
RETURN TMP_281"];
}
// Function: 2978.sol-Presale-lockMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(false)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['False']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-Presale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_345(bool) = msg.sender == owner
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Presale-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 2978.sol-Presale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
PRIVATESALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PRESALE_BASE_PRICE_IN_WEI = 600000000000000

IRs:
PRESALE_BASE_PRICE_IN_WEI(uint256) := 600000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ICO_BASE_PRICE_IN_WEI = 800000000000000

IRs:
ICO_BASE_PRICE_IN_WEI(uint256) := 800000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
FIRSTSALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MIN_PURCHASE_OTHERSALES = 80000000000000000

IRs:
MIN_PURCHASE_OTHERSALES(uint256) := 80000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MIN_PURCHASE = 1000000000000000000

IRs:
MIN_PURCHASE(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_PURCHASE = 1000000000000000000000

IRs:
MAX_PURCHASE(uint256) := 1000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
PRESALE_PERCENTAGE_1 = 10

IRs:
PRESALE_PERCENTAGE_1(uint256) := 10(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_PERCENTAGE_2 = 15

IRs:
PRESALE_PERCENTAGE_2(uint256) := 15(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PRESALE_PERCENTAGE_3 = 20

IRs:
PRESALE_PERCENTAGE_3(uint256) := 20(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PRESALE_PERCENTAGE_4 = 25

IRs:
PRESALE_PERCENTAGE_4(uint256) := 25(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PRESALE_PERCENTAGE_5 = 35

IRs:
PRESALE_PERCENTAGE_5(uint256) := 35(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
ICO_PERCENTAGE_1 = 5

IRs:
ICO_PERCENTAGE_1(uint256) := 5(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
ICO_PERCENTAGE_2 = 10

IRs:
ICO_PERCENTAGE_2(uint256) := 10(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ICO_PERCENTAGE_3 = 15

IRs:
ICO_PERCENTAGE_3(uint256) := 15(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ICO_PERCENTAGE_4 = 20

IRs:
ICO_PERCENTAGE_4(uint256) := 20(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ICO_PERCENTAGE_5 = 25

IRs:
ICO_PERCENTAGE_5(uint256) := 25(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
PRESALE_LEVEL_1 = 5000000000000000000

IRs:
PRESALE_LEVEL_1(uint256) := 5000000000000000000(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
PRESALE_LEVEL_2 = 10000000000000000000

IRs:
PRESALE_LEVEL_2(uint256) := 10000000000000000000(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
PRESALE_LEVEL_3 = 15000000000000000000

IRs:
PRESALE_LEVEL_3(uint256) := 15000000000000000000(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
PRESALE_LEVEL_4 = 20000000000000000000

IRs:
PRESALE_LEVEL_4(uint256) := 20000000000000000000(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
PRESALE_LEVEL_5 = 25000000000000000000

IRs:
PRESALE_LEVEL_5(uint256) := 25000000000000000000(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
ICO_LEVEL_1 = 6666666666666666666

IRs:
ICO_LEVEL_1(uint256) := 6666666666666666666(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
ICO_LEVEL_2 = 13333333333333333333

IRs:
ICO_LEVEL_2(uint256) := 13333333333333333333(uint256)"];
23->24;
24[label="Node Type: OTHER_ENTRYPOINT 24

EXPRESSION:
ICO_LEVEL_3 = 20000000000000000000

IRs:
ICO_LEVEL_3(uint256) := 20000000000000000000(uint256)"];
24->25;
25[label="Node Type: OTHER_ENTRYPOINT 25

EXPRESSION:
ICO_LEVEL_4 = 26666666666666666666

IRs:
ICO_LEVEL_4(uint256) := 26666666666666666666(uint256)"];
25->26;
26[label="Node Type: OTHER_ENTRYPOINT 26

EXPRESSION:
ICO_LEVEL_5 = 33333333333333333333

IRs:
ICO_LEVEL_5(uint256) := 33333333333333333333(uint256)"];
26->27;
27[label="Node Type: OTHER_ENTRYPOINT 27

EXPRESSION:
PRIVATESALE_TOKENCAP = 18750000

IRs:
PRIVATESALE_TOKENCAP(uint256) := 18750000(uint256)"];
27->28;
28[label="Node Type: OTHER_ENTRYPOINT 28

EXPRESSION:
PRESALE_TOKENCAP = 18750000

IRs:
PRESALE_TOKENCAP(uint256) := 18750000(uint256)"];
28->29;
29[label="Node Type: OTHER_ENTRYPOINT 29

EXPRESSION:
ICO_TOKENCAP = 22500000

IRs:
ICO_TOKENCAP(uint256) := 22500000(uint256)"];
29->30;
30[label="Node Type: OTHER_ENTRYPOINT 30

EXPRESSION:
FIRSTSALE_TOKENCAP = 5000000

IRs:
FIRSTSALE_TOKENCAP(uint256) := 5000000(uint256)"];
30->31;
31[label="Node Type: OTHER_ENTRYPOINT 31

EXPRESSION:
LEDTEAM_TOKENS = 35000000

IRs:
LEDTEAM_TOKENS(uint256) := 35000000(uint256)"];
31->32;
32[label="Node Type: OTHER_ENTRYPOINT 32

EXPRESSION:
TOTAL_TOKENCAP = 100000000

IRs:
TOTAL_TOKENCAP(uint256) := 100000000(uint256)"];
32->33;
33[label="Node Type: OTHER_ENTRYPOINT 33

EXPRESSION:
DECIMALS_MULTIPLIER = 1000000000000000000

IRs:
DECIMALS_MULTIPLIER(uint256) := 1000000000000000000(uint256)"];
33->34;
34[label="Node Type: OTHER_ENTRYPOINT 34

EXPRESSION:
LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4

IRs:
LED_MULTISIG(address) := 767111519343181381934891368477998475932213935860(uint256)"];
}
// Function: 2978.sol-Presale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ledMultiSig = LED_MULTISIG

IRs:
ledMultiSig(address) := LED_MULTISIG(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
started = false

IRs:
started(bool) := False(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenCap = PRESALE_TOKENCAP

IRs:
tokenCap(uint256) := PRESALE_TOKENCAP(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
cap = tokenCap * DECIMALS_MULTIPLIER

IRs:
TMP_338(uint256) = tokenCap * DECIMALS_MULTIPLIER
cap(uint256) := TMP_338(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
weiCap = tokenCap * PRESALE_BASE_PRICE_IN_WEI

IRs:
TMP_339(uint256) = tokenCap * PRESALE_BASE_PRICE_IN_WEI
weiCap(uint256) := TMP_339(uint256)"];
}
// Function: 2978.sol-Presale-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.totalSupply()

IRs:
TMP_269(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:totalSupply, arguments:[]  
RETURN TMP_269"];
}
// Function: 2978.sol-Presale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_288 = CONVERT 0 to address
TMP_289(bool) = newOwner != TMP_288
CONDITION TMP_289"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2978.sol-Presale-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
5->1;
}
// Function: 2978.sol-Presale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
current = now

IRs:
current(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
presaleStarted = (current >= startTime || started)

IRs:
TMP_263(bool) = current >= startTime
TMP_264(bool) = TMP_263 || started
presaleStarted(bool) := TMP_264(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
presaleNotEnded = current <= endTime

IRs:
TMP_265(bool) = current <= endTime
presaleNotEnded(bool) := TMP_265(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_266(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_266(bool)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
nonZeroPurchase && presaleStarted && presaleNotEnded

IRs:
TMP_267(bool) = nonZeroPurchase && presaleStarted
TMP_268(bool) = TMP_267 && presaleNotEnded
RETURN TMP_268"];
}
// Function: 2978.sol-Presale-whenNotFinalized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_340 = UnaryType.BANG finalized 
TMP_341(None) = SOLIDITY_CALL require(bool)(TMP_340)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Presale-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_342 = UnaryType.BANG paused 
TMP_343(None) = SOLIDITY_CALL require(bool)(TMP_342)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-Presale-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_344(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-PrivateSale-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.balanceOf(_owner)

IRs:
TMP_355(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:balanceOf, arguments:['_owner']  
RETURN TMP_355"];
}
// Function: 2978.sol-PrivateSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != 0x0)

IRs:
TMP_384(bool) = _beneficiary != 0
TMP_385(None) = SOLIDITY_CALL require(bool)(TMP_384)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_386(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_387(None) = SOLIDITY_CALL require(bool)(TMP_386)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE)

IRs:
TMP_388(bool) = weiAmount >= MIN_PURCHASE_OTHERSALES
TMP_389(bool) = weiAmount <= MAX_PURCHASE
TMP_390(bool) = TMP_388 && TMP_389
TMP_391(None) = SOLIDITY_CALL require(bool)(TMP_390)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
priceInWei = PRIVATESALE_BASE_PRICE_IN_WEI

IRs:
priceInWei(uint256) := PRIVATESALE_BASE_PRICE_IN_WEI(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalWeiRaised = totalWeiRaised.add(weiAmount)

IRs:
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalWeiRaised', 'weiAmount'] 
totalWeiRaised(uint256) := TMP_392(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei)

IRs:
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'DECIMALS_MULTIPLIER'] 
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_393', 'priceInWei'] 
tokens(uint256) := TMP_394(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokensMinted = tokensMinted.add(tokens)

IRs:
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'tokens'] 
tokensMinted(uint256) := TMP_395(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(tokensMinted < cap)

IRs:
TMP_396(bool) = tokensMinted < cap
TMP_397(None) = SOLIDITY_CALL require(bool)(TMP_396)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
contributors = contributors.add(1)

IRs:
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contributors', '1'] 
contributors(uint256) := TMP_398(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ledToken.mint(_beneficiary,tokens)

IRs:
TMP_399(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['_beneficiary', 'tokens']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenNotFinalized()

IRs:
MODIFIER_CALL, Crowdsale.whenNotFinalized()()"];
15->1;
}
// Function: 2978.sol-PrivateSale-changeController(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isContract(_newController))

IRs:
TMP_356(bool) = INTERNAL_CALL, Crowdsale.isContract(address)(_newController)
TMP_357(None) = SOLIDITY_CALL require(bool)(TMP_356)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ledToken.transferControl(_newController)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['_newController']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2978.sol-PrivateSale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2978.sol-PrivateSale-constructor(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ledToken = LedTokenInterface(_tokenAddress)

IRs:
TMP_376 = CONVERT _tokenAddress to LedTokenInterface
ledToken(LedTokenInterface) := TMP_376(LedTokenInterface)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(_tokenAddress != 0x0)

IRs:
TMP_377(bool) = _tokenAddress != 0
TMP_378(None) = SOLIDITY_CALL assert(bool)(TMP_377)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(_startTime > 0)

IRs:
TMP_379(bool) = _startTime > 0
TMP_380(None) = SOLIDITY_CALL assert(bool)(TMP_379)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_endTime > _startTime)

IRs:
TMP_381(bool) = _endTime > _startTime
TMP_382(None) = SOLIDITY_CALL assert(bool)(TMP_381)"];
}
// Function: 2978.sol-PrivateSale-enableMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(true)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['True']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-PrivateSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, PrivateSale.buyTokens(address)(msg.sender)"];
}
// Function: 2978.sol-PrivateSale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_404(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_405 = UnaryType.BANG finalized 
TMP_406(None) = SOLIDITY_CALL require(bool)(TMP_405)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
surplusTokens = cap - tokensMinted

IRs:
TMP_407(uint256) = cap - tokensMinted
surplusTokens(uint256) := TMP_407(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ledToken.mint(ledMultiSig,surplusTokens)

IRs:
TMP_408(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['ledMultiSig', 'surplusTokens']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ledToken.transferControl(owner)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['owner']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 2978.sol-PrivateSale-forceStart()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
started = true

IRs:
started(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-PrivateSale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledMultiSig.transfer(msg.value)

IRs:
Transfer dest:ledMultiSig value:msg.value"];
}
// Function: 2978.sol-PrivateSale-getInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
symbol = LED

IRs:
symbol(string) := LED(string)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
transfersEnabled = ledToken.transfersEnabled()

IRs:
TMP_412(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transfersEnabled, arguments:[]  
transfersEnabled(bool) := TMP_412(bool)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime)

IRs:
RETURN TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime"];
}
// Function: 2978.sol-PrivateSale-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == 0

IRs:
TMP_365(bool) = _addr == 0
CONDITION TMP_365"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
size > 0

IRs:
TMP_366(bool) = size > 0
RETURN TMP_366"];
}
// Function: 2978.sol-PrivateSale-lockMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(false)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['False']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-PrivateSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_420(bool) = msg.sender == owner
TMP_421(None) = SOLIDITY_CALL require(bool)(TMP_420)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-PrivateSale-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 2978.sol-PrivateSale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
PRIVATESALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PRESALE_BASE_PRICE_IN_WEI = 600000000000000

IRs:
PRESALE_BASE_PRICE_IN_WEI(uint256) := 600000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ICO_BASE_PRICE_IN_WEI = 800000000000000

IRs:
ICO_BASE_PRICE_IN_WEI(uint256) := 800000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
FIRSTSALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MIN_PURCHASE_OTHERSALES = 80000000000000000

IRs:
MIN_PURCHASE_OTHERSALES(uint256) := 80000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MIN_PURCHASE = 1000000000000000000

IRs:
MIN_PURCHASE(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_PURCHASE = 1000000000000000000000

IRs:
MAX_PURCHASE(uint256) := 1000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
PRESALE_PERCENTAGE_1 = 10

IRs:
PRESALE_PERCENTAGE_1(uint256) := 10(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_PERCENTAGE_2 = 15

IRs:
PRESALE_PERCENTAGE_2(uint256) := 15(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PRESALE_PERCENTAGE_3 = 20

IRs:
PRESALE_PERCENTAGE_3(uint256) := 20(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PRESALE_PERCENTAGE_4 = 25

IRs:
PRESALE_PERCENTAGE_4(uint256) := 25(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PRESALE_PERCENTAGE_5 = 35

IRs:
PRESALE_PERCENTAGE_5(uint256) := 35(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
ICO_PERCENTAGE_1 = 5

IRs:
ICO_PERCENTAGE_1(uint256) := 5(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
ICO_PERCENTAGE_2 = 10

IRs:
ICO_PERCENTAGE_2(uint256) := 10(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ICO_PERCENTAGE_3 = 15

IRs:
ICO_PERCENTAGE_3(uint256) := 15(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ICO_PERCENTAGE_4 = 20

IRs:
ICO_PERCENTAGE_4(uint256) := 20(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ICO_PERCENTAGE_5 = 25

IRs:
ICO_PERCENTAGE_5(uint256) := 25(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
PRESALE_LEVEL_1 = 5000000000000000000

IRs:
PRESALE_LEVEL_1(uint256) := 5000000000000000000(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
PRESALE_LEVEL_2 = 10000000000000000000

IRs:
PRESALE_LEVEL_2(uint256) := 10000000000000000000(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
PRESALE_LEVEL_3 = 15000000000000000000

IRs:
PRESALE_LEVEL_3(uint256) := 15000000000000000000(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
PRESALE_LEVEL_4 = 20000000000000000000

IRs:
PRESALE_LEVEL_4(uint256) := 20000000000000000000(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
PRESALE_LEVEL_5 = 25000000000000000000

IRs:
PRESALE_LEVEL_5(uint256) := 25000000000000000000(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
ICO_LEVEL_1 = 6666666666666666666

IRs:
ICO_LEVEL_1(uint256) := 6666666666666666666(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
ICO_LEVEL_2 = 13333333333333333333

IRs:
ICO_LEVEL_2(uint256) := 13333333333333333333(uint256)"];
23->24;
24[label="Node Type: OTHER_ENTRYPOINT 24

EXPRESSION:
ICO_LEVEL_3 = 20000000000000000000

IRs:
ICO_LEVEL_3(uint256) := 20000000000000000000(uint256)"];
24->25;
25[label="Node Type: OTHER_ENTRYPOINT 25

EXPRESSION:
ICO_LEVEL_4 = 26666666666666666666

IRs:
ICO_LEVEL_4(uint256) := 26666666666666666666(uint256)"];
25->26;
26[label="Node Type: OTHER_ENTRYPOINT 26

EXPRESSION:
ICO_LEVEL_5 = 33333333333333333333

IRs:
ICO_LEVEL_5(uint256) := 33333333333333333333(uint256)"];
26->27;
27[label="Node Type: OTHER_ENTRYPOINT 27

EXPRESSION:
PRIVATESALE_TOKENCAP = 18750000

IRs:
PRIVATESALE_TOKENCAP(uint256) := 18750000(uint256)"];
27->28;
28[label="Node Type: OTHER_ENTRYPOINT 28

EXPRESSION:
PRESALE_TOKENCAP = 18750000

IRs:
PRESALE_TOKENCAP(uint256) := 18750000(uint256)"];
28->29;
29[label="Node Type: OTHER_ENTRYPOINT 29

EXPRESSION:
ICO_TOKENCAP = 22500000

IRs:
ICO_TOKENCAP(uint256) := 22500000(uint256)"];
29->30;
30[label="Node Type: OTHER_ENTRYPOINT 30

EXPRESSION:
FIRSTSALE_TOKENCAP = 5000000

IRs:
FIRSTSALE_TOKENCAP(uint256) := 5000000(uint256)"];
30->31;
31[label="Node Type: OTHER_ENTRYPOINT 31

EXPRESSION:
LEDTEAM_TOKENS = 35000000

IRs:
LEDTEAM_TOKENS(uint256) := 35000000(uint256)"];
31->32;
32[label="Node Type: OTHER_ENTRYPOINT 32

EXPRESSION:
TOTAL_TOKENCAP = 100000000

IRs:
TOTAL_TOKENCAP(uint256) := 100000000(uint256)"];
32->33;
33[label="Node Type: OTHER_ENTRYPOINT 33

EXPRESSION:
DECIMALS_MULTIPLIER = 1000000000000000000

IRs:
DECIMALS_MULTIPLIER(uint256) := 1000000000000000000(uint256)"];
33->34;
34[label="Node Type: OTHER_ENTRYPOINT 34

EXPRESSION:
LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4

IRs:
LED_MULTISIG(address) := 767111519343181381934891368477998475932213935860(uint256)"];
}
// Function: 2978.sol-PrivateSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ledMultiSig = LED_MULTISIG

IRs:
ledMultiSig(address) := LED_MULTISIG(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
started = false

IRs:
started(bool) := False(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenCap = PRIVATESALE_TOKENCAP

IRs:
tokenCap(uint256) := PRIVATESALE_TOKENCAP(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
cap = tokenCap * DECIMALS_MULTIPLIER

IRs:
TMP_413(uint256) = tokenCap * DECIMALS_MULTIPLIER
cap(uint256) := TMP_413(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
weiCap = tokenCap * PRIVATESALE_BASE_PRICE_IN_WEI

IRs:
TMP_414(uint256) = tokenCap * PRIVATESALE_BASE_PRICE_IN_WEI
weiCap(uint256) := TMP_414(uint256)"];
}
// Function: 2978.sol-PrivateSale-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.totalSupply()

IRs:
TMP_354(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:totalSupply, arguments:[]  
RETURN TMP_354"];
}
// Function: 2978.sol-PrivateSale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_373 = CONVERT 0 to address
TMP_374(bool) = newOwner != TMP_373
CONDITION TMP_374"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2978.sol-PrivateSale-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
5->1;
}
// Function: 2978.sol-PrivateSale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
current = now

IRs:
current(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
presaleStarted = (current >= startTime || started)

IRs:
TMP_348(bool) = current >= startTime
TMP_349(bool) = TMP_348 || started
presaleStarted(bool) := TMP_349(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
presaleNotEnded = current <= endTime

IRs:
TMP_350(bool) = current <= endTime
presaleNotEnded(bool) := TMP_350(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_351(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_351(bool)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
nonZeroPurchase && presaleStarted && presaleNotEnded

IRs:
TMP_352(bool) = nonZeroPurchase && presaleStarted
TMP_353(bool) = TMP_352 && presaleNotEnded
RETURN TMP_353"];
}
// Function: 2978.sol-PrivateSale-whenNotFinalized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_415 = UnaryType.BANG finalized 
TMP_416(None) = SOLIDITY_CALL require(bool)(TMP_415)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-PrivateSale-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_417 = UnaryType.BANG paused 
TMP_418(None) = SOLIDITY_CALL require(bool)(TMP_417)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-PrivateSale-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_419(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_432(uint256) = a + b
c(uint256) := TMP_432(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_433(bool) = c >= a
TMP_434(None) = SOLIDITY_CALL assert(bool)(TMP_433)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2978.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_428(uint256) = a / b
c(uint256) := TMP_428(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2978.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_422(uint256) = a * b
c(uint256) := TMP_422(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_423(bool) = a == 0
TMP_424(uint256) = c / a
TMP_425(bool) = TMP_424 == b
TMP_426(bool) = TMP_423 || TMP_425
TMP_427(None) = SOLIDITY_CALL assert(bool)(TMP_426)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2978.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_429(bool) = b <= a
TMP_430(None) = SOLIDITY_CALL assert(bool)(TMP_429)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_431(uint256) = a - b
RETURN TMP_431"];
}
// Function: 2978.sol-TokenFactory-createCloneToken(address,uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
newToken = new LedToken(this,_parentToken,_snapshotBlock,_tokenName,_tokenSymbol)

IRs:
TMP_436(LedToken) = new LedToken(this,_parentToken,_snapshotBlock,_tokenName,_tokenSymbol) 
newToken(LedToken) := TMP_436(LedToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newToken.transferControl(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:newToken(LedToken), function:transferControl, arguments:['msg.sender']  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
newToken

IRs:
RETURN newToken"];
}
// Function: 2978.sol-TokenFactoryInterface-createCloneToken(address,uint256,string,string)
digraph{
}
// Function: 2978.sol-TokenInfo-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
PRIVATESALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PRESALE_BASE_PRICE_IN_WEI = 600000000000000

IRs:
PRESALE_BASE_PRICE_IN_WEI(uint256) := 600000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ICO_BASE_PRICE_IN_WEI = 800000000000000

IRs:
ICO_BASE_PRICE_IN_WEI(uint256) := 800000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
FIRSTSALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MIN_PURCHASE_OTHERSALES = 80000000000000000

IRs:
MIN_PURCHASE_OTHERSALES(uint256) := 80000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MIN_PURCHASE = 1000000000000000000

IRs:
MIN_PURCHASE(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_PURCHASE = 1000000000000000000000

IRs:
MAX_PURCHASE(uint256) := 1000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
PRESALE_PERCENTAGE_1 = 10

IRs:
PRESALE_PERCENTAGE_1(uint256) := 10(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_PERCENTAGE_2 = 15

IRs:
PRESALE_PERCENTAGE_2(uint256) := 15(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PRESALE_PERCENTAGE_3 = 20

IRs:
PRESALE_PERCENTAGE_3(uint256) := 20(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PRESALE_PERCENTAGE_4 = 25

IRs:
PRESALE_PERCENTAGE_4(uint256) := 25(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PRESALE_PERCENTAGE_5 = 35

IRs:
PRESALE_PERCENTAGE_5(uint256) := 35(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
ICO_PERCENTAGE_1 = 5

IRs:
ICO_PERCENTAGE_1(uint256) := 5(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
ICO_PERCENTAGE_2 = 10

IRs:
ICO_PERCENTAGE_2(uint256) := 10(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ICO_PERCENTAGE_3 = 15

IRs:
ICO_PERCENTAGE_3(uint256) := 15(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ICO_PERCENTAGE_4 = 20

IRs:
ICO_PERCENTAGE_4(uint256) := 20(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ICO_PERCENTAGE_5 = 25

IRs:
ICO_PERCENTAGE_5(uint256) := 25(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
PRESALE_LEVEL_1 = 5000000000000000000

IRs:
PRESALE_LEVEL_1(uint256) := 5000000000000000000(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
PRESALE_LEVEL_2 = 10000000000000000000

IRs:
PRESALE_LEVEL_2(uint256) := 10000000000000000000(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
PRESALE_LEVEL_3 = 15000000000000000000

IRs:
PRESALE_LEVEL_3(uint256) := 15000000000000000000(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
PRESALE_LEVEL_4 = 20000000000000000000

IRs:
PRESALE_LEVEL_4(uint256) := 20000000000000000000(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
PRESALE_LEVEL_5 = 25000000000000000000

IRs:
PRESALE_LEVEL_5(uint256) := 25000000000000000000(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
ICO_LEVEL_1 = 6666666666666666666

IRs:
ICO_LEVEL_1(uint256) := 6666666666666666666(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
ICO_LEVEL_2 = 13333333333333333333

IRs:
ICO_LEVEL_2(uint256) := 13333333333333333333(uint256)"];
23->24;
24[label="Node Type: OTHER_ENTRYPOINT 24

EXPRESSION:
ICO_LEVEL_3 = 20000000000000000000

IRs:
ICO_LEVEL_3(uint256) := 20000000000000000000(uint256)"];
24->25;
25[label="Node Type: OTHER_ENTRYPOINT 25

EXPRESSION:
ICO_LEVEL_4 = 26666666666666666666

IRs:
ICO_LEVEL_4(uint256) := 26666666666666666666(uint256)"];
25->26;
26[label="Node Type: OTHER_ENTRYPOINT 26

EXPRESSION:
ICO_LEVEL_5 = 33333333333333333333

IRs:
ICO_LEVEL_5(uint256) := 33333333333333333333(uint256)"];
26->27;
27[label="Node Type: OTHER_ENTRYPOINT 27

EXPRESSION:
PRIVATESALE_TOKENCAP = 18750000

IRs:
PRIVATESALE_TOKENCAP(uint256) := 18750000(uint256)"];
27->28;
28[label="Node Type: OTHER_ENTRYPOINT 28

EXPRESSION:
PRESALE_TOKENCAP = 18750000

IRs:
PRESALE_TOKENCAP(uint256) := 18750000(uint256)"];
28->29;
29[label="Node Type: OTHER_ENTRYPOINT 29

EXPRESSION:
ICO_TOKENCAP = 22500000

IRs:
ICO_TOKENCAP(uint256) := 22500000(uint256)"];
29->30;
30[label="Node Type: OTHER_ENTRYPOINT 30

EXPRESSION:
FIRSTSALE_TOKENCAP = 5000000

IRs:
FIRSTSALE_TOKENCAP(uint256) := 5000000(uint256)"];
30->31;
31[label="Node Type: OTHER_ENTRYPOINT 31

EXPRESSION:
LEDTEAM_TOKENS = 35000000

IRs:
LEDTEAM_TOKENS(uint256) := 35000000(uint256)"];
31->32;
32[label="Node Type: OTHER_ENTRYPOINT 32

EXPRESSION:
TOTAL_TOKENCAP = 100000000

IRs:
TOTAL_TOKENCAP(uint256) := 100000000(uint256)"];
32->33;
33[label="Node Type: OTHER_ENTRYPOINT 33

EXPRESSION:
DECIMALS_MULTIPLIER = 1000000000000000000

IRs:
DECIMALS_MULTIPLIER(uint256) := 1000000000000000000(uint256)"];
33->34;
34[label="Node Type: OTHER_ENTRYPOINT 34

EXPRESSION:
LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4

IRs:
LED_MULTISIG(address) := 767111519343181381934891368477998475932213935860(uint256)"];
}
// Function: 2978.sol-TokenSale-allocateLedTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! ledTokensAllocated)

IRs:
TMP_505 = UnaryType.BANG ledTokensAllocated 
TMP_506(None) = SOLIDITY_CALL require(bool)(TMP_505)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allocatedTokens = LEDTEAM_TOKENS.mul(DECIMALS_MULTIPLIER)

IRs:
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['LEDTEAM_TOKENS', 'DECIMALS_MULTIPLIER'] 
allocatedTokens(uint256) := TMP_507(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ledToken.mint(ledMultiSig,allocatedTokens)

IRs:
TMP_508(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['ledMultiSig', 'allocatedTokens']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ledTokensAllocated = true

IRs:
ledTokensAllocated(bool) := True(bool)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotFinalized()

IRs:
MODIFIER_CALL, Crowdsale.whenNotFinalized()()"];
6->1;
}
// Function: 2978.sol-TokenSale-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.balanceOf(_owner)

IRs:
TMP_446(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:balanceOf, arguments:['_owner']  
RETURN TMP_446"];
}
// Function: 2978.sol-TokenSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != 0x0)

IRs:
TMP_475(bool) = _beneficiary != 0
TMP_476(None) = SOLIDITY_CALL require(bool)(TMP_475)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_477(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_478(None) = SOLIDITY_CALL require(bool)(TMP_477)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE)

IRs:
TMP_479(bool) = weiAmount >= MIN_PURCHASE_OTHERSALES
TMP_480(bool) = weiAmount <= MAX_PURCHASE
TMP_481(bool) = TMP_479 && TMP_480
TMP_482(None) = SOLIDITY_CALL require(bool)(TMP_481)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
priceInWei = ICO_BASE_PRICE_IN_WEI

IRs:
priceInWei(uint256) := ICO_BASE_PRICE_IN_WEI(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalWeiRaised = totalWeiRaised.add(weiAmount)

IRs:
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalWeiRaised', 'weiAmount'] 
totalWeiRaised(uint256) := TMP_483(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
bonusPercentage = determineBonus(weiAmount)

IRs:
TMP_484(uint256) = INTERNAL_CALL, TokenSale.determineBonus(uint256)(weiAmount)
bonusPercentage(uint256) := TMP_484(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
initialTokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei)

IRs:
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'DECIMALS_MULTIPLIER'] 
TMP_486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_485', 'priceInWei'] 
initialTokens(uint256) := TMP_486(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
bonusPercentage > 0

IRs:
TMP_487(bool) = bonusPercentage > 0
CONDITION TMP_487"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
initialDivided = initialTokens.div(100)

IRs:
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['initialTokens', '100'] 
initialDivided(uint256) := TMP_488(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
bonusTokens = initialDivided.mul(bonusPercentage)

IRs:
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['initialDivided', 'bonusPercentage'] 
bonusTokens(uint256) := TMP_489(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
bonusTokens = 0

IRs:
bonusTokens(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
tokens = initialTokens.add(bonusTokens)

IRs:
TMP_490(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['initialTokens', 'bonusTokens'] 
tokens(uint256) := TMP_490(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokensMinted = tokensMinted.add(tokens)

IRs:
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'tokens'] 
tokensMinted(uint256) := TMP_491(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
require(bool)(tokensMinted < cap)

IRs:
TMP_492(bool) = tokensMinted < cap
TMP_493(None) = SOLIDITY_CALL require(bool)(TMP_492)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
contributors = contributors.add(1)

IRs:
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['contributors', '1'] 
contributors(uint256) := TMP_494(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ledToken.mint(_beneficiary,tokens)

IRs:
TMP_495(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['_beneficiary', 'tokens']  "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
whenNotFinalized()

IRs:
MODIFIER_CALL, Crowdsale.whenNotFinalized()()"];
23->1;
}
// Function: 2978.sol-TokenSale-changeController(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isContract(_newController))

IRs:
TMP_447(bool) = INTERNAL_CALL, Crowdsale.isContract(address)(_newController)
TMP_448(None) = SOLIDITY_CALL require(bool)(TMP_447)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ledToken.transferControl(_newController)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transferControl, arguments:['_newController']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2978.sol-TokenSale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2978.sol-TokenSale-constructor(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ledToken = LedTokenInterface(_tokenAddress)

IRs:
TMP_467 = CONVERT _tokenAddress to LedTokenInterface
ledToken(LedTokenInterface) := TMP_467(LedTokenInterface)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(_tokenAddress != 0x0)

IRs:
TMP_468(bool) = _tokenAddress != 0
TMP_469(None) = SOLIDITY_CALL assert(bool)(TMP_468)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(_startTime > 0)

IRs:
TMP_470(bool) = _startTime > 0
TMP_471(None) = SOLIDITY_CALL assert(bool)(TMP_470)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_endTime > _startTime)

IRs:
TMP_472(bool) = _endTime > _startTime
TMP_473(None) = SOLIDITY_CALL assert(bool)(TMP_472)"];
}
// Function: 2978.sol-TokenSale-determineBonus(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_wei > ICO_LEVEL_1

IRs:
TMP_500(bool) = _wei > ICO_LEVEL_1
CONDITION TMP_500"];
1->2[label="True"];
1->15[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
_wei > ICO_LEVEL_2

IRs:
TMP_501(bool) = _wei > ICO_LEVEL_2
CONDITION TMP_501"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
_wei > ICO_LEVEL_3

IRs:
TMP_502(bool) = _wei > ICO_LEVEL_3
CONDITION TMP_502"];
3->4[label="True"];
3->11[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_wei > ICO_LEVEL_4

IRs:
TMP_503(bool) = _wei > ICO_LEVEL_4
CONDITION TMP_503"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
_wei > ICO_LEVEL_5

IRs:
TMP_504(bool) = _wei > ICO_LEVEL_5
CONDITION TMP_504"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
ICO_PERCENTAGE_5

IRs:
RETURN ICO_PERCENTAGE_5"];
7[label="Node Type: RETURN 7

EXPRESSION:
ICO_PERCENTAGE_4

IRs:
RETURN ICO_PERCENTAGE_4"];
9[label="Node Type: RETURN 9

EXPRESSION:
ICO_PERCENTAGE_3

IRs:
RETURN ICO_PERCENTAGE_3"];
11[label="Node Type: RETURN 11

EXPRESSION:
ICO_PERCENTAGE_2

IRs:
RETURN ICO_PERCENTAGE_2"];
13[label="Node Type: RETURN 13

EXPRESSION:
ICO_PERCENTAGE_1

IRs:
RETURN ICO_PERCENTAGE_1"];
15[label="Node Type: RETURN 15

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 2978.sol-TokenSale-enableMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(true)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['True']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-TokenSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, TokenSale.buyTokens(address)(msg.sender)"];
}
// Function: 2978.sol-TokenSale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_511(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ledTokensAllocated)

IRs:
TMP_512(None) = SOLIDITY_CALL require(bool)(ledTokensAllocated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
surplusTokens = cap - tokensMinted

IRs:
TMP_513(uint256) = cap - tokensMinted
surplusTokens(uint256) := TMP_513(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ledToken.mint(ledMultiSig,surplusTokens)

IRs:
TMP_514(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:mint, arguments:['ledMultiSig', 'surplusTokens']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ledToken.finishMinting()

IRs:
TMP_515(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:finishMinting, arguments:[]  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ledToken.enableTransfers(true)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableTransfers, arguments:['True']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 2978.sol-TokenSale-forceStart()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
started = true

IRs:
started(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-TokenSale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledMultiSig.transfer(msg.value)

IRs:
Transfer dest:ledMultiSig value:msg.value"];
}
// Function: 2978.sol-TokenSale-getInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
symbol = LED

IRs:
symbol(string) := LED(string)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
transfersEnabled = ledToken.transfersEnabled()

IRs:
TMP_519(bool) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:transfersEnabled, arguments:[]  
transfersEnabled(bool) := TMP_519(bool)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime)

IRs:
RETURN TOTAL_TOKENCAP,decimals,symbol,transfersEnabled,contributors,totalWeiRaised,tokenCap,started,startTime,endTime"];
}
// Function: 2978.sol-TokenSale-getInfoLevels()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(ICO_LEVEL_1,ICO_LEVEL_2,ICO_LEVEL_3,ICO_LEVEL_4,ICO_LEVEL_5,ICO_PERCENTAGE_1,ICO_PERCENTAGE_2,ICO_PERCENTAGE_3,ICO_PERCENTAGE_4,ICO_PERCENTAGE_5)

IRs:
RETURN ICO_LEVEL_1,ICO_LEVEL_2,ICO_LEVEL_3,ICO_LEVEL_4,ICO_LEVEL_5,ICO_PERCENTAGE_1,ICO_PERCENTAGE_2,ICO_PERCENTAGE_3,ICO_PERCENTAGE_4,ICO_PERCENTAGE_5"];
}
// Function: 2978.sol-TokenSale-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == 0

IRs:
TMP_456(bool) = _addr == 0
CONDITION TMP_456"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
size > 0

IRs:
TMP_457(bool) = size > 0
RETURN TMP_457"];
}
// Function: 2978.sol-TokenSale-lockMasterTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ledToken.enableMasterTransfers(false)

IRs:
HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:enableMasterTransfers, arguments:['False']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2978.sol-TokenSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_527(bool) = msg.sender == owner
TMP_528(None) = SOLIDITY_CALL require(bool)(TMP_527)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-TokenSale-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 2978.sol-TokenSale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
PRIVATESALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PRESALE_BASE_PRICE_IN_WEI = 600000000000000

IRs:
PRESALE_BASE_PRICE_IN_WEI(uint256) := 600000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ICO_BASE_PRICE_IN_WEI = 800000000000000

IRs:
ICO_BASE_PRICE_IN_WEI(uint256) := 800000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000

IRs:
FIRSTSALE_BASE_PRICE_IN_WEI(uint256) := 200000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MIN_PURCHASE_OTHERSALES = 80000000000000000

IRs:
MIN_PURCHASE_OTHERSALES(uint256) := 80000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MIN_PURCHASE = 1000000000000000000

IRs:
MIN_PURCHASE(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_PURCHASE = 1000000000000000000000

IRs:
MAX_PURCHASE(uint256) := 1000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
PRESALE_PERCENTAGE_1 = 10

IRs:
PRESALE_PERCENTAGE_1(uint256) := 10(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_PERCENTAGE_2 = 15

IRs:
PRESALE_PERCENTAGE_2(uint256) := 15(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PRESALE_PERCENTAGE_3 = 20

IRs:
PRESALE_PERCENTAGE_3(uint256) := 20(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PRESALE_PERCENTAGE_4 = 25

IRs:
PRESALE_PERCENTAGE_4(uint256) := 25(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PRESALE_PERCENTAGE_5 = 35

IRs:
PRESALE_PERCENTAGE_5(uint256) := 35(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
ICO_PERCENTAGE_1 = 5

IRs:
ICO_PERCENTAGE_1(uint256) := 5(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
ICO_PERCENTAGE_2 = 10

IRs:
ICO_PERCENTAGE_2(uint256) := 10(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ICO_PERCENTAGE_3 = 15

IRs:
ICO_PERCENTAGE_3(uint256) := 15(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ICO_PERCENTAGE_4 = 20

IRs:
ICO_PERCENTAGE_4(uint256) := 20(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ICO_PERCENTAGE_5 = 25

IRs:
ICO_PERCENTAGE_5(uint256) := 25(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
PRESALE_LEVEL_1 = 5000000000000000000

IRs:
PRESALE_LEVEL_1(uint256) := 5000000000000000000(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
PRESALE_LEVEL_2 = 10000000000000000000

IRs:
PRESALE_LEVEL_2(uint256) := 10000000000000000000(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
PRESALE_LEVEL_3 = 15000000000000000000

IRs:
PRESALE_LEVEL_3(uint256) := 15000000000000000000(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
PRESALE_LEVEL_4 = 20000000000000000000

IRs:
PRESALE_LEVEL_4(uint256) := 20000000000000000000(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
PRESALE_LEVEL_5 = 25000000000000000000

IRs:
PRESALE_LEVEL_5(uint256) := 25000000000000000000(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
ICO_LEVEL_1 = 6666666666666666666

IRs:
ICO_LEVEL_1(uint256) := 6666666666666666666(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
ICO_LEVEL_2 = 13333333333333333333

IRs:
ICO_LEVEL_2(uint256) := 13333333333333333333(uint256)"];
23->24;
24[label="Node Type: OTHER_ENTRYPOINT 24

EXPRESSION:
ICO_LEVEL_3 = 20000000000000000000

IRs:
ICO_LEVEL_3(uint256) := 20000000000000000000(uint256)"];
24->25;
25[label="Node Type: OTHER_ENTRYPOINT 25

EXPRESSION:
ICO_LEVEL_4 = 26666666666666666666

IRs:
ICO_LEVEL_4(uint256) := 26666666666666666666(uint256)"];
25->26;
26[label="Node Type: OTHER_ENTRYPOINT 26

EXPRESSION:
ICO_LEVEL_5 = 33333333333333333333

IRs:
ICO_LEVEL_5(uint256) := 33333333333333333333(uint256)"];
26->27;
27[label="Node Type: OTHER_ENTRYPOINT 27

EXPRESSION:
PRIVATESALE_TOKENCAP = 18750000

IRs:
PRIVATESALE_TOKENCAP(uint256) := 18750000(uint256)"];
27->28;
28[label="Node Type: OTHER_ENTRYPOINT 28

EXPRESSION:
PRESALE_TOKENCAP = 18750000

IRs:
PRESALE_TOKENCAP(uint256) := 18750000(uint256)"];
28->29;
29[label="Node Type: OTHER_ENTRYPOINT 29

EXPRESSION:
ICO_TOKENCAP = 22500000

IRs:
ICO_TOKENCAP(uint256) := 22500000(uint256)"];
29->30;
30[label="Node Type: OTHER_ENTRYPOINT 30

EXPRESSION:
FIRSTSALE_TOKENCAP = 5000000

IRs:
FIRSTSALE_TOKENCAP(uint256) := 5000000(uint256)"];
30->31;
31[label="Node Type: OTHER_ENTRYPOINT 31

EXPRESSION:
LEDTEAM_TOKENS = 35000000

IRs:
LEDTEAM_TOKENS(uint256) := 35000000(uint256)"];
31->32;
32[label="Node Type: OTHER_ENTRYPOINT 32

EXPRESSION:
TOTAL_TOKENCAP = 100000000

IRs:
TOTAL_TOKENCAP(uint256) := 100000000(uint256)"];
32->33;
33[label="Node Type: OTHER_ENTRYPOINT 33

EXPRESSION:
DECIMALS_MULTIPLIER = 1000000000000000000

IRs:
DECIMALS_MULTIPLIER(uint256) := 1000000000000000000(uint256)"];
33->34;
34[label="Node Type: OTHER_ENTRYPOINT 34

EXPRESSION:
LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4

IRs:
LED_MULTISIG(address) := 767111519343181381934891368477998475932213935860(uint256)"];
}
// Function: 2978.sol-TokenSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ledMultiSig = LED_MULTISIG

IRs:
ledMultiSig(address) := LED_MULTISIG(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
started = false

IRs:
started(bool) := False(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenCap = ICO_TOKENCAP

IRs:
tokenCap(uint256) := ICO_TOKENCAP(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
cap = tokenCap * DECIMALS_MULTIPLIER

IRs:
TMP_520(uint256) = tokenCap * DECIMALS_MULTIPLIER
cap(uint256) := TMP_520(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
weiCap = tokenCap * ICO_BASE_PRICE_IN_WEI

IRs:
TMP_521(uint256) = tokenCap * ICO_BASE_PRICE_IN_WEI
weiCap(uint256) := TMP_521(uint256)"];
}
// Function: 2978.sol-TokenSale-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledToken.totalSupply()

IRs:
TMP_445(uint256) = HIGH_LEVEL_CALL, dest:ledToken(LedTokenInterface), function:totalSupply, arguments:[]  
RETURN TMP_445"];
}
// Function: 2978.sol-TokenSale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_464 = CONVERT 0 to address
TMP_465(bool) = newOwner != TMP_464
CONDITION TMP_465"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2978.sol-TokenSale-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
5->1;
}
// Function: 2978.sol-TokenSale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
current = now

IRs:
current(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
presaleStarted = (current >= startTime || started)

IRs:
TMP_439(bool) = current >= startTime
TMP_440(bool) = TMP_439 || started
presaleStarted(bool) := TMP_440(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
presaleNotEnded = current <= endTime

IRs:
TMP_441(bool) = current <= endTime
presaleNotEnded(bool) := TMP_441(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_442(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_442(bool)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
nonZeroPurchase && presaleStarted && presaleNotEnded

IRs:
TMP_443(bool) = nonZeroPurchase && presaleStarted
TMP_444(bool) = TMP_443 && presaleNotEnded
RETURN TMP_444"];
}
// Function: 2978.sol-TokenSale-whenNotFinalized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! finalized)

IRs:
TMP_522 = UnaryType.BANG finalized 
TMP_523(None) = SOLIDITY_CALL require(bool)(TMP_522)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-TokenSale-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_524 = UnaryType.BANG paused 
TMP_525(None) = SOLIDITY_CALL require(bool)(TMP_524)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2978.sol-TokenSale-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_526(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
