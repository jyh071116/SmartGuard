digraph G {
// Function: 3060.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 3060.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 3060.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 3060.sol-ERC20-totalSupply()
digraph{
}
// Function: 3060.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 3060.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 3060.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 3060.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 3060.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 3060.sol-MultiOwnable-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(guest != address(0))

IRs:
TMP_11 = CONVERT 0 to address
TMP_12(bool) = guest != TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners[guest] = true

IRs:
REF_1(bool) -> owners[guest]
REF_1(bool) (->owners) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipExtended(msg.sender,guest)

IRs:
Emit OwnershipExtended(msg.sender,guest)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
4->1;
}
// Function: 3060.sol-MultiOwnable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owners[msg.sender] = true

IRs:
REF_0(bool) -> owners[msg.sender]
REF_0(bool) (->owners) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unremovableOwner = msg.sender

IRs:
unremovableOwner(address) := msg.sender(address)"];
}
// Function: 3060.sol-MultiOwnable-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners[addr]

IRs:
REF_5(bool) -> owners[addr]
RETURN REF_5"];
}
// Function: 3060.sol-MultiOwnable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender])

IRs:
REF_6(bool) -> owners[msg.sender]
TMP_30(None) = SOLIDITY_CALL require(bool)(REF_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3060.sol-MultiOwnable-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(removedOwner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = removedOwner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != removedOwner)

IRs:
TMP_19(bool) = unremovableOwner != removedOwner
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete owners[removedOwner]

IRs:
REF_2(bool) -> owners[removedOwner]
owners = delete REF_2 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipRemoved(removedOwner)

IRs:
Emit OwnershipRemoved(removedOwner)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
5->1;
}
// Function: 3060.sol-MultiOwnable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = newOwner != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != msg.sender)

IRs:
TMP_26(bool) = unremovableOwner != msg.sender
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owners[newOwner] = true

IRs:
REF_3(bool) -> owners[newOwner]
REF_3(bool) (->owners) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete owners[msg.sender]

IRs:
REF_4(bool) -> owners[msg.sender]
owners = delete REF_4 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
OwnershipTransferred(msg.sender,newOwner)

IRs:
Emit OwnershipTransferred(msg.sender,newOwner)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
6->1;
}
// Function: 3060.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3060.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3060.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3060.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3060.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3060.sol-TokenLock-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(guest != address(0))

IRs:
TMP_31 = CONVERT 0 to address
TMP_32(bool) = guest != TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners[guest] = true

IRs:
REF_8(bool) -> owners[guest]
REF_8(bool) (->owners) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipExtended(msg.sender,guest)

IRs:
Emit OwnershipExtended(msg.sender,guest)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
4->1;
}
// Function: 3060.sol-TokenLock-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owners[msg.sender] = true

IRs:
REF_7(bool) -> owners[msg.sender]
REF_7(bool) (->owners) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unremovableOwner = msg.sender

IRs:
unremovableOwner(address) := msg.sender(address)"];
}
// Function: 3060.sol-TokenLock-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_50 = CONVERT _token to ERC20
token(ERC20) := TMP_50(ERC20)"];
}
// Function: 3060.sol-TokenLock-getLockAmount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lockAmounts[_addr]

IRs:
REF_13(uint256) -> lockAmounts[_addr]
RETURN REF_13"];
}
// Function: 3060.sol-TokenLock-getReleaseBlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
releaseBlocks[_addr]

IRs:
REF_14(uint256) -> releaseBlocks[_addr]
RETURN REF_14"];
}
// Function: 3060.sol-TokenLock-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners[addr]

IRs:
REF_12(bool) -> owners[addr]
RETURN REF_12"];
}
// Function: 3060.sol-TokenLock-lock(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender])

IRs:
REF_15(bool) -> owners[msg.sender]
TMP_51(None) = SOLIDITY_CALL require(bool)(REF_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addr != address(0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = _addr != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lockAmounts[_addr] = _amount

IRs:
REF_16(uint256) -> lockAmounts[_addr]
REF_16(uint256) (->lockAmounts) := _amount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
releaseBlocks[_addr] = _releaseBlock

IRs:
REF_17(uint256) -> releaseBlocks[_addr]
REF_17(uint256) (->releaseBlocks) := _releaseBlock(uint256)"];
}
// Function: 3060.sol-TokenLock-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender])

IRs:
REF_24(bool) -> owners[msg.sender]
TMP_61(None) = SOLIDITY_CALL require(bool)(REF_24)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3060.sol-TokenLock-release(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender] || msg.sender == _addr)

IRs:
REF_18(bool) -> owners[msg.sender]
TMP_55(bool) = msg.sender == _addr
TMP_56(bool) = REF_18 || TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.number >= releaseBlocks[_addr])

IRs:
REF_19(uint256) -> releaseBlocks[_addr]
TMP_58(bool) = block.number >= REF_19
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amount = lockAmounts[_addr]

IRs:
REF_20(uint256) -> lockAmounts[_addr]
amount(uint256) := REF_20(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lockAmounts[_addr] = 0

IRs:
REF_21(uint256) -> lockAmounts[_addr]
REF_21(uint256) (->lockAmounts) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseBlocks[_addr] = 0

IRs:
REF_22(uint256) -> releaseBlocks[_addr]
REF_22(uint256) (->releaseBlocks) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.transfer(_addr,amount)

IRs:
TMP_60(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_addr', 'amount']  "];
}
// Function: 3060.sol-TokenLock-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(removedOwner != address(0))

IRs:
TMP_36 = CONVERT 0 to address
TMP_37(bool) = removedOwner != TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != removedOwner)

IRs:
TMP_39(bool) = unremovableOwner != removedOwner
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete owners[removedOwner]

IRs:
REF_9(bool) -> owners[removedOwner]
owners = delete REF_9 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipRemoved(removedOwner)

IRs:
Emit OwnershipRemoved(removedOwner)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
5->1;
}
// Function: 3060.sol-TokenLock-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = newOwner != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != msg.sender)

IRs:
TMP_46(bool) = unremovableOwner != msg.sender
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owners[newOwner] = true

IRs:
REF_10(bool) -> owners[newOwner]
REF_10(bool) (->owners) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete owners[msg.sender]

IRs:
REF_11(bool) -> owners[msg.sender]
owners = delete REF_11 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
OwnershipTransferred(msg.sender,newOwner)

IRs:
Emit OwnershipTransferred(msg.sender,newOwner)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
6->1;
}
// Function: 3060.sol-TokenLockDistribute-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_67 = CONVERT 0 to address
TMP_68(bool) = _newOwner != TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3060.sol-TokenLockDistribute-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3060.sol-TokenLockDistribute-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_71 = CONVERT _token to ERC20
token(ERC20) := TMP_71(ERC20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lock = TokenLock(_lock)

IRs:
TMP_72 = CONVERT _lock to TokenLock
lock(TokenLock) := TMP_72(TokenLock)"];
}
// Function: 3060.sol-TokenLockDistribute-distribute(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_73 = CONVERT 0 to address
TMP_74(bool) = _to != TMP_73
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.transfer(address(lock),_lockedAmount)

IRs:
TMP_76 = CONVERT lock to address
TMP_77(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['TMP_76', '_lockedAmount']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lock.lock(_to,_lockedAmount,_releaseBlockNumber)

IRs:
HIGH_LEVEL_CALL, dest:lock(TokenLock), function:lock, arguments:['_to', '_lockedAmount', '_releaseBlockNumber']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.transfer(_to,_unlockedAmount)

IRs:
TMP_79(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_to', '_unlockedAmount']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Distribute(_to,_unlockedAmount,_lockedAmount,_releaseBlockNumber)

IRs:
Emit Distribute(_to,_unlockedAmount,_lockedAmount,_releaseBlockNumber)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 3060.sol-TokenLockDistribute-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_82(bool) = msg.sender == owner
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3060.sol-TokenLockDistribute-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_63 = CONVERT 0 to address
owner(address) := TMP_63(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3060.sol-TokenLockDistribute-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
}
