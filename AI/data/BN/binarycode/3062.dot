digraph G {
// Function: 3062.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 3062.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 3062.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 3062.sol-ERC20-totalSupply()
digraph{
}
// Function: 3062.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 3062.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 3062.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 3062.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 3062.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 3062.sol-MultiOwnable-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(guest != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = guest != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners[guest] = true

IRs:
REF_1(bool) -> owners[guest]
REF_1(bool) (->owners) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipExtended(msg.sender,guest)

IRs:
Emit OwnershipExtended(msg.sender,guest)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
4->1;
}
// Function: 3062.sol-MultiOwnable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owners[msg.sender] = true

IRs:
REF_0(bool) -> owners[msg.sender]
REF_0(bool) (->owners) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unremovableOwner = msg.sender

IRs:
unremovableOwner(address) := msg.sender(address)"];
}
// Function: 3062.sol-MultiOwnable-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners[addr]

IRs:
REF_5(bool) -> owners[addr]
RETURN REF_5"];
}
// Function: 3062.sol-MultiOwnable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender])

IRs:
REF_6(bool) -> owners[msg.sender]
TMP_19(None) = SOLIDITY_CALL require(bool)(REF_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3062.sol-MultiOwnable-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(removedOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = removedOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != removedOwner)

IRs:
TMP_8(bool) = unremovableOwner != removedOwner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete owners[removedOwner]

IRs:
REF_2(bool) -> owners[removedOwner]
owners = delete REF_2 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipRemoved(removedOwner)

IRs:
Emit OwnershipRemoved(removedOwner)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
5->1;
}
// Function: 3062.sol-MultiOwnable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != msg.sender)

IRs:
TMP_15(bool) = unremovableOwner != msg.sender
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owners[newOwner] = true

IRs:
REF_3(bool) -> owners[newOwner]
REF_3(bool) (->owners) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete owners[msg.sender]

IRs:
REF_4(bool) -> owners[msg.sender]
owners = delete REF_4 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
OwnershipTransferred(msg.sender,newOwner)

IRs:
Emit OwnershipTransferred(msg.sender,newOwner)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
6->1;
}
// Function: 3062.sol-TokenLock-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(guest != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = guest != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners[guest] = true

IRs:
REF_8(bool) -> owners[guest]
REF_8(bool) (->owners) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipExtended(msg.sender,guest)

IRs:
Emit OwnershipExtended(msg.sender,guest)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
4->1;
}
// Function: 3062.sol-TokenLock-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owners[msg.sender] = true

IRs:
REF_7(bool) -> owners[msg.sender]
REF_7(bool) (->owners) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unremovableOwner = msg.sender

IRs:
unremovableOwner(address) := msg.sender(address)"];
}
// Function: 3062.sol-TokenLock-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_39 = CONVERT _token to ERC20
token(ERC20) := TMP_39(ERC20)"];
}
// Function: 3062.sol-TokenLock-getLockAmount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lockAmounts[_addr]

IRs:
REF_13(uint256) -> lockAmounts[_addr]
RETURN REF_13"];
}
// Function: 3062.sol-TokenLock-getReleaseBlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
releaseBlocks[_addr]

IRs:
REF_14(uint256) -> releaseBlocks[_addr]
RETURN REF_14"];
}
// Function: 3062.sol-TokenLock-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners[addr]

IRs:
REF_12(bool) -> owners[addr]
RETURN REF_12"];
}
// Function: 3062.sol-TokenLock-lock(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender])

IRs:
REF_15(bool) -> owners[msg.sender]
TMP_40(None) = SOLIDITY_CALL require(bool)(REF_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addr != address(0))

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _addr != TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lockAmounts[_addr] = _amount

IRs:
REF_16(uint256) -> lockAmounts[_addr]
REF_16(uint256) (->lockAmounts) := _amount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
releaseBlocks[_addr] = _releaseBlock

IRs:
REF_17(uint256) -> releaseBlocks[_addr]
REF_17(uint256) (->releaseBlocks) := _releaseBlock(uint256)"];
}
// Function: 3062.sol-TokenLock-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender])

IRs:
REF_24(bool) -> owners[msg.sender]
TMP_50(None) = SOLIDITY_CALL require(bool)(REF_24)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3062.sol-TokenLock-release(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[msg.sender] || msg.sender == _addr)

IRs:
REF_18(bool) -> owners[msg.sender]
TMP_44(bool) = msg.sender == _addr
TMP_45(bool) = REF_18 || TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.number >= releaseBlocks[_addr])

IRs:
REF_19(uint256) -> releaseBlocks[_addr]
TMP_47(bool) = block.number >= REF_19
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amount = lockAmounts[_addr]

IRs:
REF_20(uint256) -> lockAmounts[_addr]
amount(uint256) := REF_20(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lockAmounts[_addr] = 0

IRs:
REF_21(uint256) -> lockAmounts[_addr]
REF_21(uint256) (->lockAmounts) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseBlocks[_addr] = 0

IRs:
REF_22(uint256) -> releaseBlocks[_addr]
REF_22(uint256) (->releaseBlocks) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.transfer(_addr,amount)

IRs:
TMP_49(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_addr', 'amount']  "];
}
// Function: 3062.sol-TokenLock-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(removedOwner != address(0))

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = removedOwner != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != removedOwner)

IRs:
TMP_28(bool) = unremovableOwner != removedOwner
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete owners[removedOwner]

IRs:
REF_9(bool) -> owners[removedOwner]
owners = delete REF_9 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipRemoved(removedOwner)

IRs:
Emit OwnershipRemoved(removedOwner)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
5->1;
}
// Function: 3062.sol-TokenLock-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = newOwner != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unremovableOwner != msg.sender)

IRs:
TMP_35(bool) = unremovableOwner != msg.sender
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owners[newOwner] = true

IRs:
REF_10(bool) -> owners[newOwner]
REF_10(bool) (->owners) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete owners[msg.sender]

IRs:
REF_11(bool) -> owners[msg.sender]
owners = delete REF_11 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
OwnershipTransferred(msg.sender,newOwner)

IRs:
Emit OwnershipTransferred(msg.sender,newOwner)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
6->1;
}
}
