digraph G {
// Function: 3096.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_518 = CONVERT _input to bytes
_temp(bytes) := TMP_518(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_748 -> LENGTH _temp
_length(uint256) := REF_748(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_519(bool) = _length <= 32
TMP_520(bool) = _length > 0
TMP_521(bool) = TMP_519 && TMP_520
TMP_522(None) = SOLIDITY_CALL require(bool,string)(TMP_521,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_749(None) -> _temp[0]
TMP_523(bool) = REF_749 != 32
TMP_524(uint256) = _length - 1
REF_750(None) -> _temp[TMP_524]
TMP_525(bool) = REF_750 != 32
TMP_526(bool) = TMP_523 && TMP_525
TMP_527(None) = SOLIDITY_CALL require(bool,string)(TMP_526,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_751(None) -> _temp[0]
TMP_528(bool) = REF_751 == 48
CONDITION TMP_528"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_752(None) -> _temp[1]
TMP_529(bool) = REF_752 != 120
TMP_530(None) = SOLIDITY_CALL require(bool,string)(TMP_529,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_753(None) -> _temp[1]
TMP_531(bool) = REF_753 != 88
TMP_532(None) = SOLIDITY_CALL require(bool,string)(TMP_531,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_533(bool) = i < _length
CONDITION TMP_533"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_754(None) -> _temp[i]
TMP_534(bool) = REF_754 > 64
REF_755(None) -> _temp[i]
TMP_535(bool) = REF_755 < 91
TMP_536(bool) = TMP_534 && TMP_535
CONDITION TMP_536"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_756(bytes1) -> _temp[i]
REF_757(None) -> _temp[i]
TMP_537 = CONVERT REF_757 to uint256
TMP_538(uint256) = TMP_537 + 32
TMP_539 = CONVERT TMP_538 to bytes1
REF_756(bytes1) (->_temp) := TMP_539(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_540(bool) = _hasNonNumber == False
CONDITION TMP_540"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_758(None) -> _temp[i]
TMP_541(bool) = REF_758 == 32
REF_759(None) -> _temp[i]
TMP_542(bool) = REF_759 > 96
REF_760(None) -> _temp[i]
TMP_543(bool) = REF_760 < 123
TMP_544(bool) = TMP_542 && TMP_543
TMP_545(bool) = TMP_541 || TMP_544
REF_761(None) -> _temp[i]
TMP_546(bool) = REF_761 > 47
REF_762(None) -> _temp[i]
TMP_547(bool) = REF_762 < 58
TMP_548(bool) = TMP_546 && TMP_547
TMP_549(bool) = TMP_545 || TMP_548
TMP_550(None) = SOLIDITY_CALL require(bool,string)(TMP_549,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_763(None) -> _temp[i]
TMP_551(bool) = REF_763 == 32
CONDITION TMP_551"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_552(uint256) = i + 1
REF_764(None) -> _temp[TMP_552]
TMP_553(bool) = REF_764 != 32
TMP_554(None) = SOLIDITY_CALL require(bool,string)(TMP_553,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_555(bool) = _hasNonNumber == False
REF_765(None) -> _temp[i]
TMP_556(bool) = REF_765 < 48
REF_766(None) -> _temp[i]
TMP_557(bool) = REF_766 > 57
TMP_558(bool) = TMP_556 || TMP_557
TMP_559(bool) = TMP_555 && TMP_558
CONDITION TMP_559"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_560(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_561(bool) = _hasNonNumber == True
TMP_562(None) = SOLIDITY_CALL require(bool,string)(TMP_561,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3096.sol-PCKExtSettingInterface-getFastExtra()
digraph{
}
// Function: 3096.sol-PCKExtSettingInterface-getFastGap()
digraph{
}
// Function: 3096.sol-PCKExtSettingInterface-getLongExtra()
digraph{
}
// Function: 3096.sol-PCKExtSettingInterface-getLongGap()
digraph{
}
// Function: 3096.sol-PCKKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_511(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_510'] 
TMP_512(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_513(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_512'] 
TMP_514(uint256) = TMP_513 / 2
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_511', 'TMP_514'] 
TMP_516(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_517(uint256) = TMP_515 / TMP_516
RETURN TMP_517"];
}
// Function: 3096.sol-PCKKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_500(uint256) = INTERNAL_CALL, PCKKeysCalcLong.eth(uint256)(_curKeys)
TMP_501(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_502(uint256) = INTERNAL_CALL, PCKKeysCalcLong.eth(uint256)(TMP_501)
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_500', 'TMP_502'] 
RETURN TMP_503"];
}
// Function: 3096.sol-PCKKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_504', '312500000000000000000000000'] 
TMP_506(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_505', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_506'] 
TMP_508(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_507', '74999921875000000000000000000000'] 
TMP_509(uint256) = TMP_508 / 156250000
RETURN TMP_509"];
}
// Function: 3096.sol-PCKKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_497(uint256) = INTERNAL_CALL, PCKKeysCalcLong.keys(uint256)(TMP_496)
TMP_498(uint256) = INTERNAL_CALL, PCKKeysCalcLong.keys(uint256)(_curEth)
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_497', 'TMP_498'] 
RETURN TMP_499"];
}
// Function: 3096.sol-PlayCoinGodInterface-deposit()
digraph{
}
// Function: 3096.sol-PlayCoinKey-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only team just can activate)

IRs:
TMP_474(bool) = msg.sender == admin
TMP_475(None) = SOLIDITY_CALL require(bool,string)(TMP_474,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,PCK already activated)

IRs:
TMP_476(bool) = activated_ == False
TMP_477(None) = SOLIDITY_CALL require(bool,string)(TMP_476,PCK already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_727(PCKdatasets.Round) -> round_[1]
REF_728(uint256) -> REF_727.strt
TMP_478(uint256) = now + rndExtra_
TMP_479(uint256) = TMP_478 - rndGap_
REF_728(uint256) (->round_) := TMP_479(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_729(PCKdatasets.Round) -> round_[1]
REF_730(uint256) -> REF_729.end
TMP_480(uint256) = now + rndInit_
TMP_481(uint256) = TMP_480 + rndExtra_
REF_730(uint256) (->round_) := TMP_481(uint256)"];
}
// Function: 3096.sol-PlayCoinKey-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_391(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_392(bytes32) = SOLIDITY_CALL keccak256()(TMP_391)
TMP_393 = CONVERT TMP_392 to uint256
TMP_394(uint256) = TMP_393 / now
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_390', 'TMP_394'] 
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_395', 'block.gaslimit'] 
TMP_397(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_398(bytes32) = SOLIDITY_CALL keccak256()(TMP_397)
TMP_399 = CONVERT TMP_398 to uint256
TMP_400(uint256) = TMP_399 / now
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_396', 'TMP_400'] 
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_401', 'block.number'] 
TMP_403(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_402)
TMP_404(bytes32) = SOLIDITY_CALL keccak256()(TMP_403)
TMP_405 = CONVERT TMP_404 to uint256
seed(uint256) := TMP_405(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_406(uint256) = seed / 1000
TMP_407(uint256) = TMP_406 * 1000
TMP_408(uint256) = seed - TMP_407
TMP_409(bool) = TMP_408 < airDropTracker_
CONDITION TMP_409"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3096.sol-PlayCoinKey-buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > (round_[_rID].strt + rndGap_) && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_271(PCKdatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.strt
TMP_180(uint256) = REF_272 + rndGap_
TMP_181(bool) = _now > TMP_180
REF_273(PCKdatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.end
TMP_182(bool) = _now <= REF_274
REF_275(PCKdatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.end
TMP_183(bool) = _now > REF_276
REF_277(PCKdatasets.Round) -> round_[_rID]
REF_278(uint256) -> REF_277.plyr
TMP_184(bool) = REF_278 == 0
TMP_185(bool) = TMP_183 && TMP_184
TMP_186(bool) = TMP_182 || TMP_185
TMP_187(bool) = TMP_181 && TMP_186
CONDITION TMP_187"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.core(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->16;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_279(PCKdatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.end
TMP_189(bool) = _now > REF_280
REF_281(PCKdatasets.Round) -> round_[_rID]
REF_282(bool) -> REF_281.ended
TMP_190(bool) = REF_282 == False
TMP_191(bool) = TMP_189 && TMP_190
CONDITION TMP_191"];
5->6[label="True"];
5->14[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_283(PCKdatasets.Round) -> round_[_rID]
REF_284(bool) -> REF_283.ended
REF_284(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_192(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.endRound(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_192(PCKdatasets.EventReturns)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! closed_

IRs:
TMP_193 = UnaryType.BANG closed_ 
CONDITION TMP_193"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nextRound()

IRs:
INTERNAL_CALL, PlayCoinKey.nextRound()()"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_285(uint256) -> _eventData_.compressedData
REF_286(uint256) -> _eventData_.compressedData
TMP_195(uint256) = _now * 1000000000000000000
TMP_196(uint256) = REF_286 + TMP_195
REF_285(uint256) (->_eventData_) := TMP_196(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_287(uint256) -> _eventData_.compressedIDs
REF_288(uint256) -> _eventData_.compressedIDs
TMP_197(uint256) = REF_288 + _pID
REF_287(uint256) (->_eventData_) := TMP_197(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
PCKevents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount)

IRs:
REF_290(PCKdatasets.Player) -> plyr_[_pID]
REF_291(bytes32) -> REF_290.name
REF_292(uint256) -> _eventData_.compressedData
REF_293(uint256) -> _eventData_.compressedIDs
REF_294(address) -> _eventData_.winnerAddr
REF_295(bytes32) -> _eventData_.winnerName
REF_296(uint256) -> _eventData_.amountWon
REF_297(uint256) -> _eventData_.newPot
REF_298(uint256) -> _eventData_.PCPAmount
REF_299(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_291,msg.value,REF_292,REF_293,REF_294,REF_295,REF_296,REF_297,REF_298,REF_299)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_300(PCKdatasets.Player) -> plyr_[_pID]
REF_301(uint256) -> REF_300.gen
REF_302(PCKdatasets.Player) -> plyr_[_pID]
REF_303(uint256) -> REF_302.gen
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_303', 'msg.value'] 
REF_301(uint256) (->plyr_) := TMP_199(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
}
// Function: 3096.sol-PlayCoinKey-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_46(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_46(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_38(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_38(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = _affCode == TMP_47
TMP_49(bool) = _affCode == msg.sender
TMP_50(bool) = TMP_48 || TMP_49
CONDITION TMP_50"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_39(PCKdatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
_affID(uint256) := REF_40(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_41(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_41(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_42(PCKdatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
TMP_51(bool) = _affID != REF_43
CONDITION TMP_51"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_44(PCKdatasets.Player) -> plyr_[_pID]
REF_45(uint256) -> REF_44.laff
REF_45(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_52(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_52(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
16->1;
}
// Function: 3096.sol-PlayCoinKey-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_35(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_35(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_31(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_31(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_36(bool) = _affCode == 0
TMP_37(bool) = _affCode == _pID
TMP_38(bool) = TMP_36 || TMP_37
CONDITION TMP_38"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_32(PCKdatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
_affCode(uint256) := REF_33(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_34(PCKdatasets.Player) -> plyr_[_pID]
REF_35(uint256) -> REF_34.laff
TMP_39(bool) = _affCode != REF_35
CONDITION TMP_39"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_36(PCKdatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
REF_37(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_40(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_40(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 3096.sol-PlayCoinKey-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_58(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_58(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_46(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_46(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_59(bool) = _affCode == 
REF_47(PCKdatasets.Player) -> plyr_[_pID]
REF_48(bytes32) -> REF_47.name
TMP_60(bool) = _affCode == REF_48
TMP_61(bool) = TMP_59 || TMP_60
CONDITION TMP_61"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_49(PCKdatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
_affID(uint256) := REF_50(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_51(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_51(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_52(PCKdatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
TMP_62(bool) = _affID != REF_53
CONDITION TMP_62"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_54(PCKdatasets.Player) -> plyr_[_pID]
REF_55(uint256) -> REF_54.laff
REF_55(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_63(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_63(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
16->1;
}
// Function: 3096.sol-PlayCoinKey-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_436(PCKdatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.strt
TMP_274(uint256) = REF_437 + rndGap_
TMP_275(bool) = _now > TMP_274
REF_438(PCKdatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.end
TMP_276(bool) = _now <= REF_439
REF_440(PCKdatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.end
TMP_277(bool) = _now > REF_441
REF_442(PCKdatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.plyr
TMP_278(bool) = REF_443 == 0
TMP_279(bool) = TMP_277 && TMP_278
TMP_280(bool) = TMP_276 || TMP_279
TMP_281(bool) = TMP_275 && TMP_280
CONDITION TMP_281"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_444(PCKdatasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.eth
TMP_282(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_445', '_eth'] 
RETURN TMP_282"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_283(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_283"];
}
// Function: 3096.sol-PlayCoinKey-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_426(PCKdatasets.Round) -> round_[_rIDlast]
REF_427(uint256) -> REF_426.mask
REF_429(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_430(PCKdatasets.PlayerRounds) -> REF_429[_rIDlast]
REF_431(uint256) -> REF_430.keys
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_427', 'REF_431'] 
TMP_272(uint256) = TMP_271 / 1000000000000000000
REF_433(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_434(PCKdatasets.PlayerRounds) -> REF_433[_rIDlast]
REF_435(uint256) -> REF_434.mask
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_272', 'REF_435'] 
RETURN TMP_273"];
}
// Function: 3096.sol-PlayCoinKey-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = PCKdatasets.TeamFee(30,6)

IRs:
REF_0(PCKdatasets.TeamFee) -> fees_[0]
TMP_0(PCKdatasets.TeamFee) = new TeamFee(30,6)
REF_0(PCKdatasets.TeamFee) (->fees_) := TMP_0(PCKdatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = PCKdatasets.TeamFee(43,0)

IRs:
REF_2(PCKdatasets.TeamFee) -> fees_[1]
TMP_1(PCKdatasets.TeamFee) = new TeamFee(43,0)
REF_2(PCKdatasets.TeamFee) (->fees_) := TMP_1(PCKdatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = PCKdatasets.TeamFee(56,10)

IRs:
REF_4(PCKdatasets.TeamFee) -> fees_[2]
TMP_2(PCKdatasets.TeamFee) = new TeamFee(56,10)
REF_4(PCKdatasets.TeamFee) (->fees_) := TMP_2(PCKdatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = PCKdatasets.TeamFee(43,8)

IRs:
REF_6(PCKdatasets.TeamFee) -> fees_[3]
TMP_3(PCKdatasets.TeamFee) = new TeamFee(43,8)
REF_6(PCKdatasets.TeamFee) (->fees_) := TMP_3(PCKdatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = PCKdatasets.PotSplit(15,10)

IRs:
REF_8(PCKdatasets.PotSplit) -> potSplit_[0]
TMP_4(PCKdatasets.PotSplit) = new PotSplit(15,10)
REF_8(PCKdatasets.PotSplit) (->potSplit_) := TMP_4(PCKdatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = PCKdatasets.PotSplit(25,0)

IRs:
REF_10(PCKdatasets.PotSplit) -> potSplit_[1]
TMP_5(PCKdatasets.PotSplit) = new PotSplit(25,0)
REF_10(PCKdatasets.PotSplit) (->potSplit_) := TMP_5(PCKdatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = PCKdatasets.PotSplit(20,20)

IRs:
REF_12(PCKdatasets.PotSplit) -> potSplit_[2]
TMP_6(PCKdatasets.PotSplit) = new PotSplit(20,20)
REF_12(PCKdatasets.PotSplit) (->potSplit_) := TMP_6(PCKdatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = PCKdatasets.PotSplit(30,10)

IRs:
REF_14(PCKdatasets.PotSplit) -> potSplit_[3]
TMP_7(PCKdatasets.PotSplit) = new PotSplit(30,10)
REF_14(PCKdatasets.PotSplit) (->potSplit_) := TMP_7(PCKdatasets.PotSplit)"];
}
// Function: 3096.sol-PlayCoinKey-core(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_337(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_338(PCKdatasets.PlayerRounds) -> REF_337[_rID]
REF_339(uint256) -> REF_338.keys
TMP_221(bool) = REF_339 == 0
CONDITION TMP_221"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_222(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.managePlayer(uint256,PCKdatasets.EventReturns)(_pID,_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_222(PCKdatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_340(PCKdatasets.Round) -> round_[_rID]
REF_341(uint256) -> REF_340.eth
TMP_223(bool) = REF_341 < 100000000000000000000
REF_342(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_343(PCKdatasets.PlayerRounds) -> REF_342[_rID]
REF_344(uint256) -> REF_343.eth
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_344', '_eth'] 
TMP_225(bool) = TMP_224 > 1000000000000000000
TMP_226(bool) = TMP_223 && TMP_225
CONDITION TMP_226"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_347(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_348(PCKdatasets.PlayerRounds) -> REF_347[_rID]
REF_349(uint256) -> REF_348.eth
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_349'] 
_availableLimit(uint256) := TMP_227(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_228(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_351(PCKdatasets.Player) -> plyr_[_pID]
REF_352(uint256) -> REF_351.gen
REF_353(PCKdatasets.Player) -> plyr_[_pID]
REF_354(uint256) -> REF_353.gen
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_354', '_refund'] 
REF_352(uint256) (->plyr_) := TMP_229(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_230(bool) = _eth > 1000000000
CONDITION TMP_230"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_356(PCKdatasets.Round) -> round_[_rID]
REF_357(uint256) -> REF_356.eth
TMP_231(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_357', '_eth'] 
_keys(uint256) := TMP_231(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_232(bool) = _keys >= 1000000000000000000
CONDITION TMP_232"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID,_eth)

IRs:
INTERNAL_CALL, PlayCoinKey.updateTimer(uint256,uint256,uint256)(_keys,_rID,_eth)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_359(PCKdatasets.Round) -> round_[_rID]
REF_360(uint256) -> REF_359.plyr
TMP_234(bool) = REF_360 != _pID
CONDITION TMP_234"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_361(PCKdatasets.Round) -> round_[_rID]
REF_362(uint256) -> REF_361.plyr
REF_362(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_363(PCKdatasets.Round) -> round_[_rID]
REF_364(uint256) -> REF_363.team
TMP_235(bool) = REF_364 != _team
CONDITION TMP_235"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_365(PCKdatasets.Round) -> round_[_rID]
REF_366(uint256) -> REF_365.team
REF_366(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_367(uint256) -> _eventData_.compressedData
REF_368(uint256) -> _eventData_.compressedData
TMP_236(uint256) = REF_368 + 100
REF_367(uint256) (->_eventData_) := TMP_236(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_237(bool) = _eth >= 100000000000000000
CONDITION TMP_237"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_238(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_239(bool) = INTERNAL_CALL, PlayCoinKey.airdrop()()
TMP_240(bool) = TMP_239 == True
CONDITION TMP_240"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_241(bool) = _eth >= 10000000000000000000
CONDITION TMP_241"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_243(uint256) = TMP_242 / 100
_prize(uint256) := TMP_243(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_370(PCKdatasets.Player) -> plyr_[_pID]
REF_371(uint256) -> REF_370.win
REF_372(PCKdatasets.Player) -> plyr_[_pID]
REF_373(uint256) -> REF_372.win
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_373', '_prize'] 
REF_371(uint256) (->plyr_) := TMP_244(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_245(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_245(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_376(uint256) -> _eventData_.compressedData
REF_376(-> _eventData_) = REF_376 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_246(bool) = _eth >= 1000000000000000000
TMP_247(bool) = _eth < 10000000000000000000
TMP_248(bool) = TMP_246 && TMP_247
CONDITION TMP_248"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_249(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_250(uint256) = TMP_249 / 100
_prize(uint256) := TMP_250(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_378(PCKdatasets.Player) -> plyr_[_pID]
REF_379(uint256) -> REF_378.win
REF_380(PCKdatasets.Player) -> plyr_[_pID]
REF_381(uint256) -> REF_380.win
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_381', '_prize'] 
REF_379(uint256) (->plyr_) := TMP_251(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_252(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_384(uint256) -> _eventData_.compressedData
REF_384(-> _eventData_) = REF_384 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_253(bool) = _eth >= 100000000000000000
TMP_254(bool) = _eth < 1000000000000000000
TMP_255(bool) = TMP_253 && TMP_254
CONDITION TMP_255"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_257(uint256) = TMP_256 / 100
_prize(uint256) := TMP_257(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_386(PCKdatasets.Player) -> plyr_[_pID]
REF_387(uint256) -> REF_386.win
REF_388(PCKdatasets.Player) -> plyr_[_pID]
REF_389(uint256) -> REF_388.win
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_389', '_prize'] 
REF_387(uint256) (->plyr_) := TMP_258(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_259(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_392(uint256) -> _eventData_.compressedData
REF_392(-> _eventData_) = REF_392 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_393(uint256) -> _eventData_.compressedData
REF_393(-> _eventData_) = REF_393 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_394(uint256) -> _eventData_.compressedData
TMP_260(uint256) = _prize * 1000000000000000000000000000000000
REF_394(-> _eventData_) = REF_394 + TMP_260"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_395(uint256) -> _eventData_.compressedData
REF_396(uint256) -> _eventData_.compressedData
TMP_261(uint256) = airDropTracker_ * 1000
TMP_262(uint256) = REF_396 + TMP_261
REF_395(uint256) (->_eventData_) := TMP_262(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_397(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_398(PCKdatasets.PlayerRounds) -> REF_397[_rID]
REF_399(uint256) -> REF_398.keys
REF_401(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_402(PCKdatasets.PlayerRounds) -> REF_401[_rID]
REF_403(uint256) -> REF_402.keys
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_403'] 
REF_399(uint256) (->plyrRnds_) := TMP_263(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_404(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_405(PCKdatasets.PlayerRounds) -> REF_404[_rID]
REF_406(uint256) -> REF_405.eth
REF_408(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_409(PCKdatasets.PlayerRounds) -> REF_408[_rID]
REF_410(uint256) -> REF_409.eth
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_410'] 
REF_406(uint256) (->plyrRnds_) := TMP_264(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_411(PCKdatasets.Round) -> round_[_rID]
REF_412(uint256) -> REF_411.keys
REF_414(PCKdatasets.Round) -> round_[_rID]
REF_415(uint256) -> REF_414.keys
TMP_265(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_415'] 
REF_412(uint256) (->round_) := TMP_265(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_416(PCKdatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.eth
REF_419(PCKdatasets.Round) -> round_[_rID]
REF_420(uint256) -> REF_419.eth
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_420'] 
REF_417(uint256) (->round_) := TMP_266(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_421(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_422(uint256) -> REF_421[_team]
REF_424(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_425(uint256) -> REF_424[_team]
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_425'] 
REF_422(uint256) (->rndTmEth_) := TMP_267(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_268(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.distributeExternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_268(PCKdatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_269(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.distributeInternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_269(PCKdatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.endTx(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 3096.sol-PlayCoinKey-determinePID(PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_485(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_485(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_308(bool) = _pID == 0
CONDITION TMP_308"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_309(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_309(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_310(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_310(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_311(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_311(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_489(uint256) -> pIDxAddr_[msg.sender]
REF_489(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_490(PCKdatasets.Player) -> plyr_[_pID]
REF_491(address) -> REF_490.addr
REF_491(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_312(bool) = _name != 
CONDITION TMP_312"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_492(uint256) -> pIDxName_[_name]
REF_492(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_493(PCKdatasets.Player) -> plyr_[_pID]
REF_494(bytes32) -> REF_493.name
REF_494(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_495(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_496(bool) -> REF_495[_name]
REF_496(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_313(bool) = _laff != 0
TMP_314(bool) = _laff != _pID
TMP_315(bool) = TMP_313 && TMP_314
CONDITION TMP_315"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_497(PCKdatasets.Player) -> plyr_[_pID]
REF_498(uint256) -> REF_497.laff
REF_498(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_499(uint256) -> _eventData_.compressedData
REF_500(uint256) -> _eventData_.compressedData
TMP_316(uint256) = REF_500 + 1
REF_499(uint256) (->_eventData_) := TMP_316(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3096.sol-PlayCoinKey-distributeExternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_410(uint256) = _eth / 50
_com(uint256) := TMP_410(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_411 = CONVERT admin to address
TMP_413(bool) = LOW_LEVEL_CALL, dest:TMP_411, function:call, arguments:[] value:_com 
TMP_414 = UnaryType.BANG TMP_413 
CONDITION TMP_414"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_long = _eth / 100

IRs:
TMP_415(uint256) = _eth / 100
_long(uint256) := TMP_415(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSwap(_long)

IRs:
INTERNAL_CALL, PlayCoinKey.potSwap(uint256)(_long)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_417(uint256) = _eth / 10
_aff(uint256) := TMP_417(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_418(bool) = _affID != _pID
REF_622(PCKdatasets.Player) -> plyr_[_affID]
REF_623(bytes32) -> REF_622.name
TMP_419(bool) = REF_623 != 
TMP_420(bool) = TMP_418 && TMP_419
CONDITION TMP_420"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_624(PCKdatasets.Player) -> plyr_[_affID]
REF_625(uint256) -> REF_624.aff
REF_627(PCKdatasets.Player) -> plyr_[_affID]
REF_628(uint256) -> REF_627.aff
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_628'] 
REF_625(uint256) (->plyr_) := TMP_421(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
PCKevents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_630(PCKdatasets.Player) -> plyr_[_affID]
REF_631(address) -> REF_630.addr
REF_632(PCKdatasets.Player) -> plyr_[_affID]
REF_633(bytes32) -> REF_632.name
Emit onAffiliatePayout(_affID,REF_631,REF_633,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_636(PCKdatasets.TeamFee) -> fees_[_team]
REF_637(uint256) -> REF_636.p3d
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_637'] 
TMP_424(uint256) = TMP_423 / 100
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_424'] 
_p3d(uint256) := TMP_425(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_426(bool) = _p3d > 0
CONDITION TMP_426"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
PCGod.deposit.value(_p3d)()

IRs:
HIGH_LEVEL_CALL, dest:PCGod(PlayCoinGodInterface), function:deposit, arguments:[] value:_p3d "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.PCPAmount = _p3d.add(_eventData_.PCPAmount)

IRs:
REF_640(uint256) -> _eventData_.PCPAmount
REF_642(uint256) -> _eventData_.PCPAmount
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_642'] 
REF_640(uint256) (->_eventData_) := TMP_429(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3096.sol-PlayCoinKey-distributeInternal(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_650(PCKdatasets.TeamFee) -> fees_[_team]
REF_651(uint256) -> REF_650.gen
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_651'] 
TMP_434(uint256) = TMP_433 / 100
_gen(uint256) := TMP_434(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_435(uint256) = _eth / 100
_air(uint256) := TMP_435(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_436(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_438(uint256) = TMP_437 / 100
REF_657(PCKdatasets.TeamFee) -> fees_[_team]
REF_658(uint256) -> REF_657.p3d
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_658'] 
TMP_440(uint256) = TMP_439 / 100
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_438', 'TMP_440'] 
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_441'] 
_eth(uint256) := TMP_442(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_443(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_444(uint256) = INTERNAL_CALL, PlayCoinKey.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_444(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_445(bool) = _dust > 0
CONDITION TMP_445"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_446(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_661(PCKdatasets.Round) -> round_[_rID]
REF_662(uint256) -> REF_661.pot
TMP_447(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_665(PCKdatasets.Round) -> round_[_rID]
REF_666(uint256) -> REF_665.pot
TMP_448(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_447', 'REF_666'] 
REF_662(uint256) (->round_) := TMP_448(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_667(uint256) -> _eventData_.genAmount
REF_669(uint256) -> _eventData_.genAmount
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_669'] 
REF_667(uint256) (->_eventData_) := TMP_449(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_670(uint256) -> _eventData_.potAmount
REF_670(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3096.sol-PlayCoinKey-endRound(PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_515(PCKdatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.plyr
_winPID(uint256) := REF_516(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_517(PCKdatasets.Round) -> round_[_rID]
REF_518(uint256) -> REF_517.team
_winTID(uint256) := REF_518(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_519(PCKdatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.pot
_pot(uint256) := REF_520(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_327(uint256) = TMP_326 / 100
_win(uint256) := TMP_327(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_328(uint256) = _pot / 50
_com(uint256) := TMP_328(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_523(PCKdatasets.PotSplit) -> potSplit_[_winTID]
REF_524(uint256) -> REF_523.gen
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_524'] 
TMP_330(uint256) = TMP_329 / 100
_gen(uint256) := TMP_330(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_526(PCKdatasets.PotSplit) -> potSplit_[_winTID]
REF_527(uint256) -> REF_526.p3d
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_527'] 
TMP_332(uint256) = TMP_331 / 100
_p3d(uint256) := TMP_332(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_333', '_com'] 
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_334', '_gen'] 
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_335', '_p3d'] 
_res(uint256) := TMP_336(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_533(PCKdatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.keys
TMP_338(uint256) = TMP_337 / REF_534
_ppt(uint256) := TMP_338(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_537(PCKdatasets.Round) -> round_[_rID]
REF_538(uint256) -> REF_537.keys
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_538'] 
TMP_340(uint256) = TMP_339 / 1000000000000000000
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_340'] 
_dust(uint256) := TMP_341(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_342(bool) = _dust > 0
CONDITION TMP_342"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_343(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_344(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_541(PCKdatasets.Player) -> plyr_[_winPID]
REF_542(uint256) -> REF_541.win
REF_544(PCKdatasets.Player) -> plyr_[_winPID]
REF_545(uint256) -> REF_544.win
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_545'] 
REF_542(uint256) (->plyr_) := TMP_345(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_346 = CONVERT admin to address
TMP_348(bool) = LOW_LEVEL_CALL, dest:TMP_346, function:call, arguments:[] value:_com 
TMP_349 = UnaryType.BANG TMP_348 
CONDITION TMP_349"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_p3d = _p3d.add(_com)

IRs:
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_com'] 
_p3d(uint256) := TMP_350(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_549(PCKdatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.mask
REF_552(PCKdatasets.Round) -> round_[_rID]
REF_553(uint256) -> REF_552.mask
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_553'] 
REF_550(uint256) (->round_) := TMP_351(uint256)"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_p3d > 0

IRs:
TMP_352(bool) = _p3d > 0
CONDITION TMP_352"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
PCGod.deposit.value(_p3d)()

IRs:
HIGH_LEVEL_CALL, dest:PCGod(PlayCoinGodInterface), function:deposit, arguments:[] value:_p3d "];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_556(uint256) -> _eventData_.compressedData
REF_557(uint256) -> _eventData_.compressedData
REF_558(PCKdatasets.Round) -> round_[_rID]
REF_559(uint256) -> REF_558.end
TMP_355(uint256) = REF_559 * 1000000
TMP_356(uint256) = REF_557 + TMP_355
REF_556(uint256) (->_eventData_) := TMP_356(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_560(uint256) -> _eventData_.compressedIDs
REF_561(uint256) -> _eventData_.compressedIDs
TMP_357(uint256) = _winPID * 100000000000000000000000000
TMP_358(uint256) = REF_561 + TMP_357
TMP_359(uint256) = _winTID * 100000000000000000
TMP_360(uint256) = TMP_358 + TMP_359
REF_560(uint256) (->_eventData_) := TMP_360(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_562(address) -> _eventData_.winnerAddr
REF_563(PCKdatasets.Player) -> plyr_[_winPID]
REF_564(address) -> REF_563.addr
REF_562(address) (->_eventData_) := REF_564(address)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_565(bytes32) -> _eventData_.winnerName
REF_566(PCKdatasets.Player) -> plyr_[_winPID]
REF_567(bytes32) -> REF_566.name
REF_565(bytes32) (->_eventData_) := REF_567(bytes32)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_568(uint256) -> _eventData_.amountWon
REF_568(uint256) (->_eventData_) := _win(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_569(uint256) -> _eventData_.genAmount
REF_569(uint256) (->_eventData_) := _gen(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_eventData_.PCPAmount = _p3d

IRs:
REF_570(uint256) -> _eventData_.PCPAmount
REF_570(uint256) (->_eventData_) := _p3d(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_571(uint256) -> _eventData_.newPot
REF_571(uint256) (->_eventData_) := _res(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_rID ++

IRs:
TMP_361(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
round_[_rID].ended = false

IRs:
REF_572(PCKdatasets.Round) -> round_[_rID]
REF_573(bool) -> REF_572.ended
REF_573(bool) (->round_) := False(bool)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_574(PCKdatasets.Round) -> round_[_rID]
REF_575(uint256) -> REF_574.strt
REF_575(uint256) (->round_) := now(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_576(PCKdatasets.Round) -> round_[_rID]
REF_577(uint256) -> REF_576.end
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_362', 'rndGap_'] 
REF_577(uint256) (->round_) := TMP_363(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_580(PCKdatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.pot
REF_581(uint256) (->round_) := _res(uint256)"];
37->38;
38[label="Node Type: RETURN 38

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3096.sol-PlayCoinKey-endTx(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_711(uint256) -> _eventData_.compressedData
REF_712(uint256) -> _eventData_.compressedData
TMP_466(uint256) = now * 1000000000000000000
TMP_467(uint256) = REF_712 + TMP_466
TMP_468(uint256) = _team * 100000000000000000000000000000
TMP_469(uint256) = TMP_467 + TMP_468
REF_711(uint256) (->_eventData_) := TMP_469(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_713(uint256) -> _eventData_.compressedIDs
REF_714(uint256) -> _eventData_.compressedIDs
TMP_470(uint256) = REF_714 + _pID
TMP_471(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_472(uint256) = TMP_470 + TMP_471
REF_713(uint256) (->_eventData_) := TMP_472(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
PCKevents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_716(uint256) -> _eventData_.compressedData
REF_717(uint256) -> _eventData_.compressedIDs
REF_718(PCKdatasets.Player) -> plyr_[_pID]
REF_719(bytes32) -> REF_718.name
REF_720(address) -> _eventData_.winnerAddr
REF_721(bytes32) -> _eventData_.winnerName
REF_722(uint256) -> _eventData_.amountWon
REF_723(uint256) -> _eventData_.newPot
REF_724(uint256) -> _eventData_.PCPAmount
REF_725(uint256) -> _eventData_.genAmount
REF_726(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_716,REF_717,REF_719,msg.sender,_eth,_keys,REF_720,REF_721,REF_722,REF_723,REF_724,REF_725,REF_726,airDropPot_)"];
}
// Function: 3096.sol-PlayCoinKey-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_29(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.determinePID(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_29(PCKdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_29(PCKdatasets.Player) -> plyr_[_pID]
REF_30(uint256) -> REF_29.laff
INTERNAL_CALL, PlayCoinKey.buyCore(uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,REF_30,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(msg.value)"];
7->1;
}
// Function: 3096.sol-PlayCoinKey-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_141(PCKdatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.strt
TMP_131(uint256) = REF_142 + rndGap_
TMP_132(bool) = _now > TMP_131
REF_143(PCKdatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.end
TMP_133(bool) = _now <= REF_144
REF_145(PCKdatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_134(bool) = _now > REF_146
REF_147(PCKdatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.plyr
TMP_135(bool) = REF_148 == 0
TMP_136(bool) = TMP_134 && TMP_135
TMP_137(bool) = TMP_133 || TMP_136
TMP_138(bool) = TMP_132 && TMP_137
CONDITION TMP_138"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_149(PCKdatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.keys
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_150', '1000000000000000000'] 
TMP_140(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_139', '1000000000000000000'] 
RETURN TMP_140"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3096.sol-PlayCoinKey-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_223(PCKdatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.ico
REF_225(PCKdatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.keys
REF_227(PCKdatasets.Round) -> round_[_rID]
REF_228(uint256) -> REF_227.end
REF_229(PCKdatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.strt
REF_231(PCKdatasets.Round) -> round_[_rID]
REF_232(uint256) -> REF_231.pot
REF_233(PCKdatasets.Round) -> round_[_rID]
REF_234(uint256) -> REF_233.team
REF_235(PCKdatasets.Round) -> round_[_rID]
REF_236(uint256) -> REF_235.plyr
TMP_171(uint256) = REF_236 * 10
TMP_172(uint256) = REF_234 + TMP_171
REF_237(PCKdatasets.Round) -> round_[_rID]
REF_238(uint256) -> REF_237.plyr
REF_239(PCKdatasets.Player) -> plyr_[REF_238]
REF_240(address) -> REF_239.addr
REF_241(PCKdatasets.Round) -> round_[_rID]
REF_242(uint256) -> REF_241.plyr
REF_243(PCKdatasets.Player) -> plyr_[REF_242]
REF_244(bytes32) -> REF_243.name
REF_245(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_246(uint256) -> REF_245[0]
REF_247(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_248(uint256) -> REF_247[1]
REF_249(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_250(uint256) -> REF_249[2]
REF_251(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_252(uint256) -> REF_251[3]
TMP_173(uint256) = airDropPot_ * 1000
TMP_174(uint256) = airDropTracker_ + TMP_173
RETURN REF_224,_rID,REF_226,REF_228,REF_230,REF_232,TMP_172,REF_240,REF_244,REF_246,REF_248,REF_250,REF_252,TMP_174"];
}
// Function: 3096.sol-PlayCoinKey-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_175 = CONVERT 0 to address
TMP_176(bool) = _addr == TMP_175
CONDITION TMP_176"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_177(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_253(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_253(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_254(PCKdatasets.Player) -> plyr_[_pID]
REF_255(bytes32) -> REF_254.name
REF_256(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_257(PCKdatasets.PlayerRounds) -> REF_256[_rID]
REF_258(uint256) -> REF_257.keys
REF_259(PCKdatasets.Player) -> plyr_[_pID]
REF_260(uint256) -> REF_259.win
REF_261(PCKdatasets.Player) -> plyr_[_pID]
REF_262(uint256) -> REF_261.gen
REF_264(PCKdatasets.Player) -> plyr_[_pID]
REF_265(uint256) -> REF_264.lrnd
TMP_178(uint256) = INTERNAL_CALL, PlayCoinKey.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_265)
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_262', 'TMP_178'] 
REF_266(PCKdatasets.Player) -> plyr_[_pID]
REF_267(uint256) -> REF_266.aff
REF_268(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_269(PCKdatasets.PlayerRounds) -> REF_268[_rID]
REF_270(uint256) -> REF_269.eth
RETURN _pID,REF_255,REF_258,REF_260,TMP_179,REF_267,REF_270"];
}
// Function: 3096.sol-PlayCoinKey-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_163(PCKdatasets.Round) -> round_[_rID]
REF_164(uint256) -> REF_163.end
TMP_147(bool) = now > REF_164
REF_165(PCKdatasets.Round) -> round_[_rID]
REF_166(bool) -> REF_165.ended
TMP_148(bool) = REF_166 == False
TMP_149(bool) = TMP_147 && TMP_148
REF_167(PCKdatasets.Round) -> round_[_rID]
REF_168(uint256) -> REF_167.plyr
TMP_150(bool) = REF_168 != 0
TMP_151(bool) = TMP_149 && TMP_150
CONDITION TMP_151"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_169(PCKdatasets.Round) -> round_[_rID]
REF_170(uint256) -> REF_169.plyr
TMP_152(bool) = REF_170 == _pID
CONDITION TMP_152"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_171(PCKdatasets.Player) -> plyr_[_pID]
REF_172(uint256) -> REF_171.win
REF_174(PCKdatasets.Round) -> round_[_rID]
REF_175(uint256) -> REF_174.pot
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_175', '48'] 
TMP_154(uint256) = TMP_153 / 100
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_172', 'TMP_154'] 
REF_177(PCKdatasets.Player) -> plyr_[_pID]
REF_178(uint256) -> REF_177.gen
TMP_156(uint256) = INTERNAL_CALL, PlayCoinKey.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_181(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_182(PCKdatasets.PlayerRounds) -> REF_181[_rID]
REF_183(uint256) -> REF_182.mask
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_156', 'REF_183'] 
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_178', 'TMP_157'] 
REF_184(PCKdatasets.Player) -> plyr_[_pID]
REF_185(uint256) -> REF_184.aff
RETURN TMP_155,TMP_158,REF_185"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_186(PCKdatasets.Player) -> plyr_[_pID]
REF_187(uint256) -> REF_186.win
REF_188(PCKdatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.gen
TMP_159(uint256) = INTERNAL_CALL, PlayCoinKey.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_192(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_193(PCKdatasets.PlayerRounds) -> REF_192[_rID]
REF_194(uint256) -> REF_193.mask
TMP_160(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_159', 'REF_194'] 
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_189', 'TMP_160'] 
REF_195(PCKdatasets.Player) -> plyr_[_pID]
REF_196(uint256) -> REF_195.aff
RETURN REF_187,TMP_161,REF_196"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_197(PCKdatasets.Player) -> plyr_[_pID]
REF_198(uint256) -> REF_197.win
REF_199(PCKdatasets.Player) -> plyr_[_pID]
REF_200(uint256) -> REF_199.gen
REF_202(PCKdatasets.Player) -> plyr_[_pID]
REF_203(uint256) -> REF_202.lrnd
TMP_162(uint256) = INTERNAL_CALL, PlayCoinKey.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_203)
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_200', 'TMP_162'] 
REF_204(PCKdatasets.Player) -> plyr_[_pID]
REF_205(uint256) -> REF_204.aff
RETURN REF_198,TMP_163,REF_205"];
}
// Function: 3096.sol-PlayCoinKey-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_206(PCKdatasets.Round) -> round_[_rID]
REF_207(uint256) -> REF_206.mask
REF_209(PCKdatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.pot
REF_212(PCKdatasets.Round) -> round_[_rID]
REF_213(uint256) -> REF_212.team
REF_214(PCKdatasets.PotSplit) -> potSplit_[REF_213]
REF_215(uint256) -> REF_214.gen
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_210', 'REF_215'] 
TMP_165(uint256) = TMP_164 / 100
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_165', '1000000000000000000'] 
REF_217(PCKdatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.keys
TMP_167(uint256) = TMP_166 / REF_218
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_207', 'TMP_167'] 
REF_220(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_221(PCKdatasets.PlayerRounds) -> REF_220[_rID]
REF_222(uint256) -> REF_221.keys
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_168', 'REF_222'] 
TMP_170(uint256) = TMP_169 / 1000000000000000000
RETURN TMP_170"];
}
// Function: 3096.sol-PlayCoinKey-getRoundStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(rID_,round_[rID_].ended)

IRs:
REF_18(PCKdatasets.Round) -> round_[rID_]
REF_19(bool) -> REF_18.ended
RETURN rID_,REF_19"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
2->1;
}
// Function: 3096.sol-PlayCoinKey-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_153(PCKdatasets.Round) -> round_[_rID]
REF_154(uint256) -> REF_153.end
TMP_141(bool) = _now < REF_154
CONDITION TMP_141"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_155(PCKdatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.strt
TMP_142(uint256) = REF_156 + rndGap_
TMP_143(bool) = _now > TMP_142
CONDITION TMP_143"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_157(PCKdatasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.end
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_158', '_now'] 
RETURN TMP_144"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_160(PCKdatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.strt
TMP_145(uint256) = REF_161 + rndGap_
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_145', '_now'] 
RETURN TMP_146"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3096.sol-PlayCoinKey-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_448(PCKdatasets.Round) -> round_[_rID]
REF_449(uint256) -> REF_448.strt
TMP_284(uint256) = REF_449 + rndGap_
TMP_285(bool) = _now > TMP_284
REF_450(PCKdatasets.Round) -> round_[_rID]
REF_451(uint256) -> REF_450.end
TMP_286(bool) = _now <= REF_451
REF_452(PCKdatasets.Round) -> round_[_rID]
REF_453(uint256) -> REF_452.end
TMP_287(bool) = _now > REF_453
REF_454(PCKdatasets.Round) -> round_[_rID]
REF_455(uint256) -> REF_454.plyr
TMP_288(bool) = REF_455 == 0
TMP_289(bool) = TMP_287 && TMP_288
TMP_290(bool) = TMP_286 || TMP_289
TMP_291(bool) = TMP_285 && TMP_290
CONDITION TMP_291"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_456(PCKdatasets.Round) -> round_[_rID]
REF_457(uint256) -> REF_456.keys
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_457', '_keys'] 
TMP_293(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_292', '_keys'] 
RETURN TMP_293"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_294(uint256) = LIBRARY_CALL, dest:PCKKeysCalcLong, function:PCKKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_294"];
}
// Function: 3096.sol-PlayCoinKey-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_484(bool) = activated_ == True
TMP_485(None) = SOLIDITY_CALL require(bool,string)(TMP_484,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3096.sol-PlayCoinKey-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(msg.sender == tx.origin,sorry humans only)

IRs:
TMP_488(bool) = msg.sender == tx.origin
TMP_489(None) = SOLIDITY_CALL require(bool,string)(TMP_488,sorry humans only)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 3096.sol-PlayCoinKey-isRoundActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(round_[rID_].ended == false,the round is finished)

IRs:
REF_731(PCKdatasets.Round) -> round_[rID_]
REF_732(bool) -> REF_731.ended
TMP_486(bool) = REF_732 == False
TMP_487(None) = SOLIDITY_CALL require(bool,string)(TMP_486,the round is finished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3096.sol-PlayCoinKey-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_490(bool) = _eth >= 1000000000
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_492(bool) = _eth <= 100000000000000000000000
TMP_493(None) = SOLIDITY_CALL require(bool,string)(TMP_492,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3096.sol-PlayCoinKey-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(round_[rID_].ended == true && closed_ == true,the round is active or not close)

IRs:
REF_16(PCKdatasets.Round) -> round_[rID_]
REF_17(bool) -> REF_16.ended
TMP_8(bool) = REF_17 == True
TMP_9(bool) = closed_ == True
TMP_10(bool) = TMP_8 && TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,the round is active or not close)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(admin)

IRs:
TMP_12(None) = SOLIDITY_CALL selfdestruct(address)(admin)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
3->1;
}
// Function: 3096.sol-PlayCoinKey-managePlayer(uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_501(PCKdatasets.Player) -> plyr_[_pID]
REF_502(uint256) -> REF_501.lrnd
TMP_320(bool) = REF_502 != 0
CONDITION TMP_320"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_503(PCKdatasets.Player) -> plyr_[_pID]
REF_504(uint256) -> REF_503.lrnd
INTERNAL_CALL, PlayCoinKey.updateGenVault(uint256,uint256)(_pID,REF_504)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_505(PCKdatasets.Player) -> plyr_[_pID]
REF_506(uint256) -> REF_505.lrnd
REF_506(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_507(uint256) -> _eventData_.compressedData
REF_508(uint256) -> _eventData_.compressedData
TMP_322(uint256) = REF_508 + 10
REF_507(uint256) (->_eventData_) := TMP_322(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3096.sol-PlayCoinKey-nextRound()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rID_ ++

IRs:
TMP_323(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[rID_].strt = now

IRs:
REF_509(PCKdatasets.Round) -> round_[rID_]
REF_510(uint256) -> REF_509.strt
REF_510(uint256) (->round_) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[rID_].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_511(PCKdatasets.Round) -> round_[rID_]
REF_512(uint256) -> REF_511.end
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_324', 'rndGap_'] 
REF_512(uint256) (->round_) := TMP_325(uint256)"];
}
// Function: 3096.sol-PlayCoinKey-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,onlyAdmins failed - msg.sender is not an admin)

IRs:
TMP_494(bool) = msg.sender == admin
TMP_495(None) = SOLIDITY_CALL require(bool,string)(TMP_494,onlyAdmins failed - msg.sender is not an admin)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3096.sol-PlayCoinKey-potSwap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_430(uint256) = rID_ + 1
_rID(uint256) := TMP_430(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_pot)

IRs:
REF_643(PCKdatasets.Round) -> round_[_rID]
REF_644(uint256) -> REF_643.pot
REF_645(PCKdatasets.Round) -> round_[_rID]
REF_646(uint256) -> REF_645.pot
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_646', '_pot'] 
REF_644(uint256) (->round_) := TMP_431(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
PCKevents.onPotSwapDeposit(_rID,_pot)

IRs:
Emit onPotSwapDeposit(_rID,_pot)"];
}
// Function: 3096.sol-PlayCoinKey-reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > (round_[_rID].strt + rndGap_) && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_305(PCKdatasets.Round) -> round_[_rID]
REF_306(uint256) -> REF_305.strt
TMP_200(uint256) = REF_306 + rndGap_
TMP_201(bool) = _now > TMP_200
REF_307(PCKdatasets.Round) -> round_[_rID]
REF_308(uint256) -> REF_307.end
TMP_202(bool) = _now <= REF_308
REF_309(PCKdatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.end
TMP_203(bool) = _now > REF_310
REF_311(PCKdatasets.Round) -> round_[_rID]
REF_312(uint256) -> REF_311.plyr
TMP_204(bool) = REF_312 == 0
TMP_205(bool) = TMP_203 && TMP_204
TMP_206(bool) = TMP_202 || TMP_205
TMP_207(bool) = TMP_201 && TMP_206
CONDITION TMP_207"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_313(PCKdatasets.Player) -> plyr_[_pID]
REF_314(uint256) -> REF_313.gen
TMP_208(uint256) = INTERNAL_CALL, PlayCoinKey.withdrawEarnings(uint256)(_pID)
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_208', '_eth'] 
REF_314(uint256) (->plyr_) := TMP_209(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.core(uint256,uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->16;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_316(PCKdatasets.Round) -> round_[_rID]
REF_317(uint256) -> REF_316.end
TMP_211(bool) = _now > REF_317
REF_318(PCKdatasets.Round) -> round_[_rID]
REF_319(bool) -> REF_318.ended
TMP_212(bool) = REF_319 == False
TMP_213(bool) = TMP_211 && TMP_212
CONDITION TMP_213"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_320(PCKdatasets.Round) -> round_[_rID]
REF_321(bool) -> REF_320.ended
REF_321(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_214(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.endRound(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_214(PCKdatasets.EventReturns)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! closed_

IRs:
TMP_215 = UnaryType.BANG closed_ 
CONDITION TMP_215"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
nextRound()

IRs:
INTERNAL_CALL, PlayCoinKey.nextRound()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_322(uint256) -> _eventData_.compressedData
REF_323(uint256) -> _eventData_.compressedData
TMP_217(uint256) = _now * 1000000000000000000
TMP_218(uint256) = REF_323 + TMP_217
REF_322(uint256) (->_eventData_) := TMP_218(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_324(uint256) -> _eventData_.compressedIDs
REF_325(uint256) -> _eventData_.compressedIDs
TMP_219(uint256) = REF_325 + _pID
REF_324(uint256) (->_eventData_) := TMP_219(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
PCKevents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount)

IRs:
REF_327(PCKdatasets.Player) -> plyr_[_pID]
REF_328(bytes32) -> REF_327.name
REF_329(uint256) -> _eventData_.compressedData
REF_330(uint256) -> _eventData_.compressedIDs
REF_331(address) -> _eventData_.winnerAddr
REF_332(bytes32) -> _eventData_.winnerName
REF_333(uint256) -> _eventData_.amountWon
REF_334(uint256) -> _eventData_.newPot
REF_335(uint256) -> _eventData_.PCPAmount
REF_336(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_328,REF_329,REF_330,REF_331,REF_332,REF_333,REF_334,REF_335,REF_336)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
}
// Function: 3096.sol-PlayCoinKey-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_63(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_63(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_79 = CONVERT 0 to address
TMP_80(bool) = _affCode == TMP_79
TMP_81(bool) = _affCode == msg.sender
TMP_82(bool) = TMP_80 || TMP_81
CONDITION TMP_82"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_64(PCKdatasets.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.laff
_affID(uint256) := REF_65(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_66(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_66(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_67(PCKdatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
TMP_83(bool) = _affID != REF_68
CONDITION TMP_83"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_69(PCKdatasets.Player) -> plyr_[_pID]
REF_70(uint256) -> REF_69.laff
REF_70(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_84(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_84(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(_eth)"];
16->1;
}
// Function: 3096.sol-PlayCoinKey-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_56(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_56(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_69(bool) = _affCode == 0
TMP_70(bool) = _affCode == _pID
TMP_71(bool) = TMP_69 || TMP_70
CONDITION TMP_71"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_57(PCKdatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
_affCode(uint256) := REF_58(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_59(PCKdatasets.Player) -> plyr_[_pID]
REF_60(uint256) -> REF_59.laff
TMP_72(bool) = _affCode != REF_60
CONDITION TMP_72"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_61(PCKdatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
REF_62(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_73(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_73(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 3096.sol-PlayCoinKey-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_71(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_71(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_90(bool) = _affCode == 
REF_72(PCKdatasets.Player) -> plyr_[_pID]
REF_73(bytes32) -> REF_72.name
TMP_91(bool) = _affCode == REF_73
TMP_92(bool) = TMP_90 || TMP_91
CONDITION TMP_92"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_74(PCKdatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
_affID(uint256) := REF_75(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_76(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_76(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_77(PCKdatasets.Player) -> plyr_[_pID]
REF_78(uint256) -> REF_77.laff
TMP_93(bool) = _affID != REF_78
CONDITION TMP_93"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_79(PCKdatasets.Player) -> plyr_[_pID]
REF_80(uint256) -> REF_79.laff
REF_80(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_94(uint256) = INTERNAL_CALL, PlayCoinKey.verifyTeam(uint256)(_team)
_team(uint256) := TMP_94(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, PlayCoinKey.reLoadCore(uint256,uint256,uint256,uint256,PCKdatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isRoundActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isRoundActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, PlayCoinKey.isWithinLimits(uint256)(_eth)"];
16->1;
}
// Function: 3096.sol-PlayCoinKey-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_295 = CONVERT PlayerBook to address
TMP_296(bool) = msg.sender == TMP_295
TMP_297(None) = SOLIDITY_CALL require(bool,string)(TMP_296,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_461(uint256) -> pIDxAddr_[_addr]
TMP_298(bool) = REF_461 != _pID
CONDITION TMP_298"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_462(uint256) -> pIDxAddr_[_addr]
REF_462(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_463(uint256) -> pIDxName_[_name]
TMP_299(bool) = REF_463 != _pID
CONDITION TMP_299"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_464(uint256) -> pIDxName_[_name]
REF_464(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_465(PCKdatasets.Player) -> plyr_[_pID]
REF_466(address) -> REF_465.addr
TMP_300(bool) = REF_466 != _addr
CONDITION TMP_300"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_467(PCKdatasets.Player) -> plyr_[_pID]
REF_468(address) -> REF_467.addr
REF_468(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_469(PCKdatasets.Player) -> plyr_[_pID]
REF_470(bytes32) -> REF_469.name
TMP_301(bool) = REF_470 != _name
CONDITION TMP_301"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_471(PCKdatasets.Player) -> plyr_[_pID]
REF_472(bytes32) -> REF_471.name
REF_472(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_473(PCKdatasets.Player) -> plyr_[_pID]
REF_474(uint256) -> REF_473.laff
TMP_302(bool) = REF_474 != _laff
CONDITION TMP_302"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_475(PCKdatasets.Player) -> plyr_[_pID]
REF_476(uint256) -> REF_475.laff
REF_476(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_477(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_478(bool) -> REF_477[_name]
TMP_303(bool) = REF_478 == False
CONDITION TMP_303"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_479(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_480(bool) -> REF_479[_name]
REF_480(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3096.sol-PlayCoinKey-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_304 = CONVERT PlayerBook to address
TMP_305(bool) = msg.sender == TMP_304
TMP_306(None) = SOLIDITY_CALL require(bool,string)(TMP_305,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_481(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_482(bool) -> REF_481[_name]
TMP_307(bool) = REF_482 == False
CONDITION TMP_307"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_483(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_484(bool) -> REF_483[_name]
REF_484(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3096.sol-PlayCoinKey-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_119(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_119(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_117(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_117(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PCKevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_119(PCKdatasets.Player) -> plyr_[_affID]
REF_120(address) -> REF_119.addr
REF_121(PCKdatasets.Player) -> plyr_[_affID]
REF_122(bytes32) -> REF_121.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_120,REF_122,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
9->1;
}
// Function: 3096.sol-PlayCoinKey-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_123(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_123(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_126(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_126(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PCKevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_128(PCKdatasets.Player) -> plyr_[_affID]
REF_129(address) -> REF_128.addr
REF_130(PCKdatasets.Player) -> plyr_[_affID]
REF_131(bytes32) -> REF_130.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_129,REF_131,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
9->1;
}
// Function: 3096.sol-PlayCoinKey-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_127(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_127(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_135(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_135(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PCKevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_137(PCKdatasets.Player) -> plyr_[_affID]
REF_138(address) -> REF_137.addr
REF_139(PCKdatasets.Player) -> plyr_[_affID]
REF_140(bytes32) -> REF_139.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_138,REF_140,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
9->1;
}
// Function: 3096.sol-PlayCoinKey-setEnforce(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
closed_ = _closed

IRs:
closed_(bool) := _closed(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! closed_ && round_[rID_].ended == true && activated_ == true

IRs:
TMP_16 = UnaryType.BANG closed_ 
REF_20(PCKdatasets.Round) -> round_[rID_]
REF_21(bool) -> REF_20.ended
TMP_17(bool) = REF_21 == True
TMP_18(bool) = TMP_16 && TMP_17
TMP_19(bool) = activated_ == True
TMP_20(bool) = TMP_18 && TMP_19
CONDITION TMP_20"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nextRound()

IRs:
INTERNAL_CALL, PlayCoinKey.nextRound()()"];
3->7;
4[label="Node Type: IF 4

EXPRESSION:
closed_ && round_[rID_].ended == false && activated_ == true

IRs:
REF_22(PCKdatasets.Round) -> round_[rID_]
REF_23(bool) -> REF_22.ended
TMP_22(bool) = REF_23 == False
TMP_23(bool) = closed_ && TMP_22
TMP_24(bool) = activated_ == True
TMP_25(bool) = TMP_23 && TMP_24
CONDITION TMP_25"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[rID_].end = now - 1

IRs:
REF_24(PCKdatasets.Round) -> round_[rID_]
REF_25(uint256) -> REF_24.end
TMP_26(uint256) = now - 1
REF_25(uint256) (->round_) := TMP_26(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(closed_,rID_,now > round_[rID_].end)

IRs:
REF_26(PCKdatasets.Round) -> round_[rID_]
REF_27(uint256) -> REF_26.end
TMP_27(bool) = now > REF_27
RETURN closed_,rID_,TMP_27"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
9->1;
}
// Function: 3096.sol-PlayCoinKey-setThreshold(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rndReduceThreshold_ = _threshold

IRs:
rndReduceThreshold_(uint256) := _threshold(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
rndReduceThreshold_

IRs:
RETURN rndReduceThreshold_"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, PlayCoinKey.onlyAdmins()()"];
3->1;
}
// Function: 3096.sol-PlayCoinKey-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PCGod = PlayCoinGodInterface(0x6f93Be8fD47EBb62F54ebd149B58658bf9BaCF4f)

IRs:
TMP_482 = CONVERT 636992785382790058094200233949759230540219338575 to PlayCoinGodInterface
PCGod(PlayCoinGodInterface) := TMP_482(PlayCoinGodInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PlayerBook = PlayerBookInterface(0x47D1c777f1853cac97E6b81226B1F5108FBD7B81)

IRs:
TMP_483 = CONVERT 410016576634523343423075198410119965656531958657 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_483(PlayerBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = PlayCoin Key

IRs:
name(string) := PlayCoin Key(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = PCK

IRs:
symbol(string) := PCK(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 43200

IRs:
rndInit_(uint256) := 43200(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 21600

IRs:
rndMax_(uint256) := 21600(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
rndMin_ = 600

IRs:
rndMin_(uint256) := 600(uint256)"];
}
// Function: 3096.sol-PlayCoinKey-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 900

IRs:
rndExtra_(uint256) := 900(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 900

IRs:
rndGap_(uint256) := 900(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndReduceThreshold_ = 10e18

IRs:
rndReduceThreshold_(uint256) := 10000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
closed_ = false

IRs:
closed_(bool) := False(bool)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3096.sol-PlayCoinKey-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_364(uint256) = INTERNAL_CALL, PlayCoinKey.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_364(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_365(bool) = _earnings > 0
CONDITION TMP_365"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_582(PCKdatasets.Player) -> plyr_[_pID]
REF_583(uint256) -> REF_582.gen
REF_585(PCKdatasets.Player) -> plyr_[_pID]
REF_586(uint256) -> REF_585.gen
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_586'] 
REF_583(uint256) (->plyr_) := TMP_366(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_587(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_588(PCKdatasets.PlayerRounds) -> REF_587[_rIDlast]
REF_589(uint256) -> REF_588.mask
REF_591(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_592(PCKdatasets.PlayerRounds) -> REF_591[_rIDlast]
REF_593(uint256) -> REF_592.mask
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_593'] 
REF_589(uint256) (->plyrRnds_) := TMP_367(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3096.sol-PlayCoinKey-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_672(PCKdatasets.Round) -> round_[_rID]
REF_673(uint256) -> REF_672.keys
TMP_451(uint256) = TMP_450 / REF_673
_ppt(uint256) := TMP_451(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_674(PCKdatasets.Round) -> round_[_rID]
REF_675(uint256) -> REF_674.mask
REF_677(PCKdatasets.Round) -> round_[_rID]
REF_678(uint256) -> REF_677.mask
TMP_452(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_678'] 
REF_675(uint256) (->round_) := TMP_452(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_454(uint256) = TMP_453 / 1000000000000000000
_pearn(uint256) := TMP_454(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_680(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_681(PCKdatasets.PlayerRounds) -> REF_680[_rID]
REF_682(uint256) -> REF_681.mask
REF_683(PCKdatasets.Round) -> round_[_rID]
REF_684(uint256) -> REF_683.mask
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_684', '_keys'] 
TMP_456(uint256) = TMP_455 / 1000000000000000000
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_456', '_pearn'] 
REF_688(mapping(uint256 => PCKdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_689(PCKdatasets.PlayerRounds) -> REF_688[_rID]
REF_690(uint256) -> REF_689.mask
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_457', 'REF_690'] 
REF_682(uint256) (->plyrRnds_) := TMP_458(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_693(PCKdatasets.Round) -> round_[_rID]
REF_694(uint256) -> REF_693.keys
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_694'] 
TMP_460(uint256) = TMP_459 / 1000000000000000000
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_460'] 
RETURN TMP_461"];
}
// Function: 3096.sol-PlayCoinKey-updateTimer(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_594(PCKdatasets.Round) -> round_[_rID]
REF_595(uint256) -> REF_594.end
TMP_368(bool) = _now > REF_595
REF_596(PCKdatasets.Round) -> round_[_rID]
REF_597(uint256) -> REF_596.plyr
TMP_369(bool) = REF_597 == 0
TMP_370(bool) = TMP_368 && TMP_369
CONDITION TMP_370"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_371(uint256) = _keys / 1000000000000000000
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_371', 'rndInc_'] 
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_372', '_now'] 
_newTime(uint256) := TMP_373(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_374(uint256) = _keys / 1000000000000000000
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_374', 'rndInc_'] 
REF_602(PCKdatasets.Round) -> round_[_rID]
REF_603(uint256) -> REF_602.end
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_375', 'REF_603'] 
_newTime(uint256) := TMP_376(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_378(bool) = _newTime < TMP_377
CONDITION TMP_378"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_newEndTime = _newTime

IRs:
_newEndTime(uint256) := _newTime(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_newEndTime = rndMax_.add(_now)

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
_newEndTime(uint256) := TMP_379(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_eth >= rndReduceThreshold_

IRs:
TMP_380(bool) = _eth >= rndReduceThreshold_
CONDITION TMP_380"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_newEndTime = (_newEndTime).sub((((_keys) / (1000000000000000000))).mul(rndInc_).add((((_keys) / (2000000000000000000)).mul(rndInc_))))

IRs:
TMP_381(uint256) = _keys / 1000000000000000000
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_381', 'rndInc_'] 
TMP_383(uint256) = _keys / 2000000000000000000
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_383', 'rndInc_'] 
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_382', 'TMP_384'] 
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_newEndTime', 'TMP_385'] 
_newEndTime(uint256) := TMP_386(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_newEndTime < _now + rndMin_

IRs:
TMP_387(uint256) = _now + rndMin_
TMP_388(bool) = _newEndTime < TMP_387
CONDITION TMP_388"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_newEndTime = _now + rndMin_

IRs:
TMP_389(uint256) = _now + rndMin_
_newEndTime(uint256) := TMP_389(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].end = _newEndTime

IRs:
REF_610(PCKdatasets.Round) -> round_[_rID]
REF_611(uint256) -> REF_610.end
REF_611(uint256) (->round_) := _newEndTime(uint256)"];
}
// Function: 3096.sol-PlayCoinKey-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_317(bool) = _team < 0
TMP_318(bool) = _team > 3
TMP_319(bool) = TMP_317 || TMP_318
CONDITION TMP_319"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3096.sol-PlayCoinKey-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_81(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_81(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_82(PCKdatasets.Round) -> round_[_rID]
REF_83(uint256) -> REF_82.end
TMP_100(bool) = _now > REF_83
REF_84(PCKdatasets.Round) -> round_[_rID]
REF_85(bool) -> REF_84.ended
TMP_101(bool) = REF_85 == False
TMP_102(bool) = TMP_100 && TMP_101
REF_86(PCKdatasets.Round) -> round_[_rID]
REF_87(uint256) -> REF_86.plyr
TMP_103(bool) = REF_87 != 0
TMP_104(bool) = TMP_102 && TMP_103
CONDITION TMP_104"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_88(PCKdatasets.Round) -> round_[_rID]
REF_89(bool) -> REF_88.ended
REF_89(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_105(PCKdatasets.EventReturns) = INTERNAL_CALL, PlayCoinKey.endRound(PCKdatasets.EventReturns)(_eventData_)
_eventData_(PCKdatasets.EventReturns) := TMP_105(PCKdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_106(uint256) = INTERNAL_CALL, PlayCoinKey.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_106(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_107(bool) = _eth > 0
CONDITION TMP_107"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_90(PCKdatasets.Player) -> plyr_[_pID]
REF_91(address) -> REF_90.addr
Transfer dest:REF_91 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_93(uint256) -> _eventData_.compressedData
REF_94(uint256) -> _eventData_.compressedData
TMP_109(uint256) = _now * 1000000000000000000
TMP_110(uint256) = REF_94 + TMP_109
REF_93(uint256) (->_eventData_) := TMP_110(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_95(uint256) -> _eventData_.compressedIDs
REF_96(uint256) -> _eventData_.compressedIDs
TMP_111(uint256) = REF_96 + _pID
REF_95(uint256) (->_eventData_) := TMP_111(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
PCKevents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.PCPAmount,_eventData_.genAmount)

IRs:
REF_98(PCKdatasets.Player) -> plyr_[_pID]
REF_99(bytes32) -> REF_98.name
REF_100(uint256) -> _eventData_.compressedData
REF_101(uint256) -> _eventData_.compressedIDs
REF_102(address) -> _eventData_.winnerAddr
REF_103(bytes32) -> _eventData_.winnerName
REF_104(uint256) -> _eventData_.amountWon
REF_105(uint256) -> _eventData_.newPot
REF_106(uint256) -> _eventData_.PCPAmount
REF_107(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_99,_eth,REF_100,REF_101,REF_102,REF_103,REF_104,REF_105,REF_106,REF_107)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_113(uint256) = INTERNAL_CALL, PlayCoinKey.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_113(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_114(bool) = _eth > 0
CONDITION TMP_114"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_108(PCKdatasets.Player) -> plyr_[_pID]
REF_109(address) -> REF_108.addr
Transfer dest:REF_109 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
PCKevents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_112(PCKdatasets.Player) -> plyr_[_pID]
REF_113(bytes32) -> REF_112.name
Emit onWithdraw(_pID,msg.sender,REF_113,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, PlayCoinKey.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayCoinKey.isHuman()()"];
23->1;
}
// Function: 3096.sol-PlayCoinKey-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_695(PCKdatasets.Player) -> plyr_[_pID]
REF_696(uint256) -> REF_695.lrnd
INTERNAL_CALL, PlayCoinKey.updateGenVault(uint256,uint256)(_pID,REF_696)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_697(PCKdatasets.Player) -> plyr_[_pID]
REF_698(uint256) -> REF_697.win
REF_700(PCKdatasets.Player) -> plyr_[_pID]
REF_701(uint256) -> REF_700.gen
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_698', 'REF_701'] 
REF_703(PCKdatasets.Player) -> plyr_[_pID]
REF_704(uint256) -> REF_703.aff
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_463', 'REF_704'] 
_earnings(uint256) := TMP_464(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_465(bool) = _earnings > 0
CONDITION TMP_465"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_705(PCKdatasets.Player) -> plyr_[_pID]
REF_706(uint256) -> REF_705.win
REF_706(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_707(PCKdatasets.Player) -> plyr_[_pID]
REF_708(uint256) -> REF_707.gen
REF_708(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_709(PCKdatasets.Player) -> plyr_[_pID]
REF_710(uint256) -> REF_709.aff
REF_710(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3096.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 3096.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3096.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3096.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3096.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3096.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3096.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3096.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3096.sol-ProForwarderInterface-cancelMigration()
digraph{
}
// Function: 3096.sol-ProForwarderInterface-deposit()
digraph{
}
// Function: 3096.sol-ProForwarderInterface-finishMigration()
digraph{
}
// Function: 3096.sol-ProForwarderInterface-setup(address)
digraph{
}
// Function: 3096.sol-ProForwarderInterface-startMigration(address)
digraph{
}
// Function: 3096.sol-ProForwarderInterface-status()
digraph{
}
// Function: 3096.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_571(uint256) = a + b
c(uint256) := TMP_571(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_572(bool) = c >= a
TMP_573(None) = SOLIDITY_CALL require(bool,string)(TMP_572,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3096.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_563(bool) = a == 0
CONDITION TMP_563"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_564(uint256) = a * b
c(uint256) := TMP_564(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_565(uint256) = c / a
TMP_566(bool) = TMP_565 == b
TMP_567(None) = SOLIDITY_CALL require(bool,string)(TMP_566,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3096.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_581(bool) = x == 0
CONDITION TMP_581"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_582(bool) = y == 0
CONDITION TMP_582"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_583(bool) = i < y
CONDITION TMP_583"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_584(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_584(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_585(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3096.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_580(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_580"];
}
// Function: 3096.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_574(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_575(uint256) = TMP_574 / 2
z(uint256) := TMP_575(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_576(bool) = z < y
CONDITION TMP_576"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_577(uint256) = x / z
TMP_578(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_577,z)
TMP_579(uint256) = TMP_578 / 2
z(uint256) := TMP_579(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3096.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_568(bool) = b <= a
TMP_569(None) = SOLIDITY_CALL require(bool,string)(TMP_568,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_570(uint256) = a - b
RETURN TMP_570"];
}
}
