digraph G {
// Function: 3146.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3146.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3146.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 3146.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3146.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3146.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3146.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 3146.sol-VfSE_Lottery-bitSlice(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
offset = slot * bits

IRs:
TMP_24(uint256) = slot * bits
offset(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mask = uint256((2 ** bits) - 1) << offset

IRs:
TMP_25(uint256) = 2 ** bits
TMP_26(uint256) = TMP_25 - 1
TMP_27 = CONVERT TMP_26 to uint256
TMP_28(uint256) = TMP_27 << offset
mask(uint256) := TMP_28(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
uint256((n & mask) >> offset)

IRs:
TMP_29(uint256) = n & mask
TMP_30(uint256) = TMP_29 >> offset
TMP_31 = CONVERT TMP_30 to uint256
RETURN TMP_31"];
}
// Function: 3146.sol-VfSE_Lottery-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
house = msg.sender

IRs:
house(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
authorizedToDraw = msg.sender

IRs:
authorizedToDraw(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
feeValue = 10

IRs:
feeValue(uint256) := 10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
playValue = 100000000000000000

IRs:
playValue(uint256) := 100000000000000000(uint256)"];
}
// Function: 3146.sol-VfSE_Lottery-draw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > roundEnds)

IRs:
TMP_54(bool) = now > roundEnds
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
howMuchBets = players.length

IRs:
REF_2 -> LENGTH players
howMuchBets(uint256) := REF_2(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lastWinner = players[produceRandom(howMuchBets)]

IRs:
TMP_56(uint256) = INTERNAL_CALL, VfSE_Lottery.produceRandom(uint256)(howMuchBets)
REF_3(address) -> players[TMP_56]
lastWinner(address) := REF_3(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastPayOut = getPayOutAmount()

IRs:
TMP_57(uint256) = INTERNAL_CALL, VfSE_Lottery.getPayOutAmount()()
lastPayOut(uint256) := TMP_57(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
winners.push(lastWinner)

IRs:
REF_5 -> LENGTH winners
TMP_59(uint256) := REF_5(uint256)
TMP_60(uint256) = TMP_59 + 1
REF_5(uint256) (->winners) := TMP_60(uint256)
REF_6(address) -> winners[TMP_59]
REF_6(address) (->winners) := lastWinner(address)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
winners.length > 9

IRs:
REF_7 -> LENGTH winners
TMP_61(bool) = REF_7 > 9
CONDITION TMP_61"];
7->10[label="True"];
7->15[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->15;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = (winners.length - 10)

IRs:
REF_8 -> LENGTH winners
TMP_62(uint256) = REF_8 - 10
i(uint256) := TMP_62(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < winners.length

IRs:
REF_9 -> LENGTH winners
TMP_63(bool) = i < REF_9
CONDITION TMP_63"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
last10Winners[k] = winners[i]

IRs:
REF_10(address) -> last10Winners[k]
REF_11(address) -> winners[i]
REF_10(address) (->last10Winners) := REF_11(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
k += 1

IRs:
k(uint256) = k + 1"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_64(uint256) := i(uint256)
i(uint256) = i + 1"];
14->11;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
payments.push(lastPayOut)

IRs:
REF_13 -> LENGTH payments
TMP_66(uint256) := REF_13(uint256)
TMP_67(uint256) = TMP_66 + 1
REF_13(uint256) (->payments) := TMP_67(uint256)
REF_14(uint256) -> payments[TMP_66]
REF_14(uint256) (->payments) := lastPayOut(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
payOuts[lastWinner] += lastPayOut

IRs:
REF_15(uint256) -> payOuts[lastWinner]
REF_15(-> payOuts) = REF_15 + lastPayOut"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
lastWinner.transfer(lastPayOut)

IRs:
Transfer dest:lastWinner value:lastPayOut"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
players.length = 0

IRs:
REF_17 -> LENGTH players
REF_17(uint256) (->players) := 0(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round += 1

IRs:
round(uint256) = round + 1"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
amountRised = 0

IRs:
amountRised(uint256) := 0(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
roundEnds = now + roundDuration

IRs:
TMP_69(uint256) = now + roundDuration
roundEnds(uint256) := TMP_69(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
NewWinner(lastWinner,lastPayOut)

IRs:
Emit NewWinner(lastWinner,lastPayOut)"];
}
// Function: 3146.sol-VfSE_Lottery-drawNow()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(authorizedToDraw == msg.sender)

IRs:
TMP_71(bool) = authorizedToDraw == msg.sender
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
draw()

IRs:
INTERNAL_CALL, VfSE_Lottery.draw()()"];
}
// Function: 3146.sol-VfSE_Lottery-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
play()

IRs:
INTERNAL_CALL, VfSE_Lottery.play()()"];
}
// Function: 3146.sol-VfSE_Lottery-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
thisBalance = address(this).balance

IRs:
TMP_87 = CONVERT this to address
TMP_88(uint256) = SOLIDITY_CALL balance(address)(TMP_87)
thisBalance(uint256) := TMP_88(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
house.transfer(thisBalance)

IRs:
Transfer dest:house value:thisBalance"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3146.sol-VfSE_Lottery-getFourthAddressBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
FourthAddressBalance.balance

IRs:
TMP_93(uint256) = SOLIDITY_CALL balance(address)(FourthAddressBalance)
RETURN TMP_93"];
}
// Function: 3146.sol-VfSE_Lottery-getPayOutAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = amountRised.mul(feeValue).div(100)

IRs:
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountRised', 'feeValue'] 
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', '100'] 
fee(uint256) := TMP_52(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(amountRised - fee)

IRs:
TMP_53(uint256) = amountRised - fee
RETURN TMP_53"];
}
// Function: 3146.sol-VfSE_Lottery-getPlayers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
players

IRs:
RETURN players"];
}
// Function: 3146.sol-VfSE_Lottery-getPlayersCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
players.length

IRs:
REF_24 -> LENGTH players
RETURN REF_24"];
}
// Function: 3146.sol-VfSE_Lottery-getSecondAddressBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SecondAddressBalance.balance

IRs:
TMP_91(uint256) = SOLIDITY_CALL balance(address)(SecondAddressBalance)
RETURN TMP_91"];
}
// Function: 3146.sol-VfSE_Lottery-getThirdAddressBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ThirdAddressBalance.balance

IRs:
TMP_92(uint256) = SOLIDITY_CALL balance(address)(ThirdAddressBalance)
RETURN TMP_92"];
}
// Function: 3146.sol-VfSE_Lottery-getWinnerCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
winners.length

IRs:
REF_25 -> LENGTH winners
RETURN REF_25"];
}
// Function: 3146.sol-VfSE_Lottery-last10()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
winners.length < 11

IRs:
REF_26 -> LENGTH winners
TMP_94(bool) = REF_26 < 11
CONDITION TMP_94"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
winners

IRs:
RETURN winners"];
3[label="Node Type: RETURN 3

EXPRESSION:
last10Winners

IRs:
RETURN last10Winners"];
}
// Function: 3146.sol-VfSE_Lottery-maxRandom()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_seed = uint256(keccak256()(_seed,blockhash(uint256)(block.number - 1),block.coinbase,block.difficulty,blockhash(uint256)(1),FourthAddressBalance.balance,SecondAddressBalance.balance,ThirdAddressBalance.balance))

IRs:
TMP_32(uint256) = block.number - 1
TMP_33(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_32)
TMP_34(uint256) = SOLIDITY_CALL blockhash(uint256)(1)
TMP_35(uint256) = SOLIDITY_CALL balance(address)(FourthAddressBalance)
TMP_36(uint256) = SOLIDITY_CALL balance(address)(SecondAddressBalance)
TMP_37(uint256) = SOLIDITY_CALL balance(address)(ThirdAddressBalance)
TMP_38(bytes32) = SOLIDITY_CALL keccak256()(_seed,TMP_33,block.coinbase,block.difficulty,TMP_34,TMP_35,TMP_36,TMP_37)
TMP_39 = CONVERT TMP_38 to uint256
_seed(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_seed

IRs:
RETURN _seed"];
3[label="Node Type: RETURN 3

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 3146.sol-VfSE_Lottery-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_95(bool) = msg.sender == owner
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3146.sol-VfSE_Lottery-play()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == playValue)

IRs:
TMP_74(bool) = msg.value == playValue
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! stopped)

IRs:
TMP_76 = UnaryType.BANG stopped 
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
now > roundEnds

IRs:
TMP_78(bool) = now > roundEnds
CONDITION TMP_78"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
players.length < 2

IRs:
REF_18 -> LENGTH players
TMP_79(bool) = REF_18 < 2
CONDITION TMP_79"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
roundEnds = now + roundDuration

IRs:
TMP_80(uint256) = now + roundDuration
roundEnds(uint256) := TMP_80(uint256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
draw()

IRs:
INTERNAL_CALL, VfSE_Lottery.draw()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
players.push(msg.sender)

IRs:
REF_20 -> LENGTH players
TMP_83(uint256) := REF_20(uint256)
TMP_84(uint256) = TMP_83 + 1
REF_20(uint256) (->players) := TMP_84(uint256)
REF_21(address) -> players[TMP_83]
REF_21(address) (->players) := msg.sender(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
amountRised = amountRised.add(msg.value)

IRs:
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amountRised', 'msg.value'] 
amountRised(uint256) := TMP_85(uint256)"];
}
// Function: 3146.sol-VfSE_Lottery-produceRandom(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rand = random(upper)

IRs:
TMP_50(uint256) = INTERNAL_CALL, VfSE_Lottery.random(uint256)(upper)
rand(uint256) := TMP_50(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
rand

IRs:
RETURN rand"];
}
// Function: 3146.sol-VfSE_Lottery-random(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxRandom() % upper

IRs:
TMP_40(uint256) = INTERNAL_CALL, VfSE_Lottery.maxRandom()()
TMP_41(uint256) = TMP_40 % upper
RETURN TMP_41"];
2[label="Node Type: RETURN 2

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 3146.sol-VfSE_Lottery-setAuthorizedToDraw(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authorizedToDraw = _authorized

IRs:
authorizedToDraw(address) := _authorized(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-setFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
feeValue = _fee

IRs:
feeValue(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-setFourthAddressBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FourthAddressBalance = _FourthAddressBalance

IRs:
FourthAddressBalance(address) := _FourthAddressBalance(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-setHouseAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
house = _house

IRs:
house(address) := _house(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-setPlayValue(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
playValue = _amount

IRs:
playValue(uint256) := _amount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-setSecondAddressBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
SecondAddressBalance = _SecondAddressBalance

IRs:
SecondAddressBalance(address) := _SecondAddressBalance(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-setThirdAddressBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ThirdAddressBalance = _ThirdAddressBalance

IRs:
ThirdAddressBalance(address) := _ThirdAddressBalance(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
last10Winners = (0,0,0,0,0,0,0,0,0,0)

IRs:
last10Winners(address[]) = ['0(uint256)', '0(uint256)', '0(uint256)', '0(uint256)', '0(uint256)', '0(uint256)', '0(uint256)', '0(uint256)', '0(uint256)', '0(uint256)']"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
roundDuration = 86400

IRs:
roundDuration(uint256) := 86400(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SecondAddressBalance = 0xFBb1b73C4f0BDa4f67dcA266ce6Ef42f520fBB98

IRs:
SecondAddressBalance(address) := 1436919877447261723048929433803713945911935613848(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
ThirdAddressBalance = 0x3f5CE5FBFe3E9af3971dD833D26bA9b5C936f0bE

IRs:
ThirdAddressBalance(address) := 361738121582468153732634317235282752566713577662(address)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
FourthAddressBalance = 0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0

IRs:
FourthAddressBalance(address) := 219704307174701825550306207531880014204969680320(address)"];
}
// Function: 3146.sol-VfSE_Lottery-stopLottery(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = _stop

IRs:
stopped(bool) := _stop(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3146.sol-VfSE_Lottery-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
