digraph G {
// Function: 3222.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_82'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_84'] 
TMP_86(uint256) = TMP_85 / 2
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_83', 'TMP_86'] 
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_89(uint256) = TMP_87 / TMP_88
RETURN TMP_89"];
}
// Function: 3222.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_72(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_74(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_73)
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_72', 'TMP_74'] 
RETURN TMP_75"];
}
// Function: 3222.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_76', '312500000000000000000000000'] 
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_77', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_78'] 
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_79', '74999921875000000000000000000000'] 
TMP_81(uint256) = TMP_80 / 156250000
RETURN TMP_81"];
}
// Function: 3222.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_69(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_68)
TMP_70(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_69', 'TMP_70'] 
RETURN TMP_71"];
}
// Function: 3222.sol-FoMo3DFast-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_520(bool) = msg.sender == admin
TMP_521(None) = SOLIDITY_CALL require(bool,string)(TMP_520,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_522(bool) = activated_ == False
TMP_523(None) = SOLIDITY_CALL require(bool,string)(TMP_522,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_746(F3Ddatasets.Round) -> round_[1]
REF_747(uint256) -> REF_746.strt
TMP_524(uint256) = now + rndExtra_
TMP_525(uint256) = TMP_524 - rndGap_
REF_747(uint256) (->round_) := TMP_525(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_748(F3Ddatasets.Round) -> round_[1]
REF_749(uint256) -> REF_748.end
TMP_526(uint256) = now + rndInit_
TMP_527(uint256) = TMP_526 + rndExtra_
REF_749(uint256) (->round_) := TMP_527(uint256)"];
}
// Function: 3222.sol-FoMo3DFast-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_435(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_436(bytes32) = SOLIDITY_CALL keccak256()(TMP_435)
TMP_437 = CONVERT TMP_436 to uint256
TMP_438(uint256) = TMP_437 / now
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_434', 'TMP_438'] 
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_439', 'block.gaslimit'] 
TMP_441(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_442(bytes32) = SOLIDITY_CALL keccak256()(TMP_441)
TMP_443 = CONVERT TMP_442 to uint256
TMP_444(uint256) = TMP_443 / now
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_440', 'TMP_444'] 
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_445', 'block.number'] 
TMP_447(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_446)
TMP_448(bytes32) = SOLIDITY_CALL keccak256()(TMP_447)
TMP_449 = CONVERT TMP_448 to uint256
seed(uint256) := TMP_449(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_450(uint256) = seed / 1000
TMP_451(uint256) = TMP_450 * 1000
TMP_452(uint256) = seed - TMP_451
TMP_453(bool) = TMP_452 < airDropTracker_
CONDITION TMP_453"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3222.sol-FoMo3DFast-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_293(F3Ddatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.strt
TMP_242(uint256) = REF_294 + rndGap_
TMP_243(bool) = _now > TMP_242
REF_295(F3Ddatasets.Round) -> round_[_rID]
REF_296(uint256) -> REF_295.end
TMP_244(bool) = _now <= REF_296
REF_297(F3Ddatasets.Round) -> round_[_rID]
REF_298(uint256) -> REF_297.end
TMP_245(bool) = _now > REF_298
REF_299(F3Ddatasets.Round) -> round_[_rID]
REF_300(uint256) -> REF_299.plyr
TMP_246(bool) = REF_300 == 0
TMP_247(bool) = TMP_245 && TMP_246
TMP_248(bool) = TMP_244 || TMP_247
TMP_249(bool) = TMP_243 && TMP_248
CONDITION TMP_249"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_301(F3Ddatasets.Round) -> round_[_rID]
REF_302(uint256) -> REF_301.end
TMP_251(bool) = _now > REF_302
REF_303(F3Ddatasets.Round) -> round_[_rID]
REF_304(bool) -> REF_303.ended
TMP_252(bool) = REF_304 == False
TMP_253(bool) = TMP_251 && TMP_252
CONDITION TMP_253"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_305(F3Ddatasets.Round) -> round_[_rID]
REF_306(bool) -> REF_305.ended
REF_306(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_254(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_254(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_307(uint256) -> _eventData_.compressedData
REF_308(uint256) -> _eventData_.compressedData
TMP_255(uint256) = _now * 1000000000000000000
TMP_256(uint256) = REF_308 + TMP_255
REF_307(uint256) (->_eventData_) := TMP_256(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_309(uint256) -> _eventData_.compressedIDs
REF_310(uint256) -> _eventData_.compressedIDs
TMP_257(uint256) = REF_310 + _pID
REF_309(uint256) (->_eventData_) := TMP_257(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_312(F3Ddatasets.Player) -> plyr_[_pID]
REF_313(bytes32) -> REF_312.name
REF_314(uint256) -> _eventData_.compressedData
REF_315(uint256) -> _eventData_.compressedIDs
REF_316(address) -> _eventData_.winnerAddr
REF_317(bytes32) -> _eventData_.winnerName
REF_318(uint256) -> _eventData_.amountWon
REF_319(uint256) -> _eventData_.newPot
REF_320(uint256) -> _eventData_.P3DAmount
REF_321(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_313,msg.value,REF_314,REF_315,REF_316,REF_317,REF_318,REF_319,REF_320,REF_321)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_322(F3Ddatasets.Player) -> plyr_[_pID]
REF_323(uint256) -> REF_322.gen
REF_324(F3Ddatasets.Player) -> plyr_[_pID]
REF_325(uint256) -> REF_324.gen
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_325', 'msg.value'] 
REF_323(uint256) (->plyr_) := TMP_259(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3222.sol-FoMo3DFast-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_113(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_113(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_60(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_60(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _affCode == TMP_114
TMP_116(bool) = _affCode == msg.sender
TMP_117(bool) = TMP_115 || TMP_116
CONDITION TMP_117"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
_affID(uint256) := REF_62(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_63(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_63(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_64(F3Ddatasets.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.laff
TMP_118(bool) = _affID != REF_65
CONDITION TMP_118"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
REF_67(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_119(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_119(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3222.sol-FoMo3DFast-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_103(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_103(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_104(bool) = _affCode == 0
TMP_105(bool) = _affCode == _pID
TMP_106(bool) = TMP_104 || TMP_105
CONDITION TMP_106"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_54(F3Ddatasets.Player) -> plyr_[_pID]
REF_55(uint256) -> REF_54.laff
_affCode(uint256) := REF_55(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
TMP_107(bool) = _affCode != REF_57
CONDITION TMP_107"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
REF_59(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_108(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_108(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 3222.sol-FoMo3DFast-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_124(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_124(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_68(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_68(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_125(bool) = _affCode == 
REF_69(F3Ddatasets.Player) -> plyr_[_pID]
REF_70(bytes32) -> REF_69.name
TMP_126(bool) = _affCode == REF_70
TMP_127(bool) = TMP_125 || TMP_126
CONDITION TMP_127"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
_affID(uint256) := REF_72(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_73(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_73(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
TMP_128(bool) = _affID != REF_75
CONDITION TMP_128"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
REF_77(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_129(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_129(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3222.sol-FoMo3DFast-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_458(F3Ddatasets.Round) -> round_[_rID]
REF_459(uint256) -> REF_458.strt
TMP_332(uint256) = REF_459 + rndGap_
TMP_333(bool) = _now > TMP_332
REF_460(F3Ddatasets.Round) -> round_[_rID]
REF_461(uint256) -> REF_460.end
TMP_334(bool) = _now <= REF_461
REF_462(F3Ddatasets.Round) -> round_[_rID]
REF_463(uint256) -> REF_462.end
TMP_335(bool) = _now > REF_463
REF_464(F3Ddatasets.Round) -> round_[_rID]
REF_465(uint256) -> REF_464.plyr
TMP_336(bool) = REF_465 == 0
TMP_337(bool) = TMP_335 && TMP_336
TMP_338(bool) = TMP_334 || TMP_337
TMP_339(bool) = TMP_333 && TMP_338
CONDITION TMP_339"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_466(F3Ddatasets.Round) -> round_[_rID]
REF_467(uint256) -> REF_466.eth
TMP_340(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_467', '_eth'] 
RETURN TMP_340"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_341(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_341"];
}
// Function: 3222.sol-FoMo3DFast-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_448(F3Ddatasets.Round) -> round_[_rIDlast]
REF_449(uint256) -> REF_448.mask
REF_451(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_452(F3Ddatasets.PlayerRounds) -> REF_451[_rIDlast]
REF_453(uint256) -> REF_452.keys
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_449', 'REF_453'] 
TMP_330(uint256) = TMP_329 / 1000000000000000000
REF_455(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_456(F3Ddatasets.PlayerRounds) -> REF_455[_rIDlast]
REF_457(uint256) -> REF_456.mask
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_330', 'REF_457'] 
RETURN TMP_331"];
}
// Function: 3222.sol-FoMo3DFast-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_34(F3Ddatasets.TeamFee) -> fees_[0]
TMP_90(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_34(F3Ddatasets.TeamFee) (->fees_) := TMP_90(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_36(F3Ddatasets.TeamFee) -> fees_[1]
TMP_91(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_36(F3Ddatasets.TeamFee) (->fees_) := TMP_91(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_38(F3Ddatasets.TeamFee) -> fees_[2]
TMP_92(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_38(F3Ddatasets.TeamFee) (->fees_) := TMP_92(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_40(F3Ddatasets.TeamFee) -> fees_[3]
TMP_93(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_40(F3Ddatasets.TeamFee) (->fees_) := TMP_93(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_42(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_94(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_42(F3Ddatasets.PotSplit) (->potSplit_) := TMP_94(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_44(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_95(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_44(F3Ddatasets.PotSplit) (->potSplit_) := TMP_95(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_46(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_96(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_46(F3Ddatasets.PotSplit) (->potSplit_) := TMP_96(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_48(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_97(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_48(F3Ddatasets.PotSplit) (->potSplit_) := TMP_97(F3Ddatasets.PotSplit)"];
}
// Function: 3222.sol-FoMo3DFast-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_359(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_360(F3Ddatasets.PlayerRounds) -> REF_359[_rID]
REF_361(uint256) -> REF_360.keys
TMP_279(bool) = REF_361 == 0
CONDITION TMP_279"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_280(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_280(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_362(F3Ddatasets.Round) -> round_[_rID]
REF_363(uint256) -> REF_362.eth
TMP_281(bool) = REF_363 < 100000000000000000000
REF_364(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_365(F3Ddatasets.PlayerRounds) -> REF_364[_rID]
REF_366(uint256) -> REF_365.eth
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_366', '_eth'] 
TMP_283(bool) = TMP_282 > 1000000000000000000
TMP_284(bool) = TMP_281 && TMP_283
CONDITION TMP_284"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_369(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_370(F3Ddatasets.PlayerRounds) -> REF_369[_rID]
REF_371(uint256) -> REF_370.eth
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_371'] 
_availableLimit(uint256) := TMP_285(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_286(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_373(F3Ddatasets.Player) -> plyr_[_pID]
REF_374(uint256) -> REF_373.gen
REF_375(F3Ddatasets.Player) -> plyr_[_pID]
REF_376(uint256) -> REF_375.gen
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_376', '_refund'] 
REF_374(uint256) (->plyr_) := TMP_287(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_288(bool) = _eth > 1000000000
CONDITION TMP_288"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_378(F3Ddatasets.Round) -> round_[_rID]
REF_379(uint256) -> REF_378.eth
TMP_289(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_379', '_eth'] 
_keys(uint256) := TMP_289(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_290(bool) = _keys >= 1000000000000000000
CONDITION TMP_290"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DFast.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_381(F3Ddatasets.Round) -> round_[_rID]
REF_382(uint256) -> REF_381.plyr
TMP_292(bool) = REF_382 != _pID
CONDITION TMP_292"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_383(F3Ddatasets.Round) -> round_[_rID]
REF_384(uint256) -> REF_383.plyr
REF_384(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_385(F3Ddatasets.Round) -> round_[_rID]
REF_386(uint256) -> REF_385.team
TMP_293(bool) = REF_386 != _team
CONDITION TMP_293"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_387(F3Ddatasets.Round) -> round_[_rID]
REF_388(uint256) -> REF_387.team
REF_388(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_389(uint256) -> _eventData_.compressedData
REF_390(uint256) -> _eventData_.compressedData
TMP_294(uint256) = REF_390 + 100
REF_389(uint256) (->_eventData_) := TMP_294(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_295(bool) = _eth >= 100000000000000000
CONDITION TMP_295"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_296(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_297(bool) = INTERNAL_CALL, FoMo3DFast.airdrop()()
TMP_298(bool) = TMP_297 == True
CONDITION TMP_298"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_299(bool) = _eth >= 10000000000000000000
CONDITION TMP_299"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_301(uint256) = TMP_300 / 100
_prize(uint256) := TMP_301(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_392(F3Ddatasets.Player) -> plyr_[_pID]
REF_393(uint256) -> REF_392.win
REF_394(F3Ddatasets.Player) -> plyr_[_pID]
REF_395(uint256) -> REF_394.win
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_395', '_prize'] 
REF_393(uint256) (->plyr_) := TMP_302(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_303(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_398(uint256) -> _eventData_.compressedData
REF_398(-> _eventData_) = REF_398 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_304(bool) = _eth >= 1000000000000000000
TMP_305(bool) = _eth < 10000000000000000000
TMP_306(bool) = TMP_304 && TMP_305
CONDITION TMP_306"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_308(uint256) = TMP_307 / 100
_prize(uint256) := TMP_308(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_400(F3Ddatasets.Player) -> plyr_[_pID]
REF_401(uint256) -> REF_400.win
REF_402(F3Ddatasets.Player) -> plyr_[_pID]
REF_403(uint256) -> REF_402.win
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_403', '_prize'] 
REF_401(uint256) (->plyr_) := TMP_309(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_310(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_406(uint256) -> _eventData_.compressedData
REF_406(-> _eventData_) = REF_406 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_311(bool) = _eth >= 100000000000000000
TMP_312(bool) = _eth < 1000000000000000000
TMP_313(bool) = TMP_311 && TMP_312
CONDITION TMP_313"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_315(uint256) = TMP_314 / 100
_prize(uint256) := TMP_315(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_408(F3Ddatasets.Player) -> plyr_[_pID]
REF_409(uint256) -> REF_408.win
REF_410(F3Ddatasets.Player) -> plyr_[_pID]
REF_411(uint256) -> REF_410.win
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_411', '_prize'] 
REF_409(uint256) (->plyr_) := TMP_316(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_317(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_414(uint256) -> _eventData_.compressedData
REF_414(-> _eventData_) = REF_414 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_415(uint256) -> _eventData_.compressedData
REF_415(-> _eventData_) = REF_415 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_416(uint256) -> _eventData_.compressedData
TMP_318(uint256) = _prize * 1000000000000000000000000000000000
REF_416(-> _eventData_) = REF_416 + TMP_318"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_417(uint256) -> _eventData_.compressedData
REF_418(uint256) -> _eventData_.compressedData
TMP_319(uint256) = airDropTracker_ * 1000
TMP_320(uint256) = REF_418 + TMP_319
REF_417(uint256) (->_eventData_) := TMP_320(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_419(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_420(F3Ddatasets.PlayerRounds) -> REF_419[_rID]
REF_421(uint256) -> REF_420.keys
REF_423(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_424(F3Ddatasets.PlayerRounds) -> REF_423[_rID]
REF_425(uint256) -> REF_424.keys
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_425'] 
REF_421(uint256) (->plyrRnds_) := TMP_321(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_426(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_427(F3Ddatasets.PlayerRounds) -> REF_426[_rID]
REF_428(uint256) -> REF_427.eth
REF_430(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_431(F3Ddatasets.PlayerRounds) -> REF_430[_rID]
REF_432(uint256) -> REF_431.eth
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_432'] 
REF_428(uint256) (->plyrRnds_) := TMP_322(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_433(F3Ddatasets.Round) -> round_[_rID]
REF_434(uint256) -> REF_433.keys
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.keys
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_437'] 
REF_434(uint256) (->round_) := TMP_323(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_438(F3Ddatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.eth
REF_441(F3Ddatasets.Round) -> round_[_rID]
REF_442(uint256) -> REF_441.eth
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_442'] 
REF_439(uint256) (->round_) := TMP_324(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_443(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_444(uint256) -> REF_443[_team]
REF_446(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_447(uint256) -> REF_446[_team]
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_447'] 
REF_444(uint256) (->rndTmEth_) := TMP_325(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_326(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_326(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_327(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_327(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 3222.sol-FoMo3DFast-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_507(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_507(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_366(bool) = _pID == 0
CONDITION TMP_366"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_367(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_367(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_368(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_368(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_369(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_369(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_511(uint256) -> pIDxAddr_[msg.sender]
REF_511(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_512(F3Ddatasets.Player) -> plyr_[_pID]
REF_513(address) -> REF_512.addr
REF_513(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_370(bool) = _name != 
CONDITION TMP_370"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_514(uint256) -> pIDxName_[_name]
REF_514(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_515(F3Ddatasets.Player) -> plyr_[_pID]
REF_516(bytes32) -> REF_515.name
REF_516(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_517(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_518(bool) -> REF_517[_name]
REF_518(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_371(bool) = _laff != 0
TMP_372(bool) = _laff != _pID
TMP_373(bool) = TMP_371 && TMP_372
CONDITION TMP_373"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_519(F3Ddatasets.Player) -> plyr_[_pID]
REF_520(uint256) -> REF_519.laff
REF_520(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_521(uint256) -> _eventData_.compressedData
REF_522(uint256) -> _eventData_.compressedData
TMP_374(uint256) = REF_522 + 1
REF_521(uint256) (->_eventData_) := TMP_374(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3222.sol-FoMo3DFast-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_454(uint256) = _eth / 100
_p1(uint256) := TMP_454(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_455(uint256) = _eth / 50
_com(uint256) := TMP_455(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_456(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_456(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_457 = CONVERT admin to address
TMP_459(bool) = LOW_LEVEL_CALL, dest:TMP_457, function:call, arguments:[] value:_com 
TMP_460 = UnaryType.BANG TMP_459 
CONDITION TMP_460"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_461(uint256) = _eth / 10
_aff(uint256) := TMP_461(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_462(bool) = _affID != _pID
REF_636(F3Ddatasets.Player) -> plyr_[_affID]
REF_637(bytes32) -> REF_636.name
TMP_463(bool) = REF_637 != 
TMP_464(bool) = TMP_462 && TMP_463
CONDITION TMP_464"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_638(F3Ddatasets.Player) -> plyr_[_affID]
REF_639(uint256) -> REF_638.aff
REF_641(F3Ddatasets.Player) -> plyr_[_affID]
REF_642(uint256) -> REF_641.aff
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_642'] 
REF_639(uint256) (->plyr_) := TMP_465(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_644(F3Ddatasets.Player) -> plyr_[_affID]
REF_645(address) -> REF_644.addr
REF_646(F3Ddatasets.Player) -> plyr_[_affID]
REF_647(bytes32) -> REF_646.name
Emit onAffiliatePayout(_affID,REF_645,REF_647,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_650(F3Ddatasets.TeamFee) -> fees_[_team]
REF_651(uint256) -> REF_650.p3d
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_651'] 
TMP_468(uint256) = TMP_467 / 100
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_468'] 
_p3d(uint256) := TMP_469(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_470(bool) = _p3d > 0
CONDITION TMP_470"];
16->17[label="True"];
16->21[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_471(uint256) = _p3d / 2
_potAmount(uint256) := TMP_471(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_472"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_654(F3Ddatasets.Round) -> round_[_rID]
REF_655(uint256) -> REF_654.pot
REF_656(F3Ddatasets.Round) -> round_[_rID]
REF_657(uint256) -> REF_656.pot
TMP_474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_657', '_potAmount'] 
REF_655(uint256) (->round_) := TMP_474(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_659(uint256) -> _eventData_.P3DAmount
REF_661(uint256) -> _eventData_.P3DAmount
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_661'] 
REF_659(uint256) (->_eventData_) := TMP_475(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3222.sol-FoMo3DFast-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_669(F3Ddatasets.TeamFee) -> fees_[_team]
REF_670(uint256) -> REF_669.gen
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_670'] 
TMP_480(uint256) = TMP_479 / 100
_gen(uint256) := TMP_480(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_481(uint256) = _eth / 100
_air(uint256) := TMP_481(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_482(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_484(uint256) = TMP_483 / 100
REF_676(F3Ddatasets.TeamFee) -> fees_[_team]
REF_677(uint256) -> REF_676.p3d
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_677'] 
TMP_486(uint256) = TMP_485 / 100
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_484', 'TMP_486'] 
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_487'] 
_eth(uint256) := TMP_488(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_489(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_490(uint256) = INTERNAL_CALL, FoMo3DFast.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_490(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_491(bool) = _dust > 0
CONDITION TMP_491"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_492(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_680(F3Ddatasets.Round) -> round_[_rID]
REF_681(uint256) -> REF_680.pot
TMP_493(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_684(F3Ddatasets.Round) -> round_[_rID]
REF_685(uint256) -> REF_684.pot
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_493', 'REF_685'] 
REF_681(uint256) (->round_) := TMP_494(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_686(uint256) -> _eventData_.genAmount
REF_688(uint256) -> _eventData_.genAmount
TMP_495(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_688'] 
REF_686(uint256) (->_eventData_) := TMP_495(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_689(uint256) -> _eventData_.potAmount
REF_689(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3222.sol-FoMo3DFast-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_531(F3Ddatasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.plyr
_winPID(uint256) := REF_532(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_533(F3Ddatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.team
_winTID(uint256) := REF_534(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_535(F3Ddatasets.Round) -> round_[_rID]
REF_536(uint256) -> REF_535.pot
_pot(uint256) := REF_536(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_382(uint256) = TMP_381 / 100
_win(uint256) := TMP_382(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_383(uint256) = _pot / 50
_com(uint256) := TMP_383(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_539(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_540(uint256) -> REF_539.gen
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_540'] 
TMP_385(uint256) = TMP_384 / 100
_gen(uint256) := TMP_385(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_542(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_543(uint256) -> REF_542.p3d
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_543'] 
TMP_387(uint256) = TMP_386 / 100
_p3d(uint256) := TMP_387(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_388', '_com'] 
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_389', '_gen'] 
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_390', '_p3d'] 
_res(uint256) := TMP_391(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.keys
TMP_393(uint256) = TMP_392 / REF_550
_ppt(uint256) := TMP_393(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.keys
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_554'] 
TMP_395(uint256) = TMP_394 / 1000000000000000000
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_395'] 
_dust(uint256) := TMP_396(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_397(bool) = _dust > 0
CONDITION TMP_397"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_398(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_399(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_557(F3Ddatasets.Player) -> plyr_[_winPID]
REF_558(uint256) -> REF_557.win
REF_560(F3Ddatasets.Player) -> plyr_[_winPID]
REF_561(uint256) -> REF_560.win
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_561'] 
REF_558(uint256) (->plyr_) := TMP_400(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_p3d / 2))

IRs:
TMP_402(uint256) = _p3d / 2
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_402'] 
Transfer dest:admin value:TMP_403"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = _pot.add(_p3d / 2)

IRs:
REF_565(F3Ddatasets.Round) -> round_[_rID]
REF_566(uint256) -> REF_565.pot
TMP_405(uint256) = _p3d / 2
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', 'TMP_405'] 
REF_566(uint256) (->round_) := TMP_406(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_568(F3Ddatasets.Round) -> round_[_rID]
REF_569(uint256) -> REF_568.mask
REF_571(F3Ddatasets.Round) -> round_[_rID]
REF_572(uint256) -> REF_571.mask
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_572'] 
REF_569(uint256) (->round_) := TMP_407(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_573(uint256) -> _eventData_.compressedData
REF_574(uint256) -> _eventData_.compressedData
REF_575(F3Ddatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.end
TMP_408(uint256) = REF_576 * 1000000
TMP_409(uint256) = REF_574 + TMP_408
REF_573(uint256) (->_eventData_) := TMP_409(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_577(uint256) -> _eventData_.compressedIDs
REF_578(uint256) -> _eventData_.compressedIDs
TMP_410(uint256) = _winPID * 100000000000000000000000000
TMP_411(uint256) = REF_578 + TMP_410
TMP_412(uint256) = _winTID * 100000000000000000
TMP_413(uint256) = TMP_411 + TMP_412
REF_577(uint256) (->_eventData_) := TMP_413(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_579(address) -> _eventData_.winnerAddr
REF_580(F3Ddatasets.Player) -> plyr_[_winPID]
REF_581(address) -> REF_580.addr
REF_579(address) (->_eventData_) := REF_581(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_582(bytes32) -> _eventData_.winnerName
REF_583(F3Ddatasets.Player) -> plyr_[_winPID]
REF_584(bytes32) -> REF_583.name
REF_582(bytes32) (->_eventData_) := REF_584(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_585(uint256) -> _eventData_.amountWon
REF_585(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_586(uint256) -> _eventData_.genAmount
REF_586(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_587(uint256) -> _eventData_.P3DAmount
REF_587(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_588(uint256) -> _eventData_.newPot
REF_588(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_414(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_415(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_589(F3Ddatasets.Round) -> round_[_rID]
REF_590(uint256) -> REF_589.strt
REF_590(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.end
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_416', 'rndGap_'] 
REF_592(uint256) (->round_) := TMP_417(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_595(F3Ddatasets.Round) -> round_[_rID]
REF_596(uint256) -> REF_595.pot
REF_596(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3222.sol-FoMo3DFast-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_730(uint256) -> _eventData_.compressedData
REF_731(uint256) -> _eventData_.compressedData
TMP_512(uint256) = now * 1000000000000000000
TMP_513(uint256) = REF_731 + TMP_512
TMP_514(uint256) = _team * 100000000000000000000000000000
TMP_515(uint256) = TMP_513 + TMP_514
REF_730(uint256) (->_eventData_) := TMP_515(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_732(uint256) -> _eventData_.compressedIDs
REF_733(uint256) -> _eventData_.compressedIDs
TMP_516(uint256) = REF_733 + _pID
TMP_517(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_518(uint256) = TMP_516 + TMP_517
REF_732(uint256) (->_eventData_) := TMP_518(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_735(uint256) -> _eventData_.compressedData
REF_736(uint256) -> _eventData_.compressedIDs
REF_737(F3Ddatasets.Player) -> plyr_[_pID]
REF_738(bytes32) -> REF_737.name
REF_739(address) -> _eventData_.winnerAddr
REF_740(bytes32) -> _eventData_.winnerName
REF_741(uint256) -> _eventData_.amountWon
REF_742(uint256) -> _eventData_.newPot
REF_743(uint256) -> _eventData_.P3DAmount
REF_744(uint256) -> _eventData_.genAmount
REF_745(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_735,REF_736,REF_738,msg.sender,_eth,_keys,REF_739,REF_740,REF_741,REF_742,REF_743,REF_744,REF_745,airDropPot_)"];
}
// Function: 3222.sol-FoMo3DFast-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_98(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_98(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_50(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_50(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_52,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 3222.sol-FoMo3DFast-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_163(F3Ddatasets.Round) -> round_[_rID]
REF_164(uint256) -> REF_163.strt
TMP_193(uint256) = REF_164 + rndGap_
TMP_194(bool) = _now > TMP_193
REF_165(F3Ddatasets.Round) -> round_[_rID]
REF_166(uint256) -> REF_165.end
TMP_195(bool) = _now <= REF_166
REF_167(F3Ddatasets.Round) -> round_[_rID]
REF_168(uint256) -> REF_167.end
TMP_196(bool) = _now > REF_168
REF_169(F3Ddatasets.Round) -> round_[_rID]
REF_170(uint256) -> REF_169.plyr
TMP_197(bool) = REF_170 == 0
TMP_198(bool) = TMP_196 && TMP_197
TMP_199(bool) = TMP_195 || TMP_198
TMP_200(bool) = TMP_194 && TMP_199
CONDITION TMP_200"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_171(F3Ddatasets.Round) -> round_[_rID]
REF_172(uint256) -> REF_171.keys
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_172', '1000000000000000000'] 
TMP_202(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_201', '1000000000000000000'] 
RETURN TMP_202"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3222.sol-FoMo3DFast-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_245(F3Ddatasets.Round) -> round_[_rID]
REF_246(uint256) -> REF_245.ico
REF_247(F3Ddatasets.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.keys
REF_249(F3Ddatasets.Round) -> round_[_rID]
REF_250(uint256) -> REF_249.end
REF_251(F3Ddatasets.Round) -> round_[_rID]
REF_252(uint256) -> REF_251.strt
REF_253(F3Ddatasets.Round) -> round_[_rID]
REF_254(uint256) -> REF_253.pot
REF_255(F3Ddatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.team
REF_257(F3Ddatasets.Round) -> round_[_rID]
REF_258(uint256) -> REF_257.plyr
TMP_233(uint256) = REF_258 * 10
TMP_234(uint256) = REF_256 + TMP_233
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.plyr
REF_261(F3Ddatasets.Player) -> plyr_[REF_260]
REF_262(address) -> REF_261.addr
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.plyr
REF_265(F3Ddatasets.Player) -> plyr_[REF_264]
REF_266(bytes32) -> REF_265.name
REF_267(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_268(uint256) -> REF_267[0]
REF_269(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_270(uint256) -> REF_269[1]
REF_271(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_272(uint256) -> REF_271[2]
REF_273(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_274(uint256) -> REF_273[3]
TMP_235(uint256) = airDropPot_ * 1000
TMP_236(uint256) = airDropTracker_ + TMP_235
RETURN REF_246,_rID,REF_248,REF_250,REF_252,REF_254,TMP_234,REF_262,REF_266,REF_268,REF_270,REF_272,REF_274,TMP_236"];
}
// Function: 3222.sol-FoMo3DFast-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_237 = CONVERT 0 to address
TMP_238(bool) = _addr == TMP_237
CONDITION TMP_238"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_239(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_275(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_275(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_276(F3Ddatasets.Player) -> plyr_[_pID]
REF_277(bytes32) -> REF_276.name
REF_278(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_279(F3Ddatasets.PlayerRounds) -> REF_278[_rID]
REF_280(uint256) -> REF_279.keys
REF_281(F3Ddatasets.Player) -> plyr_[_pID]
REF_282(uint256) -> REF_281.win
REF_283(F3Ddatasets.Player) -> plyr_[_pID]
REF_284(uint256) -> REF_283.gen
REF_286(F3Ddatasets.Player) -> plyr_[_pID]
REF_287(uint256) -> REF_286.lrnd
TMP_240(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_287)
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_284', 'TMP_240'] 
REF_288(F3Ddatasets.Player) -> plyr_[_pID]
REF_289(uint256) -> REF_288.aff
REF_290(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_291(F3Ddatasets.PlayerRounds) -> REF_290[_rID]
REF_292(uint256) -> REF_291.eth
RETURN _pID,REF_277,REF_280,REF_282,TMP_241,REF_289,REF_292"];
}
// Function: 3222.sol-FoMo3DFast-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_185(F3Ddatasets.Round) -> round_[_rID]
REF_186(uint256) -> REF_185.end
TMP_209(bool) = now > REF_186
REF_187(F3Ddatasets.Round) -> round_[_rID]
REF_188(bool) -> REF_187.ended
TMP_210(bool) = REF_188 == False
TMP_211(bool) = TMP_209 && TMP_210
REF_189(F3Ddatasets.Round) -> round_[_rID]
REF_190(uint256) -> REF_189.plyr
TMP_212(bool) = REF_190 != 0
TMP_213(bool) = TMP_211 && TMP_212
CONDITION TMP_213"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_191(F3Ddatasets.Round) -> round_[_rID]
REF_192(uint256) -> REF_191.plyr
TMP_214(bool) = REF_192 == _pID
CONDITION TMP_214"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_193(F3Ddatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.win
REF_196(F3Ddatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.pot
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_197', '48'] 
TMP_216(uint256) = TMP_215 / 100
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_194', 'TMP_216'] 
REF_199(F3Ddatasets.Player) -> plyr_[_pID]
REF_200(uint256) -> REF_199.gen
TMP_218(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_203(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_204(F3Ddatasets.PlayerRounds) -> REF_203[_rID]
REF_205(uint256) -> REF_204.mask
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_218', 'REF_205'] 
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_200', 'TMP_219'] 
REF_206(F3Ddatasets.Player) -> plyr_[_pID]
REF_207(uint256) -> REF_206.aff
RETURN TMP_217,TMP_220,REF_207"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_208(F3Ddatasets.Player) -> plyr_[_pID]
REF_209(uint256) -> REF_208.win
REF_210(F3Ddatasets.Player) -> plyr_[_pID]
REF_211(uint256) -> REF_210.gen
TMP_221(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_214(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_215(F3Ddatasets.PlayerRounds) -> REF_214[_rID]
REF_216(uint256) -> REF_215.mask
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_221', 'REF_216'] 
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_211', 'TMP_222'] 
REF_217(F3Ddatasets.Player) -> plyr_[_pID]
REF_218(uint256) -> REF_217.aff
RETURN REF_209,TMP_223,REF_218"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_219(F3Ddatasets.Player) -> plyr_[_pID]
REF_220(uint256) -> REF_219.win
REF_221(F3Ddatasets.Player) -> plyr_[_pID]
REF_222(uint256) -> REF_221.gen
REF_224(F3Ddatasets.Player) -> plyr_[_pID]
REF_225(uint256) -> REF_224.lrnd
TMP_224(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_225)
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_222', 'TMP_224'] 
REF_226(F3Ddatasets.Player) -> plyr_[_pID]
REF_227(uint256) -> REF_226.aff
RETURN REF_220,TMP_225,REF_227"];
}
// Function: 3222.sol-FoMo3DFast-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_228(F3Ddatasets.Round) -> round_[_rID]
REF_229(uint256) -> REF_228.mask
REF_231(F3Ddatasets.Round) -> round_[_rID]
REF_232(uint256) -> REF_231.pot
REF_234(F3Ddatasets.Round) -> round_[_rID]
REF_235(uint256) -> REF_234.team
REF_236(F3Ddatasets.PotSplit) -> potSplit_[REF_235]
REF_237(uint256) -> REF_236.gen
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_232', 'REF_237'] 
TMP_227(uint256) = TMP_226 / 100
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_227', '1000000000000000000'] 
REF_239(F3Ddatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.keys
TMP_229(uint256) = TMP_228 / REF_240
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_229', 'TMP_229'] 
REF_242(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_243(F3Ddatasets.PlayerRounds) -> REF_242[_rID]
REF_244(uint256) -> REF_243.keys
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_230', 'REF_244'] 
TMP_232(uint256) = TMP_231 / 1000000000000000000
RETURN TMP_232"];
}
// Function: 3222.sol-FoMo3DFast-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_175(F3Ddatasets.Round) -> round_[_rID]
REF_176(uint256) -> REF_175.end
TMP_203(bool) = _now < REF_176
CONDITION TMP_203"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_177(F3Ddatasets.Round) -> round_[_rID]
REF_178(uint256) -> REF_177.strt
TMP_204(uint256) = REF_178 + rndGap_
TMP_205(bool) = _now > TMP_204
CONDITION TMP_205"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_179(F3Ddatasets.Round) -> round_[_rID]
REF_180(uint256) -> REF_179.end
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_180', '_now'] 
RETURN TMP_206"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_182(F3Ddatasets.Round) -> round_[_rID]
REF_183(uint256) -> REF_182.strt
TMP_207(uint256) = REF_183 + rndGap_
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_207', '_now'] 
RETURN TMP_208"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3222.sol-FoMo3DFast-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_470(F3Ddatasets.Round) -> round_[_rID]
REF_471(uint256) -> REF_470.strt
TMP_342(uint256) = REF_471 + rndGap_
TMP_343(bool) = _now > TMP_342
REF_472(F3Ddatasets.Round) -> round_[_rID]
REF_473(uint256) -> REF_472.end
TMP_344(bool) = _now <= REF_473
REF_474(F3Ddatasets.Round) -> round_[_rID]
REF_475(uint256) -> REF_474.end
TMP_345(bool) = _now > REF_475
REF_476(F3Ddatasets.Round) -> round_[_rID]
REF_477(uint256) -> REF_476.plyr
TMP_346(bool) = REF_477 == 0
TMP_347(bool) = TMP_345 && TMP_346
TMP_348(bool) = TMP_344 || TMP_347
TMP_349(bool) = TMP_343 && TMP_348
CONDITION TMP_349"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_478(F3Ddatasets.Round) -> round_[_rID]
REF_479(uint256) -> REF_478.keys
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_479', '_keys'] 
TMP_351(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_350', '_keys'] 
RETURN TMP_351"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_352"];
}
// Function: 3222.sol-FoMo3DFast-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_529(bool) = activated_ == True
TMP_530(None) = SOLIDITY_CALL require(bool,string)(TMP_529,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3222.sol-FoMo3DFast-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_531(bool) = _codeLength == 0
TMP_532(None) = SOLIDITY_CALL require(bool,string)(TMP_531,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3222.sol-FoMo3DFast-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_533(bool) = _eth >= 1000000000
TMP_534(None) = SOLIDITY_CALL require(bool,string)(TMP_533,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_535(bool) = _eth <= 100000000000000000000000
TMP_536(None) = SOLIDITY_CALL require(bool,string)(TMP_535,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3222.sol-FoMo3DFast-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_523(F3Ddatasets.Player) -> plyr_[_pID]
REF_524(uint256) -> REF_523.lrnd
TMP_378(bool) = REF_524 != 0
CONDITION TMP_378"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_525(F3Ddatasets.Player) -> plyr_[_pID]
REF_526(uint256) -> REF_525.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_526)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_527(F3Ddatasets.Player) -> plyr_[_pID]
REF_528(uint256) -> REF_527.lrnd
REF_528(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_529(uint256) -> _eventData_.compressedData
REF_530(uint256) -> _eventData_.compressedData
TMP_380(uint256) = REF_530 + 10
REF_529(uint256) (->_eventData_) := TMP_380(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3222.sol-FoMo3DFast-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_476(uint256) = rID_ + 1
_rID(uint256) := TMP_476(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_662(F3Ddatasets.Round) -> round_[_rID]
REF_663(uint256) -> REF_662.pot
REF_664(F3Ddatasets.Round) -> round_[_rID]
REF_665(uint256) -> REF_664.pot
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_665', 'msg.value'] 
REF_663(uint256) (->round_) := TMP_477(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 3222.sol-FoMo3DFast-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_327(F3Ddatasets.Round) -> round_[_rID]
REF_328(uint256) -> REF_327.strt
TMP_260(uint256) = REF_328 + rndGap_
TMP_261(bool) = _now > TMP_260
REF_329(F3Ddatasets.Round) -> round_[_rID]
REF_330(uint256) -> REF_329.end
TMP_262(bool) = _now <= REF_330
REF_331(F3Ddatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.end
TMP_263(bool) = _now > REF_332
REF_333(F3Ddatasets.Round) -> round_[_rID]
REF_334(uint256) -> REF_333.plyr
TMP_264(bool) = REF_334 == 0
TMP_265(bool) = TMP_263 && TMP_264
TMP_266(bool) = TMP_262 || TMP_265
TMP_267(bool) = TMP_261 && TMP_266
CONDITION TMP_267"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_335(F3Ddatasets.Player) -> plyr_[_pID]
REF_336(uint256) -> REF_335.gen
TMP_268(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_268', '_eth'] 
REF_336(uint256) (->plyr_) := TMP_269(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_338(F3Ddatasets.Round) -> round_[_rID]
REF_339(uint256) -> REF_338.end
TMP_271(bool) = _now > REF_339
REF_340(F3Ddatasets.Round) -> round_[_rID]
REF_341(bool) -> REF_340.ended
TMP_272(bool) = REF_341 == False
TMP_273(bool) = TMP_271 && TMP_272
CONDITION TMP_273"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_342(F3Ddatasets.Round) -> round_[_rID]
REF_343(bool) -> REF_342.ended
REF_343(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_274(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_274(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_344(uint256) -> _eventData_.compressedData
REF_345(uint256) -> _eventData_.compressedData
TMP_275(uint256) = _now * 1000000000000000000
TMP_276(uint256) = REF_345 + TMP_275
REF_344(uint256) (->_eventData_) := TMP_276(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_346(uint256) -> _eventData_.compressedIDs
REF_347(uint256) -> _eventData_.compressedIDs
TMP_277(uint256) = REF_347 + _pID
REF_346(uint256) (->_eventData_) := TMP_277(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_349(F3Ddatasets.Player) -> plyr_[_pID]
REF_350(bytes32) -> REF_349.name
REF_351(uint256) -> _eventData_.compressedData
REF_352(uint256) -> _eventData_.compressedIDs
REF_353(address) -> _eventData_.winnerAddr
REF_354(bytes32) -> _eventData_.winnerName
REF_355(uint256) -> _eventData_.amountWon
REF_356(uint256) -> _eventData_.newPot
REF_357(uint256) -> _eventData_.P3DAmount
REF_358(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_350,REF_351,REF_352,REF_353,REF_354,REF_355,REF_356,REF_357,REF_358)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3222.sol-FoMo3DFast-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_85(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_85(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_143 = CONVERT 0 to address
TMP_144(bool) = _affCode == TMP_143
TMP_145(bool) = _affCode == msg.sender
TMP_146(bool) = TMP_144 || TMP_145
CONDITION TMP_146"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.laff
_affID(uint256) := REF_87(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_88(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_88(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_89(F3Ddatasets.Player) -> plyr_[_pID]
REF_90(uint256) -> REF_89.laff
TMP_147(bool) = _affID != REF_90
CONDITION TMP_147"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_91(F3Ddatasets.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.laff
REF_92(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_148(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_148(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3222.sol-FoMo3DFast-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_78(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_78(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_134(bool) = _affCode == 0
TMP_135(bool) = _affCode == _pID
TMP_136(bool) = TMP_134 || TMP_135
CONDITION TMP_136"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_79(F3Ddatasets.Player) -> plyr_[_pID]
REF_80(uint256) -> REF_79.laff
_affCode(uint256) := REF_80(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
TMP_137(bool) = _affCode != REF_82
CONDITION TMP_137"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_83(F3Ddatasets.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
REF_84(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_138(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_138(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 3222.sol-FoMo3DFast-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_93(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_93(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_153(bool) = _affCode == 
REF_94(F3Ddatasets.Player) -> plyr_[_pID]
REF_95(bytes32) -> REF_94.name
TMP_154(bool) = _affCode == REF_95
TMP_155(bool) = TMP_153 || TMP_154
CONDITION TMP_155"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(uint256) -> REF_96.laff
_affID(uint256) := REF_97(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_98(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_98(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_99(F3Ddatasets.Player) -> plyr_[_pID]
REF_100(uint256) -> REF_99.laff
TMP_156(bool) = _affID != REF_100
CONDITION TMP_156"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_pID]
REF_102(uint256) -> REF_101.laff
REF_102(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_157(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_157(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3222.sol-FoMo3DFast-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_353 = CONVERT PlayerBook to address
TMP_354(bool) = msg.sender == TMP_353
TMP_355(None) = SOLIDITY_CALL require(bool,string)(TMP_354,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_483(uint256) -> pIDxAddr_[_addr]
TMP_356(bool) = REF_483 != _pID
CONDITION TMP_356"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_484(uint256) -> pIDxAddr_[_addr]
REF_484(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_485(uint256) -> pIDxName_[_name]
TMP_357(bool) = REF_485 != _pID
CONDITION TMP_357"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_486(uint256) -> pIDxName_[_name]
REF_486(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_487(F3Ddatasets.Player) -> plyr_[_pID]
REF_488(address) -> REF_487.addr
TMP_358(bool) = REF_488 != _addr
CONDITION TMP_358"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_489(F3Ddatasets.Player) -> plyr_[_pID]
REF_490(address) -> REF_489.addr
REF_490(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_491(F3Ddatasets.Player) -> plyr_[_pID]
REF_492(bytes32) -> REF_491.name
TMP_359(bool) = REF_492 != _name
CONDITION TMP_359"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_493(F3Ddatasets.Player) -> plyr_[_pID]
REF_494(bytes32) -> REF_493.name
REF_494(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_495(F3Ddatasets.Player) -> plyr_[_pID]
REF_496(uint256) -> REF_495.laff
TMP_360(bool) = REF_496 != _laff
CONDITION TMP_360"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_497(F3Ddatasets.Player) -> plyr_[_pID]
REF_498(uint256) -> REF_497.laff
REF_498(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_499(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_500(bool) -> REF_499[_name]
TMP_361(bool) = REF_500 == False
CONDITION TMP_361"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_501(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_502(bool) -> REF_501[_name]
REF_502(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3222.sol-FoMo3DFast-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_362 = CONVERT PlayerBook to address
TMP_363(bool) = msg.sender == TMP_362
TMP_364(None) = SOLIDITY_CALL require(bool,string)(TMP_363,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_503(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_504(bool) -> REF_503[_name]
TMP_365(bool) = REF_504 == False
CONDITION TMP_365"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_505(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_506(bool) -> REF_505[_name]
REF_506(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3222.sol-FoMo3DFast-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_181(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_181(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_139(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_139(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_141(F3Ddatasets.Player) -> plyr_[_affID]
REF_142(address) -> REF_141.addr
REF_143(F3Ddatasets.Player) -> plyr_[_affID]
REF_144(bytes32) -> REF_143.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_142,REF_144,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 3222.sol-FoMo3DFast-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_185(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_185(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_148(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_148(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_150(F3Ddatasets.Player) -> plyr_[_affID]
REF_151(address) -> REF_150.addr
REF_152(F3Ddatasets.Player) -> plyr_[_affID]
REF_153(bytes32) -> REF_152.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_151,REF_153,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 3222.sol-FoMo3DFast-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_189(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_189(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_157(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_157(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_159(F3Ddatasets.Player) -> plyr_[_affID]
REF_160(address) -> REF_159.addr
REF_161(F3Ddatasets.Player) -> plyr_[_affID]
REF_162(bytes32) -> REF_161.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_160,REF_162,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 3222.sol-FoMo3DFast-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x8c8c0CE93311e5E5FF5b609c693D1b83d523f00E)

IRs:
TMP_528 = CONVERT 802381936944238054059780289476290782698058018830 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_528(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = FOMO Test

IRs:
name(string) := FOMO Test(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = Test

IRs:
symbol(string) := Test(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 20

IRs:
rndInc_(uint256) := 20(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 28800

IRs:
rndMax_(uint256) := 28800(uint256)"];
}
// Function: 3222.sol-FoMo3DFast-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 1800

IRs:
rndExtra_(uint256) := 1800(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 1800

IRs:
rndGap_(uint256) := 1800(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3222.sol-FoMo3DFast-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_418(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_418(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_419(bool) = _earnings > 0
CONDITION TMP_419"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_597(F3Ddatasets.Player) -> plyr_[_pID]
REF_598(uint256) -> REF_597.gen
REF_600(F3Ddatasets.Player) -> plyr_[_pID]
REF_601(uint256) -> REF_600.gen
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_601'] 
REF_598(uint256) (->plyr_) := TMP_420(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_602(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_603(F3Ddatasets.PlayerRounds) -> REF_602[_rIDlast]
REF_604(uint256) -> REF_603.mask
REF_606(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_607(F3Ddatasets.PlayerRounds) -> REF_606[_rIDlast]
REF_608(uint256) -> REF_607.mask
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_608'] 
REF_604(uint256) (->plyrRnds_) := TMP_421(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3222.sol-FoMo3DFast-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_691(F3Ddatasets.Round) -> round_[_rID]
REF_692(uint256) -> REF_691.keys
TMP_497(uint256) = TMP_496 / REF_692
_ppt(uint256) := TMP_497(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_693(F3Ddatasets.Round) -> round_[_rID]
REF_694(uint256) -> REF_693.mask
REF_696(F3Ddatasets.Round) -> round_[_rID]
REF_697(uint256) -> REF_696.mask
TMP_498(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_697'] 
REF_694(uint256) (->round_) := TMP_498(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_500(uint256) = TMP_499 / 1000000000000000000
_pearn(uint256) := TMP_500(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_699(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_700(F3Ddatasets.PlayerRounds) -> REF_699[_rID]
REF_701(uint256) -> REF_700.mask
REF_702(F3Ddatasets.Round) -> round_[_rID]
REF_703(uint256) -> REF_702.mask
TMP_501(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_703', '_keys'] 
TMP_502(uint256) = TMP_501 / 1000000000000000000
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_502', '_pearn'] 
REF_707(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_708(F3Ddatasets.PlayerRounds) -> REF_707[_rID]
REF_709(uint256) -> REF_708.mask
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_503', 'REF_709'] 
REF_701(uint256) (->plyrRnds_) := TMP_504(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_712(F3Ddatasets.Round) -> round_[_rID]
REF_713(uint256) -> REF_712.keys
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_713'] 
TMP_506(uint256) = TMP_505 / 1000000000000000000
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_506'] 
RETURN TMP_507"];
}
// Function: 3222.sol-FoMo3DFast-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_609(F3Ddatasets.Round) -> round_[_rID]
REF_610(uint256) -> REF_609.end
TMP_422(bool) = _now > REF_610
REF_611(F3Ddatasets.Round) -> round_[_rID]
REF_612(uint256) -> REF_611.plyr
TMP_423(bool) = REF_612 == 0
TMP_424(bool) = TMP_422 && TMP_423
CONDITION TMP_424"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_425(uint256) = _keys / 1000000000000000000
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_425', 'rndInc_'] 
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_426', '_now'] 
_newTime(uint256) := TMP_427(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_428(uint256) = _keys / 1000000000000000000
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_428', 'rndInc_'] 
REF_617(F3Ddatasets.Round) -> round_[_rID]
REF_618(uint256) -> REF_617.end
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_429', 'REF_618'] 
_newTime(uint256) := TMP_430(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_432(bool) = _newTime < TMP_431
CONDITION TMP_432"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_620(F3Ddatasets.Round) -> round_[_rID]
REF_621(uint256) -> REF_620.end
REF_621(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_622(F3Ddatasets.Round) -> round_[_rID]
REF_623(uint256) -> REF_622.end
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_623(uint256) (->round_) := TMP_433(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3222.sol-FoMo3DFast-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_375(bool) = _team < 0
TMP_376(bool) = _team > 3
TMP_377(bool) = TMP_375 || TMP_376
CONDITION TMP_377"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3222.sol-FoMo3DFast-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_103(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_103(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_104(F3Ddatasets.Round) -> round_[_rID]
REF_105(uint256) -> REF_104.end
TMP_162(bool) = _now > REF_105
REF_106(F3Ddatasets.Round) -> round_[_rID]
REF_107(bool) -> REF_106.ended
TMP_163(bool) = REF_107 == False
TMP_164(bool) = TMP_162 && TMP_163
REF_108(F3Ddatasets.Round) -> round_[_rID]
REF_109(uint256) -> REF_108.plyr
TMP_165(bool) = REF_109 != 0
TMP_166(bool) = TMP_164 && TMP_165
CONDITION TMP_166"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_110(F3Ddatasets.Round) -> round_[_rID]
REF_111(bool) -> REF_110.ended
REF_111(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_167(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_167(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_168(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_168(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_169(bool) = _eth > 0
CONDITION TMP_169"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_112(F3Ddatasets.Player) -> plyr_[_pID]
REF_113(address) -> REF_112.addr
Transfer dest:REF_113 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_115(uint256) -> _eventData_.compressedData
REF_116(uint256) -> _eventData_.compressedData
TMP_171(uint256) = _now * 1000000000000000000
TMP_172(uint256) = REF_116 + TMP_171
REF_115(uint256) (->_eventData_) := TMP_172(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_117(uint256) -> _eventData_.compressedIDs
REF_118(uint256) -> _eventData_.compressedIDs
TMP_173(uint256) = REF_118 + _pID
REF_117(uint256) (->_eventData_) := TMP_173(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_120(F3Ddatasets.Player) -> plyr_[_pID]
REF_121(bytes32) -> REF_120.name
REF_122(uint256) -> _eventData_.compressedData
REF_123(uint256) -> _eventData_.compressedIDs
REF_124(address) -> _eventData_.winnerAddr
REF_125(bytes32) -> _eventData_.winnerName
REF_126(uint256) -> _eventData_.amountWon
REF_127(uint256) -> _eventData_.newPot
REF_128(uint256) -> _eventData_.P3DAmount
REF_129(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_121,_eth,REF_122,REF_123,REF_124,REF_125,REF_126,REF_127,REF_128,REF_129)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_175(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_175(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_176(bool) = _eth > 0
CONDITION TMP_176"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_130(F3Ddatasets.Player) -> plyr_[_pID]
REF_131(address) -> REF_130.addr
Transfer dest:REF_131 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_134(F3Ddatasets.Player) -> plyr_[_pID]
REF_135(bytes32) -> REF_134.name
Emit onWithdraw(_pID,msg.sender,REF_135,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
23->1;
}
// Function: 3222.sol-FoMo3DFast-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_714(F3Ddatasets.Player) -> plyr_[_pID]
REF_715(uint256) -> REF_714.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_715)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_716(F3Ddatasets.Player) -> plyr_[_pID]
REF_717(uint256) -> REF_716.win
REF_719(F3Ddatasets.Player) -> plyr_[_pID]
REF_720(uint256) -> REF_719.gen
TMP_509(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_717', 'REF_720'] 
REF_722(F3Ddatasets.Player) -> plyr_[_pID]
REF_723(uint256) -> REF_722.aff
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_509', 'REF_723'] 
_earnings(uint256) := TMP_510(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_511(bool) = _earnings > 0
CONDITION TMP_511"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_724(F3Ddatasets.Player) -> plyr_[_pID]
REF_725(uint256) -> REF_724.win
REF_725(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_726(F3Ddatasets.Player) -> plyr_[_pID]
REF_727(uint256) -> REF_726.gen
REF_727(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_728(F3Ddatasets.Player) -> plyr_[_pID]
REF_729(uint256) -> REF_728.aff
REF_729(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3222.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_0 = CONVERT _input to bytes
_temp(bytes) := TMP_0(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_1(bool) = _length <= 32
TMP_2(bool) = _length > 0
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_5(bool) = REF_1 != 32
TMP_6(uint256) = _length - 1
REF_2(None) -> _temp[TMP_6]
TMP_7(bool) = REF_2 != 32
TMP_8(bool) = TMP_5 && TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool,string)(TMP_8,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_10(bool) = REF_3 == 48
CONDITION TMP_10"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_11(bool) = REF_4 != 120
TMP_12(None) = SOLIDITY_CALL require(bool,string)(TMP_11,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_13(bool) = REF_5 != 88
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_15(bool) = i < _length
CONDITION TMP_15"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_16(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_17(bool) = REF_7 < 91
TMP_18(bool) = TMP_16 && TMP_17
CONDITION TMP_18"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_19 = CONVERT REF_9 to uint256
TMP_20(uint256) = TMP_19 + 32
TMP_21 = CONVERT TMP_20 to bytes1
REF_8(bytes1) (->_temp) := TMP_21(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_22(bool) = _hasNonNumber == False
CONDITION TMP_22"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_23(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_24(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_25(bool) = REF_12 < 123
TMP_26(bool) = TMP_24 && TMP_25
TMP_27(bool) = TMP_23 || TMP_26
REF_13(None) -> _temp[i]
TMP_28(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_29(bool) = REF_14 < 58
TMP_30(bool) = TMP_28 && TMP_29
TMP_31(bool) = TMP_27 || TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_33(bool) = REF_15 == 32
CONDITION TMP_33"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_34(uint256) = i + 1
REF_16(None) -> _temp[TMP_34]
TMP_35(bool) = REF_16 != 32
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_37(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_38(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_39(bool) = REF_18 > 57
TMP_40(bool) = TMP_38 || TMP_39
TMP_41(bool) = TMP_37 && TMP_40
CONDITION TMP_41"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_42(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_43(bool) = _hasNonNumber == True
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3222.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 3222.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3222.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3222.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3222.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3222.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3222.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3222.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3222.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_53(uint256) = a + b
c(uint256) := TMP_53(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_54(bool) = c >= a
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3222.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_45(bool) = a == 0
CONDITION TMP_45"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_46(uint256) = a * b
c(uint256) := TMP_46(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_47(uint256) = c / a
TMP_48(bool) = TMP_47 == b
TMP_49(None) = SOLIDITY_CALL require(bool,string)(TMP_48,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3222.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_63(bool) = x == 0
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_64(bool) = y == 0
CONDITION TMP_64"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_65(bool) = i < y
CONDITION TMP_65"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_66(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_66(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_67(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3222.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_62(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_62"];
}
// Function: 3222.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_56(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_57(uint256) = TMP_56 / 2
z(uint256) := TMP_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_58(bool) = z < y
CONDITION TMP_58"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_59(uint256) = x / z
TMP_60(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_59,z)
TMP_61(uint256) = TMP_60 / 2
z(uint256) := TMP_61(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3222.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_50(bool) = b <= a
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_52(uint256) = a - b
RETURN TMP_52"];
}
}
