digraph G {
// Function: 3228.sol-DiviesInterface-deposit()
digraph{
}
// Function: 3228.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 3228.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 3228.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 3228.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 3228.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 3228.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 3228.sol-MC2KeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_498(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_498'] 
TMP_500(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_501(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_500'] 
TMP_502(uint256) = TMP_501 / 2
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_499', 'TMP_502'] 
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_505(uint256) = TMP_503 / TMP_504
RETURN TMP_505"];
}
// Function: 3228.sol-MC2KeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_488(uint256) = INTERNAL_CALL, MC2KeysCalcLong.eth(uint256)(_curKeys)
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_490(uint256) = INTERNAL_CALL, MC2KeysCalcLong.eth(uint256)(TMP_489)
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_488', 'TMP_490'] 
RETURN TMP_491"];
}
// Function: 3228.sol-MC2KeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_493(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_492', '312500000000000000000000000'] 
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_493', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_495(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_494'] 
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_495', '74999921875000000000000000000000'] 
TMP_497(uint256) = TMP_496 / 156250000
RETURN TMP_497"];
}
// Function: 3228.sol-MC2KeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_485(uint256) = INTERNAL_CALL, MC2KeysCalcLong.keys(uint256)(TMP_484)
TMP_486(uint256) = INTERNAL_CALL, MC2KeysCalcLong.keys(uint256)(_curEth)
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
RETURN TMP_487"];
}
// Function: 3228.sol-MC2SettingInterface-getFastExtra()
digraph{
}
// Function: 3228.sol-MC2SettingInterface-getFastGap()
digraph{
}
// Function: 3228.sol-MC2SettingInterface-getLongExtra()
digraph{
}
// Function: 3228.sol-MC2SettingInterface-getLongGap()
digraph{
}
// Function: 3228.sol-MC2long-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0x1d85A7C26952d4a7D940573eaE73f44D0D6Fa76D || msg.sender == 0x5724fc4Abb369C6F2339F784E5b42189f3d30180 || msg.sender == 0x6Be04d4ef139eE9fd08A32FdBFb7A532Fe9eD53F || msg.sender == 0x53E3E6444C416e2A981644706A8E5E9C13511cf7 || msg.sender == 0xEeF4f752D105fEaCB288bB7071F619A2E90a34aC,only team just can activate)

IRs:
TMP_435(bool) = msg.sender == 168541345371824726772828488014847947592128505709
TMP_436(bool) = msg.sender == 497507001614620288876246459399023901593130172800
TMP_437(bool) = TMP_435 || TMP_436
TMP_438(bool) = msg.sender == 615864113911307801829247010016284221951744857407
TMP_439(bool) = TMP_437 || TMP_438
TMP_440(bool) = msg.sender == 478928562204771448860190027386385405301151046903
TMP_441(bool) = TMP_439 || TMP_440
TMP_442(bool) = msg.sender == 1364202730200134289129775680643579005625936000172
TMP_443(bool) = TMP_441 || TMP_442
TMP_444(None) = SOLIDITY_CALL require(bool,string)(TMP_443,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(otherMC2_) != address(0),must link to other MC2 first)

IRs:
TMP_445 = CONVERT otherMC2_ to address
TMP_446 = CONVERT 0 to address
TMP_447(bool) = TMP_445 != TMP_446
TMP_448(None) = SOLIDITY_CALL require(bool,string)(TMP_447,must link to other MC2 first)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_449(bool) = activated_ == False
TMP_450(None) = SOLIDITY_CALL require(bool,string)(TMP_449,fomo3d already activated)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_707(MC2datasets.Round) -> round_[1]
REF_708(uint256) -> REF_707.strt
TMP_451(uint256) = now + rndExtra_
TMP_452(uint256) = TMP_451 - rndGap_
REF_708(uint256) (->round_) := TMP_452(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_709(MC2datasets.Round) -> round_[1]
REF_710(uint256) -> REF_709.end
TMP_453(uint256) = now + rndInit_
TMP_454(uint256) = TMP_453 + rndExtra_
REF_710(uint256) (->round_) := TMP_454(uint256)"];
}
// Function: 3228.sol-MC2long-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_349(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_350(bytes32) = SOLIDITY_CALL keccak256()(TMP_349)
TMP_351 = CONVERT TMP_350 to uint256
TMP_352(uint256) = TMP_351 / now
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_348', 'TMP_352'] 
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_353', 'block.gaslimit'] 
TMP_355(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_356(bytes32) = SOLIDITY_CALL keccak256()(TMP_355)
TMP_357 = CONVERT TMP_356 to uint256
TMP_358(uint256) = TMP_357 / now
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_354', 'TMP_358'] 
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_359', 'block.number'] 
TMP_361(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_360)
TMP_362(bytes32) = SOLIDITY_CALL keccak256()(TMP_361)
TMP_363 = CONVERT TMP_362 to uint256
seed(uint256) := TMP_363(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_364(uint256) = seed / 1000
TMP_365(uint256) = TMP_364 * 1000
TMP_366(uint256) = seed - TMP_365
TMP_367(bool) = TMP_366 < airDropTracker_
CONDITION TMP_367"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3228.sol-MC2long-buyCore(uint256,uint256,uint256,MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_259(MC2datasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.strt
TMP_152(uint256) = REF_260 + rndGap_
TMP_153(bool) = _now > TMP_152
REF_261(MC2datasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_154(bool) = _now <= REF_262
REF_263(MC2datasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.end
TMP_155(bool) = _now > REF_264
REF_265(MC2datasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.plyr
TMP_156(bool) = REF_266 == 0
TMP_157(bool) = TMP_155 && TMP_156
TMP_158(bool) = TMP_154 || TMP_157
TMP_159(bool) = TMP_153 && TMP_158
CONDITION TMP_159"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, MC2long.core(uint256,uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_267(MC2datasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.end
TMP_161(bool) = _now > REF_268
REF_269(MC2datasets.Round) -> round_[_rID]
REF_270(bool) -> REF_269.ended
TMP_162(bool) = REF_270 == False
TMP_163(bool) = TMP_161 && TMP_162
CONDITION TMP_163"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_271(MC2datasets.Round) -> round_[_rID]
REF_272(bool) -> REF_271.ended
REF_272(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_164(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.endRound(MC2datasets.EventReturns)(_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_164(MC2datasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_273(uint256) -> _eventData_.compressedData
REF_274(uint256) -> _eventData_.compressedData
TMP_165(uint256) = _now * 1000000000000000000
TMP_166(uint256) = REF_274 + TMP_165
REF_273(uint256) (->_eventData_) := TMP_166(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_275(uint256) -> _eventData_.compressedIDs
REF_276(uint256) -> _eventData_.compressedIDs
TMP_167(uint256) = REF_276 + _pID
REF_275(uint256) (->_eventData_) := TMP_167(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
MC2events.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.UPAmount,_eventData_.genAmount)

IRs:
REF_278(MC2datasets.Player) -> plyr_[_pID]
REF_279(bytes32) -> REF_278.name
REF_280(uint256) -> _eventData_.compressedData
REF_281(uint256) -> _eventData_.compressedIDs
REF_282(address) -> _eventData_.winnerAddr
REF_283(bytes32) -> _eventData_.winnerName
REF_284(uint256) -> _eventData_.amountWon
REF_285(uint256) -> _eventData_.newPot
REF_286(uint256) -> _eventData_.UPAmount
REF_287(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_279,msg.value,REF_280,REF_281,REF_282,REF_283,REF_284,REF_285,REF_286,REF_287)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_288(MC2datasets.Player) -> plyr_[_pID]
REF_289(uint256) -> REF_288.gen
REF_290(MC2datasets.Player) -> plyr_[_pID]
REF_291(uint256) -> REF_290.gen
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_291', 'msg.value'] 
REF_289(uint256) (->plyr_) := TMP_169(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3228.sol-MC2long-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.determinePID(MC2datasets.EventReturns)(_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_23(MC2datasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(MC2datasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(MC2datasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(MC2datasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, MC2long.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, MC2long.buyCore(uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, MC2long.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3228.sol-MC2long-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.determinePID(MC2datasets.EventReturns)(_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_13(MC2datasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(MC2datasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(MC2datasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(MC2datasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, MC2long.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, MC2long.buyCore(uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, MC2long.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 3228.sol-MC2long-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.determinePID(MC2datasets.EventReturns)(_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_34(MC2datasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_35(MC2datasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_36(bool) = _affCode == REF_36
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(MC2datasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(MC2datasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_38(bool) = _affID != REF_41
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(MC2datasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, MC2long.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, MC2long.buyCore(uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, MC2long.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3228.sol-MC2long-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_424(MC2datasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.strt
TMP_242(uint256) = REF_425 + rndGap_
TMP_243(bool) = _now > TMP_242
REF_426(MC2datasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.end
TMP_244(bool) = _now <= REF_427
REF_428(MC2datasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.end
TMP_245(bool) = _now > REF_429
REF_430(MC2datasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.plyr
TMP_246(bool) = REF_431 == 0
TMP_247(bool) = TMP_245 && TMP_246
TMP_248(bool) = TMP_244 || TMP_247
TMP_249(bool) = TMP_243 && TMP_248
CONDITION TMP_249"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_432(MC2datasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.eth
TMP_250(uint256) = LIBRARY_CALL, dest:MC2KeysCalcLong, function:MC2KeysCalcLong.keysRec(uint256,uint256), arguments:['REF_433', '_eth'] 
RETURN TMP_250"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_251(uint256) = LIBRARY_CALL, dest:MC2KeysCalcLong, function:MC2KeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_251"];
}
// Function: 3228.sol-MC2long-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_414(MC2datasets.Round) -> round_[_rIDlast]
REF_415(uint256) -> REF_414.mask
REF_417(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_418(MC2datasets.PlayerRounds) -> REF_417[_rIDlast]
REF_419(uint256) -> REF_418.keys
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_415', 'REF_419'] 
TMP_240(uint256) = TMP_239 / 1000000000000000000
REF_421(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_422(MC2datasets.PlayerRounds) -> REF_421[_rIDlast]
REF_423(uint256) -> REF_422.mask
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_240', 'REF_423'] 
RETURN TMP_241"];
}
// Function: 3228.sol-MC2long-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = MC2datasets.TeamFee(30,6)

IRs:
REF_0(MC2datasets.TeamFee) -> fees_[0]
TMP_0(MC2datasets.TeamFee) = new TeamFee(30,6)
REF_0(MC2datasets.TeamFee) (->fees_) := TMP_0(MC2datasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = MC2datasets.TeamFee(43,0)

IRs:
REF_2(MC2datasets.TeamFee) -> fees_[1]
TMP_1(MC2datasets.TeamFee) = new TeamFee(43,0)
REF_2(MC2datasets.TeamFee) (->fees_) := TMP_1(MC2datasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = MC2datasets.TeamFee(56,10)

IRs:
REF_4(MC2datasets.TeamFee) -> fees_[2]
TMP_2(MC2datasets.TeamFee) = new TeamFee(56,10)
REF_4(MC2datasets.TeamFee) (->fees_) := TMP_2(MC2datasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = MC2datasets.TeamFee(43,8)

IRs:
REF_6(MC2datasets.TeamFee) -> fees_[3]
TMP_3(MC2datasets.TeamFee) = new TeamFee(43,8)
REF_6(MC2datasets.TeamFee) (->fees_) := TMP_3(MC2datasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = MC2datasets.PotSplit(15,10)

IRs:
REF_8(MC2datasets.PotSplit) -> potSplit_[0]
TMP_4(MC2datasets.PotSplit) = new PotSplit(15,10)
REF_8(MC2datasets.PotSplit) (->potSplit_) := TMP_4(MC2datasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = MC2datasets.PotSplit(25,0)

IRs:
REF_10(MC2datasets.PotSplit) -> potSplit_[1]
TMP_5(MC2datasets.PotSplit) = new PotSplit(25,0)
REF_10(MC2datasets.PotSplit) (->potSplit_) := TMP_5(MC2datasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = MC2datasets.PotSplit(20,20)

IRs:
REF_12(MC2datasets.PotSplit) -> potSplit_[2]
TMP_6(MC2datasets.PotSplit) = new PotSplit(20,20)
REF_12(MC2datasets.PotSplit) (->potSplit_) := TMP_6(MC2datasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = MC2datasets.PotSplit(30,10)

IRs:
REF_14(MC2datasets.PotSplit) -> potSplit_[3]
TMP_7(MC2datasets.PotSplit) = new PotSplit(30,10)
REF_14(MC2datasets.PotSplit) (->potSplit_) := TMP_7(MC2datasets.PotSplit)"];
}
// Function: 3228.sol-MC2long-core(uint256,uint256,uint256,uint256,uint256,MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_325(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_326(MC2datasets.PlayerRounds) -> REF_325[_rID]
REF_327(uint256) -> REF_326.keys
TMP_189(bool) = REF_327 == 0
CONDITION TMP_189"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_190(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.managePlayer(uint256,MC2datasets.EventReturns)(_pID,_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_190(MC2datasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_328(MC2datasets.Round) -> round_[_rID]
REF_329(uint256) -> REF_328.eth
TMP_191(bool) = REF_329 < 100000000000000000000
REF_330(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_331(MC2datasets.PlayerRounds) -> REF_330[_rID]
REF_332(uint256) -> REF_331.eth
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_332', '_eth'] 
TMP_193(bool) = TMP_192 > 1000000000000000000
TMP_194(bool) = TMP_191 && TMP_193
CONDITION TMP_194"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_335(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_336(MC2datasets.PlayerRounds) -> REF_335[_rID]
REF_337(uint256) -> REF_336.eth
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_337'] 
_availableLimit(uint256) := TMP_195(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_196(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_339(MC2datasets.Player) -> plyr_[_pID]
REF_340(uint256) -> REF_339.gen
REF_341(MC2datasets.Player) -> plyr_[_pID]
REF_342(uint256) -> REF_341.gen
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_342', '_refund'] 
REF_340(uint256) (->plyr_) := TMP_197(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_198(bool) = _eth > 1000000000
CONDITION TMP_198"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_344(MC2datasets.Round) -> round_[_rID]
REF_345(uint256) -> REF_344.eth
TMP_199(uint256) = LIBRARY_CALL, dest:MC2KeysCalcLong, function:MC2KeysCalcLong.keysRec(uint256,uint256), arguments:['REF_345', '_eth'] 
_keys(uint256) := TMP_199(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_200(bool) = _keys >= 1000000000000000000
CONDITION TMP_200"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, MC2long.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_347(MC2datasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.plyr
TMP_202(bool) = REF_348 != _pID
CONDITION TMP_202"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_349(MC2datasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.plyr
REF_350(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_351(MC2datasets.Round) -> round_[_rID]
REF_352(uint256) -> REF_351.team
TMP_203(bool) = REF_352 != _team
CONDITION TMP_203"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_353(MC2datasets.Round) -> round_[_rID]
REF_354(uint256) -> REF_353.team
REF_354(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_355(uint256) -> _eventData_.compressedData
REF_356(uint256) -> _eventData_.compressedData
TMP_204(uint256) = REF_356 + 100
REF_355(uint256) (->_eventData_) := TMP_204(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_205(bool) = _eth >= 100000000000000000
CONDITION TMP_205"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_206(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_207(bool) = INTERNAL_CALL, MC2long.airdrop()()
TMP_208(bool) = TMP_207 == True
CONDITION TMP_208"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_209(bool) = _eth >= 10000000000000000000
CONDITION TMP_209"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_211(uint256) = TMP_210 / 100
_prize(uint256) := TMP_211(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_358(MC2datasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.win
REF_360(MC2datasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.win
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_361', '_prize'] 
REF_359(uint256) (->plyr_) := TMP_212(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_213(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_364(uint256) -> _eventData_.compressedData
REF_364(-> _eventData_) = REF_364 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_214(bool) = _eth >= 1000000000000000000
TMP_215(bool) = _eth < 10000000000000000000
TMP_216(bool) = TMP_214 && TMP_215
CONDITION TMP_216"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_218(uint256) = TMP_217 / 100
_prize(uint256) := TMP_218(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_366(MC2datasets.Player) -> plyr_[_pID]
REF_367(uint256) -> REF_366.win
REF_368(MC2datasets.Player) -> plyr_[_pID]
REF_369(uint256) -> REF_368.win
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_369', '_prize'] 
REF_367(uint256) (->plyr_) := TMP_219(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_220(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_372(uint256) -> _eventData_.compressedData
REF_372(-> _eventData_) = REF_372 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_221(bool) = _eth >= 100000000000000000
TMP_222(bool) = _eth < 1000000000000000000
TMP_223(bool) = TMP_221 && TMP_222
CONDITION TMP_223"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_225(uint256) = TMP_224 / 100
_prize(uint256) := TMP_225(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_374(MC2datasets.Player) -> plyr_[_pID]
REF_375(uint256) -> REF_374.win
REF_376(MC2datasets.Player) -> plyr_[_pID]
REF_377(uint256) -> REF_376.win
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_377', '_prize'] 
REF_375(uint256) (->plyr_) := TMP_226(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_227(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_380(uint256) -> _eventData_.compressedData
REF_380(-> _eventData_) = REF_380 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_381(uint256) -> _eventData_.compressedData
REF_381(-> _eventData_) = REF_381 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_382(uint256) -> _eventData_.compressedData
TMP_228(uint256) = _prize * 1000000000000000000000000000000000
REF_382(-> _eventData_) = REF_382 + TMP_228"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_383(uint256) -> _eventData_.compressedData
REF_384(uint256) -> _eventData_.compressedData
TMP_229(uint256) = airDropTracker_ * 1000
TMP_230(uint256) = REF_384 + TMP_229
REF_383(uint256) (->_eventData_) := TMP_230(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_385(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_386(MC2datasets.PlayerRounds) -> REF_385[_rID]
REF_387(uint256) -> REF_386.keys
REF_389(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_390(MC2datasets.PlayerRounds) -> REF_389[_rID]
REF_391(uint256) -> REF_390.keys
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_391'] 
REF_387(uint256) (->plyrRnds_) := TMP_231(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_392(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_393(MC2datasets.PlayerRounds) -> REF_392[_rID]
REF_394(uint256) -> REF_393.eth
REF_396(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_397(MC2datasets.PlayerRounds) -> REF_396[_rID]
REF_398(uint256) -> REF_397.eth
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_398'] 
REF_394(uint256) (->plyrRnds_) := TMP_232(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_399(MC2datasets.Round) -> round_[_rID]
REF_400(uint256) -> REF_399.keys
REF_402(MC2datasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.keys
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_403'] 
REF_400(uint256) (->round_) := TMP_233(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_404(MC2datasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.eth
REF_407(MC2datasets.Round) -> round_[_rID]
REF_408(uint256) -> REF_407.eth
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_408'] 
REF_405(uint256) (->round_) := TMP_234(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_409(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_410(uint256) -> REF_409[_team]
REF_412(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_413(uint256) -> REF_412[_team]
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_413'] 
REF_410(uint256) (->rndTmEth_) := TMP_235(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_236(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.distributeExternal(uint256,uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_236(MC2datasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_237(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.distributeInternal(uint256,uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_237(MC2datasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, MC2long.endTx(uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 3228.sol-MC2long-determinePID(MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_473(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_473(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_276(bool) = _pID == 0
CONDITION TMP_276"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_277(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_277(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_278(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_278(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_279(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_279(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_477(uint256) -> pIDxAddr_[msg.sender]
REF_477(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_478(MC2datasets.Player) -> plyr_[_pID]
REF_479(address) -> REF_478.addr
REF_479(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_280(bool) = _name != 
CONDITION TMP_280"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_480(uint256) -> pIDxName_[_name]
REF_480(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_481(MC2datasets.Player) -> plyr_[_pID]
REF_482(bytes32) -> REF_481.name
REF_482(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_483(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_484(bool) -> REF_483[_name]
REF_484(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_281(bool) = _laff != 0
TMP_282(bool) = _laff != _pID
TMP_283(bool) = TMP_281 && TMP_282
CONDITION TMP_283"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_485(MC2datasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.laff
REF_486(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_487(uint256) -> _eventData_.compressedData
REF_488(uint256) -> _eventData_.compressedData
TMP_284(uint256) = REF_488 + 1
REF_487(uint256) (->_eventData_) := TMP_284(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3228.sol-MC2long-distributeExternal(uint256,uint256,uint256,uint256,uint256,MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_368(uint256) = _eth / 50
_com(uint256) := TMP_368(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(Jekyll_Island_Inc).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_369 = CONVERT Jekyll_Island_Inc to address
TMP_371(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_372 = CONVERT TMP_371 to bytes4
TMP_373(bool) = LOW_LEVEL_CALL, dest:TMP_369, function:call, arguments:['TMP_372'] value:_com 
TMP_374 = UnaryType.BANG TMP_373 
CONDITION TMP_374"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_up = _com

IRs:
_up(uint256) := _com(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_long = _eth / 100

IRs:
TMP_375(uint256) = _eth / 100
_long(uint256) := TMP_375(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
otherMC2_.potSwap.value(_long)()

IRs:
HIGH_LEVEL_CALL, dest:otherMC2_(otherMC2), function:potSwap, arguments:[] value:_long "];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_378(uint256) = _eth / 10
_aff(uint256) := TMP_378(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_379(bool) = _affID != _pID
REF_602(MC2datasets.Player) -> plyr_[_affID]
REF_603(bytes32) -> REF_602.name
TMP_380(bool) = REF_603 != 
TMP_381(bool) = TMP_379 && TMP_380
CONDITION TMP_381"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_604(MC2datasets.Player) -> plyr_[_affID]
REF_605(uint256) -> REF_604.aff
REF_607(MC2datasets.Player) -> plyr_[_affID]
REF_608(uint256) -> REF_607.aff
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_608'] 
REF_605(uint256) (->plyr_) := TMP_382(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
MC2events.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_610(MC2datasets.Player) -> plyr_[_affID]
REF_611(address) -> REF_610.addr
REF_612(MC2datasets.Player) -> plyr_[_affID]
REF_613(bytes32) -> REF_612.name
Emit onAffiliatePayout(_affID,REF_611,REF_613,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_up = _aff

IRs:
_up(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_up = _up.add((_eth.mul(fees_[_team].up)) / (100))

IRs:
REF_616(MC2datasets.TeamFee) -> fees_[_team]
REF_617(uint256) -> REF_616.up
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_617'] 
TMP_385(uint256) = TMP_384 / 100
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_up', 'TMP_385'] 
_up(uint256) := TMP_386(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_up > 0

IRs:
TMP_387(bool) = _up > 0
CONDITION TMP_387"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Divies.deposit.value(_up)()

IRs:
HIGH_LEVEL_CALL, dest:Divies(DiviesInterface), function:deposit, arguments:[] value:_up "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.UPAmount = _up.add(_eventData_.UPAmount)

IRs:
REF_620(uint256) -> _eventData_.UPAmount
REF_622(uint256) -> _eventData_.UPAmount
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_up', 'REF_622'] 
REF_620(uint256) (->_eventData_) := TMP_390(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3228.sol-MC2long-distributeInternal(uint256,uint256,uint256,uint256,uint256,MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_630(MC2datasets.TeamFee) -> fees_[_team]
REF_631(uint256) -> REF_630.gen
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_631'] 
TMP_395(uint256) = TMP_394 / 100
_gen(uint256) := TMP_395(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_396(uint256) = _eth / 100
_air(uint256) := TMP_396(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_397(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].up)) / 100))

IRs:
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_399(uint256) = TMP_398 / 100
REF_637(MC2datasets.TeamFee) -> fees_[_team]
REF_638(uint256) -> REF_637.up
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_638'] 
TMP_401(uint256) = TMP_400 / 100
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_399', 'TMP_401'] 
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_402'] 
_eth(uint256) := TMP_403(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_404(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_405(uint256) = INTERNAL_CALL, MC2long.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_405(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_406(bool) = _dust > 0
CONDITION TMP_406"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_407(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_641(MC2datasets.Round) -> round_[_rID]
REF_642(uint256) -> REF_641.pot
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_645(MC2datasets.Round) -> round_[_rID]
REF_646(uint256) -> REF_645.pot
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_408', 'REF_646'] 
REF_642(uint256) (->round_) := TMP_409(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_647(uint256) -> _eventData_.genAmount
REF_649(uint256) -> _eventData_.genAmount
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_649'] 
REF_647(uint256) (->_eventData_) := TMP_410(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_650(uint256) -> _eventData_.potAmount
REF_650(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3228.sol-MC2long-endRound(MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_497(MC2datasets.Round) -> round_[_rID]
REF_498(uint256) -> REF_497.plyr
_winPID(uint256) := REF_498(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_499(MC2datasets.Round) -> round_[_rID]
REF_500(uint256) -> REF_499.team
_winTID(uint256) := REF_500(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_501(MC2datasets.Round) -> round_[_rID]
REF_502(uint256) -> REF_501.pot
_pot(uint256) := REF_502(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_292(uint256) = TMP_291 / 100
_win(uint256) := TMP_292(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_293(uint256) = _pot / 50
_com(uint256) := TMP_293(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_505(MC2datasets.PotSplit) -> potSplit_[_winTID]
REF_506(uint256) -> REF_505.gen
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_506'] 
TMP_295(uint256) = TMP_294 / 100
_gen(uint256) := TMP_295(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_up = (_pot.mul(potSplit_[_winTID].up)) / 100

IRs:
REF_508(MC2datasets.PotSplit) -> potSplit_[_winTID]
REF_509(uint256) -> REF_508.up
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_509'] 
TMP_297(uint256) = TMP_296 / 100
_up(uint256) := TMP_297(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_up)

IRs:
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_298', '_com'] 
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_299', '_gen'] 
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_300', '_up'] 
_res(uint256) := TMP_301(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_515(MC2datasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.keys
TMP_303(uint256) = TMP_302 / REF_516
_ppt(uint256) := TMP_303(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_519(MC2datasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.keys
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_520'] 
TMP_305(uint256) = TMP_304 / 1000000000000000000
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_305'] 
_dust(uint256) := TMP_306(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_307(bool) = _dust > 0
CONDITION TMP_307"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_308(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_309(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_523(MC2datasets.Player) -> plyr_[_winPID]
REF_524(uint256) -> REF_523.win
REF_526(MC2datasets.Player) -> plyr_[_winPID]
REF_527(uint256) -> REF_526.win
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_527'] 
REF_524(uint256) (->plyr_) := TMP_310(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
! address(Jekyll_Island_Inc).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_311 = CONVERT Jekyll_Island_Inc to address
TMP_313(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_314 = CONVERT TMP_313 to bytes4
TMP_315(bool) = LOW_LEVEL_CALL, dest:TMP_311, function:call, arguments:['TMP_314'] value:_com 
TMP_316 = UnaryType.BANG TMP_315 
CONDITION TMP_316"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_up = _up.add(_com)

IRs:
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_up', '_com'] 
_up(uint256) := TMP_317(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_531(MC2datasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.mask
REF_534(MC2datasets.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.mask
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_535'] 
REF_532(uint256) (->round_) := TMP_318(uint256)"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_up > 0

IRs:
TMP_319(bool) = _up > 0
CONDITION TMP_319"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Divies.deposit.value(_up)()

IRs:
HIGH_LEVEL_CALL, dest:Divies(DiviesInterface), function:deposit, arguments:[] value:_up "];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_538(uint256) -> _eventData_.compressedData
REF_539(uint256) -> _eventData_.compressedData
REF_540(MC2datasets.Round) -> round_[_rID]
REF_541(uint256) -> REF_540.end
TMP_322(uint256) = REF_541 * 1000000
TMP_323(uint256) = REF_539 + TMP_322
REF_538(uint256) (->_eventData_) := TMP_323(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_542(uint256) -> _eventData_.compressedIDs
REF_543(uint256) -> _eventData_.compressedIDs
TMP_324(uint256) = _winPID * 100000000000000000000000000
TMP_325(uint256) = REF_543 + TMP_324
TMP_326(uint256) = _winTID * 100000000000000000
TMP_327(uint256) = TMP_325 + TMP_326
REF_542(uint256) (->_eventData_) := TMP_327(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_544(address) -> _eventData_.winnerAddr
REF_545(MC2datasets.Player) -> plyr_[_winPID]
REF_546(address) -> REF_545.addr
REF_544(address) (->_eventData_) := REF_546(address)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_547(bytes32) -> _eventData_.winnerName
REF_548(MC2datasets.Player) -> plyr_[_winPID]
REF_549(bytes32) -> REF_548.name
REF_547(bytes32) (->_eventData_) := REF_549(bytes32)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_550(uint256) -> _eventData_.amountWon
REF_550(uint256) (->_eventData_) := _win(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_551(uint256) -> _eventData_.genAmount
REF_551(uint256) (->_eventData_) := _gen(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_eventData_.UPAmount = _up

IRs:
REF_552(uint256) -> _eventData_.UPAmount
REF_552(uint256) (->_eventData_) := _up(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_553(uint256) -> _eventData_.newPot
REF_553(uint256) (->_eventData_) := _res(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
rID_ ++

IRs:
TMP_328(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_rID ++

IRs:
TMP_329(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_554(MC2datasets.Round) -> round_[_rID]
REF_555(uint256) -> REF_554.strt
REF_555(uint256) (->round_) := now(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_556(MC2datasets.Round) -> round_[_rID]
REF_557(uint256) -> REF_556.end
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_330', 'rndGap_'] 
REF_557(uint256) (->round_) := TMP_331(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_560(MC2datasets.Round) -> round_[_rID]
REF_561(uint256) -> REF_560.pot
REF_561(uint256) (->round_) := _res(uint256)"];
37->38;
38[label="Node Type: RETURN 38

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3228.sol-MC2long-endTx(uint256,uint256,uint256,uint256,MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_691(uint256) -> _eventData_.compressedData
REF_692(uint256) -> _eventData_.compressedData
TMP_427(uint256) = now * 1000000000000000000
TMP_428(uint256) = REF_692 + TMP_427
TMP_429(uint256) = _team * 100000000000000000000000000000
TMP_430(uint256) = TMP_428 + TMP_429
REF_691(uint256) (->_eventData_) := TMP_430(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_693(uint256) -> _eventData_.compressedIDs
REF_694(uint256) -> _eventData_.compressedIDs
TMP_431(uint256) = REF_694 + _pID
TMP_432(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_433(uint256) = TMP_431 + TMP_432
REF_693(uint256) (->_eventData_) := TMP_433(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MC2events.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.UPAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_696(uint256) -> _eventData_.compressedData
REF_697(uint256) -> _eventData_.compressedIDs
REF_698(MC2datasets.Player) -> plyr_[_pID]
REF_699(bytes32) -> REF_698.name
REF_700(address) -> _eventData_.winnerAddr
REF_701(bytes32) -> _eventData_.winnerName
REF_702(uint256) -> _eventData_.amountWon
REF_703(uint256) -> _eventData_.newPot
REF_704(uint256) -> _eventData_.UPAmount
REF_705(uint256) -> _eventData_.genAmount
REF_706(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_696,REF_697,REF_699,msg.sender,_eth,_keys,REF_700,REF_701,REF_702,REF_703,REF_704,REF_705,REF_706,airDropPot_)"];
}
// Function: 3228.sol-MC2long-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.determinePID(MC2datasets.EventReturns)(_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_8(MC2datasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(MC2datasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, MC2long.buyCore(uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, MC2long.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 3228.sol-MC2long-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_129(MC2datasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.strt
TMP_103(uint256) = REF_130 + rndGap_
TMP_104(bool) = _now > TMP_103
REF_131(MC2datasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_105(bool) = _now <= REF_132
REF_133(MC2datasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.end
TMP_106(bool) = _now > REF_134
REF_135(MC2datasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.plyr
TMP_107(bool) = REF_136 == 0
TMP_108(bool) = TMP_106 && TMP_107
TMP_109(bool) = TMP_105 || TMP_108
TMP_110(bool) = TMP_104 && TMP_109
CONDITION TMP_110"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_137(MC2datasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.keys
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_138', '1000000000000000000'] 
TMP_112(uint256) = LIBRARY_CALL, dest:MC2KeysCalcLong, function:MC2KeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_111', '1000000000000000000'] 
RETURN TMP_112"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3228.sol-MC2long-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_211(MC2datasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.ico
REF_213(MC2datasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.keys
REF_215(MC2datasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.end
REF_217(MC2datasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.strt
REF_219(MC2datasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.pot
REF_221(MC2datasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.team
REF_223(MC2datasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.plyr
TMP_143(uint256) = REF_224 * 10
TMP_144(uint256) = REF_222 + TMP_143
REF_225(MC2datasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.plyr
REF_227(MC2datasets.Player) -> plyr_[REF_226]
REF_228(address) -> REF_227.addr
REF_229(MC2datasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.plyr
REF_231(MC2datasets.Player) -> plyr_[REF_230]
REF_232(bytes32) -> REF_231.name
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[0]
REF_235(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_236(uint256) -> REF_235[1]
REF_237(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_238(uint256) -> REF_237[2]
REF_239(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_240(uint256) -> REF_239[3]
TMP_145(uint256) = airDropPot_ * 1000
TMP_146(uint256) = airDropTracker_ + TMP_145
RETURN REF_212,_rID,REF_214,REF_216,REF_218,REF_220,TMP_144,REF_228,REF_232,REF_234,REF_236,REF_238,REF_240,TMP_146"];
}
// Function: 3228.sol-MC2long-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_147 = CONVERT 0 to address
TMP_148(bool) = _addr == TMP_147
CONDITION TMP_148"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_149(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_241(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_241(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_242(MC2datasets.Player) -> plyr_[_pID]
REF_243(bytes32) -> REF_242.name
REF_244(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_245(MC2datasets.PlayerRounds) -> REF_244[_rID]
REF_246(uint256) -> REF_245.keys
REF_247(MC2datasets.Player) -> plyr_[_pID]
REF_248(uint256) -> REF_247.win
REF_249(MC2datasets.Player) -> plyr_[_pID]
REF_250(uint256) -> REF_249.gen
REF_252(MC2datasets.Player) -> plyr_[_pID]
REF_253(uint256) -> REF_252.lrnd
TMP_150(uint256) = INTERNAL_CALL, MC2long.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_253)
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_250', 'TMP_150'] 
REF_254(MC2datasets.Player) -> plyr_[_pID]
REF_255(uint256) -> REF_254.aff
REF_256(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_257(MC2datasets.PlayerRounds) -> REF_256[_rID]
REF_258(uint256) -> REF_257.eth
RETURN _pID,REF_243,REF_246,REF_248,TMP_151,REF_255,REF_258"];
}
// Function: 3228.sol-MC2long-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_151(MC2datasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_119(bool) = now > REF_152
REF_153(MC2datasets.Round) -> round_[_rID]
REF_154(bool) -> REF_153.ended
TMP_120(bool) = REF_154 == False
TMP_121(bool) = TMP_119 && TMP_120
REF_155(MC2datasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.plyr
TMP_122(bool) = REF_156 != 0
TMP_123(bool) = TMP_121 && TMP_122
CONDITION TMP_123"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_157(MC2datasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.plyr
TMP_124(bool) = REF_158 == _pID
CONDITION TMP_124"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_159(MC2datasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.win
REF_162(MC2datasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.pot
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_163', '48'] 
TMP_126(uint256) = TMP_125 / 100
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_126'] 
REF_165(MC2datasets.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.gen
TMP_128(uint256) = INTERNAL_CALL, MC2long.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_169(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_170(MC2datasets.PlayerRounds) -> REF_169[_rID]
REF_171(uint256) -> REF_170.mask
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_128', 'REF_171'] 
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_166', 'TMP_129'] 
REF_172(MC2datasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.aff
RETURN TMP_127,TMP_130,REF_173"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_174(MC2datasets.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.win
REF_176(MC2datasets.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.gen
TMP_131(uint256) = INTERNAL_CALL, MC2long.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_180(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_181(MC2datasets.PlayerRounds) -> REF_180[_rID]
REF_182(uint256) -> REF_181.mask
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_131', 'REF_182'] 
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_177', 'TMP_132'] 
REF_183(MC2datasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.aff
RETURN REF_175,TMP_133,REF_184"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_185(MC2datasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.win
REF_187(MC2datasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.gen
REF_190(MC2datasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.lrnd
TMP_134(uint256) = INTERNAL_CALL, MC2long.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_191)
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', 'TMP_134'] 
REF_192(MC2datasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.aff
RETURN REF_186,TMP_135,REF_193"];
}
// Function: 3228.sol-MC2long-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_194(MC2datasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.mask
REF_197(MC2datasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.pot
REF_200(MC2datasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.team
REF_202(MC2datasets.PotSplit) -> potSplit_[REF_201]
REF_203(uint256) -> REF_202.gen
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_198', 'REF_203'] 
TMP_137(uint256) = TMP_136 / 100
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_137', '1000000000000000000'] 
REF_205(MC2datasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.keys
TMP_139(uint256) = TMP_138 / REF_206
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_195', 'TMP_139'] 
REF_208(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_209(MC2datasets.PlayerRounds) -> REF_208[_rID]
REF_210(uint256) -> REF_209.keys
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_140', 'REF_210'] 
TMP_142(uint256) = TMP_141 / 1000000000000000000
RETURN TMP_142"];
}
// Function: 3228.sol-MC2long-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_141(MC2datasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_113(bool) = _now < REF_142
CONDITION TMP_113"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_143(MC2datasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.strt
TMP_114(uint256) = REF_144 + rndGap_
TMP_115(bool) = _now > TMP_114
CONDITION TMP_115"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_145(MC2datasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_146', '_now'] 
RETURN TMP_116"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_148(MC2datasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.strt
TMP_117(uint256) = REF_149 + rndGap_
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', '_now'] 
RETURN TMP_118"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3228.sol-MC2long-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_436(MC2datasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.strt
TMP_252(uint256) = REF_437 + rndGap_
TMP_253(bool) = _now > TMP_252
REF_438(MC2datasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.end
TMP_254(bool) = _now <= REF_439
REF_440(MC2datasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.end
TMP_255(bool) = _now > REF_441
REF_442(MC2datasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.plyr
TMP_256(bool) = REF_443 == 0
TMP_257(bool) = TMP_255 && TMP_256
TMP_258(bool) = TMP_254 || TMP_257
TMP_259(bool) = TMP_253 && TMP_258
CONDITION TMP_259"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_444(MC2datasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.keys
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_445', '_keys'] 
TMP_261(uint256) = LIBRARY_CALL, dest:MC2KeysCalcLong, function:MC2KeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_260', '_keys'] 
RETURN TMP_261"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_262(uint256) = LIBRARY_CALL, dest:MC2KeysCalcLong, function:MC2KeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_262"];
}
// Function: 3228.sol-MC2long-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_476(bool) = activated_ == True
TMP_477(None) = SOLIDITY_CALL require(bool,string)(TMP_476,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3228.sol-MC2long-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_478(bool) = _codeLength == 0
TMP_479(None) = SOLIDITY_CALL require(bool,string)(TMP_478,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3228.sol-MC2long-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_480(bool) = _eth >= 1000000000
TMP_481(None) = SOLIDITY_CALL require(bool,string)(TMP_480,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_482(bool) = _eth <= 100000000000000000000000
TMP_483(None) = SOLIDITY_CALL require(bool,string)(TMP_482,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3228.sol-MC2long-managePlayer(uint256,MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_489(MC2datasets.Player) -> plyr_[_pID]
REF_490(uint256) -> REF_489.lrnd
TMP_288(bool) = REF_490 != 0
CONDITION TMP_288"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_491(MC2datasets.Player) -> plyr_[_pID]
REF_492(uint256) -> REF_491.lrnd
INTERNAL_CALL, MC2long.updateGenVault(uint256,uint256)(_pID,REF_492)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_493(MC2datasets.Player) -> plyr_[_pID]
REF_494(uint256) -> REF_493.lrnd
REF_494(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_495(uint256) -> _eventData_.compressedData
REF_496(uint256) -> _eventData_.compressedData
TMP_290(uint256) = REF_496 + 10
REF_495(uint256) (->_eventData_) := TMP_290(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3228.sol-MC2long-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_391(uint256) = rID_ + 1
_rID(uint256) := TMP_391(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_623(MC2datasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.pot
REF_625(MC2datasets.Round) -> round_[_rID]
REF_626(uint256) -> REF_625.pot
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_626', 'msg.value'] 
REF_624(uint256) (->round_) := TMP_392(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MC2events.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 3228.sol-MC2long-reLoadCore(uint256,uint256,uint256,uint256,MC2datasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_293(MC2datasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.strt
TMP_170(uint256) = REF_294 + rndGap_
TMP_171(bool) = _now > TMP_170
REF_295(MC2datasets.Round) -> round_[_rID]
REF_296(uint256) -> REF_295.end
TMP_172(bool) = _now <= REF_296
REF_297(MC2datasets.Round) -> round_[_rID]
REF_298(uint256) -> REF_297.end
TMP_173(bool) = _now > REF_298
REF_299(MC2datasets.Round) -> round_[_rID]
REF_300(uint256) -> REF_299.plyr
TMP_174(bool) = REF_300 == 0
TMP_175(bool) = TMP_173 && TMP_174
TMP_176(bool) = TMP_172 || TMP_175
TMP_177(bool) = TMP_171 && TMP_176
CONDITION TMP_177"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_301(MC2datasets.Player) -> plyr_[_pID]
REF_302(uint256) -> REF_301.gen
TMP_178(uint256) = INTERNAL_CALL, MC2long.withdrawEarnings(uint256)(_pID)
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_178', '_eth'] 
REF_302(uint256) (->plyr_) := TMP_179(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, MC2long.core(uint256,uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_304(MC2datasets.Round) -> round_[_rID]
REF_305(uint256) -> REF_304.end
TMP_181(bool) = _now > REF_305
REF_306(MC2datasets.Round) -> round_[_rID]
REF_307(bool) -> REF_306.ended
TMP_182(bool) = REF_307 == False
TMP_183(bool) = TMP_181 && TMP_182
CONDITION TMP_183"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_308(MC2datasets.Round) -> round_[_rID]
REF_309(bool) -> REF_308.ended
REF_309(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_184(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.endRound(MC2datasets.EventReturns)(_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_184(MC2datasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_310(uint256) -> _eventData_.compressedData
REF_311(uint256) -> _eventData_.compressedData
TMP_185(uint256) = _now * 1000000000000000000
TMP_186(uint256) = REF_311 + TMP_185
REF_310(uint256) (->_eventData_) := TMP_186(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_312(uint256) -> _eventData_.compressedIDs
REF_313(uint256) -> _eventData_.compressedIDs
TMP_187(uint256) = REF_313 + _pID
REF_312(uint256) (->_eventData_) := TMP_187(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
MC2events.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.UPAmount,_eventData_.genAmount)

IRs:
REF_315(MC2datasets.Player) -> plyr_[_pID]
REF_316(bytes32) -> REF_315.name
REF_317(uint256) -> _eventData_.compressedData
REF_318(uint256) -> _eventData_.compressedIDs
REF_319(address) -> _eventData_.winnerAddr
REF_320(bytes32) -> _eventData_.winnerName
REF_321(uint256) -> _eventData_.amountWon
REF_322(uint256) -> _eventData_.newPot
REF_323(uint256) -> _eventData_.UPAmount
REF_324(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_316,REF_317,REF_318,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3228.sol-MC2long-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(MC2datasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(MC2datasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_57(bool) = _affID != REF_56
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(MC2datasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, MC2long.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, MC2long.reLoadCore(uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, MC2long.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3228.sol-MC2long-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(MC2datasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(MC2datasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_47(bool) = _affCode != REF_48
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(MC2datasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, MC2long.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, MC2long.reLoadCore(uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, MC2long.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 3228.sol-MC2long-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_60(MC2datasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_64(bool) = _affCode == REF_61
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(MC2datasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(MC2datasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_66(bool) = _affID != REF_66
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(MC2datasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, MC2long.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, MC2long.reLoadCore(uint256,uint256,uint256,uint256,MC2datasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, MC2long.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3228.sol-MC2long-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_263 = CONVERT PlayerBook to address
TMP_264(bool) = msg.sender == TMP_263
TMP_265(None) = SOLIDITY_CALL require(bool,string)(TMP_264,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_449(uint256) -> pIDxAddr_[_addr]
TMP_266(bool) = REF_449 != _pID
CONDITION TMP_266"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_450(uint256) -> pIDxAddr_[_addr]
REF_450(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_451(uint256) -> pIDxName_[_name]
TMP_267(bool) = REF_451 != _pID
CONDITION TMP_267"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_452(uint256) -> pIDxName_[_name]
REF_452(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_453(MC2datasets.Player) -> plyr_[_pID]
REF_454(address) -> REF_453.addr
TMP_268(bool) = REF_454 != _addr
CONDITION TMP_268"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_455(MC2datasets.Player) -> plyr_[_pID]
REF_456(address) -> REF_455.addr
REF_456(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_457(MC2datasets.Player) -> plyr_[_pID]
REF_458(bytes32) -> REF_457.name
TMP_269(bool) = REF_458 != _name
CONDITION TMP_269"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_459(MC2datasets.Player) -> plyr_[_pID]
REF_460(bytes32) -> REF_459.name
REF_460(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_461(MC2datasets.Player) -> plyr_[_pID]
REF_462(uint256) -> REF_461.laff
TMP_270(bool) = REF_462 != _laff
CONDITION TMP_270"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_463(MC2datasets.Player) -> plyr_[_pID]
REF_464(uint256) -> REF_463.laff
REF_464(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_465(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_466(bool) -> REF_465[_name]
TMP_271(bool) = REF_466 == False
CONDITION TMP_271"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_467(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_468(bool) -> REF_467[_name]
REF_468(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3228.sol-MC2long-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_272 = CONVERT PlayerBook to address
TMP_273(bool) = msg.sender == TMP_272
TMP_274(None) = SOLIDITY_CALL require(bool,string)(TMP_273,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_469(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_470(bool) -> REF_469[_name]
TMP_275(bool) = REF_470 == False
CONDITION TMP_275"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_471(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_472(bool) -> REF_471[_name]
REF_472(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3228.sol-MC2long-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_91(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_91(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_105(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_105(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MC2events.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_107(MC2datasets.Player) -> plyr_[_affID]
REF_108(address) -> REF_107.addr
REF_109(MC2datasets.Player) -> plyr_[_affID]
REF_110(bytes32) -> REF_109.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_108,REF_110,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
9->1;
}
// Function: 3228.sol-MC2long-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_95(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_95(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_114(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_114(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MC2events.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_116(MC2datasets.Player) -> plyr_[_affID]
REF_117(address) -> REF_116.addr
REF_118(MC2datasets.Player) -> plyr_[_affID]
REF_119(bytes32) -> REF_118.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_117,REF_119,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
9->1;
}
// Function: 3228.sol-MC2long-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_99(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_99(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_123(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_123(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MC2events.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_125(MC2datasets.Player) -> plyr_[_affID]
REF_126(address) -> REF_125.addr
REF_127(MC2datasets.Player) -> plyr_[_affID]
REF_128(bytes32) -> REF_127.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_126,REF_128,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
9->1;
}
// Function: 3228.sol-MC2long-setOtherFomo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0x1d85A7C26952d4a7D940573eaE73f44D0D6Fa76D || msg.sender == 0x5724fc4Abb369C6F2339F784E5b42189f3d30180 || msg.sender == 0x6Be04d4ef139eE9fd08A32FdBFb7A532Fe9eD53F || msg.sender == 0x53E3E6444C416e2A981644706A8E5E9C13511cf7 || msg.sender == 0xEeF4f752D105fEaCB288bB7071F619A2E90a34aC,only team just can activate)

IRs:
TMP_455(bool) = msg.sender == 168541345371824726772828488014847947592128505709
TMP_456(bool) = msg.sender == 497507001614620288876246459399023901593130172800
TMP_457(bool) = TMP_455 || TMP_456
TMP_458(bool) = msg.sender == 615864113911307801829247010016284221951744857407
TMP_459(bool) = TMP_457 || TMP_458
TMP_460(bool) = msg.sender == 478928562204771448860190027386385405301151046903
TMP_461(bool) = TMP_459 || TMP_460
TMP_462(bool) = msg.sender == 1364202730200134289129775680643579005625936000172
TMP_463(bool) = TMP_461 || TMP_462
TMP_464(None) = SOLIDITY_CALL require(bool,string)(TMP_463,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(otherMC2_) == address(0),silly dev, you already did that)

IRs:
TMP_465 = CONVERT otherMC2_ to address
TMP_466 = CONVERT 0 to address
TMP_467(bool) = TMP_465 == TMP_466
TMP_468(None) = SOLIDITY_CALL require(bool,string)(TMP_467,silly dev, you already did that)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
otherMC2_ = otherMC2(_otherMC2)

IRs:
TMP_469 = CONVERT _otherMC2 to otherMC2
otherMC2_(otherMC2) := TMP_469(otherMC2)"];
}
// Function: 3228.sol-MC2long-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Divies = DiviesInterface(0x33F43Dd20855979f617a983dDBcb4C1C0FA89B2e)

IRs:
TMP_472 = CONVERT 296605296460274423025098856738137742577869822766 to DiviesInterface
Divies(DiviesInterface) := TMP_472(DiviesInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
Jekyll_Island_Inc = JIincForwarderInterface(0x609e4bb4deE240485Fa546D2bEA2EfAE583E72aC)

IRs:
TMP_473 = CONVERT 551593226708990738532689788664680157111113380524 to JIincForwarderInterface
Jekyll_Island_Inc(JIincForwarderInterface) := TMP_473(JIincForwarderInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PlayerBook = PlayerBookInterface(0xfEc91702792A45070AD7F4Bb07Ed678B863Bc722)

IRs:
TMP_474 = CONVERT 1454568109998357122736466021413760487510857467682 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_474(PlayerBookInterface)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
extSetting = MC2SettingInterface(0x8371c74F75274602Bdc4efaC209DA5B15E262E4e)

IRs:
TMP_475 = CONVERT 750415137568287940202934020109314462920745561678 to MC2SettingInterface
extSetting(MC2SettingInterface) := TMP_475(MC2SettingInterface)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
name = MC2 COSMOS

IRs:
name(string) := MC2 COSMOS(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
symbol = MC2

IRs:
symbol(string) := MC2(string)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
rndMax_ = 3600

IRs:
rndMax_(uint256) := 3600(uint256)"];
}
// Function: 3228.sol-MC2long-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = extSetting.getLongExtra()

IRs:
TMP_470(uint256) = HIGH_LEVEL_CALL, dest:extSetting(MC2SettingInterface), function:getLongExtra, arguments:[]  
rndExtra_(uint256) := TMP_470(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = extSetting.getLongGap()

IRs:
TMP_471(uint256) = HIGH_LEVEL_CALL, dest:extSetting(MC2SettingInterface), function:getLongGap, arguments:[]  
rndGap_(uint256) := TMP_471(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3228.sol-MC2long-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_332(uint256) = INTERNAL_CALL, MC2long.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_332(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_333(bool) = _earnings > 0
CONDITION TMP_333"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_562(MC2datasets.Player) -> plyr_[_pID]
REF_563(uint256) -> REF_562.gen
REF_565(MC2datasets.Player) -> plyr_[_pID]
REF_566(uint256) -> REF_565.gen
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_566'] 
REF_563(uint256) (->plyr_) := TMP_334(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_567(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_568(MC2datasets.PlayerRounds) -> REF_567[_rIDlast]
REF_569(uint256) -> REF_568.mask
REF_571(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_572(MC2datasets.PlayerRounds) -> REF_571[_rIDlast]
REF_573(uint256) -> REF_572.mask
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_573'] 
REF_569(uint256) (->plyrRnds_) := TMP_335(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3228.sol-MC2long-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_652(MC2datasets.Round) -> round_[_rID]
REF_653(uint256) -> REF_652.keys
TMP_412(uint256) = TMP_411 / REF_653
_ppt(uint256) := TMP_412(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_654(MC2datasets.Round) -> round_[_rID]
REF_655(uint256) -> REF_654.mask
REF_657(MC2datasets.Round) -> round_[_rID]
REF_658(uint256) -> REF_657.mask
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_658'] 
REF_655(uint256) (->round_) := TMP_413(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_415(uint256) = TMP_414 / 1000000000000000000
_pearn(uint256) := TMP_415(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_660(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_661(MC2datasets.PlayerRounds) -> REF_660[_rID]
REF_662(uint256) -> REF_661.mask
REF_663(MC2datasets.Round) -> round_[_rID]
REF_664(uint256) -> REF_663.mask
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_664', '_keys'] 
TMP_417(uint256) = TMP_416 / 1000000000000000000
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_417', '_pearn'] 
REF_668(mapping(uint256 => MC2datasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_669(MC2datasets.PlayerRounds) -> REF_668[_rID]
REF_670(uint256) -> REF_669.mask
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_418', 'REF_670'] 
REF_662(uint256) (->plyrRnds_) := TMP_419(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_673(MC2datasets.Round) -> round_[_rID]
REF_674(uint256) -> REF_673.keys
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_674'] 
TMP_421(uint256) = TMP_420 / 1000000000000000000
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_421'] 
RETURN TMP_422"];
}
// Function: 3228.sol-MC2long-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_574(MC2datasets.Round) -> round_[_rID]
REF_575(uint256) -> REF_574.end
TMP_336(bool) = _now > REF_575
REF_576(MC2datasets.Round) -> round_[_rID]
REF_577(uint256) -> REF_576.plyr
TMP_337(bool) = REF_577 == 0
TMP_338(bool) = TMP_336 && TMP_337
CONDITION TMP_338"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_339(uint256) = _keys / 1000000000000000000
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_339', 'rndInc_'] 
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_340', '_now'] 
_newTime(uint256) := TMP_341(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_342(uint256) = _keys / 1000000000000000000
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_342', 'rndInc_'] 
REF_582(MC2datasets.Round) -> round_[_rID]
REF_583(uint256) -> REF_582.end
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_343', 'REF_583'] 
_newTime(uint256) := TMP_344(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_346(bool) = _newTime < TMP_345
CONDITION TMP_346"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_585(MC2datasets.Round) -> round_[_rID]
REF_586(uint256) -> REF_585.end
REF_586(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_587(MC2datasets.Round) -> round_[_rID]
REF_588(uint256) -> REF_587.end
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_588(uint256) (->round_) := TMP_347(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3228.sol-MC2long-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_285(bool) = _team < 0
TMP_286(bool) = _team > 3
TMP_287(bool) = TMP_285 || TMP_286
CONDITION TMP_287"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3228.sol-MC2long-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(MC2datasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_72(bool) = _now > REF_71
REF_72(MC2datasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_73(bool) = REF_73 == False
TMP_74(bool) = TMP_72 && TMP_73
REF_74(MC2datasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_75(bool) = REF_75 != 0
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(MC2datasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_77(MC2datasets.EventReturns) = INTERNAL_CALL, MC2long.endRound(MC2datasets.EventReturns)(_eventData_)
_eventData_(MC2datasets.EventReturns) := TMP_77(MC2datasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_78(uint256) = INTERNAL_CALL, MC2long.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_78(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_79(bool) = _eth > 0
CONDITION TMP_79"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_78(MC2datasets.Player) -> plyr_[_pID]
REF_79(address) -> REF_78.addr
Transfer dest:REF_79 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_81(uint256) -> _eventData_.compressedData
REF_82(uint256) -> _eventData_.compressedData
TMP_81(uint256) = _now * 1000000000000000000
TMP_82(uint256) = REF_82 + TMP_81
REF_81(uint256) (->_eventData_) := TMP_82(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_83(uint256) -> _eventData_.compressedIDs
REF_84(uint256) -> _eventData_.compressedIDs
TMP_83(uint256) = REF_84 + _pID
REF_83(uint256) (->_eventData_) := TMP_83(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
MC2events.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.UPAmount,_eventData_.genAmount)

IRs:
REF_86(MC2datasets.Player) -> plyr_[_pID]
REF_87(bytes32) -> REF_86.name
REF_88(uint256) -> _eventData_.compressedData
REF_89(uint256) -> _eventData_.compressedIDs
REF_90(address) -> _eventData_.winnerAddr
REF_91(bytes32) -> _eventData_.winnerName
REF_92(uint256) -> _eventData_.amountWon
REF_93(uint256) -> _eventData_.newPot
REF_94(uint256) -> _eventData_.UPAmount
REF_95(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_87,_eth,REF_88,REF_89,REF_90,REF_91,REF_92,REF_93,REF_94,REF_95)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_85(uint256) = INTERNAL_CALL, MC2long.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_85(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_86(bool) = _eth > 0
CONDITION TMP_86"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_96(MC2datasets.Player) -> plyr_[_pID]
REF_97(address) -> REF_96.addr
Transfer dest:REF_97 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
MC2events.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_100(MC2datasets.Player) -> plyr_[_pID]
REF_101(bytes32) -> REF_100.name
Emit onWithdraw(_pID,msg.sender,REF_101,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, MC2long.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, MC2long.isHuman()()"];
23->1;
}
// Function: 3228.sol-MC2long-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_675(MC2datasets.Player) -> plyr_[_pID]
REF_676(uint256) -> REF_675.lrnd
INTERNAL_CALL, MC2long.updateGenVault(uint256,uint256)(_pID,REF_676)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_677(MC2datasets.Player) -> plyr_[_pID]
REF_678(uint256) -> REF_677.win
REF_680(MC2datasets.Player) -> plyr_[_pID]
REF_681(uint256) -> REF_680.gen
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_678', 'REF_681'] 
REF_683(MC2datasets.Player) -> plyr_[_pID]
REF_684(uint256) -> REF_683.aff
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_424', 'REF_684'] 
_earnings(uint256) := TMP_425(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_426(bool) = _earnings > 0
CONDITION TMP_426"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_685(MC2datasets.Player) -> plyr_[_pID]
REF_686(uint256) -> REF_685.win
REF_686(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_687(MC2datasets.Player) -> plyr_[_pID]
REF_688(uint256) -> REF_687.gen
REF_688(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_689(MC2datasets.Player) -> plyr_[_pID]
REF_690(uint256) -> REF_689.aff
REF_690(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3228.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_506 = CONVERT _input to bytes
_temp(bytes) := TMP_506(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_728 -> LENGTH _temp
_length(uint256) := REF_728(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_507(bool) = _length <= 32
TMP_508(bool) = _length > 0
TMP_509(bool) = TMP_507 && TMP_508
TMP_510(None) = SOLIDITY_CALL require(bool,string)(TMP_509,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_729(None) -> _temp[0]
TMP_511(bool) = REF_729 != 32
TMP_512(uint256) = _length - 1
REF_730(None) -> _temp[TMP_512]
TMP_513(bool) = REF_730 != 32
TMP_514(bool) = TMP_511 && TMP_513
TMP_515(None) = SOLIDITY_CALL require(bool,string)(TMP_514,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_731(None) -> _temp[0]
TMP_516(bool) = REF_731 == 48
CONDITION TMP_516"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_732(None) -> _temp[1]
TMP_517(bool) = REF_732 != 120
TMP_518(None) = SOLIDITY_CALL require(bool,string)(TMP_517,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_733(None) -> _temp[1]
TMP_519(bool) = REF_733 != 88
TMP_520(None) = SOLIDITY_CALL require(bool,string)(TMP_519,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_521(bool) = i < _length
CONDITION TMP_521"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_734(None) -> _temp[i]
TMP_522(bool) = REF_734 > 64
REF_735(None) -> _temp[i]
TMP_523(bool) = REF_735 < 91
TMP_524(bool) = TMP_522 && TMP_523
CONDITION TMP_524"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_736(bytes1) -> _temp[i]
REF_737(None) -> _temp[i]
TMP_525 = CONVERT REF_737 to uint256
TMP_526(uint256) = TMP_525 + 32
TMP_527 = CONVERT TMP_526 to bytes1
REF_736(bytes1) (->_temp) := TMP_527(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_528(bool) = _hasNonNumber == False
CONDITION TMP_528"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_738(None) -> _temp[i]
TMP_529(bool) = REF_738 == 32
REF_739(None) -> _temp[i]
TMP_530(bool) = REF_739 > 96
REF_740(None) -> _temp[i]
TMP_531(bool) = REF_740 < 123
TMP_532(bool) = TMP_530 && TMP_531
TMP_533(bool) = TMP_529 || TMP_532
REF_741(None) -> _temp[i]
TMP_534(bool) = REF_741 > 47
REF_742(None) -> _temp[i]
TMP_535(bool) = REF_742 < 58
TMP_536(bool) = TMP_534 && TMP_535
TMP_537(bool) = TMP_533 || TMP_536
TMP_538(None) = SOLIDITY_CALL require(bool,string)(TMP_537,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_743(None) -> _temp[i]
TMP_539(bool) = REF_743 == 32
CONDITION TMP_539"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_540(uint256) = i + 1
REF_744(None) -> _temp[TMP_540]
TMP_541(bool) = REF_744 != 32
TMP_542(None) = SOLIDITY_CALL require(bool,string)(TMP_541,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_543(bool) = _hasNonNumber == False
REF_745(None) -> _temp[i]
TMP_544(bool) = REF_745 < 48
REF_746(None) -> _temp[i]
TMP_545(bool) = REF_746 > 57
TMP_546(bool) = TMP_544 || TMP_545
TMP_547(bool) = TMP_543 && TMP_546
CONDITION TMP_547"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_548(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_549(bool) = _hasNonNumber == True
TMP_550(None) = SOLIDITY_CALL require(bool,string)(TMP_549,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3228.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 3228.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3228.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3228.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3228.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3228.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3228.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3228.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3228.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_559(uint256) = a + b
c(uint256) := TMP_559(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_560(bool) = c >= a
TMP_561(None) = SOLIDITY_CALL require(bool,string)(TMP_560,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3228.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_551(bool) = a == 0
CONDITION TMP_551"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_552(uint256) = a * b
c(uint256) := TMP_552(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_553(uint256) = c / a
TMP_554(bool) = TMP_553 == b
TMP_555(None) = SOLIDITY_CALL require(bool,string)(TMP_554,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3228.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_569(bool) = x == 0
CONDITION TMP_569"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_570(bool) = y == 0
CONDITION TMP_570"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_571(bool) = i < y
CONDITION TMP_571"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_572(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_572(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_573(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3228.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_568(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_568"];
}
// Function: 3228.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_562(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_563(uint256) = TMP_562 / 2
z(uint256) := TMP_563(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_564(bool) = z < y
CONDITION TMP_564"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_565(uint256) = x / z
TMP_566(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_565,z)
TMP_567(uint256) = TMP_566 / 2
z(uint256) := TMP_567(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3228.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_556(bool) = b <= a
TMP_557(None) = SOLIDITY_CALL require(bool,string)(TMP_556,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_558(uint256) = a - b
RETURN TMP_558"];
}
// Function: 3228.sol-otherMC2-potSwap()
digraph{
}
}
