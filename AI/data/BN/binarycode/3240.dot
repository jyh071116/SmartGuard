digraph G {
// Function: 3240.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_478(bool) = size > 0
RETURN TMP_478"];
}
// Function: 3240.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_14(uint256) -> balances[_owner]
RETURN REF_14"];
}
// Function: 3240.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 3240.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_125 = CONVERT 0 to address
TMP_126(bool) = _to != TMP_125
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_7(uint256) -> balances[msg.sender]
TMP_128(bool) = _value <= REF_7
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_8(uint256) -> balances[msg.sender]
REF_9(uint256) -> balances[msg.sender]
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8(uint256) (->balances) := TMP_130(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_11(uint256) -> balances[_to]
REF_12(uint256) -> balances[_to]
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11(uint256) (->balances) := TMP_131(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-BurnableERC20-allowance(address,address)
digraph{
}
// Function: 3240.sol-BurnableERC20-approve(address,uint256)
digraph{
}
// Function: 3240.sol-BurnableERC20-balanceOf(address)
digraph{
}
// Function: 3240.sol-BurnableERC20-burn(uint256)
digraph{
}
// Function: 3240.sol-BurnableERC20-totalSupply()
digraph{
}
// Function: 3240.sol-BurnableERC20-transfer(address,uint256)
digraph{
}
// Function: 3240.sol-BurnableERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 3240.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_23(uint256) -> balances[_who]
TMP_142(bool) = _value <= REF_23
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_24(uint256) -> balances[_who]
REF_25(uint256) -> balances[_who]
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_25', '_value'] 
REF_24(uint256) (->balances) := TMP_144(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_145(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_147 = CONVERT 0 to address
Emit Transfer(_who,TMP_147,_value)"];
}
// Function: 3240.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 3240.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 3240.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 3240.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 3240.sol-DetailedERC20-allowance(address,address)
digraph{
}
// Function: 3240.sol-DetailedERC20-approve(address,uint256)
digraph{
}
// Function: 3240.sol-DetailedERC20-balanceOf(address)
digraph{
}
// Function: 3240.sol-DetailedERC20-constructor(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
}
// Function: 3240.sol-DetailedERC20-totalSupply()
digraph{
}
// Function: 3240.sol-DetailedERC20-transfer(address,uint256)
digraph{
}
// Function: 3240.sol-DetailedERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 3240.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 3240.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 3240.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 3240.sol-ERC20-totalSupply()
digraph{
}
// Function: 3240.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 3240.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 3240.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 3240.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 3240.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 3240.sol-MintableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_179 = CONVERT 0 to address
TMP_180(bool) = _newOwner != TMP_179
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 3240.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 3240.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 3240.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_220 = UnaryType.BANG mintingFinished 
TMP_221(None) = SOLIDITY_CALL require(bool)(TMP_220)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-MintableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_95(mapping(address => uint256)) -> allowed[msg.sender]
REF_96(uint256) -> REF_95[_spender]
oldValue(uint256) := REF_96(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_197(bool) = _subtractedValue > oldValue
CONDITION TMP_197"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_97(mapping(address => uint256)) -> allowed[msg.sender]
REF_98(uint256) -> REF_97[_spender]
REF_98(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_99(mapping(address => uint256)) -> allowed[msg.sender]
REF_100(uint256) -> REF_99[_spender]
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_100(uint256) (->allowed) := TMP_198(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_102(mapping(address => uint256)) -> allowed[msg.sender]
REF_103(uint256) -> REF_102[_spender]
Emit Approval(msg.sender,_spender,REF_103)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 3240.sol-MintableToken-hasMintPermission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_222(bool) = msg.sender == owner
TMP_223(None) = SOLIDITY_CALL require(bool)(TMP_222)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_88(mapping(address => uint256)) -> allowed[msg.sender]
REF_89(uint256) -> REF_88[_spender]
REF_90(mapping(address => uint256)) -> allowed[msg.sender]
REF_91(uint256) -> REF_90[_spender]
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_91', '_addedValue'] 
REF_89(uint256) (->allowed) := TMP_195(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_93(mapping(address => uint256)) -> allowed[msg.sender]
REF_94(uint256) -> REF_93[_spender]
Emit Approval(msg.sender,_spender,REF_94)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_208(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_113(uint256) -> balances[_to]
REF_114(uint256) -> balances[_to]
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_114', '_amount'] 
REF_113(uint256) (->balances) := TMP_209(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_211 = CONVERT 0 to address
Emit Transfer(TMP_211,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hasMintPermission()

IRs:
MODIFIER_CALL, MintableToken.hasMintPermission()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 3240.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_218(bool) = msg.sender == owner
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-MintableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_175 = CONVERT 0 to address
owner(address) := TMP_175(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 3240.sol-MintableToken-totalSupply()
digraph{
}
// Function: 3240.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 3240.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 3240.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-NokuCustomERC20-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_141(uint256) -> balances[_who]
TMP_282(bool) = _value <= REF_141
TMP_283(None) = SOLIDITY_CALL require(bool)(TMP_282)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_142(uint256) -> balances[_who]
REF_143(uint256) -> balances[_who]
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_143', '_value'] 
REF_142(uint256) (->balances) := TMP_284(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_285(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_287 = CONVERT 0 to address
Emit Transfer(_who,TMP_287,_value)"];
}
// Function: 3240.sol-NokuCustomERC20-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_312 = CONVERT 0 to address
TMP_313(bool) = _newOwner != TMP_312
TMP_314(None) = SOLIDITY_CALL require(bool)(TMP_313)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-NokuCustomERC20-allowance(address,address)
digraph{
}
// Function: 3240.sol-NokuCustomERC20-approve(address,uint256)
digraph{
}
// Function: 3240.sol-NokuCustomERC20-balanceOf(address)
digraph{
}
// Function: 3240.sol-NokuCustomERC20-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_amount > 0,_amount is zero)

IRs:
TMP_411(bool) = _amount > 0
TMP_412(None) = SOLIDITY_CALL require(bool,string)(TMP_411,_amount is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
super.burn(_amount)

IRs:
INTERNAL_CALL, BurnableToken.burn(uint256)(_amount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(pricingPlan.payFee(BURN_SERVICE_NAME,_amount,msg.sender),burn fee failed)

IRs:
TMP_414(bool) = HIGH_LEVEL_CALL, dest:pricingPlan(NokuPricingPlan), function:payFee, arguments:['BURN_SERVICE_NAME', '_amount', 'msg.sender']  
TMP_415(None) = SOLIDITY_CALL require(bool,string)(TMP_414,burn fee failed)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canBurn()

IRs:
MODIFIER_CALL, NokuCustomToken.canBurn()()"];
4->1;
}
// Function: 3240.sol-NokuCustomERC20-canBurn()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! burningFinished,burning finished)

IRs:
TMP_467 = UnaryType.BANG burningFinished 
TMP_468(None) = SOLIDITY_CALL require(bool,string)(TMP_467,burning finished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomERC20-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_459 = UnaryType.BANG mintingFinished 
TMP_460(None) = SOLIDITY_CALL require(bool)(TMP_459)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomERC20-canTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(block.number >= transferableFromBlock,token not transferable)

IRs:
TMP_469(bool) = block.number >= transferableFromBlock
TMP_470(None) = SOLIDITY_CALL require(bool,string)(TMP_469,token not transferable)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
block.number < lockEndBlock

IRs:
TMP_471(bool) = block.number < lockEndBlock
CONDITION TMP_471"];
2->3[label="True"];
2->8[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
locked = lockedBalanceOf(_from)

IRs:
TMP_472(uint256) = INTERNAL_CALL, NokuCustomERC20.lockedBalanceOf(address)(_from)
locked(uint256) := TMP_472(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
locked > 0

IRs:
TMP_473(bool) = locked > 0
CONDITION TMP_473"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
newBalance = balanceOf(_from).sub(_value)

IRs:
TMP_474(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_from)
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_474', '_value'] 
newBalance(uint256) := TMP_475(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(newBalance >= locked,_value exceeds locked amount)

IRs:
TMP_476(bool) = newBalance >= locked
TMP_477(None) = SOLIDITY_CALL require(bool,string)(TMP_476,_value exceeds locked amount)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: _ 9
"];
}
// Function: 3240.sol-NokuCustomERC20-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-NokuCustomERC20-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_pricingPlan != 0,_pricingPlan is zero)

IRs:
TMP_333(bool) = _pricingPlan != 0
TMP_334(None) = SOLIDITY_CALL require(bool,string)(TMP_333,_pricingPlan is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_serviceProvider != 0,_serviceProvider is zero)

IRs:
TMP_335(bool) = _serviceProvider != 0
TMP_336(None) = SOLIDITY_CALL require(bool,string)(TMP_335,_serviceProvider is zero)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingPlan = NokuPricingPlan(_pricingPlan)

IRs:
TMP_337 = CONVERT _pricingPlan to NokuPricingPlan
pricingPlan(NokuPricingPlan) := TMP_337(NokuPricingPlan)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
serviceProvider = _serviceProvider

IRs:
serviceProvider(address) := _serviceProvider(address)"];
}
// Function: 3240.sol-NokuCustomERC20-constructor(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
}
// Function: 3240.sol-NokuCustomERC20-constructor(string,string,uint8,uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(bytes(_name).length > 0,_name is empty)

IRs:
TMP_349 = CONVERT _name to bytes
REF_192 -> LENGTH TMP_349
TMP_350(bool) = REF_192 > 0
TMP_351(None) = SOLIDITY_CALL require(bool,string)(TMP_350,_name is empty)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(bytes(_symbol).length > 0,_symbol is empty)

IRs:
TMP_352 = CONVERT _symbol to bytes
REF_193 -> LENGTH TMP_352
TMP_353(bool) = REF_193 > 0
TMP_354(None) = SOLIDITY_CALL require(bool,string)(TMP_353,_symbol is empty)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_lockEndBlock >= _transferableFromBlock,_lockEndBlock lower than _transferableFromBlock)

IRs:
TMP_355(bool) = _lockEndBlock >= _transferableFromBlock
TMP_356(None) = SOLIDITY_CALL require(bool,string)(TMP_355,_lockEndBlock lower than _transferableFromBlock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transferableFromBlock = _transferableFromBlock

IRs:
transferableFromBlock(uint256) := _transferableFromBlock(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lockEndBlock = _lockEndBlock

IRs:
lockEndBlock(uint256) := _lockEndBlock(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
mintingFeeEnabled = true

IRs:
mintingFeeEnabled(bool) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
LogNokuCustomERC20Created(msg.sender,_name,_symbol,_decimals,_transferableFromBlock,_lockEndBlock,_pricingPlan,_serviceProvider)

IRs:
Emit LogNokuCustomERC20Created(msg.sender,_name,_symbol,_decimals,_transferableFromBlock,_lockEndBlock,_pricingPlan,_serviceProvider)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
NokuCustomToken(_pricingPlan,_serviceProvider)

IRs:
INTERNAL_CALL, NokuCustomToken.constructor(address,address)(_pricingPlan,_serviceProvider)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
DetailedERC20(_name,_symbol,_decimals)

IRs:
INTERNAL_CALL, DetailedERC20.constructor(string,string,uint8)(_name,_symbol,_decimals)"];
9->1;
}
// Function: 3240.sol-NokuCustomERC20-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_183(mapping(address => uint256)) -> allowed[msg.sender]
REF_184(uint256) -> REF_183[_spender]
oldValue(uint256) := REF_184(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_330(bool) = _subtractedValue > oldValue
CONDITION TMP_330"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_185(mapping(address => uint256)) -> allowed[msg.sender]
REF_186(uint256) -> REF_185[_spender]
REF_186(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_187(mapping(address => uint256)) -> allowed[msg.sender]
REF_188(uint256) -> REF_187[_spender]
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_188(uint256) (->allowed) := TMP_331(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_190(mapping(address => uint256)) -> allowed[msg.sender]
REF_191(uint256) -> REF_190[_spender]
Emit Approval(msg.sender,_spender,REF_191)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-NokuCustomERC20-finishBurning()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
burningFinished = true

IRs:
burningFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogBurnFinished()

IRs:
Emit LogBurnFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canBurn()

IRs:
MODIFIER_CALL, NokuCustomToken.canBurn()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
finished

IRs:
RETURN finished"];
}
// Function: 3240.sol-NokuCustomERC20-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 3240.sol-NokuCustomERC20-finishTransferFeePayment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! transferFeePaymentFinished,transfer fee finished)

IRs:
TMP_372 = UnaryType.BANG transferFeePaymentFinished 
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,transfer fee finished)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferFeePaymentFinished = true

IRs:
transferFeePaymentFinished(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogTransferFeePaymentFinished(msg.sender)

IRs:
Emit LogTransferFeePaymentFinished(msg.sender)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
finished

IRs:
RETURN finished"];
}
// Function: 3240.sol-NokuCustomERC20-freeTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferFeePaymentFinished || transferFeePercentage == 0

IRs:
TMP_393(bool) = transferFeePercentage == 0
TMP_394(bool) = transferFeePaymentFinished || TMP_393
RETURN TMP_394"];
2[label="Node Type: RETURN 2

EXPRESSION:
isTransferFree

IRs:
RETURN isTransferFree"];
}
// Function: 3240.sol-NokuCustomERC20-hasMintPermission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_461(bool) = msg.sender == owner
TMP_462(None) = SOLIDITY_CALL require(bool)(TMP_461)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomERC20-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_176(mapping(address => uint256)) -> allowed[msg.sender]
REF_177(uint256) -> REF_176[_spender]
REF_178(mapping(address => uint256)) -> allowed[msg.sender]
REF_179(uint256) -> REF_178[_spender]
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_179', '_addedValue'] 
REF_177(uint256) (->allowed) := TMP_328(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_181(mapping(address => uint256)) -> allowed[msg.sender]
REF_182(uint256) -> REF_181[_spender]
Emit Approval(msg.sender,_spender,REF_182)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-NokuCustomERC20-isCustomToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
isCustom

IRs:
RETURN isCustom"];
}
// Function: 3240.sol-NokuCustomERC20-lockedBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
initiallyLocked = initiallyLockedBalanceOf[_to]

IRs:
REF_196(uint256) -> initiallyLockedBalanceOf[_to]
initiallyLocked(uint256) := REF_196(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
block.number >= lockEndBlock

IRs:
TMP_384(bool) = block.number >= lockEndBlock
CONDITION TMP_384"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: IF 4

EXPRESSION:
block.number <= transferableFromBlock

IRs:
TMP_385(bool) = block.number <= transferableFromBlock
CONDITION TMP_385"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
initiallyLocked

IRs:
RETURN initiallyLocked"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
releaseForBlock = initiallyLocked.div(lockEndBlock.sub(transferableFromBlock))

IRs:
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lockEndBlock', 'transferableFromBlock'] 
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['initiallyLocked', 'TMP_386'] 
releaseForBlock(uint256) := TMP_387(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
released = block.number.sub(transferableFromBlock).mul(releaseForBlock)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.number', 'transferableFromBlock'] 
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_388', 'releaseForBlock'] 
released(uint256) := TMP_389(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
initiallyLocked.sub(released)

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['initiallyLocked', 'released'] 
RETURN TMP_390"];
11[label="Node Type: RETURN 11

EXPRESSION:
locked

IRs:
RETURN locked"];
}
// Function: 3240.sol-NokuCustomERC20-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_to != 0,_to is zero)

IRs:
TMP_417(bool) = _to != 0
TMP_418(None) = SOLIDITY_CALL require(bool,string)(TMP_417,_to is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_amount > 0,_amount is zero)

IRs:
TMP_419(bool) = _amount > 0
TMP_420(None) = SOLIDITY_CALL require(bool,string)(TMP_419,_amount is zero)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
super.mint(_to,_amount)

IRs:
TMP_421(bool) = INTERNAL_CALL, MintableToken.mint(address,uint256)(_to,_amount)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
mintingFeeEnabled

IRs:
CONDITION mintingFeeEnabled"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(pricingPlan.payFee(MINT_SERVICE_NAME,_amount,msg.sender),mint fee failed)

IRs:
TMP_422(bool) = HIGH_LEVEL_CALL, dest:pricingPlan(NokuPricingPlan), function:payFee, arguments:['MINT_SERVICE_NAME', '_amount', 'msg.sender']  
TMP_423(None) = SOLIDITY_CALL require(bool,string)(TMP_422,mint fee failed)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
minted

IRs:
RETURN minted"];
}
// Function: 3240.sol-NokuCustomERC20-mintLocked(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiallyLockedBalanceOf[_to] = initiallyLockedBalanceOf[_to].add(_amount)

IRs:
REF_208(uint256) -> initiallyLockedBalanceOf[_to]
REF_209(uint256) -> initiallyLockedBalanceOf[_to]
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_209', '_amount'] 
REF_208(uint256) (->initiallyLockedBalanceOf) := TMP_426(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
mint(_to,_amount)

IRs:
TMP_427(bool) = INTERNAL_CALL, NokuCustomERC20.mint(address,uint256)(_to,_amount)
RETURN TMP_427"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
minted

IRs:
RETURN minted"];
}
// Function: 3240.sol-NokuCustomERC20-mintTimelocked(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(timelock == address(0),TokenTimelock already activated)

IRs:
TMP_430 = CONVERT 0 to address
TMP_431(bool) = timelock == TMP_430
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,TokenTimelock already activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
timelock = new TokenTimelock(this,_to,_releaseTime)

IRs:
TMP_434(TokenTimelock) = new TokenTimelock(this,_to,_releaseTime) 
timelock(TokenTimelock) := TMP_434(TokenTimelock)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
minted = mint(timelock,_amount)

IRs:
TMP_435(bool) = INTERNAL_CALL, NokuCustomERC20.mint(address,uint256)(timelock,_amount)
minted(bool) := TMP_435(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(pricingPlan.payFee(TIMELOCK_SERVICE_NAME,_amount,msg.sender),timelock fee failed)

IRs:
TMP_436(bool) = HIGH_LEVEL_CALL, dest:pricingPlan(NokuPricingPlan), function:payFee, arguments:['TIMELOCK_SERVICE_NAME', '_amount', 'msg.sender']  
TMP_437(None) = SOLIDITY_CALL require(bool,string)(TMP_436,timelock fee failed)"];
4->7;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
minted

IRs:
RETURN minted"];
}
// Function: 3240.sol-NokuCustomERC20-mintVested(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(vesting == address(0),TokenVesting already activated)

IRs:
TMP_440 = CONVERT 0 to address
TMP_441(bool) = vesting == TMP_440
TMP_442(None) = SOLIDITY_CALL require(bool,string)(TMP_441,TokenVesting already activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vesting = new TokenVesting(_to,_startTime,0,_duration,true)

IRs:
TMP_444(TokenVesting) = new TokenVesting(_to,_startTime,0,_duration,True) 
vesting(TokenVesting) := TMP_444(TokenVesting)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
minted = mint(vesting,_amount)

IRs:
TMP_445(bool) = INTERNAL_CALL, NokuCustomERC20.mint(address,uint256)(vesting,_amount)
minted(bool) := TMP_445(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(pricingPlan.payFee(VESTING_SERVICE_NAME,_amount,msg.sender),vesting fee failed)

IRs:
TMP_446(bool) = HIGH_LEVEL_CALL, dest:pricingPlan(NokuPricingPlan), function:payFee, arguments:['VESTING_SERVICE_NAME', '_amount', 'msg.sender']  
TMP_447(None) = SOLIDITY_CALL require(bool,string)(TMP_446,vesting fee failed)"];
4->7;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
minted

IRs:
RETURN minted"];
}
// Function: 3240.sol-NokuCustomERC20-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_463(bool) = msg.sender == owner
TMP_464(None) = SOLIDITY_CALL require(bool)(TMP_463)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomERC20-onlyServiceProvider()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == serviceProvider,caller is not service provider)

IRs:
TMP_465(bool) = msg.sender == serviceProvider
TMP_466(None) = SOLIDITY_CALL require(bool,string)(TMP_465,caller is not service provider)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomERC20-releaseVested()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(vesting != address(0),TokenVesting not activated)

IRs:
TMP_450 = CONVERT 0 to address
TMP_451(bool) = vesting != TMP_450
TMP_452(None) = SOLIDITY_CALL require(bool,string)(TMP_451,TokenVesting not activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vesting.release(this)

IRs:
HIGH_LEVEL_CALL, dest:vesting(TokenVesting), function:release, arguments:['this']  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
released

IRs:
RETURN released"];
}
// Function: 3240.sol-NokuCustomERC20-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_308 = CONVERT 0 to address
owner(address) := TMP_308(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-NokuCustomERC20-revokeVested()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(vesting != address(0),TokenVesting not activated)

IRs:
TMP_454 = CONVERT 0 to address
TMP_455(bool) = vesting != TMP_454
TMP_456(None) = SOLIDITY_CALL require(bool,string)(TMP_455,TokenVesting not activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vesting.revoke(this)

IRs:
HIGH_LEVEL_CALL, dest:vesting(TokenVesting), function:revoke, arguments:['this']  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
revoked

IRs:
RETURN revoked"];
}
// Function: 3240.sol-NokuCustomERC20-setInformation(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(bytes(_name).length > 0,_name is empty)

IRs:
TMP_364 = CONVERT _name to bytes
REF_194 -> LENGTH TMP_364
TMP_365(bool) = REF_194 > 0
TMP_366(None) = SOLIDITY_CALL require(bool,string)(TMP_365,_name is empty)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(bytes(_symbol).length > 0,_symbol is empty)

IRs:
TMP_367 = CONVERT _symbol to bytes
REF_195 -> LENGTH TMP_367
TMP_368(bool) = REF_195 > 0
TMP_369(None) = SOLIDITY_CALL require(bool,string)(TMP_368,_symbol is empty)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogInformationChanged(msg.sender,_name,_symbol)

IRs:
Emit LogInformationChanged(msg.sender,_name,_symbol)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
successful

IRs:
RETURN successful"];
}
// Function: 3240.sol-NokuCustomERC20-setMintingFeeEnabled(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_mintingFeeEnabled != mintingFeeEnabled,_mintingFeeEnabled == mintingFeeEnabled)

IRs:
TMP_360(bool) = _mintingFeeEnabled != mintingFeeEnabled
TMP_361(None) = SOLIDITY_CALL require(bool,string)(TMP_360,_mintingFeeEnabled == mintingFeeEnabled)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
mintingFeeEnabled = _mintingFeeEnabled

IRs:
mintingFeeEnabled(bool) := _mintingFeeEnabled(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogMintingFeeEnabledChanged(msg.sender,_mintingFeeEnabled)

IRs:
Emit LogMintingFeeEnabledChanged(msg.sender,_mintingFeeEnabled)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
successful

IRs:
RETURN successful"];
}
// Function: 3240.sol-NokuCustomERC20-setPricingPlan(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_pricingPlan != 0,_pricingPlan is 0)

IRs:
TMP_341(bool) = _pricingPlan != 0
TMP_342(None) = SOLIDITY_CALL require(bool,string)(TMP_341,_pricingPlan is 0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_pricingPlan != address(pricingPlan),_pricingPlan == pricingPlan)

IRs:
TMP_343 = CONVERT pricingPlan to address
TMP_344(bool) = _pricingPlan != TMP_343
TMP_345(None) = SOLIDITY_CALL require(bool,string)(TMP_344,_pricingPlan == pricingPlan)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingPlan = NokuPricingPlan(_pricingPlan)

IRs:
TMP_346 = CONVERT _pricingPlan to NokuPricingPlan
pricingPlan(NokuPricingPlan) := TMP_346(NokuPricingPlan)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogPricingPlanChanged(msg.sender,_pricingPlan)

IRs:
Emit LogPricingPlanChanged(msg.sender,_pricingPlan)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyServiceProvider()

IRs:
MODIFIER_CALL, NokuCustomToken.onlyServiceProvider()()"];
5->1;
}
// Function: 3240.sol-NokuCustomERC20-setTransferFeePercentage(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(0 <= _transferFeePercentage && _transferFeePercentage <= 100,_transferFeePercentage not in [0, 100])

IRs:
TMP_376(bool) = 0 <= _transferFeePercentage
TMP_377(bool) = _transferFeePercentage <= 100
TMP_378(bool) = TMP_376 && TMP_377
TMP_379(None) = SOLIDITY_CALL require(bool,string)(TMP_378,_transferFeePercentage not in [0, 100])"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_transferFeePercentage != transferFeePercentage,_transferFeePercentage equal to current value)

IRs:
TMP_380(bool) = _transferFeePercentage != transferFeePercentage
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,_transferFeePercentage equal to current value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferFeePercentage = _transferFeePercentage

IRs:
transferFeePercentage(uint256) := _transferFeePercentage(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogTransferFeePercentageChanged(msg.sender,_transferFeePercentage)

IRs:
Emit LogTransferFeePercentageChanged(msg.sender,_transferFeePercentage)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 3240.sol-NokuCustomERC20-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
BURN_SERVICE_NAME = NokuCustomERC20.burn

IRs:
BURN_SERVICE_NAME(bytes32) := NokuCustomERC20.burn(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MINT_SERVICE_NAME = NokuCustomERC20.mint

IRs:
MINT_SERVICE_NAME(bytes32) := NokuCustomERC20.mint(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TIMELOCK_SERVICE_NAME = NokuCustomERC20.timelock

IRs:
TIMELOCK_SERVICE_NAME(bytes32) := NokuCustomERC20.timelock(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
VESTING_SERVICE_NAME = NokuCustomERC20.vesting

IRs:
VESTING_SERVICE_NAME(bytes32) := NokuCustomERC20.vesting(string)"];
}
// Function: 3240.sol-NokuCustomERC20-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 3240.sol-NokuCustomERC20-totalSupply()
digraph{
}
// Function: 3240.sol-NokuCustomERC20-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
freeTransfer()

IRs:
TMP_395(bool) = INTERNAL_CALL, NokuCustomERC20.freeTransfer()()
CONDITION TMP_395"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_396(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_396"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
usageFee = transferFee(_value)

IRs:
TMP_397(uint256) = INTERNAL_CALL, NokuCustomERC20.transferFee(uint256)(_value)
usageFee(uint256) := TMP_397(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
netValue = _value.sub(usageFee)

IRs:
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_value', 'usageFee'] 
netValue(uint256) := TMP_398(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
feeTransferred = super.transfer(owner,usageFee)

IRs:
TMP_399(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(owner,usageFee)
feeTransferred(bool) := TMP_399(bool)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
netValueTransferred = super.transfer(_to,netValue)

IRs:
TMP_400(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,netValue)
netValueTransferred(bool) := TMP_400(bool)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
feeTransferred && netValueTransferred

IRs:
TMP_401(bool) = feeTransferred && netValueTransferred
RETURN TMP_401"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
canTransfer(msg.sender,_value)

IRs:
MODIFIER_CALL, NokuCustomERC20.canTransfer(address,uint256)(msg.sender,_value)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
transferred

IRs:
RETURN transferred"];
}
// Function: 3240.sol-NokuCustomERC20-transferFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_value.mul(transferFeePercentage).div(100)

IRs:
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_value', 'transferFeePercentage'] 
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_391', '100'] 
RETURN TMP_392"];
2[label="Node Type: RETURN 2

EXPRESSION:
usageFee

IRs:
RETURN usageFee"];
}
// Function: 3240.sol-NokuCustomERC20-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
freeTransfer()

IRs:
TMP_403(bool) = INTERNAL_CALL, NokuCustomERC20.freeTransfer()()
CONDITION TMP_403"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_404(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_404"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
usageFee = transferFee(_value)

IRs:
TMP_405(uint256) = INTERNAL_CALL, NokuCustomERC20.transferFee(uint256)(_value)
usageFee(uint256) := TMP_405(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
netValue = _value.sub(usageFee)

IRs:
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_value', 'usageFee'] 
netValue(uint256) := TMP_406(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
feeTransferred = super.transferFrom(_from,owner,usageFee)

IRs:
TMP_407(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,owner,usageFee)
feeTransferred(bool) := TMP_407(bool)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
netValueTransferred = super.transferFrom(_from,_to,netValue)

IRs:
TMP_408(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,netValue)
netValueTransferred(bool) := TMP_408(bool)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
feeTransferred && netValueTransferred

IRs:
TMP_409(bool) = feeTransferred && netValueTransferred
RETURN TMP_409"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
canTransfer(_from,_value)

IRs:
MODIFIER_CALL, NokuCustomERC20.canTransfer(address,uint256)(_from,_value)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
transferred

IRs:
RETURN transferred"];
}
// Function: 3240.sol-NokuCustomERC20-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-NokuCustomERC20Service-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_532 = CONVERT 0 to address
TMP_533(bool) = _newOwner != TMP_532
TMP_534(None) = SOLIDITY_CALL require(bool)(TMP_533)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-NokuCustomERC20Service-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-NokuCustomERC20Service-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
LogNokuCustomERC20ServiceCreated(msg.sender,_pricingPlan)

IRs:
Emit LogNokuCustomERC20ServiceCreated(msg.sender,_pricingPlan)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
NokuCustomService(_pricingPlan)

IRs:
INTERNAL_CALL, NokuCustomService.constructor(address)(_pricingPlan)"];
2->1;
}
// Function: 3240.sol-NokuCustomERC20Service-createCustomToken(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
customToken = new NokuCustomERC20(_name,_symbol,DECIMALS,block.number,block.number,pricingPlan,owner)

IRs:
TMP_539(NokuCustomERC20) = new NokuCustomERC20(_name,_symbol,DECIMALS,block.number,block.number,pricingPlan,owner) 
customToken(NokuCustomERC20) := TMP_539(NokuCustomERC20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
customToken.transferOwnership(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:customToken(NokuCustomERC20), function:transferOwnership, arguments:['msg.sender']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(pricingPlan.payFee(CUSTOM_ERC20_CREATE_SERVICE_NAME,CREATE_AMOUNT,msg.sender),fee payment failed)

IRs:
TMP_541(bool) = HIGH_LEVEL_CALL, dest:pricingPlan(NokuPricingPlan), function:payFee, arguments:['CUSTOM_ERC20_CREATE_SERVICE_NAME', 'CREATE_AMOUNT', 'msg.sender']  
TMP_542(None) = SOLIDITY_CALL require(bool,string)(TMP_541,fee payment failed)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
customToken

IRs:
RETURN customToken"];
}
// Function: 3240.sol-NokuCustomERC20Service-createCustomToken(string,string,uint8,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
customToken = new NokuCustomERC20(_name,_symbol,DECIMALS,transferableFromBlock,lockEndBlock,pricingPlan,owner)

IRs:
TMP_544(NokuCustomERC20) = new NokuCustomERC20(_name,_symbol,DECIMALS,transferableFromBlock,lockEndBlock,pricingPlan,owner) 
customToken(NokuCustomERC20) := TMP_544(NokuCustomERC20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
customToken.transferOwnership(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:customToken(NokuCustomERC20), function:transferOwnership, arguments:['msg.sender']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(pricingPlan.payFee(CUSTOM_ERC20_CREATE_SERVICE_NAME,CREATE_AMOUNT,msg.sender),fee payment failed)

IRs:
TMP_546(bool) = HIGH_LEVEL_CALL, dest:pricingPlan(NokuPricingPlan), function:payFee, arguments:['CUSTOM_ERC20_CREATE_SERVICE_NAME', 'CREATE_AMOUNT', 'msg.sender']  
TMP_547(None) = SOLIDITY_CALL require(bool,string)(TMP_546,fee payment failed)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
customToken

IRs:
RETURN customToken"];
}
// Function: 3240.sol-NokuCustomERC20Service-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_553(bool) = msg.sender == owner
TMP_554(None) = SOLIDITY_CALL require(bool)(TMP_553)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomERC20Service-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 3240.sol-NokuCustomERC20Service-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_528 = CONVERT 0 to address
owner(address) := TMP_528(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-NokuCustomERC20Service-setPricingPlan(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_pricingPlan.isContract(),_pricingPlan is not contract)

IRs:
TMP_513(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_pricingPlan'] 
TMP_514(None) = SOLIDITY_CALL require(bool,string)(TMP_513,_pricingPlan is not contract)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(NokuPricingPlan(_pricingPlan) != pricingPlan,_pricingPlan equal to current)

IRs:
TMP_515 = CONVERT _pricingPlan to NokuPricingPlan
TMP_516(bool) = TMP_515 != pricingPlan
TMP_517(None) = SOLIDITY_CALL require(bool,string)(TMP_516,_pricingPlan equal to current)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingPlan = NokuPricingPlan(_pricingPlan)

IRs:
TMP_518 = CONVERT _pricingPlan to NokuPricingPlan
pricingPlan(NokuPricingPlan) := TMP_518(NokuPricingPlan)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogPricingPlanChanged(msg.sender,_pricingPlan)

IRs:
Emit LogPricingPlanChanged(msg.sender,_pricingPlan)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 3240.sol-NokuCustomERC20Service-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
CREATE_AMOUNT = 1 * 10 ** 18

IRs:
TMP_548(uint256) = 10 ** 18
TMP_549(uint256) = 1 * TMP_548
CREATE_AMOUNT(uint256) := TMP_549(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
DECIMALS = 18

IRs:
DECIMALS(uint8) := 18(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
CUSTOM_ERC20_CREATE_SERVICE_NAME = NokuCustomERC20.create

IRs:
CUSTOM_ERC20_CREATE_SERVICE_NAME(bytes32) := NokuCustomERC20.create(string)"];
}
// Function: 3240.sol-NokuCustomERC20Service-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 3240.sol-NokuCustomERC20Service-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-NokuCustomERC20Service-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 3240.sol-NokuCustomERC20Service-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_550 = UnaryType.BANG paused 
TMP_551(None) = SOLIDITY_CALL require(bool)(TMP_550)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomERC20Service-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_552(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomService-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_490 = CONVERT 0 to address
TMP_491(bool) = _newOwner != TMP_490
TMP_492(None) = SOLIDITY_CALL require(bool)(TMP_491)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-NokuCustomService-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-NokuCustomService-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_pricingPlan.isContract(),_pricingPlan is not contract)

IRs:
TMP_494(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_pricingPlan'] 
TMP_495(None) = SOLIDITY_CALL require(bool,string)(TMP_494,_pricingPlan is not contract)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pricingPlan = NokuPricingPlan(_pricingPlan)

IRs:
TMP_496 = CONVERT _pricingPlan to NokuPricingPlan
pricingPlan(NokuPricingPlan) := TMP_496(NokuPricingPlan)"];
}
// Function: 3240.sol-NokuCustomService-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_508(bool) = msg.sender == owner
TMP_509(None) = SOLIDITY_CALL require(bool)(TMP_508)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomService-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 3240.sol-NokuCustomService-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_486 = CONVERT 0 to address
owner(address) := TMP_486(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-NokuCustomService-setPricingPlan(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_pricingPlan.isContract(),_pricingPlan is not contract)

IRs:
TMP_497(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_pricingPlan'] 
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,_pricingPlan is not contract)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(NokuPricingPlan(_pricingPlan) != pricingPlan,_pricingPlan equal to current)

IRs:
TMP_499 = CONVERT _pricingPlan to NokuPricingPlan
TMP_500(bool) = TMP_499 != pricingPlan
TMP_501(None) = SOLIDITY_CALL require(bool,string)(TMP_500,_pricingPlan equal to current)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingPlan = NokuPricingPlan(_pricingPlan)

IRs:
TMP_502 = CONVERT _pricingPlan to NokuPricingPlan
pricingPlan(NokuPricingPlan) := TMP_502(NokuPricingPlan)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogPricingPlanChanged(msg.sender,_pricingPlan)

IRs:
Emit LogPricingPlanChanged(msg.sender,_pricingPlan)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 3240.sol-NokuCustomService-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 3240.sol-NokuCustomService-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-NokuCustomService-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 3240.sol-NokuCustomService-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_505 = UnaryType.BANG paused 
TMP_506(None) = SOLIDITY_CALL require(bool)(TMP_505)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomService-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_507(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _newOwner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-NokuCustomToken-canBurn()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! burningFinished,burning finished)

IRs:
TMP_40 = UnaryType.BANG burningFinished 
TMP_41(None) = SOLIDITY_CALL require(bool,string)(TMP_40,burning finished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-NokuCustomToken-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_pricingPlan != 0,_pricingPlan is zero)

IRs:
TMP_20(bool) = _pricingPlan != 0
TMP_21(None) = SOLIDITY_CALL require(bool,string)(TMP_20,_pricingPlan is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_serviceProvider != 0,_serviceProvider is zero)

IRs:
TMP_22(bool) = _serviceProvider != 0
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,_serviceProvider is zero)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingPlan = NokuPricingPlan(_pricingPlan)

IRs:
TMP_24 = CONVERT _pricingPlan to NokuPricingPlan
pricingPlan(NokuPricingPlan) := TMP_24(NokuPricingPlan)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
serviceProvider = _serviceProvider

IRs:
serviceProvider(address) := _serviceProvider(address)"];
}
// Function: 3240.sol-NokuCustomToken-finishBurning()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
burningFinished = true

IRs:
burningFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogBurnFinished()

IRs:
Emit LogBurnFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canBurn()

IRs:
MODIFIER_CALL, NokuCustomToken.canBurn()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
finished

IRs:
RETURN finished"];
}
// Function: 3240.sol-NokuCustomToken-isCustomToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
isCustom

IRs:
RETURN isCustom"];
}
// Function: 3240.sol-NokuCustomToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_36(bool) = msg.sender == owner
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomToken-onlyServiceProvider()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == serviceProvider,caller is not service provider)

IRs:
TMP_38(bool) = msg.sender == serviceProvider
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,caller is not service provider)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuCustomToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_12 = CONVERT 0 to address
owner(address) := TMP_12(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-NokuCustomToken-setPricingPlan(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_pricingPlan != 0,_pricingPlan is 0)

IRs:
TMP_28(bool) = _pricingPlan != 0
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,_pricingPlan is 0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_pricingPlan != address(pricingPlan),_pricingPlan == pricingPlan)

IRs:
TMP_30 = CONVERT pricingPlan to address
TMP_31(bool) = _pricingPlan != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,_pricingPlan == pricingPlan)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingPlan = NokuPricingPlan(_pricingPlan)

IRs:
TMP_33 = CONVERT _pricingPlan to NokuPricingPlan
pricingPlan(NokuPricingPlan) := TMP_33(NokuPricingPlan)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogPricingPlanChanged(msg.sender,_pricingPlan)

IRs:
Emit LogPricingPlanChanged(msg.sender,_pricingPlan)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyServiceProvider()

IRs:
MODIFIER_CALL, NokuCustomToken.onlyServiceProvider()()"];
5->1;
}
// Function: 3240.sol-NokuCustomToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-NokuPricingPlan-payFee(bytes32,uint256,address)
digraph{
}
// Function: 3240.sol-NokuPricingPlan-usageFee(bytes32,uint256)
digraph{
}
// Function: 3240.sol-NokuTokenBurner-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_85 = CONVERT 0 to address
TMP_86(bool) = _newOwner != TMP_85
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-NokuTokenBurner-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-NokuTokenBurner-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_wallet != address(0),_wallet is zero)

IRs:
TMP_89 = CONVERT 0 to address
TMP_90(bool) = _wallet != TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool,string)(TMP_90,_wallet is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
burningPercentage = 100

IRs:
burningPercentage(uint256) := 100(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogNokuTokenBurnerCreated(msg.sender,_wallet)

IRs:
Emit LogNokuTokenBurnerCreated(msg.sender,_wallet)"];
}
// Function: 3240.sol-NokuTokenBurner-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_123(bool) = msg.sender == owner
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuTokenBurner-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 3240.sol-NokuTokenBurner-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_81 = CONVERT 0 to address
owner(address) := TMP_81(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-NokuTokenBurner-setBurningPercentage(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(0 <= _burningPercentage && _burningPercentage <= 100,_burningPercentage not in [0, 100])

IRs:
TMP_93(bool) = 0 <= _burningPercentage
TMP_94(bool) = _burningPercentage <= 100
TMP_95(bool) = TMP_93 && TMP_94
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,_burningPercentage not in [0, 100])"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_burningPercentage != burningPercentage,_burningPercentage equal to current one)

IRs:
TMP_97(bool) = _burningPercentage != burningPercentage
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,_burningPercentage equal to current one)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
burningPercentage = _burningPercentage

IRs:
burningPercentage(uint256) := _burningPercentage(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogBurningPercentageChanged(msg.sender,_burningPercentage)

IRs:
Emit LogBurningPercentageChanged(msg.sender,_burningPercentage)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 3240.sol-NokuTokenBurner-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 3240.sol-NokuTokenBurner-tokenReceived(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_token != address(0),_token is zero)

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = _token != TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,_token is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_amount > 0,_amount is zero)

IRs:
TMP_104(bool) = _amount > 0
TMP_105(None) = SOLIDITY_CALL require(bool,string)(TMP_104,_amount is zero)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToBurn = _amount.mul(burningPercentage).div(100)

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount', 'burningPercentage'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_106', '100'] 
amountToBurn(uint256) := TMP_107(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
amountToBurn > 0

IRs:
TMP_108(bool) = amountToBurn > 0
CONDITION TMP_108"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(BurnableERC20(_token).burn(amountToBurn))

IRs:
TMP_109 = CONVERT _token to BurnableERC20
TMP_110(bool) = HIGH_LEVEL_CALL, dest:TMP_109(BurnableERC20), function:burn, arguments:['amountToBurn']  
TMP_111(None) = SOLIDITY_CALL assert(bool)(TMP_110)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
burnedTokens = burnedTokens.add(amountToBurn)

IRs:
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['burnedTokens', 'amountToBurn'] 
burnedTokens(uint256) := TMP_112(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
amountToTransfer = _amount.sub(amountToBurn)

IRs:
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_amount', 'amountToBurn'] 
amountToTransfer(uint256) := TMP_113(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
amountToTransfer > 0

IRs:
TMP_114(bool) = amountToTransfer > 0
CONDITION TMP_114"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
assert(bool)(BurnableERC20(_token).transfer(wallet,amountToTransfer))

IRs:
TMP_115 = CONVERT _token to BurnableERC20
TMP_116(bool) = HIGH_LEVEL_CALL, dest:TMP_115(BurnableERC20), function:transfer, arguments:['wallet', 'amountToTransfer']  
TMP_117(None) = SOLIDITY_CALL assert(bool)(TMP_116)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
transferredTokens = transferredTokens.add(amountToTransfer)

IRs:
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['transferredTokens', 'amountToTransfer'] 
transferredTokens(uint256) := TMP_118(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
13->1;
}
// Function: 3240.sol-NokuTokenBurner-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-NokuTokenBurner-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 3240.sol-NokuTokenBurner-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_120 = UnaryType.BANG paused 
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-NokuTokenBurner-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_122(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-Pausable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = _newOwner != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_57(bool) = msg.sender == owner
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 3240.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_43 = CONVERT 0 to address
owner(address) := TMP_43(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 3240.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 3240.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_59 = UnaryType.BANG paused 
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_61(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.approve(spender,value))

IRs:
TMP_228(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
}
// Function: 3240.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transfer(to,value))

IRs:
TMP_224(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_225(None) = SOLIDITY_CALL require(bool)(TMP_224)"];
}
// Function: 3240.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transferFrom(from,to,value))

IRs:
TMP_226(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
}
// Function: 3240.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_71(uint256) = a + b
c(uint256) := TMP_71(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_72(bool) = c >= a
TMP_73(None) = SOLIDITY_CALL assert(bool)(TMP_72)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3240.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_67(uint256) = a / b
RETURN TMP_67"];
}
// Function: 3240.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_62(bool) = a == 0
CONDITION TMP_62"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_63(uint256) = a * b
c(uint256) := TMP_63(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_64(uint256) = c / a
TMP_65(bool) = TMP_64 == b
TMP_66(None) = SOLIDITY_CALL assert(bool)(TMP_65)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3240.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_68(bool) = b <= a
TMP_69(None) = SOLIDITY_CALL assert(bool)(TMP_68)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_70(uint256) = a - b
RETURN TMP_70"];
}
// Function: 3240.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_52(mapping(address => uint256)) -> allowed[_owner]
REF_53(uint256) -> REF_52[_spender]
RETURN REF_53"];
}
// Function: 3240.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_50(mapping(address => uint256)) -> allowed[msg.sender]
REF_51(uint256) -> REF_50[_spender]
REF_51(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 3240.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_61(mapping(address => uint256)) -> allowed[msg.sender]
REF_62(uint256) -> REF_61[_spender]
oldValue(uint256) := REF_62(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_171(bool) = _subtractedValue > oldValue
CONDITION TMP_171"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_63(mapping(address => uint256)) -> allowed[msg.sender]
REF_64(uint256) -> REF_63[_spender]
REF_64(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_65(mapping(address => uint256)) -> allowed[msg.sender]
REF_66(uint256) -> REF_65[_spender]
TMP_172(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_66(uint256) (->allowed) := TMP_172(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
Emit Approval(msg.sender,_spender,REF_69)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_54(mapping(address => uint256)) -> allowed[msg.sender]
REF_55(uint256) -> REF_54[_spender]
REF_56(mapping(address => uint256)) -> allowed[msg.sender]
REF_57(uint256) -> REF_56[_spender]
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_57', '_addedValue'] 
REF_55(uint256) (->allowed) := TMP_169(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_59(mapping(address => uint256)) -> allowed[msg.sender]
REF_60(uint256) -> REF_59[_spender]
Emit Approval(msg.sender,_spender,REF_60)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-StandardToken-totalSupply()
digraph{
}
// Function: 3240.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 3240.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_157 = CONVERT 0 to address
TMP_158(bool) = _to != TMP_157
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_36(uint256) -> balances[_from]
TMP_160(bool) = _value <= REF_36
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_37(mapping(address => uint256)) -> allowed[_from]
REF_38(uint256) -> REF_37[msg.sender]
TMP_162(bool) = _value <= REF_38
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_39(uint256) -> balances[_from]
REF_40(uint256) -> balances[_from]
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_40', '_value'] 
REF_39(uint256) (->balances) := TMP_164(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_42(uint256) -> balances[_to]
REF_43(uint256) -> balances[_to]
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_43', '_value'] 
REF_42(uint256) (->balances) := TMP_165(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_45(mapping(address => uint256)) -> allowed[_from]
REF_46(uint256) -> REF_45[msg.sender]
REF_47(mapping(address => uint256)) -> allowed[_from]
REF_48(uint256) -> REF_47[msg.sender]
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_48', '_value'] 
REF_46(uint256) (->allowed) := TMP_166(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3240.sol-TokenTimelock-constructor(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_releaseTime > block.timestamp)

IRs:
TMP_230(bool) = _releaseTime > block.timestamp
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = _token

IRs:
token(ERC20Basic) := _token(ERC20Basic)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
beneficiary = _beneficiary

IRs:
beneficiary(address) := _beneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
releaseTime = _releaseTime

IRs:
releaseTime(uint256) := _releaseTime(uint256)"];
}
// Function: 3240.sol-TokenTimelock-release()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp >= releaseTime)

IRs:
TMP_232(bool) = block.timestamp >= releaseTime
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = token.balanceOf(this)

IRs:
TMP_234(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
amount(uint256) := TMP_234(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_235(bool) = amount > 0
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.safeTransfer(beneficiary,amount)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'beneficiary', 'amount'] "];
}
// Function: 3240.sol-TokenVesting-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_243 = CONVERT 0 to address
TMP_244(bool) = _newOwner != TMP_243
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 3240.sol-TokenVesting-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3240.sol-TokenVesting-constructor(address,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_247 = CONVERT 0 to address
TMP_248(bool) = _beneficiary != TMP_247
TMP_249(None) = SOLIDITY_CALL require(bool)(TMP_248)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_cliff <= _duration)

IRs:
TMP_250(bool) = _cliff <= _duration
TMP_251(None) = SOLIDITY_CALL require(bool)(TMP_250)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
beneficiary = _beneficiary

IRs:
beneficiary(address) := _beneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revocable = _revocable

IRs:
revocable(bool) := _revocable(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
duration = _duration

IRs:
duration(uint256) := _duration(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
cliff = _start.add(_cliff)

IRs:
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_start', '_cliff'] 
cliff(uint256) := TMP_252(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
start = _start

IRs:
start(uint256) := _start(uint256)"];
}
// Function: 3240.sol-TokenVesting-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_279(bool) = msg.sender == owner
TMP_280(None) = SOLIDITY_CALL require(bool)(TMP_279)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3240.sol-TokenVesting-releasableAmount(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
vestedAmount(token).sub(released[token])

IRs:
TMP_268(uint256) = INTERNAL_CALL, TokenVesting.vestedAmount(ERC20Basic)(token)
REF_132(uint256) -> released[token]
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_268', 'REF_132'] 
RETURN TMP_269"];
}
// Function: 3240.sol-TokenVesting-release(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unreleased = releasableAmount(token)

IRs:
TMP_253(uint256) = INTERNAL_CALL, TokenVesting.releasableAmount(ERC20Basic)(token)
unreleased(uint256) := TMP_253(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unreleased > 0)

IRs:
TMP_254(bool) = unreleased > 0
TMP_255(None) = SOLIDITY_CALL require(bool)(TMP_254)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
released[token] = released[token].add(unreleased)

IRs:
REF_122(uint256) -> released[token]
REF_123(uint256) -> released[token]
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_123', 'unreleased'] 
REF_122(uint256) (->released) := TMP_256(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.safeTransfer(beneficiary,unreleased)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'beneficiary', 'unreleased'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Released(unreleased)

IRs:
Emit Released(unreleased)"];
}
// Function: 3240.sol-TokenVesting-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_239 = CONVERT 0 to address
owner(address) := TMP_239(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 3240.sol-TokenVesting-revoke(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(revocable)

IRs:
TMP_259(None) = SOLIDITY_CALL require(bool)(revocable)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! revoked[token])

IRs:
REF_126(bool) -> revoked[token]
TMP_260 = UnaryType.BANG REF_126 
TMP_261(None) = SOLIDITY_CALL require(bool)(TMP_260)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_262(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_262(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
unreleased = releasableAmount(token)

IRs:
TMP_263(uint256) = INTERNAL_CALL, TokenVesting.releasableAmount(ERC20Basic)(token)
unreleased(uint256) := TMP_263(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
refund = balance.sub(unreleased)

IRs:
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['balance', 'unreleased'] 
refund(uint256) := TMP_264(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revoked[token] = true

IRs:
REF_129(bool) -> revoked[token]
REF_129(bool) (->revoked) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.safeTransfer(owner,refund)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'owner', 'refund'] "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Revoked()

IRs:
Emit Revoked()"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 3240.sol-TokenVesting-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3240.sol-TokenVesting-vestedAmount(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentBalance = token.balanceOf(this)

IRs:
TMP_270(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
currentBalance(uint256) := TMP_270(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBalance = currentBalance.add(released[token])

IRs:
REF_135(uint256) -> released[token]
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentBalance', 'REF_135'] 
totalBalance(uint256) := TMP_271(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
block.timestamp < cliff

IRs:
TMP_272(bool) = block.timestamp < cliff
CONDITION TMP_272"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: IF 5

EXPRESSION:
block.timestamp >= start.add(duration) || revoked[token]

IRs:
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['start', 'duration'] 
TMP_274(bool) = block.timestamp >= TMP_273
REF_137(bool) -> revoked[token]
TMP_275(bool) = TMP_274 || REF_137
CONDITION TMP_275"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
totalBalance

IRs:
RETURN totalBalance"];
7[label="Node Type: RETURN 7

EXPRESSION:
totalBalance.mul(block.timestamp.sub(start)).div(duration)

IRs:
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'start'] 
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalBalance', 'TMP_276'] 
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_277', 'duration'] 
RETURN TMP_278"];
}
}
