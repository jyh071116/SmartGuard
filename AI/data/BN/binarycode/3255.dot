digraph G {
// Function: 3255.sol-LOLKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_453'] 
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_456(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_455'] 
TMP_457(uint256) = TMP_456 / 2
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_454', 'TMP_457'] 
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_460(uint256) = TMP_458 / TMP_459
RETURN TMP_460"];
}
// Function: 3255.sol-LOLKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_443(uint256) = INTERNAL_CALL, LOLKeysCalcLong.eth(uint256)(_curKeys)
TMP_444(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_445(uint256) = INTERNAL_CALL, LOLKeysCalcLong.eth(uint256)(TMP_444)
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_443', 'TMP_445'] 
RETURN TMP_446"];
}
// Function: 3255.sol-LOLKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_447(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_448(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_447', '312500000000000000000000000'] 
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_448', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_449'] 
TMP_451(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_450', '74999921875000000000000000000000'] 
TMP_452(uint256) = TMP_451 / 156250000
RETURN TMP_452"];
}
// Function: 3255.sol-LOLKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_440(uint256) = INTERNAL_CALL, LOLKeysCalcLong.keys(uint256)(TMP_439)
TMP_441(uint256) = INTERNAL_CALL, LOLKeysCalcLong.keys(uint256)(_curEth)
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_440', 'TMP_441'] 
RETURN TMP_442"];
}
// Function: 3255.sol-LOLOfficalBankInterface-deposit()
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-getNameFee()
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3255.sol-LOLPlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3255.sol-LOLlong-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_7(bool) = msg.sender == newOwner
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = address(0)

IRs:
TMP_9 = CONVERT 0 to address
newOwner(address) := TMP_9(address)"];
}
// Function: 3255.sol-LOLlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,only team just can activate)

IRs:
TMP_419(bool) = msg.sender == owner
TMP_420(None) = SOLIDITY_CALL require(bool,string)(TMP_419,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_421(bool) = activated_ == False
TMP_422(None) = SOLIDITY_CALL require(bool,string)(TMP_421,fomo3d already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_669(LOLdatasets.Round) -> round_[1]
REF_670(uint256) -> REF_669.strt
TMP_423(uint256) = now + rndExtra_
TMP_424(uint256) = TMP_423 - rndGap_
REF_670(uint256) (->round_) := TMP_424(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_671(LOLdatasets.Round) -> round_[1]
REF_672(uint256) -> REF_671.end
TMP_425(uint256) = now + rndInit_
TMP_426(uint256) = TMP_425 + rndExtra_
REF_672(uint256) (->round_) := TMP_426(uint256)"];
}
// Function: 3255.sol-LOLlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_349(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_350(bytes32) = SOLIDITY_CALL keccak256()(TMP_349)
TMP_351 = CONVERT TMP_350 to uint256
TMP_352(uint256) = TMP_351 / now
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_348', 'TMP_352'] 
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_353', 'block.gaslimit'] 
TMP_355(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_356(bytes32) = SOLIDITY_CALL keccak256()(TMP_355)
TMP_357 = CONVERT TMP_356 to uint256
TMP_358(uint256) = TMP_357 / now
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_354', 'TMP_358'] 
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_359', 'block.number'] 
TMP_361(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_360)
TMP_362(bytes32) = SOLIDITY_CALL keccak256()(TMP_361)
TMP_363 = CONVERT TMP_362 to uint256
seed(uint256) := TMP_363(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_364(uint256) = seed / 1000
TMP_365(uint256) = TMP_364 * 1000
TMP_366(uint256) = seed - TMP_365
TMP_367(bool) = TMP_366 < airDropTracker_
CONDITION TMP_367"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3255.sol-LOLlong-buyCore(uint256,uint256,uint256,LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_259(LOLdatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.strt
TMP_162(uint256) = REF_260 + rndGap_
TMP_163(bool) = _now > TMP_162
REF_261(LOLdatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_164(bool) = _now <= REF_262
REF_263(LOLdatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.end
TMP_165(bool) = _now > REF_264
REF_265(LOLdatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.plyr
TMP_166(bool) = REF_266 == 0
TMP_167(bool) = TMP_165 && TMP_166
TMP_168(bool) = TMP_164 || TMP_167
TMP_169(bool) = TMP_163 && TMP_168
CONDITION TMP_169"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.core(uint256,uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_267(LOLdatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.end
TMP_171(bool) = _now > REF_268
REF_269(LOLdatasets.Round) -> round_[_rID]
REF_270(bool) -> REF_269.ended
TMP_172(bool) = REF_270 == False
TMP_173(bool) = TMP_171 && TMP_172
CONDITION TMP_173"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_271(LOLdatasets.Round) -> round_[_rID]
REF_272(bool) -> REF_271.ended
REF_272(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_174(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.endRound(LOLdatasets.EventReturns)(_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_174(LOLdatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_273(uint256) -> _eventData_.compressedData
REF_274(uint256) -> _eventData_.compressedData
TMP_175(uint256) = _now * 1000000000000000000
TMP_176(uint256) = REF_274 + TMP_175
REF_273(uint256) (->_eventData_) := TMP_176(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_275(uint256) -> _eventData_.compressedIDs
REF_276(uint256) -> _eventData_.compressedIDs
TMP_177(uint256) = REF_276 + _pID
REF_275(uint256) (->_eventData_) := TMP_177(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LOLevents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_278(LOLdatasets.Player) -> plyr_[_pID]
REF_279(bytes32) -> REF_278.name
REF_280(uint256) -> _eventData_.compressedData
REF_281(uint256) -> _eventData_.compressedIDs
REF_282(address) -> _eventData_.winnerAddr
REF_283(bytes32) -> _eventData_.winnerName
REF_284(uint256) -> _eventData_.amountWon
REF_285(uint256) -> _eventData_.newPot
REF_286(uint256) -> _eventData_.P3DAmount
REF_287(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_279,msg.value,REF_280,REF_281,REF_282,REF_283,REF_284,REF_285,REF_286,REF_287)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_288(LOLdatasets.Player) -> plyr_[_pID]
REF_289(uint256) -> REF_288.gen
REF_290(LOLdatasets.Player) -> plyr_[_pID]
REF_291(uint256) -> REF_290.gen
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_291', 'msg.value'] 
REF_289(uint256) (->plyr_) := TMP_179(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3255.sol-LOLlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_33(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.determinePID(LOLdatasets.EventReturns)(_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_33(LOLdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = _affCode == TMP_34
TMP_36(bool) = _affCode == msg.sender
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(LOLdatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(LOLdatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_38(bool) = _affID != REF_31
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(LOLdatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, LOLlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.buyCore(uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, LOLlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3255.sol-LOLlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.determinePID(LOLdatasets.EventReturns)(_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_23(LOLdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_24(bool) = _affCode == 0
TMP_25(bool) = _affCode == _pID
TMP_26(bool) = TMP_24 || TMP_25
CONDITION TMP_26"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(LOLdatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(LOLdatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_27(bool) = _affCode != REF_23
CONDITION TMP_27"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(LOLdatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_28(uint256) = INTERNAL_CALL, LOLlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_28(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.buyCore(uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, LOLlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 3255.sol-LOLlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_44(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.determinePID(LOLdatasets.EventReturns)(_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_44(LOLdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_45(bool) = _affCode == 
REF_35(LOLdatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_46(bool) = _affCode == REF_36
TMP_47(bool) = TMP_45 || TMP_46
CONDITION TMP_47"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(LOLdatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(LOLdatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_48(bool) = _affID != REF_41
CONDITION TMP_48"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(LOLdatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_49(uint256) = INTERNAL_CALL, LOLlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_49(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.buyCore(uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, LOLlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3255.sol-LOLlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_408(LOLdatasets.Round) -> round_[_rID]
REF_409(uint256) -> REF_408.strt
TMP_245(uint256) = REF_409 + rndGap_
TMP_246(bool) = _now > TMP_245
REF_410(LOLdatasets.Round) -> round_[_rID]
REF_411(uint256) -> REF_410.end
TMP_247(bool) = _now <= REF_411
REF_412(LOLdatasets.Round) -> round_[_rID]
REF_413(uint256) -> REF_412.end
TMP_248(bool) = _now > REF_413
REF_414(LOLdatasets.Round) -> round_[_rID]
REF_415(uint256) -> REF_414.plyr
TMP_249(bool) = REF_415 == 0
TMP_250(bool) = TMP_248 && TMP_249
TMP_251(bool) = TMP_247 || TMP_250
TMP_252(bool) = TMP_246 && TMP_251
CONDITION TMP_252"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_416(LOLdatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.eth
TMP_253(uint256) = LIBRARY_CALL, dest:LOLKeysCalcLong, function:LOLKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_417', '_eth'] 
RETURN TMP_253"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_254(uint256) = LIBRARY_CALL, dest:LOLKeysCalcLong, function:LOLKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_254"];
}
// Function: 3255.sol-LOLlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_398(LOLdatasets.Round) -> round_[_rIDlast]
REF_399(uint256) -> REF_398.mask
REF_401(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_402(LOLdatasets.PlayerRounds) -> REF_401[_rIDlast]
REF_403(uint256) -> REF_402.keys
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_399', 'REF_403'] 
TMP_243(uint256) = TMP_242 / 1000000000000000000
REF_405(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_406(LOLdatasets.PlayerRounds) -> REF_405[_rIDlast]
REF_407(uint256) -> REF_406.mask
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_243', 'REF_407'] 
RETURN TMP_244"];
}
// Function: 3255.sol-LOLlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = LOLdatasets.TeamFee(36,0)

IRs:
REF_0(LOLdatasets.TeamFee) -> fees_[0]
TMP_10(LOLdatasets.TeamFee) = new TeamFee(36,0)
REF_0(LOLdatasets.TeamFee) (->fees_) := TMP_10(LOLdatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = LOLdatasets.TeamFee(43,0)

IRs:
REF_2(LOLdatasets.TeamFee) -> fees_[1]
TMP_11(LOLdatasets.TeamFee) = new TeamFee(43,0)
REF_2(LOLdatasets.TeamFee) (->fees_) := TMP_11(LOLdatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = LOLdatasets.TeamFee(66,0)

IRs:
REF_4(LOLdatasets.TeamFee) -> fees_[2]
TMP_12(LOLdatasets.TeamFee) = new TeamFee(66,0)
REF_4(LOLdatasets.TeamFee) (->fees_) := TMP_12(LOLdatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = LOLdatasets.TeamFee(51,0)

IRs:
REF_6(LOLdatasets.TeamFee) -> fees_[3]
TMP_13(LOLdatasets.TeamFee) = new TeamFee(51,0)
REF_6(LOLdatasets.TeamFee) (->fees_) := TMP_13(LOLdatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = LOLdatasets.PotSplit(25,0)

IRs:
REF_8(LOLdatasets.PotSplit) -> potSplit_[0]
TMP_14(LOLdatasets.PotSplit) = new PotSplit(25,0)
REF_8(LOLdatasets.PotSplit) (->potSplit_) := TMP_14(LOLdatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = LOLdatasets.PotSplit(25,0)

IRs:
REF_10(LOLdatasets.PotSplit) -> potSplit_[1]
TMP_15(LOLdatasets.PotSplit) = new PotSplit(25,0)
REF_10(LOLdatasets.PotSplit) (->potSplit_) := TMP_15(LOLdatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = LOLdatasets.PotSplit(40,0)

IRs:
REF_12(LOLdatasets.PotSplit) -> potSplit_[2]
TMP_16(LOLdatasets.PotSplit) = new PotSplit(40,0)
REF_12(LOLdatasets.PotSplit) (->potSplit_) := TMP_16(LOLdatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = LOLdatasets.PotSplit(40,0)

IRs:
REF_14(LOLdatasets.PotSplit) -> potSplit_[3]
TMP_17(LOLdatasets.PotSplit) = new PotSplit(40,0)
REF_14(LOLdatasets.PotSplit) (->potSplit_) := TMP_17(LOLdatasets.PotSplit)"];
}
// Function: 3255.sol-LOLlong-core(uint256,uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_325(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_326(LOLdatasets.PlayerRounds) -> REF_325[_rID]
REF_327(uint256) -> REF_326.keys
TMP_199(bool) = REF_327 == 0
CONDITION TMP_199"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_200(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.managePlayer(uint256,LOLdatasets.EventReturns)(_pID,_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_200(LOLdatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_eth > 1000000000

IRs:
TMP_201(bool) = _eth > 1000000000
CONDITION TMP_201"];
4->5[label="True"];
4->52[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_328(LOLdatasets.Round) -> round_[_rID]
REF_329(uint256) -> REF_328.eth
TMP_202(uint256) = LIBRARY_CALL, dest:LOLKeysCalcLong, function:LOLKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_329', '_eth'] 
_keys(uint256) := TMP_202(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_203(bool) = _keys >= 1000000000000000000
CONDITION TMP_203"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, LOLlong.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_331(LOLdatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.plyr
TMP_205(bool) = REF_332 != _pID
CONDITION TMP_205"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_333(LOLdatasets.Round) -> round_[_rID]
REF_334(uint256) -> REF_333.plyr
REF_334(uint256) (->round_) := _pID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_335(LOLdatasets.Round) -> round_[_rID]
REF_336(uint256) -> REF_335.team
TMP_206(bool) = REF_336 != _team
CONDITION TMP_206"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_337(LOLdatasets.Round) -> round_[_rID]
REF_338(uint256) -> REF_337.team
REF_338(uint256) (->round_) := _team(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_339(uint256) -> _eventData_.compressedData
REF_340(uint256) -> _eventData_.compressedData
TMP_207(uint256) = REF_340 + 100
REF_339(uint256) (->_eventData_) := TMP_207(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_208(bool) = _eth >= 100000000000000000
CONDITION TMP_208"];
16->17[label="True"];
16->42[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_209(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
airdrop() == true

IRs:
TMP_210(bool) = INTERNAL_CALL, LOLlong.airdrop()()
TMP_211(bool) = TMP_210 == True
CONDITION TMP_211"];
18->19[label="True"];
18->41[label="False"];
19[label="Node Type: NEW VARIABLE 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_212(bool) = _eth >= 10000000000000000000
CONDITION TMP_212"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_214(uint256) = TMP_213 / 100
_prize(uint256) := TMP_214(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_342(LOLdatasets.Player) -> plyr_[_pID]
REF_343(uint256) -> REF_342.win
REF_344(LOLdatasets.Player) -> plyr_[_pID]
REF_345(uint256) -> REF_344.win
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_345', '_prize'] 
REF_343(uint256) (->plyr_) := TMP_215(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_216(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_348(uint256) -> _eventData_.compressedData
REF_348(-> _eventData_) = REF_348 + 300000000000000000000000000000000"];
24->37;
25[label="Node Type: IF 25

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_217(bool) = _eth >= 1000000000000000000
TMP_218(bool) = _eth < 10000000000000000000
TMP_219(bool) = TMP_217 && TMP_218
CONDITION TMP_219"];
25->26[label="True"];
25->30[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_221(uint256) = TMP_220 / 100
_prize(uint256) := TMP_221(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_350(LOLdatasets.Player) -> plyr_[_pID]
REF_351(uint256) -> REF_350.win
REF_352(LOLdatasets.Player) -> plyr_[_pID]
REF_353(uint256) -> REF_352.win
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_353', '_prize'] 
REF_351(uint256) (->plyr_) := TMP_222(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_223(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_356(uint256) -> _eventData_.compressedData
REF_356(-> _eventData_) = REF_356 + 200000000000000000000000000000000"];
29->36;
30[label="Node Type: IF 30

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_224(bool) = _eth >= 100000000000000000
TMP_225(bool) = _eth < 1000000000000000000
TMP_226(bool) = TMP_224 && TMP_225
CONDITION TMP_226"];
30->31[label="True"];
30->35[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_228(uint256) = TMP_227 / 100
_prize(uint256) := TMP_228(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_358(LOLdatasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.win
REF_360(LOLdatasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.win
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_361', '_prize'] 
REF_359(uint256) (->plyr_) := TMP_229(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_230(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_364(uint256) -> _eventData_.compressedData
REF_364(-> _eventData_) = REF_364 + 300000000000000000000000000000000"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_365(uint256) -> _eventData_.compressedData
REF_365(-> _eventData_) = REF_365 + 10000000000000000000000000000000"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_366(uint256) -> _eventData_.compressedData
TMP_231(uint256) = _prize * 1000000000000000000000000000000000
REF_366(-> _eventData_) = REF_366 + TMP_231"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_367(uint256) -> _eventData_.compressedData
REF_368(uint256) -> _eventData_.compressedData
TMP_232(uint256) = airDropTracker_ * 1000
TMP_233(uint256) = REF_368 + TMP_232
REF_367(uint256) (->_eventData_) := TMP_233(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_369(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_370(LOLdatasets.PlayerRounds) -> REF_369[_rID]
REF_371(uint256) -> REF_370.keys
REF_373(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_374(LOLdatasets.PlayerRounds) -> REF_373[_rID]
REF_375(uint256) -> REF_374.keys
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_375'] 
REF_371(uint256) (->plyrRnds_) := TMP_234(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_376(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_377(LOLdatasets.PlayerRounds) -> REF_376[_rID]
REF_378(uint256) -> REF_377.eth
REF_380(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_381(LOLdatasets.PlayerRounds) -> REF_380[_rID]
REF_382(uint256) -> REF_381.eth
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_382'] 
REF_378(uint256) (->plyrRnds_) := TMP_235(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_383(LOLdatasets.Round) -> round_[_rID]
REF_384(uint256) -> REF_383.keys
REF_386(LOLdatasets.Round) -> round_[_rID]
REF_387(uint256) -> REF_386.keys
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_387'] 
REF_384(uint256) (->round_) := TMP_236(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_388(LOLdatasets.Round) -> round_[_rID]
REF_389(uint256) -> REF_388.eth
REF_391(LOLdatasets.Round) -> round_[_rID]
REF_392(uint256) -> REF_391.eth
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_392'] 
REF_389(uint256) (->round_) := TMP_237(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_393(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_394(uint256) -> REF_393[_team]
REF_396(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_397(uint256) -> REF_396[_team]
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_397'] 
REF_394(uint256) (->rndTmEth_) := TMP_238(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_239(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_239(LOLdatasets.EventReturns)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_240(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_240(LOLdatasets.EventReturns)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.endTx(uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
51->52;
52[label="Node Type: END_IF 52
"];
}
// Function: 3255.sol-LOLlong-determinePID(LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_457(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_457(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_279(bool) = _pID == 0
CONDITION TMP_279"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_280(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(LOLPlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_280(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_281(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(LOLPlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_281(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_282(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(LOLPlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_282(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_461(uint256) -> pIDxAddr_[msg.sender]
REF_461(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_462(LOLdatasets.Player) -> plyr_[_pID]
REF_463(address) -> REF_462.addr
REF_463(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_283(bool) = _name != 
CONDITION TMP_283"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_464(uint256) -> pIDxName_[_name]
REF_464(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_465(LOLdatasets.Player) -> plyr_[_pID]
REF_466(bytes32) -> REF_465.name
REF_466(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_467(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_468(bool) -> REF_467[_name]
REF_468(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_284(bool) = _laff != 0
TMP_285(bool) = _laff != _pID
TMP_286(bool) = TMP_284 && TMP_285
CONDITION TMP_286"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_469(LOLdatasets.Player) -> plyr_[_pID]
REF_470(uint256) -> REF_469.laff
REF_470(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_471(uint256) -> _eventData_.compressedData
REF_472(uint256) -> _eventData_.compressedData
TMP_287(uint256) = REF_472 + 1
REF_471(uint256) (->_eventData_) := TMP_287(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3255.sol-LOLlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_368(uint256) = _eth / 50
_com(uint256) := TMP_368(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_369(uint256) = _eth / 10
_aff(uint256) := TMP_369(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_370(bool) = _affID != _pID
REF_580(LOLdatasets.Player) -> plyr_[_affID]
REF_581(bytes32) -> REF_580.name
TMP_371(bool) = REF_581 != 
TMP_372(bool) = TMP_370 && TMP_371
CONDITION TMP_372"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_582(LOLdatasets.Player) -> plyr_[_affID]
REF_583(uint256) -> REF_582.aff
REF_585(LOLdatasets.Player) -> plyr_[_affID]
REF_586(uint256) -> REF_585.aff
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_586'] 
REF_583(uint256) (->plyr_) := TMP_373(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOLevents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_588(LOLdatasets.Player) -> plyr_[_affID]
REF_589(address) -> REF_588.addr
REF_590(LOLdatasets.Player) -> plyr_[_affID]
REF_591(bytes32) -> REF_590.name
Emit onAffiliatePayout(_affID,REF_589,REF_591,_rID,_pID,_aff,now)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = _com.add(_aff)

IRs:
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_aff'] 
_com(uint256) := TMP_375(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
address(lol_offical_bank).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_376 = CONVERT lol_offical_bank to address
TMP_378(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_379 = CONVERT TMP_378 to bytes4
TMP_380(bool) = LOW_LEVEL_CALL, dest:TMP_376, function:call, arguments:['TMP_379'] value:_com "];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3255.sol-LOLlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_596(LOLdatasets.TeamFee) -> fees_[_team]
REF_597(uint256) -> REF_596.gen
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_597'] 
TMP_382(uint256) = TMP_381 / 100
_gen(uint256) := TMP_382(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 50)

IRs:
TMP_383(uint256) = _eth / 50
_air(uint256) := TMP_383(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_384(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100))

IRs:
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_386(uint256) = TMP_385 / 100
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_386'] 
_eth(uint256) := TMP_387(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_388(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_389(uint256) = INTERNAL_CALL, LOLlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_389(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_390(bool) = _dust > 0
CONDITION TMP_390"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_391(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_603(LOLdatasets.Round) -> round_[_rID]
REF_604(uint256) -> REF_603.pot
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_607(LOLdatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.pot
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_392', 'REF_608'] 
REF_604(uint256) (->round_) := TMP_393(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_609(uint256) -> _eventData_.genAmount
REF_611(uint256) -> _eventData_.genAmount
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_611'] 
REF_609(uint256) (->_eventData_) := TMP_394(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_612(uint256) -> _eventData_.potAmount
REF_612(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3255.sol-LOLlong-endRound(LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_481(LOLdatasets.Round) -> round_[_rID]
REF_482(uint256) -> REF_481.plyr
_winPID(uint256) := REF_482(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_483(LOLdatasets.Round) -> round_[_rID]
REF_484(uint256) -> REF_483.team
_winTID(uint256) := REF_484(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_485(LOLdatasets.Round) -> round_[_rID]
REF_486(uint256) -> REF_485.pot
_pot(uint256) := REF_486(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_295(uint256) = TMP_294 / 100
_win(uint256) := TMP_295(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_296(uint256) = _pot / 50
_com(uint256) := TMP_296(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_489(LOLdatasets.PotSplit) -> potSplit_[_winTID]
REF_490(uint256) -> REF_489.gen
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_490'] 
TMP_298(uint256) = TMP_297 / 100
_gen(uint256) := TMP_298(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_492(LOLdatasets.PotSplit) -> potSplit_[_winTID]
REF_493(uint256) -> REF_492.p3d
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_493'] 
TMP_300(uint256) = TMP_299 / 100
_p3d(uint256) := TMP_300(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_301', '_com'] 
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_302', '_gen'] 
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_303', '_p3d'] 
_res(uint256) := TMP_304(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_499(LOLdatasets.Round) -> round_[_rID]
REF_500(uint256) -> REF_499.keys
TMP_306(uint256) = TMP_305 / REF_500
_ppt(uint256) := TMP_306(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_503(LOLdatasets.Round) -> round_[_rID]
REF_504(uint256) -> REF_503.keys
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_504'] 
TMP_308(uint256) = TMP_307 / 1000000000000000000
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_308'] 
_dust(uint256) := TMP_309(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_310(bool) = _dust > 0
CONDITION TMP_310"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_311(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_312(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_507(LOLdatasets.Player) -> plyr_[_winPID]
REF_508(uint256) -> REF_507.win
REF_510(LOLdatasets.Player) -> plyr_[_winPID]
REF_511(uint256) -> REF_510.win
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_511'] 
REF_508(uint256) (->plyr_) := TMP_313(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
! address(lol_offical_bank).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_314 = CONVERT lol_offical_bank to address
TMP_316(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_317 = CONVERT TMP_316 to bytes4
TMP_318(bool) = LOW_LEVEL_CALL, dest:TMP_314, function:call, arguments:['TMP_317'] value:_com 
TMP_319 = UnaryType.BANG TMP_318 
CONDITION TMP_319"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_p3d = _p3d.add(_com)

IRs:
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_com'] 
_p3d(uint256) := TMP_320(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_515(LOLdatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.mask
REF_518(LOLdatasets.Round) -> round_[_rID]
REF_519(uint256) -> REF_518.mask
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_519'] 
REF_516(uint256) (->round_) := TMP_321(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_520(uint256) -> _eventData_.compressedData
REF_521(uint256) -> _eventData_.compressedData
REF_522(LOLdatasets.Round) -> round_[_rID]
REF_523(uint256) -> REF_522.end
TMP_322(uint256) = REF_523 * 1000000
TMP_323(uint256) = REF_521 + TMP_322
REF_520(uint256) (->_eventData_) := TMP_323(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_524(uint256) -> _eventData_.compressedIDs
REF_525(uint256) -> _eventData_.compressedIDs
TMP_324(uint256) = _winPID * 100000000000000000000000000
TMP_325(uint256) = REF_525 + TMP_324
TMP_326(uint256) = _winTID * 100000000000000000
TMP_327(uint256) = TMP_325 + TMP_326
REF_524(uint256) (->_eventData_) := TMP_327(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_526(address) -> _eventData_.winnerAddr
REF_527(LOLdatasets.Player) -> plyr_[_winPID]
REF_528(address) -> REF_527.addr
REF_526(address) (->_eventData_) := REF_528(address)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_529(bytes32) -> _eventData_.winnerName
REF_530(LOLdatasets.Player) -> plyr_[_winPID]
REF_531(bytes32) -> REF_530.name
REF_529(bytes32) (->_eventData_) := REF_531(bytes32)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_532(uint256) -> _eventData_.amountWon
REF_532(uint256) (->_eventData_) := _win(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_533(uint256) -> _eventData_.genAmount
REF_533(uint256) (->_eventData_) := _gen(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.P3DAmount = 0

IRs:
REF_534(uint256) -> _eventData_.P3DAmount
REF_534(uint256) (->_eventData_) := 0(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_535(uint256) -> _eventData_.newPot
REF_535(uint256) (->_eventData_) := _res(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
rID_ ++

IRs:
TMP_328(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_rID ++

IRs:
TMP_329(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_536(LOLdatasets.Round) -> round_[_rID]
REF_537(uint256) -> REF_536.strt
REF_537(uint256) (->round_) := now(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_538(LOLdatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.end
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_330', 'rndGap_'] 
REF_539(uint256) (->round_) := TMP_331(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_542(LOLdatasets.Round) -> round_[_rID]
REF_543(uint256) -> REF_542.pot
REF_543(uint256) (->round_) := _res(uint256)"];
34->35;
35[label="Node Type: RETURN 35

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3255.sol-LOLlong-endTx(uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_653(uint256) -> _eventData_.compressedData
REF_654(uint256) -> _eventData_.compressedData
TMP_411(uint256) = now * 1000000000000000000
TMP_412(uint256) = REF_654 + TMP_411
TMP_413(uint256) = _team * 100000000000000000000000000000
TMP_414(uint256) = TMP_412 + TMP_413
REF_653(uint256) (->_eventData_) := TMP_414(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_655(uint256) -> _eventData_.compressedIDs
REF_656(uint256) -> _eventData_.compressedIDs
TMP_415(uint256) = REF_656 + _pID
TMP_416(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_417(uint256) = TMP_415 + TMP_416
REF_655(uint256) (->_eventData_) := TMP_417(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LOLevents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_658(uint256) -> _eventData_.compressedData
REF_659(uint256) -> _eventData_.compressedIDs
REF_660(LOLdatasets.Player) -> plyr_[_pID]
REF_661(bytes32) -> REF_660.name
REF_662(address) -> _eventData_.winnerAddr
REF_663(bytes32) -> _eventData_.winnerName
REF_664(uint256) -> _eventData_.amountWon
REF_665(uint256) -> _eventData_.newPot
REF_666(uint256) -> _eventData_.P3DAmount
REF_667(uint256) -> _eventData_.genAmount
REF_668(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_658,REF_659,REF_661,msg.sender,_eth,_keys,REF_662,REF_663,REF_664,REF_665,REF_666,REF_667,REF_668,airDropPot_)"];
}
// Function: 3255.sol-LOLlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_18(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.determinePID(LOLdatasets.EventReturns)(_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_18(LOLdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(LOLdatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, LOLlong.buyCore(uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, LOLlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 3255.sol-LOLlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_129(LOLdatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.strt
TMP_113(uint256) = REF_130 + rndGap_
TMP_114(bool) = _now > TMP_113
REF_131(LOLdatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_115(bool) = _now <= REF_132
REF_133(LOLdatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.end
TMP_116(bool) = _now > REF_134
REF_135(LOLdatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.plyr
TMP_117(bool) = REF_136 == 0
TMP_118(bool) = TMP_116 && TMP_117
TMP_119(bool) = TMP_115 || TMP_118
TMP_120(bool) = TMP_114 && TMP_119
CONDITION TMP_120"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_137(LOLdatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.keys
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_138', '1000000000000000000'] 
TMP_122(uint256) = LIBRARY_CALL, dest:LOLKeysCalcLong, function:LOLKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_121', '1000000000000000000'] 
RETURN TMP_122"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3255.sol-LOLlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_211(LOLdatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.ico
REF_213(LOLdatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.keys
REF_215(LOLdatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.end
REF_217(LOLdatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.strt
REF_219(LOLdatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.pot
REF_221(LOLdatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.team
REF_223(LOLdatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.plyr
TMP_153(uint256) = REF_224 * 10
TMP_154(uint256) = REF_222 + TMP_153
REF_225(LOLdatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.plyr
REF_227(LOLdatasets.Player) -> plyr_[REF_226]
REF_228(address) -> REF_227.addr
REF_229(LOLdatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.plyr
REF_231(LOLdatasets.Player) -> plyr_[REF_230]
REF_232(bytes32) -> REF_231.name
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[0]
REF_235(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_236(uint256) -> REF_235[1]
REF_237(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_238(uint256) -> REF_237[2]
REF_239(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_240(uint256) -> REF_239[3]
TMP_155(uint256) = airDropPot_ * 1000
TMP_156(uint256) = airDropTracker_ + TMP_155
RETURN REF_212,_rID,REF_214,REF_216,REF_218,REF_220,TMP_154,REF_228,REF_232,REF_234,REF_236,REF_238,REF_240,TMP_156"];
}
// Function: 3255.sol-LOLlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_157 = CONVERT 0 to address
TMP_158(bool) = _addr == TMP_157
CONDITION TMP_158"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_159(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_241(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_241(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_242(LOLdatasets.Player) -> plyr_[_pID]
REF_243(bytes32) -> REF_242.name
REF_244(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_245(LOLdatasets.PlayerRounds) -> REF_244[_rID]
REF_246(uint256) -> REF_245.keys
REF_247(LOLdatasets.Player) -> plyr_[_pID]
REF_248(uint256) -> REF_247.win
REF_249(LOLdatasets.Player) -> plyr_[_pID]
REF_250(uint256) -> REF_249.gen
REF_252(LOLdatasets.Player) -> plyr_[_pID]
REF_253(uint256) -> REF_252.lrnd
TMP_160(uint256) = INTERNAL_CALL, LOLlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_253)
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_250', 'TMP_160'] 
REF_254(LOLdatasets.Player) -> plyr_[_pID]
REF_255(uint256) -> REF_254.aff
REF_256(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_257(LOLdatasets.PlayerRounds) -> REF_256[_rID]
REF_258(uint256) -> REF_257.eth
RETURN _pID,REF_243,REF_246,REF_248,TMP_161,REF_255,REF_258"];
}
// Function: 3255.sol-LOLlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_151(LOLdatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_129(bool) = now > REF_152
REF_153(LOLdatasets.Round) -> round_[_rID]
REF_154(bool) -> REF_153.ended
TMP_130(bool) = REF_154 == False
TMP_131(bool) = TMP_129 && TMP_130
REF_155(LOLdatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.plyr
TMP_132(bool) = REF_156 != 0
TMP_133(bool) = TMP_131 && TMP_132
CONDITION TMP_133"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_157(LOLdatasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.plyr
TMP_134(bool) = REF_158 == _pID
CONDITION TMP_134"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_159(LOLdatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.win
REF_162(LOLdatasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.pot
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_163', '48'] 
TMP_136(uint256) = TMP_135 / 100
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_136'] 
REF_165(LOLdatasets.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.gen
TMP_138(uint256) = INTERNAL_CALL, LOLlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_169(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_170(LOLdatasets.PlayerRounds) -> REF_169[_rID]
REF_171(uint256) -> REF_170.mask
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_138', 'REF_171'] 
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_166', 'TMP_139'] 
REF_172(LOLdatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.aff
RETURN TMP_137,TMP_140,REF_173"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_174(LOLdatasets.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.win
REF_176(LOLdatasets.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.gen
TMP_141(uint256) = INTERNAL_CALL, LOLlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_180(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_181(LOLdatasets.PlayerRounds) -> REF_180[_rID]
REF_182(uint256) -> REF_181.mask
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_141', 'REF_182'] 
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_177', 'TMP_142'] 
REF_183(LOLdatasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.aff
RETURN REF_175,TMP_143,REF_184"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_185(LOLdatasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.win
REF_187(LOLdatasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.gen
REF_190(LOLdatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.lrnd
TMP_144(uint256) = INTERNAL_CALL, LOLlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_191)
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', 'TMP_144'] 
REF_192(LOLdatasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.aff
RETURN REF_186,TMP_145,REF_193"];
}
// Function: 3255.sol-LOLlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_194(LOLdatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.mask
REF_197(LOLdatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.pot
REF_200(LOLdatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.team
REF_202(LOLdatasets.PotSplit) -> potSplit_[REF_201]
REF_203(uint256) -> REF_202.gen
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_198', 'REF_203'] 
TMP_147(uint256) = TMP_146 / 100
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_147', '1000000000000000000'] 
REF_205(LOLdatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.keys
TMP_149(uint256) = TMP_148 / REF_206
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_195', 'TMP_149'] 
REF_208(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_209(LOLdatasets.PlayerRounds) -> REF_208[_rID]
REF_210(uint256) -> REF_209.keys
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_150', 'REF_210'] 
TMP_152(uint256) = TMP_151 / 1000000000000000000
RETURN TMP_152"];
}
// Function: 3255.sol-LOLlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_141(LOLdatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_123(bool) = _now < REF_142
CONDITION TMP_123"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_143(LOLdatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.strt
TMP_124(uint256) = REF_144 + rndGap_
TMP_125(bool) = _now > TMP_124
CONDITION TMP_125"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_145(LOLdatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_146', '_now'] 
RETURN TMP_126"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_148(LOLdatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.strt
TMP_127(uint256) = REF_149 + rndGap_
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_127', '_now'] 
RETURN TMP_128"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3255.sol-LOLlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_420(LOLdatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.strt
TMP_255(uint256) = REF_421 + rndGap_
TMP_256(bool) = _now > TMP_255
REF_422(LOLdatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.end
TMP_257(bool) = _now <= REF_423
REF_424(LOLdatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.end
TMP_258(bool) = _now > REF_425
REF_426(LOLdatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.plyr
TMP_259(bool) = REF_427 == 0
TMP_260(bool) = TMP_258 && TMP_259
TMP_261(bool) = TMP_257 || TMP_260
TMP_262(bool) = TMP_256 && TMP_261
CONDITION TMP_262"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_428(LOLdatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.keys
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_429', '_keys'] 
TMP_264(uint256) = LIBRARY_CALL, dest:LOLKeysCalcLong, function:LOLKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_263', '_keys'] 
RETURN TMP_264"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_265(uint256) = LIBRARY_CALL, dest:LOLKeysCalcLong, function:LOLKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_265"];
}
// Function: 3255.sol-LOLlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_431(bool) = activated_ == True
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3255.sol-LOLlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_433(bool) = _codeLength == 0
TMP_434(None) = SOLIDITY_CALL require(bool,string)(TMP_433,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3255.sol-LOLlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_435(bool) = _eth >= 1000000000
TMP_436(None) = SOLIDITY_CALL require(bool,string)(TMP_435,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_437(bool) = _eth <= 100000000000000000000000
TMP_438(None) = SOLIDITY_CALL require(bool,string)(TMP_437,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3255.sol-LOLlong-managePlayer(uint256,LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_473(LOLdatasets.Player) -> plyr_[_pID]
REF_474(uint256) -> REF_473.lrnd
TMP_291(bool) = REF_474 != 0
CONDITION TMP_291"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_475(LOLdatasets.Player) -> plyr_[_pID]
REF_476(uint256) -> REF_475.lrnd
INTERNAL_CALL, LOLlong.updateGenVault(uint256,uint256)(_pID,REF_476)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_477(LOLdatasets.Player) -> plyr_[_pID]
REF_478(uint256) -> REF_477.lrnd
REF_478(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_479(uint256) -> _eventData_.compressedData
REF_480(uint256) -> _eventData_.compressedData
TMP_293(uint256) = REF_480 + 10
REF_479(uint256) (->_eventData_) := TMP_293(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3255.sol-LOLlong-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_429(bool) = msg.sender == owner
TMP_430(None) = SOLIDITY_CALL require(bool)(TMP_429)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3255.sol-LOLlong-reLoadCore(uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_293(LOLdatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.strt
TMP_180(uint256) = REF_294 + rndGap_
TMP_181(bool) = _now > TMP_180
REF_295(LOLdatasets.Round) -> round_[_rID]
REF_296(uint256) -> REF_295.end
TMP_182(bool) = _now <= REF_296
REF_297(LOLdatasets.Round) -> round_[_rID]
REF_298(uint256) -> REF_297.end
TMP_183(bool) = _now > REF_298
REF_299(LOLdatasets.Round) -> round_[_rID]
REF_300(uint256) -> REF_299.plyr
TMP_184(bool) = REF_300 == 0
TMP_185(bool) = TMP_183 && TMP_184
TMP_186(bool) = TMP_182 || TMP_185
TMP_187(bool) = TMP_181 && TMP_186
CONDITION TMP_187"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_301(LOLdatasets.Player) -> plyr_[_pID]
REF_302(uint256) -> REF_301.gen
TMP_188(uint256) = INTERNAL_CALL, LOLlong.withdrawEarnings(uint256)(_pID)
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_188', '_eth'] 
REF_302(uint256) (->plyr_) := TMP_189(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.core(uint256,uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_304(LOLdatasets.Round) -> round_[_rID]
REF_305(uint256) -> REF_304.end
TMP_191(bool) = _now > REF_305
REF_306(LOLdatasets.Round) -> round_[_rID]
REF_307(bool) -> REF_306.ended
TMP_192(bool) = REF_307 == False
TMP_193(bool) = TMP_191 && TMP_192
CONDITION TMP_193"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_308(LOLdatasets.Round) -> round_[_rID]
REF_309(bool) -> REF_308.ended
REF_309(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_194(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.endRound(LOLdatasets.EventReturns)(_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_194(LOLdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_310(uint256) -> _eventData_.compressedData
REF_311(uint256) -> _eventData_.compressedData
TMP_195(uint256) = _now * 1000000000000000000
TMP_196(uint256) = REF_311 + TMP_195
REF_310(uint256) (->_eventData_) := TMP_196(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_312(uint256) -> _eventData_.compressedIDs
REF_313(uint256) -> _eventData_.compressedIDs
TMP_197(uint256) = REF_313 + _pID
REF_312(uint256) (->_eventData_) := TMP_197(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LOLevents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_315(LOLdatasets.Player) -> plyr_[_pID]
REF_316(bytes32) -> REF_315.name
REF_317(uint256) -> _eventData_.compressedData
REF_318(uint256) -> _eventData_.compressedIDs
REF_319(address) -> _eventData_.winnerAddr
REF_320(bytes32) -> _eventData_.winnerName
REF_321(uint256) -> _eventData_.amountWon
REF_322(uint256) -> _eventData_.newPot
REF_323(uint256) -> _eventData_.P3DAmount
REF_324(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_316,REF_317,REF_318,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3255.sol-LOLlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_63 = CONVERT 0 to address
TMP_64(bool) = _affCode == TMP_63
TMP_65(bool) = _affCode == msg.sender
TMP_66(bool) = TMP_64 || TMP_65
CONDITION TMP_66"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(LOLdatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(LOLdatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_67(bool) = _affID != REF_56
CONDITION TMP_67"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(LOLdatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_68(uint256) = INTERNAL_CALL, LOLlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_68(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.reLoadCore(uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, LOLlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3255.sol-LOLlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_54(bool) = _affCode == 0
TMP_55(bool) = _affCode == _pID
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(LOLdatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(LOLdatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_57(bool) = _affCode != REF_48
CONDITION TMP_57"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(LOLdatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, LOLlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.reLoadCore(uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, LOLlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 3255.sol-LOLlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_73(bool) = _affCode == 
REF_60(LOLdatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_74(bool) = _affCode == REF_61
TMP_75(bool) = TMP_73 || TMP_74
CONDITION TMP_75"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(LOLdatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(LOLdatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_76(bool) = _affID != REF_66
CONDITION TMP_76"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(LOLdatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_77(uint256) = INTERNAL_CALL, LOLlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_77(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, LOLlong.reLoadCore(uint256,uint256,uint256,uint256,LOLdatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, LOLlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3255.sol-LOLlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_266 = CONVERT PlayerBook to address
TMP_267(bool) = msg.sender == TMP_266
TMP_268(None) = SOLIDITY_CALL require(bool,string)(TMP_267,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_433(uint256) -> pIDxAddr_[_addr]
TMP_269(bool) = REF_433 != _pID
CONDITION TMP_269"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_434(uint256) -> pIDxAddr_[_addr]
REF_434(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_435(uint256) -> pIDxName_[_name]
TMP_270(bool) = REF_435 != _pID
CONDITION TMP_270"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_436(uint256) -> pIDxName_[_name]
REF_436(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_437(LOLdatasets.Player) -> plyr_[_pID]
REF_438(address) -> REF_437.addr
TMP_271(bool) = REF_438 != _addr
CONDITION TMP_271"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_439(LOLdatasets.Player) -> plyr_[_pID]
REF_440(address) -> REF_439.addr
REF_440(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_441(LOLdatasets.Player) -> plyr_[_pID]
REF_442(bytes32) -> REF_441.name
TMP_272(bool) = REF_442 != _name
CONDITION TMP_272"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_443(LOLdatasets.Player) -> plyr_[_pID]
REF_444(bytes32) -> REF_443.name
REF_444(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_445(LOLdatasets.Player) -> plyr_[_pID]
REF_446(uint256) -> REF_445.laff
TMP_273(bool) = REF_446 != _laff
CONDITION TMP_273"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_447(LOLdatasets.Player) -> plyr_[_pID]
REF_448(uint256) -> REF_447.laff
REF_448(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_449(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_450(bool) -> REF_449[_name]
TMP_274(bool) = REF_450 == False
CONDITION TMP_274"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_451(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_452(bool) -> REF_451[_name]
REF_452(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3255.sol-LOLlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_275 = CONVERT PlayerBook to address
TMP_276(bool) = msg.sender == TMP_275
TMP_277(None) = SOLIDITY_CALL require(bool,string)(TMP_276,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_453(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_454(bool) -> REF_453[_name]
TMP_278(bool) = REF_454 == False
CONDITION TMP_278"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_455(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_456(bool) -> REF_455[_name]
REF_456(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3255.sol-LOLlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_101(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_101(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(LOLPlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_105(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_105(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LOLevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_107(LOLdatasets.Player) -> plyr_[_affID]
REF_108(address) -> REF_107.addr
REF_109(LOLdatasets.Player) -> plyr_[_affID]
REF_110(bytes32) -> REF_109.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_108,REF_110,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
9->1;
}
// Function: 3255.sol-LOLlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_105(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_105(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(LOLPlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_114(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_114(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LOLevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_116(LOLdatasets.Player) -> plyr_[_affID]
REF_117(address) -> REF_116.addr
REF_118(LOLdatasets.Player) -> plyr_[_affID]
REF_119(bytes32) -> REF_118.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_117,REF_119,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
9->1;
}
// Function: 3255.sol-LOLlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_109(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_109(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(LOLPlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_123(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_123(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LOLevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_125(LOLdatasets.Player) -> plyr_[_affID]
REF_126(address) -> REF_125.addr
REF_127(LOLdatasets.Player) -> plyr_[_affID]
REF_128(bytes32) -> REF_127.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_126,REF_128,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
9->1;
}
// Function: 3255.sol-LOLlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
lol_offical_bank = LOLOfficalBankInterface(0xF66E2D098D85b803D5ae710008fCc876c8656fFd)

IRs:
TMP_427 = CONVERT 1406868734898026578161508615610945607651788419069 to LOLOfficalBankInterface
lol_offical_bank(LOLOfficalBankInterface) := TMP_427(LOLOfficalBankInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PlayerBook = LOLPlayerBookInterface(0xb9Db77600A611c1DfC923c2c8b513cB1Fc4Fe113)

IRs:
TMP_428 = CONVERT 1061057554843818125366951042400109972791743209747 to LOLPlayerBookInterface
PlayerBook(LOLPlayerBookInterface) := TMP_428(LOLPlayerBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = LOL Official

IRs:
name(string) := LOL Official(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = LOL

IRs:
symbol(string) := LOL(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 3255.sol-LOLlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 3600

IRs:
rndExtra_(uint256) := 3600(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 86400

IRs:
rndGap_(uint256) := 86400(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3255.sol-LOLlong-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 3255.sol-LOLlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_332(uint256) = INTERNAL_CALL, LOLlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_332(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_333(bool) = _earnings > 0
CONDITION TMP_333"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_544(LOLdatasets.Player) -> plyr_[_pID]
REF_545(uint256) -> REF_544.gen
REF_547(LOLdatasets.Player) -> plyr_[_pID]
REF_548(uint256) -> REF_547.gen
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_548'] 
REF_545(uint256) (->plyr_) := TMP_334(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_549(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_550(LOLdatasets.PlayerRounds) -> REF_549[_rIDlast]
REF_551(uint256) -> REF_550.mask
REF_553(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_554(LOLdatasets.PlayerRounds) -> REF_553[_rIDlast]
REF_555(uint256) -> REF_554.mask
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_555'] 
REF_551(uint256) (->plyrRnds_) := TMP_335(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3255.sol-LOLlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_614(LOLdatasets.Round) -> round_[_rID]
REF_615(uint256) -> REF_614.keys
TMP_396(uint256) = TMP_395 / REF_615
_ppt(uint256) := TMP_396(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_616(LOLdatasets.Round) -> round_[_rID]
REF_617(uint256) -> REF_616.mask
REF_619(LOLdatasets.Round) -> round_[_rID]
REF_620(uint256) -> REF_619.mask
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_620'] 
REF_617(uint256) (->round_) := TMP_397(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_399(uint256) = TMP_398 / 1000000000000000000
_pearn(uint256) := TMP_399(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_622(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_623(LOLdatasets.PlayerRounds) -> REF_622[_rID]
REF_624(uint256) -> REF_623.mask
REF_625(LOLdatasets.Round) -> round_[_rID]
REF_626(uint256) -> REF_625.mask
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_626', '_keys'] 
TMP_401(uint256) = TMP_400 / 1000000000000000000
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_401', '_pearn'] 
REF_630(mapping(uint256 => LOLdatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_631(LOLdatasets.PlayerRounds) -> REF_630[_rID]
REF_632(uint256) -> REF_631.mask
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_402', 'REF_632'] 
REF_624(uint256) (->plyrRnds_) := TMP_403(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_635(LOLdatasets.Round) -> round_[_rID]
REF_636(uint256) -> REF_635.keys
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_636'] 
TMP_405(uint256) = TMP_404 / 1000000000000000000
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_405'] 
RETURN TMP_406"];
}
// Function: 3255.sol-LOLlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_556(LOLdatasets.Round) -> round_[_rID]
REF_557(uint256) -> REF_556.end
TMP_336(bool) = _now > REF_557
REF_558(LOLdatasets.Round) -> round_[_rID]
REF_559(uint256) -> REF_558.plyr
TMP_337(bool) = REF_559 == 0
TMP_338(bool) = TMP_336 && TMP_337
CONDITION TMP_338"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_339(uint256) = _keys / 1000000000000000000
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_339', 'rndInc_'] 
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_340', '_now'] 
_newTime(uint256) := TMP_341(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_342(uint256) = _keys / 1000000000000000000
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_342', 'rndInc_'] 
REF_564(LOLdatasets.Round) -> round_[_rID]
REF_565(uint256) -> REF_564.end
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_343', 'REF_565'] 
_newTime(uint256) := TMP_344(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_346(bool) = _newTime < TMP_345
CONDITION TMP_346"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_567(LOLdatasets.Round) -> round_[_rID]
REF_568(uint256) -> REF_567.end
REF_568(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_569(LOLdatasets.Round) -> round_[_rID]
REF_570(uint256) -> REF_569.end
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_570(uint256) (->round_) := TMP_347(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3255.sol-LOLlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_288(bool) = _team < 0
TMP_289(bool) = _team > 3
TMP_290(bool) = TMP_288 || TMP_289
CONDITION TMP_290"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3255.sol-LOLlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(LOLdatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_82(bool) = _now > REF_71
REF_72(LOLdatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_83(bool) = REF_73 == False
TMP_84(bool) = TMP_82 && TMP_83
REF_74(LOLdatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_85(bool) = REF_75 != 0
TMP_86(bool) = TMP_84 && TMP_85
CONDITION TMP_86"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(LOLdatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_87(LOLdatasets.EventReturns) = INTERNAL_CALL, LOLlong.endRound(LOLdatasets.EventReturns)(_eventData_)
_eventData_(LOLdatasets.EventReturns) := TMP_87(LOLdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_88(uint256) = INTERNAL_CALL, LOLlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_88(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_89(bool) = _eth > 0
CONDITION TMP_89"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_78(LOLdatasets.Player) -> plyr_[_pID]
REF_79(address) -> REF_78.addr
Transfer dest:REF_79 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_81(uint256) -> _eventData_.compressedData
REF_82(uint256) -> _eventData_.compressedData
TMP_91(uint256) = _now * 1000000000000000000
TMP_92(uint256) = REF_82 + TMP_91
REF_81(uint256) (->_eventData_) := TMP_92(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_83(uint256) -> _eventData_.compressedIDs
REF_84(uint256) -> _eventData_.compressedIDs
TMP_93(uint256) = REF_84 + _pID
REF_83(uint256) (->_eventData_) := TMP_93(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
LOLevents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_86(LOLdatasets.Player) -> plyr_[_pID]
REF_87(bytes32) -> REF_86.name
REF_88(uint256) -> _eventData_.compressedData
REF_89(uint256) -> _eventData_.compressedIDs
REF_90(address) -> _eventData_.winnerAddr
REF_91(bytes32) -> _eventData_.winnerName
REF_92(uint256) -> _eventData_.amountWon
REF_93(uint256) -> _eventData_.newPot
REF_94(uint256) -> _eventData_.P3DAmount
REF_95(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_87,_eth,REF_88,REF_89,REF_90,REF_91,REF_92,REF_93,REF_94,REF_95)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_95(uint256) = INTERNAL_CALL, LOLlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_95(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_96(bool) = _eth > 0
CONDITION TMP_96"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_96(LOLdatasets.Player) -> plyr_[_pID]
REF_97(address) -> REF_96.addr
Transfer dest:REF_97 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
LOLevents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_100(LOLdatasets.Player) -> plyr_[_pID]
REF_101(bytes32) -> REF_100.name
Emit onWithdraw(_pID,msg.sender,REF_101,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, LOLlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, LOLlong.isHuman()()"];
23->1;
}
// Function: 3255.sol-LOLlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_637(LOLdatasets.Player) -> plyr_[_pID]
REF_638(uint256) -> REF_637.lrnd
INTERNAL_CALL, LOLlong.updateGenVault(uint256,uint256)(_pID,REF_638)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_639(LOLdatasets.Player) -> plyr_[_pID]
REF_640(uint256) -> REF_639.win
REF_642(LOLdatasets.Player) -> plyr_[_pID]
REF_643(uint256) -> REF_642.gen
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_640', 'REF_643'] 
REF_645(LOLdatasets.Player) -> plyr_[_pID]
REF_646(uint256) -> REF_645.aff
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_408', 'REF_646'] 
_earnings(uint256) := TMP_409(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_410(bool) = _earnings > 0
CONDITION TMP_410"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_647(LOLdatasets.Player) -> plyr_[_pID]
REF_648(uint256) -> REF_647.win
REF_648(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_649(LOLdatasets.Player) -> plyr_[_pID]
REF_650(uint256) -> REF_649.gen
REF_650(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_651(LOLdatasets.Player) -> plyr_[_pID]
REF_652(uint256) -> REF_651.aff
REF_652(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3255.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_461 = CONVERT _input to bytes
_temp(bytes) := TMP_461(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_688 -> LENGTH _temp
_length(uint256) := REF_688(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_462(bool) = _length <= 32
TMP_463(bool) = _length > 0
TMP_464(bool) = TMP_462 && TMP_463
TMP_465(None) = SOLIDITY_CALL require(bool,string)(TMP_464,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_689(None) -> _temp[0]
TMP_466(bool) = REF_689 != 32
TMP_467(uint256) = _length - 1
REF_690(None) -> _temp[TMP_467]
TMP_468(bool) = REF_690 != 32
TMP_469(bool) = TMP_466 && TMP_468
TMP_470(None) = SOLIDITY_CALL require(bool,string)(TMP_469,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_691(None) -> _temp[0]
TMP_471(bool) = REF_691 == 48
CONDITION TMP_471"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_692(None) -> _temp[1]
TMP_472(bool) = REF_692 != 120
TMP_473(None) = SOLIDITY_CALL require(bool,string)(TMP_472,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_693(None) -> _temp[1]
TMP_474(bool) = REF_693 != 88
TMP_475(None) = SOLIDITY_CALL require(bool,string)(TMP_474,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_476(bool) = i < _length
CONDITION TMP_476"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_694(None) -> _temp[i]
TMP_477(bool) = REF_694 > 64
REF_695(None) -> _temp[i]
TMP_478(bool) = REF_695 < 91
TMP_479(bool) = TMP_477 && TMP_478
CONDITION TMP_479"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_696(bytes1) -> _temp[i]
REF_697(None) -> _temp[i]
TMP_480 = CONVERT REF_697 to uint256
TMP_481(uint256) = TMP_480 + 32
TMP_482 = CONVERT TMP_481 to bytes1
REF_696(bytes1) (->_temp) := TMP_482(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_483(bool) = _hasNonNumber == False
CONDITION TMP_483"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_698(None) -> _temp[i]
TMP_484(bool) = REF_698 == 32
REF_699(None) -> _temp[i]
TMP_485(bool) = REF_699 > 96
REF_700(None) -> _temp[i]
TMP_486(bool) = REF_700 < 123
TMP_487(bool) = TMP_485 && TMP_486
TMP_488(bool) = TMP_484 || TMP_487
REF_701(None) -> _temp[i]
TMP_489(bool) = REF_701 > 47
REF_702(None) -> _temp[i]
TMP_490(bool) = REF_702 < 58
TMP_491(bool) = TMP_489 && TMP_490
TMP_492(bool) = TMP_488 || TMP_491
TMP_493(None) = SOLIDITY_CALL require(bool,string)(TMP_492,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_703(None) -> _temp[i]
TMP_494(bool) = REF_703 == 32
CONDITION TMP_494"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_495(uint256) = i + 1
REF_704(None) -> _temp[TMP_495]
TMP_496(bool) = REF_704 != 32
TMP_497(None) = SOLIDITY_CALL require(bool,string)(TMP_496,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_498(bool) = _hasNonNumber == False
REF_705(None) -> _temp[i]
TMP_499(bool) = REF_705 < 48
REF_706(None) -> _temp[i]
TMP_500(bool) = REF_706 > 57
TMP_501(bool) = TMP_499 || TMP_500
TMP_502(bool) = TMP_498 && TMP_501
CONDITION TMP_502"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_503(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_504(bool) = _hasNonNumber == True
TMP_505(None) = SOLIDITY_CALL require(bool,string)(TMP_504,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3255.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_1(bool) = msg.sender == newOwner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = address(0)

IRs:
TMP_3 = CONVERT 0 to address
newOwner(address) := TMP_3(address)"];
}
// Function: 3255.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3255.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_4(bool) = msg.sender == owner
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3255.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 3255.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_514(uint256) = a + b
c(uint256) := TMP_514(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_515(bool) = c >= a
TMP_516(None) = SOLIDITY_CALL require(bool,string)(TMP_515,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3255.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_506(bool) = a == 0
CONDITION TMP_506"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_507(uint256) = a * b
c(uint256) := TMP_507(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_508(uint256) = c / a
TMP_509(bool) = TMP_508 == b
TMP_510(None) = SOLIDITY_CALL require(bool,string)(TMP_509,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3255.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_524(bool) = x == 0
CONDITION TMP_524"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_525(bool) = y == 0
CONDITION TMP_525"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_526(bool) = i < y
CONDITION TMP_526"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_527(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_527(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_528(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3255.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_523(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_523"];
}
// Function: 3255.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_517(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_518(uint256) = TMP_517 / 2
z(uint256) := TMP_518(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_519(bool) = z < y
CONDITION TMP_519"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_520(uint256) = x / z
TMP_521(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_520,z)
TMP_522(uint256) = TMP_521 / 2
z(uint256) := TMP_522(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3255.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_511(bool) = b <= a
TMP_512(None) = SOLIDITY_CALL require(bool,string)(TMP_511,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_513(uint256) = a - b
RETURN TMP_513"];
}
}
