digraph G {
// Function: 3323.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_464'] 
TMP_466(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_466'] 
TMP_468(uint256) = TMP_467 / 2
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_465', 'TMP_468'] 
TMP_470(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_471(uint256) = TMP_469 / TMP_470
RETURN TMP_471"];
}
// Function: 3323.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_454(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_456(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_455)
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_454', 'TMP_456'] 
RETURN TMP_457"];
}
// Function: 3323.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_458', '312500000000000000000000000'] 
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_459', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_460'] 
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_461', '74999921875000000000000000000000'] 
TMP_463(uint256) = TMP_462 / 156250000
RETURN TMP_463"];
}
// Function: 3323.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_451(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_450)
TMP_452(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_451', 'TMP_452'] 
RETURN TMP_453"];
}
// Function: 3323.sol-FomoSuper-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_435(bool) = activated_ == False
TMP_436(None) = SOLIDITY_CALL require(bool,string)(TMP_435,FOMO Short already activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_715(F3Ddatasets.Round) -> round_[1]
REF_716(uint256) -> REF_715.strt
TMP_437(uint256) = now + rndExtra_
TMP_438(uint256) = TMP_437 - rndGap_
REF_716(uint256) (->round_) := TMP_438(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_717(F3Ddatasets.Round) -> round_[1]
REF_718(uint256) -> REF_717.end
TMP_439(uint256) = now + rndInit_
TMP_440(uint256) = TMP_439 + rndExtra_
REF_718(uint256) (->round_) := TMP_440(uint256)"];
}
// Function: 3323.sol-FomoSuper-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_349(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_350(bytes32) = SOLIDITY_CALL keccak256()(TMP_349)
TMP_351 = CONVERT TMP_350 to uint256
TMP_352(uint256) = TMP_351 / now
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_348', 'TMP_352'] 
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_353', 'block.gaslimit'] 
TMP_355(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_356(bytes32) = SOLIDITY_CALL keccak256()(TMP_355)
TMP_357 = CONVERT TMP_356 to uint256
TMP_358(uint256) = TMP_357 / now
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_354', 'TMP_358'] 
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_359', 'block.number'] 
TMP_361(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_360)
TMP_362(bytes32) = SOLIDITY_CALL keccak256()(TMP_361)
TMP_363 = CONVERT TMP_362 to uint256
seed(uint256) := TMP_363(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_364(uint256) = seed / 1000
TMP_365(uint256) = TMP_364 * 1000
TMP_366(uint256) = seed - TMP_365
TMP_367(bool) = TMP_366 < airDropTracker_
CONDITION TMP_367"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3323.sol-FomoSuper-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.strt
TMP_156(uint256) = REF_264 + rndGap_
TMP_157(bool) = _now > TMP_156
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.end
TMP_158(bool) = _now <= REF_266
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.end
TMP_159(bool) = _now > REF_268
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.plyr
TMP_160(bool) = REF_270 == 0
TMP_161(bool) = TMP_159 && TMP_160
TMP_162(bool) = TMP_158 || TMP_161
TMP_163(bool) = TMP_157 && TMP_162
CONDITION TMP_163"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.end
TMP_165(bool) = _now > REF_272
REF_273(F3Ddatasets.Round) -> round_[_rID]
REF_274(bool) -> REF_273.ended
TMP_166(bool) = REF_274 == False
TMP_167(bool) = TMP_165 && TMP_166
CONDITION TMP_167"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_275(F3Ddatasets.Round) -> round_[_rID]
REF_276(bool) -> REF_275.ended
REF_276(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_168(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_168(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_277(uint256) -> _eventData_.compressedData
REF_278(uint256) -> _eventData_.compressedData
TMP_169(uint256) = _now * 1000000000000000000
TMP_170(uint256) = REF_278 + TMP_169
REF_277(uint256) (->_eventData_) := TMP_170(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_279(uint256) -> _eventData_.compressedIDs
REF_280(uint256) -> _eventData_.compressedIDs
TMP_171(uint256) = REF_280 + _pID
REF_279(uint256) (->_eventData_) := TMP_171(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_282(F3Ddatasets.Player) -> plyr_[_pID]
REF_283(bytes32) -> REF_282.name
REF_284(uint256) -> _eventData_.compressedData
REF_285(uint256) -> _eventData_.compressedIDs
REF_286(address) -> _eventData_.winnerAddr
REF_287(bytes32) -> _eventData_.winnerName
REF_288(uint256) -> _eventData_.amountWon
REF_289(uint256) -> _eventData_.newPot
REF_290(uint256) -> _eventData_.P3DAmount
REF_291(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_283,msg.value,REF_284,REF_285,REF_286,REF_287,REF_288,REF_289,REF_290,REF_291)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_292(F3Ddatasets.Player) -> plyr_[_pID]
REF_293(uint256) -> REF_292.gen
REF_294(F3Ddatasets.Player) -> plyr_[_pID]
REF_295(uint256) -> REF_294.gen
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_295', 'msg.value'] 
REF_293(uint256) (->plyr_) := TMP_173(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3323.sol-FomoSuper-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_27(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_27(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_30(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_30(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _affCode == TMP_28
TMP_30(bool) = _affCode == msg.sender
TMP_31(bool) = TMP_29 || TMP_30
CONDITION TMP_31"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_31(F3Ddatasets.Player) -> plyr_[_pID]
REF_32(uint256) -> REF_31.laff
_affID(uint256) := REF_32(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_33(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_33(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_34(F3Ddatasets.Player) -> plyr_[_pID]
REF_35(uint256) -> REF_34.laff
TMP_32(bool) = _affID != REF_35
CONDITION TMP_32"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_36(F3Ddatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
REF_37(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_33(uint256) = INTERNAL_CALL, FomoSuper.verifyTeam(uint256)(_team)
_team(uint256) := TMP_33(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoSuper.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3323.sol-FomoSuper-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_17(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_17(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_23(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_23(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_18(bool) = _affCode == 0
TMP_19(bool) = _affCode == _pID
TMP_20(bool) = TMP_18 || TMP_19
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
_affCode(uint256) := REF_25(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_26(F3Ddatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
TMP_21(bool) = _affCode != REF_27
CONDITION TMP_21"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_28(F3Ddatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
REF_29(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_22(uint256) = INTERNAL_CALL, FomoSuper.verifyTeam(uint256)(_team)
_team(uint256) := TMP_22(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoSuper.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 3323.sol-FomoSuper-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_38(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_38(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_38(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_38(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_39(bool) = _affCode == 
REF_39(F3Ddatasets.Player) -> plyr_[_pID]
REF_40(bytes32) -> REF_39.name
TMP_40(bool) = _affCode == REF_40
TMP_41(bool) = TMP_39 || TMP_40
CONDITION TMP_41"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_41(F3Ddatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
_affID(uint256) := REF_42(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_43(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_43(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_44(F3Ddatasets.Player) -> plyr_[_pID]
REF_45(uint256) -> REF_44.laff
TMP_42(bool) = _affID != REF_45
CONDITION TMP_42"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_46(F3Ddatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
REF_47(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_43(uint256) = INTERNAL_CALL, FomoSuper.verifyTeam(uint256)(_team)
_team(uint256) := TMP_43(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoSuper.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3323.sol-FomoSuper-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_428(F3Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.strt
TMP_246(uint256) = REF_429 + rndGap_
TMP_247(bool) = _now > TMP_246
REF_430(F3Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.end
TMP_248(bool) = _now <= REF_431
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.end
TMP_249(bool) = _now > REF_433
REF_434(F3Ddatasets.Round) -> round_[_rID]
REF_435(uint256) -> REF_434.plyr
TMP_250(bool) = REF_435 == 0
TMP_251(bool) = TMP_249 && TMP_250
TMP_252(bool) = TMP_248 || TMP_251
TMP_253(bool) = TMP_247 && TMP_252
CONDITION TMP_253"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.eth
TMP_254(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_437', '_eth'] 
RETURN TMP_254"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_255(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_255"];
}
// Function: 3323.sol-FomoSuper-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_418(F3Ddatasets.Round) -> round_[_rIDlast]
REF_419(uint256) -> REF_418.mask
REF_421(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_422(F3Ddatasets.PlayerRounds) -> REF_421[_rIDlast]
REF_423(uint256) -> REF_422.keys
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_419', 'REF_423'] 
TMP_244(uint256) = TMP_243 / 1000000000000000000
REF_425(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_426(F3Ddatasets.PlayerRounds) -> REF_425[_rIDlast]
REF_427(uint256) -> REF_426.mask
TMP_245(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_244', 'REF_427'] 
RETURN TMP_245"];
}
// Function: 3323.sol-FomoSuper-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(22,6)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(22,6)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(38,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(38,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(52,10)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(52,10)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(68,8)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(68,8)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_16(F3Ddatasets.Round) -> round_[1]
REF_17(uint256) -> REF_16.strt
TMP_8(uint256) = now + rndExtra_
TMP_9(uint256) = TMP_8 - rndGap_
REF_17(uint256) (->round_) := TMP_9(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_18(F3Ddatasets.Round) -> round_[1]
REF_19(uint256) -> REF_18.end
TMP_10(uint256) = now + rndInit_
TMP_11(uint256) = TMP_10 + rndExtra_
REF_19(uint256) (->round_) := TMP_11(uint256)"];
}
// Function: 3323.sol-FomoSuper-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_329(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_330(F3Ddatasets.PlayerRounds) -> REF_329[_rID]
REF_331(uint256) -> REF_330.keys
TMP_193(bool) = REF_331 == 0
CONDITION TMP_193"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_194(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_194(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_332(F3Ddatasets.Round) -> round_[_rID]
REF_333(uint256) -> REF_332.eth
TMP_195(bool) = REF_333 < 100000000000000000000
REF_334(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_335(F3Ddatasets.PlayerRounds) -> REF_334[_rID]
REF_336(uint256) -> REF_335.eth
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_336', '_eth'] 
TMP_197(bool) = TMP_196 > 1000000000000000000
TMP_198(bool) = TMP_195 && TMP_197
CONDITION TMP_198"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_339(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_340(F3Ddatasets.PlayerRounds) -> REF_339[_rID]
REF_341(uint256) -> REF_340.eth
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_341'] 
_availableLimit(uint256) := TMP_199(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_200(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_343(F3Ddatasets.Player) -> plyr_[_pID]
REF_344(uint256) -> REF_343.gen
REF_345(F3Ddatasets.Player) -> plyr_[_pID]
REF_346(uint256) -> REF_345.gen
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_346', '_refund'] 
REF_344(uint256) (->plyr_) := TMP_201(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_202(bool) = _eth > 1000000000
CONDITION TMP_202"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_348(F3Ddatasets.Round) -> round_[_rID]
REF_349(uint256) -> REF_348.eth
TMP_203(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_349', '_eth'] 
_keys(uint256) := TMP_203(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_204(bool) = _keys >= 1000000000000000000
CONDITION TMP_204"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FomoSuper.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_351(F3Ddatasets.Round) -> round_[_rID]
REF_352(uint256) -> REF_351.plyr
TMP_206(bool) = REF_352 != _pID
CONDITION TMP_206"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_353(F3Ddatasets.Round) -> round_[_rID]
REF_354(uint256) -> REF_353.plyr
REF_354(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_355(F3Ddatasets.Round) -> round_[_rID]
REF_356(uint256) -> REF_355.team
TMP_207(bool) = REF_356 != _team
CONDITION TMP_207"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_357(F3Ddatasets.Round) -> round_[_rID]
REF_358(uint256) -> REF_357.team
REF_358(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_359(uint256) -> _eventData_.compressedData
REF_360(uint256) -> _eventData_.compressedData
TMP_208(uint256) = REF_360 + 100
REF_359(uint256) (->_eventData_) := TMP_208(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_209(bool) = _eth >= 100000000000000000
CONDITION TMP_209"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_210(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_211(bool) = INTERNAL_CALL, FomoSuper.airdrop()()
TMP_212(bool) = TMP_211 == True
CONDITION TMP_212"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_213(bool) = _eth >= 10000000000000000000
CONDITION TMP_213"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_215(uint256) = TMP_214 / 100
_prize(uint256) := TMP_215(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_362(F3Ddatasets.Player) -> plyr_[_pID]
REF_363(uint256) -> REF_362.win
REF_364(F3Ddatasets.Player) -> plyr_[_pID]
REF_365(uint256) -> REF_364.win
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_365', '_prize'] 
REF_363(uint256) (->plyr_) := TMP_216(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_217(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_368(uint256) -> _eventData_.compressedData
REF_368(-> _eventData_) = REF_368 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_218(bool) = _eth >= 1000000000000000000
TMP_219(bool) = _eth < 10000000000000000000
TMP_220(bool) = TMP_218 && TMP_219
CONDITION TMP_220"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_222(uint256) = TMP_221 / 100
_prize(uint256) := TMP_222(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_370(F3Ddatasets.Player) -> plyr_[_pID]
REF_371(uint256) -> REF_370.win
REF_372(F3Ddatasets.Player) -> plyr_[_pID]
REF_373(uint256) -> REF_372.win
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_373', '_prize'] 
REF_371(uint256) (->plyr_) := TMP_223(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_224(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_376(uint256) -> _eventData_.compressedData
REF_376(-> _eventData_) = REF_376 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_225(bool) = _eth >= 100000000000000000
TMP_226(bool) = _eth < 1000000000000000000
TMP_227(bool) = TMP_225 && TMP_226
CONDITION TMP_227"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_229(uint256) = TMP_228 / 100
_prize(uint256) := TMP_229(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_378(F3Ddatasets.Player) -> plyr_[_pID]
REF_379(uint256) -> REF_378.win
REF_380(F3Ddatasets.Player) -> plyr_[_pID]
REF_381(uint256) -> REF_380.win
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_381', '_prize'] 
REF_379(uint256) (->plyr_) := TMP_230(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_231(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_384(uint256) -> _eventData_.compressedData
REF_384(-> _eventData_) = REF_384 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_385(uint256) -> _eventData_.compressedData
REF_385(-> _eventData_) = REF_385 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_386(uint256) -> _eventData_.compressedData
TMP_232(uint256) = _prize * 1000000000000000000000000000000000
REF_386(-> _eventData_) = REF_386 + TMP_232"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_387(uint256) -> _eventData_.compressedData
REF_388(uint256) -> _eventData_.compressedData
TMP_233(uint256) = airDropTracker_ * 1000
TMP_234(uint256) = REF_388 + TMP_233
REF_387(uint256) (->_eventData_) := TMP_234(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_389(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_390(F3Ddatasets.PlayerRounds) -> REF_389[_rID]
REF_391(uint256) -> REF_390.keys
REF_393(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_394(F3Ddatasets.PlayerRounds) -> REF_393[_rID]
REF_395(uint256) -> REF_394.keys
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_395'] 
REF_391(uint256) (->plyrRnds_) := TMP_235(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_396(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_397(F3Ddatasets.PlayerRounds) -> REF_396[_rID]
REF_398(uint256) -> REF_397.eth
REF_400(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_401(F3Ddatasets.PlayerRounds) -> REF_400[_rID]
REF_402(uint256) -> REF_401.eth
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_402'] 
REF_398(uint256) (->plyrRnds_) := TMP_236(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_403(F3Ddatasets.Round) -> round_[_rID]
REF_404(uint256) -> REF_403.keys
REF_406(F3Ddatasets.Round) -> round_[_rID]
REF_407(uint256) -> REF_406.keys
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_407'] 
REF_404(uint256) (->round_) := TMP_237(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_408(F3Ddatasets.Round) -> round_[_rID]
REF_409(uint256) -> REF_408.eth
REF_411(F3Ddatasets.Round) -> round_[_rID]
REF_412(uint256) -> REF_411.eth
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_412'] 
REF_409(uint256) (->round_) := TMP_238(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_413(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_414(uint256) -> REF_413[_team]
REF_416(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_417(uint256) -> REF_416[_team]
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_417'] 
REF_414(uint256) (->rndTmEth_) := TMP_239(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_240(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_240(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_241(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_241(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 3323.sol-FomoSuper-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_477(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_477(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_280(bool) = _pID == 0
CONDITION TMP_280"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_281(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_281(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_282(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_282(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_283(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_283(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_481(uint256) -> pIDxAddr_[msg.sender]
REF_481(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_482(F3Ddatasets.Player) -> plyr_[_pID]
REF_483(address) -> REF_482.addr
REF_483(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_284(bool) = _name != 
CONDITION TMP_284"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_484(uint256) -> pIDxName_[_name]
REF_484(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(bytes32) -> REF_485.name
REF_486(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_487(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_488(bool) -> REF_487[_name]
REF_488(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_285(bool) = _laff != 0
TMP_286(bool) = _laff != _pID
TMP_287(bool) = TMP_285 && TMP_286
CONDITION TMP_287"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_489(F3Ddatasets.Player) -> plyr_[_pID]
REF_490(uint256) -> REF_489.laff
REF_490(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_491(uint256) -> _eventData_.compressedData
REF_492(uint256) -> _eventData_.compressedData
TMP_288(uint256) = REF_492 + 1
REF_491(uint256) (->_eventData_) := TMP_288(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3323.sol-FomoSuper-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_368(uint256) = _eth / 100
_p1(uint256) := TMP_368(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_369(uint256) = _eth / 50
_com(uint256) := TMP_369(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_370(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_371 = CONVERT admin to address
TMP_373(bool) = LOW_LEVEL_CALL, dest:TMP_371, function:call, arguments:[] value:_com 
TMP_374 = UnaryType.BANG TMP_373 
CONDITION TMP_374"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_375(uint256) = _eth / 10
_aff(uint256) := TMP_375(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_376(bool) = _affID != _pID
REF_604(F3Ddatasets.Player) -> plyr_[_affID]
REF_605(bytes32) -> REF_604.name
TMP_377(bool) = REF_605 != 
TMP_378(bool) = TMP_376 && TMP_377
CONDITION TMP_378"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_606(F3Ddatasets.Player) -> plyr_[_affID]
REF_607(uint256) -> REF_606.aff
REF_609(F3Ddatasets.Player) -> plyr_[_affID]
REF_610(uint256) -> REF_609.aff
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_610'] 
REF_607(uint256) (->plyr_) := TMP_379(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_612(F3Ddatasets.Player) -> plyr_[_affID]
REF_613(address) -> REF_612.addr
REF_614(F3Ddatasets.Player) -> plyr_[_affID]
REF_615(bytes32) -> REF_614.name
Emit onAffiliatePayout(_affID,REF_613,REF_615,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _p3d.add(_aff)

IRs:
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_aff'] 
_p3d(uint256) := TMP_381(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_619(F3Ddatasets.TeamFee) -> fees_[_team]
REF_620(uint256) -> REF_619.p3d
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_620'] 
TMP_383(uint256) = TMP_382 / 100
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_383'] 
_p3d(uint256) := TMP_384(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_385(bool) = _p3d > 0
CONDITION TMP_385"];
16->17[label="True"];
16->21[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_386(uint256) = _p3d / 2
_potAmount(uint256) := TMP_386(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_387"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_623(F3Ddatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.pot
REF_625(F3Ddatasets.Round) -> round_[_rID]
REF_626(uint256) -> REF_625.pot
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_626', '_potAmount'] 
REF_624(uint256) (->round_) := TMP_389(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_628(uint256) -> _eventData_.P3DAmount
REF_630(uint256) -> _eventData_.P3DAmount
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_630'] 
REF_628(uint256) (->_eventData_) := TMP_390(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3323.sol-FomoSuper-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_638(F3Ddatasets.TeamFee) -> fees_[_team]
REF_639(uint256) -> REF_638.gen
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_639'] 
TMP_395(uint256) = TMP_394 / 100
_gen(uint256) := TMP_395(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_396(uint256) = _eth / 100
_air(uint256) := TMP_396(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_397(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_399(uint256) = TMP_398 / 100
REF_645(F3Ddatasets.TeamFee) -> fees_[_team]
REF_646(uint256) -> REF_645.p3d
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_646'] 
TMP_401(uint256) = TMP_400 / 100
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_399', 'TMP_401'] 
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_402'] 
_eth(uint256) := TMP_403(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_404(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_405(uint256) = INTERNAL_CALL, FomoSuper.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_405(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_406(bool) = _dust > 0
CONDITION TMP_406"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_407(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_649(F3Ddatasets.Round) -> round_[_rID]
REF_650(uint256) -> REF_649.pot
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_653(F3Ddatasets.Round) -> round_[_rID]
REF_654(uint256) -> REF_653.pot
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_408', 'REF_654'] 
REF_650(uint256) (->round_) := TMP_409(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_655(uint256) -> _eventData_.genAmount
REF_657(uint256) -> _eventData_.genAmount
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_657'] 
REF_655(uint256) (->_eventData_) := TMP_410(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_658(uint256) -> _eventData_.potAmount
REF_658(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3323.sol-FomoSuper-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_501(F3Ddatasets.Round) -> round_[_rID]
REF_502(uint256) -> REF_501.plyr
_winPID(uint256) := REF_502(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_503(F3Ddatasets.Round) -> round_[_rID]
REF_504(uint256) -> REF_503.team
_winTID(uint256) := REF_504(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_505(F3Ddatasets.Round) -> round_[_rID]
REF_506(uint256) -> REF_505.pot
_pot(uint256) := REF_506(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_296(uint256) = TMP_295 / 100
_win(uint256) := TMP_296(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_297(uint256) = _pot / 50
_com(uint256) := TMP_297(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_509(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_510(uint256) -> REF_509.gen
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_510'] 
TMP_299(uint256) = TMP_298 / 100
_gen(uint256) := TMP_299(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_512(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_513(uint256) -> REF_512.p3d
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_513'] 
TMP_301(uint256) = TMP_300 / 100
_p3d(uint256) := TMP_301(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_302', '_com'] 
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_303', '_gen'] 
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_304', '_p3d'] 
_res(uint256) := TMP_305(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_519(F3Ddatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.keys
TMP_307(uint256) = TMP_306 / REF_520
_ppt(uint256) := TMP_307(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_523(F3Ddatasets.Round) -> round_[_rID]
REF_524(uint256) -> REF_523.keys
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_524'] 
TMP_309(uint256) = TMP_308 / 1000000000000000000
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_309'] 
_dust(uint256) := TMP_310(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_311(bool) = _dust > 0
CONDITION TMP_311"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_312(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_313(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_527(F3Ddatasets.Player) -> plyr_[_winPID]
REF_528(uint256) -> REF_527.win
REF_530(F3Ddatasets.Player) -> plyr_[_winPID]
REF_531(uint256) -> REF_530.win
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_531'] 
REF_528(uint256) (->plyr_) := TMP_314(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_com = _com.add(_p3d.sub(_p3d / 2))

IRs:
TMP_315(uint256) = _p3d / 2
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_315'] 
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', 'TMP_316'] 
_com(uint256) := TMP_317(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_res = _res.add(_p3d / 2)

IRs:
TMP_319(uint256) = _p3d / 2
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', 'TMP_319'] 
_res(uint256) := TMP_320(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_536(F3Ddatasets.Round) -> round_[_rID]
REF_537(uint256) -> REF_536.mask
REF_539(F3Ddatasets.Round) -> round_[_rID]
REF_540(uint256) -> REF_539.mask
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_540'] 
REF_537(uint256) (->round_) := TMP_321(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_541(uint256) -> _eventData_.compressedData
REF_542(uint256) -> _eventData_.compressedData
REF_543(F3Ddatasets.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.end
TMP_322(uint256) = REF_544 * 1000000
TMP_323(uint256) = REF_542 + TMP_322
REF_541(uint256) (->_eventData_) := TMP_323(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_545(uint256) -> _eventData_.compressedIDs
REF_546(uint256) -> _eventData_.compressedIDs
TMP_324(uint256) = _winPID * 100000000000000000000000000
TMP_325(uint256) = REF_546 + TMP_324
TMP_326(uint256) = _winTID * 100000000000000000
TMP_327(uint256) = TMP_325 + TMP_326
REF_545(uint256) (->_eventData_) := TMP_327(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_547(address) -> _eventData_.winnerAddr
REF_548(F3Ddatasets.Player) -> plyr_[_winPID]
REF_549(address) -> REF_548.addr
REF_547(address) (->_eventData_) := REF_549(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_550(bytes32) -> _eventData_.winnerName
REF_551(F3Ddatasets.Player) -> plyr_[_winPID]
REF_552(bytes32) -> REF_551.name
REF_550(bytes32) (->_eventData_) := REF_552(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_553(uint256) -> _eventData_.amountWon
REF_553(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_554(uint256) -> _eventData_.genAmount
REF_554(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_555(uint256) -> _eventData_.P3DAmount
REF_555(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_556(uint256) -> _eventData_.newPot
REF_556(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_328(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_329(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_557(F3Ddatasets.Round) -> round_[_rID]
REF_558(uint256) -> REF_557.strt
REF_558(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_559(F3Ddatasets.Round) -> round_[_rID]
REF_560(uint256) -> REF_559.end
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_330', 'rndGap_'] 
REF_560(uint256) (->round_) := TMP_331(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_563(F3Ddatasets.Round) -> round_[_rID]
REF_564(uint256) -> REF_563.pot
REF_564(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3323.sol-FomoSuper-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_699(uint256) -> _eventData_.compressedData
REF_700(uint256) -> _eventData_.compressedData
TMP_427(uint256) = now * 1000000000000000000
TMP_428(uint256) = REF_700 + TMP_427
TMP_429(uint256) = _team * 100000000000000000000000000000
TMP_430(uint256) = TMP_428 + TMP_429
REF_699(uint256) (->_eventData_) := TMP_430(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_701(uint256) -> _eventData_.compressedIDs
REF_702(uint256) -> _eventData_.compressedIDs
TMP_431(uint256) = REF_702 + _pID
TMP_432(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_433(uint256) = TMP_431 + TMP_432
REF_701(uint256) (->_eventData_) := TMP_433(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_704(uint256) -> _eventData_.compressedData
REF_705(uint256) -> _eventData_.compressedIDs
REF_706(F3Ddatasets.Player) -> plyr_[_pID]
REF_707(bytes32) -> REF_706.name
REF_708(address) -> _eventData_.winnerAddr
REF_709(bytes32) -> _eventData_.winnerName
REF_710(uint256) -> _eventData_.amountWon
REF_711(uint256) -> _eventData_.newPot
REF_712(uint256) -> _eventData_.P3DAmount
REF_713(uint256) -> _eventData_.genAmount
REF_714(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_704,REF_705,REF_707,msg.sender,_eth,_keys,REF_708,REF_709,REF_710,REF_711,REF_712,REF_713,REF_714,airDropPot_)"];
}
// Function: 3323.sol-FomoSuper-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_12(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_12(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_20(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_21(F3Ddatasets.Player) -> plyr_[_pID]
REF_22(uint256) -> REF_21.laff
INTERNAL_CALL, FomoSuper.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_22,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoSuper.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 3323.sol-FomoSuper-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.strt
TMP_107(uint256) = REF_134 + rndGap_
TMP_108(bool) = _now > TMP_107
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.end
TMP_109(bool) = _now <= REF_136
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.end
TMP_110(bool) = _now > REF_138
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.plyr
TMP_111(bool) = REF_140 == 0
TMP_112(bool) = TMP_110 && TMP_111
TMP_113(bool) = TMP_109 || TMP_112
TMP_114(bool) = TMP_108 && TMP_113
CONDITION TMP_114"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.keys
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_142', '1000000000000000000'] 
TMP_116(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_115', '1000000000000000000'] 
RETURN TMP_116"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3323.sol-FomoSuper-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_215(F3Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.ico
REF_217(F3Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.keys
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.end
REF_221(F3Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.strt
REF_223(F3Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.pot
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.team
REF_227(F3Ddatasets.Round) -> round_[_rID]
REF_228(uint256) -> REF_227.plyr
TMP_147(uint256) = REF_228 * 10
TMP_148(uint256) = REF_226 + TMP_147
REF_229(F3Ddatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.plyr
REF_231(F3Ddatasets.Player) -> plyr_[REF_230]
REF_232(address) -> REF_231.addr
REF_233(F3Ddatasets.Round) -> round_[_rID]
REF_234(uint256) -> REF_233.plyr
REF_235(F3Ddatasets.Player) -> plyr_[REF_234]
REF_236(bytes32) -> REF_235.name
REF_237(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_238(uint256) -> REF_237[0]
REF_239(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_240(uint256) -> REF_239[1]
REF_241(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_242(uint256) -> REF_241[2]
REF_243(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_244(uint256) -> REF_243[3]
TMP_149(uint256) = airDropPot_ * 1000
TMP_150(uint256) = airDropTracker_ + TMP_149
RETURN REF_216,_rID,REF_218,REF_220,REF_222,REF_224,TMP_148,REF_232,REF_236,REF_238,REF_240,REF_242,REF_244,TMP_150"];
}
// Function: 3323.sol-FomoSuper-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_151 = CONVERT 0 to address
TMP_152(bool) = _addr == TMP_151
CONDITION TMP_152"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_153(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_245(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_245(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_246(F3Ddatasets.Player) -> plyr_[_pID]
REF_247(bytes32) -> REF_246.name
REF_248(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_249(F3Ddatasets.PlayerRounds) -> REF_248[_rID]
REF_250(uint256) -> REF_249.keys
REF_251(F3Ddatasets.Player) -> plyr_[_pID]
REF_252(uint256) -> REF_251.win
REF_253(F3Ddatasets.Player) -> plyr_[_pID]
REF_254(uint256) -> REF_253.gen
REF_256(F3Ddatasets.Player) -> plyr_[_pID]
REF_257(uint256) -> REF_256.lrnd
TMP_154(uint256) = INTERNAL_CALL, FomoSuper.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_257)
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_254', 'TMP_154'] 
REF_258(F3Ddatasets.Player) -> plyr_[_pID]
REF_259(uint256) -> REF_258.aff
REF_260(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_261(F3Ddatasets.PlayerRounds) -> REF_260[_rID]
REF_262(uint256) -> REF_261.eth
RETURN _pID,REF_247,REF_250,REF_252,TMP_155,REF_259,REF_262"];
}
// Function: 3323.sol-FomoSuper-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_155(F3Ddatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.end
TMP_123(bool) = now > REF_156
REF_157(F3Ddatasets.Round) -> round_[_rID]
REF_158(bool) -> REF_157.ended
TMP_124(bool) = REF_158 == False
TMP_125(bool) = TMP_123 && TMP_124
REF_159(F3Ddatasets.Round) -> round_[_rID]
REF_160(uint256) -> REF_159.plyr
TMP_126(bool) = REF_160 != 0
TMP_127(bool) = TMP_125 && TMP_126
CONDITION TMP_127"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_161(F3Ddatasets.Round) -> round_[_rID]
REF_162(uint256) -> REF_161.plyr
TMP_128(bool) = REF_162 == _pID
CONDITION TMP_128"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_163(F3Ddatasets.Player) -> plyr_[_pID]
REF_164(uint256) -> REF_163.win
REF_166(F3Ddatasets.Round) -> round_[_rID]
REF_167(uint256) -> REF_166.pot
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_167', '48'] 
TMP_130(uint256) = TMP_129 / 100
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_164', 'TMP_130'] 
REF_169(F3Ddatasets.Player) -> plyr_[_pID]
REF_170(uint256) -> REF_169.gen
TMP_132(uint256) = INTERNAL_CALL, FomoSuper.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_173(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_174(F3Ddatasets.PlayerRounds) -> REF_173[_rID]
REF_175(uint256) -> REF_174.mask
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_132', 'REF_175'] 
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_170', 'TMP_133'] 
REF_176(F3Ddatasets.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.aff
RETURN TMP_131,TMP_134,REF_177"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_178(F3Ddatasets.Player) -> plyr_[_pID]
REF_179(uint256) -> REF_178.win
REF_180(F3Ddatasets.Player) -> plyr_[_pID]
REF_181(uint256) -> REF_180.gen
TMP_135(uint256) = INTERNAL_CALL, FomoSuper.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_184(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_185(F3Ddatasets.PlayerRounds) -> REF_184[_rID]
REF_186(uint256) -> REF_185.mask
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_135', 'REF_186'] 
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_181', 'TMP_136'] 
REF_187(F3Ddatasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.aff
RETURN REF_179,TMP_137,REF_188"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_189(F3Ddatasets.Player) -> plyr_[_pID]
REF_190(uint256) -> REF_189.win
REF_191(F3Ddatasets.Player) -> plyr_[_pID]
REF_192(uint256) -> REF_191.gen
REF_194(F3Ddatasets.Player) -> plyr_[_pID]
REF_195(uint256) -> REF_194.lrnd
TMP_138(uint256) = INTERNAL_CALL, FomoSuper.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_195)
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_192', 'TMP_138'] 
REF_196(F3Ddatasets.Player) -> plyr_[_pID]
REF_197(uint256) -> REF_196.aff
RETURN REF_190,TMP_139,REF_197"];
}
// Function: 3323.sol-FomoSuper-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_198(F3Ddatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.mask
REF_201(F3Ddatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.pot
REF_204(F3Ddatasets.Round) -> round_[_rID]
REF_205(uint256) -> REF_204.team
REF_206(F3Ddatasets.PotSplit) -> potSplit_[REF_205]
REF_207(uint256) -> REF_206.gen
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_202', 'REF_207'] 
TMP_141(uint256) = TMP_140 / 100
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_141', '1000000000000000000'] 
REF_209(F3Ddatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.keys
TMP_143(uint256) = TMP_142 / REF_210
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_199', 'TMP_143'] 
REF_212(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_213(F3Ddatasets.PlayerRounds) -> REF_212[_rID]
REF_214(uint256) -> REF_213.keys
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_144', 'REF_214'] 
TMP_146(uint256) = TMP_145 / 1000000000000000000
RETURN TMP_146"];
}
// Function: 3323.sol-FomoSuper-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_145(F3Ddatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_117(bool) = _now < REF_146
CONDITION TMP_117"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.strt
TMP_118(uint256) = REF_148 + rndGap_
TMP_119(bool) = _now > TMP_118
CONDITION TMP_119"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.end
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_150', '_now'] 
RETURN TMP_120"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_152(F3Ddatasets.Round) -> round_[_rID]
REF_153(uint256) -> REF_152.strt
TMP_121(uint256) = REF_153 + rndGap_
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_121', '_now'] 
RETURN TMP_122"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3323.sol-FomoSuper-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_440(F3Ddatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.strt
TMP_256(uint256) = REF_441 + rndGap_
TMP_257(bool) = _now > TMP_256
REF_442(F3Ddatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.end
TMP_258(bool) = _now <= REF_443
REF_444(F3Ddatasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.end
TMP_259(bool) = _now > REF_445
REF_446(F3Ddatasets.Round) -> round_[_rID]
REF_447(uint256) -> REF_446.plyr
TMP_260(bool) = REF_447 == 0
TMP_261(bool) = TMP_259 && TMP_260
TMP_262(bool) = TMP_258 || TMP_261
TMP_263(bool) = TMP_257 && TMP_262
CONDITION TMP_263"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_448(F3Ddatasets.Round) -> round_[_rID]
REF_449(uint256) -> REF_448.keys
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_449', '_keys'] 
TMP_265(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_264', '_keys'] 
RETURN TMP_265"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_266(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_266"];
}
// Function: 3323.sol-FomoSuper-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_442(bool) = activated_ == True
TMP_443(None) = SOLIDITY_CALL require(bool,string)(TMP_442,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3323.sol-FomoSuper-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_444(bool) = _codeLength == 0
TMP_445(None) = SOLIDITY_CALL require(bool,string)(TMP_444,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3323.sol-FomoSuper-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_446(bool) = _eth >= 1000000000
TMP_447(None) = SOLIDITY_CALL require(bool,string)(TMP_446,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_448(bool) = _eth <= 100000000000000000000000
TMP_449(None) = SOLIDITY_CALL require(bool,string)(TMP_448,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3323.sol-FomoSuper-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_493(F3Ddatasets.Player) -> plyr_[_pID]
REF_494(uint256) -> REF_493.lrnd
TMP_292(bool) = REF_494 != 0
CONDITION TMP_292"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_495(F3Ddatasets.Player) -> plyr_[_pID]
REF_496(uint256) -> REF_495.lrnd
INTERNAL_CALL, FomoSuper.updateGenVault(uint256,uint256)(_pID,REF_496)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_497(F3Ddatasets.Player) -> plyr_[_pID]
REF_498(uint256) -> REF_497.lrnd
REF_498(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_499(uint256) -> _eventData_.compressedData
REF_500(uint256) -> _eventData_.compressedData
TMP_294(uint256) = REF_500 + 10
REF_499(uint256) (->_eventData_) := TMP_294(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3323.sol-FomoSuper-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_391(uint256) = rID_ + 1
_rID(uint256) := TMP_391(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_631(F3Ddatasets.Round) -> round_[_rID]
REF_632(uint256) -> REF_631.pot
REF_633(F3Ddatasets.Round) -> round_[_rID]
REF_634(uint256) -> REF_633.pot
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_634', 'msg.value'] 
REF_632(uint256) (->round_) := TMP_392(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 3323.sol-FomoSuper-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_297(F3Ddatasets.Round) -> round_[_rID]
REF_298(uint256) -> REF_297.strt
TMP_174(uint256) = REF_298 + rndGap_
TMP_175(bool) = _now > TMP_174
REF_299(F3Ddatasets.Round) -> round_[_rID]
REF_300(uint256) -> REF_299.end
TMP_176(bool) = _now <= REF_300
REF_301(F3Ddatasets.Round) -> round_[_rID]
REF_302(uint256) -> REF_301.end
TMP_177(bool) = _now > REF_302
REF_303(F3Ddatasets.Round) -> round_[_rID]
REF_304(uint256) -> REF_303.plyr
TMP_178(bool) = REF_304 == 0
TMP_179(bool) = TMP_177 && TMP_178
TMP_180(bool) = TMP_176 || TMP_179
TMP_181(bool) = TMP_175 && TMP_180
CONDITION TMP_181"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_305(F3Ddatasets.Player) -> plyr_[_pID]
REF_306(uint256) -> REF_305.gen
TMP_182(uint256) = INTERNAL_CALL, FomoSuper.withdrawEarnings(uint256)(_pID)
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_182', '_eth'] 
REF_306(uint256) (->plyr_) := TMP_183(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_308(F3Ddatasets.Round) -> round_[_rID]
REF_309(uint256) -> REF_308.end
TMP_185(bool) = _now > REF_309
REF_310(F3Ddatasets.Round) -> round_[_rID]
REF_311(bool) -> REF_310.ended
TMP_186(bool) = REF_311 == False
TMP_187(bool) = TMP_185 && TMP_186
CONDITION TMP_187"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_312(F3Ddatasets.Round) -> round_[_rID]
REF_313(bool) -> REF_312.ended
REF_313(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_188(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_188(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_314(uint256) -> _eventData_.compressedData
REF_315(uint256) -> _eventData_.compressedData
TMP_189(uint256) = _now * 1000000000000000000
TMP_190(uint256) = REF_315 + TMP_189
REF_314(uint256) (->_eventData_) := TMP_190(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_316(uint256) -> _eventData_.compressedIDs
REF_317(uint256) -> _eventData_.compressedIDs
TMP_191(uint256) = REF_317 + _pID
REF_316(uint256) (->_eventData_) := TMP_191(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_319(F3Ddatasets.Player) -> plyr_[_pID]
REF_320(bytes32) -> REF_319.name
REF_321(uint256) -> _eventData_.compressedData
REF_322(uint256) -> _eventData_.compressedIDs
REF_323(address) -> _eventData_.winnerAddr
REF_324(bytes32) -> _eventData_.winnerName
REF_325(uint256) -> _eventData_.amountWon
REF_326(uint256) -> _eventData_.newPot
REF_327(uint256) -> _eventData_.P3DAmount
REF_328(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_320,REF_321,REF_322,REF_323,REF_324,REF_325,REF_326,REF_327,REF_328)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3323.sol-FomoSuper-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_55(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_55(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_57 = CONVERT 0 to address
TMP_58(bool) = _affCode == TMP_57
TMP_59(bool) = _affCode == msg.sender
TMP_60(bool) = TMP_58 || TMP_59
CONDITION TMP_60"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
_affID(uint256) := REF_57(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_58(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_58(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_59(F3Ddatasets.Player) -> plyr_[_pID]
REF_60(uint256) -> REF_59.laff
TMP_61(bool) = _affID != REF_60
CONDITION TMP_61"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
REF_62(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_62(uint256) = INTERNAL_CALL, FomoSuper.verifyTeam(uint256)(_team)
_team(uint256) := TMP_62(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FomoSuper.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3323.sol-FomoSuper-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_48(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_48(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_48(bool) = _affCode == 0
TMP_49(bool) = _affCode == _pID
TMP_50(bool) = TMP_48 || TMP_49
CONDITION TMP_50"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
_affCode(uint256) := REF_50(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
TMP_51(bool) = _affCode != REF_52
CONDITION TMP_51"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_53(F3Ddatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
REF_54(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_52(uint256) = INTERNAL_CALL, FomoSuper.verifyTeam(uint256)(_team)
_team(uint256) := TMP_52(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FomoSuper.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 3323.sol-FomoSuper-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_63(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_63(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_67(bool) = _affCode == 
REF_64(F3Ddatasets.Player) -> plyr_[_pID]
REF_65(bytes32) -> REF_64.name
TMP_68(bool) = _affCode == REF_65
TMP_69(bool) = TMP_67 || TMP_68
CONDITION TMP_69"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
_affID(uint256) := REF_67(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_68(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_68(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_69(F3Ddatasets.Player) -> plyr_[_pID]
REF_70(uint256) -> REF_69.laff
TMP_70(bool) = _affID != REF_70
CONDITION TMP_70"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
REF_72(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_71(uint256) = INTERNAL_CALL, FomoSuper.verifyTeam(uint256)(_team)
_team(uint256) := TMP_71(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FomoSuper.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FomoSuper.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3323.sol-FomoSuper-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_267 = CONVERT PlayerBook to address
TMP_268(bool) = msg.sender == TMP_267
TMP_269(None) = SOLIDITY_CALL require(bool,string)(TMP_268,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_453(uint256) -> pIDxAddr_[_addr]
TMP_270(bool) = REF_453 != _pID
CONDITION TMP_270"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_454(uint256) -> pIDxAddr_[_addr]
REF_454(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_455(uint256) -> pIDxName_[_name]
TMP_271(bool) = REF_455 != _pID
CONDITION TMP_271"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_456(uint256) -> pIDxName_[_name]
REF_456(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_pID]
REF_458(address) -> REF_457.addr
TMP_272(bool) = REF_458 != _addr
CONDITION TMP_272"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_459(F3Ddatasets.Player) -> plyr_[_pID]
REF_460(address) -> REF_459.addr
REF_460(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_461(F3Ddatasets.Player) -> plyr_[_pID]
REF_462(bytes32) -> REF_461.name
TMP_273(bool) = REF_462 != _name
CONDITION TMP_273"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_463(F3Ddatasets.Player) -> plyr_[_pID]
REF_464(bytes32) -> REF_463.name
REF_464(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_465(F3Ddatasets.Player) -> plyr_[_pID]
REF_466(uint256) -> REF_465.laff
TMP_274(bool) = REF_466 != _laff
CONDITION TMP_274"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_467(F3Ddatasets.Player) -> plyr_[_pID]
REF_468(uint256) -> REF_467.laff
REF_468(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_469(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_470(bool) -> REF_469[_name]
TMP_275(bool) = REF_470 == False
CONDITION TMP_275"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_471(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_472(bool) -> REF_471[_name]
REF_472(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3323.sol-FomoSuper-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_276 = CONVERT PlayerBook to address
TMP_277(bool) = msg.sender == TMP_276
TMP_278(None) = SOLIDITY_CALL require(bool,string)(TMP_277,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_473(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_474(bool) -> REF_473[_name]
TMP_279(bool) = REF_474 == False
CONDITION TMP_279"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_475(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_476(bool) -> REF_475[_name]
REF_476(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3323.sol-FomoSuper-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_95(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_95(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_109(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_109(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_111(F3Ddatasets.Player) -> plyr_[_affID]
REF_112(address) -> REF_111.addr
REF_113(F3Ddatasets.Player) -> plyr_[_affID]
REF_114(bytes32) -> REF_113.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_112,REF_114,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
9->1;
}
// Function: 3323.sol-FomoSuper-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_99(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_99(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_118(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_118(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_120(F3Ddatasets.Player) -> plyr_[_affID]
REF_121(address) -> REF_120.addr
REF_122(F3Ddatasets.Player) -> plyr_[_affID]
REF_123(bytes32) -> REF_122.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_121,REF_123,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
9->1;
}
// Function: 3323.sol-FomoSuper-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_103(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_103(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_127(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_127(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_129(F3Ddatasets.Player) -> plyr_[_affID]
REF_130(address) -> REF_129.addr
REF_131(F3Ddatasets.Player) -> plyr_[_affID]
REF_132(bytes32) -> REF_131.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_130,REF_132,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
9->1;
}
// Function: 3323.sol-FomoSuper-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x004f29f33530cfa4a9f10e1a83ca4063ce96df7149)

IRs:
TMP_441 = CONVERT 451945787833551031539625096505808040302011707721 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_441(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = FomoSuper

IRs:
name(string) := FomoSuper(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = FomoSuper

IRs:
symbol(string) := FomoSuper(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 480

IRs:
rndInit_(uint256) := 480(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 1

IRs:
rndInc_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 600

IRs:
rndMax_(uint256) := 600(uint256)"];
}
// Function: 3323.sol-FomoSuper-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 120

IRs:
rndGap_(uint256) := 120(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3323.sol-FomoSuper-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_332(uint256) = INTERNAL_CALL, FomoSuper.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_332(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_333(bool) = _earnings > 0
CONDITION TMP_333"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_565(F3Ddatasets.Player) -> plyr_[_pID]
REF_566(uint256) -> REF_565.gen
REF_568(F3Ddatasets.Player) -> plyr_[_pID]
REF_569(uint256) -> REF_568.gen
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_569'] 
REF_566(uint256) (->plyr_) := TMP_334(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_570(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_571(F3Ddatasets.PlayerRounds) -> REF_570[_rIDlast]
REF_572(uint256) -> REF_571.mask
REF_574(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_575(F3Ddatasets.PlayerRounds) -> REF_574[_rIDlast]
REF_576(uint256) -> REF_575.mask
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_576'] 
REF_572(uint256) (->plyrRnds_) := TMP_335(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3323.sol-FomoSuper-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_660(F3Ddatasets.Round) -> round_[_rID]
REF_661(uint256) -> REF_660.keys
TMP_412(uint256) = TMP_411 / REF_661
_ppt(uint256) := TMP_412(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_662(F3Ddatasets.Round) -> round_[_rID]
REF_663(uint256) -> REF_662.mask
REF_665(F3Ddatasets.Round) -> round_[_rID]
REF_666(uint256) -> REF_665.mask
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_666'] 
REF_663(uint256) (->round_) := TMP_413(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_415(uint256) = TMP_414 / 1000000000000000000
_pearn(uint256) := TMP_415(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_668(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_669(F3Ddatasets.PlayerRounds) -> REF_668[_rID]
REF_670(uint256) -> REF_669.mask
REF_671(F3Ddatasets.Round) -> round_[_rID]
REF_672(uint256) -> REF_671.mask
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_672', '_keys'] 
TMP_417(uint256) = TMP_416 / 1000000000000000000
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_417', '_pearn'] 
REF_676(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_677(F3Ddatasets.PlayerRounds) -> REF_676[_rID]
REF_678(uint256) -> REF_677.mask
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_418', 'REF_678'] 
REF_670(uint256) (->plyrRnds_) := TMP_419(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_681(F3Ddatasets.Round) -> round_[_rID]
REF_682(uint256) -> REF_681.keys
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_682'] 
TMP_421(uint256) = TMP_420 / 1000000000000000000
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_421'] 
RETURN TMP_422"];
}
// Function: 3323.sol-FomoSuper-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_577(F3Ddatasets.Round) -> round_[_rID]
REF_578(uint256) -> REF_577.end
TMP_336(bool) = _now > REF_578
REF_579(F3Ddatasets.Round) -> round_[_rID]
REF_580(uint256) -> REF_579.plyr
TMP_337(bool) = REF_580 == 0
TMP_338(bool) = TMP_336 && TMP_337
CONDITION TMP_338"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_339(uint256) = _keys / 1000000000000000000
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_339', 'rndInc_'] 
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_340', '_now'] 
_newTime(uint256) := TMP_341(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_342(uint256) = _keys / 1000000000000000000
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_342', 'rndInc_'] 
REF_585(F3Ddatasets.Round) -> round_[_rID]
REF_586(uint256) -> REF_585.end
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_343', 'REF_586'] 
_newTime(uint256) := TMP_344(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_346(bool) = _newTime < TMP_345
CONDITION TMP_346"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_588(F3Ddatasets.Round) -> round_[_rID]
REF_589(uint256) -> REF_588.end
REF_589(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_590(F3Ddatasets.Round) -> round_[_rID]
REF_591(uint256) -> REF_590.end
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_591(uint256) (->round_) := TMP_347(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3323.sol-FomoSuper-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_289(bool) = _team < 0
TMP_290(bool) = _team > 3
TMP_291(bool) = TMP_289 || TMP_290
CONDITION TMP_291"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3323.sol-FomoSuper-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_73(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_73(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.end
TMP_76(bool) = _now > REF_75
REF_76(F3Ddatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
TMP_77(bool) = REF_77 == False
TMP_78(bool) = TMP_76 && TMP_77
REF_78(F3Ddatasets.Round) -> round_[_rID]
REF_79(uint256) -> REF_78.plyr
TMP_79(bool) = REF_79 != 0
TMP_80(bool) = TMP_78 && TMP_79
CONDITION TMP_80"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_80(F3Ddatasets.Round) -> round_[_rID]
REF_81(bool) -> REF_80.ended
REF_81(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_81(F3Ddatasets.EventReturns) = INTERNAL_CALL, FomoSuper.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_81(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_82(uint256) = INTERNAL_CALL, FomoSuper.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_82(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_83(bool) = _eth > 0
CONDITION TMP_83"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_82(F3Ddatasets.Player) -> plyr_[_pID]
REF_83(address) -> REF_82.addr
Transfer dest:REF_83 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_85(uint256) -> _eventData_.compressedData
REF_86(uint256) -> _eventData_.compressedData
TMP_85(uint256) = _now * 1000000000000000000
TMP_86(uint256) = REF_86 + TMP_85
REF_85(uint256) (->_eventData_) := TMP_86(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_87(uint256) -> _eventData_.compressedIDs
REF_88(uint256) -> _eventData_.compressedIDs
TMP_87(uint256) = REF_88 + _pID
REF_87(uint256) (->_eventData_) := TMP_87(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_90(F3Ddatasets.Player) -> plyr_[_pID]
REF_91(bytes32) -> REF_90.name
REF_92(uint256) -> _eventData_.compressedData
REF_93(uint256) -> _eventData_.compressedIDs
REF_94(address) -> _eventData_.winnerAddr
REF_95(bytes32) -> _eventData_.winnerName
REF_96(uint256) -> _eventData_.amountWon
REF_97(uint256) -> _eventData_.newPot
REF_98(uint256) -> _eventData_.P3DAmount
REF_99(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_91,_eth,REF_92,REF_93,REF_94,REF_95,REF_96,REF_97,REF_98,REF_99)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_89(uint256) = INTERNAL_CALL, FomoSuper.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_89(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_90(bool) = _eth > 0
CONDITION TMP_90"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_100(F3Ddatasets.Player) -> plyr_[_pID]
REF_101(address) -> REF_100.addr
Transfer dest:REF_101 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_104(F3Ddatasets.Player) -> plyr_[_pID]
REF_105(bytes32) -> REF_104.name
Emit onWithdraw(_pID,msg.sender,REF_105,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoSuper.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoSuper.isHuman()()"];
23->1;
}
// Function: 3323.sol-FomoSuper-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_683(F3Ddatasets.Player) -> plyr_[_pID]
REF_684(uint256) -> REF_683.lrnd
INTERNAL_CALL, FomoSuper.updateGenVault(uint256,uint256)(_pID,REF_684)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_685(F3Ddatasets.Player) -> plyr_[_pID]
REF_686(uint256) -> REF_685.win
REF_688(F3Ddatasets.Player) -> plyr_[_pID]
REF_689(uint256) -> REF_688.gen
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_686', 'REF_689'] 
REF_691(F3Ddatasets.Player) -> plyr_[_pID]
REF_692(uint256) -> REF_691.aff
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_424', 'REF_692'] 
_earnings(uint256) := TMP_425(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_426(bool) = _earnings > 0
CONDITION TMP_426"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_693(F3Ddatasets.Player) -> plyr_[_pID]
REF_694(uint256) -> REF_693.win
REF_694(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_695(F3Ddatasets.Player) -> plyr_[_pID]
REF_696(uint256) -> REF_695.gen
REF_696(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_697(F3Ddatasets.Player) -> plyr_[_pID]
REF_698(uint256) -> REF_697.aff
REF_698(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3323.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_472 = CONVERT _input to bytes
_temp(bytes) := TMP_472(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_734 -> LENGTH _temp
_length(uint256) := REF_734(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_473(bool) = _length <= 32
TMP_474(bool) = _length > 0
TMP_475(bool) = TMP_473 && TMP_474
TMP_476(None) = SOLIDITY_CALL require(bool,string)(TMP_475,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_735(None) -> _temp[0]
TMP_477(bool) = REF_735 != 32
TMP_478(uint256) = _length - 1
REF_736(None) -> _temp[TMP_478]
TMP_479(bool) = REF_736 != 32
TMP_480(bool) = TMP_477 && TMP_479
TMP_481(None) = SOLIDITY_CALL require(bool,string)(TMP_480,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_737(None) -> _temp[0]
TMP_482(bool) = REF_737 == 48
CONDITION TMP_482"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_738(None) -> _temp[1]
TMP_483(bool) = REF_738 != 120
TMP_484(None) = SOLIDITY_CALL require(bool,string)(TMP_483,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_739(None) -> _temp[1]
TMP_485(bool) = REF_739 != 88
TMP_486(None) = SOLIDITY_CALL require(bool,string)(TMP_485,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_487(bool) = i < _length
CONDITION TMP_487"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_740(None) -> _temp[i]
TMP_488(bool) = REF_740 > 64
REF_741(None) -> _temp[i]
TMP_489(bool) = REF_741 < 91
TMP_490(bool) = TMP_488 && TMP_489
CONDITION TMP_490"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_742(bytes1) -> _temp[i]
REF_743(None) -> _temp[i]
TMP_491 = CONVERT REF_743 to uint256
TMP_492(uint256) = TMP_491 + 32
TMP_493 = CONVERT TMP_492 to bytes1
REF_742(bytes1) (->_temp) := TMP_493(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_494(bool) = _hasNonNumber == False
CONDITION TMP_494"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_744(None) -> _temp[i]
TMP_495(bool) = REF_744 == 32
REF_745(None) -> _temp[i]
TMP_496(bool) = REF_745 > 96
REF_746(None) -> _temp[i]
TMP_497(bool) = REF_746 < 123
TMP_498(bool) = TMP_496 && TMP_497
TMP_499(bool) = TMP_495 || TMP_498
REF_747(None) -> _temp[i]
TMP_500(bool) = REF_747 > 47
REF_748(None) -> _temp[i]
TMP_501(bool) = REF_748 < 58
TMP_502(bool) = TMP_500 && TMP_501
TMP_503(bool) = TMP_499 || TMP_502
TMP_504(None) = SOLIDITY_CALL require(bool,string)(TMP_503,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_749(None) -> _temp[i]
TMP_505(bool) = REF_749 == 32
CONDITION TMP_505"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_506(uint256) = i + 1
REF_750(None) -> _temp[TMP_506]
TMP_507(bool) = REF_750 != 32
TMP_508(None) = SOLIDITY_CALL require(bool,string)(TMP_507,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_509(bool) = _hasNonNumber == False
REF_751(None) -> _temp[i]
TMP_510(bool) = REF_751 < 48
REF_752(None) -> _temp[i]
TMP_511(bool) = REF_752 > 57
TMP_512(bool) = TMP_510 || TMP_511
TMP_513(bool) = TMP_509 && TMP_512
CONDITION TMP_513"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_514(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_515(bool) = _hasNonNumber == True
TMP_516(None) = SOLIDITY_CALL require(bool,string)(TMP_515,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3323.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 3323.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3323.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3323.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3323.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3323.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3323.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3323.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3323.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_525(uint256) = a + b
c(uint256) := TMP_525(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_526(bool) = c >= a
TMP_527(None) = SOLIDITY_CALL require(bool,string)(TMP_526,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3323.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_517(bool) = a == 0
CONDITION TMP_517"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_518(uint256) = a * b
c(uint256) := TMP_518(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_519(uint256) = c / a
TMP_520(bool) = TMP_519 == b
TMP_521(None) = SOLIDITY_CALL require(bool,string)(TMP_520,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3323.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_535(bool) = x == 0
CONDITION TMP_535"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_536(bool) = y == 0
CONDITION TMP_536"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_537(bool) = i < y
CONDITION TMP_537"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_538(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_538(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_539(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3323.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_534(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_534"];
}
// Function: 3323.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_528(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_529(uint256) = TMP_528 / 2
z(uint256) := TMP_529(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_530(bool) = z < y
CONDITION TMP_530"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_531(uint256) = x / z
TMP_532(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_531,z)
TMP_533(uint256) = TMP_532 / 2
z(uint256) := TMP_533(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3323.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_522(bool) = b <= a
TMP_523(None) = SOLIDITY_CALL require(bool,string)(TMP_522,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_524(uint256) = a - b
RETURN TMP_524"];
}
}
