digraph G {
// Function: 3488.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_417 = CONVERT _input to bytes
_temp(bytes) := TMP_417(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_522 -> LENGTH _temp
_length(uint256) := REF_522(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_418(bool) = _length <= 32
TMP_419(bool) = _length > 0
TMP_420(bool) = TMP_418 && TMP_419
TMP_421(None) = SOLIDITY_CALL require(bool,string)(TMP_420,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_523(None) -> _temp[0]
TMP_422(bool) = REF_523 != 32
TMP_423(uint256) = _length - 1
REF_524(None) -> _temp[TMP_423]
TMP_424(bool) = REF_524 != 32
TMP_425(bool) = TMP_422 && TMP_424
TMP_426(None) = SOLIDITY_CALL require(bool,string)(TMP_425,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_525(None) -> _temp[0]
TMP_427(bool) = REF_525 == 48
CONDITION TMP_427"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_526(None) -> _temp[1]
TMP_428(bool) = REF_526 != 120
TMP_429(None) = SOLIDITY_CALL require(bool,string)(TMP_428,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_527(None) -> _temp[1]
TMP_430(bool) = REF_527 != 88
TMP_431(None) = SOLIDITY_CALL require(bool,string)(TMP_430,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_432(bool) = i < _length
CONDITION TMP_432"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_528(None) -> _temp[i]
TMP_433(bool) = REF_528 > 64
REF_529(None) -> _temp[i]
TMP_434(bool) = REF_529 < 91
TMP_435(bool) = TMP_433 && TMP_434
CONDITION TMP_435"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_530(bytes1) -> _temp[i]
REF_531(None) -> _temp[i]
TMP_436 = CONVERT REF_531 to uint256
TMP_437(uint256) = TMP_436 + 32
TMP_438 = CONVERT TMP_437 to bytes1
REF_530(bytes1) (->_temp) := TMP_438(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_439(bool) = _hasNonNumber == False
CONDITION TMP_439"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_532(None) -> _temp[i]
TMP_440(bool) = REF_532 == 32
REF_533(None) -> _temp[i]
TMP_441(bool) = REF_533 > 96
REF_534(None) -> _temp[i]
TMP_442(bool) = REF_534 < 123
TMP_443(bool) = TMP_441 && TMP_442
TMP_444(bool) = TMP_440 || TMP_443
REF_535(None) -> _temp[i]
TMP_445(bool) = REF_535 > 47
REF_536(None) -> _temp[i]
TMP_446(bool) = REF_536 < 58
TMP_447(bool) = TMP_445 && TMP_446
TMP_448(bool) = TMP_444 || TMP_447
TMP_449(None) = SOLIDITY_CALL require(bool,string)(TMP_448,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_537(None) -> _temp[i]
TMP_450(bool) = REF_537 == 32
CONDITION TMP_450"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_451(uint256) = i + 1
REF_538(None) -> _temp[TMP_451]
TMP_452(bool) = REF_538 != 32
TMP_453(None) = SOLIDITY_CALL require(bool,string)(TMP_452,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_454(bool) = _hasNonNumber == False
REF_539(None) -> _temp[i]
TMP_455(bool) = REF_539 < 48
REF_540(None) -> _temp[i]
TMP_456(bool) = REF_540 > 57
TMP_457(bool) = TMP_455 || TMP_456
TMP_458(bool) = TMP_454 && TMP_457
CONDITION TMP_458"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_459(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_460(bool) = _hasNonNumber == True
TMP_461(None) = SOLIDITY_CALL require(bool,string)(TMP_460,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3488.sol-RSKeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_409'] 
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_411'] 
TMP_413(uint256) = TMP_412 / 2
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_410', 'TMP_413'] 
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_416(uint256) = TMP_414 / TMP_415
RETURN TMP_416"];
}
// Function: 3488.sol-RSKeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_399(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(_curKeys)
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_401(uint256) = INTERNAL_CALL, RSKeysCalc.eth(uint256)(TMP_400)
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_399', 'TMP_401'] 
RETURN TMP_402"];
}
// Function: 3488.sol-RSKeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_403', '312500000000000000000000000'] 
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_404', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_405'] 
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_406', '74999921875000000000000000000000'] 
TMP_408(uint256) = TMP_407 / 156250000
RETURN TMP_408"];
}
// Function: 3488.sol-RSKeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_396(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(TMP_395)
TMP_397(uint256) = INTERNAL_CALL, RSKeysCalc.keys(uint256)(_curEth)
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_396', 'TMP_397'] 
RETURN TMP_398"];
}
// Function: 3488.sol-RatBookInterface-getNameFee()
digraph{
}
// Function: 3488.sol-RatBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3488.sol-RatBookInterface-getPlayerID(address)
digraph{
}
// Function: 3488.sol-RatBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3488.sol-RatBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3488.sol-RatBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3488.sol-RatBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3488.sol-RatBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3488.sol-RatInterfaceForForwarder-deposit()
digraph{
}
// Function: 3488.sol-RatScam-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)((msg.sender == 0x20C945800de43394F70D789874a4daC9cFA57451 || msg.sender == 0x83c0Efc6d8B16D87BFe1335AB6BcAb3Ed3960285),only owner can activate)

IRs:
TMP_377(bool) = msg.sender == 187176208773604631198117992174536503321195541585
TMP_378(bool) = msg.sender == 752180421556321703533816132954626702293071168133
TMP_379(bool) = TMP_377 || TMP_378
TMP_380(None) = SOLIDITY_CALL require(bool,string)(TMP_379,only owner can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,ratscam already activated)

IRs:
TMP_381(bool) = activated_ == False
TMP_382(None) = SOLIDITY_CALL require(bool,string)(TMP_381,ratscam already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_.strt = now - rndGap_

IRs:
REF_505(uint256) -> round_.strt
TMP_383(uint256) = now - rndGap_
REF_505(uint256) (->round_) := TMP_383(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_.end = now + rndInit_

IRs:
REF_506(uint256) -> round_.end
TMP_384(uint256) = now + rndInit_
REF_506(uint256) (->round_) := TMP_384(uint256)"];
}
// Function: 3488.sol-RatScam-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_312(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_313(bytes32) = SOLIDITY_CALL keccak256()(TMP_312)
TMP_314 = CONVERT TMP_313 to uint256
TMP_315(uint256) = TMP_314 / now
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_311', 'TMP_315'] 
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_316', 'block.gaslimit'] 
TMP_318(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_319(bytes32) = SOLIDITY_CALL keccak256()(TMP_318)
TMP_320 = CONVERT TMP_319 to uint256
TMP_321(uint256) = TMP_320 / now
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_317', 'TMP_321'] 
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_322', 'block.number'] 
TMP_324(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_323)
TMP_325(bytes32) = SOLIDITY_CALL keccak256()(TMP_324)
TMP_326 = CONVERT TMP_325 to uint256
seed(uint256) := TMP_326(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_327(uint256) = seed / 1000
TMP_328(uint256) = TMP_327 * 1000
TMP_329(uint256) = seed - TMP_328
TMP_330(bool) = TMP_329 < airDropTracker_
CONDITION TMP_330"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3488.sol-RatScam-buyCore(uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_189(uint256) -> round_.strt
TMP_136(uint256) = REF_189 + rndGap_
TMP_137(bool) = _now > TMP_136
REF_190(uint256) -> round_.end
TMP_138(bool) = _now <= REF_190
REF_191(uint256) -> round_.end
TMP_139(bool) = _now > REF_191
REF_192(uint256) -> round_.plyr
TMP_140(bool) = REF_192 == 0
TMP_141(bool) = TMP_139 && TMP_140
TMP_142(bool) = TMP_138 || TMP_141
TMP_143(bool) = TMP_137 && TMP_142
CONDITION TMP_143"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
core(_pID,msg.value,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.core(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,msg.value,_affID,_eventData_)"];
3->12;
4[label="Node Type: IF 4

EXPRESSION:
_now > round_.end && round_.ended == false

IRs:
REF_193(uint256) -> round_.end
TMP_145(bool) = _now > REF_193
REF_194(bool) -> round_.ended
TMP_146(bool) = REF_194 == False
TMP_147(bool) = TMP_145 && TMP_146
CONDITION TMP_147"];
4->5[label="True"];
4->10[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_.ended = true

IRs:
REF_195(bool) -> round_.ended
REF_195(bool) (->round_) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_148(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_148(RSdatasets.EventReturns)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_196(uint256) -> _eventData_.compressedData
REF_197(uint256) -> _eventData_.compressedData
TMP_149(uint256) = _now * 1000000000000000000
TMP_150(uint256) = REF_197 + TMP_149
REF_196(uint256) (->_eventData_) := TMP_150(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_198(uint256) -> _eventData_.compressedIDs
REF_199(uint256) -> _eventData_.compressedIDs
TMP_151(uint256) = REF_199 + _pID
REF_198(uint256) (->_eventData_) := TMP_151(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
RSEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_201(RSdatasets.Player) -> plyr_[_pID]
REF_202(bytes32) -> REF_201.name
REF_203(uint256) -> _eventData_.compressedData
REF_204(uint256) -> _eventData_.compressedIDs
REF_205(address) -> _eventData_.winnerAddr
REF_206(bytes32) -> _eventData_.winnerName
REF_207(uint256) -> _eventData_.amountWon
REF_208(uint256) -> _eventData_.newPot
REF_209(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_202,msg.value,REF_203,REF_204,REF_205,REF_206,REF_207,REF_208,REF_209)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_210(RSdatasets.Player) -> plyr_[_pID]
REF_211(uint256) -> REF_210.gen
REF_212(RSdatasets.Player) -> plyr_[_pID]
REF_213(uint256) -> REF_212.gen
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_213', 'msg.value'] 
REF_211(uint256) (->plyr_) := TMP_153(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
}
// Function: 3488.sol-RatScam-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_14(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_14(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_10(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_10(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_15 = CONVERT 0 to address
TMP_16(bool) = _affCode == TMP_15
TMP_17(bool) = _affCode == msg.sender
TMP_18(bool) = TMP_16 || TMP_17
CONDITION TMP_18"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_11(RSdatasets.Player) -> plyr_[_pID]
REF_12(uint256) -> REF_11.laff
_affID(uint256) := REF_12(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_13(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_13(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_14(RSdatasets.Player) -> plyr_[_pID]
REF_15(uint256) -> REF_14.laff
TMP_19(bool) = _affID != REF_15
CONDITION TMP_19"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_16(RSdatasets.Player) -> plyr_[_pID]
REF_17(uint256) -> REF_16.laff
REF_17(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 3488.sol-RatScam-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_5(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_5(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_3(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_3(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_6(bool) = _affCode == 0
TMP_7(bool) = _affCode == _pID
TMP_8(bool) = TMP_6 || TMP_7
CONDITION TMP_8"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_4(RSdatasets.Player) -> plyr_[_pID]
REF_5(uint256) -> REF_4.laff
_affCode(uint256) := REF_5(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_6(RSdatasets.Player) -> plyr_[_pID]
REF_7(uint256) -> REF_6.laff
TMP_9(bool) = _affCode != REF_7
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_8(RSdatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
REF_9(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 3488.sol-RatScam-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_24(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_24(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_18(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_18(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_25(bool) = _affCode == 
REF_19(RSdatasets.Player) -> plyr_[_pID]
REF_20(bytes32) -> REF_19.name
TMP_26(bool) = _affCode == REF_20
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_21(RSdatasets.Player) -> plyr_[_pID]
REF_22(uint256) -> REF_21.laff
_affID(uint256) := REF_22(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_23(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_23(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_24(RSdatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
TMP_28(bool) = _affID != REF_25
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_26(RSdatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
REF_27(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 3488.sol-RatScam-calcKeysReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_311(uint256) -> round_.strt
TMP_224(uint256) = REF_311 + rndGap_
TMP_225(bool) = _now > TMP_224
REF_312(uint256) -> round_.end
TMP_226(bool) = _now <= REF_312
REF_313(uint256) -> round_.end
TMP_227(bool) = _now > REF_313
REF_314(uint256) -> round_.plyr
TMP_228(bool) = REF_314 == 0
TMP_229(bool) = TMP_227 && TMP_228
TMP_230(bool) = TMP_226 || TMP_229
TMP_231(bool) = TMP_225 && TMP_230
CONDITION TMP_231"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_.eth).keysRec(_eth))

IRs:
REF_315(uint256) -> round_.eth
TMP_232(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_315', '_eth'] 
RETURN TMP_232"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_233(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_233"];
}
// Function: 3488.sol-RatScam-calcUnMaskedEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_.mask).mul(plyrRnds_[_pID].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID].mask))

IRs:
REF_304(uint256) -> round_.mask
REF_306(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_307(uint256) -> REF_306.keys
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_304', 'REF_307'] 
TMP_222(uint256) = TMP_221 / 1000000000000000000
REF_309(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_310(uint256) -> REF_309.mask
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_222', 'REF_310'] 
RETURN TMP_223"];
}
// Function: 3488.sol-RatScam-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 3488.sol-RatScam-core(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID].keys == 0

IRs:
REF_239(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_240(uint256) -> REF_239.keys
TMP_173(bool) = REF_240 == 0
CONDITION TMP_173"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_174(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.managePlayer(uint256,RSdatasets.EventReturns)(_pID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_174(RSdatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_.eth < 100000000000000000000 && plyrRnds_[_pID].eth.add(_eth) > 10000000000000000000

IRs:
REF_241(uint256) -> round_.eth
TMP_175(bool) = REF_241 < 100000000000000000000
REF_242(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_243(uint256) -> REF_242.eth
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_243', '_eth'] 
TMP_177(bool) = TMP_176 > 10000000000000000000
TMP_178(bool) = TMP_175 && TMP_177
CONDITION TMP_178"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (10000000000000000000).sub(plyrRnds_[_pID].eth)

IRs:
REF_246(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_247(uint256) -> REF_246.eth
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['10000000000000000000', 'REF_247'] 
_availableLimit(uint256) := TMP_179(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_180(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_249(RSdatasets.Player) -> plyr_[_pID]
REF_250(uint256) -> REF_249.gen
REF_251(RSdatasets.Player) -> plyr_[_pID]
REF_252(uint256) -> REF_251.gen
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_252', '_refund'] 
REF_250(uint256) (->plyr_) := TMP_181(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_182(bool) = _eth > 1000000000
CONDITION TMP_182"];
10->11[label="True"];
10->54[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_.eth).keysRec(_eth)

IRs:
REF_254(uint256) -> round_.eth
TMP_183(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.keysRec(uint256,uint256), arguments:['REF_254', '_eth'] 
_keys(uint256) := TMP_183(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_184(bool) = _keys >= 1000000000000000000
CONDITION TMP_184"];
12->13[label="True"];
12->18[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys)

IRs:
INTERNAL_CALL, RatScam.updateTimer(uint256)(_keys)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_.plyr != _pID

IRs:
REF_256(uint256) -> round_.plyr
TMP_186(bool) = REF_256 != _pID
CONDITION TMP_186"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_.plyr = _pID

IRs:
REF_257(uint256) -> round_.plyr
REF_257(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_258(uint256) -> _eventData_.compressedData
REF_259(uint256) -> _eventData_.compressedData
TMP_187(uint256) = REF_259 + 100
REF_258(uint256) (->_eventData_) := TMP_187(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_188(bool) = _eth >= 100000000000000000
CONDITION TMP_188"];
19->20[label="True"];
19->45[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_189(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
airdrop() == true

IRs:
TMP_190(bool) = INTERNAL_CALL, RatScam.airdrop()()
TMP_191(bool) = TMP_190 == True
CONDITION TMP_191"];
21->22[label="True"];
21->44[label="False"];
22[label="Node Type: NEW VARIABLE 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_192(bool) = _eth >= 10000000000000000000
CONDITION TMP_192"];
23->24[label="True"];
23->28[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_194(uint256) = TMP_193 / 100
_prize(uint256) := TMP_194(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_261(RSdatasets.Player) -> plyr_[_pID]
REF_262(uint256) -> REF_261.win
REF_263(RSdatasets.Player) -> plyr_[_pID]
REF_264(uint256) -> REF_263.win
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_264', '_prize'] 
REF_262(uint256) (->plyr_) := TMP_195(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_196(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_267(uint256) -> _eventData_.compressedData
REF_267(-> _eventData_) = REF_267 + 300000000000000000000000000000000"];
27->40;
28[label="Node Type: IF 28

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_197(bool) = _eth >= 1000000000000000000
TMP_198(bool) = _eth < 10000000000000000000
TMP_199(bool) = TMP_197 && TMP_198
CONDITION TMP_199"];
28->29[label="True"];
28->33[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_201(uint256) = TMP_200 / 100
_prize(uint256) := TMP_201(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_269(RSdatasets.Player) -> plyr_[_pID]
REF_270(uint256) -> REF_269.win
REF_271(RSdatasets.Player) -> plyr_[_pID]
REF_272(uint256) -> REF_271.win
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_272', '_prize'] 
REF_270(uint256) (->plyr_) := TMP_202(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_203(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_275(uint256) -> _eventData_.compressedData
REF_275(-> _eventData_) = REF_275 + 200000000000000000000000000000000"];
32->39;
33[label="Node Type: IF 33

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_204(bool) = _eth >= 100000000000000000
TMP_205(bool) = _eth < 1000000000000000000
TMP_206(bool) = TMP_204 && TMP_205
CONDITION TMP_206"];
33->34[label="True"];
33->38[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_208(uint256) = TMP_207 / 100
_prize(uint256) := TMP_208(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_277(RSdatasets.Player) -> plyr_[_pID]
REF_278(uint256) -> REF_277.win
REF_279(RSdatasets.Player) -> plyr_[_pID]
REF_280(uint256) -> REF_279.win
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_280', '_prize'] 
REF_278(uint256) (->plyr_) := TMP_209(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_210(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_eventData_.compressedData += 100000000000000000000000000000000

IRs:
REF_283(uint256) -> _eventData_.compressedData
REF_283(-> _eventData_) = REF_283 + 100000000000000000000000000000000"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_284(uint256) -> _eventData_.compressedData
REF_284(-> _eventData_) = REF_284 + 10000000000000000000000000000000"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_285(uint256) -> _eventData_.compressedData
TMP_211(uint256) = _prize * 1000000000000000000000000000000000
REF_285(-> _eventData_) = REF_285 + TMP_211"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_286(uint256) -> _eventData_.compressedData
REF_287(uint256) -> _eventData_.compressedData
TMP_212(uint256) = airDropTracker_ * 1000
TMP_213(uint256) = REF_287 + TMP_212
REF_286(uint256) (->_eventData_) := TMP_213(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
plyrRnds_[_pID].keys = _keys.add(plyrRnds_[_pID].keys)

IRs:
REF_288(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_289(uint256) -> REF_288.keys
REF_291(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_292(uint256) -> REF_291.keys
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_292'] 
REF_289(uint256) (->plyrRnds_) := TMP_214(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
plyrRnds_[_pID].eth = _eth.add(plyrRnds_[_pID].eth)

IRs:
REF_293(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_294(uint256) -> REF_293.eth
REF_296(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_297(uint256) -> REF_296.eth
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_297'] 
REF_294(uint256) (->plyrRnds_) := TMP_215(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
round_.keys = _keys.add(round_.keys)

IRs:
REF_298(uint256) -> round_.keys
REF_300(uint256) -> round_.keys
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_300'] 
REF_298(uint256) (->round_) := TMP_216(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
round_.eth = _eth.add(round_.eth)

IRs:
REF_301(uint256) -> round_.eth
REF_303(uint256) -> round_.eth
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_303'] 
REF_301(uint256) (->round_) := TMP_217(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
_eventData_ = distributeExternal(_pID,_eth,_affID,_eventData_)

IRs:
TMP_218(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.distributeExternal(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_affID,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_218(RSdatasets.EventReturns)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
_eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_)

IRs:
TMP_219(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.distributeInternal(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_keys,_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_219(RSdatasets.EventReturns)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
endTx(_pID,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, RatScam.endTx(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_keys,_eventData_)"];
53->54;
54[label="Node Type: END_IF 54
"];
}
// Function: 3488.sol-RatScam-determinePID(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_350(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_350(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_258(bool) = _pID == 0
CONDITION TMP_258"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = RatBook.getPlayerID(msg.sender)

IRs:
TMP_259(uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_259(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = RatBook.getPlayerName(_pID)

IRs:
TMP_260(bytes32) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_260(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = RatBook.getPlayerLAff(_pID)

IRs:
TMP_261(uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_261(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_354(uint256) -> pIDxAddr_[msg.sender]
REF_354(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_355(RSdatasets.Player) -> plyr_[_pID]
REF_356(address) -> REF_355.addr
REF_356(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_262(bool) = _name != 
CONDITION TMP_262"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_357(uint256) -> pIDxName_[_name]
REF_357(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_358(RSdatasets.Player) -> plyr_[_pID]
REF_359(bytes32) -> REF_358.name
REF_359(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_360(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_361(bool) -> REF_360[_name]
REF_361(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_263(bool) = _laff != 0
TMP_264(bool) = _laff != _pID
TMP_265(bool) = TMP_263 && TMP_264
CONDITION TMP_265"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_362(RSdatasets.Player) -> plyr_[_pID]
REF_363(uint256) -> REF_362.laff
REF_363(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_364(uint256) -> _eventData_.compressedData
REF_365(uint256) -> _eventData_.compressedData
TMP_266(uint256) = REF_365 + 1
REF_364(uint256) (->_eventData_) := TMP_266(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3488.sol-RatScam-distributeExternal(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth * 5 / 100

IRs:
TMP_331(uint256) = _eth * 5
TMP_332(uint256) = TMP_331 / 100
_com(uint256) := TMP_332(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_333(uint256) = _eth / 10
_aff(uint256) := TMP_333(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_334(bool) = _affID != _pID
REF_433(RSdatasets.Player) -> plyr_[_affID]
REF_434(bytes32) -> REF_433.name
TMP_335(bool) = REF_434 != 
TMP_336(bool) = TMP_334 && TMP_335
CONDITION TMP_336"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_435(RSdatasets.Player) -> plyr_[_affID]
REF_436(uint256) -> REF_435.aff
REF_438(RSdatasets.Player) -> plyr_[_affID]
REF_439(uint256) -> REF_438.aff
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_439'] 
REF_436(uint256) (->plyr_) := TMP_337(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
RSEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now)

IRs:
REF_441(RSdatasets.Player) -> plyr_[_affID]
REF_442(address) -> REF_441.addr
REF_443(RSdatasets.Player) -> plyr_[_affID]
REF_444(bytes32) -> REF_443.name
Emit onAffiliatePayout(_affID,REF_442,REF_444,_pID,_aff,now)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_com += _aff

IRs:
_com(uint256) = _com + _aff"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! address(RatKingCorp).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_339 = CONVERT RatKingCorp to address
TMP_341(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_342 = CONVERT TMP_341 to bytes4
TMP_343(bool) = LOW_LEVEL_CALL, dest:TMP_339, function:call, arguments:['TMP_342'] value:_com 
TMP_344 = UnaryType.BANG TMP_343 
CONDITION TMP_344"];
8->9[label="True"];
8->9[label="False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3488.sol-RatScam-distributeInternal(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_)) / 100

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'fees_'] 
TMP_346(uint256) = TMP_345 / 100
_gen(uint256) := TMP_346(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 20)

IRs:
TMP_347(uint256) = _eth / 20
_air(uint256) := TMP_347(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_348(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = (_eth.mul(20) / 100)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '20'] 
TMP_350(uint256) = TMP_349 / 100
_pot(uint256) := TMP_350(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = updateMasks(_pID,_gen,_keys)

IRs:
TMP_351(uint256) = INTERNAL_CALL, RatScam.updateMasks(uint256,uint256,uint256)(_pID,_gen,_keys)
_dust(uint256) := TMP_351(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_352(bool) = _dust > 0
CONDITION TMP_352"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_353(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_.pot = _pot.add(_dust).add(round_.pot)

IRs:
REF_451(uint256) -> round_.pot
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_454(uint256) -> round_.pot
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_354', 'REF_454'] 
REF_451(uint256) (->round_) := TMP_355(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_455(uint256) -> _eventData_.genAmount
REF_457(uint256) -> _eventData_.genAmount
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_457'] 
REF_455(uint256) (->_eventData_) := TMP_356(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_458(uint256) -> _eventData_.potAmount
REF_458(uint256) (->_eventData_) := _pot(uint256)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3488.sol-RatScam-endRound(RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_winPID = round_.plyr

IRs:
REF_368(uint256) -> round_.plyr
_winPID(uint256) := REF_368(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pot = round_.pot + airDropPot_

IRs:
REF_369(uint256) -> round_.pot
TMP_268(uint256) = REF_369 + airDropPot_
_pot(uint256) := TMP_268(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_win = (_pot.mul(45)) / 100

IRs:
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '45'] 
TMP_270(uint256) = TMP_269 / 100
_win(uint256) := TMP_270(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_com = (_pot / 10)

IRs:
TMP_271(uint256) = _pot / 10
_com(uint256) := TMP_271(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_gen = (_pot.mul(potSplit_)) / 100

IRs:
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'potSplit_'] 
TMP_273(uint256) = TMP_272 / 100
_gen(uint256) := TMP_273(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_.keys)

IRs:
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_373(uint256) -> round_.keys
TMP_275(uint256) = TMP_274 / REF_373
_ppt(uint256) := TMP_275(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_.keys)) / 1000000000000000000)

IRs:
REF_376(uint256) -> round_.keys
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_376'] 
TMP_277(uint256) = TMP_276 / 1000000000000000000
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_277'] 
_dust(uint256) := TMP_278(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_dust > 0

IRs:
TMP_279(bool) = _dust > 0
CONDITION TMP_279"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_280(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_com = _com.add(_dust)

IRs:
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_dust'] 
_com(uint256) := TMP_281(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_379(RSdatasets.Player) -> plyr_[_winPID]
REF_380(uint256) -> REF_379.win
REF_382(RSdatasets.Player) -> plyr_[_winPID]
REF_383(uint256) -> REF_382.win
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_383'] 
REF_380(uint256) (->plyr_) := TMP_282(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
! address(RatKingCorp).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_283 = CONVERT RatKingCorp to address
TMP_285(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_286 = CONVERT TMP_285 to bytes4
TMP_287(bool) = LOW_LEVEL_CALL, dest:TMP_283, function:call, arguments:['TMP_286'] value:_com 
TMP_288 = UnaryType.BANG TMP_287 
CONDITION TMP_288"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_gen = _gen.add(_com)

IRs:
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', '_com'] 
_gen(uint256) := TMP_289(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
round_.mask = _ppt.add(round_.mask)

IRs:
REF_387(uint256) -> round_.mask
REF_389(uint256) -> round_.mask
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_389'] 
REF_387(uint256) (->round_) := TMP_290(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_.end * 1000000)

IRs:
REF_390(uint256) -> _eventData_.compressedData
REF_391(uint256) -> _eventData_.compressedData
REF_392(uint256) -> round_.end
TMP_291(uint256) = REF_392 * 1000000
TMP_292(uint256) = REF_391 + TMP_291
REF_390(uint256) (->_eventData_) := TMP_292(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000)

IRs:
REF_393(uint256) -> _eventData_.compressedIDs
REF_394(uint256) -> _eventData_.compressedIDs
TMP_293(uint256) = _winPID * 100000000000000000000000000
TMP_294(uint256) = REF_394 + TMP_293
REF_393(uint256) (->_eventData_) := TMP_294(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_395(address) -> _eventData_.winnerAddr
REF_396(RSdatasets.Player) -> plyr_[_winPID]
REF_397(address) -> REF_396.addr
REF_395(address) (->_eventData_) := REF_397(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_398(bytes32) -> _eventData_.winnerName
REF_399(RSdatasets.Player) -> plyr_[_winPID]
REF_400(bytes32) -> REF_399.name
REF_398(bytes32) (->_eventData_) := REF_400(bytes32)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_401(uint256) -> _eventData_.amountWon
REF_401(uint256) (->_eventData_) := _win(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_402(uint256) -> _eventData_.genAmount
REF_402(uint256) (->_eventData_) := _gen(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.newPot = 0

IRs:
REF_403(uint256) -> _eventData_.newPot
REF_403(uint256) (->_eventData_) := 0(uint256)"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3488.sol-RatScam-endTx(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000)

IRs:
REF_490(uint256) -> _eventData_.compressedData
REF_491(uint256) -> _eventData_.compressedData
TMP_373(uint256) = now * 1000000000000000000
TMP_374(uint256) = REF_491 + TMP_373
REF_490(uint256) (->_eventData_) := TMP_374(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_492(uint256) -> _eventData_.compressedIDs
REF_493(uint256) -> _eventData_.compressedIDs
TMP_375(uint256) = REF_493 + _pID
REF_492(uint256) (->_eventData_) := TMP_375(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RSEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_495(uint256) -> _eventData_.compressedData
REF_496(uint256) -> _eventData_.compressedIDs
REF_497(RSdatasets.Player) -> plyr_[_pID]
REF_498(bytes32) -> REF_497.name
REF_499(address) -> _eventData_.winnerAddr
REF_500(bytes32) -> _eventData_.winnerName
REF_501(uint256) -> _eventData_.amountWon
REF_502(uint256) -> _eventData_.newPot
REF_503(uint256) -> _eventData_.genAmount
REF_504(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_495,REF_496,REF_498,msg.sender,_eth,_keys,REF_499,REF_500,REF_501,REF_502,REF_503,REF_504,airDropPot_)"];
}
// Function: 3488.sol-RatScam-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_0(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.determinePID(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_0(RSdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_0(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_1(RSdatasets.Player) -> plyr_[_pID]
REF_2(uint256) -> REF_1.laff
INTERNAL_CALL, RatScam.buyCore(uint256,uint256,RSdatasets.EventReturns)(_pID,REF_2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 3488.sol-RatScam-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_108(uint256) -> round_.strt
TMP_89(uint256) = REF_108 + rndGap_
TMP_90(bool) = _now > TMP_89
REF_109(uint256) -> round_.end
TMP_91(bool) = _now <= REF_109
REF_110(uint256) -> round_.end
TMP_92(bool) = _now > REF_110
REF_111(uint256) -> round_.plyr
TMP_93(bool) = REF_111 == 0
TMP_94(bool) = TMP_92 && TMP_93
TMP_95(bool) = TMP_91 || TMP_94
TMP_96(bool) = TMP_90 && TMP_95
CONDITION TMP_96"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_.keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_112(uint256) -> round_.keys
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_112', '1000000000000000000'] 
TMP_98(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_97', '1000000000000000000'] 
RETURN TMP_98"];
4[label="Node Type: RETURN 4

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3488.sol-RatScam-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(round_.keys,round_.end,round_.strt,round_.pot,round_.plyr,plyr_[round_.plyr].addr,plyr_[round_.plyr].name,airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_164(uint256) -> round_.keys
REF_165(uint256) -> round_.end
REF_166(uint256) -> round_.strt
REF_167(uint256) -> round_.pot
REF_168(uint256) -> round_.plyr
REF_169(uint256) -> round_.plyr
REF_170(RSdatasets.Player) -> plyr_[REF_169]
REF_171(address) -> REF_170.addr
REF_172(uint256) -> round_.plyr
REF_173(RSdatasets.Player) -> plyr_[REF_172]
REF_174(bytes32) -> REF_173.name
TMP_129(uint256) = airDropPot_ * 1000
TMP_130(uint256) = airDropTracker_ + TMP_129
RETURN REF_164,REF_165,REF_166,REF_167,REF_168,REF_171,REF_174,TMP_130"];
}
// Function: 3488.sol-RatScam-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_addr == address(0)

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = _addr == TMP_131
CONDITION TMP_132"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addr == msg.sender

IRs:
TMP_133(bool) = _addr == msg.sender"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_175(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_175(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID)),plyr_[_pID].aff,plyrRnds_[_pID].eth)

IRs:
REF_176(RSdatasets.Player) -> plyr_[_pID]
REF_177(bytes32) -> REF_176.name
REF_178(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_179(uint256) -> REF_178.keys
REF_180(RSdatasets.Player) -> plyr_[_pID]
REF_181(uint256) -> REF_180.win
REF_182(RSdatasets.Player) -> plyr_[_pID]
REF_183(uint256) -> REF_182.gen
TMP_134(uint256) = INTERNAL_CALL, RatScam.calcUnMaskedEarnings(uint256)(_pID)
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_183', 'TMP_134'] 
REF_185(RSdatasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.aff
REF_187(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_188(uint256) -> REF_187.eth
RETURN _pID,REF_177,REF_179,REF_181,TMP_135,REF_186,REF_188"];
}
// Function: 3488.sol-RatScam-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now > round_.end && round_.ended == false && round_.plyr != 0

IRs:
REF_121(uint256) -> round_.end
TMP_105(bool) = now > REF_121
REF_122(bool) -> round_.ended
TMP_106(bool) = REF_122 == False
TMP_107(bool) = TMP_105 && TMP_106
REF_123(uint256) -> round_.plyr
TMP_108(bool) = REF_123 != 0
TMP_109(bool) = TMP_107 && TMP_108
CONDITION TMP_109"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
round_.plyr == _pID

IRs:
REF_124(uint256) -> round_.plyr
TMP_110(bool) = REF_124 == _pID
CONDITION TMP_110"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((plyr_[_pID].win).add(((round_.pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID).sub(plyrRnds_[_pID].mask)),plyr_[_pID].aff)

IRs:
REF_125(RSdatasets.Player) -> plyr_[_pID]
REF_126(uint256) -> REF_125.win
REF_128(uint256) -> round_.pot
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_128', '48'] 
TMP_112(uint256) = TMP_111 / 100
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_126', 'TMP_112'] 
REF_130(RSdatasets.Player) -> plyr_[_pID]
REF_131(uint256) -> REF_130.gen
TMP_114(uint256) = INTERNAL_CALL, RatScam.getPlayerVaultsHelper(uint256)(_pID)
REF_134(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_135(uint256) -> REF_134.mask
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_114', 'REF_135'] 
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_131', 'TMP_115'] 
REF_136(RSdatasets.Player) -> plyr_[_pID]
REF_137(uint256) -> REF_136.aff
RETURN TMP_113,TMP_116,REF_137"];
4[label="Node Type: RETURN 4

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID).sub(plyrRnds_[_pID].mask)),plyr_[_pID].aff)

IRs:
REF_138(RSdatasets.Player) -> plyr_[_pID]
REF_139(uint256) -> REF_138.win
REF_140(RSdatasets.Player) -> plyr_[_pID]
REF_141(uint256) -> REF_140.gen
TMP_117(uint256) = INTERNAL_CALL, RatScam.getPlayerVaultsHelper(uint256)(_pID)
REF_144(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_145(uint256) -> REF_144.mask
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', 'REF_145'] 
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_141', 'TMP_118'] 
REF_146(RSdatasets.Player) -> plyr_[_pID]
REF_147(uint256) -> REF_146.aff
RETURN REF_139,TMP_119,REF_147"];
6[label="Node Type: RETURN 6

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID)),plyr_[_pID].aff)

IRs:
REF_148(RSdatasets.Player) -> plyr_[_pID]
REF_149(uint256) -> REF_148.win
REF_150(RSdatasets.Player) -> plyr_[_pID]
REF_151(uint256) -> REF_150.gen
TMP_120(uint256) = INTERNAL_CALL, RatScam.calcUnMaskedEarnings(uint256)(_pID)
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_151', 'TMP_120'] 
REF_153(RSdatasets.Player) -> plyr_[_pID]
REF_154(uint256) -> REF_153.aff
RETURN REF_149,TMP_121,REF_154"];
}
// Function: 3488.sol-RatScam-getPlayerVaultsHelper(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_.mask).add(((((round_.pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_.keys))).mul(plyrRnds_[_pID].keys)) / 1000000000000000000))

IRs:
REF_155(uint256) -> round_.mask
REF_157(uint256) -> round_.pot
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_157', 'potSplit_'] 
TMP_123(uint256) = TMP_122 / 100
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', '1000000000000000000'] 
REF_160(uint256) -> round_.keys
TMP_125(uint256) = TMP_124 / REF_160
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_155', 'TMP_125'] 
REF_162(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_163(uint256) -> REF_162.keys
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_126', 'REF_163'] 
TMP_128(uint256) = TMP_127 / 1000000000000000000
RETURN TMP_128"];
}
// Function: 3488.sol-RatScam-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now < round_.end

IRs:
REF_115(uint256) -> round_.end
TMP_99(bool) = _now < REF_115
CONDITION TMP_99"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
_now > round_.strt + rndGap_

IRs:
REF_116(uint256) -> round_.strt
TMP_100(uint256) = REF_116 + rndGap_
TMP_101(bool) = _now > TMP_100
CONDITION TMP_101"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_.end).sub(_now))

IRs:
REF_117(uint256) -> round_.end
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_117', '_now'] 
RETURN TMP_102"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_.strt + rndGap_).sub(_now))

IRs:
REF_119(uint256) -> round_.strt
TMP_103(uint256) = REF_119 + rndGap_
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_103', '_now'] 
RETURN TMP_104"];
7[label="Node Type: RETURN 7

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3488.sol-RatScam-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_318(uint256) -> round_.strt
TMP_234(uint256) = REF_318 + rndGap_
TMP_235(bool) = _now > TMP_234
REF_319(uint256) -> round_.end
TMP_236(bool) = _now <= REF_319
REF_320(uint256) -> round_.end
TMP_237(bool) = _now > REF_320
REF_321(uint256) -> round_.plyr
TMP_238(bool) = REF_321 == 0
TMP_239(bool) = TMP_237 && TMP_238
TMP_240(bool) = TMP_236 || TMP_239
TMP_241(bool) = TMP_235 && TMP_240
CONDITION TMP_241"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_.keys.add(_keys)).ethRec(_keys))

IRs:
REF_322(uint256) -> round_.keys
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_322', '_keys'] 
TMP_243(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.ethRec(uint256,uint256), arguments:['TMP_242', '_keys'] 
RETURN TMP_243"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_keys).eth())

IRs:
TMP_244(uint256) = LIBRARY_CALL, dest:RSKeysCalc, function:RSKeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_244"];
}
// Function: 3488.sol-RatScam-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet)

IRs:
TMP_387(bool) = activated_ == True
TMP_388(None) = SOLIDITY_CALL require(bool,string)(TMP_387,its not ready yet)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3488.sol-RatScam-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,non smart contract address only)

IRs:
TMP_389(bool) = _codeLength == 0
TMP_390(None) = SOLIDITY_CALL require(bool,string)(TMP_389,non smart contract address only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3488.sol-RatScam-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,too little money)

IRs:
TMP_391(bool) = _eth >= 1000000000
TMP_392(None) = SOLIDITY_CALL require(bool,string)(TMP_391,too little money)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,too much money)

IRs:
TMP_393(bool) = _eth <= 100000000000000000000000
TMP_394(None) = SOLIDITY_CALL require(bool,string)(TMP_393,too much money)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3488.sol-RatScam-managePlayer(uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_366(uint256) -> _eventData_.compressedData
REF_367(uint256) -> _eventData_.compressedData
TMP_267(uint256) = REF_367 + 10
REF_366(uint256) (->_eventData_) := TMP_267(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3488.sol-RatScam-reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0))

IRs:
REF_215(uint256) -> round_.strt
TMP_154(uint256) = REF_215 + rndGap_
TMP_155(bool) = _now > TMP_154
REF_216(uint256) -> round_.end
TMP_156(bool) = _now <= REF_216
REF_217(uint256) -> round_.end
TMP_157(bool) = _now > REF_217
REF_218(uint256) -> round_.plyr
TMP_158(bool) = REF_218 == 0
TMP_159(bool) = TMP_157 && TMP_158
TMP_160(bool) = TMP_156 || TMP_159
TMP_161(bool) = TMP_155 && TMP_160
CONDITION TMP_161"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_219(RSdatasets.Player) -> plyr_[_pID]
REF_220(uint256) -> REF_219.gen
TMP_162(uint256) = INTERNAL_CALL, RatScam.withdrawEarnings(uint256)(_pID)
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_162', '_eth'] 
REF_220(uint256) (->plyr_) := TMP_163(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_pID,_eth,_affID,_eventData_)

IRs:
INTERNAL_CALL, RatScam.core(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_eth,_affID,_eventData_)"];
4->12;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_.end && round_.ended == false

IRs:
REF_222(uint256) -> round_.end
TMP_165(bool) = _now > REF_222
REF_223(bool) -> round_.ended
TMP_166(bool) = REF_223 == False
TMP_167(bool) = TMP_165 && TMP_166
CONDITION TMP_167"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_.ended = true

IRs:
REF_224(bool) -> round_.ended
REF_224(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_168(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_168(RSdatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_225(uint256) -> _eventData_.compressedData
REF_226(uint256) -> _eventData_.compressedData
TMP_169(uint256) = _now * 1000000000000000000
TMP_170(uint256) = REF_226 + TMP_169
REF_225(uint256) (->_eventData_) := TMP_170(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_227(uint256) -> _eventData_.compressedIDs
REF_228(uint256) -> _eventData_.compressedIDs
TMP_171(uint256) = REF_228 + _pID
REF_227(uint256) (->_eventData_) := TMP_171(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
RSEvents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_230(RSdatasets.Player) -> plyr_[_pID]
REF_231(bytes32) -> REF_230.name
REF_232(uint256) -> _eventData_.compressedData
REF_233(uint256) -> _eventData_.compressedIDs
REF_234(address) -> _eventData_.winnerAddr
REF_235(bytes32) -> _eventData_.winnerName
REF_236(uint256) -> _eventData_.amountWon
REF_237(uint256) -> _eventData_.newPot
REF_238(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_231,REF_232,REF_233,REF_234,REF_235,REF_236,REF_237,REF_238)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
}
// Function: 3488.sol-RatScam-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _affCode == TMP_41
TMP_43(bool) = _affCode == msg.sender
TMP_44(bool) = TMP_42 || TMP_43
CONDITION TMP_44"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_36(RSdatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
_affID(uint256) := REF_37(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_38(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_38(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_39(RSdatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
TMP_45(bool) = _affID != REF_40
CONDITION TMP_45"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_41(RSdatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
REF_42(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, RatScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 3488.sol-RatScam-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_33(bool) = _affCode == 0
TMP_34(bool) = _affCode == _pID
TMP_35(bool) = TMP_33 || TMP_34
CONDITION TMP_35"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_29(RSdatasets.Player) -> plyr_[_pID]
REF_30(uint256) -> REF_29.laff
_affCode(uint256) := REF_30(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_31(RSdatasets.Player) -> plyr_[_pID]
REF_32(uint256) -> REF_31.laff
TMP_36(bool) = _affCode != REF_32
CONDITION TMP_36"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_33(RSdatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
REF_34(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, RatScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 3488.sol-RatScam-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_43(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_43(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_50(bool) = _affCode == 
REF_44(RSdatasets.Player) -> plyr_[_pID]
REF_45(bytes32) -> REF_44.name
TMP_51(bool) = _affCode == REF_45
TMP_52(bool) = TMP_50 || TMP_51
CONDITION TMP_52"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_46(RSdatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
_affID(uint256) := REF_47(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_48(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_48(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_49(RSdatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
TMP_53(bool) = _affID != REF_50
CONDITION TMP_53"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_51(RSdatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
REF_52(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, RatScam.reLoadCore(uint256,uint256,uint256,RSdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, RatScam.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 3488.sol-RatScam-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(RatBook),only RatBook can call this function)

IRs:
TMP_245 = CONVERT RatBook to address
TMP_246(bool) = msg.sender == TMP_245
TMP_247(None) = SOLIDITY_CALL require(bool,string)(TMP_246,only RatBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_326(uint256) -> pIDxAddr_[_addr]
TMP_248(bool) = REF_326 != _pID
CONDITION TMP_248"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_327(uint256) -> pIDxAddr_[_addr]
REF_327(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_328(uint256) -> pIDxName_[_name]
TMP_249(bool) = REF_328 != _pID
CONDITION TMP_249"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_329(uint256) -> pIDxName_[_name]
REF_329(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_330(RSdatasets.Player) -> plyr_[_pID]
REF_331(address) -> REF_330.addr
TMP_250(bool) = REF_331 != _addr
CONDITION TMP_250"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_332(RSdatasets.Player) -> plyr_[_pID]
REF_333(address) -> REF_332.addr
REF_333(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_334(RSdatasets.Player) -> plyr_[_pID]
REF_335(bytes32) -> REF_334.name
TMP_251(bool) = REF_335 != _name
CONDITION TMP_251"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_336(RSdatasets.Player) -> plyr_[_pID]
REF_337(bytes32) -> REF_336.name
REF_337(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_338(RSdatasets.Player) -> plyr_[_pID]
REF_339(uint256) -> REF_338.laff
TMP_252(bool) = REF_339 != _laff
CONDITION TMP_252"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_340(RSdatasets.Player) -> plyr_[_pID]
REF_341(uint256) -> REF_340.laff
REF_341(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_342(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_343(bool) -> REF_342[_name]
TMP_253(bool) = REF_343 == False
CONDITION TMP_253"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_344(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_345(bool) -> REF_344[_name]
REF_345(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3488.sol-RatScam-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(RatBook),only RatBook can call this function)

IRs:
TMP_254 = CONVERT RatBook to address
TMP_255(bool) = msg.sender == TMP_254
TMP_256(None) = SOLIDITY_CALL require(bool,string)(TMP_255,only RatBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_346(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_347(bool) -> REF_346[_name]
TMP_257(bool) = REF_347 == False
CONDITION TMP_257"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_348(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_349(bool) -> REF_348[_name]
REF_349(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3488.sol-RatScam-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_77(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_77(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = RatBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_84(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_84(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_86(RSdatasets.Player) -> plyr_[_affID]
REF_87(address) -> REF_86.addr
REF_88(RSdatasets.Player) -> plyr_[_affID]
REF_89(bytes32) -> REF_88.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_87,REF_89,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
9->1;
}
// Function: 3488.sol-RatScam-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_81(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = RatBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_93(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_93(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_95(RSdatasets.Player) -> plyr_[_affID]
REF_96(address) -> REF_95.addr
REF_97(RSdatasets.Player) -> plyr_[_affID]
REF_98(bytes32) -> REF_97.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_96,REF_98,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
9->1;
}
// Function: 3488.sol-RatScam-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_85(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = RatBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:RatBook(RatBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_102(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_102(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RSEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_104(RSdatasets.Player) -> plyr_[_affID]
REF_105(address) -> REF_104.addr
REF_106(RSdatasets.Player) -> plyr_[_affID]
REF_107(bytes32) -> REF_106.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_105,REF_107,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
9->1;
}
// Function: 3488.sol-RatScam-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
RatKingCorp = RatInterfaceForForwarder(0xe7c3101745b3dd71228006084dccb619340f8390)

IRs:
TMP_385 = CONVERT 1323126915089740393178805668307626744913947755408 to RatInterfaceForForwarder
RatKingCorp(RatInterfaceForForwarder) := TMP_385(RatInterfaceForForwarder)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RatBook = RatBookInterface(0xf5c4a2c3a92a8450899d064074cec29a9756c95d)

IRs:
TMP_386 = CONVERT 1403087863680995471730437584936907982404050143581 to RatBookInterface
RatBook(RatBookInterface) := TMP_386(RatBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = RatScam Round #1

IRs:
name(string) := RatScam Round #1(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = RS1

IRs:
symbol(string) := RS1(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 3488.sol-RatScam-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
fees_ = 60

IRs:
fees_(uint256) := 60(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
potSplit_ = 45

IRs:
potSplit_(uint256) := 45(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3488.sol-RatScam-updateGenVault(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID)

IRs:
TMP_295(uint256) = INTERNAL_CALL, RatScam.calcUnMaskedEarnings(uint256)(_pID)
_earnings(uint256) := TMP_295(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_296(bool) = _earnings > 0
CONDITION TMP_296"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_404(RSdatasets.Player) -> plyr_[_pID]
REF_405(uint256) -> REF_404.gen
REF_407(RSdatasets.Player) -> plyr_[_pID]
REF_408(uint256) -> REF_407.gen
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_408'] 
REF_405(uint256) (->plyr_) := TMP_297(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID].mask = _earnings.add(plyrRnds_[_pID].mask)

IRs:
REF_409(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_410(uint256) -> REF_409.mask
REF_412(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_413(uint256) -> REF_412.mask
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_413'] 
REF_410(uint256) (->plyrRnds_) := TMP_298(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3488.sol-RatScam-updateMasks(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_.keys)

IRs:
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_460(uint256) -> round_.keys
TMP_358(uint256) = TMP_357 / REF_460
_ppt(uint256) := TMP_358(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_.mask = _ppt.add(round_.mask)

IRs:
REF_461(uint256) -> round_.mask
REF_463(uint256) -> round_.mask
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_463'] 
REF_461(uint256) (->round_) := TMP_359(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_361(uint256) = TMP_360 / 1000000000000000000
_pearn(uint256) := TMP_361(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID].mask = (((round_.mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID].mask)

IRs:
REF_465(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_466(uint256) -> REF_465.mask
REF_467(uint256) -> round_.mask
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_467', '_keys'] 
TMP_363(uint256) = TMP_362 / 1000000000000000000
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_363', '_pearn'] 
REF_471(RSdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_472(uint256) -> REF_471.mask
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_364', 'REF_472'] 
REF_466(uint256) (->plyrRnds_) := TMP_365(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_.keys)) / (1000000000000000000)))

IRs:
REF_475(uint256) -> round_.keys
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_475'] 
TMP_367(uint256) = TMP_366 / 1000000000000000000
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_367'] 
RETURN TMP_368"];
}
// Function: 3488.sol-RatScam-updateTimer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_.end && round_.plyr == 0

IRs:
REF_414(uint256) -> round_.end
TMP_299(bool) = _now > REF_414
REF_415(uint256) -> round_.plyr
TMP_300(bool) = REF_415 == 0
TMP_301(bool) = TMP_299 && TMP_300
CONDITION TMP_301"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_302(uint256) = _keys / 1000000000000000000
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_302', 'rndInc_'] 
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_303', '_now'] 
_newTime(uint256) := TMP_304(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_.end)

IRs:
TMP_305(uint256) = _keys / 1000000000000000000
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_305', 'rndInc_'] 
REF_420(uint256) -> round_.end
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_306', 'REF_420'] 
_newTime(uint256) := TMP_307(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_309(bool) = _newTime < TMP_308
CONDITION TMP_309"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_.end = _newTime

IRs:
REF_422(uint256) -> round_.end
REF_422(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_.end = rndMax_.add(_now)

IRs:
REF_423(uint256) -> round_.end
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_423(uint256) (->round_) := TMP_310(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3488.sol-RatScam-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_now > round_.end && round_.ended == false && round_.plyr != 0

IRs:
REF_54(uint256) -> round_.end
TMP_58(bool) = _now > REF_54
REF_55(bool) -> round_.ended
TMP_59(bool) = REF_55 == False
TMP_60(bool) = TMP_58 && TMP_59
REF_56(uint256) -> round_.plyr
TMP_61(bool) = REF_56 != 0
TMP_62(bool) = TMP_60 && TMP_61
CONDITION TMP_62"];
4->5[label="True"];
4->15[label="False"];
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_.ended = true

IRs:
REF_57(bool) -> round_.ended
REF_57(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_63(RSdatasets.EventReturns) = INTERNAL_CALL, RatScam.endRound(RSdatasets.EventReturns)(_eventData_)
_eventData_(RSdatasets.EventReturns) := TMP_63(RSdatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_64(uint256) = INTERNAL_CALL, RatScam.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_64(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_eth > 0

IRs:
TMP_65(bool) = _eth > 0
CONDITION TMP_65"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_58(RSdatasets.Player) -> plyr_[_pID]
REF_59(address) -> REF_58.addr
Transfer dest:REF_59 value:_eth"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_61(uint256) -> _eventData_.compressedData
REF_62(uint256) -> _eventData_.compressedData
TMP_67(uint256) = _now * 1000000000000000000
TMP_68(uint256) = REF_62 + TMP_67
REF_61(uint256) (->_eventData_) := TMP_68(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_63(uint256) -> _eventData_.compressedIDs
REF_64(uint256) -> _eventData_.compressedIDs
TMP_69(uint256) = REF_64 + _pID
REF_63(uint256) (->_eventData_) := TMP_69(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
RSEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_66(RSdatasets.Player) -> plyr_[_pID]
REF_67(bytes32) -> REF_66.name
REF_68(uint256) -> _eventData_.compressedData
REF_69(uint256) -> _eventData_.compressedIDs
REF_70(address) -> _eventData_.winnerAddr
REF_71(bytes32) -> _eventData_.winnerName
REF_72(uint256) -> _eventData_.amountWon
REF_73(uint256) -> _eventData_.newPot
REF_74(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_67,_eth,REF_68,REF_69,REF_70,REF_71,REF_72,REF_73,REF_74)"];
14->20;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_71(uint256) = INTERNAL_CALL, RatScam.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_71(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth > 0

IRs:
TMP_72(bool) = _eth > 0
CONDITION TMP_72"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_75(RSdatasets.Player) -> plyr_[_pID]
REF_76(address) -> REF_75.addr
Transfer dest:REF_76 value:_eth"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
RSEvents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_79(RSdatasets.Player) -> plyr_[_pID]
REF_80(bytes32) -> REF_79.name
Emit onWithdraw(_pID,msg.sender,REF_80,_eth,_now)"];
19->20;
20[label="Node Type: END_IF 20
"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, RatScam.isActivated()()"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, RatScam.isHuman()()"];
22->1;
}
// Function: 3488.sol-RatScam-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID)

IRs:
INTERNAL_CALL, RatScam.updateGenVault(uint256)(_pID)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_476(RSdatasets.Player) -> plyr_[_pID]
REF_477(uint256) -> REF_476.win
REF_479(RSdatasets.Player) -> plyr_[_pID]
REF_480(uint256) -> REF_479.gen
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_477', 'REF_480'] 
REF_482(RSdatasets.Player) -> plyr_[_pID]
REF_483(uint256) -> REF_482.aff
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_370', 'REF_483'] 
_earnings(uint256) := TMP_371(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_372(bool) = _earnings > 0
CONDITION TMP_372"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_484(RSdatasets.Player) -> plyr_[_pID]
REF_485(uint256) -> REF_484.win
REF_485(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_486(RSdatasets.Player) -> plyr_[_pID]
REF_487(uint256) -> REF_486.gen
REF_487(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_488(RSdatasets.Player) -> plyr_[_pID]
REF_489(uint256) -> REF_488.aff
REF_489(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3488.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_470(uint256) = a + b
c(uint256) := TMP_470(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_471(bool) = c >= a
TMP_472(None) = SOLIDITY_CALL require(bool,string)(TMP_471,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3488.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_462(bool) = a == 0
CONDITION TMP_462"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_463(uint256) = a * b
c(uint256) := TMP_463(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_464(uint256) = c / a
TMP_465(bool) = TMP_464 == b
TMP_466(None) = SOLIDITY_CALL require(bool,string)(TMP_465,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3488.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_479(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_479"];
}
// Function: 3488.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_473(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_474(uint256) = TMP_473 / 2
z(uint256) := TMP_474(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_475(bool) = z < y
CONDITION TMP_475"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_476(uint256) = x / z
TMP_477(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_476,z)
TMP_478(uint256) = TMP_477 / 2
z(uint256) := TMP_478(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3488.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_467(bool) = b <= a
TMP_468(None) = SOLIDITY_CALL require(bool,string)(TMP_467,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_469(uint256) = a - b
RETURN TMP_469"];
}
}
