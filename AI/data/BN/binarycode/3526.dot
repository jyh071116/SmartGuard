digraph G {
// Function: 3526.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_82'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_84'] 
TMP_86(uint256) = TMP_85 / 2
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_83', 'TMP_86'] 
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_89(uint256) = TMP_87 / TMP_88
RETURN TMP_89"];
}
// Function: 3526.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_72(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_74(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_73)
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_72', 'TMP_74'] 
RETURN TMP_75"];
}
// Function: 3526.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_76', '312500000000000000000000000'] 
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_77', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_78'] 
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_79', '74999921875000000000000000000000'] 
TMP_81(uint256) = TMP_80 / 156250000
RETURN TMP_81"];
}
// Function: 3526.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_69(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_68)
TMP_70(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_69', 'TMP_70'] 
RETURN TMP_71"];
}
// Function: 3526.sol-FoMo3DFast-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_516(bool) = msg.sender == admin
TMP_517(None) = SOLIDITY_CALL require(bool,string)(TMP_516,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_518(bool) = activated_ == False
TMP_519(None) = SOLIDITY_CALL require(bool,string)(TMP_518,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_737(F3Ddatasets.Round) -> round_[1]
REF_738(uint256) -> REF_737.strt
TMP_520(uint256) = now + rndExtra_
TMP_521(uint256) = TMP_520 - rndGap_
REF_738(uint256) (->round_) := TMP_521(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_739(F3Ddatasets.Round) -> round_[1]
REF_740(uint256) -> REF_739.end
TMP_522(uint256) = now + rndInit_
TMP_523(uint256) = TMP_522 + rndExtra_
REF_740(uint256) (->round_) := TMP_523(uint256)"];
}
// Function: 3526.sol-FoMo3DFast-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_431(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_432(bytes32) = SOLIDITY_CALL keccak256()(TMP_431)
TMP_433 = CONVERT TMP_432 to uint256
TMP_434(uint256) = TMP_433 / now
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_430', 'TMP_434'] 
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_435', 'block.gaslimit'] 
TMP_437(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_438(bytes32) = SOLIDITY_CALL keccak256()(TMP_437)
TMP_439 = CONVERT TMP_438 to uint256
TMP_440(uint256) = TMP_439 / now
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_436', 'TMP_440'] 
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_441', 'block.number'] 
TMP_443(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_442)
TMP_444(bytes32) = SOLIDITY_CALL keccak256()(TMP_443)
TMP_445 = CONVERT TMP_444 to uint256
seed(uint256) := TMP_445(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_446(uint256) = seed / 1000
TMP_447(uint256) = TMP_446 * 1000
TMP_448(uint256) = seed - TMP_447
TMP_449(bool) = TMP_448 < airDropTracker_
CONDITION TMP_449"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3526.sol-FoMo3DFast-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_284(F3Ddatasets.Round) -> round_[_rID]
REF_285(uint256) -> REF_284.strt
TMP_238(uint256) = REF_285 + rndGap_
TMP_239(bool) = _now > TMP_238
REF_286(F3Ddatasets.Round) -> round_[_rID]
REF_287(uint256) -> REF_286.end
TMP_240(bool) = _now <= REF_287
REF_288(F3Ddatasets.Round) -> round_[_rID]
REF_289(uint256) -> REF_288.end
TMP_241(bool) = _now > REF_289
REF_290(F3Ddatasets.Round) -> round_[_rID]
REF_291(uint256) -> REF_290.plyr
TMP_242(bool) = REF_291 == 0
TMP_243(bool) = TMP_241 && TMP_242
TMP_244(bool) = TMP_240 || TMP_243
TMP_245(bool) = TMP_239 && TMP_244
CONDITION TMP_245"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_292(F3Ddatasets.Round) -> round_[_rID]
REF_293(uint256) -> REF_292.end
TMP_247(bool) = _now > REF_293
REF_294(F3Ddatasets.Round) -> round_[_rID]
REF_295(bool) -> REF_294.ended
TMP_248(bool) = REF_295 == False
TMP_249(bool) = TMP_247 && TMP_248
CONDITION TMP_249"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_296(F3Ddatasets.Round) -> round_[_rID]
REF_297(bool) -> REF_296.ended
REF_297(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_250(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_250(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_298(uint256) -> _eventData_.compressedData
REF_299(uint256) -> _eventData_.compressedData
TMP_251(uint256) = _now * 1000000000000000000
TMP_252(uint256) = REF_299 + TMP_251
REF_298(uint256) (->_eventData_) := TMP_252(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_300(uint256) -> _eventData_.compressedIDs
REF_301(uint256) -> _eventData_.compressedIDs
TMP_253(uint256) = REF_301 + _pID
REF_300(uint256) (->_eventData_) := TMP_253(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_303(F3Ddatasets.Player) -> plyr_[_pID]
REF_304(bytes32) -> REF_303.name
REF_305(uint256) -> _eventData_.compressedData
REF_306(uint256) -> _eventData_.compressedIDs
REF_307(address) -> _eventData_.winnerAddr
REF_308(bytes32) -> _eventData_.winnerName
REF_309(uint256) -> _eventData_.amountWon
REF_310(uint256) -> _eventData_.newPot
REF_311(uint256) -> _eventData_.P3DAmount
REF_312(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_304,msg.value,REF_305,REF_306,REF_307,REF_308,REF_309,REF_310,REF_311,REF_312)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_313(F3Ddatasets.Player) -> plyr_[_pID]
REF_314(uint256) -> REF_313.gen
REF_315(F3Ddatasets.Player) -> plyr_[_pID]
REF_316(uint256) -> REF_315.gen
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_316', 'msg.value'] 
REF_314(uint256) (->plyr_) := TMP_255(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3526.sol-FoMo3DFast-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_113(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_113(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_60(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_60(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _affCode == TMP_114
TMP_116(bool) = _affCode == msg.sender
TMP_117(bool) = TMP_115 || TMP_116
CONDITION TMP_117"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
_affID(uint256) := REF_62(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_63(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_63(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_64(F3Ddatasets.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.laff
TMP_118(bool) = _affID != REF_65
CONDITION TMP_118"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
REF_67(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_119(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_119(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3526.sol-FoMo3DFast-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_103(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_103(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_104(bool) = _affCode == 0
TMP_105(bool) = _affCode == _pID
TMP_106(bool) = TMP_104 || TMP_105
CONDITION TMP_106"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_54(F3Ddatasets.Player) -> plyr_[_pID]
REF_55(uint256) -> REF_54.laff
_affCode(uint256) := REF_55(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
TMP_107(bool) = _affCode != REF_57
CONDITION TMP_107"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
REF_59(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_108(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_108(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 3526.sol-FoMo3DFast-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_124(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_124(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_68(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_68(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_125(bool) = _affCode == 
REF_69(F3Ddatasets.Player) -> plyr_[_pID]
REF_70(bytes32) -> REF_69.name
TMP_126(bool) = _affCode == REF_70
TMP_127(bool) = TMP_125 || TMP_126
CONDITION TMP_127"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
_affID(uint256) := REF_72(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_73(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_73(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
TMP_128(bool) = _affID != REF_75
CONDITION TMP_128"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
REF_77(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_129(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_129(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3526.sol-FoMo3DFast-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_449(F3Ddatasets.Round) -> round_[_rID]
REF_450(uint256) -> REF_449.strt
TMP_328(uint256) = REF_450 + rndGap_
TMP_329(bool) = _now > TMP_328
REF_451(F3Ddatasets.Round) -> round_[_rID]
REF_452(uint256) -> REF_451.end
TMP_330(bool) = _now <= REF_452
REF_453(F3Ddatasets.Round) -> round_[_rID]
REF_454(uint256) -> REF_453.end
TMP_331(bool) = _now > REF_454
REF_455(F3Ddatasets.Round) -> round_[_rID]
REF_456(uint256) -> REF_455.plyr
TMP_332(bool) = REF_456 == 0
TMP_333(bool) = TMP_331 && TMP_332
TMP_334(bool) = TMP_330 || TMP_333
TMP_335(bool) = TMP_329 && TMP_334
CONDITION TMP_335"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_457(F3Ddatasets.Round) -> round_[_rID]
REF_458(uint256) -> REF_457.eth
TMP_336(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_458', '_eth'] 
RETURN TMP_336"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_337(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_337"];
}
// Function: 3526.sol-FoMo3DFast-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_439(F3Ddatasets.Round) -> round_[_rIDlast]
REF_440(uint256) -> REF_439.mask
REF_442(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_443(F3Ddatasets.PlayerRounds) -> REF_442[_rIDlast]
REF_444(uint256) -> REF_443.keys
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_440', 'REF_444'] 
TMP_326(uint256) = TMP_325 / 1000000000000000000
REF_446(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_447(F3Ddatasets.PlayerRounds) -> REF_446[_rIDlast]
REF_448(uint256) -> REF_447.mask
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_326', 'REF_448'] 
RETURN TMP_327"];
}
// Function: 3526.sol-FoMo3DFast-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_34(F3Ddatasets.TeamFee) -> fees_[0]
TMP_90(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_34(F3Ddatasets.TeamFee) (->fees_) := TMP_90(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_36(F3Ddatasets.TeamFee) -> fees_[1]
TMP_91(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_36(F3Ddatasets.TeamFee) (->fees_) := TMP_91(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_38(F3Ddatasets.TeamFee) -> fees_[2]
TMP_92(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_38(F3Ddatasets.TeamFee) (->fees_) := TMP_92(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_40(F3Ddatasets.TeamFee) -> fees_[3]
TMP_93(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_40(F3Ddatasets.TeamFee) (->fees_) := TMP_93(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_42(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_94(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_42(F3Ddatasets.PotSplit) (->potSplit_) := TMP_94(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_44(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_95(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_44(F3Ddatasets.PotSplit) (->potSplit_) := TMP_95(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_46(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_96(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_46(F3Ddatasets.PotSplit) (->potSplit_) := TMP_96(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_48(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_97(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_48(F3Ddatasets.PotSplit) (->potSplit_) := TMP_97(F3Ddatasets.PotSplit)"];
}
// Function: 3526.sol-FoMo3DFast-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_350(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_351(F3Ddatasets.PlayerRounds) -> REF_350[_rID]
REF_352(uint256) -> REF_351.keys
TMP_275(bool) = REF_352 == 0
CONDITION TMP_275"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_276(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_276(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_353(F3Ddatasets.Round) -> round_[_rID]
REF_354(uint256) -> REF_353.eth
TMP_277(bool) = REF_354 < 100000000000000000000
REF_355(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_356(F3Ddatasets.PlayerRounds) -> REF_355[_rID]
REF_357(uint256) -> REF_356.eth
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_357', '_eth'] 
TMP_279(bool) = TMP_278 > 1000000000000000000
TMP_280(bool) = TMP_277 && TMP_279
CONDITION TMP_280"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_360(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_361(F3Ddatasets.PlayerRounds) -> REF_360[_rID]
REF_362(uint256) -> REF_361.eth
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_362'] 
_availableLimit(uint256) := TMP_281(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_282(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_364(F3Ddatasets.Player) -> plyr_[_pID]
REF_365(uint256) -> REF_364.gen
REF_366(F3Ddatasets.Player) -> plyr_[_pID]
REF_367(uint256) -> REF_366.gen
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_367', '_refund'] 
REF_365(uint256) (->plyr_) := TMP_283(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_284(bool) = _eth > 1000000000
CONDITION TMP_284"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_369(F3Ddatasets.Round) -> round_[_rID]
REF_370(uint256) -> REF_369.eth
TMP_285(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_370', '_eth'] 
_keys(uint256) := TMP_285(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_286(bool) = _keys >= 1000000000000000000
CONDITION TMP_286"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DFast.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_372(F3Ddatasets.Round) -> round_[_rID]
REF_373(uint256) -> REF_372.plyr
TMP_288(bool) = REF_373 != _pID
CONDITION TMP_288"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_374(F3Ddatasets.Round) -> round_[_rID]
REF_375(uint256) -> REF_374.plyr
REF_375(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_376(F3Ddatasets.Round) -> round_[_rID]
REF_377(uint256) -> REF_376.team
TMP_289(bool) = REF_377 != _team
CONDITION TMP_289"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_378(F3Ddatasets.Round) -> round_[_rID]
REF_379(uint256) -> REF_378.team
REF_379(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_380(uint256) -> _eventData_.compressedData
REF_381(uint256) -> _eventData_.compressedData
TMP_290(uint256) = REF_381 + 100
REF_380(uint256) (->_eventData_) := TMP_290(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_291(bool) = _eth >= 100000000000000000
CONDITION TMP_291"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_292(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_293(bool) = INTERNAL_CALL, FoMo3DFast.airdrop()()
TMP_294(bool) = TMP_293 == True
CONDITION TMP_294"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_295(bool) = _eth >= 10000000000000000000
CONDITION TMP_295"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_297(uint256) = TMP_296 / 100
_prize(uint256) := TMP_297(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_383(F3Ddatasets.Player) -> plyr_[_pID]
REF_384(uint256) -> REF_383.win
REF_385(F3Ddatasets.Player) -> plyr_[_pID]
REF_386(uint256) -> REF_385.win
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_386', '_prize'] 
REF_384(uint256) (->plyr_) := TMP_298(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_299(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_389(uint256) -> _eventData_.compressedData
REF_389(-> _eventData_) = REF_389 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_300(bool) = _eth >= 1000000000000000000
TMP_301(bool) = _eth < 10000000000000000000
TMP_302(bool) = TMP_300 && TMP_301
CONDITION TMP_302"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_304(uint256) = TMP_303 / 100
_prize(uint256) := TMP_304(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_391(F3Ddatasets.Player) -> plyr_[_pID]
REF_392(uint256) -> REF_391.win
REF_393(F3Ddatasets.Player) -> plyr_[_pID]
REF_394(uint256) -> REF_393.win
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_394', '_prize'] 
REF_392(uint256) (->plyr_) := TMP_305(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_306(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_397(uint256) -> _eventData_.compressedData
REF_397(-> _eventData_) = REF_397 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_307(bool) = _eth >= 100000000000000000
TMP_308(bool) = _eth < 1000000000000000000
TMP_309(bool) = TMP_307 && TMP_308
CONDITION TMP_309"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_311(uint256) = TMP_310 / 100
_prize(uint256) := TMP_311(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_399(F3Ddatasets.Player) -> plyr_[_pID]
REF_400(uint256) -> REF_399.win
REF_401(F3Ddatasets.Player) -> plyr_[_pID]
REF_402(uint256) -> REF_401.win
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_402', '_prize'] 
REF_400(uint256) (->plyr_) := TMP_312(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_313(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_405(uint256) -> _eventData_.compressedData
REF_405(-> _eventData_) = REF_405 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_406(uint256) -> _eventData_.compressedData
REF_406(-> _eventData_) = REF_406 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_407(uint256) -> _eventData_.compressedData
TMP_314(uint256) = _prize * 1000000000000000000000000000000000
REF_407(-> _eventData_) = REF_407 + TMP_314"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_408(uint256) -> _eventData_.compressedData
REF_409(uint256) -> _eventData_.compressedData
TMP_315(uint256) = airDropTracker_ * 1000
TMP_316(uint256) = REF_409 + TMP_315
REF_408(uint256) (->_eventData_) := TMP_316(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_410(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_411(F3Ddatasets.PlayerRounds) -> REF_410[_rID]
REF_412(uint256) -> REF_411.keys
REF_414(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_415(F3Ddatasets.PlayerRounds) -> REF_414[_rID]
REF_416(uint256) -> REF_415.keys
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_416'] 
REF_412(uint256) (->plyrRnds_) := TMP_317(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_417(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_418(F3Ddatasets.PlayerRounds) -> REF_417[_rID]
REF_419(uint256) -> REF_418.eth
REF_421(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_422(F3Ddatasets.PlayerRounds) -> REF_421[_rID]
REF_423(uint256) -> REF_422.eth
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_423'] 
REF_419(uint256) (->plyrRnds_) := TMP_318(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.keys
REF_427(F3Ddatasets.Round) -> round_[_rID]
REF_428(uint256) -> REF_427.keys
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_428'] 
REF_425(uint256) (->round_) := TMP_319(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_429(F3Ddatasets.Round) -> round_[_rID]
REF_430(uint256) -> REF_429.eth
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.eth
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_433'] 
REF_430(uint256) (->round_) := TMP_320(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_434(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_435(uint256) -> REF_434[_team]
REF_437(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_438(uint256) -> REF_437[_team]
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_438'] 
REF_435(uint256) (->rndTmEth_) := TMP_321(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_322(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_322(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_323(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_323(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 3526.sol-FoMo3DFast-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_498(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_498(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_362(bool) = _pID == 0
CONDITION TMP_362"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_363(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_363(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_364(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_364(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_365(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_365(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_502(uint256) -> pIDxAddr_[msg.sender]
REF_502(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_503(F3Ddatasets.Player) -> plyr_[_pID]
REF_504(address) -> REF_503.addr
REF_504(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_366(bool) = _name != 
CONDITION TMP_366"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_505(uint256) -> pIDxName_[_name]
REF_505(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_506(F3Ddatasets.Player) -> plyr_[_pID]
REF_507(bytes32) -> REF_506.name
REF_507(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_508(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_509(bool) -> REF_508[_name]
REF_509(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_367(bool) = _laff != 0
TMP_368(bool) = _laff != _pID
TMP_369(bool) = TMP_367 && TMP_368
CONDITION TMP_369"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_510(F3Ddatasets.Player) -> plyr_[_pID]
REF_511(uint256) -> REF_510.laff
REF_511(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_512(uint256) -> _eventData_.compressedData
REF_513(uint256) -> _eventData_.compressedData
TMP_370(uint256) = REF_513 + 1
REF_512(uint256) (->_eventData_) := TMP_370(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3526.sol-FoMo3DFast-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_450(uint256) = _eth / 100
_p1(uint256) := TMP_450(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_451(uint256) = _eth / 50
_com(uint256) := TMP_451(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_452(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_452(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_453 = CONVERT admin to address
TMP_455(bool) = LOW_LEVEL_CALL, dest:TMP_453, function:call, arguments:[] value:_com 
TMP_456 = UnaryType.BANG TMP_455 
CONDITION TMP_456"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_457(uint256) = _eth / 10
_aff(uint256) := TMP_457(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_458(bool) = _affID != _pID
REF_627(F3Ddatasets.Player) -> plyr_[_affID]
REF_628(bytes32) -> REF_627.name
TMP_459(bool) = REF_628 != 
TMP_460(bool) = TMP_458 && TMP_459
CONDITION TMP_460"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_629(F3Ddatasets.Player) -> plyr_[_affID]
REF_630(uint256) -> REF_629.aff
REF_632(F3Ddatasets.Player) -> plyr_[_affID]
REF_633(uint256) -> REF_632.aff
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_633'] 
REF_630(uint256) (->plyr_) := TMP_461(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_635(F3Ddatasets.Player) -> plyr_[_affID]
REF_636(address) -> REF_635.addr
REF_637(F3Ddatasets.Player) -> plyr_[_affID]
REF_638(bytes32) -> REF_637.name
Emit onAffiliatePayout(_affID,REF_636,REF_638,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_641(F3Ddatasets.TeamFee) -> fees_[_team]
REF_642(uint256) -> REF_641.p3d
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_642'] 
TMP_464(uint256) = TMP_463 / 100
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_464'] 
_p3d(uint256) := TMP_465(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_466(bool) = _p3d > 0
CONDITION TMP_466"];
16->17[label="True"];
16->21[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_467(uint256) = _p3d / 2
_potAmount(uint256) := TMP_467(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_468(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_468"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_645(F3Ddatasets.Round) -> round_[_rID]
REF_646(uint256) -> REF_645.pot
REF_647(F3Ddatasets.Round) -> round_[_rID]
REF_648(uint256) -> REF_647.pot
TMP_470(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_648', '_potAmount'] 
REF_646(uint256) (->round_) := TMP_470(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_650(uint256) -> _eventData_.P3DAmount
REF_652(uint256) -> _eventData_.P3DAmount
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_652'] 
REF_650(uint256) (->_eventData_) := TMP_471(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3526.sol-FoMo3DFast-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_660(F3Ddatasets.TeamFee) -> fees_[_team]
REF_661(uint256) -> REF_660.gen
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_661'] 
TMP_476(uint256) = TMP_475 / 100
_gen(uint256) := TMP_476(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_477(uint256) = _eth / 100
_air(uint256) := TMP_477(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_478(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_480(uint256) = TMP_479 / 100
REF_667(F3Ddatasets.TeamFee) -> fees_[_team]
REF_668(uint256) -> REF_667.p3d
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_668'] 
TMP_482(uint256) = TMP_481 / 100
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_480', 'TMP_482'] 
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_483'] 
_eth(uint256) := TMP_484(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_485(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_486(uint256) = INTERNAL_CALL, FoMo3DFast.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_486(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_487(bool) = _dust > 0
CONDITION TMP_487"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_488(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_671(F3Ddatasets.Round) -> round_[_rID]
REF_672(uint256) -> REF_671.pot
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_675(F3Ddatasets.Round) -> round_[_rID]
REF_676(uint256) -> REF_675.pot
TMP_490(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_489', 'REF_676'] 
REF_672(uint256) (->round_) := TMP_490(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_677(uint256) -> _eventData_.genAmount
REF_679(uint256) -> _eventData_.genAmount
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_679'] 
REF_677(uint256) (->_eventData_) := TMP_491(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_680(uint256) -> _eventData_.potAmount
REF_680(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3526.sol-FoMo3DFast-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_522(F3Ddatasets.Round) -> round_[_rID]
REF_523(uint256) -> REF_522.plyr
_winPID(uint256) := REF_523(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_524(F3Ddatasets.Round) -> round_[_rID]
REF_525(uint256) -> REF_524.team
_winTID(uint256) := REF_525(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_526(F3Ddatasets.Round) -> round_[_rID]
REF_527(uint256) -> REF_526.pot
_pot(uint256) := REF_527(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_378(uint256) = TMP_377 / 100
_win(uint256) := TMP_378(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_379(uint256) = _pot / 50
_com(uint256) := TMP_379(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_530(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_531(uint256) -> REF_530.gen
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_531'] 
TMP_381(uint256) = TMP_380 / 100
_gen(uint256) := TMP_381(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_533(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_534(uint256) -> REF_533.p3d
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_534'] 
TMP_383(uint256) = TMP_382 / 100
_p3d(uint256) := TMP_383(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_384', '_com'] 
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_385', '_gen'] 
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_386', '_p3d'] 
_res(uint256) := TMP_387(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_540(F3Ddatasets.Round) -> round_[_rID]
REF_541(uint256) -> REF_540.keys
TMP_389(uint256) = TMP_388 / REF_541
_ppt(uint256) := TMP_389(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_544(F3Ddatasets.Round) -> round_[_rID]
REF_545(uint256) -> REF_544.keys
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_545'] 
TMP_391(uint256) = TMP_390 / 1000000000000000000
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_391'] 
_dust(uint256) := TMP_392(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_393(bool) = _dust > 0
CONDITION TMP_393"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_394(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_395(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_548(F3Ddatasets.Player) -> plyr_[_winPID]
REF_549(uint256) -> REF_548.win
REF_551(F3Ddatasets.Player) -> plyr_[_winPID]
REF_552(uint256) -> REF_551.win
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_552'] 
REF_549(uint256) (->plyr_) := TMP_396(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_p3d / 2))

IRs:
TMP_398(uint256) = _p3d / 2
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_398'] 
Transfer dest:admin value:TMP_399"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = _pot.add(_p3d / 2)

IRs:
REF_556(F3Ddatasets.Round) -> round_[_rID]
REF_557(uint256) -> REF_556.pot
TMP_401(uint256) = _p3d / 2
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', 'TMP_401'] 
REF_557(uint256) (->round_) := TMP_402(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_559(F3Ddatasets.Round) -> round_[_rID]
REF_560(uint256) -> REF_559.mask
REF_562(F3Ddatasets.Round) -> round_[_rID]
REF_563(uint256) -> REF_562.mask
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_563'] 
REF_560(uint256) (->round_) := TMP_403(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_564(uint256) -> _eventData_.compressedData
REF_565(uint256) -> _eventData_.compressedData
REF_566(F3Ddatasets.Round) -> round_[_rID]
REF_567(uint256) -> REF_566.end
TMP_404(uint256) = REF_567 * 1000000
TMP_405(uint256) = REF_565 + TMP_404
REF_564(uint256) (->_eventData_) := TMP_405(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_568(uint256) -> _eventData_.compressedIDs
REF_569(uint256) -> _eventData_.compressedIDs
TMP_406(uint256) = _winPID * 100000000000000000000000000
TMP_407(uint256) = REF_569 + TMP_406
TMP_408(uint256) = _winTID * 100000000000000000
TMP_409(uint256) = TMP_407 + TMP_408
REF_568(uint256) (->_eventData_) := TMP_409(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_570(address) -> _eventData_.winnerAddr
REF_571(F3Ddatasets.Player) -> plyr_[_winPID]
REF_572(address) -> REF_571.addr
REF_570(address) (->_eventData_) := REF_572(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_573(bytes32) -> _eventData_.winnerName
REF_574(F3Ddatasets.Player) -> plyr_[_winPID]
REF_575(bytes32) -> REF_574.name
REF_573(bytes32) (->_eventData_) := REF_575(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_576(uint256) -> _eventData_.amountWon
REF_576(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_577(uint256) -> _eventData_.genAmount
REF_577(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_578(uint256) -> _eventData_.P3DAmount
REF_578(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_579(uint256) -> _eventData_.newPot
REF_579(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_410(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_411(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_580(F3Ddatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.strt
REF_581(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_582(F3Ddatasets.Round) -> round_[_rID]
REF_583(uint256) -> REF_582.end
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_412', 'rndGap_'] 
REF_583(uint256) (->round_) := TMP_413(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_586(F3Ddatasets.Round) -> round_[_rID]
REF_587(uint256) -> REF_586.pot
REF_587(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3526.sol-FoMo3DFast-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_721(uint256) -> _eventData_.compressedData
REF_722(uint256) -> _eventData_.compressedData
TMP_508(uint256) = now * 1000000000000000000
TMP_509(uint256) = REF_722 + TMP_508
TMP_510(uint256) = _team * 100000000000000000000000000000
TMP_511(uint256) = TMP_509 + TMP_510
REF_721(uint256) (->_eventData_) := TMP_511(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_723(uint256) -> _eventData_.compressedIDs
REF_724(uint256) -> _eventData_.compressedIDs
TMP_512(uint256) = REF_724 + _pID
TMP_513(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_514(uint256) = TMP_512 + TMP_513
REF_723(uint256) (->_eventData_) := TMP_514(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_726(uint256) -> _eventData_.compressedData
REF_727(uint256) -> _eventData_.compressedIDs
REF_728(F3Ddatasets.Player) -> plyr_[_pID]
REF_729(bytes32) -> REF_728.name
REF_730(address) -> _eventData_.winnerAddr
REF_731(bytes32) -> _eventData_.winnerName
REF_732(uint256) -> _eventData_.amountWon
REF_733(uint256) -> _eventData_.newPot
REF_734(uint256) -> _eventData_.P3DAmount
REF_735(uint256) -> _eventData_.genAmount
REF_736(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_726,REF_727,REF_729,msg.sender,_eth,_keys,REF_730,REF_731,REF_732,REF_733,REF_734,REF_735,REF_736,airDropPot_)"];
}
// Function: 3526.sol-FoMo3DFast-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_98(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_98(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_50(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_50(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_52,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 3526.sol-FoMo3DFast-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(uint256) -> REF_154.strt
TMP_189(uint256) = REF_155 + rndGap_
TMP_190(bool) = _now > TMP_189
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(uint256) -> REF_156.end
TMP_191(bool) = _now <= REF_157
REF_158(F3Ddatasets.Round) -> round_[_rID]
REF_159(uint256) -> REF_158.end
TMP_192(bool) = _now > REF_159
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.plyr
TMP_193(bool) = REF_161 == 0
TMP_194(bool) = TMP_192 && TMP_193
TMP_195(bool) = TMP_191 || TMP_194
TMP_196(bool) = TMP_190 && TMP_195
CONDITION TMP_196"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_162(F3Ddatasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.keys
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_163', '1000000000000000000'] 
TMP_198(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_197', '1000000000000000000'] 
RETURN TMP_198"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3526.sol-FoMo3DFast-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_236(F3Ddatasets.Round) -> round_[_rID]
REF_237(uint256) -> REF_236.ico
REF_238(F3Ddatasets.Round) -> round_[_rID]
REF_239(uint256) -> REF_238.keys
REF_240(F3Ddatasets.Round) -> round_[_rID]
REF_241(uint256) -> REF_240.end
REF_242(F3Ddatasets.Round) -> round_[_rID]
REF_243(uint256) -> REF_242.strt
REF_244(F3Ddatasets.Round) -> round_[_rID]
REF_245(uint256) -> REF_244.pot
REF_246(F3Ddatasets.Round) -> round_[_rID]
REF_247(uint256) -> REF_246.team
REF_248(F3Ddatasets.Round) -> round_[_rID]
REF_249(uint256) -> REF_248.plyr
TMP_229(uint256) = REF_249 * 10
TMP_230(uint256) = REF_247 + TMP_229
REF_250(F3Ddatasets.Round) -> round_[_rID]
REF_251(uint256) -> REF_250.plyr
REF_252(F3Ddatasets.Player) -> plyr_[REF_251]
REF_253(address) -> REF_252.addr
REF_254(F3Ddatasets.Round) -> round_[_rID]
REF_255(uint256) -> REF_254.plyr
REF_256(F3Ddatasets.Player) -> plyr_[REF_255]
REF_257(bytes32) -> REF_256.name
REF_258(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_259(uint256) -> REF_258[0]
REF_260(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_261(uint256) -> REF_260[1]
REF_262(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_263(uint256) -> REF_262[2]
REF_264(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_265(uint256) -> REF_264[3]
TMP_231(uint256) = airDropPot_ * 1000
TMP_232(uint256) = airDropTracker_ + TMP_231
RETURN REF_237,_rID,REF_239,REF_241,REF_243,REF_245,TMP_230,REF_253,REF_257,REF_259,REF_261,REF_263,REF_265,TMP_232"];
}
// Function: 3526.sol-FoMo3DFast-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_233 = CONVERT 0 to address
TMP_234(bool) = _addr == TMP_233
CONDITION TMP_234"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_235(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_266(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_266(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_267(F3Ddatasets.Player) -> plyr_[_pID]
REF_268(bytes32) -> REF_267.name
REF_269(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_270(F3Ddatasets.PlayerRounds) -> REF_269[_rID]
REF_271(uint256) -> REF_270.keys
REF_272(F3Ddatasets.Player) -> plyr_[_pID]
REF_273(uint256) -> REF_272.win
REF_274(F3Ddatasets.Player) -> plyr_[_pID]
REF_275(uint256) -> REF_274.gen
REF_277(F3Ddatasets.Player) -> plyr_[_pID]
REF_278(uint256) -> REF_277.lrnd
TMP_236(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_278)
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_275', 'TMP_236'] 
REF_279(F3Ddatasets.Player) -> plyr_[_pID]
REF_280(uint256) -> REF_279.aff
REF_281(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_282(F3Ddatasets.PlayerRounds) -> REF_281[_rID]
REF_283(uint256) -> REF_282.eth
RETURN _pID,REF_268,REF_271,REF_273,TMP_237,REF_280,REF_283"];
}
// Function: 3526.sol-FoMo3DFast-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_176(F3Ddatasets.Round) -> round_[_rID]
REF_177(uint256) -> REF_176.end
TMP_205(bool) = now > REF_177
REF_178(F3Ddatasets.Round) -> round_[_rID]
REF_179(bool) -> REF_178.ended
TMP_206(bool) = REF_179 == False
TMP_207(bool) = TMP_205 && TMP_206
REF_180(F3Ddatasets.Round) -> round_[_rID]
REF_181(uint256) -> REF_180.plyr
TMP_208(bool) = REF_181 != 0
TMP_209(bool) = TMP_207 && TMP_208
CONDITION TMP_209"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_182(F3Ddatasets.Round) -> round_[_rID]
REF_183(uint256) -> REF_182.plyr
TMP_210(bool) = REF_183 == _pID
CONDITION TMP_210"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_184(F3Ddatasets.Player) -> plyr_[_pID]
REF_185(uint256) -> REF_184.win
REF_187(F3Ddatasets.Round) -> round_[_rID]
REF_188(uint256) -> REF_187.pot
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_188', '48'] 
TMP_212(uint256) = TMP_211 / 100
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_185', 'TMP_212'] 
REF_190(F3Ddatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.gen
TMP_214(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_194(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_195(F3Ddatasets.PlayerRounds) -> REF_194[_rID]
REF_196(uint256) -> REF_195.mask
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_214', 'REF_196'] 
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_191', 'TMP_215'] 
REF_197(F3Ddatasets.Player) -> plyr_[_pID]
REF_198(uint256) -> REF_197.aff
RETURN TMP_213,TMP_216,REF_198"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_199(F3Ddatasets.Player) -> plyr_[_pID]
REF_200(uint256) -> REF_199.win
REF_201(F3Ddatasets.Player) -> plyr_[_pID]
REF_202(uint256) -> REF_201.gen
TMP_217(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_205(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_206(F3Ddatasets.PlayerRounds) -> REF_205[_rID]
REF_207(uint256) -> REF_206.mask
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_217', 'REF_207'] 
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_202', 'TMP_218'] 
REF_208(F3Ddatasets.Player) -> plyr_[_pID]
REF_209(uint256) -> REF_208.aff
RETURN REF_200,TMP_219,REF_209"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_210(F3Ddatasets.Player) -> plyr_[_pID]
REF_211(uint256) -> REF_210.win
REF_212(F3Ddatasets.Player) -> plyr_[_pID]
REF_213(uint256) -> REF_212.gen
REF_215(F3Ddatasets.Player) -> plyr_[_pID]
REF_216(uint256) -> REF_215.lrnd
TMP_220(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_216)
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_213', 'TMP_220'] 
REF_217(F3Ddatasets.Player) -> plyr_[_pID]
REF_218(uint256) -> REF_217.aff
RETURN REF_211,TMP_221,REF_218"];
}
// Function: 3526.sol-FoMo3DFast-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.mask
REF_222(F3Ddatasets.Round) -> round_[_rID]
REF_223(uint256) -> REF_222.pot
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.team
REF_227(F3Ddatasets.PotSplit) -> potSplit_[REF_226]
REF_228(uint256) -> REF_227.gen
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_223', 'REF_228'] 
TMP_223(uint256) = TMP_222 / 100
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_223', '1000000000000000000'] 
REF_230(F3Ddatasets.Round) -> round_[_rID]
REF_231(uint256) -> REF_230.keys
TMP_225(uint256) = TMP_224 / REF_231
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_220', 'TMP_225'] 
REF_233(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_234(F3Ddatasets.PlayerRounds) -> REF_233[_rID]
REF_235(uint256) -> REF_234.keys
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_226', 'REF_235'] 
TMP_228(uint256) = TMP_227 / 1000000000000000000
RETURN TMP_228"];
}
// Function: 3526.sol-FoMo3DFast-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_166(F3Ddatasets.Round) -> round_[_rID]
REF_167(uint256) -> REF_166.end
TMP_199(bool) = _now < REF_167
CONDITION TMP_199"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_168(F3Ddatasets.Round) -> round_[_rID]
REF_169(uint256) -> REF_168.strt
TMP_200(uint256) = REF_169 + rndGap_
TMP_201(bool) = _now > TMP_200
CONDITION TMP_201"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_170(F3Ddatasets.Round) -> round_[_rID]
REF_171(uint256) -> REF_170.end
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_171', '_now'] 
RETURN TMP_202"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_173(F3Ddatasets.Round) -> round_[_rID]
REF_174(uint256) -> REF_173.strt
TMP_203(uint256) = REF_174 + rndGap_
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_203', '_now'] 
RETURN TMP_204"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3526.sol-FoMo3DFast-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_461(F3Ddatasets.Round) -> round_[_rID]
REF_462(uint256) -> REF_461.strt
TMP_338(uint256) = REF_462 + rndGap_
TMP_339(bool) = _now > TMP_338
REF_463(F3Ddatasets.Round) -> round_[_rID]
REF_464(uint256) -> REF_463.end
TMP_340(bool) = _now <= REF_464
REF_465(F3Ddatasets.Round) -> round_[_rID]
REF_466(uint256) -> REF_465.end
TMP_341(bool) = _now > REF_466
REF_467(F3Ddatasets.Round) -> round_[_rID]
REF_468(uint256) -> REF_467.plyr
TMP_342(bool) = REF_468 == 0
TMP_343(bool) = TMP_341 && TMP_342
TMP_344(bool) = TMP_340 || TMP_343
TMP_345(bool) = TMP_339 && TMP_344
CONDITION TMP_345"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_469(F3Ddatasets.Round) -> round_[_rID]
REF_470(uint256) -> REF_469.keys
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_470', '_keys'] 
TMP_347(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_346', '_keys'] 
RETURN TMP_347"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_348"];
}
// Function: 3526.sol-FoMo3DFast-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_525(bool) = activated_ == True
TMP_526(None) = SOLIDITY_CALL require(bool,string)(TMP_525,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3526.sol-FoMo3DFast-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_527(bool) = _codeLength == 0
TMP_528(None) = SOLIDITY_CALL require(bool,string)(TMP_527,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3526.sol-FoMo3DFast-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_529(bool) = _eth >= 1000000000
TMP_530(None) = SOLIDITY_CALL require(bool,string)(TMP_529,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_531(bool) = _eth <= 100000000000000000000000
TMP_532(None) = SOLIDITY_CALL require(bool,string)(TMP_531,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3526.sol-FoMo3DFast-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_514(F3Ddatasets.Player) -> plyr_[_pID]
REF_515(uint256) -> REF_514.lrnd
TMP_374(bool) = REF_515 != 0
CONDITION TMP_374"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_516(F3Ddatasets.Player) -> plyr_[_pID]
REF_517(uint256) -> REF_516.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_517)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_518(F3Ddatasets.Player) -> plyr_[_pID]
REF_519(uint256) -> REF_518.lrnd
REF_519(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_520(uint256) -> _eventData_.compressedData
REF_521(uint256) -> _eventData_.compressedData
TMP_376(uint256) = REF_521 + 10
REF_520(uint256) (->_eventData_) := TMP_376(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3526.sol-FoMo3DFast-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_472(uint256) = rID_ + 1
_rID(uint256) := TMP_472(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_653(F3Ddatasets.Round) -> round_[_rID]
REF_654(uint256) -> REF_653.pot
REF_655(F3Ddatasets.Round) -> round_[_rID]
REF_656(uint256) -> REF_655.pot
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_656', 'msg.value'] 
REF_654(uint256) (->round_) := TMP_473(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 3526.sol-FoMo3DFast-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_318(F3Ddatasets.Round) -> round_[_rID]
REF_319(uint256) -> REF_318.strt
TMP_256(uint256) = REF_319 + rndGap_
TMP_257(bool) = _now > TMP_256
REF_320(F3Ddatasets.Round) -> round_[_rID]
REF_321(uint256) -> REF_320.end
TMP_258(bool) = _now <= REF_321
REF_322(F3Ddatasets.Round) -> round_[_rID]
REF_323(uint256) -> REF_322.end
TMP_259(bool) = _now > REF_323
REF_324(F3Ddatasets.Round) -> round_[_rID]
REF_325(uint256) -> REF_324.plyr
TMP_260(bool) = REF_325 == 0
TMP_261(bool) = TMP_259 && TMP_260
TMP_262(bool) = TMP_258 || TMP_261
TMP_263(bool) = TMP_257 && TMP_262
CONDITION TMP_263"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_326(F3Ddatasets.Player) -> plyr_[_pID]
REF_327(uint256) -> REF_326.gen
TMP_264(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
TMP_265(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_264', '_eth'] 
REF_327(uint256) (->plyr_) := TMP_265(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_329(F3Ddatasets.Round) -> round_[_rID]
REF_330(uint256) -> REF_329.end
TMP_267(bool) = _now > REF_330
REF_331(F3Ddatasets.Round) -> round_[_rID]
REF_332(bool) -> REF_331.ended
TMP_268(bool) = REF_332 == False
TMP_269(bool) = TMP_267 && TMP_268
CONDITION TMP_269"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_333(F3Ddatasets.Round) -> round_[_rID]
REF_334(bool) -> REF_333.ended
REF_334(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_270(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_270(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_335(uint256) -> _eventData_.compressedData
REF_336(uint256) -> _eventData_.compressedData
TMP_271(uint256) = _now * 1000000000000000000
TMP_272(uint256) = REF_336 + TMP_271
REF_335(uint256) (->_eventData_) := TMP_272(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_337(uint256) -> _eventData_.compressedIDs
REF_338(uint256) -> _eventData_.compressedIDs
TMP_273(uint256) = REF_338 + _pID
REF_337(uint256) (->_eventData_) := TMP_273(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_340(F3Ddatasets.Player) -> plyr_[_pID]
REF_341(bytes32) -> REF_340.name
REF_342(uint256) -> _eventData_.compressedData
REF_343(uint256) -> _eventData_.compressedIDs
REF_344(address) -> _eventData_.winnerAddr
REF_345(bytes32) -> _eventData_.winnerName
REF_346(uint256) -> _eventData_.amountWon
REF_347(uint256) -> _eventData_.newPot
REF_348(uint256) -> _eventData_.P3DAmount
REF_349(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_341,REF_342,REF_343,REF_344,REF_345,REF_346,REF_347,REF_348,REF_349)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3526.sol-FoMo3DFast-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_85(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_85(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_143 = CONVERT 0 to address
TMP_144(bool) = _affCode == TMP_143
TMP_145(bool) = _affCode == msg.sender
TMP_146(bool) = TMP_144 || TMP_145
CONDITION TMP_146"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.laff
_affID(uint256) := REF_87(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_88(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_88(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_89(F3Ddatasets.Player) -> plyr_[_pID]
REF_90(uint256) -> REF_89.laff
TMP_147(bool) = _affID != REF_90
CONDITION TMP_147"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_91(F3Ddatasets.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.laff
REF_92(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_148(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_148(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3526.sol-FoMo3DFast-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_78(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_78(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_134(bool) = _affCode == 0
TMP_135(bool) = _affCode == _pID
TMP_136(bool) = TMP_134 || TMP_135
CONDITION TMP_136"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_79(F3Ddatasets.Player) -> plyr_[_pID]
REF_80(uint256) -> REF_79.laff
_affCode(uint256) := REF_80(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
TMP_137(bool) = _affCode != REF_82
CONDITION TMP_137"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_83(F3Ddatasets.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
REF_84(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_138(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_138(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 3526.sol-FoMo3DFast-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_93(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_93(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_153(bool) = _affCode == 
REF_94(F3Ddatasets.Player) -> plyr_[_pID]
REF_95(bytes32) -> REF_94.name
TMP_154(bool) = _affCode == REF_95
TMP_155(bool) = TMP_153 || TMP_154
CONDITION TMP_155"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(uint256) -> REF_96.laff
_affID(uint256) := REF_97(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_98(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_98(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_99(F3Ddatasets.Player) -> plyr_[_pID]
REF_100(uint256) -> REF_99.laff
TMP_156(bool) = _affID != REF_100
CONDITION TMP_156"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_pID]
REF_102(uint256) -> REF_101.laff
REF_102(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_157(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_157(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3526.sol-FoMo3DFast-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_349 = CONVERT PlayerBook to address
TMP_350(bool) = msg.sender == TMP_349
TMP_351(None) = SOLIDITY_CALL require(bool,string)(TMP_350,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_474(uint256) -> pIDxAddr_[_addr]
TMP_352(bool) = REF_474 != _pID
CONDITION TMP_352"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_475(uint256) -> pIDxAddr_[_addr]
REF_475(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_476(uint256) -> pIDxName_[_name]
TMP_353(bool) = REF_476 != _pID
CONDITION TMP_353"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_477(uint256) -> pIDxName_[_name]
REF_477(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_478(F3Ddatasets.Player) -> plyr_[_pID]
REF_479(address) -> REF_478.addr
TMP_354(bool) = REF_479 != _addr
CONDITION TMP_354"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_480(F3Ddatasets.Player) -> plyr_[_pID]
REF_481(address) -> REF_480.addr
REF_481(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_482(F3Ddatasets.Player) -> plyr_[_pID]
REF_483(bytes32) -> REF_482.name
TMP_355(bool) = REF_483 != _name
CONDITION TMP_355"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_484(F3Ddatasets.Player) -> plyr_[_pID]
REF_485(bytes32) -> REF_484.name
REF_485(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_486(F3Ddatasets.Player) -> plyr_[_pID]
REF_487(uint256) -> REF_486.laff
TMP_356(bool) = REF_487 != _laff
CONDITION TMP_356"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_488(F3Ddatasets.Player) -> plyr_[_pID]
REF_489(uint256) -> REF_488.laff
REF_489(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_490(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_491(bool) -> REF_490[_name]
TMP_357(bool) = REF_491 == False
CONDITION TMP_357"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_492(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_493(bool) -> REF_492[_name]
REF_493(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3526.sol-FoMo3DFast-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_358 = CONVERT PlayerBook to address
TMP_359(bool) = msg.sender == TMP_358
TMP_360(None) = SOLIDITY_CALL require(bool,string)(TMP_359,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_494(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_495(bool) -> REF_494[_name]
TMP_361(bool) = REF_495 == False
CONDITION TMP_361"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_496(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_497(bool) -> REF_496[_name]
REF_497(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3526.sol-FoMo3DFast-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_181(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_181(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_139(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_139(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_141(F3Ddatasets.Player) -> plyr_[_affID]
REF_142(address) -> REF_141.addr
REF_143(F3Ddatasets.Player) -> plyr_[_affID]
REF_144(bytes32) -> REF_143.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_142,REF_144,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 3526.sol-FoMo3DFast-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_185(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_185(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_148(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_148(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_150(F3Ddatasets.Player) -> plyr_[_affID]
REF_151(address) -> REF_150.addr
REF_152(F3Ddatasets.Player) -> plyr_[_affID]
REF_153(bytes32) -> REF_152.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_151,REF_153,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 3526.sol-FoMo3DFast-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0xf36E1c00Dd9c253DBD9e1914739F99F76b8b4A6E)

IRs:
TMP_524 = CONVERT 1389740278720607602940283881859970889985527859822 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_524(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = FOMO Fast

IRs:
name(string) := FOMO Fast(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = FAST

IRs:
symbol(string) := FAST(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 20

IRs:
rndInc_(uint256) := 20(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 28800

IRs:
rndMax_(uint256) := 28800(uint256)"];
}
// Function: 3526.sol-FoMo3DFast-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 1800

IRs:
rndExtra_(uint256) := 1800(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 1800

IRs:
rndGap_(uint256) := 1800(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3526.sol-FoMo3DFast-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_414(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_414(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_415(bool) = _earnings > 0
CONDITION TMP_415"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_588(F3Ddatasets.Player) -> plyr_[_pID]
REF_589(uint256) -> REF_588.gen
REF_591(F3Ddatasets.Player) -> plyr_[_pID]
REF_592(uint256) -> REF_591.gen
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_592'] 
REF_589(uint256) (->plyr_) := TMP_416(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_593(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_594(F3Ddatasets.PlayerRounds) -> REF_593[_rIDlast]
REF_595(uint256) -> REF_594.mask
REF_597(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_598(F3Ddatasets.PlayerRounds) -> REF_597[_rIDlast]
REF_599(uint256) -> REF_598.mask
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_599'] 
REF_595(uint256) (->plyrRnds_) := TMP_417(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3526.sol-FoMo3DFast-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_682(F3Ddatasets.Round) -> round_[_rID]
REF_683(uint256) -> REF_682.keys
TMP_493(uint256) = TMP_492 / REF_683
_ppt(uint256) := TMP_493(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_684(F3Ddatasets.Round) -> round_[_rID]
REF_685(uint256) -> REF_684.mask
REF_687(F3Ddatasets.Round) -> round_[_rID]
REF_688(uint256) -> REF_687.mask
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_688'] 
REF_685(uint256) (->round_) := TMP_494(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_495(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_496(uint256) = TMP_495 / 1000000000000000000
_pearn(uint256) := TMP_496(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_690(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_691(F3Ddatasets.PlayerRounds) -> REF_690[_rID]
REF_692(uint256) -> REF_691.mask
REF_693(F3Ddatasets.Round) -> round_[_rID]
REF_694(uint256) -> REF_693.mask
TMP_497(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_694', '_keys'] 
TMP_498(uint256) = TMP_497 / 1000000000000000000
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_498', '_pearn'] 
REF_698(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_699(F3Ddatasets.PlayerRounds) -> REF_698[_rID]
REF_700(uint256) -> REF_699.mask
TMP_500(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_499', 'REF_700'] 
REF_692(uint256) (->plyrRnds_) := TMP_500(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_703(F3Ddatasets.Round) -> round_[_rID]
REF_704(uint256) -> REF_703.keys
TMP_501(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_704'] 
TMP_502(uint256) = TMP_501 / 1000000000000000000
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_502'] 
RETURN TMP_503"];
}
// Function: 3526.sol-FoMo3DFast-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_600(F3Ddatasets.Round) -> round_[_rID]
REF_601(uint256) -> REF_600.end
TMP_418(bool) = _now > REF_601
REF_602(F3Ddatasets.Round) -> round_[_rID]
REF_603(uint256) -> REF_602.plyr
TMP_419(bool) = REF_603 == 0
TMP_420(bool) = TMP_418 && TMP_419
CONDITION TMP_420"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_421(uint256) = _keys / 1000000000000000000
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_421', 'rndInc_'] 
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_422', '_now'] 
_newTime(uint256) := TMP_423(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_424(uint256) = _keys / 1000000000000000000
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_424', 'rndInc_'] 
REF_608(F3Ddatasets.Round) -> round_[_rID]
REF_609(uint256) -> REF_608.end
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_425', 'REF_609'] 
_newTime(uint256) := TMP_426(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_428(bool) = _newTime < TMP_427
CONDITION TMP_428"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_611(F3Ddatasets.Round) -> round_[_rID]
REF_612(uint256) -> REF_611.end
REF_612(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_613(F3Ddatasets.Round) -> round_[_rID]
REF_614(uint256) -> REF_613.end
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_614(uint256) (->round_) := TMP_429(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3526.sol-FoMo3DFast-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_371(bool) = _team < 0
TMP_372(bool) = _team > 3
TMP_373(bool) = TMP_371 || TMP_372
CONDITION TMP_373"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3526.sol-FoMo3DFast-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_103(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_103(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_104(F3Ddatasets.Round) -> round_[_rID]
REF_105(uint256) -> REF_104.end
TMP_162(bool) = _now > REF_105
REF_106(F3Ddatasets.Round) -> round_[_rID]
REF_107(bool) -> REF_106.ended
TMP_163(bool) = REF_107 == False
TMP_164(bool) = TMP_162 && TMP_163
REF_108(F3Ddatasets.Round) -> round_[_rID]
REF_109(uint256) -> REF_108.plyr
TMP_165(bool) = REF_109 != 0
TMP_166(bool) = TMP_164 && TMP_165
CONDITION TMP_166"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_110(F3Ddatasets.Round) -> round_[_rID]
REF_111(bool) -> REF_110.ended
REF_111(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_167(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_167(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_168(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_168(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_169(bool) = _eth > 0
CONDITION TMP_169"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_112(F3Ddatasets.Player) -> plyr_[_pID]
REF_113(address) -> REF_112.addr
Transfer dest:REF_113 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_115(uint256) -> _eventData_.compressedData
REF_116(uint256) -> _eventData_.compressedData
TMP_171(uint256) = _now * 1000000000000000000
TMP_172(uint256) = REF_116 + TMP_171
REF_115(uint256) (->_eventData_) := TMP_172(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_117(uint256) -> _eventData_.compressedIDs
REF_118(uint256) -> _eventData_.compressedIDs
TMP_173(uint256) = REF_118 + _pID
REF_117(uint256) (->_eventData_) := TMP_173(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_120(F3Ddatasets.Player) -> plyr_[_pID]
REF_121(bytes32) -> REF_120.name
REF_122(uint256) -> _eventData_.compressedData
REF_123(uint256) -> _eventData_.compressedIDs
REF_124(address) -> _eventData_.winnerAddr
REF_125(bytes32) -> _eventData_.winnerName
REF_126(uint256) -> _eventData_.amountWon
REF_127(uint256) -> _eventData_.newPot
REF_128(uint256) -> _eventData_.P3DAmount
REF_129(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_121,_eth,REF_122,REF_123,REF_124,REF_125,REF_126,REF_127,REF_128,REF_129)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_175(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_175(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_176(bool) = _eth > 0
CONDITION TMP_176"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_130(F3Ddatasets.Player) -> plyr_[_pID]
REF_131(address) -> REF_130.addr
Transfer dest:REF_131 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_134(F3Ddatasets.Player) -> plyr_[_pID]
REF_135(bytes32) -> REF_134.name
Emit onWithdraw(_pID,msg.sender,REF_135,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
23->1;
}
// Function: 3526.sol-FoMo3DFast-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_705(F3Ddatasets.Player) -> plyr_[_pID]
REF_706(uint256) -> REF_705.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_706)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_707(F3Ddatasets.Player) -> plyr_[_pID]
REF_708(uint256) -> REF_707.win
REF_710(F3Ddatasets.Player) -> plyr_[_pID]
REF_711(uint256) -> REF_710.gen
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_708', 'REF_711'] 
REF_713(F3Ddatasets.Player) -> plyr_[_pID]
REF_714(uint256) -> REF_713.aff
TMP_506(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_505', 'REF_714'] 
_earnings(uint256) := TMP_506(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_507(bool) = _earnings > 0
CONDITION TMP_507"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_715(F3Ddatasets.Player) -> plyr_[_pID]
REF_716(uint256) -> REF_715.win
REF_716(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_717(F3Ddatasets.Player) -> plyr_[_pID]
REF_718(uint256) -> REF_717.gen
REF_718(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_719(F3Ddatasets.Player) -> plyr_[_pID]
REF_720(uint256) -> REF_719.aff
REF_720(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3526.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_0 = CONVERT _input to bytes
_temp(bytes) := TMP_0(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_1(bool) = _length <= 32
TMP_2(bool) = _length > 0
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_5(bool) = REF_1 != 32
TMP_6(uint256) = _length - 1
REF_2(None) -> _temp[TMP_6]
TMP_7(bool) = REF_2 != 32
TMP_8(bool) = TMP_5 && TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool,string)(TMP_8,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_10(bool) = REF_3 == 48
CONDITION TMP_10"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_11(bool) = REF_4 != 120
TMP_12(None) = SOLIDITY_CALL require(bool,string)(TMP_11,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_13(bool) = REF_5 != 88
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_15(bool) = i < _length
CONDITION TMP_15"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_16(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_17(bool) = REF_7 < 91
TMP_18(bool) = TMP_16 && TMP_17
CONDITION TMP_18"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_19 = CONVERT REF_9 to uint256
TMP_20(uint256) = TMP_19 + 32
TMP_21 = CONVERT TMP_20 to bytes1
REF_8(bytes1) (->_temp) := TMP_21(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_22(bool) = _hasNonNumber == False
CONDITION TMP_22"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_23(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_24(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_25(bool) = REF_12 < 123
TMP_26(bool) = TMP_24 && TMP_25
TMP_27(bool) = TMP_23 || TMP_26
REF_13(None) -> _temp[i]
TMP_28(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_29(bool) = REF_14 < 58
TMP_30(bool) = TMP_28 && TMP_29
TMP_31(bool) = TMP_27 || TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_33(bool) = REF_15 == 32
CONDITION TMP_33"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_34(uint256) = i + 1
REF_16(None) -> _temp[TMP_34]
TMP_35(bool) = REF_16 != 32
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_37(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_38(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_39(bool) = REF_18 > 57
TMP_40(bool) = TMP_38 || TMP_39
TMP_41(bool) = TMP_37 && TMP_40
CONDITION TMP_41"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_42(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_43(bool) = _hasNonNumber == True
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3526.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 3526.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3526.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3526.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3526.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3526.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3526.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3526.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_53(uint256) = a + b
c(uint256) := TMP_53(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_54(bool) = c >= a
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3526.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_45(bool) = a == 0
CONDITION TMP_45"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_46(uint256) = a * b
c(uint256) := TMP_46(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_47(uint256) = c / a
TMP_48(bool) = TMP_47 == b
TMP_49(None) = SOLIDITY_CALL require(bool,string)(TMP_48,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3526.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_63(bool) = x == 0
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_64(bool) = y == 0
CONDITION TMP_64"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_65(bool) = i < y
CONDITION TMP_65"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_66(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_66(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_67(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3526.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_62(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_62"];
}
// Function: 3526.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_56(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_57(uint256) = TMP_56 / 2
z(uint256) := TMP_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_58(bool) = z < y
CONDITION TMP_58"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_59(uint256) = x / z
TMP_60(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_59,z)
TMP_61(uint256) = TMP_60 / 2
z(uint256) := TMP_61(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3526.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_50(bool) = b <= a
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_52(uint256) = a - b
RETURN TMP_52"];
}
}
