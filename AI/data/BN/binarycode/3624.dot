digraph G {
// Function: 3624.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_402'] 
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_404'] 
TMP_406(uint256) = TMP_405 / 2
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_403', 'TMP_406'] 
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_409(uint256) = TMP_407 / TMP_408
RETURN TMP_409"];
}
// Function: 3624.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_392(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_394(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_393)
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_392', 'TMP_394'] 
RETURN TMP_395"];
}
// Function: 3624.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_396', '312500000000000000000000000'] 
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_397', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_398'] 
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_399', '74999921875000000000000000000000'] 
TMP_401(uint256) = TMP_400 / 156250000
RETURN TMP_401"];
}
// Function: 3624.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_389(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_388)
TMP_390(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_389', 'TMP_390'] 
RETURN TMP_391"];
}
// Function: 3624.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_317(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_318(bytes32) = SOLIDITY_CALL keccak256()(TMP_317)
TMP_319 = CONVERT TMP_318 to uint256
TMP_320(uint256) = TMP_319 / now
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_316', 'TMP_320'] 
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_321', 'block.gaslimit'] 
TMP_323(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(TMP_323)
TMP_325 = CONVERT TMP_324 to uint256
TMP_326(uint256) = TMP_325 / now
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_322', 'TMP_326'] 
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_327', 'block.number'] 
TMP_329(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_328)
TMP_330(bytes32) = SOLIDITY_CALL keccak256()(TMP_329)
TMP_331 = CONVERT TMP_330 to uint256
seed(uint256) := TMP_331(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_332(uint256) = seed / 1000
TMP_333(uint256) = TMP_332 * 1000
TMP_334(uint256) = seed - TMP_333
TMP_335(bool) = TMP_334 < airDropTracker_
CONDITION TMP_335"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3624.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_262(F3Ddatasets.Round) -> round_[_rID]
REF_263(uint256) -> REF_262.strt
TMP_158(uint256) = REF_263 + rndGap_
TMP_159(bool) = _now > TMP_158
REF_264(F3Ddatasets.Round) -> round_[_rID]
REF_265(uint256) -> REF_264.end
TMP_160(bool) = _now <= REF_265
REF_266(F3Ddatasets.Round) -> round_[_rID]
REF_267(uint256) -> REF_266.end
TMP_161(bool) = _now > REF_267
REF_268(F3Ddatasets.Round) -> round_[_rID]
REF_269(uint256) -> REF_268.plyr
TMP_162(bool) = REF_269 == 0
TMP_163(bool) = TMP_161 && TMP_162
TMP_164(bool) = TMP_160 || TMP_163
TMP_165(bool) = TMP_159 && TMP_164
CONDITION TMP_165"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_270(F3Ddatasets.Round) -> round_[_rID]
REF_271(uint256) -> REF_270.end
TMP_167(bool) = _now > REF_271
REF_272(F3Ddatasets.Round) -> round_[_rID]
REF_273(bool) -> REF_272.ended
TMP_168(bool) = REF_273 == False
TMP_169(bool) = TMP_167 && TMP_168
CONDITION TMP_169"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_274(F3Ddatasets.Round) -> round_[_rID]
REF_275(bool) -> REF_274.ended
REF_275(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_170(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_170(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_276(uint256) -> _eventData_.compressedData
REF_277(uint256) -> _eventData_.compressedData
TMP_171(uint256) = _now * 1000000000000000000
TMP_172(uint256) = REF_277 + TMP_171
REF_276(uint256) (->_eventData_) := TMP_172(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_278(uint256) -> _eventData_.compressedIDs
REF_279(uint256) -> _eventData_.compressedIDs
TMP_173(uint256) = REF_279 + _pID
REF_278(uint256) (->_eventData_) := TMP_173(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_281(F3Ddatasets.Player) -> plyr_[_pID]
REF_282(bytes32) -> REF_281.name
REF_283(uint256) -> _eventData_.compressedData
REF_284(uint256) -> _eventData_.compressedIDs
REF_285(address) -> _eventData_.winnerAddr
REF_286(bytes32) -> _eventData_.winnerName
REF_287(uint256) -> _eventData_.amountWon
REF_288(uint256) -> _eventData_.newPot
REF_289(uint256) -> _eventData_.P3DAmount
REF_290(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_282,msg.value,REF_283,REF_284,REF_285,REF_286,REF_287,REF_288,REF_289,REF_290)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_291(F3Ddatasets.Player) -> plyr_[_pID]
REF_292(uint256) -> REF_291.gen
REF_293(F3Ddatasets.Player) -> plyr_[_pID]
REF_294(uint256) -> REF_293.gen
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_294', 'msg.value'] 
REF_292(uint256) (->plyr_) := TMP_175(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3624.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_23(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3624.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 3624.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_34(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_36(bool) = _affCode == REF_36
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_38(bool) = _affID != REF_41
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 3624.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_401(F3Ddatasets.Round) -> round_[_rID]
REF_402(uint256) -> REF_401.strt
TMP_223(uint256) = REF_402 + rndGap_
TMP_224(bool) = _now > TMP_223
REF_403(F3Ddatasets.Round) -> round_[_rID]
REF_404(uint256) -> REF_403.end
TMP_225(bool) = _now <= REF_404
REF_405(F3Ddatasets.Round) -> round_[_rID]
REF_406(uint256) -> REF_405.end
TMP_226(bool) = _now > REF_406
REF_407(F3Ddatasets.Round) -> round_[_rID]
REF_408(uint256) -> REF_407.plyr
TMP_227(bool) = REF_408 == 0
TMP_228(bool) = TMP_226 && TMP_227
TMP_229(bool) = TMP_225 || TMP_228
TMP_230(bool) = TMP_224 && TMP_229
CONDITION TMP_230"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_409(F3Ddatasets.Round) -> round_[_rID]
REF_410(uint256) -> REF_409.eth
TMP_231(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_410', '_eth'] 
RETURN TMP_231"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_232(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_232"];
}
// Function: 3624.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_391(F3Ddatasets.Round) -> round_[_rIDlast]
REF_392(uint256) -> REF_391.mask
REF_394(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_395(F3Ddatasets.PlayerRounds) -> REF_394[_rIDlast]
REF_396(uint256) -> REF_395.keys
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_392', 'REF_396'] 
TMP_221(uint256) = TMP_220 / 1000000000000000000
REF_398(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_399(F3Ddatasets.PlayerRounds) -> REF_398[_rIDlast]
REF_400(uint256) -> REF_399.mask
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_221', 'REF_400'] 
RETURN TMP_222"];
}
// Function: 3624.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(20,0)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(20,0)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(20,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(20,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,0)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(20,0)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(20,0)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(20,0)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 3624.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_328(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_329(F3Ddatasets.PlayerRounds) -> REF_328[_rID]
REF_330(uint256) -> REF_329.keys
TMP_195(bool) = REF_330 == 0
CONDITION TMP_195"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_196(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_196(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_331(F3Ddatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.eth
TMP_197(bool) = REF_332 < 100000000000000000000
REF_333(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_334(F3Ddatasets.PlayerRounds) -> REF_333[_rID]
REF_335(uint256) -> REF_334.eth
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_335', '_eth'] 
TMP_199(bool) = TMP_198 > 1000000000000000000
TMP_200(bool) = TMP_197 && TMP_199
CONDITION TMP_200"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_338(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_339(F3Ddatasets.PlayerRounds) -> REF_338[_rID]
REF_340(uint256) -> REF_339.eth
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_340'] 
_availableLimit(uint256) := TMP_201(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_202(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_342(F3Ddatasets.Player) -> plyr_[_pID]
REF_343(uint256) -> REF_342.gen
REF_344(F3Ddatasets.Player) -> plyr_[_pID]
REF_345(uint256) -> REF_344.gen
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_345', '_refund'] 
REF_343(uint256) (->plyr_) := TMP_203(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_204(bool) = _eth > 1000000000
CONDITION TMP_204"];
10->11[label="True"];
10->30[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.eth
TMP_205(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_348', '_eth'] 
_keys(uint256) := TMP_205(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_206(bool) = _keys >= 1000000000000000000
CONDITION TMP_206"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_350(F3Ddatasets.Round) -> round_[_rID]
REF_351(uint256) -> REF_350.plyr
TMP_208(bool) = REF_351 != _pID
CONDITION TMP_208"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_352(F3Ddatasets.Round) -> round_[_rID]
REF_353(uint256) -> REF_352.plyr
REF_353(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_354(F3Ddatasets.Round) -> round_[_rID]
REF_355(uint256) -> REF_354.team
TMP_209(bool) = REF_355 != _team
CONDITION TMP_209"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_356(F3Ddatasets.Round) -> round_[_rID]
REF_357(uint256) -> REF_356.team
REF_357(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_358(uint256) -> _eventData_.compressedData
REF_359(uint256) -> _eventData_.compressedData
TMP_210(uint256) = REF_359 + 100
REF_358(uint256) (->_eventData_) := TMP_210(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_360(uint256) -> _eventData_.compressedData
REF_361(uint256) -> _eventData_.compressedData
TMP_211(uint256) = airDropTracker_ * 1000
TMP_212(uint256) = REF_361 + TMP_211
REF_360(uint256) (->_eventData_) := TMP_212(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_362(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_363(F3Ddatasets.PlayerRounds) -> REF_362[_rID]
REF_364(uint256) -> REF_363.keys
REF_366(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_367(F3Ddatasets.PlayerRounds) -> REF_366[_rID]
REF_368(uint256) -> REF_367.keys
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_368'] 
REF_364(uint256) (->plyrRnds_) := TMP_213(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_369(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_370(F3Ddatasets.PlayerRounds) -> REF_369[_rID]
REF_371(uint256) -> REF_370.eth
REF_373(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_374(F3Ddatasets.PlayerRounds) -> REF_373[_rID]
REF_375(uint256) -> REF_374.eth
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_375'] 
REF_371(uint256) (->plyrRnds_) := TMP_214(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_376(F3Ddatasets.Round) -> round_[_rID]
REF_377(uint256) -> REF_376.keys
REF_379(F3Ddatasets.Round) -> round_[_rID]
REF_380(uint256) -> REF_379.keys
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_380'] 
REF_377(uint256) (->round_) := TMP_215(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_381(F3Ddatasets.Round) -> round_[_rID]
REF_382(uint256) -> REF_381.eth
REF_384(F3Ddatasets.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.eth
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_385'] 
REF_382(uint256) (->round_) := TMP_216(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_386(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_387(uint256) -> REF_386[_team]
REF_389(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_390(uint256) -> REF_389[_team]
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_390'] 
REF_387(uint256) (->rndTmEth_) := TMP_217(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_affID,_team,_keys,_eventData_)

IRs:
TMP_218(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_218(F3Ddatasets.EventReturns)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
29->30;
30[label="Node Type: END_IF 30
"];
}
// Function: 3624.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_450(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_450(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_257(bool) = _pID == 0
CONDITION TMP_257"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_258(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_258(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_259(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_259(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_260(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_260(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_454(uint256) -> pIDxAddr_[msg.sender]
REF_454(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_455(F3Ddatasets.Player) -> plyr_[_pID]
REF_456(address) -> REF_455.addr
REF_456(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_261(bool) = _name != 
CONDITION TMP_261"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_457(uint256) -> pIDxName_[_name]
REF_457(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_458(F3Ddatasets.Player) -> plyr_[_pID]
REF_459(bytes32) -> REF_458.name
REF_459(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_460(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_461(bool) -> REF_460[_name]
REF_461(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_262(bool) = _laff != 0
TMP_263(bool) = _laff != _pID
TMP_264(bool) = TMP_262 && TMP_263
CONDITION TMP_264"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_462(F3Ddatasets.Player) -> plyr_[_pID]
REF_463(uint256) -> REF_462.laff
REF_463(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_464(uint256) -> _eventData_.compressedData
REF_465(uint256) -> _eventData_.compressedData
TMP_265(uint256) = REF_465 + 1
REF_464(uint256) (->_eventData_) := TMP_265(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3624.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_574(F3Ddatasets.TeamFee) -> fees_[_team]
REF_575(uint256) -> REF_574.gen
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_575'] 
TMP_340(uint256) = TMP_339 / 100
_gen(uint256) := TMP_340(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth / 5

IRs:
TMP_341(uint256) = _eth / 5
_aff(uint256) := TMP_341(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_342(bool) = _affID != _pID
REF_576(F3Ddatasets.Player) -> plyr_[_affID]
REF_577(bytes32) -> REF_576.name
TMP_343(bool) = REF_577 != 
TMP_344(bool) = TMP_342 && TMP_343
CONDITION TMP_344"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(_aff)

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_aff'] 
_eth(uint256) := TMP_345(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_579(F3Ddatasets.Player) -> plyr_[_affID]
REF_580(uint256) -> REF_579.aff
REF_582(F3Ddatasets.Player) -> plyr_[_affID]
REF_583(uint256) -> REF_582.aff
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_583'] 
REF_580(uint256) (->plyr_) := TMP_346(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_585(F3Ddatasets.Player) -> plyr_[_affID]
REF_586(address) -> REF_585.addr
REF_587(F3Ddatasets.Player) -> plyr_[_affID]
REF_588(bytes32) -> REF_587.name
Emit onAffiliatePayout(_affID,REF_586,REF_588,_rID,_pID,_aff,now)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_348(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_349(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_349(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_dust > 0

IRs:
TMP_350(bool) = _dust > 0
CONDITION TMP_350"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_351(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.pot
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_595(F3Ddatasets.Round) -> round_[_rID]
REF_596(uint256) -> REF_595.pot
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_352', 'REF_596'] 
REF_592(uint256) (->round_) := TMP_353(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_597(uint256) -> _eventData_.genAmount
REF_599(uint256) -> _eventData_.genAmount
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_599'] 
REF_597(uint256) (->_eventData_) := TMP_354(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_600(uint256) -> _eventData_.potAmount
REF_600(uint256) (->_eventData_) := _pot(uint256)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3624.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_474(F3Ddatasets.Round) -> round_[_rID]
REF_475(uint256) -> REF_474.plyr
_winPID(uint256) := REF_475(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_476(F3Ddatasets.Round) -> round_[_rID]
REF_477(uint256) -> REF_476.team
_winTID(uint256) := REF_477(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_478(F3Ddatasets.Round) -> round_[_rID]
REF_479(uint256) -> REF_478.pot
_pot(uint256) := REF_479(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(80)) / 100

IRs:
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '80'] 
TMP_273(uint256) = TMP_272 / 100
_win(uint256) := TMP_273(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_482(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_483(uint256) -> REF_482.gen
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_483'] 
TMP_275(uint256) = TMP_274 / 100
_gen(uint256) := TMP_275(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = 0

IRs:
_p3d(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_276', '_com'] 
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_277', '_gen'] 
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_278', '_p3d'] 
_res(uint256) := TMP_279(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_489(F3Ddatasets.Round) -> round_[_rID]
REF_490(uint256) -> REF_489.keys
TMP_281(uint256) = TMP_280 / REF_490
_ppt(uint256) := TMP_281(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_493(F3Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.keys
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_494'] 
TMP_283(uint256) = TMP_282 / 1000000000000000000
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_283'] 
_dust(uint256) := TMP_284(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_285(bool) = _dust > 0
CONDITION TMP_285"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_286(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_287(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_497(F3Ddatasets.Player) -> plyr_[_winPID]
REF_498(uint256) -> REF_497.win
REF_500(F3Ddatasets.Player) -> plyr_[_winPID]
REF_501(uint256) -> REF_500.win
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_501'] 
REF_498(uint256) (->plyr_) := TMP_288(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_502(F3Ddatasets.Round) -> round_[_rID]
REF_503(uint256) -> REF_502.mask
REF_505(F3Ddatasets.Round) -> round_[_rID]
REF_506(uint256) -> REF_505.mask
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_506'] 
REF_503(uint256) (->round_) := TMP_289(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_507(uint256) -> _eventData_.compressedData
REF_508(uint256) -> _eventData_.compressedData
REF_509(F3Ddatasets.Round) -> round_[_rID]
REF_510(uint256) -> REF_509.end
TMP_290(uint256) = REF_510 * 1000000
TMP_291(uint256) = REF_508 + TMP_290
REF_507(uint256) (->_eventData_) := TMP_291(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_511(uint256) -> _eventData_.compressedIDs
REF_512(uint256) -> _eventData_.compressedIDs
TMP_292(uint256) = _winPID * 100000000000000000000000000
TMP_293(uint256) = REF_512 + TMP_292
TMP_294(uint256) = _winTID * 100000000000000000
TMP_295(uint256) = TMP_293 + TMP_294
REF_511(uint256) (->_eventData_) := TMP_295(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_513(address) -> _eventData_.winnerAddr
REF_514(F3Ddatasets.Player) -> plyr_[_winPID]
REF_515(address) -> REF_514.addr
REF_513(address) (->_eventData_) := REF_515(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_516(bytes32) -> _eventData_.winnerName
REF_517(F3Ddatasets.Player) -> plyr_[_winPID]
REF_518(bytes32) -> REF_517.name
REF_516(bytes32) (->_eventData_) := REF_518(bytes32)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_519(uint256) -> _eventData_.amountWon
REF_519(uint256) (->_eventData_) := _win(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_520(uint256) -> _eventData_.genAmount
REF_520(uint256) (->_eventData_) := _gen(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_521(uint256) -> _eventData_.P3DAmount
REF_521(uint256) (->_eventData_) := _p3d(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_522(uint256) -> _eventData_.newPot
REF_522(uint256) (->_eventData_) := _res(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
rID_ ++

IRs:
TMP_296(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_rID ++

IRs:
TMP_297(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_523(F3Ddatasets.Round) -> round_[_rID]
REF_524(uint256) -> REF_523.strt
REF_524(uint256) (->round_) := now(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_525(F3Ddatasets.Round) -> round_[_rID]
REF_526(uint256) -> REF_525.end
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_298', 'rndGap_'] 
REF_526(uint256) (->round_) := TMP_299(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_529(F3Ddatasets.Round) -> round_[_rID]
REF_530(uint256) -> REF_529.pot
REF_530(uint256) (->round_) := _res(uint256)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3624.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_641(uint256) -> _eventData_.compressedData
REF_642(uint256) -> _eventData_.compressedData
TMP_371(uint256) = now * 1000000000000000000
TMP_372(uint256) = REF_642 + TMP_371
TMP_373(uint256) = _team * 100000000000000000000000000000
TMP_374(uint256) = TMP_372 + TMP_373
REF_641(uint256) (->_eventData_) := TMP_374(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_643(uint256) -> _eventData_.compressedIDs
REF_644(uint256) -> _eventData_.compressedIDs
TMP_375(uint256) = REF_644 + _pID
TMP_376(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_377(uint256) = TMP_375 + TMP_376
REF_643(uint256) (->_eventData_) := TMP_377(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_646(uint256) -> _eventData_.compressedData
REF_647(uint256) -> _eventData_.compressedIDs
REF_648(F3Ddatasets.Player) -> plyr_[_pID]
REF_649(bytes32) -> REF_648.name
REF_650(address) -> _eventData_.winnerAddr
REF_651(bytes32) -> _eventData_.winnerName
REF_652(uint256) -> _eventData_.amountWon
REF_653(uint256) -> _eventData_.newPot
REF_654(uint256) -> _eventData_.P3DAmount
REF_655(uint256) -> _eventData_.genAmount
REF_656(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_646,REF_647,REF_649,msg.sender,_eth,_keys,REF_650,REF_651,REF_652,REF_653,REF_654,REF_655,REF_656,airDropPot_)"];
}
// Function: 3624.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 3624.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_132(F3Ddatasets.Round) -> round_[_rID]
REF_133(uint256) -> REF_132.strt
TMP_109(uint256) = REF_133 + rndGap_
TMP_110(bool) = _now > TMP_109
REF_134(F3Ddatasets.Round) -> round_[_rID]
REF_135(uint256) -> REF_134.end
TMP_111(bool) = _now <= REF_135
REF_136(F3Ddatasets.Round) -> round_[_rID]
REF_137(uint256) -> REF_136.end
TMP_112(bool) = _now > REF_137
REF_138(F3Ddatasets.Round) -> round_[_rID]
REF_139(uint256) -> REF_138.plyr
TMP_113(bool) = REF_139 == 0
TMP_114(bool) = TMP_112 && TMP_113
TMP_115(bool) = TMP_111 || TMP_114
TMP_116(bool) = TMP_110 && TMP_115
CONDITION TMP_116"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_140(F3Ddatasets.Round) -> round_[_rID]
REF_141(uint256) -> REF_140.keys
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_141', '1000000000000000000'] 
TMP_118(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_117', '1000000000000000000'] 
RETURN TMP_118"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3624.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_214(F3Ddatasets.Round) -> round_[_rID]
REF_215(uint256) -> REF_214.ico
REF_216(F3Ddatasets.Round) -> round_[_rID]
REF_217(uint256) -> REF_216.keys
REF_218(F3Ddatasets.Round) -> round_[_rID]
REF_219(uint256) -> REF_218.end
REF_220(F3Ddatasets.Round) -> round_[_rID]
REF_221(uint256) -> REF_220.strt
REF_222(F3Ddatasets.Round) -> round_[_rID]
REF_223(uint256) -> REF_222.pot
REF_224(F3Ddatasets.Round) -> round_[_rID]
REF_225(uint256) -> REF_224.team
REF_226(F3Ddatasets.Round) -> round_[_rID]
REF_227(uint256) -> REF_226.plyr
TMP_149(uint256) = REF_227 * 10
TMP_150(uint256) = REF_225 + TMP_149
REF_228(F3Ddatasets.Round) -> round_[_rID]
REF_229(uint256) -> REF_228.plyr
REF_230(F3Ddatasets.Player) -> plyr_[REF_229]
REF_231(address) -> REF_230.addr
REF_232(F3Ddatasets.Round) -> round_[_rID]
REF_233(uint256) -> REF_232.plyr
REF_234(F3Ddatasets.Player) -> plyr_[REF_233]
REF_235(bytes32) -> REF_234.name
REF_236(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_237(uint256) -> REF_236[0]
REF_238(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_239(uint256) -> REF_238[1]
REF_240(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_241(uint256) -> REF_240[2]
REF_242(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_243(uint256) -> REF_242[3]
TMP_151(uint256) = airDropPot_ * 1000
TMP_152(uint256) = airDropTracker_ + TMP_151
RETURN REF_215,_rID,REF_217,REF_219,REF_221,REF_223,TMP_150,REF_231,REF_235,REF_237,REF_239,REF_241,REF_243,TMP_152"];
}
// Function: 3624.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_153 = CONVERT 0 to address
TMP_154(bool) = _addr == TMP_153
CONDITION TMP_154"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_155(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_244(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_244(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_245(F3Ddatasets.Player) -> plyr_[_pID]
REF_246(bytes32) -> REF_245.name
REF_247(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_248(F3Ddatasets.PlayerRounds) -> REF_247[_rID]
REF_249(uint256) -> REF_248.keys
REF_250(F3Ddatasets.Player) -> plyr_[_pID]
REF_251(uint256) -> REF_250.win
REF_252(F3Ddatasets.Player) -> plyr_[_pID]
REF_253(uint256) -> REF_252.gen
REF_255(F3Ddatasets.Player) -> plyr_[_pID]
REF_256(uint256) -> REF_255.lrnd
TMP_156(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_256)
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_253', 'TMP_156'] 
REF_257(F3Ddatasets.Player) -> plyr_[_pID]
REF_258(uint256) -> REF_257.aff
REF_259(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_260(F3Ddatasets.PlayerRounds) -> REF_259[_rID]
REF_261(uint256) -> REF_260.eth
RETURN _pID,REF_246,REF_249,REF_251,TMP_157,REF_258,REF_261"];
}
// Function: 3624.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(uint256) -> REF_154.end
TMP_125(bool) = now > REF_155
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(bool) -> REF_156.ended
TMP_126(bool) = REF_157 == False
TMP_127(bool) = TMP_125 && TMP_126
REF_158(F3Ddatasets.Round) -> round_[_rID]
REF_159(uint256) -> REF_158.plyr
TMP_128(bool) = REF_159 != 0
TMP_129(bool) = TMP_127 && TMP_128
CONDITION TMP_129"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.plyr
TMP_130(bool) = REF_161 == _pID
CONDITION TMP_130"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_162(F3Ddatasets.Player) -> plyr_[_pID]
REF_163(uint256) -> REF_162.win
REF_165(F3Ddatasets.Round) -> round_[_rID]
REF_166(uint256) -> REF_165.pot
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_166', '48'] 
TMP_132(uint256) = TMP_131 / 100
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_163', 'TMP_132'] 
REF_168(F3Ddatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.gen
TMP_134(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_172(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_173(F3Ddatasets.PlayerRounds) -> REF_172[_rID]
REF_174(uint256) -> REF_173.mask
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_134', 'REF_174'] 
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_169', 'TMP_135'] 
REF_175(F3Ddatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.aff
RETURN TMP_133,TMP_136,REF_176"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(uint256) -> REF_177.win
REF_179(F3Ddatasets.Player) -> plyr_[_pID]
REF_180(uint256) -> REF_179.gen
TMP_137(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_183(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_184(F3Ddatasets.PlayerRounds) -> REF_183[_rID]
REF_185(uint256) -> REF_184.mask
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_137', 'REF_185'] 
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_180', 'TMP_138'] 
REF_186(F3Ddatasets.Player) -> plyr_[_pID]
REF_187(uint256) -> REF_186.aff
RETURN REF_178,TMP_139,REF_187"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_188(F3Ddatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.win
REF_190(F3Ddatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.gen
REF_193(F3Ddatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.lrnd
TMP_140(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_194)
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_191', 'TMP_140'] 
REF_195(F3Ddatasets.Player) -> plyr_[_pID]
REF_196(uint256) -> REF_195.aff
RETURN REF_189,TMP_141,REF_196"];
}
// Function: 3624.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_197(F3Ddatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.mask
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.pot
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.team
REF_205(F3Ddatasets.PotSplit) -> potSplit_[REF_204]
REF_206(uint256) -> REF_205.gen
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_201', 'REF_206'] 
TMP_143(uint256) = TMP_142 / 100
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_143', '1000000000000000000'] 
REF_208(F3Ddatasets.Round) -> round_[_rID]
REF_209(uint256) -> REF_208.keys
TMP_145(uint256) = TMP_144 / REF_209
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_198', 'TMP_145'] 
REF_211(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_212(F3Ddatasets.PlayerRounds) -> REF_211[_rID]
REF_213(uint256) -> REF_212.keys
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_146', 'REF_213'] 
TMP_148(uint256) = TMP_147 / 1000000000000000000
RETURN TMP_148"];
}
// Function: 3624.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_144(F3Ddatasets.Round) -> round_[_rID]
REF_145(uint256) -> REF_144.end
TMP_119(bool) = _now < REF_145
CONDITION TMP_119"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_146(F3Ddatasets.Round) -> round_[_rID]
REF_147(uint256) -> REF_146.strt
TMP_120(uint256) = REF_147 + rndGap_
TMP_121(bool) = _now > TMP_120
CONDITION TMP_121"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_148(F3Ddatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.end
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_149', '_now'] 
RETURN TMP_122"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.strt
TMP_123(uint256) = REF_152 + rndGap_
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_123', '_now'] 
RETURN TMP_124"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3624.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_413(F3Ddatasets.Round) -> round_[_rID]
REF_414(uint256) -> REF_413.strt
TMP_233(uint256) = REF_414 + rndGap_
TMP_234(bool) = _now > TMP_233
REF_415(F3Ddatasets.Round) -> round_[_rID]
REF_416(uint256) -> REF_415.end
TMP_235(bool) = _now <= REF_416
REF_417(F3Ddatasets.Round) -> round_[_rID]
REF_418(uint256) -> REF_417.end
TMP_236(bool) = _now > REF_418
REF_419(F3Ddatasets.Round) -> round_[_rID]
REF_420(uint256) -> REF_419.plyr
TMP_237(bool) = REF_420 == 0
TMP_238(bool) = TMP_236 && TMP_237
TMP_239(bool) = TMP_235 || TMP_238
TMP_240(bool) = TMP_234 && TMP_239
CONDITION TMP_240"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_421(F3Ddatasets.Round) -> round_[_rID]
REF_422(uint256) -> REF_421.keys
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_422', '_keys'] 
TMP_242(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_241', '_keys'] 
RETURN TMP_242"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_243(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_243"];
}
// Function: 3624.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_380(bool) = activated_ == True
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3624.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_382(bool) = _codeLength == 0
TMP_383(None) = SOLIDITY_CALL require(bool,string)(TMP_382,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3624.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_384(bool) = _eth >= 1000000000
TMP_385(None) = SOLIDITY_CALL require(bool,string)(TMP_384,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_386(bool) = _eth <= 100000000000000000000000
TMP_387(None) = SOLIDITY_CALL require(bool,string)(TMP_386,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3624.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_466(F3Ddatasets.Player) -> plyr_[_pID]
REF_467(uint256) -> REF_466.lrnd
TMP_269(bool) = REF_467 != 0
CONDITION TMP_269"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_468(F3Ddatasets.Player) -> plyr_[_pID]
REF_469(uint256) -> REF_468.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_469)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_470(F3Ddatasets.Player) -> plyr_[_pID]
REF_471(uint256) -> REF_470.lrnd
REF_471(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_472(uint256) -> _eventData_.compressedData
REF_473(uint256) -> _eventData_.compressedData
TMP_271(uint256) = REF_473 + 10
REF_472(uint256) (->_eventData_) := TMP_271(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3624.sol-FoMo3Dlong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_336(uint256) = rID_ + 1
_rID(uint256) := TMP_336(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_567(F3Ddatasets.Round) -> round_[_rID]
REF_568(uint256) -> REF_567.pot
REF_569(F3Ddatasets.Round) -> round_[_rID]
REF_570(uint256) -> REF_569.pot
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_570', 'msg.value'] 
REF_568(uint256) (->round_) := TMP_337(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 3624.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_296(F3Ddatasets.Round) -> round_[_rID]
REF_297(uint256) -> REF_296.strt
TMP_176(uint256) = REF_297 + rndGap_
TMP_177(bool) = _now > TMP_176
REF_298(F3Ddatasets.Round) -> round_[_rID]
REF_299(uint256) -> REF_298.end
TMP_178(bool) = _now <= REF_299
REF_300(F3Ddatasets.Round) -> round_[_rID]
REF_301(uint256) -> REF_300.end
TMP_179(bool) = _now > REF_301
REF_302(F3Ddatasets.Round) -> round_[_rID]
REF_303(uint256) -> REF_302.plyr
TMP_180(bool) = REF_303 == 0
TMP_181(bool) = TMP_179 && TMP_180
TMP_182(bool) = TMP_178 || TMP_181
TMP_183(bool) = TMP_177 && TMP_182
CONDITION TMP_183"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_304(F3Ddatasets.Player) -> plyr_[_pID]
REF_305(uint256) -> REF_304.gen
TMP_184(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_184', '_eth'] 
REF_305(uint256) (->plyr_) := TMP_185(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_307(F3Ddatasets.Round) -> round_[_rID]
REF_308(uint256) -> REF_307.end
TMP_187(bool) = _now > REF_308
REF_309(F3Ddatasets.Round) -> round_[_rID]
REF_310(bool) -> REF_309.ended
TMP_188(bool) = REF_310 == False
TMP_189(bool) = TMP_187 && TMP_188
CONDITION TMP_189"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_311(F3Ddatasets.Round) -> round_[_rID]
REF_312(bool) -> REF_311.ended
REF_312(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_190(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_190(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_313(uint256) -> _eventData_.compressedData
REF_314(uint256) -> _eventData_.compressedData
TMP_191(uint256) = _now * 1000000000000000000
TMP_192(uint256) = REF_314 + TMP_191
REF_313(uint256) (->_eventData_) := TMP_192(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_315(uint256) -> _eventData_.compressedIDs
REF_316(uint256) -> _eventData_.compressedIDs
TMP_193(uint256) = REF_316 + _pID
REF_315(uint256) (->_eventData_) := TMP_193(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_318(F3Ddatasets.Player) -> plyr_[_pID]
REF_319(bytes32) -> REF_318.name
REF_320(uint256) -> _eventData_.compressedData
REF_321(uint256) -> _eventData_.compressedIDs
REF_322(address) -> _eventData_.winnerAddr
REF_323(bytes32) -> _eventData_.winnerName
REF_324(uint256) -> _eventData_.amountWon
REF_325(uint256) -> _eventData_.newPot
REF_326(uint256) -> _eventData_.P3DAmount
REF_327(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324,REF_325,REF_326,REF_327)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3624.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_57(bool) = _affID != REF_56
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3624.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_47(bool) = _affCode != REF_48
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 3624.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_64(bool) = _affCode == REF_61
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_66(bool) = _affID != REF_66
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3624.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_244 = CONVERT PlayerBook to address
TMP_245(bool) = msg.sender == TMP_244
TMP_246(None) = SOLIDITY_CALL require(bool,string)(TMP_245,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_426(uint256) -> pIDxAddr_[_addr]
TMP_247(bool) = REF_426 != _pID
CONDITION TMP_247"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_427(uint256) -> pIDxAddr_[_addr]
REF_427(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_428(uint256) -> pIDxName_[_name]
TMP_248(bool) = REF_428 != _pID
CONDITION TMP_248"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_429(uint256) -> pIDxName_[_name]
REF_429(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_430(F3Ddatasets.Player) -> plyr_[_pID]
REF_431(address) -> REF_430.addr
TMP_249(bool) = REF_431 != _addr
CONDITION TMP_249"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_432(F3Ddatasets.Player) -> plyr_[_pID]
REF_433(address) -> REF_432.addr
REF_433(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_434(F3Ddatasets.Player) -> plyr_[_pID]
REF_435(bytes32) -> REF_434.name
TMP_250(bool) = REF_435 != _name
CONDITION TMP_250"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_436(F3Ddatasets.Player) -> plyr_[_pID]
REF_437(bytes32) -> REF_436.name
REF_437(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_438(F3Ddatasets.Player) -> plyr_[_pID]
REF_439(uint256) -> REF_438.laff
TMP_251(bool) = REF_439 != _laff
CONDITION TMP_251"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_440(F3Ddatasets.Player) -> plyr_[_pID]
REF_441(uint256) -> REF_440.laff
REF_441(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_442(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_443(bool) -> REF_442[_name]
TMP_252(bool) = REF_443 == False
CONDITION TMP_252"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_444(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_445(bool) -> REF_444[_name]
REF_445(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 3624.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_253 = CONVERT PlayerBook to address
TMP_254(bool) = msg.sender == TMP_253
TMP_255(None) = SOLIDITY_CALL require(bool,string)(TMP_254,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_446(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_447(bool) -> REF_446[_name]
TMP_256(bool) = REF_447 == False
CONDITION TMP_256"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_448(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_449(bool) -> REF_448[_name]
REF_449(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 3624.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_97(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_97(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_108(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_108(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_110(F3Ddatasets.Player) -> plyr_[_affID]
REF_111(address) -> REF_110.addr
REF_112(F3Ddatasets.Player) -> plyr_[_affID]
REF_113(bytes32) -> REF_112.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_111,REF_113,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 3624.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_101(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_101(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_117(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_117(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_119(F3Ddatasets.Player) -> plyr_[_affID]
REF_120(address) -> REF_119.addr
REF_121(F3Ddatasets.Player) -> plyr_[_affID]
REF_122(bytes32) -> REF_121.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_120,REF_122,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 3624.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_105(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_105(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_126(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_126(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_128(F3Ddatasets.Player) -> plyr_[_affID]
REF_129(address) -> REF_128.addr
REF_130(F3Ddatasets.Player) -> plyr_[_affID]
REF_131(bytes32) -> REF_130.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_129,REF_131,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 3624.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x2Ddad27212769D5C87cba9112c6C232628F545bc)

IRs:
TMP_379 = CONVERT 261784479537129939696887893588952570719582373308 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_379(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = FoMo3D Long Gold

IRs:
name(string) := FoMo3D Long Gold(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = F3DLG

IRs:
symbol(string) := F3DLG(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 3624.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
}
// Function: 3624.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_300(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_300(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_301(bool) = _earnings > 0
CONDITION TMP_301"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_531(F3Ddatasets.Player) -> plyr_[_pID]
REF_532(uint256) -> REF_531.gen
REF_534(F3Ddatasets.Player) -> plyr_[_pID]
REF_535(uint256) -> REF_534.gen
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_535'] 
REF_532(uint256) (->plyr_) := TMP_302(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_536(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_537(F3Ddatasets.PlayerRounds) -> REF_536[_rIDlast]
REF_538(uint256) -> REF_537.mask
REF_540(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_541(F3Ddatasets.PlayerRounds) -> REF_540[_rIDlast]
REF_542(uint256) -> REF_541.mask
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_542'] 
REF_538(uint256) (->plyrRnds_) := TMP_303(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3624.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_602(F3Ddatasets.Round) -> round_[_rID]
REF_603(uint256) -> REF_602.keys
TMP_356(uint256) = TMP_355 / REF_603
_ppt(uint256) := TMP_356(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_604(F3Ddatasets.Round) -> round_[_rID]
REF_605(uint256) -> REF_604.mask
REF_607(F3Ddatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.mask
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_608'] 
REF_605(uint256) (->round_) := TMP_357(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_359(uint256) = TMP_358 / 1000000000000000000
_pearn(uint256) := TMP_359(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_610(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_611(F3Ddatasets.PlayerRounds) -> REF_610[_rID]
REF_612(uint256) -> REF_611.mask
REF_613(F3Ddatasets.Round) -> round_[_rID]
REF_614(uint256) -> REF_613.mask
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_614', '_keys'] 
TMP_361(uint256) = TMP_360 / 1000000000000000000
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_361', '_pearn'] 
REF_618(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_619(F3Ddatasets.PlayerRounds) -> REF_618[_rID]
REF_620(uint256) -> REF_619.mask
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_362', 'REF_620'] 
REF_612(uint256) (->plyrRnds_) := TMP_363(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_623(F3Ddatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.keys
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_624'] 
TMP_365(uint256) = TMP_364 / 1000000000000000000
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_365'] 
RETURN TMP_366"];
}
// Function: 3624.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_543(F3Ddatasets.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.end
TMP_304(bool) = _now > REF_544
REF_545(F3Ddatasets.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.plyr
TMP_305(bool) = REF_546 == 0
TMP_306(bool) = TMP_304 && TMP_305
CONDITION TMP_306"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_307(uint256) = _keys / 1000000000000000000
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_307', 'rndInc_'] 
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_308', '_now'] 
_newTime(uint256) := TMP_309(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_310(uint256) = _keys / 1000000000000000000
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_310', 'rndInc_'] 
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.end
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_311', 'REF_552'] 
_newTime(uint256) := TMP_312(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_314(bool) = _newTime < TMP_313
CONDITION TMP_314"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_554(F3Ddatasets.Round) -> round_[_rID]
REF_555(uint256) -> REF_554.end
REF_555(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_556(F3Ddatasets.Round) -> round_[_rID]
REF_557(uint256) -> REF_556.end
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_557(uint256) (->round_) := TMP_315(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3624.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_266(bool) = _team < 0
TMP_267(bool) = _team > 3
TMP_268(bool) = TMP_266 || TMP_267
CONDITION TMP_268"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3624.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_72(bool) = _now > REF_71
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_73(bool) = REF_73 == False
TMP_74(bool) = TMP_72 && TMP_73
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_75(bool) = REF_75 != 0
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(F3Ddatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_77(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_77(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_78(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_78(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_79(bool) = _eth > 0
CONDITION TMP_79"];
10->24[label="True"];
10->12[label="False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_78(uint256) -> _eventData_.compressedData
REF_79(uint256) -> _eventData_.compressedData
TMP_80(uint256) = _now * 1000000000000000000
TMP_81(uint256) = REF_79 + TMP_80
REF_78(uint256) (->_eventData_) := TMP_81(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_80(uint256) -> _eventData_.compressedIDs
REF_81(uint256) -> _eventData_.compressedIDs
TMP_82(uint256) = REF_81 + _pID
REF_80(uint256) (->_eventData_) := TMP_82(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_83(F3Ddatasets.Player) -> plyr_[_pID]
REF_84(bytes32) -> REF_83.name
REF_85(uint256) -> _eventData_.compressedData
REF_86(uint256) -> _eventData_.compressedIDs
REF_87(address) -> _eventData_.winnerAddr
REF_88(bytes32) -> _eventData_.winnerName
REF_89(uint256) -> _eventData_.amountWon
REF_90(uint256) -> _eventData_.newPot
REF_91(uint256) -> _eventData_.P3DAmount
REF_92(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_84,_eth,REF_85,REF_86,REF_87,REF_88,REF_89,REF_90,REF_91,REF_92)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_84(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_84(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_85(bool) = _eth > 0
CONDITION TMP_85"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_93(F3Ddatasets.Player) -> plyr_[_pID]
REF_94(address) -> REF_93.addr
Transfer dest:REF_94 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_97(F3Ddatasets.Player) -> plyr_[_pID]
REF_98(bytes32) -> REF_97.name
Emit onWithdraw(_pID,msg.sender,REF_98,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
24[label="Node Type: IF 24

EXPRESSION:
_eth < address(this).balance

IRs:
TMP_90 = CONVERT this to address
TMP_91(uint256) = SOLIDITY_CALL balance(address)(TMP_90)
TMP_92(bool) = _eth < TMP_91
CONDITION TMP_92"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_99(F3Ddatasets.Player) -> plyr_[_pID]
REF_100(address) -> REF_99.addr
Transfer dest:REF_100 value:_eth"];
25->27;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
plyr_[_pID].addr.transfer(address(this).balance)

IRs:
REF_102(F3Ddatasets.Player) -> plyr_[_pID]
REF_103(address) -> REF_102.addr
TMP_94 = CONVERT this to address
TMP_95(uint256) = SOLIDITY_CALL balance(address)(TMP_94)
Transfer dest:REF_103 value:TMP_95"];
26->27;
27[label="Node Type: END_IF 27
"];
27->12;
}
// Function: 3624.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_625(F3Ddatasets.Player) -> plyr_[_pID]
REF_626(uint256) -> REF_625.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_626)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_627(F3Ddatasets.Player) -> plyr_[_pID]
REF_628(uint256) -> REF_627.win
REF_630(F3Ddatasets.Player) -> plyr_[_pID]
REF_631(uint256) -> REF_630.gen
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_628', 'REF_631'] 
REF_633(F3Ddatasets.Player) -> plyr_[_pID]
REF_634(uint256) -> REF_633.aff
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_368', 'REF_634'] 
_earnings(uint256) := TMP_369(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_370(bool) = _earnings > 0
CONDITION TMP_370"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_635(F3Ddatasets.Player) -> plyr_[_pID]
REF_636(uint256) -> REF_635.win
REF_636(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_637(F3Ddatasets.Player) -> plyr_[_pID]
REF_638(uint256) -> REF_637.gen
REF_638(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_639(F3Ddatasets.Player) -> plyr_[_pID]
REF_640(uint256) -> REF_639.aff
REF_640(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3624.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_410 = CONVERT _input to bytes
_temp(bytes) := TMP_410(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_672 -> LENGTH _temp
_length(uint256) := REF_672(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_411(bool) = _length <= 32
TMP_412(bool) = _length > 0
TMP_413(bool) = TMP_411 && TMP_412
TMP_414(None) = SOLIDITY_CALL require(bool,string)(TMP_413,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_673(None) -> _temp[0]
TMP_415(bool) = REF_673 != 32
TMP_416(uint256) = _length - 1
REF_674(None) -> _temp[TMP_416]
TMP_417(bool) = REF_674 != 32
TMP_418(bool) = TMP_415 && TMP_417
TMP_419(None) = SOLIDITY_CALL require(bool,string)(TMP_418,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_675(None) -> _temp[0]
TMP_420(bool) = REF_675 == 48
CONDITION TMP_420"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_676(None) -> _temp[1]
TMP_421(bool) = REF_676 != 120
TMP_422(None) = SOLIDITY_CALL require(bool,string)(TMP_421,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_677(None) -> _temp[1]
TMP_423(bool) = REF_677 != 88
TMP_424(None) = SOLIDITY_CALL require(bool,string)(TMP_423,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_425(bool) = i < _length
CONDITION TMP_425"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_678(None) -> _temp[i]
TMP_426(bool) = REF_678 > 64
REF_679(None) -> _temp[i]
TMP_427(bool) = REF_679 < 91
TMP_428(bool) = TMP_426 && TMP_427
CONDITION TMP_428"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_680(bytes1) -> _temp[i]
REF_681(None) -> _temp[i]
TMP_429 = CONVERT REF_681 to uint256
TMP_430(uint256) = TMP_429 + 32
TMP_431 = CONVERT TMP_430 to bytes1
REF_680(bytes1) (->_temp) := TMP_431(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_432(bool) = _hasNonNumber == False
CONDITION TMP_432"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_682(None) -> _temp[i]
TMP_433(bool) = REF_682 == 32
REF_683(None) -> _temp[i]
TMP_434(bool) = REF_683 > 96
REF_684(None) -> _temp[i]
TMP_435(bool) = REF_684 < 123
TMP_436(bool) = TMP_434 && TMP_435
TMP_437(bool) = TMP_433 || TMP_436
REF_685(None) -> _temp[i]
TMP_438(bool) = REF_685 > 47
REF_686(None) -> _temp[i]
TMP_439(bool) = REF_686 < 58
TMP_440(bool) = TMP_438 && TMP_439
TMP_441(bool) = TMP_437 || TMP_440
TMP_442(None) = SOLIDITY_CALL require(bool,string)(TMP_441,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_687(None) -> _temp[i]
TMP_443(bool) = REF_687 == 32
CONDITION TMP_443"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_444(uint256) = i + 1
REF_688(None) -> _temp[TMP_444]
TMP_445(bool) = REF_688 != 32
TMP_446(None) = SOLIDITY_CALL require(bool,string)(TMP_445,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_447(bool) = _hasNonNumber == False
REF_689(None) -> _temp[i]
TMP_448(bool) = REF_689 < 48
REF_690(None) -> _temp[i]
TMP_449(bool) = REF_690 > 57
TMP_450(bool) = TMP_448 || TMP_449
TMP_451(bool) = TMP_447 && TMP_450
CONDITION TMP_451"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_452(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_453(bool) = _hasNonNumber == True
TMP_454(None) = SOLIDITY_CALL require(bool,string)(TMP_453,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3624.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 3624.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3624.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3624.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3624.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3624.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3624.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3624.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3624.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_463(uint256) = a + b
c(uint256) := TMP_463(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_464(bool) = c >= a
TMP_465(None) = SOLIDITY_CALL require(bool,string)(TMP_464,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3624.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_455(bool) = a == 0
CONDITION TMP_455"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_456(uint256) = a * b
c(uint256) := TMP_456(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_457(uint256) = c / a
TMP_458(bool) = TMP_457 == b
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3624.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_473(bool) = x == 0
CONDITION TMP_473"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_474(bool) = y == 0
CONDITION TMP_474"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_475(bool) = i < y
CONDITION TMP_475"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_476(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_476(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_477(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3624.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_472(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_472"];
}
// Function: 3624.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_466(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_467(uint256) = TMP_466 / 2
z(uint256) := TMP_467(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_468(bool) = z < y
CONDITION TMP_468"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_469(uint256) = x / z
TMP_470(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_469,z)
TMP_471(uint256) = TMP_470 / 2
z(uint256) := TMP_471(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3624.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_460(bool) = b <= a
TMP_461(None) = SOLIDITY_CALL require(bool,string)(TMP_460,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_462(uint256) = a - b
RETURN TMP_462"];
}
}
