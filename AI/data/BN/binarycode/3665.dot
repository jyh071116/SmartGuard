digraph G {
// Function: 3665.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 3665.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 3665.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 3665.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 3665.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 3665.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 3665.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 3665.sol-MultiOwnable-confirmAndCheck(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: IF 1

EXPRESSION:
m_pending[_operation].exists == 0

IRs:
REF_5(MultiOwnable.PendingState) -> m_pending[_operation]
REF_6(uint256) -> REF_5.exists
TMP_15(bool) = REF_6 == 0
CONDITION TMP_15"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
msg.sender == owner1

IRs:
TMP_16(bool) = msg.sender == owner1
CONDITION TMP_16"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
m_pending[_operation].confirmation1 = true

IRs:
REF_7(MultiOwnable.PendingState) -> m_pending[_operation]
REF_8(bool) -> REF_7.confirmation1
REF_8(bool) (->m_pending) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
msg.sender == owner2

IRs:
TMP_17(bool) = msg.sender == owner2
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
m_pending[_operation].confirmation2 = true

IRs:
REF_9(MultiOwnable.PendingState) -> m_pending[_operation]
REF_10(bool) -> REF_9.confirmation2
REF_10(bool) (->m_pending) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
m_pending[_operation].exists = 1

IRs:
REF_11(MultiOwnable.PendingState) -> m_pending[_operation]
REF_12(uint256) -> REF_11.exists
REF_12(uint256) (->m_pending) := 1(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
msg.sender == owner1 && m_pending[_operation].confirmation1 == true

IRs:
TMP_18(bool) = msg.sender == owner1
REF_13(MultiOwnable.PendingState) -> m_pending[_operation]
REF_14(bool) -> REF_13.confirmation1
TMP_19(bool) = REF_14 == True
TMP_20(bool) = TMP_18 && TMP_19
CONDITION TMP_20"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
false

IRs:
RETURN False"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
msg.sender == owner2 && m_pending[_operation].confirmation2 == true

IRs:
TMP_21(bool) = msg.sender == owner2
REF_15(MultiOwnable.PendingState) -> m_pending[_operation]
REF_16(bool) -> REF_15.confirmation2
TMP_22(bool) = REF_16 == True
TMP_23(bool) = TMP_21 && TMP_22
CONDITION TMP_23"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
false

IRs:
RETURN False"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
msg.sender == owner1

IRs:
TMP_24(bool) = msg.sender == owner1
CONDITION TMP_24"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
m_pending[_operation].confirmation1 = true

IRs:
REF_17(MultiOwnable.PendingState) -> m_pending[_operation]
REF_18(bool) -> REF_17.confirmation1
REF_18(bool) (->m_pending) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
msg.sender == owner2

IRs:
TMP_25(bool) = msg.sender == owner2
CONDITION TMP_25"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
m_pending[_operation].confirmation2 = true

IRs:
REF_19(MultiOwnable.PendingState) -> m_pending[_operation]
REF_20(bool) -> REF_19.confirmation2
REF_20(bool) (->m_pending) := True(bool)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
m_pending[_operation].confirmation1 && m_pending[_operation].confirmation2

IRs:
REF_21(MultiOwnable.PendingState) -> m_pending[_operation]
REF_22(bool) -> REF_21.confirmation1
REF_23(MultiOwnable.PendingState) -> m_pending[_operation]
REF_24(bool) -> REF_23.confirmation2
TMP_26(bool) = REF_22 && REF_24
RETURN TMP_26"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
24->1;
}
// Function: 3665.sol-MultiOwnable-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner1 != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _owner1 != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_owner2 != address(0))

IRs:
TMP_3 = CONVERT 0 to address
TMP_4(bool) = _owner2 != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner1 = _owner1

IRs:
owner1(address) := _owner1(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner2 = _owner2

IRs:
owner2(address) := _owner2(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isLocked = true

IRs:
isLocked(bool) := True(bool)"];
}
// Function: 3665.sol-MultiOwnable-hasConfirmed(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
_owner == owner1

IRs:
TMP_12(bool) = _owner == owner1
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
m_pending[_operation].confirmation1

IRs:
REF_1(MultiOwnable.PendingState) -> m_pending[_operation]
REF_2(bool) -> REF_1.confirmation1
RETURN REF_2"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_owner == owner2

IRs:
TMP_13(bool) = _owner == owner2
CONDITION TMP_13"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
m_pending[_operation].confirmation2

IRs:
REF_3(MultiOwnable.PendingState) -> m_pending[_operation]
REF_4(bool) -> REF_3.confirmation2
RETURN REF_4"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
7->1;
}
// Function: 3665.sol-MultiOwnable-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_addr == owner1 || _addr == owner2

IRs:
TMP_9(bool) = _addr == owner1
TMP_10(bool) = _addr == owner2
TMP_11(bool) = TMP_9 || TMP_10
RETURN TMP_11"];
}
// Function: 3665.sol-MultiOwnable-onlyIfUnlocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isLocked)

IRs:
TMP_31 = UnaryType.BANG isLocked 
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3665.sol-MultiOwnable-onlyManyOwners(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
confirmAndCheck(_operation)

IRs:
TMP_30(bool) = INTERNAL_CALL, MultiOwnable.confirmAndCheck(bytes32)(_operation)
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 3665.sol-MultiOwnable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner(msg.sender))

IRs:
TMP_28(bool) = INTERNAL_CALL, MultiOwnable.isOwner(address)(msg.sender)
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3665.sol-MultiOwnable-revoke(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Revoke(msg.sender,_operation)

IRs:
Emit Revoke(msg.sender,_operation)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete m_pending[_operation]

IRs:
REF_0(MultiOwnable.PendingState) -> m_pending[_operation]
m_pending = delete REF_0 "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
3->1;
}
// Function: 3665.sol-MultiOwnable-unlock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isLocked = false

IRs:
isLocked(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
2->1;
}
// Function: 3665.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_33(uint256) = a + b
c(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_34(bool) = c >= a
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3665.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_45(bool) = b > 0
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_47(uint256) = a / b
c(uint256) := TMP_47(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3665.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_39(uint256) = a * b
c(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_40(bool) = a == 0
TMP_41(uint256) = c / a
TMP_42(bool) = TMP_41 == b
TMP_43(bool) = TMP_40 || TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3665.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_36(bool) = b <= a
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_38(uint256) = a - b
c(uint256) := TMP_38(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3665.sol-TruGold-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_99(mapping(address => uint256)) -> allowed[tokenOwner]
REF_100(uint256) -> REF_99[spender]
RETURN REF_100"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 3665.sol-TruGold-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_86(mapping(address => uint256)) -> allowed[msg.sender]
REF_87(uint256) -> REF_86[spender]
REF_87(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3665.sol-TruGold-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_101(mapping(address => uint256)) -> allowed[msg.sender]
REF_102(uint256) -> REF_101[spender]
REF_102(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_107 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_107(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3665.sol-TruGold-approveOwnerTransfer(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
transaction = pendingTransactions[operation]

IRs:
REF_69(TruGold.Transaction) -> pendingTransactions[operation]
transaction(TruGold.Transaction) := REF_69(TruGold.Transaction)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[transaction.from] = balances[transaction.from].sub(transaction.value)

IRs:
REF_70(address) -> transaction.from
REF_71(uint256) -> balances[REF_70]
REF_72(address) -> transaction.from
REF_73(uint256) -> balances[REF_72]
REF_75(uint256) -> transaction.value
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_73', 'REF_75'] 
REF_71(uint256) (->balances) := TMP_96(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[transaction.to] = balances[transaction.to].add(transaction.value)

IRs:
REF_76(address) -> transaction.to
REF_77(uint256) -> balances[REF_76]
REF_78(address) -> transaction.to
REF_79(uint256) -> balances[REF_78]
REF_81(uint256) -> transaction.value
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_79', 'REF_81'] 
REF_77(uint256) (->balances) := TMP_97(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete pendingTransactions[operation]

IRs:
REF_82(TruGold.Transaction) -> pendingTransactions[operation]
pendingTransactions = delete REF_82 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(transaction.from,transaction.to,transaction.value)

IRs:
REF_83(address) -> transaction.from
REF_84(address) -> transaction.to
REF_85(uint256) -> transaction.value
Emit Transfer(REF_83,REF_84,REF_85)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyManyOwners(operation)

IRs:
MODIFIER_CALL, MultiOwnable.onlyManyOwners(bytes32)(operation)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3665.sol-TruGold-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_53(uint256) -> balances[tokenOwner]
RETURN REF_53"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 3665.sol-TruGold-confirmAndCheck(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: IF 1

EXPRESSION:
m_pending[_operation].exists == 0

IRs:
REF_30(MultiOwnable.PendingState) -> m_pending[_operation]
REF_31(uint256) -> REF_30.exists
TMP_63(bool) = REF_31 == 0
CONDITION TMP_63"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
msg.sender == owner1

IRs:
TMP_64(bool) = msg.sender == owner1
CONDITION TMP_64"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
m_pending[_operation].confirmation1 = true

IRs:
REF_32(MultiOwnable.PendingState) -> m_pending[_operation]
REF_33(bool) -> REF_32.confirmation1
REF_33(bool) (->m_pending) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
msg.sender == owner2

IRs:
TMP_65(bool) = msg.sender == owner2
CONDITION TMP_65"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
m_pending[_operation].confirmation2 = true

IRs:
REF_34(MultiOwnable.PendingState) -> m_pending[_operation]
REF_35(bool) -> REF_34.confirmation2
REF_35(bool) (->m_pending) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
m_pending[_operation].exists = 1

IRs:
REF_36(MultiOwnable.PendingState) -> m_pending[_operation]
REF_37(uint256) -> REF_36.exists
REF_37(uint256) (->m_pending) := 1(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
msg.sender == owner1 && m_pending[_operation].confirmation1 == true

IRs:
TMP_66(bool) = msg.sender == owner1
REF_38(MultiOwnable.PendingState) -> m_pending[_operation]
REF_39(bool) -> REF_38.confirmation1
TMP_67(bool) = REF_39 == True
TMP_68(bool) = TMP_66 && TMP_67
CONDITION TMP_68"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
false

IRs:
RETURN False"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
msg.sender == owner2 && m_pending[_operation].confirmation2 == true

IRs:
TMP_69(bool) = msg.sender == owner2
REF_40(MultiOwnable.PendingState) -> m_pending[_operation]
REF_41(bool) -> REF_40.confirmation2
TMP_70(bool) = REF_41 == True
TMP_71(bool) = TMP_69 && TMP_70
CONDITION TMP_71"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
false

IRs:
RETURN False"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
msg.sender == owner1

IRs:
TMP_72(bool) = msg.sender == owner1
CONDITION TMP_72"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
m_pending[_operation].confirmation1 = true

IRs:
REF_42(MultiOwnable.PendingState) -> m_pending[_operation]
REF_43(bool) -> REF_42.confirmation1
REF_43(bool) (->m_pending) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
msg.sender == owner2

IRs:
TMP_73(bool) = msg.sender == owner2
CONDITION TMP_73"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
m_pending[_operation].confirmation2 = true

IRs:
REF_44(MultiOwnable.PendingState) -> m_pending[_operation]
REF_45(bool) -> REF_44.confirmation2
REF_45(bool) (->m_pending) := True(bool)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
m_pending[_operation].confirmation1 && m_pending[_operation].confirmation2

IRs:
REF_46(MultiOwnable.PendingState) -> m_pending[_operation]
REF_47(bool) -> REF_46.confirmation1
REF_48(MultiOwnable.PendingState) -> m_pending[_operation]
REF_49(bool) -> REF_48.confirmation2
TMP_74(bool) = REF_47 && REF_49
RETURN TMP_74"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
24->1;
}
// Function: 3665.sol-TruGold-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner1 != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _owner1 != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_owner2 != address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = _owner2 != TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner1 = _owner1

IRs:
owner1(address) := _owner1(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner2 = _owner2

IRs:
owner2(address) := _owner2(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isLocked = true

IRs:
isLocked(bool) := True(bool)"];
}
// Function: 3665.sol-TruGold-constructor(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = TruGold

IRs:
symbol(string) := TruGold(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = TruGold

IRs:
name(string) := TruGold(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 300000000 * 10 ** uint256(decimals)

IRs:
TMP_76 = CONVERT decimals to uint256
TMP_77(uint256) = 10 ** TMP_76
TMP_78(uint256) = 300000000 * TMP_77
_totalSupply(uint256) := TMP_78(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[target] = _totalSupply

IRs:
REF_50(uint256) -> balances[target]
REF_50(uint256) (->balances) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),target,_totalSupply)

IRs:
TMP_79 = CONVERT 0 to address
Emit Transfer(TMP_79,target,_totalSupply)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
MultiOwnable(_owner1,_owner2)

IRs:
INTERNAL_CALL, MultiOwnable.constructor(address,address)(_owner1,_owner2)"];
7->1;
}
// Function: 3665.sol-TruGold-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_109(None) = SOLIDITY_CALL revert()()"];
}
// Function: 3665.sol-TruGold-hasConfirmed(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
_owner == owner1

IRs:
TMP_60(bool) = _owner == owner1
CONDITION TMP_60"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
m_pending[_operation].confirmation1

IRs:
REF_26(MultiOwnable.PendingState) -> m_pending[_operation]
REF_27(bool) -> REF_26.confirmation1
RETURN REF_27"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_owner == owner2

IRs:
TMP_61(bool) = _owner == owner2
CONDITION TMP_61"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
m_pending[_operation].confirmation2

IRs:
REF_28(MultiOwnable.PendingState) -> m_pending[_operation]
REF_29(bool) -> REF_28.confirmation2
RETURN REF_29"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
7->1;
}
// Function: 3665.sol-TruGold-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_addr == owner1 || _addr == owner2

IRs:
TMP_57(bool) = _addr == owner1
TMP_58(bool) = _addr == owner2
TMP_59(bool) = TMP_57 || TMP_58
RETURN TMP_59"];
}
// Function: 3665.sol-TruGold-onlyIfUnlocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isLocked)

IRs:
TMP_116 = UnaryType.BANG isLocked 
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3665.sol-TruGold-onlyManyOwners(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
confirmAndCheck(_operation)

IRs:
TMP_115(bool) = INTERNAL_CALL, MultiOwnable.confirmAndCheck(bytes32)(_operation)
CONDITION TMP_115"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 3665.sol-TruGold-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner(msg.sender))

IRs:
TMP_113(bool) = INTERNAL_CALL, MultiOwnable.isOwner(address)(msg.sender)
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3665.sol-TruGold-ownerTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operation = keccak256()(abi.encodePacked(msg.data,block.number))

IRs:
TMP_88(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.data,block.number)
TMP_89(bytes32) = SOLIDITY_CALL keccak256()(TMP_88)
operation(bytes32) := TMP_89(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! approveOwnerTransfer(operation) && pendingTransactions[operation].to == 0

IRs:
TMP_90(bool) = INTERNAL_CALL, TruGold.approveOwnerTransfer(bytes32)(operation)
TMP_91 = UnaryType.BANG TMP_90 
REF_61(TruGold.Transaction) -> pendingTransactions[operation]
REF_62(address) -> REF_61.to
TMP_92(bool) = REF_62 == 0
TMP_93(bool) = TMP_91 && TMP_92
CONDITION TMP_93"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingTransactions[operation].from = from

IRs:
REF_63(TruGold.Transaction) -> pendingTransactions[operation]
REF_64(address) -> REF_63.from
REF_64(address) (->pendingTransactions) := from(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pendingTransactions[operation].to = to

IRs:
REF_65(TruGold.Transaction) -> pendingTransactions[operation]
REF_66(address) -> REF_65.to
REF_66(address) (->pendingTransactions) := to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pendingTransactions[operation].value = value

IRs:
REF_67(TruGold.Transaction) -> pendingTransactions[operation]
REF_68(uint256) -> REF_67.value
REF_68(uint256) (->pendingTransactions) := value(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ConfirmationNeeded(operation,from,value,to)

IRs:
Emit ConfirmationNeeded(operation,from,value,to)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
operation

IRs:
RETURN operation"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
operation

IRs:
RETURN operation"];
}
// Function: 3665.sol-TruGold-revoke(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Revoke(msg.sender,_operation)

IRs:
Emit Revoke(msg.sender,_operation)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete m_pending[_operation]

IRs:
REF_25(MultiOwnable.PendingState) -> m_pending[_operation]
m_pending = delete REF_25 "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
3->1;
}
// Function: 3665.sol-TruGold-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply.sub(balances[address(0)])

IRs:
TMP_82 = CONVERT 0 to address
REF_52(uint256) -> balances[TMP_82]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'REF_52'] 
RETURN TMP_83"];
}
// Function: 3665.sol-TruGold-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(tokens)

IRs:
REF_54(uint256) -> balances[msg.sender]
REF_55(uint256) -> balances[msg.sender]
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_55', 'tokens'] 
REF_54(uint256) (->balances) := TMP_84(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_57(uint256) -> balances[to]
REF_58(uint256) -> balances[to]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_58', 'tokens'] 
REF_57(uint256) (->balances) := TMP_85(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyIfUnlocked()

IRs:
MODIFIER_CALL, MultiOwnable.onlyIfUnlocked()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3665.sol-TruGold-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner1,tokens)

IRs:
TMP_110 = CONVERT tokenAddress to ERC20Interface
TMP_111(bool) = HIGH_LEVEL_CALL, dest:TMP_110(ERC20Interface), function:transfer, arguments:['owner1', 'tokens']  
RETURN TMP_111"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3665.sol-TruGold-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_88(uint256) -> balances[from]
REF_89(uint256) -> balances[from]
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_89', 'tokens'] 
REF_88(uint256) (->balances) := TMP_101(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_91(mapping(address => uint256)) -> allowed[from]
REF_92(uint256) -> REF_91[msg.sender]
REF_93(mapping(address => uint256)) -> allowed[from]
REF_94(uint256) -> REF_93[msg.sender]
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_94', 'tokens'] 
REF_92(uint256) (->allowed) := TMP_102(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_96(uint256) -> balances[to]
REF_97(uint256) -> balances[to]
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_97', 'tokens'] 
REF_96(uint256) (->balances) := TMP_103(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyIfUnlocked()

IRs:
MODIFIER_CALL, MultiOwnable.onlyIfUnlocked()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3665.sol-TruGold-unlock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isLocked = false

IRs:
isLocked(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwnable.onlyOwner()()"];
2->1;
}
}
