digraph G {
// Function: 3719.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_432'] 
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_434'] 
TMP_436(uint256) = TMP_435 / 2
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_433', 'TMP_436'] 
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_439(uint256) = TMP_437 / TMP_438
RETURN TMP_439"];
}
// Function: 3719.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_422(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_424(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_423)
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_422', 'TMP_424'] 
RETURN TMP_425"];
}
// Function: 3719.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_426', '312500000000000000000000000'] 
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_427', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_428'] 
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_429', '74999921875000000000000000000000'] 
TMP_431(uint256) = TMP_430 / 156250000
RETURN TMP_431"];
}
// Function: 3719.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_419(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_418)
TMP_420(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_419', 'TMP_420'] 
RETURN TMP_421"];
}
// Function: 3719.sol-FoMo3DLightning-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_402(bool) = msg.sender == admin
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(activated_ == false)

IRs:
TMP_404(bool) = activated_ == False
TMP_405(None) = SOLIDITY_CALL require(bool)(TMP_404)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_657(F3Ddatasets.Round) -> round_[1]
REF_658(uint256) -> REF_657.strt
TMP_406(uint256) = now + rndExtra_
TMP_407(uint256) = TMP_406 - rndGap_
REF_658(uint256) (->round_) := TMP_407(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_659(F3Ddatasets.Round) -> round_[1]
REF_660(uint256) -> REF_659.end
TMP_408(uint256) = now + rndInit_
TMP_409(uint256) = TMP_408 + rndExtra_
REF_660(uint256) (->round_) := TMP_409(uint256)"];
}
// Function: 3719.sol-FoMo3DLightning-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_317(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_318(bytes32) = SOLIDITY_CALL keccak256()(TMP_317)
TMP_319 = CONVERT TMP_318 to uint256
TMP_320(uint256) = TMP_319 / now
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_316', 'TMP_320'] 
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_321', 'block.gaslimit'] 
TMP_323(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(TMP_323)
TMP_325 = CONVERT TMP_324 to uint256
TMP_326(uint256) = TMP_325 / now
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_322', 'TMP_326'] 
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_327', 'block.number'] 
TMP_329(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_328)
TMP_330(bytes32) = SOLIDITY_CALL keccak256()(TMP_329)
TMP_331 = CONVERT TMP_330 to uint256
seed(uint256) := TMP_331(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_332(uint256) = seed / 1000
TMP_333(uint256) = TMP_332 * 1000
TMP_334(uint256) = seed - TMP_333
TMP_335(bool) = TMP_334 < airDropTracker_
CONDITION TMP_335"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3719.sol-FoMo3DLightning-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_244(F3Ddatasets.Round) -> round_[_rID]
REF_245(uint256) -> REF_244.strt
TMP_146(uint256) = REF_245 + rndGap_
TMP_147(bool) = _now > TMP_146
REF_246(F3Ddatasets.Round) -> round_[_rID]
REF_247(uint256) -> REF_246.end
TMP_148(bool) = _now <= REF_247
REF_248(F3Ddatasets.Round) -> round_[_rID]
REF_249(uint256) -> REF_248.end
TMP_149(bool) = _now > REF_249
REF_250(F3Ddatasets.Round) -> round_[_rID]
REF_251(uint256) -> REF_250.plyr
TMP_150(bool) = REF_251 == 0
TMP_151(bool) = TMP_149 && TMP_150
TMP_152(bool) = TMP_148 || TMP_151
TMP_153(bool) = TMP_147 && TMP_152
CONDITION TMP_153"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_252(F3Ddatasets.Round) -> round_[_rID]
REF_253(uint256) -> REF_252.end
TMP_155(bool) = _now > REF_253
REF_254(F3Ddatasets.Round) -> round_[_rID]
REF_255(bool) -> REF_254.ended
TMP_156(bool) = REF_255 == False
TMP_157(bool) = TMP_155 && TMP_156
CONDITION TMP_157"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_256(F3Ddatasets.Round) -> round_[_rID]
REF_257(bool) -> REF_256.ended
REF_257(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_158(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DLightning.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_158(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_258(uint256) -> _eventData_.compressedData
REF_259(uint256) -> _eventData_.compressedData
TMP_159(uint256) = _now * 1000000000000000000
TMP_160(uint256) = REF_259 + TMP_159
REF_258(uint256) (->_eventData_) := TMP_160(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_260(uint256) -> _eventData_.compressedIDs
REF_261(uint256) -> _eventData_.compressedIDs
TMP_161(uint256) = REF_261 + _pID
REF_260(uint256) (->_eventData_) := TMP_161(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_263(F3Ddatasets.Player) -> plyr_[_pID]
REF_264(bytes32) -> REF_263.name
REF_265(uint256) -> _eventData_.compressedData
REF_266(uint256) -> _eventData_.compressedIDs
REF_267(address) -> _eventData_.winnerAddr
REF_268(bytes32) -> _eventData_.winnerName
REF_269(uint256) -> _eventData_.amountWon
REF_270(uint256) -> _eventData_.newPot
REF_271(uint256) -> _eventData_.P3DAmount
REF_272(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_264,msg.value,REF_265,REF_266,REF_267,REF_268,REF_269,REF_270,REF_271,REF_272)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_273(F3Ddatasets.Player) -> plyr_[_pID]
REF_274(uint256) -> REF_273.gen
REF_275(F3Ddatasets.Player) -> plyr_[_pID]
REF_276(uint256) -> REF_275.gen
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_276', 'msg.value'] 
REF_274(uint256) (->plyr_) := TMP_163(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3719.sol-FoMo3DLightning-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
determinePID(msg.sender)

IRs:
TMP_27(bool) = INTERNAL_CALL, FoMo3DLightning.determinePID(address)(msg.sender)
CONDITION TMP_27"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_34(uint256) -> _eventData_.compressedData
REF_35(uint256) -> _eventData_.compressedData
TMP_28(uint256) = REF_35 + 1
REF_34(uint256) (->_eventData_) := TMP_28(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_36(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_36(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_29 = CONVERT 0 to address
TMP_30(bool) = _affCode == TMP_29
TMP_31(bool) = _affCode == msg.sender
TMP_32(bool) = TMP_30 || TMP_31
CONDITION TMP_32"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
8->13;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_39(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_39(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_33(bool) = _affID != REF_41
CONDITION TMP_33"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_34(uint256) = INTERNAL_CALL, FoMo3DLightning.verifyTeam(uint256)(_team)
_team(uint256) := TMP_34(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DLightning.isWithinLimits(uint256)(msg.value)"];
18->1;
}
// Function: 3719.sol-FoMo3DLightning-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
determinePID(msg.sender)

IRs:
TMP_16(bool) = INTERNAL_CALL, FoMo3DLightning.determinePID(address)(msg.sender)
CONDITION TMP_16"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_25(uint256) -> _eventData_.compressedData
REF_26(uint256) -> _eventData_.compressedData
TMP_17(uint256) = REF_26 + 1
REF_25(uint256) (->_eventData_) := TMP_17(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_27(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_27(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_18(bool) = _affCode == 0
TMP_19(bool) = _affCode == _pID
TMP_20(bool) = TMP_18 || TMP_19
CONDITION TMP_20"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_28(F3Ddatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
_affCode(uint256) := REF_29(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_21(bool) = _affCode != REF_31
CONDITION TMP_21"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affCode(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_22(uint256) = INTERNAL_CALL, FoMo3DLightning.verifyTeam(uint256)(_team)
_team(uint256) := TMP_22(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DLightning.isWithinLimits(uint256)(msg.value)"];
16->1;
}
// Function: 3719.sol-FoMo3DLightning-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
determinePID(msg.sender)

IRs:
TMP_39(bool) = INTERNAL_CALL, FoMo3DLightning.determinePID(address)(msg.sender)
CONDITION TMP_39"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_44(uint256) -> _eventData_.compressedData
REF_45(uint256) -> _eventData_.compressedData
TMP_40(uint256) = REF_45 + 1
REF_44(uint256) (->_eventData_) := TMP_40(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_46(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_46(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_41(bool) = _affCode == 
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(bytes32) -> REF_47.name
TMP_42(bool) = _affCode == REF_48
TMP_43(bool) = TMP_41 || TMP_42
CONDITION TMP_43"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
_affID(uint256) := REF_50(uint256)"];
8->13;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_51(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_51(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
TMP_44(bool) = _affID != REF_53
CONDITION TMP_44"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_54(F3Ddatasets.Player) -> plyr_[_pID]
REF_55(uint256) -> REF_54.laff
REF_55(uint256) (->plyr_) := _affID(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_45(uint256) = INTERNAL_CALL, FoMo3DLightning.verifyTeam(uint256)(_team)
_team(uint256) := TMP_45(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DLightning.isWithinLimits(uint256)(msg.value)"];
18->1;
}
// Function: 3719.sol-FoMo3DLightning-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_409(F3Ddatasets.Round) -> round_[_rID]
REF_410(uint256) -> REF_409.strt
TMP_236(uint256) = REF_410 + rndGap_
TMP_237(bool) = _now > TMP_236
REF_411(F3Ddatasets.Round) -> round_[_rID]
REF_412(uint256) -> REF_411.end
TMP_238(bool) = _now <= REF_412
REF_413(F3Ddatasets.Round) -> round_[_rID]
REF_414(uint256) -> REF_413.end
TMP_239(bool) = _now > REF_414
REF_415(F3Ddatasets.Round) -> round_[_rID]
REF_416(uint256) -> REF_415.plyr
TMP_240(bool) = REF_416 == 0
TMP_241(bool) = TMP_239 && TMP_240
TMP_242(bool) = TMP_238 || TMP_241
TMP_243(bool) = TMP_237 && TMP_242
CONDITION TMP_243"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_417(F3Ddatasets.Round) -> round_[_rID]
REF_418(uint256) -> REF_417.eth
TMP_244(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_418', '_eth'] 
RETURN TMP_244"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_245(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_245"];
}
// Function: 3719.sol-FoMo3DLightning-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_399(F3Ddatasets.Round) -> round_[_rIDlast]
REF_400(uint256) -> REF_399.mask
REF_402(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_403(F3Ddatasets.PlayerRounds) -> REF_402[_rIDlast]
REF_404(uint256) -> REF_403.keys
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_400', 'REF_404'] 
TMP_234(uint256) = TMP_233 / 1000000000000000000
REF_406(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_407(F3Ddatasets.PlayerRounds) -> REF_406[_rIDlast]
REF_408(uint256) -> REF_407.mask
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_234', 'REF_408'] 
RETURN TMP_235"];
}
// Function: 3719.sol-FoMo3DLightning-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(49,2)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(49,2)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(49,2)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(49,2)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(49,2)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(49,2)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(49,2)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(49,2)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(38,2)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(38,2)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(38,2)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(38,2)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(38,2)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(38,2)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(38,2)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(38,2)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 3719.sol-FoMo3DLightning-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_310(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_311(F3Ddatasets.PlayerRounds) -> REF_310[_rID]
REF_312(uint256) -> REF_311.keys
TMP_183(bool) = REF_312 == 0
CONDITION TMP_183"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_184(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DLightning.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_184(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 2100000000000000000

IRs:
REF_313(F3Ddatasets.Round) -> round_[_rID]
REF_314(uint256) -> REF_313.eth
TMP_185(bool) = REF_314 < 100000000000000000000
REF_315(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_316(F3Ddatasets.PlayerRounds) -> REF_315[_rID]
REF_317(uint256) -> REF_316.eth
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_317', '_eth'] 
TMP_187(bool) = TMP_186 > 2100000000000000000
TMP_188(bool) = TMP_185 && TMP_187
CONDITION TMP_188"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (2100000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_320(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_321(F3Ddatasets.PlayerRounds) -> REF_320[_rID]
REF_322(uint256) -> REF_321.eth
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['2100000000000000000', 'REF_322'] 
_availableLimit(uint256) := TMP_189(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_190(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_324(F3Ddatasets.Player) -> plyr_[_pID]
REF_325(uint256) -> REF_324.gen
REF_326(F3Ddatasets.Player) -> plyr_[_pID]
REF_327(uint256) -> REF_326.gen
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_327', '_refund'] 
REF_325(uint256) (->plyr_) := TMP_191(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_192(bool) = _eth > 1000000000
CONDITION TMP_192"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_329(F3Ddatasets.Round) -> round_[_rID]
REF_330(uint256) -> REF_329.eth
TMP_193(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_330', '_eth'] 
_keys(uint256) := TMP_193(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_194(bool) = _keys >= 1000000000000000000
CONDITION TMP_194"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DLightning.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_332(F3Ddatasets.Round) -> round_[_rID]
REF_333(uint256) -> REF_332.plyr
TMP_196(bool) = REF_333 != _pID
CONDITION TMP_196"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_334(F3Ddatasets.Round) -> round_[_rID]
REF_335(uint256) -> REF_334.plyr
REF_335(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_336(F3Ddatasets.Round) -> round_[_rID]
REF_337(uint256) -> REF_336.team
TMP_197(bool) = REF_337 != _team
CONDITION TMP_197"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_338(F3Ddatasets.Round) -> round_[_rID]
REF_339(uint256) -> REF_338.team
REF_339(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_340(uint256) -> _eventData_.compressedData
REF_341(uint256) -> _eventData_.compressedData
TMP_198(uint256) = REF_341 + 100
REF_340(uint256) (->_eventData_) := TMP_198(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_199(bool) = _eth >= 100000000000000000
CONDITION TMP_199"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_200(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_201(bool) = INTERNAL_CALL, FoMo3DLightning.airdrop()()
TMP_202(bool) = TMP_201 == True
CONDITION TMP_202"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_203(bool) = _eth >= 10000000000000000000
CONDITION TMP_203"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_205(uint256) = TMP_204 / 100
_prize(uint256) := TMP_205(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_343(F3Ddatasets.Player) -> plyr_[_pID]
REF_344(uint256) -> REF_343.win
REF_345(F3Ddatasets.Player) -> plyr_[_pID]
REF_346(uint256) -> REF_345.win
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_346', '_prize'] 
REF_344(uint256) (->plyr_) := TMP_206(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_207(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_349(uint256) -> _eventData_.compressedData
REF_349(-> _eventData_) = REF_349 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_208(bool) = _eth >= 1000000000000000000
TMP_209(bool) = _eth < 10000000000000000000
TMP_210(bool) = TMP_208 && TMP_209
CONDITION TMP_210"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_212(uint256) = TMP_211 / 100
_prize(uint256) := TMP_212(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_351(F3Ddatasets.Player) -> plyr_[_pID]
REF_352(uint256) -> REF_351.win
REF_353(F3Ddatasets.Player) -> plyr_[_pID]
REF_354(uint256) -> REF_353.win
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_354', '_prize'] 
REF_352(uint256) (->plyr_) := TMP_213(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_214(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_357(uint256) -> _eventData_.compressedData
REF_357(-> _eventData_) = REF_357 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_215(bool) = _eth >= 100000000000000000
TMP_216(bool) = _eth < 1000000000000000000
TMP_217(bool) = TMP_215 && TMP_216
CONDITION TMP_217"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_219(uint256) = TMP_218 / 100
_prize(uint256) := TMP_219(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_359(F3Ddatasets.Player) -> plyr_[_pID]
REF_360(uint256) -> REF_359.win
REF_361(F3Ddatasets.Player) -> plyr_[_pID]
REF_362(uint256) -> REF_361.win
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_362', '_prize'] 
REF_360(uint256) (->plyr_) := TMP_220(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_221(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_365(uint256) -> _eventData_.compressedData
REF_365(-> _eventData_) = REF_365 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_366(uint256) -> _eventData_.compressedData
REF_366(-> _eventData_) = REF_366 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_367(uint256) -> _eventData_.compressedData
TMP_222(uint256) = _prize * 1000000000000000000000000000000000
REF_367(-> _eventData_) = REF_367 + TMP_222"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_368(uint256) -> _eventData_.compressedData
REF_369(uint256) -> _eventData_.compressedData
TMP_223(uint256) = airDropTracker_ * 1000
TMP_224(uint256) = REF_369 + TMP_223
REF_368(uint256) (->_eventData_) := TMP_224(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_370(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_371(F3Ddatasets.PlayerRounds) -> REF_370[_rID]
REF_372(uint256) -> REF_371.keys
REF_374(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_375(F3Ddatasets.PlayerRounds) -> REF_374[_rID]
REF_376(uint256) -> REF_375.keys
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_376'] 
REF_372(uint256) (->plyrRnds_) := TMP_225(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_377(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_378(F3Ddatasets.PlayerRounds) -> REF_377[_rID]
REF_379(uint256) -> REF_378.eth
REF_381(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_382(F3Ddatasets.PlayerRounds) -> REF_381[_rID]
REF_383(uint256) -> REF_382.eth
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_383'] 
REF_379(uint256) (->plyrRnds_) := TMP_226(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_384(F3Ddatasets.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.keys
REF_387(F3Ddatasets.Round) -> round_[_rID]
REF_388(uint256) -> REF_387.keys
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_388'] 
REF_385(uint256) (->round_) := TMP_227(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_389(F3Ddatasets.Round) -> round_[_rID]
REF_390(uint256) -> REF_389.eth
REF_392(F3Ddatasets.Round) -> round_[_rID]
REF_393(uint256) -> REF_392.eth
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_393'] 
REF_390(uint256) (->round_) := TMP_228(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_394(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_395(uint256) -> REF_394[_team]
REF_397(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_398(uint256) -> REF_397[_team]
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_398'] 
REF_395(uint256) (->rndTmEth_) := TMP_229(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_230(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DLightning.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_230(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_231(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DLightning.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_231(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 3719.sol-FoMo3DLightning-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_21(uint256) -> pIDxAddr_[_addr]
TMP_14(bool) = REF_21 == 0
CONDITION TMP_14"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_15(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_22(uint256) -> pIDxAddr_[_addr]
REF_22(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_23(F3Ddatasets.Player) -> plyr_[pID_]
REF_24(address) -> REF_23.addr
REF_24(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3719.sol-FoMo3DLightning-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_336(uint256) = _eth / 100
_p1(uint256) := TMP_336(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_337(uint256) = _eth / 50
_com(uint256) := TMP_337(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_338(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_339 = CONVERT admin to address
TMP_341(bool) = LOW_LEVEL_CALL, dest:TMP_339, function:call, arguments:[] value:_com 
TMP_342 = UnaryType.BANG TMP_341 
CONDITION TMP_342"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_343(uint256) = _eth / 10
_aff(uint256) := TMP_343(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_344(bool) = _affID != _pID
REF_547(F3Ddatasets.Player) -> plyr_[_affID]
REF_548(bytes32) -> REF_547.name
TMP_345(bool) = REF_548 != 
TMP_346(bool) = TMP_344 && TMP_345
CONDITION TMP_346"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_549(F3Ddatasets.Player) -> plyr_[_affID]
REF_550(uint256) -> REF_549.aff
REF_552(F3Ddatasets.Player) -> plyr_[_affID]
REF_553(uint256) -> REF_552.aff
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_553'] 
REF_550(uint256) (->plyr_) := TMP_347(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_555(F3Ddatasets.Player) -> plyr_[_affID]
REF_556(address) -> REF_555.addr
REF_557(F3Ddatasets.Player) -> plyr_[_affID]
REF_558(bytes32) -> REF_557.name
Emit onAffiliatePayout(_affID,REF_556,REF_558,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_561(F3Ddatasets.TeamFee) -> fees_[_team]
REF_562(uint256) -> REF_561.p3d
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_562'] 
TMP_350(uint256) = TMP_349 / 100
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_350'] 
_p3d(uint256) := TMP_351(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_352(bool) = _p3d > 0
CONDITION TMP_352"];
16->17[label="True"];
16->21[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_353(uint256) = _p3d / 2
_potAmount(uint256) := TMP_353(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_354"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_565(F3Ddatasets.Round) -> round_[_rID]
REF_566(uint256) -> REF_565.pot
REF_567(F3Ddatasets.Round) -> round_[_rID]
REF_568(uint256) -> REF_567.pot
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_568', '_potAmount'] 
REF_566(uint256) (->round_) := TMP_356(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_570(uint256) -> _eventData_.P3DAmount
REF_572(uint256) -> _eventData_.P3DAmount
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_572'] 
REF_570(uint256) (->_eventData_) := TMP_357(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3719.sol-FoMo3DLightning-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_580(F3Ddatasets.TeamFee) -> fees_[_team]
REF_581(uint256) -> REF_580.gen
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_581'] 
TMP_362(uint256) = TMP_361 / 100
_gen(uint256) := TMP_362(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_363(uint256) = _eth / 100
_air(uint256) := TMP_363(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_364(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_366(uint256) = TMP_365 / 100
REF_587(F3Ddatasets.TeamFee) -> fees_[_team]
REF_588(uint256) -> REF_587.p3d
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_588'] 
TMP_368(uint256) = TMP_367 / 100
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_366', 'TMP_368'] 
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_369'] 
_eth(uint256) := TMP_370(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_371(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_372(uint256) = INTERNAL_CALL, FoMo3DLightning.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_372(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_373(bool) = _dust > 0
CONDITION TMP_373"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_374(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.pot
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_595(F3Ddatasets.Round) -> round_[_rID]
REF_596(uint256) -> REF_595.pot
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_375', 'REF_596'] 
REF_592(uint256) (->round_) := TMP_376(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_597(uint256) -> _eventData_.genAmount
REF_599(uint256) -> _eventData_.genAmount
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_599'] 
REF_597(uint256) (->_eventData_) := TMP_377(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_600(uint256) -> _eventData_.potAmount
REF_600(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3719.sol-FoMo3DLightning-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_442(F3Ddatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.plyr
_winPID(uint256) := REF_443(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_444(F3Ddatasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.team
_winTID(uint256) := REF_445(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_446(F3Ddatasets.Round) -> round_[_rID]
REF_447(uint256) -> REF_446.pot
_pot(uint256) := REF_447(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_264(uint256) = TMP_263 / 100
_win(uint256) := TMP_264(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_265(uint256) = _pot / 50
_com(uint256) := TMP_265(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_450(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_451(uint256) -> REF_450.gen
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_451'] 
TMP_267(uint256) = TMP_266 / 100
_gen(uint256) := TMP_267(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_453(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_454(uint256) -> REF_453.p3d
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_454'] 
TMP_269(uint256) = TMP_268 / 100
_p3d(uint256) := TMP_269(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_270', '_com'] 
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_271', '_gen'] 
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_272', '_p3d'] 
_res(uint256) := TMP_273(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_460(F3Ddatasets.Round) -> round_[_rID]
REF_461(uint256) -> REF_460.keys
TMP_275(uint256) = TMP_274 / REF_461
_ppt(uint256) := TMP_275(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_464(F3Ddatasets.Round) -> round_[_rID]
REF_465(uint256) -> REF_464.keys
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_465'] 
TMP_277(uint256) = TMP_276 / 1000000000000000000
TMP_278(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_277'] 
_dust(uint256) := TMP_278(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_279(bool) = _dust > 0
CONDITION TMP_279"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_280(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_281(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_468(F3Ddatasets.Player) -> plyr_[_winPID]
REF_469(uint256) -> REF_468.win
REF_471(F3Ddatasets.Player) -> plyr_[_winPID]
REF_472(uint256) -> REF_471.win
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_472'] 
REF_469(uint256) (->plyr_) := TMP_282(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_p3d / 2))

IRs:
TMP_284(uint256) = _p3d / 2
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_284'] 
Transfer dest:admin value:TMP_285"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = _pot.add(_p3d / 2)

IRs:
REF_476(F3Ddatasets.Round) -> round_[_rID]
REF_477(uint256) -> REF_476.pot
TMP_287(uint256) = _p3d / 2
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', 'TMP_287'] 
REF_477(uint256) (->round_) := TMP_288(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_479(F3Ddatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.mask
REF_482(F3Ddatasets.Round) -> round_[_rID]
REF_483(uint256) -> REF_482.mask
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_483'] 
REF_480(uint256) (->round_) := TMP_289(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_484(uint256) -> _eventData_.compressedData
REF_485(uint256) -> _eventData_.compressedData
REF_486(F3Ddatasets.Round) -> round_[_rID]
REF_487(uint256) -> REF_486.end
TMP_290(uint256) = REF_487 * 1000000
TMP_291(uint256) = REF_485 + TMP_290
REF_484(uint256) (->_eventData_) := TMP_291(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_488(uint256) -> _eventData_.compressedIDs
REF_489(uint256) -> _eventData_.compressedIDs
TMP_292(uint256) = _winPID * 100000000000000000000000000
TMP_293(uint256) = REF_489 + TMP_292
TMP_294(uint256) = _winTID * 100000000000000000
TMP_295(uint256) = TMP_293 + TMP_294
REF_488(uint256) (->_eventData_) := TMP_295(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_490(address) -> _eventData_.winnerAddr
REF_491(F3Ddatasets.Player) -> plyr_[_winPID]
REF_492(address) -> REF_491.addr
REF_490(address) (->_eventData_) := REF_492(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_493(bytes32) -> _eventData_.winnerName
REF_494(F3Ddatasets.Player) -> plyr_[_winPID]
REF_495(bytes32) -> REF_494.name
REF_493(bytes32) (->_eventData_) := REF_495(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_496(uint256) -> _eventData_.amountWon
REF_496(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_497(uint256) -> _eventData_.genAmount
REF_497(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_498(uint256) -> _eventData_.P3DAmount
REF_498(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_499(uint256) -> _eventData_.newPot
REF_499(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_296(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_297(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_500(F3Ddatasets.Round) -> round_[_rID]
REF_501(uint256) -> REF_500.strt
REF_501(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_502(F3Ddatasets.Round) -> round_[_rID]
REF_503(uint256) -> REF_502.end
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_298', 'rndGap_'] 
REF_503(uint256) (->round_) := TMP_299(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_506(F3Ddatasets.Round) -> round_[_rID]
REF_507(uint256) -> REF_506.pot
REF_507(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3719.sol-FoMo3DLightning-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_641(uint256) -> _eventData_.compressedData
REF_642(uint256) -> _eventData_.compressedData
TMP_394(uint256) = now * 1000000000000000000
TMP_395(uint256) = REF_642 + TMP_394
TMP_396(uint256) = _team * 100000000000000000000000000000
TMP_397(uint256) = TMP_395 + TMP_396
REF_641(uint256) (->_eventData_) := TMP_397(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_643(uint256) -> _eventData_.compressedIDs
REF_644(uint256) -> _eventData_.compressedIDs
TMP_398(uint256) = REF_644 + _pID
TMP_399(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_400(uint256) = TMP_398 + TMP_399
REF_643(uint256) (->_eventData_) := TMP_400(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_646(uint256) -> _eventData_.compressedData
REF_647(uint256) -> _eventData_.compressedIDs
REF_648(F3Ddatasets.Player) -> plyr_[_pID]
REF_649(bytes32) -> REF_648.name
REF_650(address) -> _eventData_.winnerAddr
REF_651(bytes32) -> _eventData_.winnerName
REF_652(uint256) -> _eventData_.amountWon
REF_653(uint256) -> _eventData_.newPot
REF_654(uint256) -> _eventData_.P3DAmount
REF_655(uint256) -> _eventData_.genAmount
REF_656(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_646,REF_647,REF_649,msg.sender,_eth,_keys,REF_650,REF_651,REF_652,REF_653,REF_654,REF_655,REF_656,airDropPot_)"];
}
// Function: 3719.sol-FoMo3DLightning-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
determinePID(msg.sender)

IRs:
TMP_8(bool) = INTERNAL_CALL, FoMo3DLightning.determinePID(address)(msg.sender)
CONDITION TMP_8"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_16(uint256) -> _eventData_.compressedData
REF_17(uint256) -> _eventData_.compressedData
TMP_9(uint256) = REF_17 + 1
REF_16(uint256) (->_eventData_) := TMP_9(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_18(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_18(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_19(F3Ddatasets.Player) -> plyr_[_pID]
REF_20(uint256) -> REF_19.laff
INTERNAL_CALL, FoMo3DLightning.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_20,2,_eventData_)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DLightning.isWithinLimits(uint256)(msg.value)"];
9->1;
}
// Function: 3719.sol-FoMo3DLightning-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_114(F3Ddatasets.Round) -> round_[_rID]
REF_115(uint256) -> REF_114.strt
TMP_97(uint256) = REF_115 + rndGap_
TMP_98(bool) = _now > TMP_97
REF_116(F3Ddatasets.Round) -> round_[_rID]
REF_117(uint256) -> REF_116.end
TMP_99(bool) = _now <= REF_117
REF_118(F3Ddatasets.Round) -> round_[_rID]
REF_119(uint256) -> REF_118.end
TMP_100(bool) = _now > REF_119
REF_120(F3Ddatasets.Round) -> round_[_rID]
REF_121(uint256) -> REF_120.plyr
TMP_101(bool) = REF_121 == 0
TMP_102(bool) = TMP_100 && TMP_101
TMP_103(bool) = TMP_99 || TMP_102
TMP_104(bool) = TMP_98 && TMP_103
CONDITION TMP_104"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_122(F3Ddatasets.Round) -> round_[_rID]
REF_123(uint256) -> REF_122.keys
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_123', '1000000000000000000'] 
TMP_106(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_105', '1000000000000000000'] 
RETURN TMP_106"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 3719.sol-FoMo3DLightning-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_196(F3Ddatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.ico
REF_198(F3Ddatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.keys
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.end
REF_202(F3Ddatasets.Round) -> round_[_rID]
REF_203(uint256) -> REF_202.strt
REF_204(F3Ddatasets.Round) -> round_[_rID]
REF_205(uint256) -> REF_204.pot
REF_206(F3Ddatasets.Round) -> round_[_rID]
REF_207(uint256) -> REF_206.team
REF_208(F3Ddatasets.Round) -> round_[_rID]
REF_209(uint256) -> REF_208.plyr
TMP_137(uint256) = REF_209 * 10
TMP_138(uint256) = REF_207 + TMP_137
REF_210(F3Ddatasets.Round) -> round_[_rID]
REF_211(uint256) -> REF_210.plyr
REF_212(F3Ddatasets.Player) -> plyr_[REF_211]
REF_213(address) -> REF_212.addr
REF_214(F3Ddatasets.Round) -> round_[_rID]
REF_215(uint256) -> REF_214.plyr
REF_216(F3Ddatasets.Player) -> plyr_[REF_215]
REF_217(bytes32) -> REF_216.name
REF_218(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_219(uint256) -> REF_218[0]
REF_220(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_221(uint256) -> REF_220[1]
REF_222(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_223(uint256) -> REF_222[2]
REF_224(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_225(uint256) -> REF_224[3]
TMP_139(uint256) = airDropPot_ * 1000
TMP_140(uint256) = airDropTracker_ + TMP_139
RETURN REF_197,_rID,REF_199,REF_201,REF_203,REF_205,TMP_138,REF_213,REF_217,REF_219,REF_221,REF_223,REF_225,TMP_140"];
}
// Function: 3719.sol-FoMo3DLightning-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_141 = CONVERT 0 to address
TMP_142(bool) = _addr == TMP_141
CONDITION TMP_142"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_143(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_226(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_226(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_227(F3Ddatasets.Player) -> plyr_[_pID]
REF_228(bytes32) -> REF_227.name
REF_229(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_230(F3Ddatasets.PlayerRounds) -> REF_229[_rID]
REF_231(uint256) -> REF_230.keys
REF_232(F3Ddatasets.Player) -> plyr_[_pID]
REF_233(uint256) -> REF_232.win
REF_234(F3Ddatasets.Player) -> plyr_[_pID]
REF_235(uint256) -> REF_234.gen
REF_237(F3Ddatasets.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.lrnd
TMP_144(uint256) = INTERNAL_CALL, FoMo3DLightning.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_238)
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_235', 'TMP_144'] 
REF_239(F3Ddatasets.Player) -> plyr_[_pID]
REF_240(uint256) -> REF_239.aff
REF_241(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_242(F3Ddatasets.PlayerRounds) -> REF_241[_rID]
REF_243(uint256) -> REF_242.eth
RETURN _pID,REF_228,REF_231,REF_233,TMP_145,REF_240,REF_243"];
}
// Function: 3719.sol-FoMo3DLightning-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_136(F3Ddatasets.Round) -> round_[_rID]
REF_137(uint256) -> REF_136.end
TMP_113(bool) = now > REF_137
REF_138(F3Ddatasets.Round) -> round_[_rID]
REF_139(bool) -> REF_138.ended
TMP_114(bool) = REF_139 == False
TMP_115(bool) = TMP_113 && TMP_114
REF_140(F3Ddatasets.Round) -> round_[_rID]
REF_141(uint256) -> REF_140.plyr
TMP_116(bool) = REF_141 != 0
TMP_117(bool) = TMP_115 && TMP_116
CONDITION TMP_117"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_142(F3Ddatasets.Round) -> round_[_rID]
REF_143(uint256) -> REF_142.plyr
TMP_118(bool) = REF_143 == _pID
CONDITION TMP_118"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_144(F3Ddatasets.Player) -> plyr_[_pID]
REF_145(uint256) -> REF_144.win
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.pot
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_148', '48'] 
TMP_120(uint256) = TMP_119 / 100
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_145', 'TMP_120'] 
REF_150(F3Ddatasets.Player) -> plyr_[_pID]
REF_151(uint256) -> REF_150.gen
TMP_122(uint256) = INTERNAL_CALL, FoMo3DLightning.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_154(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_155(F3Ddatasets.PlayerRounds) -> REF_154[_rID]
REF_156(uint256) -> REF_155.mask
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_122', 'REF_156'] 
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_151', 'TMP_123'] 
REF_157(F3Ddatasets.Player) -> plyr_[_pID]
REF_158(uint256) -> REF_157.aff
RETURN TMP_121,TMP_124,REF_158"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_159(F3Ddatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.win
REF_161(F3Ddatasets.Player) -> plyr_[_pID]
REF_162(uint256) -> REF_161.gen
TMP_125(uint256) = INTERNAL_CALL, FoMo3DLightning.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_165(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_166(F3Ddatasets.PlayerRounds) -> REF_165[_rID]
REF_167(uint256) -> REF_166.mask
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_125', 'REF_167'] 
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_162', 'TMP_126'] 
REF_168(F3Ddatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.aff
RETURN REF_160,TMP_127,REF_169"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_170(F3Ddatasets.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.win
REF_172(F3Ddatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.gen
REF_175(F3Ddatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.lrnd
TMP_128(uint256) = INTERNAL_CALL, FoMo3DLightning.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_176)
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_173', 'TMP_128'] 
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(uint256) -> REF_177.aff
RETURN REF_171,TMP_129,REF_178"];
}
// Function: 3719.sol-FoMo3DLightning-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_179(F3Ddatasets.Round) -> round_[_rID]
REF_180(uint256) -> REF_179.mask
REF_182(F3Ddatasets.Round) -> round_[_rID]
REF_183(uint256) -> REF_182.pot
REF_185(F3Ddatasets.Round) -> round_[_rID]
REF_186(uint256) -> REF_185.team
REF_187(F3Ddatasets.PotSplit) -> potSplit_[REF_186]
REF_188(uint256) -> REF_187.gen
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_183', 'REF_188'] 
TMP_131(uint256) = TMP_130 / 100
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_131', '1000000000000000000'] 
REF_190(F3Ddatasets.Round) -> round_[_rID]
REF_191(uint256) -> REF_190.keys
TMP_133(uint256) = TMP_132 / REF_191
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_180', 'TMP_133'] 
REF_193(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_194(F3Ddatasets.PlayerRounds) -> REF_193[_rID]
REF_195(uint256) -> REF_194.keys
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_134', 'REF_195'] 
TMP_136(uint256) = TMP_135 / 1000000000000000000
RETURN TMP_136"];
}
// Function: 3719.sol-FoMo3DLightning-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_126(F3Ddatasets.Round) -> round_[_rID]
REF_127(uint256) -> REF_126.end
TMP_107(bool) = _now < REF_127
CONDITION TMP_107"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_128(F3Ddatasets.Round) -> round_[_rID]
REF_129(uint256) -> REF_128.strt
TMP_108(uint256) = REF_129 + rndGap_
TMP_109(bool) = _now > TMP_108
CONDITION TMP_109"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_130(F3Ddatasets.Round) -> round_[_rID]
REF_131(uint256) -> REF_130.end
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_131', '_now'] 
RETURN TMP_110"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.strt
TMP_111(uint256) = REF_134 + rndGap_
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_111', '_now'] 
RETURN TMP_112"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 3719.sol-FoMo3DLightning-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_421(F3Ddatasets.Round) -> round_[_rID]
REF_422(uint256) -> REF_421.strt
TMP_246(uint256) = REF_422 + rndGap_
TMP_247(bool) = _now > TMP_246
REF_423(F3Ddatasets.Round) -> round_[_rID]
REF_424(uint256) -> REF_423.end
TMP_248(bool) = _now <= REF_424
REF_425(F3Ddatasets.Round) -> round_[_rID]
REF_426(uint256) -> REF_425.end
TMP_249(bool) = _now > REF_426
REF_427(F3Ddatasets.Round) -> round_[_rID]
REF_428(uint256) -> REF_427.plyr
TMP_250(bool) = REF_428 == 0
TMP_251(bool) = TMP_249 && TMP_250
TMP_252(bool) = TMP_248 || TMP_251
TMP_253(bool) = TMP_247 && TMP_252
CONDITION TMP_253"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_429(F3Ddatasets.Round) -> round_[_rID]
REF_430(uint256) -> REF_429.keys
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_430', '_keys'] 
TMP_255(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_254', '_keys'] 
RETURN TMP_255"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_256"];
}
// Function: 3719.sol-FoMo3DLightning-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_410(bool) = activated_ == True
TMP_411(None) = SOLIDITY_CALL require(bool,string)(TMP_410,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3719.sol-FoMo3DLightning-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_412(bool) = _codeLength == 0
TMP_413(None) = SOLIDITY_CALL require(bool,string)(TMP_412,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 3719.sol-FoMo3DLightning-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_414(bool) = _eth >= 1000000000
TMP_415(None) = SOLIDITY_CALL require(bool,string)(TMP_414,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_416(bool) = _eth <= 100000000000000000000000
TMP_417(None) = SOLIDITY_CALL require(bool,string)(TMP_416,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 3719.sol-FoMo3DLightning-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_434(F3Ddatasets.Player) -> plyr_[_pID]
REF_435(uint256) -> REF_434.lrnd
TMP_260(bool) = REF_435 != 0
CONDITION TMP_260"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_436(F3Ddatasets.Player) -> plyr_[_pID]
REF_437(uint256) -> REF_436.lrnd
INTERNAL_CALL, FoMo3DLightning.updateGenVault(uint256,uint256)(_pID,REF_437)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_438(F3Ddatasets.Player) -> plyr_[_pID]
REF_439(uint256) -> REF_438.lrnd
REF_439(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_440(uint256) -> _eventData_.compressedData
REF_441(uint256) -> _eventData_.compressedData
TMP_262(uint256) = REF_441 + 10
REF_440(uint256) (->_eventData_) := TMP_262(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 3719.sol-FoMo3DLightning-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_358(uint256) = rID_ + 1
_rID(uint256) := TMP_358(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_573(F3Ddatasets.Round) -> round_[_rID]
REF_574(uint256) -> REF_573.pot
REF_575(F3Ddatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.pot
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_576', 'msg.value'] 
REF_574(uint256) (->round_) := TMP_359(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 3719.sol-FoMo3DLightning-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_278(F3Ddatasets.Round) -> round_[_rID]
REF_279(uint256) -> REF_278.strt
TMP_164(uint256) = REF_279 + rndGap_
TMP_165(bool) = _now > TMP_164
REF_280(F3Ddatasets.Round) -> round_[_rID]
REF_281(uint256) -> REF_280.end
TMP_166(bool) = _now <= REF_281
REF_282(F3Ddatasets.Round) -> round_[_rID]
REF_283(uint256) -> REF_282.end
TMP_167(bool) = _now > REF_283
REF_284(F3Ddatasets.Round) -> round_[_rID]
REF_285(uint256) -> REF_284.plyr
TMP_168(bool) = REF_285 == 0
TMP_169(bool) = TMP_167 && TMP_168
TMP_170(bool) = TMP_166 || TMP_169
TMP_171(bool) = TMP_165 && TMP_170
CONDITION TMP_171"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_286(F3Ddatasets.Player) -> plyr_[_pID]
REF_287(uint256) -> REF_286.gen
TMP_172(uint256) = INTERNAL_CALL, FoMo3DLightning.withdrawEarnings(uint256)(_pID)
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_172', '_eth'] 
REF_287(uint256) (->plyr_) := TMP_173(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_289(F3Ddatasets.Round) -> round_[_rID]
REF_290(uint256) -> REF_289.end
TMP_175(bool) = _now > REF_290
REF_291(F3Ddatasets.Round) -> round_[_rID]
REF_292(bool) -> REF_291.ended
TMP_176(bool) = REF_292 == False
TMP_177(bool) = TMP_175 && TMP_176
CONDITION TMP_177"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_293(F3Ddatasets.Round) -> round_[_rID]
REF_294(bool) -> REF_293.ended
REF_294(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_178(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DLightning.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_178(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_295(uint256) -> _eventData_.compressedData
REF_296(uint256) -> _eventData_.compressedData
TMP_179(uint256) = _now * 1000000000000000000
TMP_180(uint256) = REF_296 + TMP_179
REF_295(uint256) (->_eventData_) := TMP_180(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_297(uint256) -> _eventData_.compressedIDs
REF_298(uint256) -> _eventData_.compressedIDs
TMP_181(uint256) = REF_298 + _pID
REF_297(uint256) (->_eventData_) := TMP_181(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_300(F3Ddatasets.Player) -> plyr_[_pID]
REF_301(bytes32) -> REF_300.name
REF_302(uint256) -> _eventData_.compressedData
REF_303(uint256) -> _eventData_.compressedIDs
REF_304(address) -> _eventData_.winnerAddr
REF_305(bytes32) -> _eventData_.winnerName
REF_306(uint256) -> _eventData_.amountWon
REF_307(uint256) -> _eventData_.newPot
REF_308(uint256) -> _eventData_.P3DAmount
REF_309(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_301,REF_302,REF_303,REF_304,REF_305,REF_306,REF_307,REF_308,REF_309)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 3719.sol-FoMo3DLightning-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_63(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_63(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_59 = CONVERT 0 to address
TMP_60(bool) = _affCode == TMP_59
TMP_61(bool) = _affCode == msg.sender
TMP_62(bool) = TMP_60 || TMP_61
CONDITION TMP_62"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_64(F3Ddatasets.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.laff
_affID(uint256) := REF_65(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_66(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_66(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
TMP_63(bool) = _affID != REF_68
CONDITION TMP_63"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_69(F3Ddatasets.Player) -> plyr_[_pID]
REF_70(uint256) -> REF_69.laff
REF_70(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_64(uint256) = INTERNAL_CALL, FoMo3DLightning.verifyTeam(uint256)(_team)
_team(uint256) := TMP_64(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DLightning.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3719.sol-FoMo3DLightning-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_56(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_56(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_50(bool) = _affCode == 0
TMP_51(bool) = _affCode == _pID
TMP_52(bool) = TMP_50 || TMP_51
CONDITION TMP_52"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
_affCode(uint256) := REF_58(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_59(F3Ddatasets.Player) -> plyr_[_pID]
REF_60(uint256) -> REF_59.laff
TMP_53(bool) = _affCode != REF_60
CONDITION TMP_53"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
REF_62(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_54(uint256) = INTERNAL_CALL, FoMo3DLightning.verifyTeam(uint256)(_team)
_team(uint256) := TMP_54(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DLightning.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 3719.sol-FoMo3DLightning-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_71(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_71(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_69(bool) = _affCode == 
REF_72(F3Ddatasets.Player) -> plyr_[_pID]
REF_73(bytes32) -> REF_72.name
TMP_70(bool) = _affCode == REF_73
TMP_71(bool) = TMP_69 || TMP_70
CONDITION TMP_71"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
_affID(uint256) := REF_75(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_76(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_76(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_77(F3Ddatasets.Player) -> plyr_[_pID]
REF_78(uint256) -> REF_77.laff
TMP_72(bool) = _affID != REF_78
CONDITION TMP_72"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_79(F3Ddatasets.Player) -> plyr_[_pID]
REF_80(uint256) -> REF_79.laff
REF_80(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_73(uint256) = INTERNAL_CALL, FoMo3DLightning.verifyTeam(uint256)(_team)
_team(uint256) := TMP_73(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DLightning.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DLightning.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 3719.sol-FoMo3DLightning-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = FOMO Lightning

IRs:
name(string) := FOMO Lightning(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = F4D

IRs:
symbol(string) := F4D(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInit_ = 120

IRs:
rndInit_(uint256) := 120(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInc_ = 10

IRs:
rndInc_(uint256) := 10(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 300

IRs:
rndMax_(uint256) := 300(uint256)"];
}
// Function: 3719.sol-FoMo3DLightning-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
pID_ = 4

IRs:
pID_(uint256) := 4(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndExtra_ = 60

IRs:
rndExtra_(uint256) := 60(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndGap_ = 60

IRs:
rndGap_(uint256) := 60(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 3719.sol-FoMo3DLightning-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_300(uint256) = INTERNAL_CALL, FoMo3DLightning.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_300(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_301(bool) = _earnings > 0
CONDITION TMP_301"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_508(F3Ddatasets.Player) -> plyr_[_pID]
REF_509(uint256) -> REF_508.gen
REF_511(F3Ddatasets.Player) -> plyr_[_pID]
REF_512(uint256) -> REF_511.gen
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_512'] 
REF_509(uint256) (->plyr_) := TMP_302(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_513(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_514(F3Ddatasets.PlayerRounds) -> REF_513[_rIDlast]
REF_515(uint256) -> REF_514.mask
REF_517(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_518(F3Ddatasets.PlayerRounds) -> REF_517[_rIDlast]
REF_519(uint256) -> REF_518.mask
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_519'] 
REF_515(uint256) (->plyrRnds_) := TMP_303(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 3719.sol-FoMo3DLightning-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_602(F3Ddatasets.Round) -> round_[_rID]
REF_603(uint256) -> REF_602.keys
TMP_379(uint256) = TMP_378 / REF_603
_ppt(uint256) := TMP_379(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_604(F3Ddatasets.Round) -> round_[_rID]
REF_605(uint256) -> REF_604.mask
REF_607(F3Ddatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.mask
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_608'] 
REF_605(uint256) (->round_) := TMP_380(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_382(uint256) = TMP_381 / 1000000000000000000
_pearn(uint256) := TMP_382(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_610(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_611(F3Ddatasets.PlayerRounds) -> REF_610[_rID]
REF_612(uint256) -> REF_611.mask
REF_613(F3Ddatasets.Round) -> round_[_rID]
REF_614(uint256) -> REF_613.mask
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_614', '_keys'] 
TMP_384(uint256) = TMP_383 / 1000000000000000000
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_384', '_pearn'] 
REF_618(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_619(F3Ddatasets.PlayerRounds) -> REF_618[_rID]
REF_620(uint256) -> REF_619.mask
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_385', 'REF_620'] 
REF_612(uint256) (->plyrRnds_) := TMP_386(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_623(F3Ddatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.keys
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_624'] 
TMP_388(uint256) = TMP_387 / 1000000000000000000
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_388'] 
RETURN TMP_389"];
}
// Function: 3719.sol-FoMo3DLightning-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_520(F3Ddatasets.Round) -> round_[_rID]
REF_521(uint256) -> REF_520.end
TMP_304(bool) = _now > REF_521
REF_522(F3Ddatasets.Round) -> round_[_rID]
REF_523(uint256) -> REF_522.plyr
TMP_305(bool) = REF_523 == 0
TMP_306(bool) = TMP_304 && TMP_305
CONDITION TMP_306"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_307(uint256) = _keys / 1000000000000000000
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_307', 'rndInc_'] 
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_308', '_now'] 
_newTime(uint256) := TMP_309(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_310(uint256) = _keys / 1000000000000000000
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_310', 'rndInc_'] 
REF_528(F3Ddatasets.Round) -> round_[_rID]
REF_529(uint256) -> REF_528.end
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_311', 'REF_529'] 
_newTime(uint256) := TMP_312(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_314(bool) = _newTime < TMP_313
CONDITION TMP_314"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_531(F3Ddatasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.end
REF_532(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_533(F3Ddatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.end
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_534(uint256) (->round_) := TMP_315(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 3719.sol-FoMo3DLightning-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_257(bool) = _team < 0
TMP_258(bool) = _team > 3
TMP_259(bool) = TMP_257 || TMP_258
CONDITION TMP_259"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 3719.sol-FoMo3DLightning-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_81(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_81(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_82(F3Ddatasets.Round) -> round_[_rID]
REF_83(uint256) -> REF_82.end
TMP_78(bool) = _now > REF_83
REF_84(F3Ddatasets.Round) -> round_[_rID]
REF_85(bool) -> REF_84.ended
TMP_79(bool) = REF_85 == False
TMP_80(bool) = TMP_78 && TMP_79
REF_86(F3Ddatasets.Round) -> round_[_rID]
REF_87(uint256) -> REF_86.plyr
TMP_81(bool) = REF_87 != 0
TMP_82(bool) = TMP_80 && TMP_81
CONDITION TMP_82"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_88(F3Ddatasets.Round) -> round_[_rID]
REF_89(bool) -> REF_88.ended
REF_89(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_83(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DLightning.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_83(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_84(uint256) = INTERNAL_CALL, FoMo3DLightning.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_84(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_85(bool) = _eth > 0
CONDITION TMP_85"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_90(F3Ddatasets.Player) -> plyr_[_pID]
REF_91(address) -> REF_90.addr
Transfer dest:REF_91 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_93(uint256) -> _eventData_.compressedData
REF_94(uint256) -> _eventData_.compressedData
TMP_87(uint256) = _now * 1000000000000000000
TMP_88(uint256) = REF_94 + TMP_87
REF_93(uint256) (->_eventData_) := TMP_88(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_95(uint256) -> _eventData_.compressedIDs
REF_96(uint256) -> _eventData_.compressedIDs
TMP_89(uint256) = REF_96 + _pID
REF_95(uint256) (->_eventData_) := TMP_89(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_98(F3Ddatasets.Player) -> plyr_[_pID]
REF_99(bytes32) -> REF_98.name
REF_100(uint256) -> _eventData_.compressedData
REF_101(uint256) -> _eventData_.compressedIDs
REF_102(address) -> _eventData_.winnerAddr
REF_103(bytes32) -> _eventData_.winnerName
REF_104(uint256) -> _eventData_.amountWon
REF_105(uint256) -> _eventData_.newPot
REF_106(uint256) -> _eventData_.P3DAmount
REF_107(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_99,_eth,REF_100,REF_101,REF_102,REF_103,REF_104,REF_105,REF_106,REF_107)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_91(uint256) = INTERNAL_CALL, FoMo3DLightning.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_91(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_92(bool) = _eth > 0
CONDITION TMP_92"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_108(F3Ddatasets.Player) -> plyr_[_pID]
REF_109(address) -> REF_108.addr
Transfer dest:REF_109 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_112(F3Ddatasets.Player) -> plyr_[_pID]
REF_113(bytes32) -> REF_112.name
Emit onWithdraw(_pID,msg.sender,REF_113,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DLightning.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DLightning.isHuman()()"];
23->1;
}
// Function: 3719.sol-FoMo3DLightning-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_625(F3Ddatasets.Player) -> plyr_[_pID]
REF_626(uint256) -> REF_625.lrnd
INTERNAL_CALL, FoMo3DLightning.updateGenVault(uint256,uint256)(_pID,REF_626)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_627(F3Ddatasets.Player) -> plyr_[_pID]
REF_628(uint256) -> REF_627.win
REF_630(F3Ddatasets.Player) -> plyr_[_pID]
REF_631(uint256) -> REF_630.gen
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_628', 'REF_631'] 
REF_633(F3Ddatasets.Player) -> plyr_[_pID]
REF_634(uint256) -> REF_633.aff
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_391', 'REF_634'] 
_earnings(uint256) := TMP_392(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_393(bool) = _earnings > 0
CONDITION TMP_393"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_635(F3Ddatasets.Player) -> plyr_[_pID]
REF_636(uint256) -> REF_635.win
REF_636(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_637(F3Ddatasets.Player) -> plyr_[_pID]
REF_638(uint256) -> REF_637.gen
REF_638(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_639(F3Ddatasets.Player) -> plyr_[_pID]
REF_640(uint256) -> REF_639.aff
REF_640(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 3719.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_440 = CONVERT _input to bytes
_temp(bytes) := TMP_440(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_676 -> LENGTH _temp
_length(uint256) := REF_676(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_441(bool) = _length <= 32
TMP_442(bool) = _length > 0
TMP_443(bool) = TMP_441 && TMP_442
TMP_444(None) = SOLIDITY_CALL require(bool,string)(TMP_443,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_677(None) -> _temp[0]
TMP_445(bool) = REF_677 != 32
TMP_446(uint256) = _length - 1
REF_678(None) -> _temp[TMP_446]
TMP_447(bool) = REF_678 != 32
TMP_448(bool) = TMP_445 && TMP_447
TMP_449(None) = SOLIDITY_CALL require(bool,string)(TMP_448,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_679(None) -> _temp[0]
TMP_450(bool) = REF_679 == 48
CONDITION TMP_450"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_680(None) -> _temp[1]
TMP_451(bool) = REF_680 != 120
TMP_452(None) = SOLIDITY_CALL require(bool,string)(TMP_451,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_681(None) -> _temp[1]
TMP_453(bool) = REF_681 != 88
TMP_454(None) = SOLIDITY_CALL require(bool,string)(TMP_453,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_455(bool) = i < _length
CONDITION TMP_455"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_682(None) -> _temp[i]
TMP_456(bool) = REF_682 > 64
REF_683(None) -> _temp[i]
TMP_457(bool) = REF_683 < 91
TMP_458(bool) = TMP_456 && TMP_457
CONDITION TMP_458"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_684(bytes1) -> _temp[i]
REF_685(None) -> _temp[i]
TMP_459 = CONVERT REF_685 to uint256
TMP_460(uint256) = TMP_459 + 32
TMP_461 = CONVERT TMP_460 to bytes1
REF_684(bytes1) (->_temp) := TMP_461(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_462(bool) = _hasNonNumber == False
CONDITION TMP_462"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_686(None) -> _temp[i]
TMP_463(bool) = REF_686 == 32
REF_687(None) -> _temp[i]
TMP_464(bool) = REF_687 > 96
REF_688(None) -> _temp[i]
TMP_465(bool) = REF_688 < 123
TMP_466(bool) = TMP_464 && TMP_465
TMP_467(bool) = TMP_463 || TMP_466
REF_689(None) -> _temp[i]
TMP_468(bool) = REF_689 > 47
REF_690(None) -> _temp[i]
TMP_469(bool) = REF_690 < 58
TMP_470(bool) = TMP_468 && TMP_469
TMP_471(bool) = TMP_467 || TMP_470
TMP_472(None) = SOLIDITY_CALL require(bool,string)(TMP_471,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_691(None) -> _temp[i]
TMP_473(bool) = REF_691 == 32
CONDITION TMP_473"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_474(uint256) = i + 1
REF_692(None) -> _temp[TMP_474]
TMP_475(bool) = REF_692 != 32
TMP_476(None) = SOLIDITY_CALL require(bool,string)(TMP_475,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_477(bool) = _hasNonNumber == False
REF_693(None) -> _temp[i]
TMP_478(bool) = REF_693 < 48
REF_694(None) -> _temp[i]
TMP_479(bool) = REF_694 > 57
TMP_480(bool) = TMP_478 || TMP_479
TMP_481(bool) = TMP_477 && TMP_480
CONDITION TMP_481"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_482(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_483(bool) = _hasNonNumber == True
TMP_484(None) = SOLIDITY_CALL require(bool,string)(TMP_483,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 3719.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 3719.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 3719.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 3719.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 3719.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 3719.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 3719.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 3719.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 3719.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_493(uint256) = a + b
c(uint256) := TMP_493(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_494(bool) = c >= a
TMP_495(None) = SOLIDITY_CALL require(bool,string)(TMP_494,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3719.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_485(bool) = a == 0
CONDITION TMP_485"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_486(uint256) = a * b
c(uint256) := TMP_486(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_487(uint256) = c / a
TMP_488(bool) = TMP_487 == b
TMP_489(None) = SOLIDITY_CALL require(bool,string)(TMP_488,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3719.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_503(bool) = x == 0
CONDITION TMP_503"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_504(bool) = y == 0
CONDITION TMP_504"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_505(bool) = i < y
CONDITION TMP_505"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_506(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_506(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_507(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 3719.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_502(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_502"];
}
// Function: 3719.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_496(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_497(uint256) = TMP_496 / 2
z(uint256) := TMP_497(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_498(bool) = z < y
CONDITION TMP_498"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_499(uint256) = x / z
TMP_500(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_499,z)
TMP_501(uint256) = TMP_500 / 2
z(uint256) := TMP_501(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 3719.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_490(bool) = b <= a
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_492(uint256) = a - b
RETURN TMP_492"];
}
}
