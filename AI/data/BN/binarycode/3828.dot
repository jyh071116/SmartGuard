digraph G {
// Function: 3828.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 3828.sol-ECRecovery-recover(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_0 -> LENGTH sig
TMP_0(bool) = REF_0 != 65
CONDITION TMP_0"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(address(0))

IRs:
TMP_1 = CONVERT 0 to address
RETURN TMP_1"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_2(bool) = v < 27
CONDITION TMP_2"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_3(bool) = v != 27
TMP_4(bool) = v != 28
TMP_5(bool) = TMP_3 && TMP_4
CONDITION TMP_5"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(address(0))

IRs:
TMP_6 = CONVERT 0 to address
RETURN TMP_6"];
14[label="Node Type: RETURN 14

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

IRs:
TMP_7(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TMP_7"];
}
// Function: 3828.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 3828.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 3828.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 3828.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 3828.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 3828.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 3828.sol-ERC918Interface-balanceOf(address)
digraph{
}
// Function: 3828.sol-ERC918Interface-getMiningDifficulty()
digraph{
}
// Function: 3828.sol-ERC918Interface-getMiningReward()
digraph{
}
// Function: 3828.sol-ERC918Interface-getMiningTarget()
digraph{
}
// Function: 3828.sol-ERC918Interface-mint(uint256,bytes32)
digraph{
}
// Function: 3828.sol-ERC918Interface-totalSupply()
digraph{
}
// Function: 3828.sol-LavaWallet-LavaWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
relayKingContract = relayKingContractAddress

IRs:
relayKingContract(address) := relayKingContractAddress(address)"];
}
// Function: 3828.sol-LavaWallet-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3828.sol-LavaWallet-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_28(bool) = msg.sender == newOwner
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_31 = CONVERT 0 to address
newOwner(address) := TMP_31(address)"];
}
// Function: 3828.sol-LavaWallet-approveAndCall(bytes,address,address,address,uint256,uint256,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sigHash = getLavaTypedDataHash(methodname,from,to,token,tokens,relayerReward,expires,nonce)

IRs:
TMP_111(bytes32) = INTERNAL_CALL, LavaWallet.getLavaTypedDataHash(bytes,address,address,address,uint256,uint256,uint256,uint256)(methodname,from,to,token,tokens,relayerReward,expires,nonce)
sigHash(bytes32) := TMP_111(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! tokenApprovalWithSignature(from,to,token,tokens,relayerReward,expires,sigHash,signature)

IRs:
TMP_112(bool) = INTERNAL_CALL, LavaWallet.tokenApprovalWithSignature(address,address,address,uint256,uint256,uint256,bytes32,bytes)(from,to,token,tokens,relayerReward,expires,sigHash,signature)
TMP_113 = UnaryType.BANG TMP_112 
CONDITION TMP_113"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_114(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ApproveAndCallFallBack(to).receiveApproval(from,tokens,token,methodname)

IRs:
TMP_115 = CONVERT to to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_115(ApproveAndCallFallBack), function:receiveApproval, arguments:['from', 'tokens', 'token', 'methodname']  "];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-approveTokens(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[token][msg.sender][spender] = tokens

IRs:
REF_43(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_44(mapping(address => uint256)) -> REF_43[msg.sender]
REF_45(uint256) -> REF_44[spender]
REF_45(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,token,spender,tokens)

IRs:
Emit Approval(msg.sender,token,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-approveTokensWithSignature(address,address,address,uint256,uint256,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sigHash = getLavaTypedDataHash(approve,from,to,token,tokens,relayerReward,expires,nonce)

IRs:
TMP_84(bytes32) = INTERNAL_CALL, LavaWallet.getLavaTypedDataHash(bytes,address,address,address,uint256,uint256,uint256,uint256)(approve,from,to,token,tokens,relayerReward,expires,nonce)
sigHash(bytes32) := TMP_84(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! tokenApprovalWithSignature(from,to,token,tokens,relayerReward,expires,sigHash,signature)

IRs:
TMP_85(bool) = INTERNAL_CALL, LavaWallet.tokenApprovalWithSignature(address,address,address,uint256,uint256,uint256,bytes32,bytes)(from,to,token,tokens,relayerReward,expires,sigHash,signature)
TMP_86 = UnaryType.BANG TMP_85 
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_87(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-balanceOf(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[token][user]

IRs:
REF_41(mapping(address => uint256)) -> balances[token]
REF_42(uint256) -> REF_41[user]
RETURN REF_42"];
}
// Function: 3828.sol-LavaWallet-burnSignature(bytes,address,address,address,uint256,uint256,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sigHash = getLavaTypedDataHash(methodname,from,to,token,tokens,relayerReward,expires,nonce)

IRs:
TMP_102(bytes32) = INTERNAL_CALL, LavaWallet.getLavaTypedDataHash(bytes,address,address,address,uint256,uint256,uint256,uint256)(methodname,from,to,token,tokens,relayerReward,expires,nonce)
sigHash(bytes32) := TMP_102(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
recoveredSignatureSigner = ECRecovery.recover(sigHash,signature)

IRs:
TMP_103(address) = LIBRARY_CALL, dest:ECRecovery, function:ECRecovery.recover(bytes32,bytes), arguments:['sigHash', 'signature'] 
recoveredSignatureSigner(address) := TMP_103(address)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
recoveredSignatureSigner != from

IRs:
TMP_104(bool) = recoveredSignatureSigner != from
CONDITION TMP_104"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_105(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
from != msg.sender

IRs:
TMP_106(bool) = from != msg.sender
CONDITION TMP_106"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert()()

IRs:
TMP_107(None) = SOLIDITY_CALL revert()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
burnedSignature = burnedSignatures[sigHash]

IRs:
REF_86(uint256) -> burnedSignatures[sigHash]
burnedSignature(uint256) := REF_86(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
burnedSignatures[sigHash] = 0x2

IRs:
REF_87(uint256) -> burnedSignatures[sigHash]
REF_87(uint256) (->burnedSignatures) := 2(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
burnedSignature != 0x0

IRs:
TMP_108(bool) = burnedSignature != 0
CONDITION TMP_108"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
revert()()

IRs:
TMP_109(None) = SOLIDITY_CALL revert()()"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: RETURN 15

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-depositTokens(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! ERC20Interface(token).transferFrom(from,this,tokens)

IRs:
TMP_33 = CONVERT token to ERC20Interface
TMP_34(bool) = HIGH_LEVEL_CALL, dest:TMP_33(ERC20Interface), function:transferFrom, arguments:['from', 'this', 'tokens']  
TMP_35 = UnaryType.BANG TMP_34 
CONDITION TMP_35"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_36(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[token][from] = balances[token][from].add(tokens)

IRs:
REF_2(mapping(address => uint256)) -> balances[token]
REF_3(uint256) -> REF_2[from]
REF_4(mapping(address => uint256)) -> balances[token]
REF_5(uint256) -> REF_4[from]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', 'tokens'] 
REF_3(uint256) (->balances) := TMP_37(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
depositedTokens[token] = depositedTokens[token].add(tokens)

IRs:
REF_7(uint256) -> depositedTokens[token]
REF_8(uint256) -> depositedTokens[token]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', 'tokens'] 
REF_7(uint256) (->depositedTokens) := TMP_38(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Deposit(token,from,tokens,balances[token][from])

IRs:
REF_10(mapping(address => uint256)) -> balances[token]
REF_11(uint256) -> REF_10[from]
Emit Deposit(token,from,tokens,REF_11)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_32(None) = SOLIDITY_CALL revert()()"];
}
// Function: 3828.sol-LavaWallet-getLavaTypedDataHash(bytes,address,address,address,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
hardcodedSchemaHash = 0x8fd4f9177556bbc74d0710c8bdda543afd18cc84d92d64b5620d5f1881dceb37

IRs:
hardcodedSchemaHash(bytes32) := 65057028092416453431754630308439859189280665794347572595342490904641922722615(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
typedDataHash = sha3()(hardcodedSchemaHash,sha3()(methodname,from,to,this,token,tokens,relayerReward,expires,nonce))

IRs:
TMP_63(bytes32) = SOLIDITY_CALL sha3()(methodname,from,to,this,token,tokens,relayerReward,expires,nonce)
TMP_64(bytes32) = SOLIDITY_CALL sha3()(hardcodedSchemaHash,TMP_63)
typedDataHash(bytes32) := TMP_64(bytes32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
typedDataHash

IRs:
RETURN typedDataHash"];
}
// Function: 3828.sol-LavaWallet-getRelayingKing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
MiningKingInterface(relayKingContract).getKing()

IRs:
TMP_117 = CONVERT relayKingContract to MiningKingInterface
TMP_118(address) = HIGH_LEVEL_CALL, dest:TMP_117(MiningKingInterface), function:getKing, arguments:[]  
RETURN TMP_118"];
}
// Function: 3828.sol-LavaWallet-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_129(bool) = msg.sender == owner
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3828.sol-LavaWallet-receiveApproval(address,uint256,address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
depositTokens(from,token,tokens)

IRs:
TMP_110(bool) = INTERNAL_CALL, LavaWallet.depositTokens(address,address,uint256)(from,token,tokens)
RETURN TMP_110"];
2[label="Node Type: RETURN 2

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-signatureBurnStatus(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(burnedSignatures[digest])

IRs:
REF_88(uint256) -> burnedSignatures[digest]
RETURN REF_88"];
}
// Function: 3828.sol-LavaWallet-tokenAllowance(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[token][tokenOwner][spender]

IRs:
REF_82(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_83(mapping(address => uint256)) -> REF_82[tokenOwner]
REF_84(uint256) -> REF_83[spender]
RETURN REF_84"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 3828.sol-LavaWallet-tokenApprovalWithSignature(address,address,address,uint256,uint256,uint256,bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
recoveredSignatureSigner = ECRecovery.recover(sigHash,signature)

IRs:
TMP_65(address) = LIBRARY_CALL, dest:ECRecovery, function:ECRecovery.recover(bytes32,bytes), arguments:['sigHash', 'signature'] 
recoveredSignatureSigner(address) := TMP_65(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(from == recoveredSignatureSigner)

IRs:
TMP_66(bool) = from == recoveredSignatureSigner
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == getRelayingKing() || msg.sender == from || msg.sender == to)

IRs:
TMP_68(address) = INTERNAL_CALL, LavaWallet.getRelayingKing()()
TMP_69(bool) = msg.sender == TMP_68
TMP_70(bool) = msg.sender == from
TMP_71(bool) = TMP_69 || TMP_70
TMP_72(bool) = msg.sender == to
TMP_73(bool) = TMP_71 || TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(block.number < expires)

IRs:
TMP_75(bool) = block.number < expires
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
burnedSignature = burnedSignatures[sigHash]

IRs:
REF_74(uint256) -> burnedSignatures[sigHash]
burnedSignature(uint256) := REF_74(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
burnedSignatures[sigHash] = 0x1

IRs:
REF_75(uint256) -> burnedSignatures[sigHash]
REF_75(uint256) (->burnedSignatures) := 1(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
burnedSignature != 0x0

IRs:
TMP_77(bool) = burnedSignature != 0
CONDITION TMP_77"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_78(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
allowed[token][from][msg.sender] = relayerReward

IRs:
REF_76(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_77(mapping(address => uint256)) -> REF_76[from]
REF_78(uint256) -> REF_77[msg.sender]
REF_78(uint256) (->allowed) := relayerReward(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Approval(from,token,msg.sender,relayerReward)

IRs:
Emit Approval(from,token,msg.sender,relayerReward)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
! transferTokensFrom(from,msg.sender,token,relayerReward)

IRs:
TMP_80(bool) = INTERNAL_CALL, LavaWallet.transferTokensFrom(address,address,address,uint256)(from,msg.sender,token,relayerReward)
TMP_81 = UnaryType.BANG TMP_80 
CONDITION TMP_81"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert()()

IRs:
TMP_82(None) = SOLIDITY_CALL revert()()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
allowed[token][from][to] = tokens

IRs:
REF_79(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_80(mapping(address => uint256)) -> REF_79[from]
REF_81(uint256) -> REF_80[to]
REF_81(uint256) (->allowed) := tokens(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Approval(from,token,to,tokens)

IRs:
Emit Approval(from,token,to,tokens)"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
true

IRs:
RETURN True"];
18[label="Node Type: RETURN 18

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenBalance = ERC20Interface(tokenAddress).balanceOf(this)

IRs:
TMP_119 = CONVERT tokenAddress to ERC20Interface
TMP_120(uint256) = HIGH_LEVEL_CALL, dest:TMP_119(ERC20Interface), function:balanceOf, arguments:['this']  
tokenBalance(uint256) := TMP_120(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
undepositedTokens = tokenBalance.sub(depositedTokens[tokenAddress])

IRs:
REF_93(uint256) -> depositedTokens[tokenAddress]
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenBalance', 'REF_93'] 
undepositedTokens(uint256) := TMP_121(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(tokens <= undepositedTokens)

IRs:
TMP_122(bool) = tokens <= undepositedTokens
TMP_123(None) = SOLIDITY_CALL assert(bool)(TMP_122)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_124 = CONVERT tokenAddress to ERC20Interface
TMP_125(bool) = HIGH_LEVEL_CALL, dest:TMP_124(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
TMP_126 = UnaryType.BANG TMP_125 
CONDITION TMP_126"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_127(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 3828.sol-LavaWallet-transferTokens(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[token][msg.sender] = balances[token][msg.sender].sub(tokens)

IRs:
REF_46(mapping(address => uint256)) -> balances[token]
REF_47(uint256) -> REF_46[msg.sender]
REF_48(mapping(address => uint256)) -> balances[token]
REF_49(uint256) -> REF_48[msg.sender]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_49', 'tokens'] 
REF_47(uint256) (->balances) := TMP_56(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[token][to] = balances[token][to].add(tokens)

IRs:
REF_51(mapping(address => uint256)) -> balances[token]
REF_52(uint256) -> REF_51[to]
REF_53(mapping(address => uint256)) -> balances[token]
REF_54(uint256) -> REF_53[to]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_54', 'tokens'] 
REF_52(uint256) (->balances) := TMP_57(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,token,to,tokens)

IRs:
Emit Transfer(msg.sender,token,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-transferTokensFrom(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[token][from] = balances[token][from].sub(tokens)

IRs:
REF_56(mapping(address => uint256)) -> balances[token]
REF_57(uint256) -> REF_56[from]
REF_58(mapping(address => uint256)) -> balances[token]
REF_59(uint256) -> REF_58[from]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', 'tokens'] 
REF_57(uint256) (->balances) := TMP_59(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[token][from][to] = allowed[token][from][to].sub(tokens)

IRs:
REF_61(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_62(mapping(address => uint256)) -> REF_61[from]
REF_63(uint256) -> REF_62[to]
REF_64(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_65(mapping(address => uint256)) -> REF_64[from]
REF_66(uint256) -> REF_65[to]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_66', 'tokens'] 
REF_63(uint256) (->allowed) := TMP_60(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[token][to] = balances[token][to].add(tokens)

IRs:
REF_68(mapping(address => uint256)) -> balances[token]
REF_69(uint256) -> REF_68[to]
REF_70(mapping(address => uint256)) -> balances[token]
REF_71(uint256) -> REF_70[to]
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', 'tokens'] 
REF_69(uint256) (->balances) := TMP_61(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(token,from,to,tokens)

IRs:
Emit Transfer(token,from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-transferTokensFromWithSignature(address,address,address,uint256,uint256,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sigHash = getLavaTypedDataHash(transfer,from,to,token,tokens,relayerReward,expires,nonce)

IRs:
TMP_88(bytes32) = INTERNAL_CALL, LavaWallet.getLavaTypedDataHash(bytes,address,address,address,uint256,uint256,uint256,uint256)(transfer,from,to,token,tokens,relayerReward,expires,nonce)
sigHash(bytes32) := TMP_88(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! tokenApprovalWithSignature(from,to,token,tokens,relayerReward,expires,sigHash,signature)

IRs:
TMP_89(bool) = INTERNAL_CALL, LavaWallet.tokenApprovalWithSignature(address,address,address,uint256,uint256,uint256,bytes32,bytes)(from,to,token,tokens,relayerReward,expires,sigHash,signature)
TMP_90 = UnaryType.BANG TMP_89 
CONDITION TMP_90"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_91(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! transferTokensFrom(from,to,token,tokens)

IRs:
TMP_92(bool) = INTERNAL_CALL, LavaWallet.transferTokensFrom(address,address,address,uint256)(from,to,token,tokens)
TMP_93 = UnaryType.BANG TMP_92 
CONDITION TMP_93"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_94(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-withdrawTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[token][msg.sender] = balances[token][msg.sender].sub(tokens)

IRs:
REF_12(mapping(address => uint256)) -> balances[token]
REF_13(uint256) -> REF_12[msg.sender]
REF_14(mapping(address => uint256)) -> balances[token]
REF_15(uint256) -> REF_14[msg.sender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_15', 'tokens'] 
REF_13(uint256) (->balances) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
depositedTokens[token] = depositedTokens[token].sub(tokens)

IRs:
REF_17(uint256) -> depositedTokens[token]
REF_18(uint256) -> depositedTokens[token]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', 'tokens'] 
REF_17(uint256) (->depositedTokens) := TMP_41(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! ERC20Interface(token).transfer(msg.sender,tokens)

IRs:
TMP_42 = CONVERT token to ERC20Interface
TMP_43(bool) = HIGH_LEVEL_CALL, dest:TMP_42(ERC20Interface), function:transfer, arguments:['msg.sender', 'tokens']  
TMP_44 = UnaryType.BANG TMP_43 
CONDITION TMP_44"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_45(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Withdraw(token,msg.sender,tokens,balances[token][msg.sender])

IRs:
REF_21(mapping(address => uint256)) -> balances[token]
REF_22(uint256) -> REF_21[msg.sender]
Emit Withdraw(token,msg.sender,tokens,REF_22)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-withdrawTokensFrom(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[token][from] = balances[token][from].sub(tokens)

IRs:
REF_23(mapping(address => uint256)) -> balances[token]
REF_24(uint256) -> REF_23[from]
REF_25(mapping(address => uint256)) -> balances[token]
REF_26(uint256) -> REF_25[from]
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_26', 'tokens'] 
REF_24(uint256) (->balances) := TMP_47(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
depositedTokens[token] = depositedTokens[token].sub(tokens)

IRs:
REF_28(uint256) -> depositedTokens[token]
REF_29(uint256) -> depositedTokens[token]
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_29', 'tokens'] 
REF_28(uint256) (->depositedTokens) := TMP_48(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[token][from][to] = allowed[token][from][to].sub(tokens)

IRs:
REF_31(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_32(mapping(address => uint256)) -> REF_31[from]
REF_33(uint256) -> REF_32[to]
REF_34(mapping(address => mapping(address => uint256))) -> allowed[token]
REF_35(mapping(address => uint256)) -> REF_34[from]
REF_36(uint256) -> REF_35[to]
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_36', 'tokens'] 
REF_33(uint256) (->allowed) := TMP_49(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! ERC20Interface(token).transfer(to,tokens)

IRs:
TMP_50 = CONVERT token to ERC20Interface
TMP_51(bool) = HIGH_LEVEL_CALL, dest:TMP_50(ERC20Interface), function:transfer, arguments:['to', 'tokens']  
TMP_52 = UnaryType.BANG TMP_51 
CONDITION TMP_52"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_53(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Withdraw(token,from,tokens,balances[token][from])

IRs:
REF_39(mapping(address => uint256)) -> balances[token]
REF_40(uint256) -> REF_39[from]
Emit Withdraw(token,from,tokens,REF_40)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-LavaWallet-withdrawTokensFromWithSignature(address,address,address,uint256,uint256,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sigHash = getLavaTypedDataHash(withdraw,from,to,token,tokens,relayerReward,expires,nonce)

IRs:
TMP_95(bytes32) = INTERNAL_CALL, LavaWallet.getLavaTypedDataHash(bytes,address,address,address,uint256,uint256,uint256,uint256)(withdraw,from,to,token,tokens,relayerReward,expires,nonce)
sigHash(bytes32) := TMP_95(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! tokenApprovalWithSignature(from,to,token,tokens,relayerReward,expires,sigHash,signature)

IRs:
TMP_96(bool) = INTERNAL_CALL, LavaWallet.tokenApprovalWithSignature(address,address,address,uint256,uint256,uint256,bytes32,bytes)(from,to,token,tokens,relayerReward,expires,sigHash,signature)
TMP_97 = UnaryType.BANG TMP_96 
CONDITION TMP_97"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_98(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! withdrawTokensFrom(from,to,token,tokens)

IRs:
TMP_99(bool) = INTERNAL_CALL, LavaWallet.withdrawTokensFrom(address,address,address,uint256)(from,to,token,tokens)
TMP_100 = UnaryType.BANG TMP_99 
CONDITION TMP_100"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_101(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3828.sol-MiningKingInterface-getKing()
digraph{
}
// Function: 3828.sol-MiningKingInterface-transferKing(address)
digraph{
}
// Function: 3828.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3828.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_21(bool) = msg.sender == newOwner
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_24 = CONVERT 0 to address
newOwner(address) := TMP_24(address)"];
}
// Function: 3828.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_25(bool) = msg.sender == owner
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3828.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 3828.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_18(bool) = c >= a
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3828.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_13(uint256) = a / b
c(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3828.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_8(bool) = a == 0
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_9(uint256) = a * b
c(uint256) := TMP_9(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_10(uint256) = c / a
TMP_11(bool) = TMP_10 == b
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3828.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
}
