digraph G {
// Function: 434.sol-BaseRabbit-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerCEO = msg.sender

IRs:
ownerCEO(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = msg.sender

IRs:
ownerServer(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerMoney = msg.sender

IRs:
ownerMoney(address) := msg.sender(address)"];
}
// Function: 434.sol-BaseRabbit-getOwnerMoney()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerMoney

IRs:
RETURN ownerMoney"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BaseRabbit-getOwnerServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerServer

IRs:
RETURN ownerServer"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BaseRabbit-getPrivAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
privAddress

IRs:
RETURN privAddress"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BaseRabbit-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerCEO)

IRs:
TMP_59(bool) = msg.sender == ownerCEO
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BaseRabbit-onlyServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerServer || msg.sender == ownerCEO)

IRs:
TMP_61(bool) = msg.sender == ownerServer
TMP_62(bool) = msg.sender == ownerCEO
TMP_63(bool) = TMP_61 || TMP_62
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BaseRabbit-setPromoGen0(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoGen0 = _promoGen0

IRs:
promoGen0(uint256) := _promoGen0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BaseRabbit-setPromoMoney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoMoney = _promoMoney

IRs:
promoMoney(uint256) := _promoMoney(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BaseRabbit-setPromoPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoPause = ! promoPause

IRs:
TMP_43 = UnaryType.BANG promoPause 
promoPause(bool) := TMP_43(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BaseRabbit-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
myAddr_test = 0x982a49414fD95e3268D3559540A67B03e40AcD64

IRs:
myAddr_test(address) := 868709609884926412840050907305519079164645920100(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
pauseSave = false

IRs:
pauseSave(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
bigPrice = 500000000000000

IRs:
bigPrice(uint256) := 500000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
commission_system = 5

IRs:
commission_system(uint256) := 5(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalGen0 = 0

IRs:
totalGen0(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
timeRangeCreateGen0 = 1

IRs:
timeRangeCreateGen0(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
promoGen0 = 2500

IRs:
promoGen0(uint256) := 2500(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
promoMoney = 1 * bigPrice

IRs:
TMP_46(uint256) = 1 * bigPrice
promoMoney(uint256) := TMP_46(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
promoPause = false

IRs:
promoPause(bool) := False(bool)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
cooldowns = (uint32(60),uint32(120),uint32(240),uint32(480),uint32(960),uint32(1920),uint32(3600),uint32(7200),uint32(14400),uint32(28800),uint32(57600),uint32(86400))

IRs:
TMP_47 = CONVERT 60 to uint32
TMP_48 = CONVERT 120 to uint32
TMP_49 = CONVERT 240 to uint32
TMP_50 = CONVERT 480 to uint32
TMP_51 = CONVERT 960 to uint32
TMP_52 = CONVERT 1920 to uint32
TMP_53 = CONVERT 3600 to uint32
TMP_54 = CONVERT 7200 to uint32
TMP_55 = CONVERT 14400 to uint32
TMP_56 = CONVERT 28800 to uint32
TMP_57 = CONVERT 57600 to uint32
TMP_58 = CONVERT 86400 to uint32
cooldowns(uint32[12]) = ['TMP_47(uint32)', 'TMP_48(uint32)', 'TMP_49(uint32)', 'TMP_50(uint32)', 'TMP_51(uint32)', 'TMP_52(uint32)', 'TMP_53(uint32)', 'TMP_54(uint32)', 'TMP_55(uint32)', 'TMP_56(uint32)', 'TMP_57(uint32)', 'TMP_58(uint32)']"];
}
// Function: 434.sol-BaseRabbit-timeRange()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((lastTimeGen0 + timeRangeCreateGen0) < now)

IRs:
TMP_65(uint256) = lastTimeGen0 + timeRangeCreateGen0
TMP_66(bool) = TMP_65 < now
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BaseRabbit-transferOwnerMoney(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_ownerMoney != address(0)

IRs:
TMP_36 = CONVERT 0 to address
TMP_37(bool) = _ownerMoney != TMP_36
CONDITION TMP_37"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney = _ownerMoney

IRs:
ownerMoney(address) := _ownerMoney(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BaseRabbit-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = add != TMP_30
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerCEO = add

IRs:
ownerCEO(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BaseRabbit-transferOwnershipServer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = add != TMP_33
CONDITION TMP_34"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = add

IRs:
ownerServer(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BodyRabbit-addTokenList(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerBunnies[owner].push(_tokenId)

IRs:
REF_24(uint32[]) -> ownerBunnies[owner]
REF_26 -> LENGTH REF_24
TMP_105(uint256) := REF_26(uint256)
TMP_106(uint256) = TMP_105 + 1
REF_26(uint256) (->ownerBunnies) := TMP_106(uint256)
REF_27(uint32) -> REF_24[TMP_105]
REF_27(uint32) (->ownerBunnies) := _tokenId(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerBunnies(owner,_tokenId)

IRs:
Emit OwnerBunnies(owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rabbitToOwner[_tokenId] = owner

IRs:
REF_28(address) -> rabbitToOwner[_tokenId]
REF_28(address) (->rabbitToOwner) := owner(address)"];
}
// Function: 434.sol-BodyRabbit-approve(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_to
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_tokenId
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 434.sol-BodyRabbit-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerBunnies[_owner].length

IRs:
REF_63(uint32[]) -> ownerBunnies[_owner]
REF_64 -> LENGTH REF_63
RETURN REF_64"];
}
// Function: 434.sol-BodyRabbit-bytes32ToString(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bytesString = new bytes(32)

IRs:
TMP_157 = new bytes(32)
bytesString(bytes) := TMP_157(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
charCount = 0

IRs:
charCount(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->13;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
j < 32

IRs:
TMP_158(bool) = j < 32
CONDITION TMP_158"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
char = bytes1(bytes32(uint256(x) * 2 ** (8 * j)))

IRs:
TMP_159 = CONVERT x to uint256
TMP_160(uint256) = 8 * j
TMP_161(uint256) = 2 ** TMP_160
TMP_162(uint256) = TMP_159 * TMP_161
TMP_163 = CONVERT TMP_162 to bytes32
TMP_164 = CONVERT TMP_163 to bytes1
char(bytes1) := TMP_164(bytes1)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
char != 0

IRs:
TMP_165(bool) = char != 0
CONDITION TMP_165"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
bytesString[charCount] = char

IRs:
REF_60(bytes1) -> bytesString[charCount]
REF_60(bytes1) (->bytesString) := char(bytes1)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
charCount ++

IRs:
TMP_166(uint256) := charCount(uint256)
charCount(uint256) = charCount + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j ++

IRs:
TMP_167(uint256) := j(uint256)
j(uint256) = j + 1"];
12->6;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
bytesStringTrimmed = new bytes(charCount)

IRs:
TMP_169 = new bytes(charCount)
bytesStringTrimmed(bytes) := TMP_169(bytes)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < charCount

IRs:
TMP_170(bool) = j < charCount
CONDITION TMP_170"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
bytesStringTrimmed[j] = bytesString[j]

IRs:
REF_61(None) -> bytesStringTrimmed[j]
REF_62(None) -> bytesString[j]
REF_61(None) (->bytesStringTrimmed) := REF_62(None)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
j ++

IRs:
TMP_171(uint256) := j(uint256)
j(uint256) = j + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
string(bytesStringTrimmed)

IRs:
TMP_172 = CONVERT bytesStringTrimmed to string
RETURN TMP_172"];
}
// Function: 434.sol-BodyRabbit-checkPrivate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPriv())

IRs:
TMP_234(bool) = INTERNAL_CALL, BodyRabbit.isPriv()()
TMP_235(None) = SOLIDITY_CALL require(bool)(TMP_234)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BodyRabbit-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setPriv(myAddr_test)

IRs:
TMP_85(bool) = INTERNAL_CALL, BodyRabbit.setPriv(address)(myAddr_test)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fcontr = true

IRs:
fcontr(bool) := True(bool)"];
}
// Function: 434.sol-BodyRabbit-getBreed(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_bunny = _bunny - 1

IRs:
TMP_199(uint32) = _bunny - 1
_bunny(uint32) := TMP_199(uint32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_bunny == 0

IRs:
TMP_200(bool) = _bunny == 0
CONDITION TMP_200"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
birtTime = rabbits[_bunny].birthLastTime

IRs:
REF_87(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_88(uint256) -> REF_87.birthLastTime
birtTime(uint256) := REF_88(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
birthCount = rabbits[_bunny].birthCount

IRs:
REF_89(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_90(uint256) -> REF_89.birthCount
birthCount(uint256) := REF_90(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastTime = uint256(cooldowns[birthCount])

IRs:
REF_91(uint32) -> cooldowns[birthCount]
TMP_201 = CONVERT REF_91 to uint256
lastTime(uint256) := TMP_201(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lastTime = lastTime.add(birtTime)

IRs:
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lastTime', 'birtTime'] 
lastTime(uint256) := TMP_202(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
lastTime <= now && rabbits[_bunny].role == 0

IRs:
TMP_203(bool) = lastTime <= now
REF_93(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_94(uint256) -> REF_93.role
TMP_204(bool) = REF_94 == 0
TMP_205(bool) = TMP_203 && TMP_204
CONDITION TMP_205"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
interbreed = true

IRs:
interbreed(bool) := True(bool)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
interbreed

IRs:
RETURN interbreed"];
}
// Function: 434.sol-BodyRabbit-getBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
price = getSirePrice(_bunny)

IRs:
TMP_192(uint256) = INTERNAL_CALL, BodyRabbit.getSirePrice(uint32)(_bunny)
price(uint256) := TMP_192(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_bunny = _bunny - 1

IRs:
TMP_193(uint32) = _bunny - 1
_bunny(uint32) := TMP_193(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
mother = rabbits[_bunny].mother

IRs:
REF_69(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_70(uint32) -> REF_69.mother
mother(uint32) := REF_70(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
sire = rabbits[_bunny].sire

IRs:
REF_71(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_72(uint32) -> REF_71.sire
sire(uint32) := REF_72(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
birthblock = rabbits[_bunny].birthblock

IRs:
REF_73(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_74(uint256) -> REF_73.birthblock
birthblock(uint256) := REF_74(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
birthCount = rabbits[_bunny].birthCount

IRs:
REF_75(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_76(uint256) -> REF_75.birthCount
birthCount(uint256) := REF_76(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
birthLastTime = rabbits[_bunny].birthLastTime

IRs:
REF_77(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_78(uint256) -> REF_77.birthLastTime
birthLastTime(uint256) := REF_78(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
role = rabbits[_bunny].role

IRs:
REF_79(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_80(uint256) -> REF_79.role
role(uint256) := REF_80(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
genome = rabbits[_bunny].genome

IRs:
REF_81(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_82(uint256) -> REF_81.genome
genome(uint256) := REF_82(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
birthCount > 14

IRs:
TMP_194(bool) = birthCount > 14
CONDITION TMP_194"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
birthCount = 14

IRs:
birthCount(uint256) := 14(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
motherSumm = motherCount[_bunny]

IRs:
REF_83(uint256) -> motherCount[_bunny]
motherSumm(uint256) := REF_83(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
lastTime = uint256(cooldowns[birthCount])

IRs:
REF_84(uint32) -> cooldowns[birthCount]
TMP_195 = CONVERT REF_84 to uint256
lastTime(uint256) := TMP_195(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lastTime = lastTime.add(birthLastTime)

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lastTime', 'birthLastTime'] 
lastTime(uint256) := TMP_196(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
lastTime <= now

IRs:
TMP_197(bool) = lastTime <= now
CONDITION TMP_197"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
interbreed = true

IRs:
interbreed(bool) := True(bool)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
leftTime = lastTime.sub(now)

IRs:
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lastTime', 'now'] 
leftTime(uint256) := TMP_198(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(mother,sire,birthblock,birthCount,birthLastTime,role,genome,interbreed,leftTime,lastTime,price,motherSumm)

IRs:
RETURN mother,sire,birthblock,birthCount,birthLastTime,role,genome,interbreed,leftTime,lastTime,price,motherSumm"];
}
// Function: 434.sol-BodyRabbit-getGiffBlock(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! giffblock[_bunnyid]

IRs:
REF_67(bool) -> giffblock[_bunnyid]
TMP_191 = UnaryType.BANG REF_67 
RETURN TMP_191"];
}
// Function: 434.sol-BodyRabbit-getMotherCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
motherCount[_mother]

IRs:
REF_54(uint256) -> motherCount[_mother]
RETURN REF_54"];
}
// Function: 434.sol-BodyRabbit-getOwnerGennezise(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerGennezise[_to]

IRs:
REF_68(bool) -> ownerGennezise[_to]
RETURN REF_68"];
}
// Function: 434.sol-BodyRabbit-getOwnerMoney()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerMoney

IRs:
RETURN ownerMoney"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-getOwnerServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerServer

IRs:
RETURN ownerServer"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-getPrivAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
privAddress

IRs:
RETURN privAddress"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-getRabbitDNK(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
mapDNK[bunnyid]

IRs:
REF_59(uint256) -> mapDNK[bunnyid]
RETURN REF_59"];
}
// Function: 434.sol-BodyRabbit-getRabbitMother(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rabbitMother[mother]

IRs:
REF_56(uint32[5]) -> rabbitMother[mother]
RETURN REF_56"];
}
// Function: 434.sol-BodyRabbit-getRabbitMotherSumm(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
m = 0

IRs:
m(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
m < 5

IRs:
TMP_152(bool) = m < 5
CONDITION TMP_152"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
rabbitMother[mother][m] != 0

IRs:
REF_57(uint32[5]) -> rabbitMother[mother]
REF_58(uint32) -> REF_57[m]
TMP_153(bool) = REF_58 != 0
CONDITION TMP_153"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count ++

IRs:
TMP_154(uint256) := count(uint256)
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
m ++

IRs:
TMP_155(uint256) := m(uint256)
m(uint256) = m + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 434.sol-BodyRabbit-getSirePrice(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
rabbits[(_tokenId - 1)].role == 1

IRs:
TMP_97(uint32) = _tokenId - 1
REF_16(BaseRabbit.Rabbit) -> rabbits[TMP_97]
REF_17(uint256) -> REF_16.role
TMP_98(bool) = REF_17 == 1
CONDITION TMP_98"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
procent = (rabbitSirePrice[_tokenId] / 100)

IRs:
REF_18(uint256) -> rabbitSirePrice[_tokenId]
TMP_99(uint256) = REF_18 / 100
procent(uint256) := TMP_99(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
res = procent.mul(25)

IRs:
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['procent', '25'] 
res(uint256) := TMP_100(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
system = procent.mul(commission_system)

IRs:
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['procent', 'commission_system'] 
system(uint256) := TMP_101(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
res = res.add(rabbitSirePrice[_tokenId])

IRs:
REF_22(uint256) -> rabbitSirePrice[_tokenId]
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['res', 'REF_22'] 
res(uint256) := TMP_102(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
res.add(system)

IRs:
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['res', 'system'] 
RETURN TMP_103"];
7[label="Node Type: RETURN 7

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 434.sol-BodyRabbit-getTokenOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
total = ownerBunnies[owner].length

IRs:
REF_32(uint32[]) -> ownerBunnies[owner]
REF_33 -> LENGTH REF_32
total(uint256) := REF_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
list = ownerBunnies[owner]

IRs:
REF_34(uint32[]) -> ownerBunnies[owner]
list(uint32[]) = ['REF_34(uint32[])']"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(total,list)

IRs:
RETURN total,list"];
}
// Function: 434.sol-BodyRabbit-getTotalSalaryBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSalaryBunny[_bunny]

IRs:
REF_55(uint256) -> totalSalaryBunny[_bunny]
RETURN REF_55"];
}
// Function: 434.sol-BodyRabbit-getcoolduwn(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cd = rabbits[(_mother - 1)].birthCount

IRs:
TMP_206(uint32) = _mother - 1
REF_95(BaseRabbit.Rabbit) -> rabbits[TMP_206]
REF_96(uint256) -> REF_95.birthCount
cd(uint256) := REF_96(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
cd > 14

IRs:
TMP_207(bool) = cd > 14
CONDITION TMP_207"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cd = 14

IRs:
cd(uint256) := 14(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastTime = (cooldowns[cd] + rabbits[(_mother - 1)].birthLastTime)

IRs:
REF_97(uint32) -> cooldowns[cd]
TMP_208(uint32) = _mother - 1
REF_98(BaseRabbit.Rabbit) -> rabbits[TMP_208]
REF_99(uint256) -> REF_98.birthLastTime
TMP_209(uint32) = REF_97 + REF_99
lastTime(uint256) := TMP_209(uint32)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
lastTime > now

IRs:
TMP_210(bool) = lastTime > now
CONDITION TMP_210"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
lefttime = lastTime.sub(now)

IRs:
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lastTime', 'now'] 
lefttime(uint256) := TMP_211(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(lastTime,cd,lefttime)

IRs:
RETURN lastTime,cd,lefttime"];
}
// Function: 434.sol-BodyRabbit-isPauseSave()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! pauseSave

IRs:
TMP_129 = UnaryType.BANG pauseSave 
RETURN TMP_129"];
}
// Function: 434.sol-BodyRabbit-isPriv()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
privateContract.isUIntPrivate()

IRs:
TMP_86(bool) = HIGH_LEVEL_CALL, dest:privateContract(PrivateRabbitInterface), function:isUIntPrivate, arguments:[]  
RETURN TMP_86"];
}
// Function: 434.sol-BodyRabbit-isPromoPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == ownerServer || msg.sender == ownerCEO

IRs:
TMP_130(bool) = msg.sender == ownerServer
TMP_131(bool) = msg.sender == ownerCEO
TMP_132(bool) = TMP_130 || TMP_131
CONDITION TMP_132"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
! promoPause

IRs:
TMP_133 = UnaryType.BANG promoPause 
RETURN TMP_133"];
}
// Function: 434.sol-BodyRabbit-isUIntPublic()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 434.sol-BodyRabbit-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerCEO)

IRs:
TMP_228(bool) = msg.sender == ownerCEO
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BodyRabbit-onlyServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerServer || msg.sender == ownerCEO)

IRs:
TMP_230(bool) = msg.sender == ownerServer
TMP_231(bool) = msg.sender == ownerCEO
TMP_232(bool) = TMP_230 || TMP_231
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BodyRabbit-ownerOf(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rabbitToOwner[_tokenId]

IRs:
REF_1(address) -> rabbitToOwner[_tokenId]
RETURN REF_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 434.sol-BodyRabbit-removeTokenList(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = ownerBunnies[_owner].length

IRs:
REF_2(uint32[]) -> ownerBunnies[_owner]
REF_3 -> LENGTH REF_2
count(uint256) := REF_3(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < count

IRs:
TMP_87(bool) = i < count
CONDITION TMP_87"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
ownerBunnies[_owner][i] == _tokenId

IRs:
REF_4(uint32[]) -> ownerBunnies[_owner]
REF_5(uint32) -> REF_4[i]
TMP_88(bool) = REF_5 == _tokenId
CONDITION TMP_88"];
6->7[label="True"];
6->14[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete ownerBunnies[_owner][i]

IRs:
REF_6(uint32[]) -> ownerBunnies[_owner]
REF_7(uint32) -> REF_6[i]
REF_6 = delete REF_7 "];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
count > 0 && count != (i - 1)

IRs:
TMP_89(bool) = count > 0
TMP_90(uint256) = i - 1
TMP_91(bool) = count != TMP_90
TMP_92(bool) = TMP_89 && TMP_91
CONDITION TMP_92"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownerBunnies[_owner][i] = ownerBunnies[_owner][(count - 1)]

IRs:
REF_8(uint32[]) -> ownerBunnies[_owner]
REF_9(uint32) -> REF_8[i]
REF_10(uint32[]) -> ownerBunnies[_owner]
TMP_93(uint256) = count - 1
REF_11(uint32) -> REF_10[TMP_93]
REF_9(uint32) (->ownerBunnies) := REF_11(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete ownerBunnies[_owner][(count - 1)]

IRs:
REF_12(uint32[]) -> ownerBunnies[_owner]
TMP_94(uint256) = count - 1
REF_13(uint32) -> REF_12[TMP_94]
REF_12 = delete REF_13 "];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerBunnies[_owner].length --

IRs:
REF_14(uint32[]) -> ownerBunnies[_owner]
REF_15 -> LENGTH REF_14
TMP_95(uint256) := REF_15(uint256)
REF_15(-> ownerBunnies) = REF_15 - 1"];
12->13;
13[label="Node Type: RETURN 13
"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_96(uint256) := i(uint256)
i(uint256) = i + 1"];
15->5;
}
// Function: 434.sol-BodyRabbit-sendMoney(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_to.transfer((_money / 100) * 95)

IRs:
TMP_185(uint256) = _money / 100
TMP_186(uint256) = TMP_185 * 95
Transfer dest:_to value:TMP_186"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney.transfer((_money / 100) * 5)

IRs:
TMP_188(uint256) = _money / 100
TMP_189(uint256) = TMP_188 * 5
Transfer dest:ownerMoney value:TMP_189"];
}
// Function: 434.sol-BodyRabbit-setMotherCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
motherCount[_mother] = motherCount[_mother].add(1)

IRs:
REF_49(uint256) -> motherCount[_mother]
REF_50(uint256) -> motherCount[_mother]
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_50', '1'] 
REF_49(uint256) (->motherCount) := TMP_150(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EmotherCount(_mother,motherCount[_mother])

IRs:
REF_52(uint256) -> motherCount[_mother]
Emit EmotherCount(_mother,REF_52)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
motherCount[_mother]

IRs:
REF_53(uint256) -> motherCount[_mother]
RETURN REF_53"];
}
// Function: 434.sol-BodyRabbit-setPauseSave()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
pauseSave = ! pauseSave

IRs:
TMP_134 = UnaryType.BANG pauseSave 
pauseSave(bool) := TMP_134(bool)
RETURN pauseSave"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-setPriv(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
privAddress = _privAddress

IRs:
privAddress(address) := _privAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
privateContract = PrivateRabbitInterface(_privAddress)

IRs:
TMP_84 = CONVERT _privAddress to PrivateRabbitInterface
privateContract(PrivateRabbitInterface) := TMP_84(PrivateRabbitInterface)"];
}
// Function: 434.sol-BodyRabbit-setPromoGen0(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoGen0 = _promoGen0

IRs:
promoGen0(uint256) := _promoGen0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-setPromoMoney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoMoney = _promoMoney

IRs:
promoMoney(uint256) := _promoMoney(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-setPromoPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoPause = ! promoPause

IRs:
TMP_69 = UnaryType.BANG promoPause 
promoPause(bool) := TMP_69(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-setRabbitMother(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(children != mother)

IRs:
TMP_136(bool) = children != mother
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
mother == 0

IRs:
TMP_138(bool) = mother == 0
CONDITION TMP_138"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
start = 0

IRs:
start(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->17;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < 5

IRs:
TMP_139(bool) = i < 5
CONDITION TMP_139"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
rabbitMother[mother][i] != 0

IRs:
REF_35(uint32[5]) -> rabbitMother[mother]
REF_36(uint32) -> REF_35[i]
TMP_140(bool) = REF_36 != 0
CONDITION TMP_140"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pullMother[start] = uint32(rabbitMother[mother][i])

IRs:
REF_37(uint32) -> pullMother[start]
REF_38(uint32[5]) -> rabbitMother[mother]
REF_39(uint32) -> REF_38[i]
TMP_141 = CONVERT REF_39 to uint32
REF_37(uint32) (->pullMother) := TMP_141(uint32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
rabbitMother[mother][i] = 0

IRs:
REF_40(uint32[5]) -> rabbitMother[mother]
REF_41(uint32) -> REF_40[i]
REF_41(uint32) (->rabbitMother) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
start ++

IRs:
TMP_142(uint256) := start(uint256)
start(uint256) = start + 1"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_143(uint256) := i(uint256)
i(uint256) = i + 1"];
16->10;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
pullMother[start] = mother

IRs:
REF_42(uint32) -> pullMother[start]
REF_42(uint32) (->pullMother) := mother(uint32)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
start ++

IRs:
TMP_144(uint256) := start(uint256)
start(uint256) = start + 1"];
18->21;
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->28;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
m = 0

IRs:
m(uint256) := 0(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
m < 5

IRs:
TMP_145(bool) = m < 5
CONDITION TMP_145"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: IF 23

EXPRESSION:
start > 5

IRs:
TMP_146(bool) = start > 5
CONDITION TMP_146"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
rabbitMother[children][m] = pullMother[(m + 1)]

IRs:
REF_43(uint32[5]) -> rabbitMother[children]
REF_44(uint32) -> REF_43[m]
TMP_147(uint256) = m + 1
REF_45(uint32) -> pullMother[TMP_147]
REF_44(uint32) (->rabbitMother) := REF_45(uint32)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
rabbitMother[children][m] = pullMother[m]

IRs:
REF_46(uint32[5]) -> rabbitMother[children]
REF_47(uint32) -> REF_46[m]
REF_48(uint32) -> pullMother[m]
REF_47(uint32) (->rabbitMother) := REF_48(uint32)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
m ++

IRs:
TMP_148(uint256) := m(uint256)
m(uint256) = m + 1"];
27->22;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
setMotherCount(mother)

IRs:
TMP_149(uint256) = INTERNAL_CALL, BodyRabbit.setMotherCount(uint32)(mother)"];
}
// Function: 434.sol-BodyRabbit-setTimeRangeGen0(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
timeRangeCreateGen0 = _sec

IRs:
timeRangeCreateGen0(uint256) := _sec(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BodyRabbit-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CryptoRabbits

IRs:
name(string) := CryptoRabbits(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CRB

IRs:
symbol(string) := CRB(string)"];
}
// Function: 434.sol-BodyRabbit-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
myAddr_test = 0x982a49414fD95e3268D3559540A67B03e40AcD64

IRs:
myAddr_test(address) := 868709609884926412840050907305519079164645920100(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
pauseSave = false

IRs:
pauseSave(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
bigPrice = 500000000000000

IRs:
bigPrice(uint256) := 500000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
commission_system = 5

IRs:
commission_system(uint256) := 5(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalGen0 = 0

IRs:
totalGen0(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
timeRangeCreateGen0 = 1

IRs:
timeRangeCreateGen0(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
promoGen0 = 2500

IRs:
promoGen0(uint256) := 2500(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
promoMoney = 1 * bigPrice

IRs:
TMP_212(uint256) = 1 * bigPrice
promoMoney(uint256) := TMP_212(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
promoPause = false

IRs:
promoPause(bool) := False(bool)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
cooldowns = (uint32(60),uint32(120),uint32(240),uint32(480),uint32(960),uint32(1920),uint32(3600),uint32(7200),uint32(14400),uint32(28800),uint32(57600),uint32(86400))

IRs:
TMP_213 = CONVERT 60 to uint32
TMP_214 = CONVERT 120 to uint32
TMP_215 = CONVERT 240 to uint32
TMP_216 = CONVERT 480 to uint32
TMP_217 = CONVERT 960 to uint32
TMP_218 = CONVERT 1920 to uint32
TMP_219 = CONVERT 3600 to uint32
TMP_220 = CONVERT 7200 to uint32
TMP_221 = CONVERT 14400 to uint32
TMP_222 = CONVERT 28800 to uint32
TMP_223 = CONVERT 57600 to uint32
TMP_224 = CONVERT 86400 to uint32
cooldowns(uint32[12]) = ['TMP_213(uint32)', 'TMP_214(uint32)', 'TMP_215(uint32)', 'TMP_216(uint32)', 'TMP_217(uint32)', 'TMP_218(uint32)', 'TMP_219(uint32)', 'TMP_220(uint32)', 'TMP_221(uint32)', 'TMP_222(uint32)', 'TMP_223(uint32)', 'TMP_224(uint32)']"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
totalBunny = 0

IRs:
totalBunny(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
fcontr = false

IRs:
fcontr(bool) := False(bool)"];
}
// Function: 434.sol-BodyRabbit-timeRange()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((lastTimeGen0 + timeRangeCreateGen0) < now)

IRs:
TMP_225(uint256) = lastTimeGen0 + timeRangeCreateGen0
TMP_226(bool) = TMP_225 < now
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BodyRabbit-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalBunny

IRs:
RETURN totalBunny"];
2[label="Node Type: RETURN 2

EXPRESSION:
total

IRs:
RETURN total"];
}
// Function: 434.sol-BodyRabbit-transfer(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentOwner = msg.sender

IRs:
currentOwner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldOwner = rabbitToOwner[_tokenId]

IRs:
REF_29(address) -> rabbitToOwner[_tokenId]
oldOwner(address) := REF_29(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(rabbitToOwner[_tokenId] == msg.sender)

IRs:
REF_30(address) -> rabbitToOwner[_tokenId]
TMP_108(bool) = REF_30 == msg.sender
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(currentOwner != _to)

IRs:
TMP_110(bool) = currentOwner != _to
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_112 = CONVERT 0 to address
TMP_113(bool) = _to != TMP_112
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
removeTokenList(oldOwner,_tokenId)

IRs:
INTERNAL_CALL, BodyRabbit.removeTokenList(address,uint32)(oldOwner,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
addTokenList(_to,_tokenId)

IRs:
INTERNAL_CALL, BodyRabbit.addTokenList(address,uint32)(_to,_tokenId)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(oldOwner,_to,_tokenId)

IRs:
Emit Transfer(oldOwner,_to,_tokenId)"];
}
// Function: 434.sol-BodyRabbit-transferFrom(address,address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldOwner = rabbitToOwner[_tokenId]

IRs:
REF_31(address) -> rabbitToOwner[_tokenId]
oldOwner(address) := REF_31(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(oldOwner == _from)

IRs:
TMP_118(bool) = oldOwner == _from
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(oldOwner != _to)

IRs:
TMP_120(bool) = oldOwner != _to
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_122 = CONVERT 0 to address
TMP_123(bool) = _to != TMP_122
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeTokenList(oldOwner,_tokenId)

IRs:
INTERNAL_CALL, BodyRabbit.removeTokenList(address,uint32)(oldOwner,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addTokenList(_to,_tokenId)

IRs:
INTERNAL_CALL, BodyRabbit.addTokenList(address,uint32)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(oldOwner,_to,_tokenId)

IRs:
Emit Transfer(oldOwner,_to,_tokenId)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 434.sol-BodyRabbit-transferOwnerMoney(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_ownerMoney != address(0)

IRs:
TMP_78 = CONVERT 0 to address
TMP_79(bool) = _ownerMoney != TMP_78
CONDITION TMP_79"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney = _ownerMoney

IRs:
ownerMoney(address) := _ownerMoney(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BodyRabbit-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = add != TMP_72
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerCEO = add

IRs:
ownerCEO(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BodyRabbit-transferOwnershipServer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_75 = CONVERT 0 to address
TMP_76(bool) = add != TMP_75
CONDITION TMP_76"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = add

IRs:
ownerServer(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BodyRabbit-uintToBytes(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
v == 0

IRs:
TMP_173(bool) = v == 0
CONDITION TMP_173"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ret = 0

IRs:
ret(bytes32) := 0(string)"];
2->9;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
v > 0

IRs:
TMP_174(bool) = v > 0
CONDITION TMP_174"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ret = bytes32(uint256(ret) / (2 ** 8))

IRs:
TMP_175 = CONVERT ret to uint256
TMP_176(uint256) = 2 ** 8
TMP_177(uint256) = TMP_175 / TMP_176
TMP_178 = CONVERT TMP_177 to bytes32
ret(bytes32) := TMP_178(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31))

IRs:
TMP_179(uint256) = v % 10
TMP_180(uint256) = TMP_179 + 48
TMP_181(uint256) = 8 * 31
TMP_182(uint256) = 2 ** TMP_181
TMP_183(uint256) = TMP_180 * TMP_182
TMP_184 = CONVERT TMP_183 to bytes32
ret(bytes32) = ret | TMP_184"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
v /= 10

IRs:
v(uint256) = v / 10"];
7->4;
8[label="Node Type: END_LOOP 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
ret

IRs:
RETURN ret"];
11[label="Node Type: RETURN 11

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 434.sol-BunnyGame-_transferMoneyMother(uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_706(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_707(None) = SOLIDITY_CALL require(bool)(TMP_706)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_valueMoney > 0)

IRs:
TMP_708(bool) = _valueMoney > 0
TMP_709(None) = SOLIDITY_CALL require(bool)(TMP_708)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
getRabbitMotherSumm(_mother) > 0

IRs:
TMP_710(uint256) = INTERNAL_CALL, BodyRabbit.getRabbitMotherSumm(uint32)(_mother)
TMP_711(bool) = TMP_710 > 0
CONDITION TMP_711"];
3->4[label="True"];
3->18[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
pastMoney = _valueMoney / getRabbitMotherSumm(_mother)

IRs:
TMP_712(uint256) = INTERNAL_CALL, BodyRabbit.getRabbitMotherSumm(uint32)(_mother)
TMP_713(uint256) = _valueMoney / TMP_712
pastMoney(uint256) := TMP_713(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->18;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < getRabbitMotherSumm(_mother)

IRs:
TMP_714(uint256) = INTERNAL_CALL, BodyRabbit.getRabbitMotherSumm(uint32)(_mother)
TMP_715(bool) = i < TMP_714
CONDITION TMP_715"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
rabbitMother[_mother][i] != 0

IRs:
REF_377(uint32[5]) -> rabbitMother[_mother]
REF_378(uint32) -> REF_377[i]
TMP_716(bool) = REF_378 != 0
CONDITION TMP_716"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_parrentMother = rabbitMother[_mother][i]

IRs:
REF_379(uint32[5]) -> rabbitMother[_mother]
REF_380(uint32) -> REF_379[i]
_parrentMother(uint32) := REF_380(uint32)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
add = rabbitToOwner[_parrentMother]

IRs:
REF_381(address) -> rabbitToOwner[_parrentMother]
add(address) := REF_381(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
setMotherCount(_parrentMother)

IRs:
TMP_717(uint256) = INTERNAL_CALL, BodyRabbit.setMotherCount(uint32)(_parrentMother)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
totalSalaryBunny[_parrentMother] += pastMoney

IRs:
REF_382(uint256) -> totalSalaryBunny[_parrentMother]
REF_382(-> totalSalaryBunny) = REF_382 + pastMoney"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
SalaryBunny(_parrentMother,totalSalaryBunny[_parrentMother])

IRs:
REF_383(uint256) -> totalSalaryBunny[_parrentMother]
Emit SalaryBunny(_parrentMother,REF_383)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
add.transfer(pastMoney)

IRs:
Transfer dest:add value:pastMoney"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_720(uint256) := i(uint256)
i(uint256) = i + 1"];
17->8;
18[label="Node Type: END_IF 18
"];
}
// Function: 434.sol-BunnyGame-addTokenList(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerBunnies[owner].push(_tokenId)

IRs:
REF_252(uint32[]) -> ownerBunnies[owner]
REF_254 -> LENGTH REF_252
TMP_507(uint256) := REF_254(uint256)
TMP_508(uint256) = TMP_507 + 1
REF_254(uint256) (->ownerBunnies) := TMP_508(uint256)
REF_255(uint32) -> REF_252[TMP_507]
REF_255(uint32) (->ownerBunnies) := _tokenId(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerBunnies(owner,_tokenId)

IRs:
Emit OwnerBunnies(owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rabbitToOwner[_tokenId] = owner

IRs:
REF_256(address) -> rabbitToOwner[_tokenId]
REF_256(address) (->rabbitToOwner) := owner(address)"];
}
// Function: 434.sol-BunnyGame-approve(address,uint32)
digraph{
}
// Function: 434.sol-BunnyGame-balanceOf(address)
digraph{
}
// Function: 434.sol-BunnyGame-buyBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_466(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_467(None) = SOLIDITY_CALL require(bool)(TMP_466)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rabbitToOwner[_bunnyid] != msg.sender)

IRs:
REF_223(address) -> rabbitToOwner[_bunnyid]
TMP_468(bool) = REF_223 != msg.sender
TMP_469(None) = SOLIDITY_CALL require(bool)(TMP_468)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
price = currentPrice(_bunnyid)

IRs:
TMP_470(uint256) = INTERNAL_CALL, RabbitMarket.currentPrice(uint32)(_bunnyid)
price(uint256) := TMP_470(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value >= price && 0 != price)

IRs:
TMP_471(bool) = msg.value >= price
TMP_472(bool) = 0 != price
TMP_473(bool) = TMP_471 && TMP_472
TMP_474(None) = SOLIDITY_CALL require(bool)(TMP_473)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalClosedBID ++

IRs:
TMP_475(uint256) := totalClosedBID(uint256)
totalClosedBID(uint256) = totalClosedBID + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
sendMoney(rabbitToOwner[_bunnyid],msg.value)

IRs:
REF_224(address) -> rabbitToOwner[_bunnyid]
INTERNAL_CALL, BodyRabbit.sendMoney(address,uint256)(REF_224,msg.value)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transferFrom(rabbitToOwner[_bunnyid],msg.sender,_bunnyid)

IRs:
REF_225(address) -> rabbitToOwner[_bunnyid]
TMP_477(bool) = INTERNAL_CALL, BodyRabbit.transferFrom(address,address,uint32)(REF_225,msg.sender,_bunnyid)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
stopMarket(_bunnyid)

IRs:
TMP_478(uint256) = INTERNAL_CALL, RabbitMarket.stopMarket(uint32)(_bunnyid)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
BunnyBuy(_bunnyid,price)

IRs:
Emit BunnyBuy(_bunnyid,price)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
SendBunny(msg.sender,_bunnyid)

IRs:
Emit SendBunny(msg.sender,_bunnyid)"];
}
// Function: 434.sol-BunnyGame-bytes32ToString(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bytesString = new bytes(32)

IRs:
TMP_559 = new bytes(32)
bytesString(bytes) := TMP_559(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
charCount = 0

IRs:
charCount(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->13;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
j < 32

IRs:
TMP_560(bool) = j < 32
CONDITION TMP_560"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
char = bytes1(bytes32(uint256(x) * 2 ** (8 * j)))

IRs:
TMP_561 = CONVERT x to uint256
TMP_562(uint256) = 8 * j
TMP_563(uint256) = 2 ** TMP_562
TMP_564(uint256) = TMP_561 * TMP_563
TMP_565 = CONVERT TMP_564 to bytes32
TMP_566 = CONVERT TMP_565 to bytes1
char(bytes1) := TMP_566(bytes1)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
char != 0

IRs:
TMP_567(bool) = char != 0
CONDITION TMP_567"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
bytesString[charCount] = char

IRs:
REF_288(bytes1) -> bytesString[charCount]
REF_288(bytes1) (->bytesString) := char(bytes1)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
charCount ++

IRs:
TMP_568(uint256) := charCount(uint256)
charCount(uint256) = charCount + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j ++

IRs:
TMP_569(uint256) := j(uint256)
j(uint256) = j + 1"];
12->6;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
bytesStringTrimmed = new bytes(charCount)

IRs:
TMP_571 = new bytes(charCount)
bytesStringTrimmed(bytes) := TMP_571(bytes)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < charCount

IRs:
TMP_572(bool) = j < charCount
CONDITION TMP_572"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
bytesStringTrimmed[j] = bytesString[j]

IRs:
REF_289(None) -> bytesStringTrimmed[j]
REF_290(None) -> bytesString[j]
REF_289(None) (->bytesStringTrimmed) := REF_290(None)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
j ++

IRs:
TMP_573(uint256) := j(uint256)
j(uint256) = j + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
string(bytesStringTrimmed)

IRs:
TMP_574 = CONVERT bytesStringTrimmed to string
RETURN TMP_574"];
}
// Function: 434.sol-BunnyGame-checkPrivate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPriv())

IRs:
TMP_779(bool) = INTERNAL_CALL, BodyRabbit.isPriv()()
TMP_780(None) = SOLIDITY_CALL require(bool)(TMP_779)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BunnyGame-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerCEO = msg.sender

IRs:
ownerCEO(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = msg.sender

IRs:
ownerServer(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerMoney = msg.sender

IRs:
ownerMoney(address) := msg.sender(address)"];
}
// Function: 434.sol-BunnyGame-coolduwnUP(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_698(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_699(None) = SOLIDITY_CALL require(bool)(TMP_698)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rabbits[(_mother - 1)].birthCount = rabbits[(_mother - 1)].birthCount.add(1)

IRs:
TMP_700(uint32) = _mother - 1
REF_368(BaseRabbit.Rabbit) -> rabbits[TMP_700]
REF_369(uint256) -> REF_368.birthCount
TMP_701(uint32) = _mother - 1
REF_370(BaseRabbit.Rabbit) -> rabbits[TMP_701]
REF_371(uint256) -> REF_370.birthCount
TMP_702(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_371', '1'] 
REF_369(uint256) (->rabbits) := TMP_702(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rabbits[(_mother - 1)].birthLastTime = now

IRs:
TMP_703(uint32) = _mother - 1
REF_373(BaseRabbit.Rabbit) -> rabbits[TMP_703]
REF_374(uint256) -> REF_373.birthLastTime
REF_374(uint256) (->rabbits) := now(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
CoolduwnMother(_mother,rabbits[(_mother - 1)].birthCount)

IRs:
TMP_704(uint32) = _mother - 1
REF_375(BaseRabbit.Rabbit) -> rabbits[TMP_704]
REF_376(uint256) -> REF_375.birthCount
Emit CoolduwnMother(_mother,REF_376)"];
}
// Function: 434.sol-BunnyGame-createChildren(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPriv())

IRs:
TMP_666(bool) = INTERNAL_CALL, BodyRabbit.isPriv()()
TMP_667(None) = SOLIDITY_CALL require(bool)(TMP_666)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_668(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_669(None) = SOLIDITY_CALL require(bool)(TMP_668)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(rabbitToOwner[_matron] == msg.sender)

IRs:
REF_348(address) -> rabbitToOwner[_matron]
TMP_670(bool) = REF_348 == msg.sender
TMP_671(None) = SOLIDITY_CALL require(bool)(TMP_670)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(rabbits[(_sire - 1)].role == 1)

IRs:
TMP_672(uint32) = _sire - 1
REF_349(BaseRabbit.Rabbit) -> rabbits[TMP_672]
REF_350(uint256) -> REF_349.role
TMP_673(bool) = REF_350 == 1
TMP_674(None) = SOLIDITY_CALL require(bool)(TMP_673)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_matron != _sire)

IRs:
TMP_675(bool) = _matron != _sire
TMP_676(None) = SOLIDITY_CALL require(bool)(TMP_675)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(getBreed(_matron))

IRs:
TMP_677(bool) = INTERNAL_CALL, BodyRabbit.getBreed(uint32)(_matron)
TMP_678(None) = SOLIDITY_CALL require(bool)(TMP_677)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(msg.value >= getSirePrice(_sire))

IRs:
TMP_679(uint256) = INTERNAL_CALL, BodyRabbit.getSirePrice(uint32)(_sire)
TMP_680(bool) = msg.value >= TMP_679
TMP_681(None) = SOLIDITY_CALL require(bool)(TMP_680)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
genome = getGenomeChildren(_matron,_sire)

IRs:
TMP_682(uint256) = INTERNAL_CALL, BunnyGame.getGenomeChildren(uint32,uint32)(_matron,_sire)
genome(uint256) := TMP_682(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
localdnk = privateContract.mixDNK(mapDNK[_matron],mapDNK[_sire],genome)

IRs:
REF_352(uint256) -> mapDNK[_matron]
REF_353(uint256) -> mapDNK[_sire]
TMP_683(uint256) = HIGH_LEVEL_CALL, dest:privateContract(PrivateRabbitInterface), function:mixDNK, arguments:['REF_352', 'REF_353', 'genome']  
localdnk(uint256) := TMP_683(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
rabbit = Rabbit(_matron,_sire,block.number,0,0,0,genome)

IRs:
TMP_684(BaseRabbit.Rabbit) = new Rabbit(_matron,_sire,block.number,0,0,0,genome)
rabbit(BaseRabbit.Rabbit) := TMP_684(BaseRabbit.Rabbit)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bunnyid = uint32(rabbits.push(rabbit))

IRs:
REF_355 -> LENGTH rabbits
TMP_687(uint256) := REF_355(uint256)
TMP_688(uint256) = TMP_687 + 1
REF_355(uint256) (->rabbits) := TMP_688(uint256)
REF_356(BaseRabbit.Rabbit) -> rabbits[TMP_687]
REF_356(BaseRabbit.Rabbit) (->rabbits) := rabbit(BaseRabbit.Rabbit)
TMP_686 = CONVERT TMP_685 to uint32
bunnyid(uint32) := TMP_686(uint32)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
mapDNK[bunnyid] = localdnk

IRs:
REF_357(uint256) -> mapDNK[bunnyid]
REF_357(uint256) (->mapDNK) := localdnk(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_moneyMother = rabbitSirePrice[_sire].div(4)

IRs:
REF_358(uint256) -> rabbitSirePrice[_sire]
TMP_689(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_358', '4'] 
_moneyMother(uint256) := TMP_689(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_transferMoneyMother(_matron,_moneyMother)

IRs:
INTERNAL_CALL, BunnyGame._transferMoneyMother(uint32,uint256)(_matron,_moneyMother)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
rabbitToOwner[_sire].transfer(rabbitSirePrice[_sire])

IRs:
REF_360(address) -> rabbitToOwner[_sire]
REF_362(uint256) -> rabbitSirePrice[_sire]
Transfer dest:REF_360 value:REF_362"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
system = rabbitSirePrice[_sire].div(100)

IRs:
REF_363(uint256) -> rabbitSirePrice[_sire]
TMP_692(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_363', '100'] 
system(uint256) := TMP_692(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
system = system.mul(commission_system)

IRs:
TMP_693(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['system', 'commission_system'] 
system(uint256) := TMP_693(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ownerMoney.transfer(system)

IRs:
Transfer dest:ownerMoney value:system"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
coolduwnUP(_matron)

IRs:
INTERNAL_CALL, BunnyGame.coolduwnUP(uint32)(_matron)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
transferNewBunny(rabbitToOwner[_matron],bunnyid,localdnk,genome,_matron,_sire)

IRs:
REF_367(address) -> rabbitToOwner[_matron]
INTERNAL_CALL, BunnyGame.transferNewBunny(address,uint32,uint256,uint256,uint32,uint32)(REF_367,bunnyid,localdnk,genome,_matron,_sire)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
setRabbitMother(bunnyid,_matron)

IRs:
INTERNAL_CALL, BodyRabbit.setRabbitMother(uint32,uint32)(bunnyid,_matron)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
bunnyid

IRs:
RETURN bunnyid"];
}
// Function: 434.sol-BunnyGame-createGennezise(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
promo = false

IRs:
promo(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(isPriv())

IRs:
TMP_634(bool) = INTERNAL_CALL, BodyRabbit.isPriv()()
TMP_635(None) = SOLIDITY_CALL require(bool)(TMP_634)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_636(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_637(None) = SOLIDITY_CALL require(bool)(TMP_636)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(isPromoPause())

IRs:
TMP_638(bool) = INTERNAL_CALL, BodyRabbit.isPromoPause()()
TMP_639(None) = SOLIDITY_CALL require(bool)(TMP_638)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
totalGen0 > promoGen0

IRs:
TMP_640(bool) = totalGen0 > promoGen0
CONDITION TMP_640"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(msg.sender == ownerServer || msg.sender == ownerCEO)

IRs:
TMP_641(bool) = msg.sender == ownerServer
TMP_642(bool) = msg.sender == ownerCEO
TMP_643(bool) = TMP_641 || TMP_642
TMP_644(None) = SOLIDITY_CALL require(bool)(TMP_643)"];
6->12;
7[label="Node Type: IF 7

EXPRESSION:
! (msg.sender == ownerServer || msg.sender == ownerCEO)

IRs:
TMP_645(bool) = msg.sender == ownerServer
TMP_646(bool) = msg.sender == ownerCEO
TMP_647(bool) = TMP_645 || TMP_646
TMP_648 = UnaryType.BANG TMP_647 
CONDITION TMP_648"];
7->8[label="True"];
7->11[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(! ownerGennezise[msg.sender])

IRs:
REF_331(bool) -> ownerGennezise[msg.sender]
TMP_649 = UnaryType.BANG REF_331 
TMP_650(None) = SOLIDITY_CALL require(bool)(TMP_649)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownerGennezise[msg.sender] = true

IRs:
REF_332(bool) -> ownerGennezise[msg.sender]
REF_332(bool) (->ownerGennezise) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
promo = true

IRs:
promo(bool) := True(bool)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
localdnk = privateContract.getNewRabbit(msg.sender)

IRs:
TMP_651(uint256) = HIGH_LEVEL_CALL, dest:privateContract(PrivateRabbitInterface), function:getNewRabbit, arguments:['msg.sender']  
localdnk(uint256) := TMP_651(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_Rabbit = Rabbit(0,0,block.number,0,0,0,0)

IRs:
TMP_652(BaseRabbit.Rabbit) = new Rabbit(0,0,block.number,0,0,0,0)
_Rabbit(BaseRabbit.Rabbit) := TMP_652(BaseRabbit.Rabbit)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
_bunnyid = uint32(rabbits.push(_Rabbit))

IRs:
REF_335 -> LENGTH rabbits
TMP_655(uint256) := REF_335(uint256)
TMP_656(uint256) = TMP_655 + 1
REF_335(uint256) (->rabbits) := TMP_656(uint256)
REF_336(BaseRabbit.Rabbit) -> rabbits[TMP_655]
REF_336(BaseRabbit.Rabbit) (->rabbits) := _Rabbit(BaseRabbit.Rabbit)
TMP_654 = CONVERT TMP_653 to uint32
_bunnyid(uint32) := TMP_654(uint32)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mapDNK[_bunnyid] = localdnk

IRs:
REF_337(uint256) -> mapDNK[_bunnyid]
REF_337(uint256) (->mapDNK) := localdnk(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
transferNewBunny(msg.sender,_bunnyid,localdnk,0,0,0)

IRs:
INTERNAL_CALL, BunnyGame.transferNewBunny(address,uint32,uint256,uint256,uint32,uint32)(msg.sender,_bunnyid,localdnk,0,0,0)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
lastTimeGen0 = now

IRs:
lastTimeGen0(uint256) := now(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lastIdGen0 = _bunnyid

IRs:
lastIdGen0(uint32) := _bunnyid(uint32)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
totalGen0 ++

IRs:
TMP_658(uint256) := totalGen0(uint256)
totalGen0(uint256) = totalGen0 + 1"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
setRabbitMother(_bunnyid,_matron)

IRs:
INTERNAL_CALL, BodyRabbit.setRabbitMother(uint32,uint32)(_bunnyid,_matron)"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
promo

IRs:
CONDITION promo"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
giffblock[_bunnyid] = true

IRs:
REF_338(bool) -> giffblock[_bunnyid]
REF_338(bool) (->giffblock) := True(bool)"];
23->24;
24[label="Node Type: END_IF 24
"];
}
// Function: 434.sol-BunnyGame-currentPrice(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
money = bunnyCost[_bunnyid]

IRs:
REF_215(uint256) -> bunnyCost[_bunnyid]
money(uint256) := REF_215(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
money > 0

IRs:
TMP_448(bool) = money > 0
CONDITION TMP_448"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
moneyComs = money.div(100)

IRs:
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['money', '100'] 
moneyComs(uint256) := TMP_449(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
moneyComs = moneyComs.mul(5)

IRs:
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['moneyComs', '5'] 
moneyComs(uint256) := TMP_450(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
money.add(moneyComs)

IRs:
TMP_451(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['money', 'moneyComs'] 
RETURN TMP_451"];
6[label="Node Type: END_IF 6
"];
}
// Function: 434.sol-BunnyGame-deleteSire(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
gen = rabbits[(_tokenId - 1)].genome

IRs:
TMP_746(uint32) = _tokenId - 1
REF_402(BaseRabbit.Rabbit) -> rabbits[TMP_746]
REF_403(uint256) -> REF_402.genome
gen(uint256) := REF_403(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = sireGenom[gen].length

IRs:
REF_404(uint32[]) -> sireGenom[gen]
REF_405 -> LENGTH REF_404
count(uint256) := REF_405(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < count

IRs:
TMP_747(bool) = i < count
CONDITION TMP_747"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
sireGenom[gen][i] == _tokenId

IRs:
REF_406(uint32[]) -> sireGenom[gen]
REF_407(uint32) -> REF_406[i]
TMP_748(bool) = REF_407 == _tokenId
CONDITION TMP_748"];
7->8[label="True"];
7->16[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete sireGenom[gen][i]

IRs:
REF_408(uint32[]) -> sireGenom[gen]
REF_409(uint32) -> REF_408[i]
REF_408 = delete REF_409 "];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
count > 0 && count != (i - 1)

IRs:
TMP_749(bool) = count > 0
TMP_750(uint256) = i - 1
TMP_751(bool) = count != TMP_750
TMP_752(bool) = TMP_749 && TMP_751
CONDITION TMP_752"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sireGenom[gen][i] = sireGenom[gen][(count - 1)]

IRs:
REF_410(uint32[]) -> sireGenom[gen]
REF_411(uint32) -> REF_410[i]
REF_412(uint32[]) -> sireGenom[gen]
TMP_753(uint256) = count - 1
REF_413(uint32) -> REF_412[TMP_753]
REF_411(uint32) (->sireGenom) := REF_413(uint32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete sireGenom[gen][(count - 1)]

IRs:
REF_414(uint32[]) -> sireGenom[gen]
TMP_754(uint256) = count - 1
REF_415(uint32) -> REF_414[TMP_754]
REF_414 = delete REF_415 "];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
sireGenom[gen].length --

IRs:
REF_416(uint32[]) -> sireGenom[gen]
REF_417 -> LENGTH REF_416
TMP_755(uint256) := REF_417(uint256)
REF_417(-> sireGenom) = REF_417 - 1"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ChengeSex(_tokenId,false,0)

IRs:
Emit ChengeSex(_tokenId,False,0)"];
14->15;
15[label="Node Type: RETURN 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_757(uint256) := i(uint256)
i(uint256) = i + 1"];
17->6;
}
// Function: 434.sol-BunnyGame-getBreed(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_bunny = _bunny - 1

IRs:
TMP_601(uint32) = _bunny - 1
_bunny(uint32) := TMP_601(uint32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_bunny == 0

IRs:
TMP_602(bool) = _bunny == 0
CONDITION TMP_602"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
birtTime = rabbits[_bunny].birthLastTime

IRs:
REF_315(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_316(uint256) -> REF_315.birthLastTime
birtTime(uint256) := REF_316(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
birthCount = rabbits[_bunny].birthCount

IRs:
REF_317(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_318(uint256) -> REF_317.birthCount
birthCount(uint256) := REF_318(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastTime = uint256(cooldowns[birthCount])

IRs:
REF_319(uint32) -> cooldowns[birthCount]
TMP_603 = CONVERT REF_319 to uint256
lastTime(uint256) := TMP_603(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lastTime = lastTime.add(birtTime)

IRs:
TMP_604(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lastTime', 'birtTime'] 
lastTime(uint256) := TMP_604(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
lastTime <= now && rabbits[_bunny].role == 0

IRs:
TMP_605(bool) = lastTime <= now
REF_321(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_322(uint256) -> REF_321.role
TMP_606(bool) = REF_322 == 0
TMP_607(bool) = TMP_605 && TMP_606
CONDITION TMP_607"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
interbreed = true

IRs:
interbreed(bool) := True(bool)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
interbreed

IRs:
RETURN interbreed"];
}
// Function: 434.sol-BunnyGame-getBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
price = getSirePrice(_bunny)

IRs:
TMP_594(uint256) = INTERNAL_CALL, BodyRabbit.getSirePrice(uint32)(_bunny)
price(uint256) := TMP_594(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_bunny = _bunny - 1

IRs:
TMP_595(uint32) = _bunny - 1
_bunny(uint32) := TMP_595(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
mother = rabbits[_bunny].mother

IRs:
REF_297(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_298(uint32) -> REF_297.mother
mother(uint32) := REF_298(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
sire = rabbits[_bunny].sire

IRs:
REF_299(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_300(uint32) -> REF_299.sire
sire(uint32) := REF_300(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
birthblock = rabbits[_bunny].birthblock

IRs:
REF_301(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_302(uint256) -> REF_301.birthblock
birthblock(uint256) := REF_302(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
birthCount = rabbits[_bunny].birthCount

IRs:
REF_303(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_304(uint256) -> REF_303.birthCount
birthCount(uint256) := REF_304(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
birthLastTime = rabbits[_bunny].birthLastTime

IRs:
REF_305(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_306(uint256) -> REF_305.birthLastTime
birthLastTime(uint256) := REF_306(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
role = rabbits[_bunny].role

IRs:
REF_307(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_308(uint256) -> REF_307.role
role(uint256) := REF_308(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
genome = rabbits[_bunny].genome

IRs:
REF_309(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_310(uint256) -> REF_309.genome
genome(uint256) := REF_310(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
birthCount > 14

IRs:
TMP_596(bool) = birthCount > 14
CONDITION TMP_596"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
birthCount = 14

IRs:
birthCount(uint256) := 14(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
motherSumm = motherCount[_bunny]

IRs:
REF_311(uint256) -> motherCount[_bunny]
motherSumm(uint256) := REF_311(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
lastTime = uint256(cooldowns[birthCount])

IRs:
REF_312(uint32) -> cooldowns[birthCount]
TMP_597 = CONVERT REF_312 to uint256
lastTime(uint256) := TMP_597(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lastTime = lastTime.add(birthLastTime)

IRs:
TMP_598(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lastTime', 'birthLastTime'] 
lastTime(uint256) := TMP_598(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
lastTime <= now

IRs:
TMP_599(bool) = lastTime <= now
CONDITION TMP_599"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
interbreed = true

IRs:
interbreed(bool) := True(bool)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
leftTime = lastTime.sub(now)

IRs:
TMP_600(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lastTime', 'now'] 
leftTime(uint256) := TMP_600(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(mother,sire,birthblock,birthCount,birthLastTime,role,genome,interbreed,leftTime,lastTime,price,motherSumm)

IRs:
RETURN mother,sire,birthblock,birthCount,birthLastTime,role,genome,interbreed,leftTime,lastTime,price,motherSumm"];
}
// Function: 434.sol-BunnyGame-getGenomeChildren(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
rabbits[(_matron - 1)].genome >= rabbits[(_sire - 1)].genome

IRs:
TMP_660(uint32) = _matron - 1
REF_339(BaseRabbit.Rabbit) -> rabbits[TMP_660]
REF_340(uint256) -> REF_339.genome
TMP_661(uint32) = _sire - 1
REF_341(BaseRabbit.Rabbit) -> rabbits[TMP_661]
REF_342(uint256) -> REF_341.genome
TMP_662(bool) = REF_340 >= REF_342
CONDITION TMP_662"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
genome = rabbits[(_matron - 1)].genome

IRs:
TMP_663(uint32) = _matron - 1
REF_343(BaseRabbit.Rabbit) -> rabbits[TMP_663]
REF_344(uint256) -> REF_343.genome
genome(uint256) := REF_344(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
genome = rabbits[(_sire - 1)].genome

IRs:
TMP_664(uint32) = _sire - 1
REF_345(BaseRabbit.Rabbit) -> rabbits[TMP_664]
REF_346(uint256) -> REF_345.genome
genome(uint256) := REF_346(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
genome.add(1)

IRs:
TMP_665(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['genome', '1'] 
RETURN TMP_665"];
}
// Function: 434.sol-BunnyGame-getGiffBlock(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! giffblock[_bunnyid]

IRs:
REF_295(bool) -> giffblock[_bunnyid]
TMP_593 = UnaryType.BANG REF_295 
RETURN TMP_593"];
}
// Function: 434.sol-BunnyGame-getMarketCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
marketCount

IRs:
RETURN marketCount"];
}
// Function: 434.sol-BunnyGame-getMoney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(this).balance >= _value)

IRs:
TMP_758 = CONVERT this to address
TMP_759(uint256) = SOLIDITY_CALL balance(address)(TMP_758)
TMP_760(bool) = TMP_759 >= _value
TMP_761(None) = SOLIDITY_CALL require(bool)(TMP_760)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney.transfer(_value)

IRs:
Transfer dest:ownerMoney value:_value"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 434.sol-BunnyGame-getMotherCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
motherCount[_mother]

IRs:
REF_282(uint256) -> motherCount[_mother]
RETURN REF_282"];
}
// Function: 434.sol-BunnyGame-getOwnerGennezise(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerGennezise[_to]

IRs:
REF_296(bool) -> ownerGennezise[_to]
RETURN REF_296"];
}
// Function: 434.sol-BunnyGame-getOwnerMoney()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerMoney

IRs:
RETURN ownerMoney"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-getOwnerServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerServer

IRs:
RETURN ownerServer"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-getPrivAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
privAddress

IRs:
RETURN privAddress"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-getRabbitDNK(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
mapDNK[bunnyid]

IRs:
REF_287(uint256) -> mapDNK[bunnyid]
RETURN REF_287"];
}
// Function: 434.sol-BunnyGame-getRabbitMother(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rabbitMother[mother]

IRs:
REF_284(uint32[5]) -> rabbitMother[mother]
RETURN REF_284"];
}
// Function: 434.sol-BunnyGame-getRabbitMotherSumm(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
m = 0

IRs:
m(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
m < 5

IRs:
TMP_554(bool) = m < 5
CONDITION TMP_554"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
rabbitMother[mother][m] != 0

IRs:
REF_285(uint32[5]) -> rabbitMother[mother]
REF_286(uint32) -> REF_285[m]
TMP_555(bool) = REF_286 != 0
CONDITION TMP_555"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count ++

IRs:
TMP_556(uint256) := count(uint256)
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
m ++

IRs:
TMP_557(uint256) := m(uint256)
m(uint256) = m + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 434.sol-BunnyGame-getSirePrice(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
rabbits[(_tokenId - 1)].role == 1

IRs:
TMP_499(uint32) = _tokenId - 1
REF_244(BaseRabbit.Rabbit) -> rabbits[TMP_499]
REF_245(uint256) -> REF_244.role
TMP_500(bool) = REF_245 == 1
CONDITION TMP_500"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
procent = (rabbitSirePrice[_tokenId] / 100)

IRs:
REF_246(uint256) -> rabbitSirePrice[_tokenId]
TMP_501(uint256) = REF_246 / 100
procent(uint256) := TMP_501(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
res = procent.mul(25)

IRs:
TMP_502(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['procent', '25'] 
res(uint256) := TMP_502(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
system = procent.mul(commission_system)

IRs:
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['procent', 'commission_system'] 
system(uint256) := TMP_503(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
res = res.add(rabbitSirePrice[_tokenId])

IRs:
REF_250(uint256) -> rabbitSirePrice[_tokenId]
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['res', 'REF_250'] 
res(uint256) := TMP_504(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
res.add(system)

IRs:
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['res', 'system'] 
RETURN TMP_505"];
7[label="Node Type: RETURN 7

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 434.sol-BunnyGame-getTokenOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
total = ownerBunnies[owner].length

IRs:
REF_260(uint32[]) -> ownerBunnies[owner]
REF_261 -> LENGTH REF_260
total(uint256) := REF_261(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
list = ownerBunnies[owner]

IRs:
REF_262(uint32[]) -> ownerBunnies[owner]
list(uint32[]) = ['REF_262(uint32[])']"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(total,list)

IRs:
RETURN total,list"];
}
// Function: 434.sol-BunnyGame-getTotalSalaryBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSalaryBunny[_bunny]

IRs:
REF_283(uint256) -> totalSalaryBunny[_bunny]
RETURN REF_283"];
}
// Function: 434.sol-BunnyGame-getcoolduwn(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cd = rabbits[(_mother - 1)].birthCount

IRs:
TMP_608(uint32) = _mother - 1
REF_323(BaseRabbit.Rabbit) -> rabbits[TMP_608]
REF_324(uint256) -> REF_323.birthCount
cd(uint256) := REF_324(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
cd > 14

IRs:
TMP_609(bool) = cd > 14
CONDITION TMP_609"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cd = 14

IRs:
cd(uint256) := 14(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastTime = (cooldowns[cd] + rabbits[(_mother - 1)].birthLastTime)

IRs:
REF_325(uint32) -> cooldowns[cd]
TMP_610(uint32) = _mother - 1
REF_326(BaseRabbit.Rabbit) -> rabbits[TMP_610]
REF_327(uint256) -> REF_326.birthLastTime
TMP_611(uint32) = REF_325 + REF_327
lastTime(uint256) := TMP_611(uint32)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
lastTime > now

IRs:
TMP_612(bool) = lastTime > now
CONDITION TMP_612"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
lefttime = lastTime.sub(now)

IRs:
TMP_613(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lastTime', 'now'] 
lefttime(uint256) := TMP_613(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(lastTime,cd,lefttime)

IRs:
RETURN lastTime,cd,lefttime"];
}
// Function: 434.sol-BunnyGame-giff(uint32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(rabbitToOwner[bunnyid] == msg.sender)

IRs:
REF_226(address) -> rabbitToOwner[bunnyid]
TMP_481(bool) = REF_226 == msg.sender
TMP_482(None) = SOLIDITY_CALL require(bool)(TMP_481)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! (giffblock[bunnyid]))

IRs:
REF_227(bool) -> giffblock[bunnyid]
TMP_483 = UnaryType.BANG REF_227 
TMP_484(None) = SOLIDITY_CALL require(bool)(TMP_483)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferFrom(msg.sender,add,bunnyid)

IRs:
TMP_485(bool) = INTERNAL_CALL, BodyRabbit.transferFrom(address,address,uint32)(msg.sender,add,bunnyid)"];
}
// Function: 434.sol-BunnyGame-isPauseSave()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! pauseSave

IRs:
TMP_531 = UnaryType.BANG pauseSave 
RETURN TMP_531"];
}
// Function: 434.sol-BunnyGame-isPriv()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
privateContract.isUIntPrivate()

IRs:
TMP_488(bool) = HIGH_LEVEL_CALL, dest:privateContract(PrivateRabbitInterface), function:isUIntPrivate, arguments:[]  
RETURN TMP_488"];
}
// Function: 434.sol-BunnyGame-isPromoPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == ownerServer || msg.sender == ownerCEO

IRs:
TMP_532(bool) = msg.sender == ownerServer
TMP_533(bool) = msg.sender == ownerCEO
TMP_534(bool) = TMP_532 || TMP_533
CONDITION TMP_534"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
! promoPause

IRs:
TMP_535 = UnaryType.BANG promoPause 
RETURN TMP_535"];
}
// Function: 434.sol-BunnyGame-isUIntPublic()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 434.sol-BunnyGame-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerCEO)

IRs:
TMP_784(bool) = msg.sender == ownerCEO
TMP_785(None) = SOLIDITY_CALL require(bool)(TMP_784)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BunnyGame-onlyServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerServer || msg.sender == ownerCEO)

IRs:
TMP_786(bool) = msg.sender == ownerServer
TMP_787(bool) = msg.sender == ownerCEO
TMP_788(bool) = TMP_786 || TMP_787
TMP_789(None) = SOLIDITY_CALL require(bool)(TMP_788)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BunnyGame-ownerOf(uint32)
digraph{
}
// Function: 434.sol-BunnyGame-removeTokenList(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = ownerBunnies[_owner].length

IRs:
REF_230(uint32[]) -> ownerBunnies[_owner]
REF_231 -> LENGTH REF_230
count(uint256) := REF_231(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < count

IRs:
TMP_489(bool) = i < count
CONDITION TMP_489"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
ownerBunnies[_owner][i] == _tokenId

IRs:
REF_232(uint32[]) -> ownerBunnies[_owner]
REF_233(uint32) -> REF_232[i]
TMP_490(bool) = REF_233 == _tokenId
CONDITION TMP_490"];
6->7[label="True"];
6->14[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete ownerBunnies[_owner][i]

IRs:
REF_234(uint32[]) -> ownerBunnies[_owner]
REF_235(uint32) -> REF_234[i]
REF_234 = delete REF_235 "];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
count > 0 && count != (i - 1)

IRs:
TMP_491(bool) = count > 0
TMP_492(uint256) = i - 1
TMP_493(bool) = count != TMP_492
TMP_494(bool) = TMP_491 && TMP_493
CONDITION TMP_494"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownerBunnies[_owner][i] = ownerBunnies[_owner][(count - 1)]

IRs:
REF_236(uint32[]) -> ownerBunnies[_owner]
REF_237(uint32) -> REF_236[i]
REF_238(uint32[]) -> ownerBunnies[_owner]
TMP_495(uint256) = count - 1
REF_239(uint32) -> REF_238[TMP_495]
REF_237(uint32) (->ownerBunnies) := REF_239(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete ownerBunnies[_owner][(count - 1)]

IRs:
REF_240(uint32[]) -> ownerBunnies[_owner]
TMP_496(uint256) = count - 1
REF_241(uint32) -> REF_240[TMP_496]
REF_240 = delete REF_241 "];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerBunnies[_owner].length --

IRs:
REF_242(uint32[]) -> ownerBunnies[_owner]
REF_243 -> LENGTH REF_242
TMP_497(uint256) := REF_243(uint256)
REF_243(-> ownerBunnies) = REF_243 - 1"];
12->13;
13[label="Node Type: RETURN 13
"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_498(uint256) := i(uint256)
i(uint256) = i + 1"];
15->5;
}
// Function: 434.sol-BunnyGame-sendMoney(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_to.transfer((_money / 100) * 95)

IRs:
TMP_587(uint256) = _money / 100
TMP_588(uint256) = TMP_587 * 95
Transfer dest:_to value:TMP_588"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney.transfer((_money / 100) * 5)

IRs:
TMP_590(uint256) = _money / 100
TMP_591(uint256) = TMP_590 * 5
Transfer dest:ownerMoney value:TMP_591"];
}
// Function: 434.sol-BunnyGame-setMoneyRange(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
moneyRange = _money

IRs:
moneyRange(uint256) := _money(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-setMotherCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
motherCount[_mother] = motherCount[_mother].add(1)

IRs:
REF_277(uint256) -> motherCount[_mother]
REF_278(uint256) -> motherCount[_mother]
TMP_552(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_278', '1'] 
REF_277(uint256) (->motherCount) := TMP_552(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EmotherCount(_mother,motherCount[_mother])

IRs:
REF_280(uint256) -> motherCount[_mother]
Emit EmotherCount(_mother,REF_280)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
motherCount[_mother]

IRs:
REF_281(uint256) -> motherCount[_mother]
RETURN REF_281"];
}
// Function: 434.sol-BunnyGame-setPauseSave()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
pauseSave = ! pauseSave

IRs:
TMP_536 = UnaryType.BANG pauseSave 
pauseSave(bool) := TMP_536(bool)
RETURN pauseSave"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-setPriv(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
privAddress = _privAddress

IRs:
privAddress(address) := _privAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
privateContract = PrivateRabbitInterface(_privAddress)

IRs:
TMP_486 = CONVERT _privAddress to PrivateRabbitInterface
privateContract(PrivateRabbitInterface) := TMP_486(PrivateRabbitInterface)"];
}
// Function: 434.sol-BunnyGame-setPromoGen0(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoGen0 = _promoGen0

IRs:
promoGen0(uint256) := _promoGen0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-setPromoMoney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoMoney = _promoMoney

IRs:
promoMoney(uint256) := _promoMoney(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-setPromoPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoPause = ! promoPause

IRs:
TMP_615 = UnaryType.BANG promoPause 
promoPause(bool) := TMP_615(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-setRabbitMother(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(children != mother)

IRs:
TMP_538(bool) = children != mother
TMP_539(None) = SOLIDITY_CALL require(bool)(TMP_538)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
mother == 0

IRs:
TMP_540(bool) = mother == 0
CONDITION TMP_540"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
start = 0

IRs:
start(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->17;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < 5

IRs:
TMP_541(bool) = i < 5
CONDITION TMP_541"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
rabbitMother[mother][i] != 0

IRs:
REF_263(uint32[5]) -> rabbitMother[mother]
REF_264(uint32) -> REF_263[i]
TMP_542(bool) = REF_264 != 0
CONDITION TMP_542"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pullMother[start] = uint32(rabbitMother[mother][i])

IRs:
REF_265(uint32) -> pullMother[start]
REF_266(uint32[5]) -> rabbitMother[mother]
REF_267(uint32) -> REF_266[i]
TMP_543 = CONVERT REF_267 to uint32
REF_265(uint32) (->pullMother) := TMP_543(uint32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
rabbitMother[mother][i] = 0

IRs:
REF_268(uint32[5]) -> rabbitMother[mother]
REF_269(uint32) -> REF_268[i]
REF_269(uint32) (->rabbitMother) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
start ++

IRs:
TMP_544(uint256) := start(uint256)
start(uint256) = start + 1"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_545(uint256) := i(uint256)
i(uint256) = i + 1"];
16->10;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
pullMother[start] = mother

IRs:
REF_270(uint32) -> pullMother[start]
REF_270(uint32) (->pullMother) := mother(uint32)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
start ++

IRs:
TMP_546(uint256) := start(uint256)
start(uint256) = start + 1"];
18->21;
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->28;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
m = 0

IRs:
m(uint256) := 0(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
m < 5

IRs:
TMP_547(bool) = m < 5
CONDITION TMP_547"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: IF 23

EXPRESSION:
start > 5

IRs:
TMP_548(bool) = start > 5
CONDITION TMP_548"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
rabbitMother[children][m] = pullMother[(m + 1)]

IRs:
REF_271(uint32[5]) -> rabbitMother[children]
REF_272(uint32) -> REF_271[m]
TMP_549(uint256) = m + 1
REF_273(uint32) -> pullMother[TMP_549]
REF_272(uint32) (->rabbitMother) := REF_273(uint32)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
rabbitMother[children][m] = pullMother[m]

IRs:
REF_274(uint32[5]) -> rabbitMother[children]
REF_275(uint32) -> REF_274[m]
REF_276(uint32) -> pullMother[m]
REF_275(uint32) (->rabbitMother) := REF_276(uint32)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
m ++

IRs:
TMP_550(uint256) := m(uint256)
m(uint256) = m + 1"];
27->22;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
setMotherCount(mother)

IRs:
TMP_551(uint256) = INTERNAL_CALL, BodyRabbit.setMotherCount(uint32)(mother)"];
}
// Function: 434.sol-BunnyGame-setRabbitSirePrice(uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_721(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_722(None) = SOLIDITY_CALL require(bool)(TMP_721)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rabbitToOwner[_rabbitid] == msg.sender)

IRs:
REF_385(address) -> rabbitToOwner[_rabbitid]
TMP_723(bool) = REF_385 == msg.sender
TMP_724(None) = SOLIDITY_CALL require(bool)(TMP_723)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(price > bigPrice)

IRs:
TMP_725(bool) = price > bigPrice
TMP_726(None) = SOLIDITY_CALL require(bool)(TMP_725)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
(lastTime,None,None) = getcoolduwn(_rabbitid)

IRs:
TUPLE_0(uint256,uint256,uint256) = INTERNAL_CALL, BodyRabbit.getcoolduwn(uint32)(_rabbitid)
lastTime(uint256)= UNPACK TUPLE_0 index: 0 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(now >= lastTime)

IRs:
TMP_727(bool) = now >= lastTime
TMP_728(None) = SOLIDITY_CALL require(bool)(TMP_727)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
rabbits[(_rabbitid - 1)].role == 1 && rabbitSirePrice[_rabbitid] == price

IRs:
TMP_729(uint32) = _rabbitid - 1
REF_386(BaseRabbit.Rabbit) -> rabbits[TMP_729]
REF_387(uint256) -> REF_386.role
TMP_730(bool) = REF_387 == 1
REF_388(uint256) -> rabbitSirePrice[_rabbitid]
TMP_731(bool) = REF_388 == price
TMP_732(bool) = TMP_730 && TMP_731
CONDITION TMP_732"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
rabbits[(_rabbitid - 1)].role = 1

IRs:
TMP_733(uint32) = _rabbitid - 1
REF_389(BaseRabbit.Rabbit) -> rabbits[TMP_733]
REF_390(uint256) -> REF_389.role
REF_390(uint256) (->rabbits) := 1(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
rabbitSirePrice[_rabbitid] = price

IRs:
REF_391(uint256) -> rabbitSirePrice[_rabbitid]
REF_391(uint256) (->rabbitSirePrice) := price(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
gen = rabbits[(_rabbitid - 1)].genome

IRs:
TMP_734(uint32) = _rabbitid - 1
REF_392(BaseRabbit.Rabbit) -> rabbits[TMP_734]
REF_393(uint256) -> REF_392.genome
gen(uint256) := REF_393(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
sireGenom[gen].push(_rabbitid)

IRs:
REF_394(uint32[]) -> sireGenom[gen]
REF_396 -> LENGTH REF_394
TMP_736(uint256) := REF_396(uint256)
TMP_737(uint256) = TMP_736 + 1
REF_396(uint256) (->sireGenom) := TMP_737(uint256)
REF_397(uint32) -> REF_394[TMP_736]
REF_397(uint32) (->sireGenom) := _rabbitid(uint32)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ChengeSex(_rabbitid,true,getSirePrice(_rabbitid))

IRs:
TMP_738(uint256) = INTERNAL_CALL, BodyRabbit.getSirePrice(uint32)(_rabbitid)
Emit ChengeSex(_rabbitid,True,TMP_738)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 434.sol-BunnyGame-setSireStop(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_740(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_741(None) = SOLIDITY_CALL require(bool)(TMP_740)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rabbitToOwner[_rabbitid] == msg.sender)

IRs:
REF_398(address) -> rabbitToOwner[_rabbitid]
TMP_742(bool) = REF_398 == msg.sender
TMP_743(None) = SOLIDITY_CALL require(bool)(TMP_742)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rabbits[(_rabbitid - 1)].role = 0

IRs:
TMP_744(uint32) = _rabbitid - 1
REF_399(BaseRabbit.Rabbit) -> rabbits[TMP_744]
REF_400(uint256) -> REF_399.role
REF_400(uint256) (->rabbits) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rabbitSirePrice[_rabbitid] = 0

IRs:
REF_401(uint256) -> rabbitSirePrice[_rabbitid]
REF_401(uint256) (->rabbitSirePrice) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
deleteSire(_rabbitid)

IRs:
INTERNAL_CALL, BunnyGame.deleteSire(uint32)(_rabbitid)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 434.sol-BunnyGame-setStepMoney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stepMoney = money

IRs:
stepMoney(uint256) := money(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-setTimeRangeGen0(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
timeRangeCreateGen0 = _sec

IRs:
timeRangeCreateGen0(uint256) := _sec(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-BunnyGame-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CryptoRabbits

IRs:
name(string) := CryptoRabbits(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CRB

IRs:
symbol(string) := CRB(string)"];
}
// Function: 434.sol-BunnyGame-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
myAddr_test = 0x982a49414fD95e3268D3559540A67B03e40AcD64

IRs:
myAddr_test(address) := 868709609884926412840050907305519079164645920100(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
pauseSave = false

IRs:
pauseSave(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
bigPrice = 500000000000000

IRs:
bigPrice(uint256) := 500000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
commission_system = 5

IRs:
commission_system(uint256) := 5(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalGen0 = 0

IRs:
totalGen0(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
timeRangeCreateGen0 = 1

IRs:
timeRangeCreateGen0(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
promoGen0 = 2500

IRs:
promoGen0(uint256) := 2500(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
promoMoney = 1 * bigPrice

IRs:
TMP_764(uint256) = 1 * bigPrice
promoMoney(uint256) := TMP_764(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
promoPause = false

IRs:
promoPause(bool) := False(bool)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
cooldowns = (uint32(60),uint32(120),uint32(240),uint32(480),uint32(960),uint32(1920),uint32(3600),uint32(7200),uint32(14400),uint32(28800),uint32(57600),uint32(86400))

IRs:
TMP_765 = CONVERT 60 to uint32
TMP_766 = CONVERT 120 to uint32
TMP_767 = CONVERT 240 to uint32
TMP_768 = CONVERT 480 to uint32
TMP_769 = CONVERT 960 to uint32
TMP_770 = CONVERT 1920 to uint32
TMP_771 = CONVERT 3600 to uint32
TMP_772 = CONVERT 7200 to uint32
TMP_773 = CONVERT 14400 to uint32
TMP_774 = CONVERT 28800 to uint32
TMP_775 = CONVERT 57600 to uint32
TMP_776 = CONVERT 86400 to uint32
cooldowns(uint32[12]) = ['TMP_765(uint32)', 'TMP_766(uint32)', 'TMP_767(uint32)', 'TMP_768(uint32)', 'TMP_769(uint32)', 'TMP_770(uint32)', 'TMP_771(uint32)', 'TMP_772(uint32)', 'TMP_773(uint32)', 'TMP_774(uint32)', 'TMP_775(uint32)', 'TMP_776(uint32)']"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
totalBunny = 0

IRs:
totalBunny(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
fcontr = false

IRs:
fcontr(bool) := False(bool)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
stepMoney = 2 * 60 * 60

IRs:
TMP_777(uint256) = 2 * 60
TMP_778(uint256) = TMP_777 * 60
stepMoney(uint256) := TMP_778(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
marketCount = 0

IRs:
marketCount(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
daysperiod = 1

IRs:
daysperiod(uint256) := 1(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
sec = 1

IRs:
sec(uint256) := 1(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
middlelast = 20

IRs:
middlelast(uint8) := 20(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
middlePriceMoney = 1

IRs:
middlePriceMoney(uint256) := 1(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
middleSaleTime = 0

IRs:
middleSaleTime(uint256) := 0(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
lastmoney = 0

IRs:
lastmoney(uint256) := 0(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
totalClosedBID = 0

IRs:
totalClosedBID(uint256) := 0(uint256)"];
}
// Function: 434.sol-BunnyGame-startMarket(uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_452(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_453(None) = SOLIDITY_CALL require(bool)(TMP_452)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_money >= bigPrice)

IRs:
TMP_454(bool) = _money >= bigPrice
TMP_455(None) = SOLIDITY_CALL require(bool)(TMP_454)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(rabbitToOwner[_bunnyid] == msg.sender)

IRs:
REF_219(address) -> rabbitToOwner[_bunnyid]
TMP_456(bool) = REF_219 == msg.sender
TMP_457(None) = SOLIDITY_CALL require(bool)(TMP_456)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bunnyCost[_bunnyid] = _money

IRs:
REF_220(uint256) -> bunnyCost[_bunnyid]
REF_220(uint256) (->bunnyCost) := _money(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
StartMarket(_bunnyid,_money)

IRs:
Emit StartMarket(_bunnyid,_money)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
marketCount ++

IRs:
TMP_459(uint256) := marketCount(uint256)
marketCount(uint256) = marketCount + 1
RETURN TMP_459"];
}
// Function: 434.sol-BunnyGame-stopMarket(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_460(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_461(None) = SOLIDITY_CALL require(bool)(TMP_460)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rabbitToOwner[_bunnyid] == msg.sender)

IRs:
REF_221(address) -> rabbitToOwner[_bunnyid]
TMP_462(bool) = REF_221 == msg.sender
TMP_463(None) = SOLIDITY_CALL require(bool)(TMP_462)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bunnyCost[_bunnyid] = 0

IRs:
REF_222(uint256) -> bunnyCost[_bunnyid]
REF_222(uint256) (->bunnyCost) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
StopMarket(_bunnyid)

IRs:
Emit StopMarket(_bunnyid)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
marketCount --

IRs:
TMP_465(uint256) := marketCount(uint256)
marketCount(uint256) = marketCount - 1
RETURN TMP_465"];
}
// Function: 434.sol-BunnyGame-timeRange()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((lastTimeGen0 + timeRangeCreateGen0) < now)

IRs:
TMP_781(uint256) = lastTimeGen0 + timeRangeCreateGen0
TMP_782(bool) = TMP_781 < now
TMP_783(None) = SOLIDITY_CALL require(bool)(TMP_782)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-BunnyGame-totalSupply()
digraph{
}
// Function: 434.sol-BunnyGame-transfer(address,uint32)
digraph{
}
// Function: 434.sol-BunnyGame-transferFrom(address,address,uint32)
digraph{
}
// Function: 434.sol-BunnyGame-transferNewBunny(address,uint32,uint256,uint256,uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
NewBunny(_bunnyid,localdnk,block.number,breed)

IRs:
Emit NewBunny(_bunnyid,localdnk,block.number,breed)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
CreateChildren(matron,sire,_bunnyid)

IRs:
Emit CreateChildren(matron,sire,_bunnyid)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addTokenList(_to,_bunnyid)

IRs:
INTERNAL_CALL, BodyRabbit.addTokenList(address,uint32)(_to,_bunnyid)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSalaryBunny[_bunnyid] = 0

IRs:
REF_329(uint256) -> totalSalaryBunny[_bunnyid]
REF_329(uint256) (->totalSalaryBunny) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
motherCount[_bunnyid] = 0

IRs:
REF_330(uint256) -> motherCount[_bunnyid]
REF_330(uint256) (->motherCount) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalBunny ++

IRs:
TMP_633(uint256) := totalBunny(uint256)
totalBunny(uint256) = totalBunny + 1"];
}
// Function: 434.sol-BunnyGame-transferOwnerMoney(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_ownerMoney != address(0)

IRs:
TMP_624 = CONVERT 0 to address
TMP_625(bool) = _ownerMoney != TMP_624
CONDITION TMP_625"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney = _ownerMoney

IRs:
ownerMoney(address) := _ownerMoney(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BunnyGame-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_618 = CONVERT 0 to address
TMP_619(bool) = add != TMP_618
CONDITION TMP_619"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerCEO = add

IRs:
ownerCEO(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BunnyGame-transferOwnershipServer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_621 = CONVERT 0 to address
TMP_622(bool) = add != TMP_621
CONDITION TMP_622"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = add

IRs:
ownerServer(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-BunnyGame-uintToBytes(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
v == 0

IRs:
TMP_575(bool) = v == 0
CONDITION TMP_575"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ret = 0

IRs:
ret(bytes32) := 0(string)"];
2->9;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
v > 0

IRs:
TMP_576(bool) = v > 0
CONDITION TMP_576"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ret = bytes32(uint256(ret) / (2 ** 8))

IRs:
TMP_577 = CONVERT ret to uint256
TMP_578(uint256) = 2 ** 8
TMP_579(uint256) = TMP_577 / TMP_578
TMP_580 = CONVERT TMP_579 to bytes32
ret(bytes32) := TMP_580(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31))

IRs:
TMP_581(uint256) = v % 10
TMP_582(uint256) = TMP_581 + 48
TMP_583(uint256) = 8 * 31
TMP_584(uint256) = 2 ** TMP_583
TMP_585(uint256) = TMP_582 * TMP_584
TMP_586 = CONVERT TMP_585 to bytes32
ret(bytes32) = ret | TMP_586"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
v /= 10

IRs:
v(uint256) = v / 10"];
7->4;
8[label="Node Type: END_LOOP 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
ret

IRs:
RETURN ret"];
11[label="Node Type: RETURN 11

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 434.sol-ERC721-approve(address,uint32)
digraph{
}
// Function: 434.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 434.sol-ERC721-ownerOf(uint32)
digraph{
}
// Function: 434.sol-ERC721-totalSupply()
digraph{
}
// Function: 434.sol-ERC721-transfer(address,uint32)
digraph{
}
// Function: 434.sol-ERC721-transferFrom(address,address,uint32)
digraph{
}
// Function: 434.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerCEO = msg.sender

IRs:
ownerCEO(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = msg.sender

IRs:
ownerServer(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerMoney = msg.sender

IRs:
ownerMoney(address) := msg.sender(address)"];
}
// Function: 434.sol-Ownable-getOwnerMoney()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerMoney

IRs:
RETURN ownerMoney"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-Ownable-getOwnerServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerServer

IRs:
RETURN ownerServer"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-Ownable-getPrivAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
privAddress

IRs:
RETURN privAddress"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerCEO)

IRs:
TMP_12(bool) = msg.sender == ownerCEO
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-Ownable-onlyServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerServer || msg.sender == ownerCEO)

IRs:
TMP_14(bool) = msg.sender == ownerServer
TMP_15(bool) = msg.sender == ownerCEO
TMP_16(bool) = TMP_14 || TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-Ownable-transferOwnerMoney(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_ownerMoney != address(0)

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = _ownerMoney != TMP_6
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney = _ownerMoney

IRs:
ownerMoney(address) := _ownerMoney(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = add != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerCEO = add

IRs:
ownerCEO(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-Ownable-transferOwnershipServer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_3 = CONVERT 0 to address
TMP_4(bool) = add != TMP_3
CONDITION TMP_4"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = add

IRs:
ownerServer(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-PrivateRabbitInterface-getNewRabbit(address)
digraph{
}
// Function: 434.sol-PrivateRabbitInterface-isUIntPrivate()
digraph{
}
// Function: 434.sol-PrivateRabbitInterface-mixDNK(uint256,uint256,uint256)
digraph{
}
// Function: 434.sol-RabbitMarket-addTokenList(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerBunnies[owner].push(_tokenId)

IRs:
REF_125(uint32[]) -> ownerBunnies[owner]
REF_127 -> LENGTH REF_125
TMP_257(uint256) := REF_127(uint256)
TMP_258(uint256) = TMP_257 + 1
REF_127(uint256) (->ownerBunnies) := TMP_258(uint256)
REF_128(uint32) -> REF_125[TMP_257]
REF_128(uint32) (->ownerBunnies) := _tokenId(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerBunnies(owner,_tokenId)

IRs:
Emit OwnerBunnies(owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rabbitToOwner[_tokenId] = owner

IRs:
REF_129(address) -> rabbitToOwner[_tokenId]
REF_129(address) (->rabbitToOwner) := owner(address)"];
}
// Function: 434.sol-RabbitMarket-approve(address,uint32)
digraph{
}
// Function: 434.sol-RabbitMarket-balanceOf(address)
digraph{
}
// Function: 434.sol-RabbitMarket-buyBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_400(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_401(None) = SOLIDITY_CALL require(bool)(TMP_400)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rabbitToOwner[_bunnyid] != msg.sender)

IRs:
REF_210(address) -> rabbitToOwner[_bunnyid]
TMP_402(bool) = REF_210 != msg.sender
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
price = currentPrice(_bunnyid)

IRs:
TMP_404(uint256) = INTERNAL_CALL, RabbitMarket.currentPrice(uint32)(_bunnyid)
price(uint256) := TMP_404(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value >= price && 0 != price)

IRs:
TMP_405(bool) = msg.value >= price
TMP_406(bool) = 0 != price
TMP_407(bool) = TMP_405 && TMP_406
TMP_408(None) = SOLIDITY_CALL require(bool)(TMP_407)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalClosedBID ++

IRs:
TMP_409(uint256) := totalClosedBID(uint256)
totalClosedBID(uint256) = totalClosedBID + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
sendMoney(rabbitToOwner[_bunnyid],msg.value)

IRs:
REF_211(address) -> rabbitToOwner[_bunnyid]
INTERNAL_CALL, BodyRabbit.sendMoney(address,uint256)(REF_211,msg.value)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transferFrom(rabbitToOwner[_bunnyid],msg.sender,_bunnyid)

IRs:
REF_212(address) -> rabbitToOwner[_bunnyid]
TMP_411(bool) = INTERNAL_CALL, BodyRabbit.transferFrom(address,address,uint32)(REF_212,msg.sender,_bunnyid)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
stopMarket(_bunnyid)

IRs:
TMP_412(uint256) = INTERNAL_CALL, RabbitMarket.stopMarket(uint32)(_bunnyid)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
BunnyBuy(_bunnyid,price)

IRs:
Emit BunnyBuy(_bunnyid,price)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
SendBunny(msg.sender,_bunnyid)

IRs:
Emit SendBunny(msg.sender,_bunnyid)"];
}
// Function: 434.sol-RabbitMarket-bytes32ToString(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bytesString = new bytes(32)

IRs:
TMP_309 = new bytes(32)
bytesString(bytes) := TMP_309(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
charCount = 0

IRs:
charCount(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->13;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
j < 32

IRs:
TMP_310(bool) = j < 32
CONDITION TMP_310"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
char = bytes1(bytes32(uint256(x) * 2 ** (8 * j)))

IRs:
TMP_311 = CONVERT x to uint256
TMP_312(uint256) = 8 * j
TMP_313(uint256) = 2 ** TMP_312
TMP_314(uint256) = TMP_311 * TMP_313
TMP_315 = CONVERT TMP_314 to bytes32
TMP_316 = CONVERT TMP_315 to bytes1
char(bytes1) := TMP_316(bytes1)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
char != 0

IRs:
TMP_317(bool) = char != 0
CONDITION TMP_317"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
bytesString[charCount] = char

IRs:
REF_161(bytes1) -> bytesString[charCount]
REF_161(bytes1) (->bytesString) := char(bytes1)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
charCount ++

IRs:
TMP_318(uint256) := charCount(uint256)
charCount(uint256) = charCount + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j ++

IRs:
TMP_319(uint256) := j(uint256)
j(uint256) = j + 1"];
12->6;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
bytesStringTrimmed = new bytes(charCount)

IRs:
TMP_321 = new bytes(charCount)
bytesStringTrimmed(bytes) := TMP_321(bytes)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < charCount

IRs:
TMP_322(bool) = j < charCount
CONDITION TMP_322"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
bytesStringTrimmed[j] = bytesString[j]

IRs:
REF_162(None) -> bytesStringTrimmed[j]
REF_163(None) -> bytesString[j]
REF_162(None) (->bytesStringTrimmed) := REF_163(None)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
j ++

IRs:
TMP_323(uint256) := j(uint256)
j(uint256) = j + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
string(bytesStringTrimmed)

IRs:
TMP_324 = CONVERT bytesStringTrimmed to string
RETURN TMP_324"];
}
// Function: 434.sol-RabbitMarket-checkPrivate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPriv())

IRs:
TMP_435(bool) = INTERNAL_CALL, BodyRabbit.isPriv()()
TMP_436(None) = SOLIDITY_CALL require(bool)(TMP_435)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-RabbitMarket-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerCEO = msg.sender

IRs:
ownerCEO(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = msg.sender

IRs:
ownerServer(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerMoney = msg.sender

IRs:
ownerMoney(address) := msg.sender(address)"];
}
// Function: 434.sol-RabbitMarket-currentPrice(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
money = bunnyCost[_bunnyid]

IRs:
REF_202(uint256) -> bunnyCost[_bunnyid]
money(uint256) := REF_202(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
money > 0

IRs:
TMP_382(bool) = money > 0
CONDITION TMP_382"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
moneyComs = money.div(100)

IRs:
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['money', '100'] 
moneyComs(uint256) := TMP_383(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
moneyComs = moneyComs.mul(5)

IRs:
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['moneyComs', '5'] 
moneyComs(uint256) := TMP_384(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
money.add(moneyComs)

IRs:
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['money', 'moneyComs'] 
RETURN TMP_385"];
6[label="Node Type: END_IF 6
"];
}
// Function: 434.sol-RabbitMarket-getBreed(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_bunny = _bunny - 1

IRs:
TMP_351(uint32) = _bunny - 1
_bunny(uint32) := TMP_351(uint32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_bunny == 0

IRs:
TMP_352(bool) = _bunny == 0
CONDITION TMP_352"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
birtTime = rabbits[_bunny].birthLastTime

IRs:
REF_188(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_189(uint256) -> REF_188.birthLastTime
birtTime(uint256) := REF_189(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
birthCount = rabbits[_bunny].birthCount

IRs:
REF_190(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_191(uint256) -> REF_190.birthCount
birthCount(uint256) := REF_191(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastTime = uint256(cooldowns[birthCount])

IRs:
REF_192(uint32) -> cooldowns[birthCount]
TMP_353 = CONVERT REF_192 to uint256
lastTime(uint256) := TMP_353(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lastTime = lastTime.add(birtTime)

IRs:
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lastTime', 'birtTime'] 
lastTime(uint256) := TMP_354(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
lastTime <= now && rabbits[_bunny].role == 0

IRs:
TMP_355(bool) = lastTime <= now
REF_194(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_195(uint256) -> REF_194.role
TMP_356(bool) = REF_195 == 0
TMP_357(bool) = TMP_355 && TMP_356
CONDITION TMP_357"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
interbreed = true

IRs:
interbreed(bool) := True(bool)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
interbreed

IRs:
RETURN interbreed"];
}
// Function: 434.sol-RabbitMarket-getBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
price = getSirePrice(_bunny)

IRs:
TMP_344(uint256) = INTERNAL_CALL, BodyRabbit.getSirePrice(uint32)(_bunny)
price(uint256) := TMP_344(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_bunny = _bunny - 1

IRs:
TMP_345(uint32) = _bunny - 1
_bunny(uint32) := TMP_345(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
mother = rabbits[_bunny].mother

IRs:
REF_170(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_171(uint32) -> REF_170.mother
mother(uint32) := REF_171(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
sire = rabbits[_bunny].sire

IRs:
REF_172(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_173(uint32) -> REF_172.sire
sire(uint32) := REF_173(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
birthblock = rabbits[_bunny].birthblock

IRs:
REF_174(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_175(uint256) -> REF_174.birthblock
birthblock(uint256) := REF_175(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
birthCount = rabbits[_bunny].birthCount

IRs:
REF_176(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_177(uint256) -> REF_176.birthCount
birthCount(uint256) := REF_177(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
birthLastTime = rabbits[_bunny].birthLastTime

IRs:
REF_178(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_179(uint256) -> REF_178.birthLastTime
birthLastTime(uint256) := REF_179(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
role = rabbits[_bunny].role

IRs:
REF_180(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_181(uint256) -> REF_180.role
role(uint256) := REF_181(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
genome = rabbits[_bunny].genome

IRs:
REF_182(BaseRabbit.Rabbit) -> rabbits[_bunny]
REF_183(uint256) -> REF_182.genome
genome(uint256) := REF_183(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
birthCount > 14

IRs:
TMP_346(bool) = birthCount > 14
CONDITION TMP_346"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
birthCount = 14

IRs:
birthCount(uint256) := 14(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
motherSumm = motherCount[_bunny]

IRs:
REF_184(uint256) -> motherCount[_bunny]
motherSumm(uint256) := REF_184(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
lastTime = uint256(cooldowns[birthCount])

IRs:
REF_185(uint32) -> cooldowns[birthCount]
TMP_347 = CONVERT REF_185 to uint256
lastTime(uint256) := TMP_347(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lastTime = lastTime.add(birthLastTime)

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lastTime', 'birthLastTime'] 
lastTime(uint256) := TMP_348(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
lastTime <= now

IRs:
TMP_349(bool) = lastTime <= now
CONDITION TMP_349"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
interbreed = true

IRs:
interbreed(bool) := True(bool)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
leftTime = lastTime.sub(now)

IRs:
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lastTime', 'now'] 
leftTime(uint256) := TMP_350(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(mother,sire,birthblock,birthCount,birthLastTime,role,genome,interbreed,leftTime,lastTime,price,motherSumm)

IRs:
RETURN mother,sire,birthblock,birthCount,birthLastTime,role,genome,interbreed,leftTime,lastTime,price,motherSumm"];
}
// Function: 434.sol-RabbitMarket-getGiffBlock(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! giffblock[_bunnyid]

IRs:
REF_168(bool) -> giffblock[_bunnyid]
TMP_343 = UnaryType.BANG REF_168 
RETURN TMP_343"];
}
// Function: 434.sol-RabbitMarket-getMarketCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
marketCount

IRs:
RETURN marketCount"];
}
// Function: 434.sol-RabbitMarket-getMotherCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
motherCount[_mother]

IRs:
REF_155(uint256) -> motherCount[_mother]
RETURN REF_155"];
}
// Function: 434.sol-RabbitMarket-getOwnerGennezise(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerGennezise[_to]

IRs:
REF_169(bool) -> ownerGennezise[_to]
RETURN REF_169"];
}
// Function: 434.sol-RabbitMarket-getOwnerMoney()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerMoney

IRs:
RETURN ownerMoney"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-getOwnerServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerServer

IRs:
RETURN ownerServer"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-getPrivAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
privAddress

IRs:
RETURN privAddress"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-getRabbitDNK(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
mapDNK[bunnyid]

IRs:
REF_160(uint256) -> mapDNK[bunnyid]
RETURN REF_160"];
}
// Function: 434.sol-RabbitMarket-getRabbitMother(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rabbitMother[mother]

IRs:
REF_157(uint32[5]) -> rabbitMother[mother]
RETURN REF_157"];
}
// Function: 434.sol-RabbitMarket-getRabbitMotherSumm(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
m = 0

IRs:
m(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
m < 5

IRs:
TMP_304(bool) = m < 5
CONDITION TMP_304"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
rabbitMother[mother][m] != 0

IRs:
REF_158(uint32[5]) -> rabbitMother[mother]
REF_159(uint32) -> REF_158[m]
TMP_305(bool) = REF_159 != 0
CONDITION TMP_305"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count ++

IRs:
TMP_306(uint256) := count(uint256)
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
m ++

IRs:
TMP_307(uint256) := m(uint256)
m(uint256) = m + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 434.sol-RabbitMarket-getSirePrice(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
rabbits[(_tokenId - 1)].role == 1

IRs:
TMP_249(uint32) = _tokenId - 1
REF_117(BaseRabbit.Rabbit) -> rabbits[TMP_249]
REF_118(uint256) -> REF_117.role
TMP_250(bool) = REF_118 == 1
CONDITION TMP_250"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
procent = (rabbitSirePrice[_tokenId] / 100)

IRs:
REF_119(uint256) -> rabbitSirePrice[_tokenId]
TMP_251(uint256) = REF_119 / 100
procent(uint256) := TMP_251(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
res = procent.mul(25)

IRs:
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['procent', '25'] 
res(uint256) := TMP_252(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
system = procent.mul(commission_system)

IRs:
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['procent', 'commission_system'] 
system(uint256) := TMP_253(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
res = res.add(rabbitSirePrice[_tokenId])

IRs:
REF_123(uint256) -> rabbitSirePrice[_tokenId]
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['res', 'REF_123'] 
res(uint256) := TMP_254(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
res.add(system)

IRs:
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['res', 'system'] 
RETURN TMP_255"];
7[label="Node Type: RETURN 7

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 434.sol-RabbitMarket-getTokenOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
total = ownerBunnies[owner].length

IRs:
REF_133(uint32[]) -> ownerBunnies[owner]
REF_134 -> LENGTH REF_133
total(uint256) := REF_134(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
list = ownerBunnies[owner]

IRs:
REF_135(uint32[]) -> ownerBunnies[owner]
list(uint32[]) = ['REF_135(uint32[])']"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(total,list)

IRs:
RETURN total,list"];
}
// Function: 434.sol-RabbitMarket-getTotalSalaryBunny(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSalaryBunny[_bunny]

IRs:
REF_156(uint256) -> totalSalaryBunny[_bunny]
RETURN REF_156"];
}
// Function: 434.sol-RabbitMarket-getcoolduwn(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cd = rabbits[(_mother - 1)].birthCount

IRs:
TMP_358(uint32) = _mother - 1
REF_196(BaseRabbit.Rabbit) -> rabbits[TMP_358]
REF_197(uint256) -> REF_196.birthCount
cd(uint256) := REF_197(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
cd > 14

IRs:
TMP_359(bool) = cd > 14
CONDITION TMP_359"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cd = 14

IRs:
cd(uint256) := 14(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastTime = (cooldowns[cd] + rabbits[(_mother - 1)].birthLastTime)

IRs:
REF_198(uint32) -> cooldowns[cd]
TMP_360(uint32) = _mother - 1
REF_199(BaseRabbit.Rabbit) -> rabbits[TMP_360]
REF_200(uint256) -> REF_199.birthLastTime
TMP_361(uint32) = REF_198 + REF_200
lastTime(uint256) := TMP_361(uint32)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
lastTime > now

IRs:
TMP_362(bool) = lastTime > now
CONDITION TMP_362"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
lefttime = lastTime.sub(now)

IRs:
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lastTime', 'now'] 
lefttime(uint256) := TMP_363(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(lastTime,cd,lefttime)

IRs:
RETURN lastTime,cd,lefttime"];
}
// Function: 434.sol-RabbitMarket-giff(uint32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(rabbitToOwner[bunnyid] == msg.sender)

IRs:
REF_213(address) -> rabbitToOwner[bunnyid]
TMP_415(bool) = REF_213 == msg.sender
TMP_416(None) = SOLIDITY_CALL require(bool)(TMP_415)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! (giffblock[bunnyid]))

IRs:
REF_214(bool) -> giffblock[bunnyid]
TMP_417 = UnaryType.BANG REF_214 
TMP_418(None) = SOLIDITY_CALL require(bool)(TMP_417)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferFrom(msg.sender,add,bunnyid)

IRs:
TMP_419(bool) = INTERNAL_CALL, BodyRabbit.transferFrom(address,address,uint32)(msg.sender,add,bunnyid)"];
}
// Function: 434.sol-RabbitMarket-isPauseSave()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! pauseSave

IRs:
TMP_281 = UnaryType.BANG pauseSave 
RETURN TMP_281"];
}
// Function: 434.sol-RabbitMarket-isPriv()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
privateContract.isUIntPrivate()

IRs:
TMP_238(bool) = HIGH_LEVEL_CALL, dest:privateContract(PrivateRabbitInterface), function:isUIntPrivate, arguments:[]  
RETURN TMP_238"];
}
// Function: 434.sol-RabbitMarket-isPromoPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == ownerServer || msg.sender == ownerCEO

IRs:
TMP_282(bool) = msg.sender == ownerServer
TMP_283(bool) = msg.sender == ownerCEO
TMP_284(bool) = TMP_282 || TMP_283
CONDITION TMP_284"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
! promoPause

IRs:
TMP_285 = UnaryType.BANG promoPause 
RETURN TMP_285"];
}
// Function: 434.sol-RabbitMarket-isUIntPublic()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 434.sol-RabbitMarket-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerCEO)

IRs:
TMP_440(bool) = msg.sender == ownerCEO
TMP_441(None) = SOLIDITY_CALL require(bool)(TMP_440)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-RabbitMarket-onlyServer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerServer || msg.sender == ownerCEO)

IRs:
TMP_442(bool) = msg.sender == ownerServer
TMP_443(bool) = msg.sender == ownerCEO
TMP_444(bool) = TMP_442 || TMP_443
TMP_445(None) = SOLIDITY_CALL require(bool)(TMP_444)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-RabbitMarket-ownerOf(uint32)
digraph{
}
// Function: 434.sol-RabbitMarket-removeTokenList(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = ownerBunnies[_owner].length

IRs:
REF_103(uint32[]) -> ownerBunnies[_owner]
REF_104 -> LENGTH REF_103
count(uint256) := REF_104(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < count

IRs:
TMP_239(bool) = i < count
CONDITION TMP_239"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
ownerBunnies[_owner][i] == _tokenId

IRs:
REF_105(uint32[]) -> ownerBunnies[_owner]
REF_106(uint32) -> REF_105[i]
TMP_240(bool) = REF_106 == _tokenId
CONDITION TMP_240"];
6->7[label="True"];
6->14[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete ownerBunnies[_owner][i]

IRs:
REF_107(uint32[]) -> ownerBunnies[_owner]
REF_108(uint32) -> REF_107[i]
REF_107 = delete REF_108 "];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
count > 0 && count != (i - 1)

IRs:
TMP_241(bool) = count > 0
TMP_242(uint256) = i - 1
TMP_243(bool) = count != TMP_242
TMP_244(bool) = TMP_241 && TMP_243
CONDITION TMP_244"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownerBunnies[_owner][i] = ownerBunnies[_owner][(count - 1)]

IRs:
REF_109(uint32[]) -> ownerBunnies[_owner]
REF_110(uint32) -> REF_109[i]
REF_111(uint32[]) -> ownerBunnies[_owner]
TMP_245(uint256) = count - 1
REF_112(uint32) -> REF_111[TMP_245]
REF_110(uint32) (->ownerBunnies) := REF_112(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete ownerBunnies[_owner][(count - 1)]

IRs:
REF_113(uint32[]) -> ownerBunnies[_owner]
TMP_246(uint256) = count - 1
REF_114(uint32) -> REF_113[TMP_246]
REF_113 = delete REF_114 "];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerBunnies[_owner].length --

IRs:
REF_115(uint32[]) -> ownerBunnies[_owner]
REF_116 -> LENGTH REF_115
TMP_247(uint256) := REF_116(uint256)
REF_116(-> ownerBunnies) = REF_116 - 1"];
12->13;
13[label="Node Type: RETURN 13
"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_248(uint256) := i(uint256)
i(uint256) = i + 1"];
15->5;
}
// Function: 434.sol-RabbitMarket-sendMoney(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_to.transfer((_money / 100) * 95)

IRs:
TMP_337(uint256) = _money / 100
TMP_338(uint256) = TMP_337 * 95
Transfer dest:_to value:TMP_338"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney.transfer((_money / 100) * 5)

IRs:
TMP_340(uint256) = _money / 100
TMP_341(uint256) = TMP_340 * 5
Transfer dest:ownerMoney value:TMP_341"];
}
// Function: 434.sol-RabbitMarket-setMoneyRange(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
moneyRange = _money

IRs:
moneyRange(uint256) := _money(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-setMotherCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
motherCount[_mother] = motherCount[_mother].add(1)

IRs:
REF_150(uint256) -> motherCount[_mother]
REF_151(uint256) -> motherCount[_mother]
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_151', '1'] 
REF_150(uint256) (->motherCount) := TMP_302(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EmotherCount(_mother,motherCount[_mother])

IRs:
REF_153(uint256) -> motherCount[_mother]
Emit EmotherCount(_mother,REF_153)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
motherCount[_mother]

IRs:
REF_154(uint256) -> motherCount[_mother]
RETURN REF_154"];
}
// Function: 434.sol-RabbitMarket-setPauseSave()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
pauseSave = ! pauseSave

IRs:
TMP_286 = UnaryType.BANG pauseSave 
pauseSave(bool) := TMP_286(bool)
RETURN pauseSave"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-setPriv(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
privAddress = _privAddress

IRs:
privAddress(address) := _privAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
privateContract = PrivateRabbitInterface(_privAddress)

IRs:
TMP_236 = CONVERT _privAddress to PrivateRabbitInterface
privateContract(PrivateRabbitInterface) := TMP_236(PrivateRabbitInterface)"];
}
// Function: 434.sol-RabbitMarket-setPromoGen0(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoGen0 = _promoGen0

IRs:
promoGen0(uint256) := _promoGen0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-setPromoMoney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoMoney = _promoMoney

IRs:
promoMoney(uint256) := _promoMoney(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-setPromoPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
promoPause = ! promoPause

IRs:
TMP_365 = UnaryType.BANG promoPause 
promoPause(bool) := TMP_365(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-setRabbitMother(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(children != mother)

IRs:
TMP_288(bool) = children != mother
TMP_289(None) = SOLIDITY_CALL require(bool)(TMP_288)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
mother == 0

IRs:
TMP_290(bool) = mother == 0
CONDITION TMP_290"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
start = 0

IRs:
start(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->17;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < 5

IRs:
TMP_291(bool) = i < 5
CONDITION TMP_291"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
rabbitMother[mother][i] != 0

IRs:
REF_136(uint32[5]) -> rabbitMother[mother]
REF_137(uint32) -> REF_136[i]
TMP_292(bool) = REF_137 != 0
CONDITION TMP_292"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pullMother[start] = uint32(rabbitMother[mother][i])

IRs:
REF_138(uint32) -> pullMother[start]
REF_139(uint32[5]) -> rabbitMother[mother]
REF_140(uint32) -> REF_139[i]
TMP_293 = CONVERT REF_140 to uint32
REF_138(uint32) (->pullMother) := TMP_293(uint32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
rabbitMother[mother][i] = 0

IRs:
REF_141(uint32[5]) -> rabbitMother[mother]
REF_142(uint32) -> REF_141[i]
REF_142(uint32) (->rabbitMother) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
start ++

IRs:
TMP_294(uint256) := start(uint256)
start(uint256) = start + 1"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_295(uint256) := i(uint256)
i(uint256) = i + 1"];
16->10;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
pullMother[start] = mother

IRs:
REF_143(uint32) -> pullMother[start]
REF_143(uint32) (->pullMother) := mother(uint32)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
start ++

IRs:
TMP_296(uint256) := start(uint256)
start(uint256) = start + 1"];
18->21;
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->28;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
m = 0

IRs:
m(uint256) := 0(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
m < 5

IRs:
TMP_297(bool) = m < 5
CONDITION TMP_297"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: IF 23

EXPRESSION:
start > 5

IRs:
TMP_298(bool) = start > 5
CONDITION TMP_298"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
rabbitMother[children][m] = pullMother[(m + 1)]

IRs:
REF_144(uint32[5]) -> rabbitMother[children]
REF_145(uint32) -> REF_144[m]
TMP_299(uint256) = m + 1
REF_146(uint32) -> pullMother[TMP_299]
REF_145(uint32) (->rabbitMother) := REF_146(uint32)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
rabbitMother[children][m] = pullMother[m]

IRs:
REF_147(uint32[5]) -> rabbitMother[children]
REF_148(uint32) -> REF_147[m]
REF_149(uint32) -> pullMother[m]
REF_148(uint32) (->rabbitMother) := REF_149(uint32)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
m ++

IRs:
TMP_300(uint256) := m(uint256)
m(uint256) = m + 1"];
27->22;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
setMotherCount(mother)

IRs:
TMP_301(uint256) = INTERNAL_CALL, BodyRabbit.setMotherCount(uint32)(mother)"];
}
// Function: 434.sol-RabbitMarket-setStepMoney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stepMoney = money

IRs:
stepMoney(uint256) := money(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-setTimeRangeGen0(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
timeRangeCreateGen0 = _sec

IRs:
timeRangeCreateGen0(uint256) := _sec(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 434.sol-RabbitMarket-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CryptoRabbits

IRs:
name(string) := CryptoRabbits(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CRB

IRs:
symbol(string) := CRB(string)"];
}
// Function: 434.sol-RabbitMarket-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
myAddr_test = 0x982a49414fD95e3268D3559540A67B03e40AcD64

IRs:
myAddr_test(address) := 868709609884926412840050907305519079164645920100(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
pauseSave = false

IRs:
pauseSave(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
bigPrice = 500000000000000

IRs:
bigPrice(uint256) := 500000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
commission_system = 5

IRs:
commission_system(uint256) := 5(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalGen0 = 0

IRs:
totalGen0(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
timeRangeCreateGen0 = 1

IRs:
timeRangeCreateGen0(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
promoGen0 = 2500

IRs:
promoGen0(uint256) := 2500(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
promoMoney = 1 * bigPrice

IRs:
TMP_420(uint256) = 1 * bigPrice
promoMoney(uint256) := TMP_420(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
promoPause = false

IRs:
promoPause(bool) := False(bool)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
cooldowns = (uint32(60),uint32(120),uint32(240),uint32(480),uint32(960),uint32(1920),uint32(3600),uint32(7200),uint32(14400),uint32(28800),uint32(57600),uint32(86400))

IRs:
TMP_421 = CONVERT 60 to uint32
TMP_422 = CONVERT 120 to uint32
TMP_423 = CONVERT 240 to uint32
TMP_424 = CONVERT 480 to uint32
TMP_425 = CONVERT 960 to uint32
TMP_426 = CONVERT 1920 to uint32
TMP_427 = CONVERT 3600 to uint32
TMP_428 = CONVERT 7200 to uint32
TMP_429 = CONVERT 14400 to uint32
TMP_430 = CONVERT 28800 to uint32
TMP_431 = CONVERT 57600 to uint32
TMP_432 = CONVERT 86400 to uint32
cooldowns(uint32[12]) = ['TMP_421(uint32)', 'TMP_422(uint32)', 'TMP_423(uint32)', 'TMP_424(uint32)', 'TMP_425(uint32)', 'TMP_426(uint32)', 'TMP_427(uint32)', 'TMP_428(uint32)', 'TMP_429(uint32)', 'TMP_430(uint32)', 'TMP_431(uint32)', 'TMP_432(uint32)']"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
totalBunny = 0

IRs:
totalBunny(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
fcontr = false

IRs:
fcontr(bool) := False(bool)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
stepMoney = 2 * 60 * 60

IRs:
TMP_433(uint256) = 2 * 60
TMP_434(uint256) = TMP_433 * 60
stepMoney(uint256) := TMP_434(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
marketCount = 0

IRs:
marketCount(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
daysperiod = 1

IRs:
daysperiod(uint256) := 1(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
sec = 1

IRs:
sec(uint256) := 1(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
middlelast = 20

IRs:
middlelast(uint8) := 20(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
middlePriceMoney = 1

IRs:
middlePriceMoney(uint256) := 1(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
middleSaleTime = 0

IRs:
middleSaleTime(uint256) := 0(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
lastmoney = 0

IRs:
lastmoney(uint256) := 0(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
totalClosedBID = 0

IRs:
totalClosedBID(uint256) := 0(uint256)"];
}
// Function: 434.sol-RabbitMarket-startMarket(uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_386(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_387(None) = SOLIDITY_CALL require(bool)(TMP_386)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_money >= bigPrice)

IRs:
TMP_388(bool) = _money >= bigPrice
TMP_389(None) = SOLIDITY_CALL require(bool)(TMP_388)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(rabbitToOwner[_bunnyid] == msg.sender)

IRs:
REF_206(address) -> rabbitToOwner[_bunnyid]
TMP_390(bool) = REF_206 == msg.sender
TMP_391(None) = SOLIDITY_CALL require(bool)(TMP_390)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bunnyCost[_bunnyid] = _money

IRs:
REF_207(uint256) -> bunnyCost[_bunnyid]
REF_207(uint256) (->bunnyCost) := _money(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
StartMarket(_bunnyid,_money)

IRs:
Emit StartMarket(_bunnyid,_money)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
marketCount ++

IRs:
TMP_393(uint256) := marketCount(uint256)
marketCount(uint256) = marketCount + 1
RETURN TMP_393"];
}
// Function: 434.sol-RabbitMarket-stopMarket(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPauseSave())

IRs:
TMP_394(bool) = INTERNAL_CALL, BodyRabbit.isPauseSave()()
TMP_395(None) = SOLIDITY_CALL require(bool)(TMP_394)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rabbitToOwner[_bunnyid] == msg.sender)

IRs:
REF_208(address) -> rabbitToOwner[_bunnyid]
TMP_396(bool) = REF_208 == msg.sender
TMP_397(None) = SOLIDITY_CALL require(bool)(TMP_396)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bunnyCost[_bunnyid] = 0

IRs:
REF_209(uint256) -> bunnyCost[_bunnyid]
REF_209(uint256) (->bunnyCost) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
StopMarket(_bunnyid)

IRs:
Emit StopMarket(_bunnyid)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
marketCount --

IRs:
TMP_399(uint256) := marketCount(uint256)
marketCount(uint256) = marketCount - 1
RETURN TMP_399"];
}
// Function: 434.sol-RabbitMarket-timeRange()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((lastTimeGen0 + timeRangeCreateGen0) < now)

IRs:
TMP_437(uint256) = lastTimeGen0 + timeRangeCreateGen0
TMP_438(bool) = TMP_437 < now
TMP_439(None) = SOLIDITY_CALL require(bool)(TMP_438)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 434.sol-RabbitMarket-totalSupply()
digraph{
}
// Function: 434.sol-RabbitMarket-transfer(address,uint32)
digraph{
}
// Function: 434.sol-RabbitMarket-transferFrom(address,address,uint32)
digraph{
}
// Function: 434.sol-RabbitMarket-transferOwnerMoney(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_ownerMoney != address(0)

IRs:
TMP_374 = CONVERT 0 to address
TMP_375(bool) = _ownerMoney != TMP_374
CONDITION TMP_375"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerMoney = _ownerMoney

IRs:
ownerMoney(address) := _ownerMoney(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-RabbitMarket-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_368 = CONVERT 0 to address
TMP_369(bool) = add != TMP_368
CONDITION TMP_369"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerCEO = add

IRs:
ownerCEO(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-RabbitMarket-transferOwnershipServer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
add != address(0)

IRs:
TMP_371 = CONVERT 0 to address
TMP_372(bool) = add != TMP_371
CONDITION TMP_372"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerServer = add

IRs:
ownerServer(address) := add(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 434.sol-RabbitMarket-uintToBytes(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
v == 0

IRs:
TMP_325(bool) = v == 0
CONDITION TMP_325"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ret = 0

IRs:
ret(bytes32) := 0(string)"];
2->9;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
v > 0

IRs:
TMP_326(bool) = v > 0
CONDITION TMP_326"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ret = bytes32(uint256(ret) / (2 ** 8))

IRs:
TMP_327 = CONVERT ret to uint256
TMP_328(uint256) = 2 ** 8
TMP_329(uint256) = TMP_327 / TMP_328
TMP_330 = CONVERT TMP_329 to bytes32
ret(bytes32) := TMP_330(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31))

IRs:
TMP_331(uint256) = v % 10
TMP_332(uint256) = TMP_331 + 48
TMP_333(uint256) = 8 * 31
TMP_334(uint256) = 2 ** TMP_333
TMP_335(uint256) = TMP_332 * TMP_334
TMP_336 = CONVERT TMP_335 to bytes32
ret(bytes32) = ret | TMP_336"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
v /= 10

IRs:
v(uint256) = v / 10"];
7->4;
8[label="Node Type: END_LOOP 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
ret

IRs:
RETURN ret"];
11[label="Node Type: RETURN 11

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 434.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_27(uint256) = a + b
c(uint256) := TMP_27(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_28(bool) = c >= a
TMP_29(None) = SOLIDITY_CALL assert(bool)(TMP_28)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 434.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_23(uint256) = a / b
c(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 434.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_18(bool) = a == 0
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_19(uint256) = a * b
c(uint256) := TMP_19(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_20(uint256) = c / a
TMP_21(bool) = TMP_20 == b
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 434.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_24(bool) = b <= a
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_26(uint256) = a - b
RETURN TMP_26"];
}
}
