digraph G {
// Function: 452.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_478'] 
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_480'] 
TMP_482(uint256) = TMP_481 / 2
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_479', 'TMP_482'] 
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_485(uint256) = TMP_483 / TMP_484
RETURN TMP_485"];
}
// Function: 452.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_468(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_470(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_469)
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_468', 'TMP_470'] 
RETURN TMP_471"];
}
// Function: 452.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_472', '312500000000000000000000000'] 
TMP_474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_473', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_474'] 
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_475', '74999921875000000000000000000000'] 
TMP_477(uint256) = TMP_476 / 156250000
RETURN TMP_477"];
}
// Function: 452.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_465(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_464)
TMP_466(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_465', 'TMP_466'] 
RETURN TMP_467"];
}
// Function: 452.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_486 = CONVERT _input to bytes
_temp(bytes) := TMP_486(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_742 -> LENGTH _temp
_length(uint256) := REF_742(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_487(bool) = _length <= 32
TMP_488(bool) = _length > 0
TMP_489(bool) = TMP_487 && TMP_488
TMP_490(None) = SOLIDITY_CALL require(bool,string)(TMP_489,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_743(None) -> _temp[0]
TMP_491(bool) = REF_743 != 32
TMP_492(uint256) = _length - 1
REF_744(None) -> _temp[TMP_492]
TMP_493(bool) = REF_744 != 32
TMP_494(bool) = TMP_491 && TMP_493
TMP_495(None) = SOLIDITY_CALL require(bool,string)(TMP_494,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_745(None) -> _temp[0]
TMP_496(bool) = REF_745 == 48
CONDITION TMP_496"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_746(None) -> _temp[1]
TMP_497(bool) = REF_746 != 120
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_747(None) -> _temp[1]
TMP_499(bool) = REF_747 != 88
TMP_500(None) = SOLIDITY_CALL require(bool,string)(TMP_499,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_501(bool) = i < _length
CONDITION TMP_501"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_748(None) -> _temp[i]
TMP_502(bool) = REF_748 > 64
REF_749(None) -> _temp[i]
TMP_503(bool) = REF_749 < 91
TMP_504(bool) = TMP_502 && TMP_503
CONDITION TMP_504"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_750(bytes1) -> _temp[i]
REF_751(None) -> _temp[i]
TMP_505 = CONVERT REF_751 to uint256
TMP_506(uint256) = TMP_505 + 32
TMP_507 = CONVERT TMP_506 to bytes1
REF_750(bytes1) (->_temp) := TMP_507(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_508(bool) = _hasNonNumber == False
CONDITION TMP_508"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_752(None) -> _temp[i]
TMP_509(bool) = REF_752 == 32
REF_753(None) -> _temp[i]
TMP_510(bool) = REF_753 > 96
REF_754(None) -> _temp[i]
TMP_511(bool) = REF_754 < 123
TMP_512(bool) = TMP_510 && TMP_511
TMP_513(bool) = TMP_509 || TMP_512
REF_755(None) -> _temp[i]
TMP_514(bool) = REF_755 > 47
REF_756(None) -> _temp[i]
TMP_515(bool) = REF_756 < 58
TMP_516(bool) = TMP_514 && TMP_515
TMP_517(bool) = TMP_513 || TMP_516
TMP_518(None) = SOLIDITY_CALL require(bool,string)(TMP_517,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_757(None) -> _temp[i]
TMP_519(bool) = REF_757 == 32
CONDITION TMP_519"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_520(uint256) = i + 1
REF_758(None) -> _temp[TMP_520]
TMP_521(bool) = REF_758 != 32
TMP_522(None) = SOLIDITY_CALL require(bool,string)(TMP_521,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_523(bool) = _hasNonNumber == False
REF_759(None) -> _temp[i]
TMP_524(bool) = REF_759 < 48
REF_760(None) -> _temp[i]
TMP_525(bool) = REF_760 > 57
TMP_526(bool) = TMP_524 || TMP_525
TMP_527(bool) = TMP_523 && TMP_526
CONDITION TMP_527"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_528(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_529(bool) = _hasNonNumber == True
TMP_530(None) = SOLIDITY_CALL require(bool,string)(TMP_529,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 452.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 452.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 452.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 452.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 452.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 452.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 452.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 452.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 452.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_539(uint256) = a + b
c(uint256) := TMP_539(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_540(bool) = c >= a
TMP_541(None) = SOLIDITY_CALL require(bool,string)(TMP_540,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 452.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_531(bool) = a == 0
CONDITION TMP_531"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_532(uint256) = a * b
c(uint256) := TMP_532(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_533(uint256) = c / a
TMP_534(bool) = TMP_533 == b
TMP_535(None) = SOLIDITY_CALL require(bool,string)(TMP_534,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 452.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_549(bool) = x == 0
CONDITION TMP_549"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_550(bool) = y == 0
CONDITION TMP_550"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_551(bool) = i < y
CONDITION TMP_551"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_552(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_552(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_553(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 452.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_548(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_548"];
}
// Function: 452.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_542(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_543(uint256) = TMP_542 / 2
z(uint256) := TMP_543(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_544(bool) = z < y
CONDITION TMP_544"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_545(uint256) = x / z
TMP_546(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_545,z)
TMP_547(uint256) = TMP_546 / 2
z(uint256) := TMP_547(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 452.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_536(bool) = b <= a
TMP_537(None) = SOLIDITY_CALL require(bool,string)(TMP_536,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_538(uint256) = a - b
RETURN TMP_538"];
}
// Function: 452.sol-SuperCard-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_447(bool) = msg.sender == admin
TMP_448(None) = SOLIDITY_CALL require(bool,string)(TMP_447,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,SuperCard already activated)

IRs:
TMP_449(bool) = activated_ == False
TMP_450(None) = SOLIDITY_CALL require(bool,string)(TMP_449,SuperCard already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_723(F3Ddatasets.Round) -> round_[1]
REF_724(uint256) -> REF_723.strt
TMP_451(uint256) = now + rndExtra_
TMP_452(uint256) = TMP_451 - rndGap_
REF_724(uint256) (->round_) := TMP_452(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_725(F3Ddatasets.Round) -> round_[1]
REF_726(uint256) -> REF_725.end
TMP_453(uint256) = now + rndInit_
TMP_454(uint256) = TMP_453 + rndExtra_
REF_726(uint256) (->round_) := TMP_454(uint256)"];
}
// Function: 452.sol-SuperCard-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_343(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_344(bytes32) = SOLIDITY_CALL keccak256()(TMP_343)
TMP_345 = CONVERT TMP_344 to uint256
TMP_346(uint256) = TMP_345 / now
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_342', 'TMP_346'] 
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_347', 'block.gaslimit'] 
TMP_349(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_350(bytes32) = SOLIDITY_CALL keccak256()(TMP_349)
TMP_351 = CONVERT TMP_350 to uint256
TMP_352(uint256) = TMP_351 / now
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_348', 'TMP_352'] 
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_353', 'block.number'] 
TMP_355(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_354)
TMP_356(bytes32) = SOLIDITY_CALL keccak256()(TMP_355)
TMP_357 = CONVERT TMP_356 to uint256
seed(uint256) := TMP_357(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_358(uint256) = seed / 1000
TMP_359(uint256) = TMP_358 * 1000
TMP_360(uint256) = seed - TMP_359
TMP_361(bool) = TMP_360 < airDropTracker_
CONDITION TMP_361"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 452.sol-SuperCard-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_255(F3Ddatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.strt
TMP_150(uint256) = REF_256 + rndGap_
TMP_151(bool) = _now > TMP_150
REF_257(F3Ddatasets.Round) -> round_[_rID]
REF_258(uint256) -> REF_257.end
TMP_152(bool) = _now <= REF_258
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.end
TMP_153(bool) = _now > REF_260
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.plyr
TMP_154(bool) = REF_262 == 0
TMP_155(bool) = TMP_153 && TMP_154
TMP_156(bool) = TMP_152 || TMP_155
TMP_157(bool) = TMP_151 && TMP_156
CONDITION TMP_157"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.end
TMP_159(bool) = _now > REF_264
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(bool) -> REF_265.ended
TMP_160(bool) = REF_266 == False
TMP_161(bool) = TMP_159 && TMP_160
CONDITION TMP_161"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(bool) -> REF_267.ended
REF_268(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_162(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_162(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_269(uint256) -> _eventData_.compressedData
REF_270(uint256) -> _eventData_.compressedData
TMP_163(uint256) = _now * 1000000000000000000
TMP_164(uint256) = REF_270 + TMP_163
REF_269(uint256) (->_eventData_) := TMP_164(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_271(uint256) -> _eventData_.compressedIDs
REF_272(uint256) -> _eventData_.compressedIDs
TMP_165(uint256) = REF_272 + _pID
REF_271(uint256) (->_eventData_) := TMP_165(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_274(F3Ddatasets.Player) -> plyr_[_pID]
REF_275(bytes32) -> REF_274.name
REF_276(uint256) -> _eventData_.compressedData
REF_277(uint256) -> _eventData_.compressedIDs
REF_278(address) -> _eventData_.winnerAddr
REF_279(bytes32) -> _eventData_.winnerName
REF_280(uint256) -> _eventData_.amountWon
REF_281(uint256) -> _eventData_.newPot
REF_282(uint256) -> _eventData_.P3DAmount
REF_283(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_275,msg.value,REF_276,REF_277,REF_278,REF_279,REF_280,REF_281,REF_282,REF_283)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_284(F3Ddatasets.Player) -> plyr_[_pID]
REF_285(uint256) -> REF_284.gen
REF_286(F3Ddatasets.Player) -> plyr_[_pID]
REF_287(uint256) -> REF_286.gen
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_287', 'msg.value'] 
REF_285(uint256) (->plyr_) := TMP_167(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 452.sol-SuperCard-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_21(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_21(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_22(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_22(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = _affCode == TMP_22
TMP_24(bool) = _affCode == msg.sender
TMP_25(bool) = TMP_23 || TMP_24
CONDITION TMP_25"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_23(F3Ddatasets.Player) -> plyr_[_pID]
REF_24(uint256) -> REF_23.laff
_affID(uint256) := REF_24(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_25(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_25(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_26(F3Ddatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
TMP_26(bool) = _affID != REF_27
CONDITION TMP_26"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_28(F3Ddatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
REF_29(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_27(uint256) = INTERNAL_CALL, SuperCard.verifyTeam(uint256)(_team)
_team(uint256) := TMP_27(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SuperCard.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 452.sol-SuperCard-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_11(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_11(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_15(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_15(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_12(bool) = _affCode == 0
TMP_13(bool) = _affCode == _pID
TMP_14(bool) = TMP_12 || TMP_13
CONDITION TMP_14"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_16(F3Ddatasets.Player) -> plyr_[_pID]
REF_17(uint256) -> REF_16.laff
_affCode(uint256) := REF_17(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_18(F3Ddatasets.Player) -> plyr_[_pID]
REF_19(uint256) -> REF_18.laff
TMP_15(bool) = _affCode != REF_19
CONDITION TMP_15"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
REF_21(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_16(uint256) = INTERNAL_CALL, SuperCard.verifyTeam(uint256)(_team)
_team(uint256) := TMP_16(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SuperCard.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 452.sol-SuperCard-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_32(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_32(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_30(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_30(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_33(bool) = _affCode == 
REF_31(F3Ddatasets.Player) -> plyr_[_pID]
REF_32(bytes32) -> REF_31.name
TMP_34(bool) = _affCode == REF_32
TMP_35(bool) = TMP_33 || TMP_34
CONDITION TMP_35"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_33(F3Ddatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
_affID(uint256) := REF_34(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_35(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_35(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_36(F3Ddatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
TMP_36(bool) = _affID != REF_37
CONDITION TMP_36"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_38(F3Ddatasets.Player) -> plyr_[_pID]
REF_39(uint256) -> REF_38.laff
REF_39(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_37(uint256) = INTERNAL_CALL, SuperCard.verifyTeam(uint256)(_team)
_team(uint256) := TMP_37(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SuperCard.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 452.sol-SuperCard-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_420(F3Ddatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.strt
TMP_240(uint256) = REF_421 + rndGap_
TMP_241(bool) = _now > TMP_240
REF_422(F3Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.end
TMP_242(bool) = _now <= REF_423
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.end
TMP_243(bool) = _now > REF_425
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.plyr
TMP_244(bool) = REF_427 == 0
TMP_245(bool) = TMP_243 && TMP_244
TMP_246(bool) = TMP_242 || TMP_245
TMP_247(bool) = TMP_241 && TMP_246
CONDITION TMP_247"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_428(F3Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.eth
TMP_248(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_429', '_eth'] 
RETURN TMP_248"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_249(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_249"];
}
// Function: 452.sol-SuperCard-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_410(F3Ddatasets.Round) -> round_[_rIDlast]
REF_411(uint256) -> REF_410.mask
REF_413(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_414(F3Ddatasets.PlayerRounds) -> REF_413[_rIDlast]
REF_415(uint256) -> REF_414.keys
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_411', 'REF_415'] 
TMP_238(uint256) = TMP_237 / 1000000000000000000
REF_417(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_418(F3Ddatasets.PlayerRounds) -> REF_417[_rIDlast]
REF_419(uint256) -> REF_418.mask
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_238', 'REF_419'] 
RETURN TMP_239"];
}
// Function: 452.sol-SuperCard-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(19,4)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(19,4)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(37,6)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(37,6)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(67,7)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(67,7)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,30)

IRs:
REF_6(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_3(F3Ddatasets.PotSplit) = new PotSplit(15,30)
REF_6(F3Ddatasets.PotSplit) (->potSplit_) := TMP_3(F3Ddatasets.PotSplit)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,25)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(25,25)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
}
// Function: 452.sol-SuperCard-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_321(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_322(F3Ddatasets.PlayerRounds) -> REF_321[_rID]
REF_323(uint256) -> REF_322.keys
TMP_187(bool) = REF_323 == 0
CONDITION TMP_187"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_188(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_188(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_324(F3Ddatasets.Round) -> round_[_rID]
REF_325(uint256) -> REF_324.eth
TMP_189(bool) = REF_325 < 100000000000000000000
REF_326(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_327(F3Ddatasets.PlayerRounds) -> REF_326[_rID]
REF_328(uint256) -> REF_327.eth
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_328', '_eth'] 
TMP_191(bool) = TMP_190 > 1000000000000000000
TMP_192(bool) = TMP_189 && TMP_191
CONDITION TMP_192"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_331(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_332(F3Ddatasets.PlayerRounds) -> REF_331[_rID]
REF_333(uint256) -> REF_332.eth
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_333'] 
_availableLimit(uint256) := TMP_193(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_194(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_335(F3Ddatasets.Player) -> plyr_[_pID]
REF_336(uint256) -> REF_335.gen
REF_337(F3Ddatasets.Player) -> plyr_[_pID]
REF_338(uint256) -> REF_337.gen
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_338', '_refund'] 
REF_336(uint256) (->plyr_) := TMP_195(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_196(bool) = _eth > 1000000000
CONDITION TMP_196"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_340(F3Ddatasets.Round) -> round_[_rID]
REF_341(uint256) -> REF_340.eth
TMP_197(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_341', '_eth'] 
_keys(uint256) := TMP_197(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_198(bool) = _keys >= 1000000000000000000
CONDITION TMP_198"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, SuperCard.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_343(F3Ddatasets.Round) -> round_[_rID]
REF_344(uint256) -> REF_343.plyr
TMP_200(bool) = REF_344 != _pID
CONDITION TMP_200"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_345(F3Ddatasets.Round) -> round_[_rID]
REF_346(uint256) -> REF_345.plyr
REF_346(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.team
TMP_201(bool) = REF_348 != _team
CONDITION TMP_201"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.team
REF_350(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_351(uint256) -> _eventData_.compressedData
REF_352(uint256) -> _eventData_.compressedData
TMP_202(uint256) = REF_352 + 100
REF_351(uint256) (->_eventData_) := TMP_202(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_203(bool) = _eth >= 100000000000000000
CONDITION TMP_203"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_204(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_205(bool) = INTERNAL_CALL, SuperCard.airdrop()()
TMP_206(bool) = TMP_205 == True
CONDITION TMP_206"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_207(bool) = _eth >= 10000000000000000000
CONDITION TMP_207"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_209(uint256) = TMP_208 / 100
_prize(uint256) := TMP_209(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_354(F3Ddatasets.Player) -> plyr_[_pID]
REF_355(uint256) -> REF_354.win
REF_356(F3Ddatasets.Player) -> plyr_[_pID]
REF_357(uint256) -> REF_356.win
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_357', '_prize'] 
REF_355(uint256) (->plyr_) := TMP_210(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_211(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_360(uint256) -> _eventData_.compressedData
REF_360(-> _eventData_) = REF_360 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_212(bool) = _eth >= 1000000000000000000
TMP_213(bool) = _eth < 10000000000000000000
TMP_214(bool) = TMP_212 && TMP_213
CONDITION TMP_214"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_216(uint256) = TMP_215 / 100
_prize(uint256) := TMP_216(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_362(F3Ddatasets.Player) -> plyr_[_pID]
REF_363(uint256) -> REF_362.win
REF_364(F3Ddatasets.Player) -> plyr_[_pID]
REF_365(uint256) -> REF_364.win
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_365', '_prize'] 
REF_363(uint256) (->plyr_) := TMP_217(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_218(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_368(uint256) -> _eventData_.compressedData
REF_368(-> _eventData_) = REF_368 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_219(bool) = _eth >= 100000000000000000
TMP_220(bool) = _eth < 1000000000000000000
TMP_221(bool) = TMP_219 && TMP_220
CONDITION TMP_221"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_223(uint256) = TMP_222 / 100
_prize(uint256) := TMP_223(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_370(F3Ddatasets.Player) -> plyr_[_pID]
REF_371(uint256) -> REF_370.win
REF_372(F3Ddatasets.Player) -> plyr_[_pID]
REF_373(uint256) -> REF_372.win
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_373', '_prize'] 
REF_371(uint256) (->plyr_) := TMP_224(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_225(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_376(uint256) -> _eventData_.compressedData
REF_376(-> _eventData_) = REF_376 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_377(uint256) -> _eventData_.compressedData
REF_377(-> _eventData_) = REF_377 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_378(uint256) -> _eventData_.compressedData
TMP_226(uint256) = _prize * 1000000000000000000000000000000000
REF_378(-> _eventData_) = REF_378 + TMP_226"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_379(uint256) -> _eventData_.compressedData
REF_380(uint256) -> _eventData_.compressedData
TMP_227(uint256) = airDropTracker_ * 1000
TMP_228(uint256) = REF_380 + TMP_227
REF_379(uint256) (->_eventData_) := TMP_228(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_381(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_382(F3Ddatasets.PlayerRounds) -> REF_381[_rID]
REF_383(uint256) -> REF_382.keys
REF_385(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_386(F3Ddatasets.PlayerRounds) -> REF_385[_rID]
REF_387(uint256) -> REF_386.keys
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_387'] 
REF_383(uint256) (->plyrRnds_) := TMP_229(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_388(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_389(F3Ddatasets.PlayerRounds) -> REF_388[_rID]
REF_390(uint256) -> REF_389.eth
REF_392(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_393(F3Ddatasets.PlayerRounds) -> REF_392[_rID]
REF_394(uint256) -> REF_393.eth
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_394'] 
REF_390(uint256) (->plyrRnds_) := TMP_230(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_395(F3Ddatasets.Round) -> round_[_rID]
REF_396(uint256) -> REF_395.keys
REF_398(F3Ddatasets.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.keys
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_399'] 
REF_396(uint256) (->round_) := TMP_231(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_400(F3Ddatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.eth
REF_403(F3Ddatasets.Round) -> round_[_rID]
REF_404(uint256) -> REF_403.eth
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_404'] 
REF_401(uint256) (->round_) := TMP_232(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_405(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_406(uint256) -> REF_405[_team]
REF_408(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_409(uint256) -> REF_408[_team]
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_409'] 
REF_406(uint256) (->rndTmEth_) := TMP_233(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_234(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_234(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_235(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_235(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 452.sol-SuperCard-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_469(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_469(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_274(bool) = _pID == 0
CONDITION TMP_274"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_275(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_275(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_276(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_276(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_277(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_277(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_473(uint256) -> pIDxAddr_[msg.sender]
REF_473(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_474(F3Ddatasets.Player) -> plyr_[_pID]
REF_475(address) -> REF_474.addr
REF_475(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_278(bool) = _name != 
CONDITION TMP_278"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_476(uint256) -> pIDxName_[_name]
REF_476(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_477(F3Ddatasets.Player) -> plyr_[_pID]
REF_478(bytes32) -> REF_477.name
REF_478(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_479(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_480(bool) -> REF_479[_name]
REF_480(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_279(bool) = _laff != 0
TMP_280(bool) = _laff != _pID
TMP_281(bool) = TMP_279 && TMP_280
CONDITION TMP_281"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_481(F3Ddatasets.Player) -> plyr_[_pID]
REF_482(uint256) -> REF_481.laff
REF_482(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_483(uint256) -> _eventData_.compressedData
REF_484(uint256) -> _eventData_.compressedData
TMP_282(uint256) = REF_484 + 1
REF_483(uint256) (->_eventData_) := TMP_282(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 452.sol-SuperCard-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 50

IRs:
TMP_362(uint256) = _eth / 50
_p1(uint256) := TMP_362(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_363(uint256) = _eth / 50
_com(uint256) := TMP_363(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_364(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_365 = CONVERT admin to address
TMP_367(bool) = LOW_LEVEL_CALL, dest:TMP_365, function:call, arguments:[] value:_com 
TMP_368 = UnaryType.BANG TMP_367 
CONDITION TMP_368"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_invest_return = 0

IRs:
_invest_return(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_invest_return = distributeInvest(_pID,_eth,_affID)

IRs:
TMP_369(uint256) = INTERNAL_CALL, SuperCard.distributeInvest(uint256,uint256,uint256)(_pID,_eth,_affID)
_invest_return(uint256) := TMP_369(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_p3d = _p3d.add(_invest_return)

IRs:
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_invest_return'] 
_p3d(uint256) := TMP_370(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_599(F3Ddatasets.TeamFee) -> fees_[_team]
REF_600(uint256) -> REF_599.p3d
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_600'] 
TMP_372(uint256) = TMP_371 / 100
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_372'] 
_p3d(uint256) := TMP_373(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_p3d > 0

IRs:
TMP_374(bool) = _p3d > 0
CONDITION TMP_374"];
13->14[label="True"];
13->18[label="False"];
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_375(uint256) = _p3d / 2
_potAmount(uint256) := TMP_375(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_376"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(uint256) -> REF_603.pot
REF_605(F3Ddatasets.Round) -> round_[_rID]
REF_606(uint256) -> REF_605.pot
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_606', '_potAmount'] 
REF_604(uint256) (->round_) := TMP_378(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_608(uint256) -> _eventData_.P3DAmount
REF_610(uint256) -> _eventData_.P3DAmount
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_610'] 
REF_608(uint256) (->_eventData_) := TMP_379(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 452.sol-SuperCard-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_646(F3Ddatasets.TeamFee) -> fees_[_team]
REF_647(uint256) -> REF_646.gen
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_647'] 
TMP_407(uint256) = TMP_406 / 100
_gen(uint256) := TMP_407(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 50)

IRs:
TMP_408(uint256) = _eth / 50
_air(uint256) := TMP_408(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_409(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(20)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '20'] 
TMP_411(uint256) = TMP_410 / 100
REF_653(F3Ddatasets.TeamFee) -> fees_[_team]
REF_654(uint256) -> REF_653.p3d
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_654'] 
TMP_413(uint256) = TMP_412 / 100
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_411', 'TMP_413'] 
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_414'] 
_eth(uint256) := TMP_415(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_416(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_417(uint256) = INTERNAL_CALL, SuperCard.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_417(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_418(bool) = _dust > 0
CONDITION TMP_418"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_419(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_657(F3Ddatasets.Round) -> round_[_rID]
REF_658(uint256) -> REF_657.pot
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_661(F3Ddatasets.Round) -> round_[_rID]
REF_662(uint256) -> REF_661.pot
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_420', 'REF_662'] 
REF_658(uint256) (->round_) := TMP_421(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_663(uint256) -> _eventData_.genAmount
REF_665(uint256) -> _eventData_.genAmount
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_665'] 
REF_663(uint256) (->_eventData_) := TMP_422(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_666(uint256) -> _eventData_.potAmount
REF_666(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 452.sol-SuperCard-distributeInvest(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_p3d = 0

IRs:
_p3d(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_aff = _aff_eth / 10

IRs:
TMP_380(uint256) = _aff_eth / 10
_aff(uint256) := TMP_380(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_aff_2 = _aff_eth * 3 / 100

IRs:
TMP_381(uint256) = _aff_eth * 3
TMP_382(uint256) = TMP_381 / 100
_aff_2(uint256) := TMP_382(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_aff_3 = _aff_eth / 100

IRs:
TMP_383(uint256) = _aff_eth / 100
_aff_3(uint256) := TMP_383(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_affID_1 = _affID

IRs:
_affID_1(uint256) := _affID(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_affID_2 = plyr_[_affID_1].laff

IRs:
REF_611(F3Ddatasets.Player) -> plyr_[_affID_1]
REF_612(uint256) -> REF_611.laff
_affID_2(uint256) := REF_612(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_affID_3 = plyr_[_affID_2].laff

IRs:
REF_613(F3Ddatasets.Player) -> plyr_[_affID_2]
REF_614(uint256) -> REF_613.laff
_affID_3(uint256) := REF_614(uint256)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_384(bool) = _affID != _pID
REF_615(F3Ddatasets.Player) -> plyr_[_affID]
REF_616(bytes32) -> REF_615.name
TMP_385(bool) = REF_616 != 
TMP_386(bool) = TMP_384 && TMP_385
CONDITION TMP_386"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_617(F3Ddatasets.Player) -> plyr_[_affID]
REF_618(uint256) -> REF_617.aff
REF_620(F3Ddatasets.Player) -> plyr_[_affID]
REF_621(uint256) -> REF_620.aff
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_621'] 
REF_618(uint256) (->plyr_) := TMP_387(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_p3d = _p3d.add(_aff)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_aff'] 
_p3d(uint256) := TMP_388(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_affID_2 != _pID && _affID_2 != _affID && plyr_[_affID_2].name != 

IRs:
TMP_389(bool) = _affID_2 != _pID
TMP_390(bool) = _affID_2 != _affID
TMP_391(bool) = TMP_389 && TMP_390
REF_623(F3Ddatasets.Player) -> plyr_[_affID_2]
REF_624(bytes32) -> REF_623.name
TMP_392(bool) = REF_624 != 
TMP_393(bool) = TMP_391 && TMP_392
CONDITION TMP_393"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
plyr_[_affID_2].aff = _aff_2.add(plyr_[_affID_2].aff)

IRs:
REF_625(F3Ddatasets.Player) -> plyr_[_affID_2]
REF_626(uint256) -> REF_625.aff
REF_628(F3Ddatasets.Player) -> plyr_[_affID_2]
REF_629(uint256) -> REF_628.aff
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff_2', 'REF_629'] 
REF_626(uint256) (->plyr_) := TMP_394(uint256)"];
20->22;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_p3d = _p3d.add(_aff_2)

IRs:
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_aff_2'] 
_p3d(uint256) := TMP_395(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_affID_3 != _pID && _affID_3 != _affID && plyr_[_affID_3].name != 

IRs:
TMP_396(bool) = _affID_3 != _pID
TMP_397(bool) = _affID_3 != _affID
TMP_398(bool) = TMP_396 && TMP_397
REF_631(F3Ddatasets.Player) -> plyr_[_affID_3]
REF_632(bytes32) -> REF_631.name
TMP_399(bool) = REF_632 != 
TMP_400(bool) = TMP_398 && TMP_399
CONDITION TMP_400"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
plyr_[_affID_3].aff = _aff_3.add(plyr_[_affID_3].aff)

IRs:
REF_633(F3Ddatasets.Player) -> plyr_[_affID_3]
REF_634(uint256) -> REF_633.aff
REF_636(F3Ddatasets.Player) -> plyr_[_affID_3]
REF_637(uint256) -> REF_636.aff
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff_3', 'REF_637'] 
REF_634(uint256) (->plyr_) := TMP_401(uint256)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_p3d = _p3d.add(_aff_3)

IRs:
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_aff_3'] 
_p3d(uint256) := TMP_402(uint256)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
_p3d

IRs:
RETURN _p3d"];
}
// Function: 452.sol-SuperCard-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_493(F3Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.plyr
_winPID(uint256) := REF_494(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_495(F3Ddatasets.Round) -> round_[_rID]
REF_496(uint256) -> REF_495.team
_winTID(uint256) := REF_496(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_497(F3Ddatasets.Round) -> round_[_rID]
REF_498(uint256) -> REF_497.pot
_pot(uint256) := REF_498(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_290(uint256) = TMP_289 / 100
_win(uint256) := TMP_290(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_291(uint256) = _pot / 50
_com(uint256) := TMP_291(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_501(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_502(uint256) -> REF_501.gen
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_502'] 
TMP_293(uint256) = TMP_292 / 100
_gen(uint256) := TMP_293(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_504(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_505(uint256) -> REF_504.p3d
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_505'] 
TMP_295(uint256) = TMP_294 / 100
_p3d(uint256) := TMP_295(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_296', '_com'] 
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_297', '_gen'] 
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_298', '_p3d'] 
_res(uint256) := TMP_299(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_511(F3Ddatasets.Round) -> round_[_rID]
REF_512(uint256) -> REF_511.keys
TMP_301(uint256) = TMP_300 / REF_512
_ppt(uint256) := TMP_301(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_515(F3Ddatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.keys
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_516'] 
TMP_303(uint256) = TMP_302 / 1000000000000000000
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_303'] 
_dust(uint256) := TMP_304(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_305(bool) = _dust > 0
CONDITION TMP_305"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_306(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_307(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_519(F3Ddatasets.Player) -> plyr_[_winPID]
REF_520(uint256) -> REF_519.win
REF_522(F3Ddatasets.Player) -> plyr_[_winPID]
REF_523(uint256) -> REF_522.win
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_523'] 
REF_520(uint256) (->plyr_) := TMP_308(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_com = _com.add(_p3d.sub(_p3d / 2))

IRs:
TMP_309(uint256) = _p3d / 2
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_309'] 
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', 'TMP_310'] 
_com(uint256) := TMP_311(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_res = _res.add(_p3d / 2)

IRs:
TMP_313(uint256) = _p3d / 2
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', 'TMP_313'] 
_res(uint256) := TMP_314(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_528(F3Ddatasets.Round) -> round_[_rID]
REF_529(uint256) -> REF_528.mask
REF_531(F3Ddatasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.mask
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_532'] 
REF_529(uint256) (->round_) := TMP_315(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_533(uint256) -> _eventData_.compressedData
REF_534(uint256) -> _eventData_.compressedData
REF_535(F3Ddatasets.Round) -> round_[_rID]
REF_536(uint256) -> REF_535.end
TMP_316(uint256) = REF_536 * 1000000
TMP_317(uint256) = REF_534 + TMP_316
REF_533(uint256) (->_eventData_) := TMP_317(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_537(uint256) -> _eventData_.compressedIDs
REF_538(uint256) -> _eventData_.compressedIDs
TMP_318(uint256) = _winPID * 100000000000000000000000000
TMP_319(uint256) = REF_538 + TMP_318
TMP_320(uint256) = _winTID * 100000000000000000
TMP_321(uint256) = TMP_319 + TMP_320
REF_537(uint256) (->_eventData_) := TMP_321(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_539(address) -> _eventData_.winnerAddr
REF_540(F3Ddatasets.Player) -> plyr_[_winPID]
REF_541(address) -> REF_540.addr
REF_539(address) (->_eventData_) := REF_541(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_542(bytes32) -> _eventData_.winnerName
REF_543(F3Ddatasets.Player) -> plyr_[_winPID]
REF_544(bytes32) -> REF_543.name
REF_542(bytes32) (->_eventData_) := REF_544(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_545(uint256) -> _eventData_.amountWon
REF_545(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_546(uint256) -> _eventData_.genAmount
REF_546(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_547(uint256) -> _eventData_.P3DAmount
REF_547(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_548(uint256) -> _eventData_.newPot
REF_548(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_322(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_323(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.strt
REF_550(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.end
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_324', 'rndGap_'] 
REF_552(uint256) (->round_) := TMP_325(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_555(F3Ddatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.pot
REF_556(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 452.sol-SuperCard-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_707(uint256) -> _eventData_.compressedData
REF_708(uint256) -> _eventData_.compressedData
TMP_439(uint256) = now * 1000000000000000000
TMP_440(uint256) = REF_708 + TMP_439
TMP_441(uint256) = _team * 100000000000000000000000000000
TMP_442(uint256) = TMP_440 + TMP_441
REF_707(uint256) (->_eventData_) := TMP_442(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_709(uint256) -> _eventData_.compressedIDs
REF_710(uint256) -> _eventData_.compressedIDs
TMP_443(uint256) = REF_710 + _pID
TMP_444(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_445(uint256) = TMP_443 + TMP_444
REF_709(uint256) (->_eventData_) := TMP_445(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_712(uint256) -> _eventData_.compressedData
REF_713(uint256) -> _eventData_.compressedIDs
REF_714(F3Ddatasets.Player) -> plyr_[_pID]
REF_715(bytes32) -> REF_714.name
REF_716(address) -> _eventData_.winnerAddr
REF_717(bytes32) -> _eventData_.winnerName
REF_718(uint256) -> _eventData_.amountWon
REF_719(uint256) -> _eventData_.newPot
REF_720(uint256) -> _eventData_.P3DAmount
REF_721(uint256) -> _eventData_.genAmount
REF_722(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_712,REF_713,REF_715,msg.sender,_eth,_keys,REF_716,REF_717,REF_718,REF_719,REF_720,REF_721,REF_722,airDropPot_)"];
}
// Function: 452.sol-SuperCard-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_6(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_6(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_12(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_12(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_13(F3Ddatasets.Player) -> plyr_[_pID]
REF_14(uint256) -> REF_13.laff
INTERNAL_CALL, SuperCard.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_14,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, SuperCard.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 452.sol-SuperCard-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_125(F3Ddatasets.Round) -> round_[_rID]
REF_126(uint256) -> REF_125.strt
TMP_101(uint256) = REF_126 + rndGap_
TMP_102(bool) = _now > TMP_101
REF_127(F3Ddatasets.Round) -> round_[_rID]
REF_128(uint256) -> REF_127.end
TMP_103(bool) = _now <= REF_128
REF_129(F3Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.end
TMP_104(bool) = _now > REF_130
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.plyr
TMP_105(bool) = REF_132 == 0
TMP_106(bool) = TMP_104 && TMP_105
TMP_107(bool) = TMP_103 || TMP_106
TMP_108(bool) = TMP_102 && TMP_107
CONDITION TMP_108"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.keys
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_134', '1000000000000000000'] 
TMP_110(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_109', '1000000000000000000'] 
RETURN TMP_110"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 452.sol-SuperCard-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_207(F3Ddatasets.Round) -> round_[_rID]
REF_208(uint256) -> REF_207.ico
REF_209(F3Ddatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.keys
REF_211(F3Ddatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.end
REF_213(F3Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.strt
REF_215(F3Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.pot
REF_217(F3Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.team
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.plyr
TMP_141(uint256) = REF_220 * 10
TMP_142(uint256) = REF_218 + TMP_141
REF_221(F3Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.plyr
REF_223(F3Ddatasets.Player) -> plyr_[REF_222]
REF_224(address) -> REF_223.addr
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.plyr
REF_227(F3Ddatasets.Player) -> plyr_[REF_226]
REF_228(bytes32) -> REF_227.name
REF_229(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_230(uint256) -> REF_229[0]
REF_231(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_232(uint256) -> REF_231[1]
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[2]
REF_235(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_236(uint256) -> REF_235[3]
TMP_143(uint256) = airDropPot_ * 1000
TMP_144(uint256) = airDropTracker_ + TMP_143
RETURN REF_208,_rID,REF_210,REF_212,REF_214,REF_216,TMP_142,REF_224,REF_228,REF_230,REF_232,REF_234,REF_236,TMP_144"];
}
// Function: 452.sol-SuperCard-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_145 = CONVERT 0 to address
TMP_146(bool) = _addr == TMP_145
CONDITION TMP_146"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_147(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_237(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_237(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_238(F3Ddatasets.Player) -> plyr_[_pID]
REF_239(bytes32) -> REF_238.name
REF_240(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_241(F3Ddatasets.PlayerRounds) -> REF_240[_rID]
REF_242(uint256) -> REF_241.keys
REF_243(F3Ddatasets.Player) -> plyr_[_pID]
REF_244(uint256) -> REF_243.win
REF_245(F3Ddatasets.Player) -> plyr_[_pID]
REF_246(uint256) -> REF_245.gen
REF_248(F3Ddatasets.Player) -> plyr_[_pID]
REF_249(uint256) -> REF_248.lrnd
TMP_148(uint256) = INTERNAL_CALL, SuperCard.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_249)
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_246', 'TMP_148'] 
REF_250(F3Ddatasets.Player) -> plyr_[_pID]
REF_251(uint256) -> REF_250.aff
REF_252(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_253(F3Ddatasets.PlayerRounds) -> REF_252[_rID]
REF_254(uint256) -> REF_253.eth
RETURN _pID,REF_239,REF_242,REF_244,TMP_149,REF_251,REF_254"];
}
// Function: 452.sol-SuperCard-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.end
TMP_117(bool) = now > REF_148
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(bool) -> REF_149.ended
TMP_118(bool) = REF_150 == False
TMP_119(bool) = TMP_117 && TMP_118
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.plyr
TMP_120(bool) = REF_152 != 0
TMP_121(bool) = TMP_119 && TMP_120
CONDITION TMP_121"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(uint256) -> REF_153.plyr
TMP_122(bool) = REF_154 == _pID
CONDITION TMP_122"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_155(F3Ddatasets.Player) -> plyr_[_pID]
REF_156(uint256) -> REF_155.win
REF_158(F3Ddatasets.Round) -> round_[_rID]
REF_159(uint256) -> REF_158.pot
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_159', '48'] 
TMP_124(uint256) = TMP_123 / 100
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_156', 'TMP_124'] 
REF_161(F3Ddatasets.Player) -> plyr_[_pID]
REF_162(uint256) -> REF_161.gen
TMP_126(uint256) = INTERNAL_CALL, SuperCard.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_165(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_166(F3Ddatasets.PlayerRounds) -> REF_165[_rID]
REF_167(uint256) -> REF_166.mask
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_126', 'REF_167'] 
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_162', 'TMP_127'] 
REF_168(F3Ddatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.aff
RETURN TMP_125,TMP_128,REF_169"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_170(F3Ddatasets.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.win
REF_172(F3Ddatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.gen
TMP_129(uint256) = INTERNAL_CALL, SuperCard.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_176(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_177(F3Ddatasets.PlayerRounds) -> REF_176[_rID]
REF_178(uint256) -> REF_177.mask
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_129', 'REF_178'] 
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_173', 'TMP_130'] 
REF_179(F3Ddatasets.Player) -> plyr_[_pID]
REF_180(uint256) -> REF_179.aff
RETURN REF_171,TMP_131,REF_180"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_181(F3Ddatasets.Player) -> plyr_[_pID]
REF_182(uint256) -> REF_181.win
REF_183(F3Ddatasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.gen
REF_186(F3Ddatasets.Player) -> plyr_[_pID]
REF_187(uint256) -> REF_186.lrnd
TMP_132(uint256) = INTERNAL_CALL, SuperCard.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_187)
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_184', 'TMP_132'] 
REF_188(F3Ddatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.aff
RETURN REF_182,TMP_133,REF_189"];
}
// Function: 452.sol-SuperCard-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_190(F3Ddatasets.Round) -> round_[_rID]
REF_191(uint256) -> REF_190.mask
REF_193(F3Ddatasets.Round) -> round_[_rID]
REF_194(uint256) -> REF_193.pot
REF_196(F3Ddatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.team
REF_198(F3Ddatasets.PotSplit) -> potSplit_[REF_197]
REF_199(uint256) -> REF_198.gen
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_194', 'REF_199'] 
TMP_135(uint256) = TMP_134 / 100
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_135', '1000000000000000000'] 
REF_201(F3Ddatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.keys
TMP_137(uint256) = TMP_136 / REF_202
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_191', 'TMP_137'] 
REF_204(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_205(F3Ddatasets.PlayerRounds) -> REF_204[_rID]
REF_206(uint256) -> REF_205.keys
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_138', 'REF_206'] 
TMP_140(uint256) = TMP_139 / 1000000000000000000
RETURN TMP_140"];
}
// Function: 452.sol-SuperCard-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.end
TMP_111(bool) = _now < REF_138
CONDITION TMP_111"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.strt
TMP_112(uint256) = REF_140 + rndGap_
TMP_113(bool) = _now > TMP_112
CONDITION TMP_113"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_142', '_now'] 
RETURN TMP_114"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_144(F3Ddatasets.Round) -> round_[_rID]
REF_145(uint256) -> REF_144.strt
TMP_115(uint256) = REF_145 + rndGap_
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_115', '_now'] 
RETURN TMP_116"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 452.sol-SuperCard-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.strt
TMP_250(uint256) = REF_433 + rndGap_
TMP_251(bool) = _now > TMP_250
REF_434(F3Ddatasets.Round) -> round_[_rID]
REF_435(uint256) -> REF_434.end
TMP_252(bool) = _now <= REF_435
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.end
TMP_253(bool) = _now > REF_437
REF_438(F3Ddatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.plyr
TMP_254(bool) = REF_439 == 0
TMP_255(bool) = TMP_253 && TMP_254
TMP_256(bool) = TMP_252 || TMP_255
TMP_257(bool) = TMP_251 && TMP_256
CONDITION TMP_257"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_440(F3Ddatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.keys
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_441', '_keys'] 
TMP_259(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_258', '_keys'] 
RETURN TMP_259"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_260(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_260"];
}
// Function: 452.sol-SuperCard-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_456(bool) = activated_ == True
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 452.sol-SuperCard-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_458(bool) = _codeLength == 0
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 452.sol-SuperCard-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_460(bool) = _eth >= 1000000000
TMP_461(None) = SOLIDITY_CALL require(bool,string)(TMP_460,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_462(bool) = _eth <= 100000000000000000000000
TMP_463(None) = SOLIDITY_CALL require(bool,string)(TMP_462,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 452.sol-SuperCard-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.lrnd
TMP_286(bool) = REF_486 != 0
CONDITION TMP_286"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_487(F3Ddatasets.Player) -> plyr_[_pID]
REF_488(uint256) -> REF_487.lrnd
INTERNAL_CALL, SuperCard.updateGenVault(uint256,uint256)(_pID,REF_488)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_489(F3Ddatasets.Player) -> plyr_[_pID]
REF_490(uint256) -> REF_489.lrnd
REF_490(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_491(uint256) -> _eventData_.compressedData
REF_492(uint256) -> _eventData_.compressedData
TMP_288(uint256) = REF_492 + 10
REF_491(uint256) (->_eventData_) := TMP_288(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 452.sol-SuperCard-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_403(uint256) = rID_ + 1
_rID(uint256) := TMP_403(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_639(F3Ddatasets.Round) -> round_[_rID]
REF_640(uint256) -> REF_639.pot
REF_641(F3Ddatasets.Round) -> round_[_rID]
REF_642(uint256) -> REF_641.pot
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_642', 'msg.value'] 
REF_640(uint256) (->round_) := TMP_404(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 452.sol-SuperCard-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_289(F3Ddatasets.Round) -> round_[_rID]
REF_290(uint256) -> REF_289.strt
TMP_168(uint256) = REF_290 + rndGap_
TMP_169(bool) = _now > TMP_168
REF_291(F3Ddatasets.Round) -> round_[_rID]
REF_292(uint256) -> REF_291.end
TMP_170(bool) = _now <= REF_292
REF_293(F3Ddatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.end
TMP_171(bool) = _now > REF_294
REF_295(F3Ddatasets.Round) -> round_[_rID]
REF_296(uint256) -> REF_295.plyr
TMP_172(bool) = REF_296 == 0
TMP_173(bool) = TMP_171 && TMP_172
TMP_174(bool) = TMP_170 || TMP_173
TMP_175(bool) = TMP_169 && TMP_174
CONDITION TMP_175"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_297(F3Ddatasets.Player) -> plyr_[_pID]
REF_298(uint256) -> REF_297.gen
TMP_176(uint256) = INTERNAL_CALL, SuperCard.withdrawEarnings(uint256)(_pID)
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_176', '_eth'] 
REF_298(uint256) (->plyr_) := TMP_177(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_300(F3Ddatasets.Round) -> round_[_rID]
REF_301(uint256) -> REF_300.end
TMP_179(bool) = _now > REF_301
REF_302(F3Ddatasets.Round) -> round_[_rID]
REF_303(bool) -> REF_302.ended
TMP_180(bool) = REF_303 == False
TMP_181(bool) = TMP_179 && TMP_180
CONDITION TMP_181"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_304(F3Ddatasets.Round) -> round_[_rID]
REF_305(bool) -> REF_304.ended
REF_305(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_182(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_182(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_306(uint256) -> _eventData_.compressedData
REF_307(uint256) -> _eventData_.compressedData
TMP_183(uint256) = _now * 1000000000000000000
TMP_184(uint256) = REF_307 + TMP_183
REF_306(uint256) (->_eventData_) := TMP_184(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_308(uint256) -> _eventData_.compressedIDs
REF_309(uint256) -> _eventData_.compressedIDs
TMP_185(uint256) = REF_309 + _pID
REF_308(uint256) (->_eventData_) := TMP_185(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_311(F3Ddatasets.Player) -> plyr_[_pID]
REF_312(bytes32) -> REF_311.name
REF_313(uint256) -> _eventData_.compressedData
REF_314(uint256) -> _eventData_.compressedIDs
REF_315(address) -> _eventData_.winnerAddr
REF_316(bytes32) -> _eventData_.winnerName
REF_317(uint256) -> _eventData_.amountWon
REF_318(uint256) -> _eventData_.newPot
REF_319(uint256) -> _eventData_.P3DAmount
REF_320(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_312,REF_313,REF_314,REF_315,REF_316,REF_317,REF_318,REF_319,REF_320)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 452.sol-SuperCard-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_47(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_47(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = _affCode == TMP_51
TMP_53(bool) = _affCode == msg.sender
TMP_54(bool) = TMP_52 || TMP_53
CONDITION TMP_54"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_48(F3Ddatasets.Player) -> plyr_[_pID]
REF_49(uint256) -> REF_48.laff
_affID(uint256) := REF_49(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_50(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_50(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
TMP_55(bool) = _affID != REF_52
CONDITION TMP_55"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_53(F3Ddatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
REF_54(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_56(uint256) = INTERNAL_CALL, SuperCard.verifyTeam(uint256)(_team)
_team(uint256) := TMP_56(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, SuperCard.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 452.sol-SuperCard-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_40(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_40(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_42(bool) = _affCode == 0
TMP_43(bool) = _affCode == _pID
TMP_44(bool) = TMP_42 || TMP_43
CONDITION TMP_44"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_41(F3Ddatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
_affCode(uint256) := REF_42(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_43(F3Ddatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
TMP_45(bool) = _affCode != REF_44
CONDITION TMP_45"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
REF_46(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_46(uint256) = INTERNAL_CALL, SuperCard.verifyTeam(uint256)(_team)
_team(uint256) := TMP_46(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, SuperCard.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 452.sol-SuperCard-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_55(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_55(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_61(bool) = _affCode == 
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(bytes32) -> REF_56.name
TMP_62(bool) = _affCode == REF_57
TMP_63(bool) = TMP_61 || TMP_62
CONDITION TMP_63"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
_affID(uint256) := REF_59(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_60(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_60(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
TMP_64(bool) = _affID != REF_62
CONDITION TMP_64"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_63(F3Ddatasets.Player) -> plyr_[_pID]
REF_64(uint256) -> REF_63.laff
REF_64(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_65(uint256) = INTERNAL_CALL, SuperCard.verifyTeam(uint256)(_team)
_team(uint256) := TMP_65(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, SuperCard.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, SuperCard.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 452.sol-SuperCard-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_261 = CONVERT PlayerBook to address
TMP_262(bool) = msg.sender == TMP_261
TMP_263(None) = SOLIDITY_CALL require(bool,string)(TMP_262,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_445(uint256) -> pIDxAddr_[_addr]
TMP_264(bool) = REF_445 != _pID
CONDITION TMP_264"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_446(uint256) -> pIDxAddr_[_addr]
REF_446(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_447(uint256) -> pIDxName_[_name]
TMP_265(bool) = REF_447 != _pID
CONDITION TMP_265"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_448(uint256) -> pIDxName_[_name]
REF_448(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_449(F3Ddatasets.Player) -> plyr_[_pID]
REF_450(address) -> REF_449.addr
TMP_266(bool) = REF_450 != _addr
CONDITION TMP_266"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_451(F3Ddatasets.Player) -> plyr_[_pID]
REF_452(address) -> REF_451.addr
REF_452(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_453(F3Ddatasets.Player) -> plyr_[_pID]
REF_454(bytes32) -> REF_453.name
TMP_267(bool) = REF_454 != _name
CONDITION TMP_267"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_455(F3Ddatasets.Player) -> plyr_[_pID]
REF_456(bytes32) -> REF_455.name
REF_456(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_pID]
REF_458(uint256) -> REF_457.laff
TMP_268(bool) = REF_458 != _laff
CONDITION TMP_268"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_459(F3Ddatasets.Player) -> plyr_[_pID]
REF_460(uint256) -> REF_459.laff
REF_460(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_461(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_462(bool) -> REF_461[_name]
TMP_269(bool) = REF_462 == False
CONDITION TMP_269"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_463(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_464(bool) -> REF_463[_name]
REF_464(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 452.sol-SuperCard-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_270 = CONVERT PlayerBook to address
TMP_271(bool) = msg.sender == TMP_270
TMP_272(None) = SOLIDITY_CALL require(bool,string)(TMP_271,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_465(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_466(bool) -> REF_465[_name]
TMP_273(bool) = REF_466 == False
CONDITION TMP_273"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_467(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_468(bool) -> REF_467[_name]
REF_468(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 452.sol-SuperCard-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_89(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_89(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_101(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_101(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_103(F3Ddatasets.Player) -> plyr_[_affID]
REF_104(address) -> REF_103.addr
REF_105(F3Ddatasets.Player) -> plyr_[_affID]
REF_106(bytes32) -> REF_105.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_104,REF_106,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
9->1;
}
// Function: 452.sol-SuperCard-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_93(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_93(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_110(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_110(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_112(F3Ddatasets.Player) -> plyr_[_affID]
REF_113(address) -> REF_112.addr
REF_114(F3Ddatasets.Player) -> plyr_[_affID]
REF_115(bytes32) -> REF_114.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_113,REF_115,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
9->1;
}
// Function: 452.sol-SuperCard-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_97(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_97(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_119(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_119(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_121(F3Ddatasets.Player) -> plyr_[_affID]
REF_122(address) -> REF_121.addr
REF_123(F3Ddatasets.Player) -> plyr_[_affID]
REF_124(bytes32) -> REF_123.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_122,REF_124,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
9->1;
}
// Function: 452.sol-SuperCard-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0xb838c100EB1a1d08B215FBbCC06698e9c181358C)

IRs:
TMP_455 = CONVERT 1051719956546393184689023121800244516931579753868 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_455(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = SuperCard

IRs:
name(string) := SuperCard(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = SuperCard

IRs:
symbol(string) := SuperCard(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 4637

IRs:
rndInit_(uint256) := 4637(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 15

IRs:
rndInc_(uint256) := 15(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 10800

IRs:
rndMax_(uint256) := 10800(uint256)"];
}
// Function: 452.sol-SuperCard-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 452.sol-SuperCard-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_326(uint256) = INTERNAL_CALL, SuperCard.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_326(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_327(bool) = _earnings > 0
CONDITION TMP_327"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_557(F3Ddatasets.Player) -> plyr_[_pID]
REF_558(uint256) -> REF_557.gen
REF_560(F3Ddatasets.Player) -> plyr_[_pID]
REF_561(uint256) -> REF_560.gen
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_561'] 
REF_558(uint256) (->plyr_) := TMP_328(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_562(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_563(F3Ddatasets.PlayerRounds) -> REF_562[_rIDlast]
REF_564(uint256) -> REF_563.mask
REF_566(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_567(F3Ddatasets.PlayerRounds) -> REF_566[_rIDlast]
REF_568(uint256) -> REF_567.mask
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_568'] 
REF_564(uint256) (->plyrRnds_) := TMP_329(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 452.sol-SuperCard-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_668(F3Ddatasets.Round) -> round_[_rID]
REF_669(uint256) -> REF_668.keys
TMP_424(uint256) = TMP_423 / REF_669
_ppt(uint256) := TMP_424(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_670(F3Ddatasets.Round) -> round_[_rID]
REF_671(uint256) -> REF_670.mask
REF_673(F3Ddatasets.Round) -> round_[_rID]
REF_674(uint256) -> REF_673.mask
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_674'] 
REF_671(uint256) (->round_) := TMP_425(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_427(uint256) = TMP_426 / 1000000000000000000
_pearn(uint256) := TMP_427(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_676(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_677(F3Ddatasets.PlayerRounds) -> REF_676[_rID]
REF_678(uint256) -> REF_677.mask
REF_679(F3Ddatasets.Round) -> round_[_rID]
REF_680(uint256) -> REF_679.mask
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_680', '_keys'] 
TMP_429(uint256) = TMP_428 / 1000000000000000000
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_429', '_pearn'] 
REF_684(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_685(F3Ddatasets.PlayerRounds) -> REF_684[_rID]
REF_686(uint256) -> REF_685.mask
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_430', 'REF_686'] 
REF_678(uint256) (->plyrRnds_) := TMP_431(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_689(F3Ddatasets.Round) -> round_[_rID]
REF_690(uint256) -> REF_689.keys
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_690'] 
TMP_433(uint256) = TMP_432 / 1000000000000000000
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_433'] 
RETURN TMP_434"];
}
// Function: 452.sol-SuperCard-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_569(F3Ddatasets.Round) -> round_[_rID]
REF_570(uint256) -> REF_569.end
TMP_330(bool) = _now > REF_570
REF_571(F3Ddatasets.Round) -> round_[_rID]
REF_572(uint256) -> REF_571.plyr
TMP_331(bool) = REF_572 == 0
TMP_332(bool) = TMP_330 && TMP_331
CONDITION TMP_332"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_333(uint256) = _keys / 1000000000000000000
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_333', 'rndInc_'] 
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_334', '_now'] 
_newTime(uint256) := TMP_335(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_336(uint256) = _keys / 1000000000000000000
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_336', 'rndInc_'] 
REF_577(F3Ddatasets.Round) -> round_[_rID]
REF_578(uint256) -> REF_577.end
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_337', 'REF_578'] 
_newTime(uint256) := TMP_338(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_340(bool) = _newTime < TMP_339
CONDITION TMP_340"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_580(F3Ddatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.end
REF_581(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_582(F3Ddatasets.Round) -> round_[_rID]
REF_583(uint256) -> REF_582.end
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_583(uint256) (->round_) := TMP_341(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 452.sol-SuperCard-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_283(bool) = _team < 0
TMP_284(bool) = _team > 3
TMP_285(bool) = TMP_283 || TMP_284
CONDITION TMP_285"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 452.sol-SuperCard-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_65(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_65(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_66(F3Ddatasets.Round) -> round_[_rID]
REF_67(uint256) -> REF_66.end
TMP_70(bool) = _now > REF_67
REF_68(F3Ddatasets.Round) -> round_[_rID]
REF_69(bool) -> REF_68.ended
TMP_71(bool) = REF_69 == False
TMP_72(bool) = TMP_70 && TMP_71
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.plyr
TMP_73(bool) = REF_71 != 0
TMP_74(bool) = TMP_72 && TMP_73
CONDITION TMP_74"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
REF_73(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_75(F3Ddatasets.EventReturns) = INTERNAL_CALL, SuperCard.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_75(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_76(uint256) = INTERNAL_CALL, SuperCard.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_76(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_77(bool) = _eth > 0
CONDITION TMP_77"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(address) -> REF_74.addr
Transfer dest:REF_75 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_77(uint256) -> _eventData_.compressedData
REF_78(uint256) -> _eventData_.compressedData
TMP_79(uint256) = _now * 1000000000000000000
TMP_80(uint256) = REF_78 + TMP_79
REF_77(uint256) (->_eventData_) := TMP_80(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_79(uint256) -> _eventData_.compressedIDs
REF_80(uint256) -> _eventData_.compressedIDs
TMP_81(uint256) = REF_80 + _pID
REF_79(uint256) (->_eventData_) := TMP_81(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_82(F3Ddatasets.Player) -> plyr_[_pID]
REF_83(bytes32) -> REF_82.name
REF_84(uint256) -> _eventData_.compressedData
REF_85(uint256) -> _eventData_.compressedIDs
REF_86(address) -> _eventData_.winnerAddr
REF_87(bytes32) -> _eventData_.winnerName
REF_88(uint256) -> _eventData_.amountWon
REF_89(uint256) -> _eventData_.newPot
REF_90(uint256) -> _eventData_.P3DAmount
REF_91(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_83,_eth,REF_84,REF_85,REF_86,REF_87,REF_88,REF_89,REF_90,REF_91)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_83(uint256) = INTERNAL_CALL, SuperCard.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_83(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_84(bool) = _eth > 0
CONDITION TMP_84"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_92(F3Ddatasets.Player) -> plyr_[_pID]
REF_93(address) -> REF_92.addr
Transfer dest:REF_93 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(bytes32) -> REF_96.name
Emit onWithdraw(_pID,msg.sender,REF_97,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, SuperCard.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, SuperCard.isHuman()()"];
23->1;
}
// Function: 452.sol-SuperCard-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_691(F3Ddatasets.Player) -> plyr_[_pID]
REF_692(uint256) -> REF_691.lrnd
INTERNAL_CALL, SuperCard.updateGenVault(uint256,uint256)(_pID,REF_692)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_693(F3Ddatasets.Player) -> plyr_[_pID]
REF_694(uint256) -> REF_693.win
REF_696(F3Ddatasets.Player) -> plyr_[_pID]
REF_697(uint256) -> REF_696.gen
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_694', 'REF_697'] 
REF_699(F3Ddatasets.Player) -> plyr_[_pID]
REF_700(uint256) -> REF_699.aff
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_436', 'REF_700'] 
_earnings(uint256) := TMP_437(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_438(bool) = _earnings > 0
CONDITION TMP_438"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_701(F3Ddatasets.Player) -> plyr_[_pID]
REF_702(uint256) -> REF_701.win
REF_702(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_703(F3Ddatasets.Player) -> plyr_[_pID]
REF_704(uint256) -> REF_703.gen
REF_704(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_705(F3Ddatasets.Player) -> plyr_[_pID]
REF_706(uint256) -> REF_705.aff
REF_706(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
}
