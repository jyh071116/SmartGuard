digraph G {
// Function: 500.sol-KeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_400'] 
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_402'] 
TMP_404(uint256) = TMP_403 / 2
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_401', 'TMP_404'] 
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_407(uint256) = TMP_405 / TMP_406
RETURN TMP_407"];
}
// Function: 500.sol-KeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_390(uint256) = INTERNAL_CALL, KeysCalc.eth(uint256)(_curKeys)
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_392(uint256) = INTERNAL_CALL, KeysCalc.eth(uint256)(TMP_391)
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_390', 'TMP_392'] 
RETURN TMP_393"];
}
// Function: 500.sol-KeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_394', '312500000000000000000000000'] 
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_395', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_396'] 
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_397', '74999921875000000000000000000000'] 
TMP_399(uint256) = TMP_398 / 156250000
RETURN TMP_399"];
}
// Function: 500.sol-KeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_387(uint256) = INTERNAL_CALL, KeysCalc.keys(uint256)(TMP_386)
TMP_388(uint256) = INTERNAL_CALL, KeysCalc.keys(uint256)(_curEth)
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_387', 'TMP_388'] 
RETURN TMP_389"];
}
// Function: 500.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_408 = CONVERT _input to bytes
_temp(bytes) := TMP_408(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_670 -> LENGTH _temp
_length(uint256) := REF_670(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_length <= 32 && _length > 0)

IRs:
TMP_409(bool) = _length <= 32
TMP_410(bool) = _length > 0
TMP_411(bool) = TMP_409 && TMP_410
TMP_412(None) = SOLIDITY_CALL require(bool)(TMP_411)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20)

IRs:
REF_671(None) -> _temp[0]
TMP_413(bool) = REF_671 != 32
TMP_414(uint256) = _length - 1
REF_672(None) -> _temp[TMP_414]
TMP_415(bool) = REF_672 != 32
TMP_416(bool) = TMP_413 && TMP_415
TMP_417(None) = SOLIDITY_CALL require(bool)(TMP_416)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_673(None) -> _temp[0]
TMP_418(bool) = REF_673 == 48
CONDITION TMP_418"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_temp[1] != 0x78)

IRs:
REF_674(None) -> _temp[1]
TMP_419(bool) = REF_674 != 120
TMP_420(None) = SOLIDITY_CALL require(bool)(TMP_419)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(_temp[1] != 0x58)

IRs:
REF_675(None) -> _temp[1]
TMP_421(bool) = REF_675 != 88
TMP_422(None) = SOLIDITY_CALL require(bool)(TMP_421)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_423(bool) = i < _length
CONDITION TMP_423"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_676(None) -> _temp[i]
TMP_424(bool) = REF_676 > 64
REF_677(None) -> _temp[i]
TMP_425(bool) = REF_677 < 91
TMP_426(bool) = TMP_424 && TMP_425
CONDITION TMP_426"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_678(bytes1) -> _temp[i]
REF_679(None) -> _temp[i]
TMP_427 = CONVERT REF_679 to uint256
TMP_428(uint256) = TMP_427 + 32
TMP_429 = CONVERT TMP_428 to bytes1
REF_678(bytes1) (->_temp) := TMP_429(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_430(bool) = _hasNonNumber == False
CONDITION TMP_430"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a))

IRs:
REF_680(None) -> _temp[i]
TMP_431(bool) = REF_680 == 32
REF_681(None) -> _temp[i]
TMP_432(bool) = REF_681 > 96
REF_682(None) -> _temp[i]
TMP_433(bool) = REF_682 < 123
TMP_434(bool) = TMP_432 && TMP_433
TMP_435(bool) = TMP_431 || TMP_434
REF_683(None) -> _temp[i]
TMP_436(bool) = REF_683 > 47
REF_684(None) -> _temp[i]
TMP_437(bool) = REF_684 < 58
TMP_438(bool) = TMP_436 && TMP_437
TMP_439(bool) = TMP_435 || TMP_438
TMP_440(None) = SOLIDITY_CALL require(bool)(TMP_439)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_685(None) -> _temp[i]
TMP_441(bool) = REF_685 == 32
CONDITION TMP_441"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(_temp[i + 1] != 0x20)

IRs:
TMP_442(uint256) = i + 1
REF_686(None) -> _temp[TMP_442]
TMP_443(bool) = REF_686 != 32
TMP_444(None) = SOLIDITY_CALL require(bool)(TMP_443)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_445(bool) = _hasNonNumber == False
REF_687(None) -> _temp[i]
TMP_446(bool) = REF_687 < 48
REF_688(None) -> _temp[i]
TMP_447(bool) = REF_688 > 57
TMP_448(bool) = TMP_446 || TMP_447
TMP_449(bool) = TMP_445 && TMP_448
CONDITION TMP_449"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_450(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool)(_hasNonNumber == true)

IRs:
TMP_451(bool) = _hasNonNumber == True
TMP_452(None) = SOLIDITY_CALL require(bool)(TMP_451)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 500.sol-POOHMO-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_368(bool) = msg.sender == admin
TMP_369(None) = SOLIDITY_CALL require(bool)(TMP_368)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(activated_ == false)

IRs:
TMP_370(bool) = activated_ == False
TMP_371(None) = SOLIDITY_CALL require(bool)(TMP_370)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_651(POOHMODatasets.Round) -> round_[1]
REF_652(uint256) -> REF_651.strt
TMP_372(uint256) = now + rndExtra_
TMP_373(uint256) = TMP_372 - rndGap_
REF_652(uint256) (->round_) := TMP_373(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_653(POOHMODatasets.Round) -> round_[1]
REF_654(uint256) -> REF_653.end
TMP_374(uint256) = now + rndInit_
TMP_375(uint256) = TMP_374 + rndExtra_
REF_654(uint256) (->round_) := TMP_375(uint256)"];
}
// Function: 500.sol-POOHMO-buyCore(uint256,uint256,POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_247(POOHMODatasets.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.strt
TMP_139(uint256) = REF_248 + rndGap_
TMP_140(bool) = _now > TMP_139
REF_249(POOHMODatasets.Round) -> round_[_rID]
REF_250(uint256) -> REF_249.end
TMP_141(bool) = _now <= REF_250
REF_251(POOHMODatasets.Round) -> round_[_rID]
REF_252(uint256) -> REF_251.end
TMP_142(bool) = _now > REF_252
REF_253(POOHMODatasets.Round) -> round_[_rID]
REF_254(uint256) -> REF_253.plyr
TMP_143(bool) = REF_254 == 0
TMP_144(bool) = TMP_142 && TMP_143
TMP_145(bool) = TMP_141 || TMP_144
TMP_146(bool) = TMP_140 && TMP_145
CONDITION TMP_146"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,0,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.core(uint256,uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)(_rID,_pID,msg.value,_affID,0,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_255(POOHMODatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.end
TMP_148(bool) = _now > REF_256
REF_257(POOHMODatasets.Round) -> round_[_rID]
REF_258(bool) -> REF_257.ended
TMP_149(bool) = REF_258 == False
TMP_150(bool) = TMP_148 && TMP_149
CONDITION TMP_150"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_259(POOHMODatasets.Round) -> round_[_rID]
REF_260(bool) -> REF_259.ended
REF_260(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_151(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.endRound(POOHMODatasets.EventReturns)(_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_151(POOHMODatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_261(uint256) -> _eventData_.compressedData
REF_262(uint256) -> _eventData_.compressedData
TMP_152(uint256) = _now * 1000000000000000000
TMP_153(uint256) = REF_262 + TMP_152
REF_261(uint256) (->_eventData_) := TMP_153(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_263(uint256) -> _eventData_.compressedIDs
REF_264(uint256) -> _eventData_.compressedIDs
TMP_154(uint256) = REF_264 + _pID
REF_263(uint256) (->_eventData_) := TMP_154(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
POOHMOevents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount)

IRs:
REF_266(POOHMODatasets.Player) -> plyr_[_pID]
REF_267(bytes32) -> REF_266.name
REF_268(uint256) -> _eventData_.compressedData
REF_269(uint256) -> _eventData_.compressedIDs
REF_270(address) -> _eventData_.winnerAddr
REF_271(bytes32) -> _eventData_.winnerName
REF_272(uint256) -> _eventData_.amountWon
REF_273(uint256) -> _eventData_.newPot
REF_274(uint256) -> _eventData_.POOHAmount
REF_275(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_267,msg.value,REF_268,REF_269,REF_270,REF_271,REF_272,REF_273,REF_274,REF_275)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_276(POOHMODatasets.Player) -> plyr_[_pID]
REF_277(uint256) -> REF_276.gen
REF_278(POOHMODatasets.Player) -> plyr_[_pID]
REF_279(uint256) -> REF_278.gen
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_279', 'msg.value'] 
REF_277(uint256) (->plyr_) := TMP_156(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 500.sol-POOHMO-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_17(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.determinePID(POOHMODatasets.EventReturns)(_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_17(POOHMODatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_14(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_14(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _affCode == TMP_18
TMP_20(bool) = _affCode == msg.sender
TMP_21(bool) = TMP_19 || TMP_20
CONDITION TMP_21"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_15(POOHMODatasets.Player) -> plyr_[_pID]
REF_16(uint256) -> REF_15.laff
_affID(uint256) := REF_16(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_17(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_17(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_18(POOHMODatasets.Player) -> plyr_[_pID]
REF_19(uint256) -> REF_18.laff
TMP_22(bool) = _affID != REF_19
CONDITION TMP_22"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_20(POOHMODatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
REF_21(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.buyCore(uint256,uint256,POOHMODatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMO.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 500.sol-POOHMO-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.determinePID(POOHMODatasets.EventReturns)(_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_8(POOHMODatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_7(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_7(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_9(bool) = _affCode == 0
TMP_10(bool) = _affCode == _pID
TMP_11(bool) = TMP_9 || TMP_10
CONDITION TMP_11"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_8(POOHMODatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
_affCode(uint256) := REF_9(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_10(POOHMODatasets.Player) -> plyr_[_pID]
REF_11(uint256) -> REF_10.laff
TMP_12(bool) = _affCode != REF_11
CONDITION TMP_12"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_12(POOHMODatasets.Player) -> plyr_[_pID]
REF_13(uint256) -> REF_12.laff
REF_13(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.buyCore(uint256,uint256,POOHMODatasets.EventReturns)(_pID,_affCode,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMO.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 500.sol-POOHMO-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_27(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.determinePID(POOHMODatasets.EventReturns)(_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_27(POOHMODatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_22(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_22(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_28(bool) = _affCode == 
REF_23(POOHMODatasets.Player) -> plyr_[_pID]
REF_24(bytes32) -> REF_23.name
TMP_29(bool) = _affCode == REF_24
TMP_30(bool) = TMP_28 || TMP_29
CONDITION TMP_30"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_25(POOHMODatasets.Player) -> plyr_[_pID]
REF_26(uint256) -> REF_25.laff
_affID(uint256) := REF_26(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_27(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_27(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_28(POOHMODatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
TMP_31(bool) = _affID != REF_29
CONDITION TMP_31"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_30(POOHMODatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
REF_31(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.buyCore(uint256,uint256,POOHMODatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMO.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 500.sol-POOHMO-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_384(POOHMODatasets.Round) -> round_[_rID]
REF_385(uint256) -> REF_384.strt
TMP_203(uint256) = REF_385 + rndGap_
TMP_204(bool) = _now > TMP_203
REF_386(POOHMODatasets.Round) -> round_[_rID]
REF_387(uint256) -> REF_386.end
TMP_205(bool) = _now <= REF_387
REF_388(POOHMODatasets.Round) -> round_[_rID]
REF_389(uint256) -> REF_388.end
TMP_206(bool) = _now > REF_389
REF_390(POOHMODatasets.Round) -> round_[_rID]
REF_391(uint256) -> REF_390.plyr
TMP_207(bool) = REF_391 == 0
TMP_208(bool) = TMP_206 && TMP_207
TMP_209(bool) = TMP_205 || TMP_208
TMP_210(bool) = TMP_204 && TMP_209
CONDITION TMP_210"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_392(POOHMODatasets.Round) -> round_[_rID]
REF_393(uint256) -> REF_392.eth
TMP_211(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keysRec(uint256,uint256), arguments:['REF_393', '_eth'] 
RETURN TMP_211"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_212(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_212"];
}
// Function: 500.sol-POOHMO-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_374(POOHMODatasets.Round) -> round_[_rIDlast]
REF_375(uint256) -> REF_374.mask
REF_377(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_378(POOHMODatasets.PlayerRounds) -> REF_377[_rIDlast]
REF_379(uint256) -> REF_378.keys
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_375', 'REF_379'] 
TMP_201(uint256) = TMP_200 / 1000000000000000000
REF_381(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_382(POOHMODatasets.PlayerRounds) -> REF_381[_rIDlast]
REF_383(uint256) -> REF_382.mask
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_201', 'REF_383'] 
RETURN TMP_202"];
}
// Function: 500.sol-POOHMO-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
flushDivs = whaleContract

IRs:
flushDivs(address) := whaleContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PlayerBook = PlayerBookInterface(playerbook)

IRs:
TMP_0 = CONVERT playerbook to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_0(PlayerBookInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[0] = POOHMODatasets.TeamFee(49,10)

IRs:
REF_0(POOHMODatasets.TeamFee) -> fees_[0]
TMP_1(POOHMODatasets.TeamFee) = new TeamFee(49,10)
REF_0(POOHMODatasets.TeamFee) (->fees_) := TMP_1(POOHMODatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
potSplit_[0] = POOHMODatasets.PotSplit(15,10)

IRs:
REF_2(POOHMODatasets.PotSplit) -> potSplit_[0]
TMP_2(POOHMODatasets.PotSplit) = new PotSplit(15,10)
REF_2(POOHMODatasets.PotSplit) (->potSplit_) := TMP_2(POOHMODatasets.PotSplit)"];
}
// Function: 500.sol-POOHMO-core(uint256,uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_313(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_314(POOHMODatasets.PlayerRounds) -> REF_313[_rID]
REF_315(uint256) -> REF_314.keys
TMP_176(bool) = REF_315 == 0
CONDITION TMP_176"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_177(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.managePlayer(uint256,POOHMODatasets.EventReturns)(_pID,_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_177(POOHMODatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 5000000000000000000

IRs:
REF_316(POOHMODatasets.Round) -> round_[_rID]
REF_317(uint256) -> REF_316.eth
TMP_178(bool) = REF_317 < 100000000000000000000
REF_318(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_319(POOHMODatasets.PlayerRounds) -> REF_318[_rID]
REF_320(uint256) -> REF_319.eth
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_320', '_eth'] 
TMP_180(bool) = TMP_179 > 5000000000000000000
TMP_181(bool) = TMP_178 && TMP_180
CONDITION TMP_181"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (5000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_323(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_324(POOHMODatasets.PlayerRounds) -> REF_323[_rID]
REF_325(uint256) -> REF_324.eth
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['5000000000000000000', 'REF_325'] 
_availableLimit(uint256) := TMP_182(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_183(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_327(POOHMODatasets.Player) -> plyr_[_pID]
REF_328(uint256) -> REF_327.gen
REF_329(POOHMODatasets.Player) -> plyr_[_pID]
REF_330(uint256) -> REF_329.gen
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_330', '_refund'] 
REF_328(uint256) (->plyr_) := TMP_184(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_185(bool) = _eth > 1000000000
CONDITION TMP_185"];
10->11[label="True"];
10->30[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_332(POOHMODatasets.Round) -> round_[_rID]
REF_333(uint256) -> REF_332.eth
TMP_186(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keysRec(uint256,uint256), arguments:['REF_333', '_eth'] 
_keys(uint256) := TMP_186(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_187(bool) = _keys >= 1000000000000000000
CONDITION TMP_187"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, POOHMO.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_335(POOHMODatasets.Round) -> round_[_rID]
REF_336(uint256) -> REF_335.plyr
TMP_189(bool) = REF_336 != _pID
CONDITION TMP_189"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_337(POOHMODatasets.Round) -> round_[_rID]
REF_338(uint256) -> REF_337.plyr
REF_338(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_339(POOHMODatasets.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.team
TMP_190(bool) = REF_340 != _team
CONDITION TMP_190"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_341(POOHMODatasets.Round) -> round_[_rID]
REF_342(uint256) -> REF_341.team
REF_342(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_343(uint256) -> _eventData_.compressedData
REF_344(uint256) -> _eventData_.compressedData
TMP_191(uint256) = REF_344 + 100
REF_343(uint256) (->_eventData_) := TMP_191(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_345(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_346(POOHMODatasets.PlayerRounds) -> REF_345[_rID]
REF_347(uint256) -> REF_346.keys
REF_349(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_350(POOHMODatasets.PlayerRounds) -> REF_349[_rID]
REF_351(uint256) -> REF_350.keys
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_351'] 
REF_347(uint256) (->plyrRnds_) := TMP_192(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_352(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_353(POOHMODatasets.PlayerRounds) -> REF_352[_rID]
REF_354(uint256) -> REF_353.eth
REF_356(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_357(POOHMODatasets.PlayerRounds) -> REF_356[_rID]
REF_358(uint256) -> REF_357.eth
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_358'] 
REF_354(uint256) (->plyrRnds_) := TMP_193(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_359(POOHMODatasets.Round) -> round_[_rID]
REF_360(uint256) -> REF_359.keys
REF_362(POOHMODatasets.Round) -> round_[_rID]
REF_363(uint256) -> REF_362.keys
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_363'] 
REF_360(uint256) (->round_) := TMP_194(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_364(POOHMODatasets.Round) -> round_[_rID]
REF_365(uint256) -> REF_364.eth
REF_367(POOHMODatasets.Round) -> round_[_rID]
REF_368(uint256) -> REF_367.eth
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_368'] 
REF_365(uint256) (->round_) := TMP_195(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
rndTmEth_[_rID][0] = _eth.add(rndTmEth_[_rID][0])

IRs:
REF_369(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_370(uint256) -> REF_369[0]
REF_372(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_373(uint256) -> REF_372[0]
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_373'] 
REF_370(uint256) (->rndTmEth_) := TMP_196(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,0,_eventData_)

IRs:
TMP_197(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.distributeExternal(uint256,uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)(_rID,_pID,_eth,_affID,0,_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_197(POOHMODatasets.EventReturns)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,0,_keys,_eventData_)

IRs:
TMP_198(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.distributeInternal(uint256,uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)(_rID,_pID,_eth,0,_keys,_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_198(POOHMODatasets.EventReturns)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
endTx(_pID,0,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.endTx(uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)(_pID,0,_eth,_keys,_eventData_)"];
29->30;
30[label="Node Type: END_IF 30
"];
}
// Function: 500.sol-POOHMO-determineNextRoundLength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
roundTime = uint256(keccak256()(abi.encodePacked(blockhash(uint256)(block.number - 1)))) % 6

IRs:
TMP_285(uint256) = block.number - 1
TMP_286(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_285)
TMP_287(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_286)
TMP_288(bytes32) = SOLIDITY_CALL keccak256()(TMP_287)
TMP_289 = CONVERT TMP_288 to uint256
TMP_290(uint256) = TMP_289 % 6
roundTime(uint256) := TMP_290(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
roundTime

IRs:
RETURN roundTime"];
3[label="Node Type: RETURN 3

EXPRESSION:
time

IRs:
RETURN time"];
}
// Function: 500.sol-POOHMO-determinePID(POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_433(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_433(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_237(bool) = _pID == 0
CONDITION TMP_237"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_238(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_238(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_239(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_239(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_240(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_240(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_437(uint256) -> pIDxAddr_[msg.sender]
REF_437(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_438(POOHMODatasets.Player) -> plyr_[_pID]
REF_439(address) -> REF_438.addr
REF_439(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_241(bool) = _name != 
CONDITION TMP_241"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_440(uint256) -> pIDxName_[_name]
REF_440(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_441(POOHMODatasets.Player) -> plyr_[_pID]
REF_442(bytes32) -> REF_441.name
REF_442(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_443(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_444(bool) -> REF_443[_name]
REF_444(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_242(bool) = _laff != 0
TMP_243(bool) = _laff != _pID
TMP_244(bool) = TMP_242 && TMP_243
CONDITION TMP_244"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_445(POOHMODatasets.Player) -> plyr_[_pID]
REF_446(uint256) -> REF_445.laff
REF_446(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_447(uint256) -> _eventData_.compressedData
REF_448(uint256) -> _eventData_.compressedData
TMP_245(uint256) = REF_448 + 1
REF_447(uint256) (->_eventData_) := TMP_245(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 500.sol-POOHMO-distributeExternal(uint256,uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_dev = _eth / 100

IRs:
TMP_307(uint256) = _eth / 100
_dev(uint256) := TMP_307(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_POOH = 0

IRs:
_POOH(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(admin).call.value(_dev)()

IRs:
TMP_308 = CONVERT admin to address
TMP_310(bool) = LOW_LEVEL_CALL, dest:TMP_308, function:call, arguments:[] value:_dev 
TMP_311 = UnaryType.BANG TMP_310 
CONDITION TMP_311"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_POOH = _dev

IRs:
_POOH(uint256) := _dev(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_dev = 0

IRs:
_dev(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_312(uint256) = _eth / 10
_aff(uint256) := TMP_312(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_313(bool) = _affID != _pID
REF_551(POOHMODatasets.Player) -> plyr_[_affID]
REF_552(bytes32) -> REF_551.name
TMP_314(bool) = REF_552 != 
TMP_315(bool) = TMP_313 && TMP_314
CONDITION TMP_315"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_553(POOHMODatasets.Player) -> plyr_[_affID]
REF_554(uint256) -> REF_553.aff
REF_556(POOHMODatasets.Player) -> plyr_[_affID]
REF_557(uint256) -> REF_556.aff
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_557'] 
REF_554(uint256) (->plyr_) := TMP_316(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
POOHMOevents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_559(POOHMODatasets.Player) -> plyr_[_affID]
REF_560(address) -> REF_559.addr
REF_561(POOHMODatasets.Player) -> plyr_[_affID]
REF_562(bytes32) -> REF_561.name
Emit onAffiliatePayout(_affID,REF_560,REF_562,_rID,_pID,_aff,now)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_POOH = _POOH.add(_aff)

IRs:
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_POOH', '_aff'] 
_POOH(uint256) := TMP_318(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_POOH = _POOH.add((_eth.mul(fees_[_team].pooh)) / (100))

IRs:
REF_566(POOHMODatasets.TeamFee) -> fees_[_team]
REF_567(uint256) -> REF_566.pooh
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_567'] 
TMP_320(uint256) = TMP_319 / 100
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_POOH', 'TMP_320'] 
_POOH(uint256) := TMP_321(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_POOH > 0

IRs:
TMP_322(bool) = _POOH > 0
CONDITION TMP_322"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
flushDivs.call.value(_POOH)(bytes4(keccak256()(donate())))

IRs:
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(donate())
TMP_325 = CONVERT TMP_324 to bytes4
TMP_326(bool) = LOW_LEVEL_CALL, dest:flushDivs, function:call, arguments:['TMP_325'] value:_POOH "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.POOHAmount = _POOH.add(_eventData_.POOHAmount)

IRs:
REF_570(uint256) -> _eventData_.POOHAmount
REF_572(uint256) -> _eventData_.POOHAmount
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_POOH', 'REF_572'] 
REF_570(uint256) (->_eventData_) := TMP_327(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 500.sol-POOHMO-distributeInternal(uint256,uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_575(POOHMODatasets.TeamFee) -> fees_[_team]
REF_576(uint256) -> REF_575.gen
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_576'] 
TMP_330(uint256) = TMP_329 / 100
_gen(uint256) := TMP_330(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].pooh)) / 100))

IRs:
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_332(uint256) = TMP_331 / 100
REF_581(POOHMODatasets.TeamFee) -> fees_[_team]
REF_582(uint256) -> REF_581.pooh
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_582'] 
TMP_334(uint256) = TMP_333 / 100
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_332', 'TMP_334'] 
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_335'] 
_eth(uint256) := TMP_336(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_337(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_338(uint256) = INTERNAL_CALL, POOHMO.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_338(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_dust > 0

IRs:
TMP_339(bool) = _dust > 0
CONDITION TMP_339"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_340(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_585(POOHMODatasets.Round) -> round_[_rID]
REF_586(uint256) -> REF_585.pot
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_589(POOHMODatasets.Round) -> round_[_rID]
REF_590(uint256) -> REF_589.pot
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_341', 'REF_590'] 
REF_586(uint256) (->round_) := TMP_342(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_591(uint256) -> _eventData_.genAmount
REF_593(uint256) -> _eventData_.genAmount
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_593'] 
REF_591(uint256) (->_eventData_) := TMP_343(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_594(uint256) -> _eventData_.potAmount
REF_594(uint256) (->_eventData_) := _pot(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 500.sol-POOHMO-endRound(POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_457(POOHMODatasets.Round) -> round_[_rID]
REF_458(uint256) -> REF_457.plyr
_winPID(uint256) := REF_458(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_459(POOHMODatasets.Round) -> round_[_rID]
REF_460(uint256) -> REF_459.team
_winTID(uint256) := REF_460(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_461(POOHMODatasets.Round) -> round_[_rID]
REF_462(uint256) -> REF_461.pot
_pot(uint256) := REF_462(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_249(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_250(uint256) = TMP_249 / 100
_win(uint256) := TMP_250(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dev = (_pot / 50)

IRs:
TMP_251(uint256) = _pot / 50
_dev(uint256) := TMP_251(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_465(POOHMODatasets.PotSplit) -> potSplit_[_winTID]
REF_466(uint256) -> REF_465.gen
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_466'] 
TMP_253(uint256) = TMP_252 / 100
_gen(uint256) := TMP_253(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_POOH = (_pot.mul(potSplit_[_winTID].pooh)) / 100

IRs:
REF_468(POOHMODatasets.PotSplit) -> potSplit_[_winTID]
REF_469(uint256) -> REF_468.pooh
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_469'] 
TMP_255(uint256) = TMP_254 / 100
_POOH(uint256) := TMP_255(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_dev)).sub(_gen)).sub(_POOH)

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_256', '_dev'] 
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_257', '_gen'] 
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_258', '_POOH'] 
_res(uint256) := TMP_259(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_475(POOHMODatasets.Round) -> round_[_rID]
REF_476(uint256) -> REF_475.keys
TMP_261(uint256) = TMP_260 / REF_476
_ppt(uint256) := TMP_261(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_479(POOHMODatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.keys
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_480'] 
TMP_263(uint256) = TMP_262 / 1000000000000000000
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_263'] 
_dust(uint256) := TMP_264(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_265(bool) = _dust > 0
CONDITION TMP_265"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_266(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_267(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_483(POOHMODatasets.Player) -> plyr_[_winPID]
REF_484(uint256) -> REF_483.win
REF_486(POOHMODatasets.Player) -> plyr_[_winPID]
REF_487(uint256) -> REF_486.win
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_487'] 
REF_484(uint256) (->plyr_) := TMP_268(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_dev)

IRs:
Transfer dest:admin value:_dev"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
flushDivs.call.value(_POOH)(bytes4(keccak256()(donate())))

IRs:
TMP_271(bytes32) = SOLIDITY_CALL keccak256()(donate())
TMP_272 = CONVERT TMP_271 to bytes4
TMP_273(bool) = LOW_LEVEL_CALL, dest:flushDivs, function:call, arguments:['TMP_272'] value:_POOH "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_491(POOHMODatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.mask
REF_494(POOHMODatasets.Round) -> round_[_rID]
REF_495(uint256) -> REF_494.mask
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_495'] 
REF_492(uint256) (->round_) := TMP_274(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_496(uint256) -> _eventData_.compressedData
REF_497(uint256) -> _eventData_.compressedData
REF_498(POOHMODatasets.Round) -> round_[_rID]
REF_499(uint256) -> REF_498.end
TMP_275(uint256) = REF_499 * 1000000
TMP_276(uint256) = REF_497 + TMP_275
REF_496(uint256) (->_eventData_) := TMP_276(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_500(uint256) -> _eventData_.compressedIDs
REF_501(uint256) -> _eventData_.compressedIDs
TMP_277(uint256) = _winPID * 100000000000000000000000000
TMP_278(uint256) = REF_501 + TMP_277
TMP_279(uint256) = _winTID * 100000000000000000
TMP_280(uint256) = TMP_278 + TMP_279
REF_500(uint256) (->_eventData_) := TMP_280(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_502(address) -> _eventData_.winnerAddr
REF_503(POOHMODatasets.Player) -> plyr_[_winPID]
REF_504(address) -> REF_503.addr
REF_502(address) (->_eventData_) := REF_504(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_505(bytes32) -> _eventData_.winnerName
REF_506(POOHMODatasets.Player) -> plyr_[_winPID]
REF_507(bytes32) -> REF_506.name
REF_505(bytes32) (->_eventData_) := REF_507(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_508(uint256) -> _eventData_.amountWon
REF_508(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_509(uint256) -> _eventData_.genAmount
REF_509(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.POOHAmount = _POOH

IRs:
REF_510(uint256) -> _eventData_.POOHAmount
REF_510(uint256) (->_eventData_) := _POOH(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_511(uint256) -> _eventData_.newPot
REF_511(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_281(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_282(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_512(POOHMODatasets.Round) -> round_[_rID]
REF_513(uint256) -> REF_512.strt
REF_513(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
rndMax_ = timerLengths[determineNextRoundLength()]

IRs:
TMP_283(uint256) = INTERNAL_CALL, POOHMO.determineNextRoundLength()()
REF_514(uint256) -> timerLengths[TMP_283]
rndMax_(uint256) := REF_514(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndMax_)

IRs:
REF_515(POOHMODatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.end
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndMax_'] 
REF_516(uint256) (->round_) := TMP_284(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_518(POOHMODatasets.Round) -> round_[_rID]
REF_519(uint256) -> REF_518.pot
REF_519(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 500.sol-POOHMO-endTx(uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_635(uint256) -> _eventData_.compressedData
REF_636(uint256) -> _eventData_.compressedData
TMP_360(uint256) = now * 1000000000000000000
TMP_361(uint256) = REF_636 + TMP_360
TMP_362(uint256) = _team * 100000000000000000000000000000
TMP_363(uint256) = TMP_361 + TMP_362
REF_635(uint256) (->_eventData_) := TMP_363(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_637(uint256) -> _eventData_.compressedIDs
REF_638(uint256) -> _eventData_.compressedIDs
TMP_364(uint256) = REF_638 + _pID
TMP_365(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_366(uint256) = TMP_364 + TMP_365
REF_637(uint256) (->_eventData_) := TMP_366(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
POOHMOevents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount,_eventData_.potAmount)

IRs:
REF_640(uint256) -> _eventData_.compressedData
REF_641(uint256) -> _eventData_.compressedIDs
REF_642(POOHMODatasets.Player) -> plyr_[_pID]
REF_643(bytes32) -> REF_642.name
REF_644(address) -> _eventData_.winnerAddr
REF_645(bytes32) -> _eventData_.winnerName
REF_646(uint256) -> _eventData_.amountWon
REF_647(uint256) -> _eventData_.newPot
REF_648(uint256) -> _eventData_.POOHAmount
REF_649(uint256) -> _eventData_.genAmount
REF_650(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_640,REF_641,REF_643,msg.sender,_eth,_keys,REF_644,REF_645,REF_646,REF_647,REF_648,REF_649,REF_650)"];
}
// Function: 500.sol-POOHMO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_3(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.determinePID(POOHMODatasets.EventReturns)(_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_3(POOHMODatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_4(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_5(POOHMODatasets.Player) -> plyr_[_pID]
REF_6(uint256) -> REF_5.laff
INTERNAL_CALL, POOHMO.buyCore(uint256,uint256,POOHMODatasets.EventReturns)(_pID,REF_6,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMO.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 500.sol-POOHMO-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_117(POOHMODatasets.Round) -> round_[_rID]
REF_118(uint256) -> REF_117.strt
TMP_92(uint256) = REF_118 + rndGap_
TMP_93(bool) = _now > TMP_92
REF_119(POOHMODatasets.Round) -> round_[_rID]
REF_120(uint256) -> REF_119.end
TMP_94(bool) = _now <= REF_120
REF_121(POOHMODatasets.Round) -> round_[_rID]
REF_122(uint256) -> REF_121.end
TMP_95(bool) = _now > REF_122
REF_123(POOHMODatasets.Round) -> round_[_rID]
REF_124(uint256) -> REF_123.plyr
TMP_96(bool) = REF_124 == 0
TMP_97(bool) = TMP_95 && TMP_96
TMP_98(bool) = TMP_94 || TMP_97
TMP_99(bool) = TMP_93 && TMP_98
CONDITION TMP_99"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_125(POOHMODatasets.Round) -> round_[_rID]
REF_126(uint256) -> REF_125.keys
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_126', '1000000000000000000'] 
TMP_101(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.ethRec(uint256,uint256), arguments:['TMP_100', '1000000000000000000'] 
RETURN TMP_101"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 500.sol-POOHMO-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3])

IRs:
REF_199(POOHMODatasets.Round) -> round_[_rID]
REF_200(uint256) -> REF_199.ico
REF_201(POOHMODatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.keys
REF_203(POOHMODatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.end
REF_205(POOHMODatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.strt
REF_207(POOHMODatasets.Round) -> round_[_rID]
REF_208(uint256) -> REF_207.pot
REF_209(POOHMODatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.team
REF_211(POOHMODatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.plyr
TMP_132(uint256) = REF_212 * 10
TMP_133(uint256) = REF_210 + TMP_132
REF_213(POOHMODatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.plyr
REF_215(POOHMODatasets.Player) -> plyr_[REF_214]
REF_216(address) -> REF_215.addr
REF_217(POOHMODatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.plyr
REF_219(POOHMODatasets.Player) -> plyr_[REF_218]
REF_220(bytes32) -> REF_219.name
REF_221(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_222(uint256) -> REF_221[0]
REF_223(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_224(uint256) -> REF_223[1]
REF_225(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_226(uint256) -> REF_225[2]
REF_227(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_228(uint256) -> REF_227[3]
RETURN REF_200,_rID,REF_202,REF_204,REF_206,REF_208,TMP_133,REF_216,REF_220,REF_222,REF_224,REF_226,REF_228"];
}
// Function: 500.sol-POOHMO-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_134 = CONVERT 0 to address
TMP_135(bool) = _addr == TMP_134
CONDITION TMP_135"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_136(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_229(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_229(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_230(POOHMODatasets.Player) -> plyr_[_pID]
REF_231(bytes32) -> REF_230.name
REF_232(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_233(POOHMODatasets.PlayerRounds) -> REF_232[_rID]
REF_234(uint256) -> REF_233.keys
REF_235(POOHMODatasets.Player) -> plyr_[_pID]
REF_236(uint256) -> REF_235.win
REF_237(POOHMODatasets.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.gen
REF_240(POOHMODatasets.Player) -> plyr_[_pID]
REF_241(uint256) -> REF_240.lrnd
TMP_137(uint256) = INTERNAL_CALL, POOHMO.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_241)
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_238', 'TMP_137'] 
REF_242(POOHMODatasets.Player) -> plyr_[_pID]
REF_243(uint256) -> REF_242.aff
REF_244(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_245(POOHMODatasets.PlayerRounds) -> REF_244[_rID]
REF_246(uint256) -> REF_245.eth
RETURN _pID,REF_231,REF_234,REF_236,TMP_138,REF_243,REF_246"];
}
// Function: 500.sol-POOHMO-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_139(POOHMODatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.end
TMP_108(bool) = now > REF_140
REF_141(POOHMODatasets.Round) -> round_[_rID]
REF_142(bool) -> REF_141.ended
TMP_109(bool) = REF_142 == False
TMP_110(bool) = TMP_108 && TMP_109
REF_143(POOHMODatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.plyr
TMP_111(bool) = REF_144 != 0
TMP_112(bool) = TMP_110 && TMP_111
CONDITION TMP_112"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_145(POOHMODatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.plyr
TMP_113(bool) = REF_146 == _pID
CONDITION TMP_113"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_147(POOHMODatasets.Player) -> plyr_[_pID]
REF_148(uint256) -> REF_147.win
REF_150(POOHMODatasets.Round) -> round_[_rID]
REF_151(uint256) -> REF_150.pot
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_151', '48'] 
TMP_115(uint256) = TMP_114 / 100
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_148', 'TMP_115'] 
REF_153(POOHMODatasets.Player) -> plyr_[_pID]
REF_154(uint256) -> REF_153.gen
TMP_117(uint256) = INTERNAL_CALL, POOHMO.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_157(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_158(POOHMODatasets.PlayerRounds) -> REF_157[_rID]
REF_159(uint256) -> REF_158.mask
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', 'REF_159'] 
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_154', 'TMP_118'] 
REF_160(POOHMODatasets.Player) -> plyr_[_pID]
REF_161(uint256) -> REF_160.aff
RETURN TMP_116,TMP_119,REF_161"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_162(POOHMODatasets.Player) -> plyr_[_pID]
REF_163(uint256) -> REF_162.win
REF_164(POOHMODatasets.Player) -> plyr_[_pID]
REF_165(uint256) -> REF_164.gen
TMP_120(uint256) = INTERNAL_CALL, POOHMO.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_168(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_169(POOHMODatasets.PlayerRounds) -> REF_168[_rID]
REF_170(uint256) -> REF_169.mask
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_120', 'REF_170'] 
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_165', 'TMP_121'] 
REF_171(POOHMODatasets.Player) -> plyr_[_pID]
REF_172(uint256) -> REF_171.aff
RETURN REF_163,TMP_122,REF_172"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_173(POOHMODatasets.Player) -> plyr_[_pID]
REF_174(uint256) -> REF_173.win
REF_175(POOHMODatasets.Player) -> plyr_[_pID]
REF_176(uint256) -> REF_175.gen
REF_178(POOHMODatasets.Player) -> plyr_[_pID]
REF_179(uint256) -> REF_178.lrnd
TMP_123(uint256) = INTERNAL_CALL, POOHMO.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_179)
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_176', 'TMP_123'] 
REF_180(POOHMODatasets.Player) -> plyr_[_pID]
REF_181(uint256) -> REF_180.aff
RETURN REF_174,TMP_124,REF_181"];
}
// Function: 500.sol-POOHMO-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_182(POOHMODatasets.Round) -> round_[_rID]
REF_183(uint256) -> REF_182.mask
REF_185(POOHMODatasets.Round) -> round_[_rID]
REF_186(uint256) -> REF_185.pot
REF_188(POOHMODatasets.Round) -> round_[_rID]
REF_189(uint256) -> REF_188.team
REF_190(POOHMODatasets.PotSplit) -> potSplit_[REF_189]
REF_191(uint256) -> REF_190.gen
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_186', 'REF_191'] 
TMP_126(uint256) = TMP_125 / 100
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_126', '1000000000000000000'] 
REF_193(POOHMODatasets.Round) -> round_[_rID]
REF_194(uint256) -> REF_193.keys
TMP_128(uint256) = TMP_127 / REF_194
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_183', 'TMP_128'] 
REF_196(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_197(POOHMODatasets.PlayerRounds) -> REF_196[_rID]
REF_198(uint256) -> REF_197.keys
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_129', 'REF_198'] 
TMP_131(uint256) = TMP_130 / 1000000000000000000
RETURN TMP_131"];
}
// Function: 500.sol-POOHMO-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_129(POOHMODatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.end
TMP_102(bool) = _now < REF_130
CONDITION TMP_102"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_131(POOHMODatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.strt
TMP_103(uint256) = REF_132 + rndGap_
TMP_104(bool) = _now > TMP_103
CONDITION TMP_104"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_133(POOHMODatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.end
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_134', '_now'] 
RETURN TMP_105"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_136(POOHMODatasets.Round) -> round_[_rID]
REF_137(uint256) -> REF_136.strt
TMP_106(uint256) = REF_137 + rndGap_
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_106', '_now'] 
RETURN TMP_107"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 500.sol-POOHMO-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_396(POOHMODatasets.Round) -> round_[_rID]
REF_397(uint256) -> REF_396.strt
TMP_213(uint256) = REF_397 + rndGap_
TMP_214(bool) = _now > TMP_213
REF_398(POOHMODatasets.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.end
TMP_215(bool) = _now <= REF_399
REF_400(POOHMODatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.end
TMP_216(bool) = _now > REF_401
REF_402(POOHMODatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.plyr
TMP_217(bool) = REF_403 == 0
TMP_218(bool) = TMP_216 && TMP_217
TMP_219(bool) = TMP_215 || TMP_218
TMP_220(bool) = TMP_214 && TMP_219
CONDITION TMP_220"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_404(POOHMODatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.keys
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_405', '_keys'] 
TMP_222(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.ethRec(uint256,uint256), arguments:['TMP_221', '_keys'] 
RETURN TMP_222"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_223(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_223"];
}
// Function: 500.sol-POOHMO-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(activated_ == true)

IRs:
TMP_376(bool) = activated_ == True
TMP_377(None) = SOLIDITY_CALL require(bool)(TMP_376)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 500.sol-POOHMO-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_codeLength == 0)

IRs:
TMP_378(bool) = _codeLength == 0
TMP_379(None) = SOLIDITY_CALL require(bool)(TMP_378)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_380(bool) = _addr == tx.origin
TMP_381(None) = SOLIDITY_CALL require(bool)(TMP_380)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 500.sol-POOHMO-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_eth >= 1000000000)

IRs:
TMP_382(bool) = _eth >= 1000000000
TMP_383(None) = SOLIDITY_CALL require(bool)(TMP_382)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_eth <= 100000000000000000000000)

IRs:
TMP_384(bool) = _eth <= 100000000000000000000000
TMP_385(None) = SOLIDITY_CALL require(bool)(TMP_384)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 500.sol-POOHMO-managePlayer(uint256,POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_449(POOHMODatasets.Player) -> plyr_[_pID]
REF_450(uint256) -> REF_449.lrnd
TMP_246(bool) = REF_450 != 0
CONDITION TMP_246"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_451(POOHMODatasets.Player) -> plyr_[_pID]
REF_452(uint256) -> REF_451.lrnd
INTERNAL_CALL, POOHMO.updateGenVault(uint256,uint256)(_pID,REF_452)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_453(POOHMODatasets.Player) -> plyr_[_pID]
REF_454(uint256) -> REF_453.lrnd
REF_454(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_455(uint256) -> _eventData_.compressedData
REF_456(uint256) -> _eventData_.compressedData
TMP_248(uint256) = REF_456 + 10
REF_455(uint256) (->_eventData_) := TMP_248(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 500.sol-POOHMO-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin.transfer(msg.value)

IRs:
Transfer dest:admin value:msg.value"];
}
// Function: 500.sol-POOHMO-reLoadCore(uint256,uint256,uint256,POOHMODatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_281(POOHMODatasets.Round) -> round_[_rID]
REF_282(uint256) -> REF_281.strt
TMP_157(uint256) = REF_282 + rndGap_
TMP_158(bool) = _now > TMP_157
REF_283(POOHMODatasets.Round) -> round_[_rID]
REF_284(uint256) -> REF_283.end
TMP_159(bool) = _now <= REF_284
REF_285(POOHMODatasets.Round) -> round_[_rID]
REF_286(uint256) -> REF_285.end
TMP_160(bool) = _now > REF_286
REF_287(POOHMODatasets.Round) -> round_[_rID]
REF_288(uint256) -> REF_287.plyr
TMP_161(bool) = REF_288 == 0
TMP_162(bool) = TMP_160 && TMP_161
TMP_163(bool) = TMP_159 || TMP_162
TMP_164(bool) = TMP_158 && TMP_163
CONDITION TMP_164"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_289(POOHMODatasets.Player) -> plyr_[_pID]
REF_290(uint256) -> REF_289.gen
TMP_165(uint256) = INTERNAL_CALL, POOHMO.withdrawEarnings(uint256)(_pID)
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_165', '_eth'] 
REF_290(uint256) (->plyr_) := TMP_166(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,0,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.core(uint256,uint256,uint256,uint256,uint256,POOHMODatasets.EventReturns)(_rID,_pID,_eth,_affID,0,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_292(POOHMODatasets.Round) -> round_[_rID]
REF_293(uint256) -> REF_292.end
TMP_168(bool) = _now > REF_293
REF_294(POOHMODatasets.Round) -> round_[_rID]
REF_295(bool) -> REF_294.ended
TMP_169(bool) = REF_295 == False
TMP_170(bool) = TMP_168 && TMP_169
CONDITION TMP_170"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_296(POOHMODatasets.Round) -> round_[_rID]
REF_297(bool) -> REF_296.ended
REF_297(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_171(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.endRound(POOHMODatasets.EventReturns)(_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_171(POOHMODatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_298(uint256) -> _eventData_.compressedData
REF_299(uint256) -> _eventData_.compressedData
TMP_172(uint256) = _now * 1000000000000000000
TMP_173(uint256) = REF_299 + TMP_172
REF_298(uint256) (->_eventData_) := TMP_173(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_300(uint256) -> _eventData_.compressedIDs
REF_301(uint256) -> _eventData_.compressedIDs
TMP_174(uint256) = REF_301 + _pID
REF_300(uint256) (->_eventData_) := TMP_174(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
POOHMOevents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount)

IRs:
REF_303(POOHMODatasets.Player) -> plyr_[_pID]
REF_304(bytes32) -> REF_303.name
REF_305(uint256) -> _eventData_.compressedData
REF_306(uint256) -> _eventData_.compressedIDs
REF_307(address) -> _eventData_.winnerAddr
REF_308(bytes32) -> _eventData_.winnerName
REF_309(uint256) -> _eventData_.amountWon
REF_310(uint256) -> _eventData_.newPot
REF_311(uint256) -> _eventData_.POOHAmount
REF_312(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_304,REF_305,REF_306,REF_307,REF_308,REF_309,REF_310,REF_311,REF_312)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 500.sol-POOHMO-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_39(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_39(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(bool) = _affCode == TMP_44
TMP_46(bool) = _affCode == msg.sender
TMP_47(bool) = TMP_45 || TMP_46
CONDITION TMP_47"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_40(POOHMODatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
_affID(uint256) := REF_41(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_42(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_42(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_43(POOHMODatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
TMP_48(bool) = _affID != REF_44
CONDITION TMP_48"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_45(POOHMODatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
REF_46(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.reLoadCore(uint256,uint256,uint256,POOHMODatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POOHMO.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 500.sol-POOHMO-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_32(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_32(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_36(bool) = _affCode == 0
TMP_37(bool) = _affCode == _pID
TMP_38(bool) = TMP_36 || TMP_37
CONDITION TMP_38"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_33(POOHMODatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
_affCode(uint256) := REF_34(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_35(POOHMODatasets.Player) -> plyr_[_pID]
REF_36(uint256) -> REF_35.laff
TMP_39(bool) = _affCode != REF_36
CONDITION TMP_39"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_37(POOHMODatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
REF_38(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.reLoadCore(uint256,uint256,uint256,POOHMODatasets.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POOHMO.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 500.sol-POOHMO-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_47(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_47(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_53(bool) = _affCode == 
REF_48(POOHMODatasets.Player) -> plyr_[_pID]
REF_49(bytes32) -> REF_48.name
TMP_54(bool) = _affCode == REF_49
TMP_55(bool) = TMP_53 || TMP_54
CONDITION TMP_55"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_50(POOHMODatasets.Player) -> plyr_[_pID]
REF_51(uint256) -> REF_50.laff
_affID(uint256) := REF_51(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_52(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_52(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_53(POOHMODatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
TMP_56(bool) = _affID != REF_54
CONDITION TMP_56"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_55(POOHMODatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
REF_56(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, POOHMO.reLoadCore(uint256,uint256,uint256,POOHMODatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POOHMO.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 500.sol-POOHMO-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(PlayerBook))

IRs:
TMP_224 = CONVERT PlayerBook to address
TMP_225(bool) = msg.sender == TMP_224
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_225)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_409(uint256) -> pIDxAddr_[_addr]
TMP_227(bool) = REF_409 != _pID
CONDITION TMP_227"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_410(uint256) -> pIDxAddr_[_addr]
REF_410(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_411(uint256) -> pIDxName_[_name]
TMP_228(bool) = REF_411 != _pID
CONDITION TMP_228"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_412(uint256) -> pIDxName_[_name]
REF_412(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_413(POOHMODatasets.Player) -> plyr_[_pID]
REF_414(address) -> REF_413.addr
TMP_229(bool) = REF_414 != _addr
CONDITION TMP_229"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_415(POOHMODatasets.Player) -> plyr_[_pID]
REF_416(address) -> REF_415.addr
REF_416(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_417(POOHMODatasets.Player) -> plyr_[_pID]
REF_418(bytes32) -> REF_417.name
TMP_230(bool) = REF_418 != _name
CONDITION TMP_230"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_419(POOHMODatasets.Player) -> plyr_[_pID]
REF_420(bytes32) -> REF_419.name
REF_420(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_421(POOHMODatasets.Player) -> plyr_[_pID]
REF_422(uint256) -> REF_421.laff
TMP_231(bool) = REF_422 != _laff
CONDITION TMP_231"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_423(POOHMODatasets.Player) -> plyr_[_pID]
REF_424(uint256) -> REF_423.laff
REF_424(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_425(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_426(bool) -> REF_425[_name]
TMP_232(bool) = REF_426 == False
CONDITION TMP_232"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_427(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_428(bool) -> REF_427[_name]
REF_428(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 500.sol-POOHMO-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(PlayerBook))

IRs:
TMP_233 = CONVERT PlayerBook to address
TMP_234(bool) = msg.sender == TMP_233
TMP_235(None) = SOLIDITY_CALL require(bool)(TMP_234)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_429(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_430(bool) -> REF_429[_name]
TMP_236(bool) = REF_430 == False
CONDITION TMP_236"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_431(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_432(bool) -> REF_431[_name]
REF_432(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 500.sol-POOHMO-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_80(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_80(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_93(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_93(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
POOHMOevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_95(POOHMODatasets.Player) -> plyr_[_affID]
REF_96(address) -> REF_95.addr
REF_97(POOHMODatasets.Player) -> plyr_[_affID]
REF_98(bytes32) -> REF_97.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_96,REF_98,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
9->1;
}
// Function: 500.sol-POOHMO-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_84(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_84(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_102(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_102(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
POOHMOevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_104(POOHMODatasets.Player) -> plyr_[_affID]
REF_105(address) -> REF_104.addr
REF_106(POOHMODatasets.Player) -> plyr_[_affID]
REF_107(bytes32) -> REF_106.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_105,REF_107,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
9->1;
}
// Function: 500.sol-POOHMO-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_88(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_88(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_111(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_111(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
POOHMOevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_113(POOHMODatasets.Player) -> plyr_[_affID]
REF_114(address) -> REF_113.addr
REF_115(POOHMODatasets.Player) -> plyr_[_affID]
REF_116(bytes32) -> REF_115.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_114,REF_116,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
9->1;
}
// Function: 500.sol-POOHMO-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = POOHMO

IRs:
name(string) := POOHMO(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = POOHMO

IRs:
symbol(string) := POOHMO(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInc_ = 10

IRs:
rndInc_(uint256) := 10(uint256)"];
}
// Function: 500.sol-POOHMO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 60

IRs:
rndExtra_(uint256) := 60(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 60

IRs:
rndGap_(uint256) := 60(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 21600

IRs:
rndMax_(uint256) := 21600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
timerLengths = (1800,3600,7200,21600,43200,86400)

IRs:
timerLengths(uint256[6]) = ['1800(uint256)', '3600(uint256)', '7200(uint256)', '21600(uint256)', '43200(uint256)', '86400(uint256)']"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 500.sol-POOHMO-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_291(uint256) = INTERNAL_CALL, POOHMO.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_291(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_292(bool) = _earnings > 0
CONDITION TMP_292"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_521(POOHMODatasets.Player) -> plyr_[_pID]
REF_522(uint256) -> REF_521.gen
REF_524(POOHMODatasets.Player) -> plyr_[_pID]
REF_525(uint256) -> REF_524.gen
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_525'] 
REF_522(uint256) (->plyr_) := TMP_293(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_526(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_527(POOHMODatasets.PlayerRounds) -> REF_526[_rIDlast]
REF_528(uint256) -> REF_527.mask
REF_530(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_531(POOHMODatasets.PlayerRounds) -> REF_530[_rIDlast]
REF_532(uint256) -> REF_531.mask
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_532'] 
REF_528(uint256) (->plyrRnds_) := TMP_294(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 500.sol-POOHMO-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_596(POOHMODatasets.Round) -> round_[_rID]
REF_597(uint256) -> REF_596.keys
TMP_345(uint256) = TMP_344 / REF_597
_ppt(uint256) := TMP_345(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_598(POOHMODatasets.Round) -> round_[_rID]
REF_599(uint256) -> REF_598.mask
REF_601(POOHMODatasets.Round) -> round_[_rID]
REF_602(uint256) -> REF_601.mask
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_602'] 
REF_599(uint256) (->round_) := TMP_346(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_348(uint256) = TMP_347 / 1000000000000000000
_pearn(uint256) := TMP_348(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_604(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_605(POOHMODatasets.PlayerRounds) -> REF_604[_rID]
REF_606(uint256) -> REF_605.mask
REF_607(POOHMODatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.mask
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_608', '_keys'] 
TMP_350(uint256) = TMP_349 / 1000000000000000000
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_350', '_pearn'] 
REF_612(mapping(uint256 => POOHMODatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_613(POOHMODatasets.PlayerRounds) -> REF_612[_rID]
REF_614(uint256) -> REF_613.mask
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_351', 'REF_614'] 
REF_606(uint256) (->plyrRnds_) := TMP_352(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_617(POOHMODatasets.Round) -> round_[_rID]
REF_618(uint256) -> REF_617.keys
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_618'] 
TMP_354(uint256) = TMP_353 / 1000000000000000000
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_354'] 
RETURN TMP_355"];
}
// Function: 500.sol-POOHMO-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_533(POOHMODatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.end
TMP_295(bool) = _now > REF_534
REF_535(POOHMODatasets.Round) -> round_[_rID]
REF_536(uint256) -> REF_535.plyr
TMP_296(bool) = REF_536 == 0
TMP_297(bool) = TMP_295 && TMP_296
CONDITION TMP_297"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_298(uint256) = _keys / 1000000000000000000
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_298', 'rndInc_'] 
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_299', '_now'] 
_newTime(uint256) := TMP_300(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_301(uint256) = _keys / 1000000000000000000
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_301', 'rndInc_'] 
REF_541(POOHMODatasets.Round) -> round_[_rID]
REF_542(uint256) -> REF_541.end
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_302', 'REF_542'] 
_newTime(uint256) := TMP_303(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_305(bool) = _newTime < TMP_304
CONDITION TMP_305"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_544(POOHMODatasets.Round) -> round_[_rID]
REF_545(uint256) -> REF_544.end
REF_545(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_546(POOHMODatasets.Round) -> round_[_rID]
REF_547(uint256) -> REF_546.end
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_547(uint256) (->round_) := TMP_306(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 500.sol-POOHMO-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_57(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_57(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_58(POOHMODatasets.Round) -> round_[_rID]
REF_59(uint256) -> REF_58.end
TMP_61(bool) = _now > REF_59
REF_60(POOHMODatasets.Round) -> round_[_rID]
REF_61(bool) -> REF_60.ended
TMP_62(bool) = REF_61 == False
TMP_63(bool) = TMP_61 && TMP_62
REF_62(POOHMODatasets.Round) -> round_[_rID]
REF_63(uint256) -> REF_62.plyr
TMP_64(bool) = REF_63 != 0
TMP_65(bool) = TMP_63 && TMP_64
CONDITION TMP_65"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_64(POOHMODatasets.Round) -> round_[_rID]
REF_65(bool) -> REF_64.ended
REF_65(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_66(POOHMODatasets.EventReturns) = INTERNAL_CALL, POOHMO.endRound(POOHMODatasets.EventReturns)(_eventData_)
_eventData_(POOHMODatasets.EventReturns) := TMP_66(POOHMODatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_67(uint256) = INTERNAL_CALL, POOHMO.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_67(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_68(bool) = _eth > 0
CONDITION TMP_68"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_66(POOHMODatasets.Player) -> plyr_[_pID]
REF_67(address) -> REF_66.addr
Transfer dest:REF_67 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_69(uint256) -> _eventData_.compressedData
REF_70(uint256) -> _eventData_.compressedData
TMP_70(uint256) = _now * 1000000000000000000
TMP_71(uint256) = REF_70 + TMP_70
REF_69(uint256) (->_eventData_) := TMP_71(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_71(uint256) -> _eventData_.compressedIDs
REF_72(uint256) -> _eventData_.compressedIDs
TMP_72(uint256) = REF_72 + _pID
REF_71(uint256) (->_eventData_) := TMP_72(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
POOHMOevents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount)

IRs:
REF_74(POOHMODatasets.Player) -> plyr_[_pID]
REF_75(bytes32) -> REF_74.name
REF_76(uint256) -> _eventData_.compressedData
REF_77(uint256) -> _eventData_.compressedIDs
REF_78(address) -> _eventData_.winnerAddr
REF_79(bytes32) -> _eventData_.winnerName
REF_80(uint256) -> _eventData_.amountWon
REF_81(uint256) -> _eventData_.newPot
REF_82(uint256) -> _eventData_.POOHAmount
REF_83(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_75,_eth,REF_76,REF_77,REF_78,REF_79,REF_80,REF_81,REF_82,REF_83)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_74(uint256) = INTERNAL_CALL, POOHMO.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_74(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_75(bool) = _eth > 0
CONDITION TMP_75"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_84(POOHMODatasets.Player) -> plyr_[_pID]
REF_85(address) -> REF_84.addr
Transfer dest:REF_85 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
POOHMOevents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_88(POOHMODatasets.Player) -> plyr_[_pID]
REF_89(bytes32) -> REF_88.name
Emit onWithdraw(_pID,msg.sender,REF_89,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMO.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMO.isHuman()()"];
23->1;
}
// Function: 500.sol-POOHMO-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_619(POOHMODatasets.Player) -> plyr_[_pID]
REF_620(uint256) -> REF_619.lrnd
INTERNAL_CALL, POOHMO.updateGenVault(uint256,uint256)(_pID,REF_620)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_621(POOHMODatasets.Player) -> plyr_[_pID]
REF_622(uint256) -> REF_621.win
REF_624(POOHMODatasets.Player) -> plyr_[_pID]
REF_625(uint256) -> REF_624.gen
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_622', 'REF_625'] 
REF_627(POOHMODatasets.Player) -> plyr_[_pID]
REF_628(uint256) -> REF_627.aff
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_357', 'REF_628'] 
_earnings(uint256) := TMP_358(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_359(bool) = _earnings > 0
CONDITION TMP_359"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_629(POOHMODatasets.Player) -> plyr_[_pID]
REF_630(uint256) -> REF_629.win
REF_630(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_631(POOHMODatasets.Player) -> plyr_[_pID]
REF_632(uint256) -> REF_631.gen
REF_632(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_633(POOHMODatasets.Player) -> plyr_[_pID]
REF_634(uint256) -> REF_633.aff
REF_634(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 500.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 500.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 500.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 500.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 500.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 500.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 500.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 500.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 500.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_461(uint256) = a + b
c(uint256) := TMP_461(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_462(bool) = c >= a
TMP_463(None) = SOLIDITY_CALL require(bool,string)(TMP_462,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 500.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_453(bool) = a == 0
CONDITION TMP_453"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_454(uint256) = a * b
c(uint256) := TMP_454(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_455(uint256) = c / a
TMP_456(bool) = TMP_455 == b
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 500.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_471(bool) = x == 0
CONDITION TMP_471"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_472(bool) = y == 0
CONDITION TMP_472"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_473(bool) = i < y
CONDITION TMP_473"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_474(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_474(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_475(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 500.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_470(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_470"];
}
// Function: 500.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_464(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_465(uint256) = TMP_464 / 2
z(uint256) := TMP_465(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_466(bool) = z < y
CONDITION TMP_466"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_467(uint256) = x / z
TMP_468(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_467,z)
TMP_469(uint256) = TMP_468 / 2
z(uint256) := TMP_469(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 500.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_458(bool) = b <= a
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_460(uint256) = a - b
RETURN TMP_460"];
}
}
