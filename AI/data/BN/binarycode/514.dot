digraph G {
// Function: 514.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_38'] 
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_40'] 
TMP_42(uint256) = TMP_41 / 2
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_39', 'TMP_42'] 
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_45(uint256) = TMP_43 / TMP_44
RETURN TMP_45"];
}
// Function: 514.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_28(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_30(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_29)
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_28', 'TMP_30'] 
RETURN TMP_31"];
}
// Function: 514.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_32', '312500000000000000000000000'] 
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_33', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_34'] 
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_35', '74999921875000000000000000000000'] 
TMP_37(uint256) = TMP_36 / 156250000
RETURN TMP_37"];
}
// Function: 514.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_25(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_24)
TMP_26(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_25', 'TMP_26'] 
RETURN TMP_27"];
}
// Function: 514.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == false,already activated)

IRs:
TMP_550(bool) = activated_ == False
TMP_551(None) = SOLIDITY_CALL require(bool,string)(TMP_550,already activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[1].strt = now + rndExtra_

IRs:
REF_748(F3Ddatasets.Round) -> round_[1]
REF_749(uint256) -> REF_748.strt
TMP_552(uint256) = now + rndExtra_
REF_749(uint256) (->round_) := TMP_552(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].end = now + rndInit_ * 12

IRs:
REF_750(F3Ddatasets.Round) -> round_[1]
REF_751(uint256) -> REF_750.end
TMP_553(uint256) = rndInit_ * 12
TMP_554(uint256) = now + TMP_553
REF_751(uint256) (->round_) := TMP_554(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, FoMo3Dlong.onlyDevs()()"];
6->1;
}
// Function: 514.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_477(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_478(bytes32) = SOLIDITY_CALL keccak256()(TMP_477)
TMP_479 = CONVERT TMP_478 to uint256
TMP_480(uint256) = TMP_479 / now
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_476', 'TMP_480'] 
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_481', 'block.gaslimit'] 
TMP_483(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_484(bytes32) = SOLIDITY_CALL keccak256()(TMP_483)
TMP_485 = CONVERT TMP_484 to uint256
TMP_486(uint256) = TMP_485 / now
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_482', 'TMP_486'] 
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_487', 'block.number'] 
TMP_489(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_488)
TMP_490(bytes32) = SOLIDITY_CALL keccak256()(TMP_489)
TMP_491 = CONVERT TMP_490 to uint256
seed(uint256) := TMP_491(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_492(uint256) = seed / 1000
TMP_493(uint256) = TMP_492 * 1000
TMP_494(uint256) = seed - TMP_493
TMP_495(bool) = TMP_494 < airDropTracker_
CONDITION TMP_495"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 514.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_313(F3Ddatasets.Round) -> round_[_rID]
REF_314(uint256) -> REF_313.strt
TMP_288(uint256) = REF_314 + rndGap_
TMP_289(bool) = _now > TMP_288
REF_315(F3Ddatasets.Round) -> round_[_rID]
REF_316(uint256) -> REF_315.end
TMP_290(bool) = _now <= REF_316
REF_317(F3Ddatasets.Round) -> round_[_rID]
REF_318(uint256) -> REF_317.end
TMP_291(bool) = _now > REF_318
REF_319(F3Ddatasets.Round) -> round_[_rID]
REF_320(uint256) -> REF_319.plyr
TMP_292(bool) = REF_320 == 0
TMP_293(bool) = TMP_291 && TMP_292
TMP_294(bool) = TMP_290 || TMP_293
TMP_295(bool) = TMP_289 && TMP_294
CONDITION TMP_295"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_321(F3Ddatasets.Round) -> round_[_rID]
REF_322(uint256) -> REF_321.end
TMP_297(bool) = _now > REF_322
REF_323(F3Ddatasets.Round) -> round_[_rID]
REF_324(bool) -> REF_323.ended
TMP_298(bool) = REF_324 == False
TMP_299(bool) = TMP_297 && TMP_298
CONDITION TMP_299"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_325(F3Ddatasets.Round) -> round_[_rID]
REF_326(bool) -> REF_325.ended
REF_326(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_300(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_300(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_327(uint256) -> _eventData_.compressedData
REF_328(uint256) -> _eventData_.compressedData
TMP_301(uint256) = _now * 1000000000000000000
TMP_302(uint256) = REF_328 + TMP_301
REF_327(uint256) (->_eventData_) := TMP_302(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_329(uint256) -> _eventData_.compressedIDs
REF_330(uint256) -> _eventData_.compressedIDs
TMP_303(uint256) = REF_330 + _pID
REF_329(uint256) (->_eventData_) := TMP_303(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_332(F3Ddatasets.Player) -> plyr_[_pID]
REF_333(bytes32) -> REF_332.name
REF_334(uint256) -> _eventData_.compressedData
REF_335(uint256) -> _eventData_.compressedIDs
REF_336(address) -> _eventData_.winnerAddr
REF_337(bytes32) -> _eventData_.winnerName
REF_338(uint256) -> _eventData_.amountWon
REF_339(uint256) -> _eventData_.newPot
REF_340(uint256) -> _eventData_.P3DAmount
REF_341(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_333,msg.value,REF_334,REF_335,REF_336,REF_337,REF_338,REF_339,REF_340,REF_341)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_342(F3Ddatasets.Player) -> plyr_[_pID]
REF_343(uint256) -> REF_342.gen
REF_344(F3Ddatasets.Player) -> plyr_[_pID]
REF_345(uint256) -> REF_344.gen
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_345', 'msg.value'] 
REF_343(uint256) (->plyr_) := TMP_305(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 514.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_151(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_151(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_72(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_72(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_152 = CONVERT 0 to address
TMP_153(bool) = _affCode == TMP_152
TMP_154(bool) = _affCode == msg.sender
TMP_155(bool) = TMP_153 || TMP_154
CONDITION TMP_155"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_73(F3Ddatasets.Player) -> plyr_[_pID]
REF_74(uint256) -> REF_73.laff
_affID(uint256) := REF_74(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_75(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_75(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
TMP_156(bool) = _affID != REF_77
CONDITION TMP_156"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_78(F3Ddatasets.Player) -> plyr_[_pID]
REF_79(uint256) -> REF_78.laff
REF_79(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_157(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_157(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 514.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_141(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_141(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_65(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_65(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_142(bool) = _affCode == 0
TMP_143(bool) = _affCode == _pID
TMP_144(bool) = TMP_142 || TMP_143
CONDITION TMP_144"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
_affCode(uint256) := REF_67(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_68(F3Ddatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
TMP_145(bool) = _affCode != REF_69
CONDITION TMP_145"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_70(F3Ddatasets.Player) -> plyr_[_pID]
REF_71(uint256) -> REF_70.laff
REF_71(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_146(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_146(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 514.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_162(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_162(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_80(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_80(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_163(bool) = _affCode == 
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(bytes32) -> REF_81.name
TMP_164(bool) = _affCode == REF_82
TMP_165(bool) = TMP_163 || TMP_164
CONDITION TMP_165"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_83(F3Ddatasets.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
_affID(uint256) := REF_84(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_85(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_85(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.laff
TMP_166(bool) = _affID != REF_87
CONDITION TMP_166"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_88(F3Ddatasets.Player) -> plyr_[_pID]
REF_89(uint256) -> REF_88.laff
REF_89(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_167(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_167(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 514.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_478(F3Ddatasets.Round) -> round_[_rID]
REF_479(uint256) -> REF_478.strt
TMP_378(uint256) = REF_479 + rndGap_
TMP_379(bool) = _now > TMP_378
REF_480(F3Ddatasets.Round) -> round_[_rID]
REF_481(uint256) -> REF_480.end
TMP_380(bool) = _now <= REF_481
REF_482(F3Ddatasets.Round) -> round_[_rID]
REF_483(uint256) -> REF_482.end
TMP_381(bool) = _now > REF_483
REF_484(F3Ddatasets.Round) -> round_[_rID]
REF_485(uint256) -> REF_484.plyr
TMP_382(bool) = REF_485 == 0
TMP_383(bool) = TMP_381 && TMP_382
TMP_384(bool) = TMP_380 || TMP_383
TMP_385(bool) = TMP_379 && TMP_384
CONDITION TMP_385"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_486(F3Ddatasets.Round) -> round_[_rID]
REF_487(uint256) -> REF_486.eth
TMP_386(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_487', '_eth'] 
RETURN TMP_386"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_387"];
}
// Function: 514.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_468(F3Ddatasets.Round) -> round_[_rIDlast]
REF_469(uint256) -> REF_468.mask
REF_471(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_472(F3Ddatasets.PlayerRounds) -> REF_471[_rIDlast]
REF_473(uint256) -> REF_472.keys
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_469', 'REF_473'] 
TMP_376(uint256) = TMP_375 / 1000000000000000000
REF_475(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_476(F3Ddatasets.PlayerRounds) -> REF_475[_rIDlast]
REF_477(uint256) -> REF_476.mask
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_376', 'REF_477'] 
RETURN TMP_377"];
}
// Function: 514.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_46(F3Ddatasets.TeamFee) -> fees_[0]
TMP_128(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_46(F3Ddatasets.TeamFee) (->fees_) := TMP_128(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_48(F3Ddatasets.TeamFee) -> fees_[1]
TMP_129(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_48(F3Ddatasets.TeamFee) (->fees_) := TMP_129(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_50(F3Ddatasets.TeamFee) -> fees_[2]
TMP_130(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_50(F3Ddatasets.TeamFee) (->fees_) := TMP_130(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_52(F3Ddatasets.TeamFee) -> fees_[3]
TMP_131(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_52(F3Ddatasets.TeamFee) (->fees_) := TMP_131(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(10,0)

IRs:
REF_54(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_132(F3Ddatasets.PotSplit) = new PotSplit(10,0)
REF_54(F3Ddatasets.PotSplit) (->potSplit_) := TMP_132(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(10,0)

IRs:
REF_56(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_133(F3Ddatasets.PotSplit) = new PotSplit(10,0)
REF_56(F3Ddatasets.PotSplit) (->potSplit_) := TMP_133(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(10,0)

IRs:
REF_58(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_134(F3Ddatasets.PotSplit) = new PotSplit(10,0)
REF_58(F3Ddatasets.PotSplit) (->potSplit_) := TMP_134(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(10,0)

IRs:
REF_60(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_135(F3Ddatasets.PotSplit) = new PotSplit(10,0)
REF_60(F3Ddatasets.PotSplit) (->potSplit_) := TMP_135(F3Ddatasets.PotSplit)"];
}
// Function: 514.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_379(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_380(F3Ddatasets.PlayerRounds) -> REF_379[_rID]
REF_381(uint256) -> REF_380.keys
TMP_325(bool) = REF_381 == 0
CONDITION TMP_325"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_326(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_326(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_382(F3Ddatasets.Round) -> round_[_rID]
REF_383(uint256) -> REF_382.eth
TMP_327(bool) = REF_383 < 100000000000000000000
REF_384(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_385(F3Ddatasets.PlayerRounds) -> REF_384[_rID]
REF_386(uint256) -> REF_385.eth
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_386', '_eth'] 
TMP_329(bool) = TMP_328 > 1000000000000000000
TMP_330(bool) = TMP_327 && TMP_329
CONDITION TMP_330"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_389(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_390(F3Ddatasets.PlayerRounds) -> REF_389[_rID]
REF_391(uint256) -> REF_390.eth
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_391'] 
_availableLimit(uint256) := TMP_331(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_332(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_393(F3Ddatasets.Player) -> plyr_[_pID]
REF_394(uint256) -> REF_393.gen
REF_395(F3Ddatasets.Player) -> plyr_[_pID]
REF_396(uint256) -> REF_395.gen
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_396', '_refund'] 
REF_394(uint256) (->plyr_) := TMP_333(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_334(bool) = _eth > 1000000000
CONDITION TMP_334"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_398(F3Ddatasets.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.eth
TMP_335(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_399', '_eth'] 
_keys(uint256) := TMP_335(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_336(bool) = _keys >= 1000000000000000000
CONDITION TMP_336"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_401(F3Ddatasets.Round) -> round_[_rID]
REF_402(uint256) -> REF_401.plyr
TMP_338(bool) = REF_402 != _pID
CONDITION TMP_338"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_403(F3Ddatasets.Round) -> round_[_rID]
REF_404(uint256) -> REF_403.plyr
REF_404(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_405(F3Ddatasets.Round) -> round_[_rID]
REF_406(uint256) -> REF_405.team
TMP_339(bool) = REF_406 != _team
CONDITION TMP_339"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_407(F3Ddatasets.Round) -> round_[_rID]
REF_408(uint256) -> REF_407.team
REF_408(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_409(uint256) -> _eventData_.compressedData
REF_410(uint256) -> _eventData_.compressedData
TMP_340(uint256) = REF_410 + 100
REF_409(uint256) (->_eventData_) := TMP_340(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_341(bool) = _eth >= 100000000000000000
CONDITION TMP_341"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_342(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_343(bool) = INTERNAL_CALL, FoMo3Dlong.airdrop()()
TMP_344(bool) = TMP_343 == True
CONDITION TMP_344"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_345(bool) = _eth >= 10000000000000000000
CONDITION TMP_345"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_347(uint256) = TMP_346 / 100
_prize(uint256) := TMP_347(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_412(F3Ddatasets.Player) -> plyr_[_pID]
REF_413(uint256) -> REF_412.win
REF_414(F3Ddatasets.Player) -> plyr_[_pID]
REF_415(uint256) -> REF_414.win
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_415', '_prize'] 
REF_413(uint256) (->plyr_) := TMP_348(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_349(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_418(uint256) -> _eventData_.compressedData
REF_418(-> _eventData_) = REF_418 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_350(bool) = _eth >= 1000000000000000000
TMP_351(bool) = _eth < 10000000000000000000
TMP_352(bool) = TMP_350 && TMP_351
CONDITION TMP_352"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_354(uint256) = TMP_353 / 100
_prize(uint256) := TMP_354(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_420(F3Ddatasets.Player) -> plyr_[_pID]
REF_421(uint256) -> REF_420.win
REF_422(F3Ddatasets.Player) -> plyr_[_pID]
REF_423(uint256) -> REF_422.win
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_423', '_prize'] 
REF_421(uint256) (->plyr_) := TMP_355(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_356(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_426(uint256) -> _eventData_.compressedData
REF_426(-> _eventData_) = REF_426 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_357(bool) = _eth >= 100000000000000000
TMP_358(bool) = _eth < 1000000000000000000
TMP_359(bool) = TMP_357 && TMP_358
CONDITION TMP_359"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_361(uint256) = TMP_360 / 100
_prize(uint256) := TMP_361(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_428(F3Ddatasets.Player) -> plyr_[_pID]
REF_429(uint256) -> REF_428.win
REF_430(F3Ddatasets.Player) -> plyr_[_pID]
REF_431(uint256) -> REF_430.win
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_431', '_prize'] 
REF_429(uint256) (->plyr_) := TMP_362(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_363(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_434(uint256) -> _eventData_.compressedData
REF_434(-> _eventData_) = REF_434 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_435(uint256) -> _eventData_.compressedData
REF_435(-> _eventData_) = REF_435 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_436(uint256) -> _eventData_.compressedData
TMP_364(uint256) = _prize * 1000000000000000000000000000000000
REF_436(-> _eventData_) = REF_436 + TMP_364"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_437(uint256) -> _eventData_.compressedData
REF_438(uint256) -> _eventData_.compressedData
TMP_365(uint256) = airDropTracker_ * 1000
TMP_366(uint256) = REF_438 + TMP_365
REF_437(uint256) (->_eventData_) := TMP_366(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_439(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_440(F3Ddatasets.PlayerRounds) -> REF_439[_rID]
REF_441(uint256) -> REF_440.keys
REF_443(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_444(F3Ddatasets.PlayerRounds) -> REF_443[_rID]
REF_445(uint256) -> REF_444.keys
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_445'] 
REF_441(uint256) (->plyrRnds_) := TMP_367(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_446(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_447(F3Ddatasets.PlayerRounds) -> REF_446[_rID]
REF_448(uint256) -> REF_447.eth
REF_450(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_451(F3Ddatasets.PlayerRounds) -> REF_450[_rID]
REF_452(uint256) -> REF_451.eth
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_452'] 
REF_448(uint256) (->plyrRnds_) := TMP_368(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_453(F3Ddatasets.Round) -> round_[_rID]
REF_454(uint256) -> REF_453.keys
REF_456(F3Ddatasets.Round) -> round_[_rID]
REF_457(uint256) -> REF_456.keys
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_457'] 
REF_454(uint256) (->round_) := TMP_369(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_458(F3Ddatasets.Round) -> round_[_rID]
REF_459(uint256) -> REF_458.eth
REF_461(F3Ddatasets.Round) -> round_[_rID]
REF_462(uint256) -> REF_461.eth
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_462'] 
REF_459(uint256) (->round_) := TMP_370(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_463(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_464(uint256) -> REF_463[_team]
REF_466(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_467(uint256) -> REF_466[_team]
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_467'] 
REF_464(uint256) (->rndTmEth_) := TMP_371(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_372(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_372(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_373(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_373(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 514.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_527(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_527(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_412(bool) = _pID == 0
CONDITION TMP_412"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_413(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_413(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_414(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_414(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_415(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_415(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_531(uint256) -> pIDxAddr_[msg.sender]
REF_531(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_532(F3Ddatasets.Player) -> plyr_[_pID]
REF_533(address) -> REF_532.addr
REF_533(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_416(bool) = _name != 
CONDITION TMP_416"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_534(uint256) -> pIDxName_[_name]
REF_534(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_535(F3Ddatasets.Player) -> plyr_[_pID]
REF_536(bytes32) -> REF_535.name
REF_536(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_537(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_538(bool) -> REF_537[_name]
REF_538(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_417(bool) = _laff != 0
TMP_418(bool) = _laff != _pID
TMP_419(bool) = TMP_417 && TMP_418
CONDITION TMP_419"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_539(F3Ddatasets.Player) -> plyr_[_pID]
REF_540(uint256) -> REF_539.laff
REF_540(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_541(uint256) -> _eventData_.compressedData
REF_542(uint256) -> _eventData_.compressedData
TMP_420(uint256) = REF_542 + 1
REF_541(uint256) (->_eventData_) := TMP_420(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 514.sol-FoMo3Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth.mul(9) / 100

IRs:
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '9'] 
TMP_497(uint256) = TMP_496 / 100
_com(uint256) := TMP_497(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
teamWallet.transfer(_com)

IRs:
Transfer dest:teamWallet value:_com"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_aff = _eth / 4

IRs:
TMP_499(uint256) = _eth / 4
_aff(uint256) := TMP_499(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_500(bool) = _affID != _pID
REF_651(F3Ddatasets.Player) -> plyr_[_affID]
REF_652(bytes32) -> REF_651.name
TMP_501(bool) = REF_652 != 
TMP_502(bool) = TMP_500 && TMP_501
CONDITION TMP_502"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_653(F3Ddatasets.Player) -> plyr_[_affID]
REF_654(uint256) -> REF_653.aff
REF_656(F3Ddatasets.Player) -> plyr_[_affID]
REF_657(uint256) -> REF_656.aff
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_657'] 
REF_654(uint256) (->plyr_) := TMP_503(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_659(F3Ddatasets.Player) -> plyr_[_affID]
REF_660(address) -> REF_659.addr
REF_661(F3Ddatasets.Player) -> plyr_[_affID]
REF_662(bytes32) -> REF_661.name
Emit onAffiliatePayout(_affID,REF_660,REF_662,_rID,_pID,_aff,now)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
teamWallet.transfer(_aff)

IRs:
Transfer dest:teamWallet value:_aff"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 514.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_671(F3Ddatasets.TeamFee) -> fees_[_team]
REF_672(uint256) -> REF_671.gen
TMP_509(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_672'] 
TMP_510(uint256) = TMP_509 / 100
_gen(uint256) := TMP_510(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_511(uint256) = _eth / 100
_air(uint256) := TMP_511(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_512(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_512(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(31)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_513(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '31'] 
TMP_514(uint256) = TMP_513 / 100
REF_678(F3Ddatasets.TeamFee) -> fees_[_team]
REF_679(uint256) -> REF_678.p3d
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_679'] 
TMP_516(uint256) = TMP_515 / 100
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_514', 'TMP_516'] 
TMP_518(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_517'] 
_eth(uint256) := TMP_518(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_519(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_520(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_520(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_521(bool) = _dust > 0
CONDITION TMP_521"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_522(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_522(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_682(F3Ddatasets.Round) -> round_[_rID]
REF_683(uint256) -> REF_682.pot
TMP_523(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_686(F3Ddatasets.Round) -> round_[_rID]
REF_687(uint256) -> REF_686.pot
TMP_524(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_523', 'REF_687'] 
REF_683(uint256) (->round_) := TMP_524(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_688(uint256) -> _eventData_.genAmount
REF_690(uint256) -> _eventData_.genAmount
TMP_525(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_690'] 
REF_688(uint256) (->_eventData_) := TMP_525(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_691(uint256) -> _eventData_.potAmount
REF_691(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 514.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.plyr
_winPID(uint256) := REF_552(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.team
_winTID(uint256) := REF_554(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_555(F3Ddatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.pot
_pot(uint256) := REF_556(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(50)) / 100

IRs:
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '50'] 
TMP_428(uint256) = TMP_427 / 100
_win(uint256) := TMP_428(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot.mul(40) / 100)

IRs:
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '40'] 
TMP_430(uint256) = TMP_429 / 100
_com(uint256) := TMP_430(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_560(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_561(uint256) -> REF_560.gen
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_561'] 
TMP_432(uint256) = TMP_431 / 100
_gen(uint256) := TMP_432(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_563(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_564(uint256) -> REF_563.p3d
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_564'] 
TMP_434(uint256) = TMP_433 / 100
_p3d(uint256) := TMP_434(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_435', '_com'] 
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_436', '_gen'] 
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_437', '_p3d'] 
_res(uint256) := TMP_438(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_570(F3Ddatasets.Round) -> round_[_rID]
REF_571(uint256) -> REF_570.keys
TMP_440(uint256) = TMP_439 / REF_571
_ppt(uint256) := TMP_440(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_574(F3Ddatasets.Round) -> round_[_rID]
REF_575(uint256) -> REF_574.keys
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_575'] 
TMP_442(uint256) = TMP_441 / 1000000000000000000
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_442'] 
_dust(uint256) := TMP_443(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_444(bool) = _dust > 0
CONDITION TMP_444"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_445(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_446(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_578(F3Ddatasets.Player) -> plyr_[_winPID]
REF_579(uint256) -> REF_578.win
REF_581(F3Ddatasets.Player) -> plyr_[_winPID]
REF_582(uint256) -> REF_581.win
TMP_447(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_582'] 
REF_579(uint256) (->plyr_) := TMP_447(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
teamWallet.transfer(_com)

IRs:
Transfer dest:teamWallet value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_584(F3Ddatasets.Round) -> round_[_rID]
REF_585(uint256) -> REF_584.mask
REF_587(F3Ddatasets.Round) -> round_[_rID]
REF_588(uint256) -> REF_587.mask
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_588'] 
REF_585(uint256) (->round_) := TMP_449(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_589(uint256) -> _eventData_.compressedData
REF_590(uint256) -> _eventData_.compressedData
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.end
TMP_450(uint256) = REF_592 * 1000000
TMP_451(uint256) = REF_590 + TMP_450
REF_589(uint256) (->_eventData_) := TMP_451(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_593(uint256) -> _eventData_.compressedIDs
REF_594(uint256) -> _eventData_.compressedIDs
TMP_452(uint256) = _winPID * 100000000000000000000000000
TMP_453(uint256) = REF_594 + TMP_452
TMP_454(uint256) = _winTID * 100000000000000000
TMP_455(uint256) = TMP_453 + TMP_454
REF_593(uint256) (->_eventData_) := TMP_455(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_595(address) -> _eventData_.winnerAddr
REF_596(F3Ddatasets.Player) -> plyr_[_winPID]
REF_597(address) -> REF_596.addr
REF_595(address) (->_eventData_) := REF_597(address)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_598(bytes32) -> _eventData_.winnerName
REF_599(F3Ddatasets.Player) -> plyr_[_winPID]
REF_600(bytes32) -> REF_599.name
REF_598(bytes32) (->_eventData_) := REF_600(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_601(uint256) -> _eventData_.amountWon
REF_601(uint256) (->_eventData_) := _win(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_602(uint256) -> _eventData_.genAmount
REF_602(uint256) (->_eventData_) := _gen(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_603(uint256) -> _eventData_.P3DAmount
REF_603(uint256) (->_eventData_) := _p3d(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_604(uint256) -> _eventData_.newPot
REF_604(uint256) (->_eventData_) := _res(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
rID_ ++

IRs:
TMP_456(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_rID ++

IRs:
TMP_457(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_605(F3Ddatasets.Round) -> round_[_rID]
REF_606(uint256) -> REF_605.strt
REF_606(uint256) (->round_) := now(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_607(F3Ddatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.end
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_458', 'rndGap_'] 
REF_608(uint256) (->round_) := TMP_459(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_611(F3Ddatasets.Round) -> round_[_rID]
REF_612(uint256) -> REF_611.pot
REF_612(uint256) (->round_) := _res(uint256)"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 514.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_732(uint256) -> _eventData_.compressedData
REF_733(uint256) -> _eventData_.compressedData
TMP_542(uint256) = now * 1000000000000000000
TMP_543(uint256) = REF_733 + TMP_542
TMP_544(uint256) = _team * 100000000000000000000000000000
TMP_545(uint256) = TMP_543 + TMP_544
REF_732(uint256) (->_eventData_) := TMP_545(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_734(uint256) -> _eventData_.compressedIDs
REF_735(uint256) -> _eventData_.compressedIDs
TMP_546(uint256) = REF_735 + _pID
TMP_547(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_548(uint256) = TMP_546 + TMP_547
REF_734(uint256) (->_eventData_) := TMP_548(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_737(uint256) -> _eventData_.compressedData
REF_738(uint256) -> _eventData_.compressedIDs
REF_739(F3Ddatasets.Player) -> plyr_[_pID]
REF_740(bytes32) -> REF_739.name
REF_741(address) -> _eventData_.winnerAddr
REF_742(bytes32) -> _eventData_.winnerName
REF_743(uint256) -> _eventData_.amountWon
REF_744(uint256) -> _eventData_.newPot
REF_745(uint256) -> _eventData_.P3DAmount
REF_746(uint256) -> _eventData_.genAmount
REF_747(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_737,REF_738,REF_740,msg.sender,_eth,_keys,REF_741,REF_742,REF_743,REF_744,REF_745,REF_746,REF_747,airDropPot_)"];
}
// Function: 514.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_136(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_136(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_62(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_62(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_63(F3Ddatasets.Player) -> plyr_[_pID]
REF_64(uint256) -> REF_63.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_64,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 514.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_175(F3Ddatasets.Round) -> round_[_rID]
REF_176(uint256) -> REF_175.strt
TMP_231(uint256) = REF_176 + rndGap_
TMP_232(bool) = _now > TMP_231
REF_177(F3Ddatasets.Round) -> round_[_rID]
REF_178(uint256) -> REF_177.end
TMP_233(bool) = _now <= REF_178
REF_179(F3Ddatasets.Round) -> round_[_rID]
REF_180(uint256) -> REF_179.end
TMP_234(bool) = _now > REF_180
REF_181(F3Ddatasets.Round) -> round_[_rID]
REF_182(uint256) -> REF_181.plyr
TMP_235(bool) = REF_182 == 0
TMP_236(bool) = TMP_234 && TMP_235
TMP_237(bool) = TMP_233 || TMP_236
TMP_238(bool) = TMP_232 && TMP_237
CONDITION TMP_238"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_183(F3Ddatasets.Round) -> round_[_rID]
REF_184(uint256) -> REF_183.keys
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_184', '1000000000000000000'] 
TMP_240(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_239', '1000000000000000000'] 
RETURN TMP_240"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 514.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.ico
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.keys
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.end
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.strt
REF_273(F3Ddatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.pot
REF_275(F3Ddatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.team
REF_277(F3Ddatasets.Round) -> round_[_rID]
REF_278(uint256) -> REF_277.plyr
TMP_279(uint256) = REF_278 * 10
TMP_280(uint256) = REF_276 + TMP_279
REF_279(F3Ddatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.plyr
REF_281(F3Ddatasets.Player) -> plyr_[REF_280]
REF_282(address) -> REF_281.addr
REF_283(F3Ddatasets.Round) -> round_[_rID]
REF_284(uint256) -> REF_283.plyr
REF_285(F3Ddatasets.Player) -> plyr_[REF_284]
REF_286(bytes32) -> REF_285.name
REF_287(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_288(uint256) -> REF_287[0]
REF_289(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_290(uint256) -> REF_289[1]
REF_291(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_292(uint256) -> REF_291[2]
REF_293(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_294(uint256) -> REF_293[3]
TMP_281(uint256) = airDropPot_ * 1000
TMP_282(uint256) = airDropTracker_ + TMP_281
RETURN REF_266,_rID,REF_268,REF_270,REF_272,REF_274,TMP_280,REF_282,REF_286,REF_288,REF_290,REF_292,REF_294,TMP_282"];
}
// Function: 514.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_283 = CONVERT 0 to address
TMP_284(bool) = _addr == TMP_283
CONDITION TMP_284"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_285(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_295(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_295(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_296(F3Ddatasets.Player) -> plyr_[_pID]
REF_297(bytes32) -> REF_296.name
REF_298(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_299(F3Ddatasets.PlayerRounds) -> REF_298[_rID]
REF_300(uint256) -> REF_299.keys
REF_301(F3Ddatasets.Player) -> plyr_[_pID]
REF_302(uint256) -> REF_301.win
REF_303(F3Ddatasets.Player) -> plyr_[_pID]
REF_304(uint256) -> REF_303.gen
REF_306(F3Ddatasets.Player) -> plyr_[_pID]
REF_307(uint256) -> REF_306.lrnd
TMP_286(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_307)
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_304', 'TMP_286'] 
REF_308(F3Ddatasets.Player) -> plyr_[_pID]
REF_309(uint256) -> REF_308.aff
REF_310(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_311(F3Ddatasets.PlayerRounds) -> REF_310[_rID]
REF_312(uint256) -> REF_311.eth
RETURN _pID,REF_297,REF_300,REF_302,TMP_287,REF_309,REF_312"];
}
// Function: 514.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_197(F3Ddatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.end
TMP_247(bool) = now > REF_198
REF_199(F3Ddatasets.Round) -> round_[_rID]
REF_200(bool) -> REF_199.ended
TMP_248(bool) = REF_200 == False
TMP_249(bool) = TMP_247 && TMP_248
REF_201(F3Ddatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.plyr
TMP_250(bool) = REF_202 != 0
TMP_251(bool) = TMP_249 && TMP_250
CONDITION TMP_251"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.plyr
TMP_252(bool) = REF_204 == _pID
CONDITION TMP_252"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_205(F3Ddatasets.Player) -> plyr_[_pID]
REF_206(uint256) -> REF_205.win
REF_208(F3Ddatasets.Round) -> round_[_rID]
REF_209(uint256) -> REF_208.pot
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_209', '48'] 
TMP_254(uint256) = TMP_253 / 100
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_206', 'TMP_254'] 
REF_211(F3Ddatasets.Player) -> plyr_[_pID]
REF_212(uint256) -> REF_211.gen
TMP_256(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_215(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_216(F3Ddatasets.PlayerRounds) -> REF_215[_rID]
REF_217(uint256) -> REF_216.mask
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_256', 'REF_217'] 
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_212', 'TMP_257'] 
REF_218(F3Ddatasets.Player) -> plyr_[_pID]
REF_219(uint256) -> REF_218.aff
RETURN TMP_255,TMP_258,REF_219"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_220(F3Ddatasets.Player) -> plyr_[_pID]
REF_221(uint256) -> REF_220.win
REF_222(F3Ddatasets.Player) -> plyr_[_pID]
REF_223(uint256) -> REF_222.gen
TMP_259(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_226(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_227(F3Ddatasets.PlayerRounds) -> REF_226[_rID]
REF_228(uint256) -> REF_227.mask
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_259', 'REF_228'] 
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_223', 'TMP_260'] 
REF_229(F3Ddatasets.Player) -> plyr_[_pID]
REF_230(uint256) -> REF_229.aff
RETURN REF_221,TMP_261,REF_230"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_231(F3Ddatasets.Player) -> plyr_[_pID]
REF_232(uint256) -> REF_231.win
REF_233(F3Ddatasets.Player) -> plyr_[_pID]
REF_234(uint256) -> REF_233.gen
REF_236(F3Ddatasets.Player) -> plyr_[_pID]
REF_237(uint256) -> REF_236.lrnd
TMP_262(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_237)
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_234', 'TMP_262'] 
REF_238(F3Ddatasets.Player) -> plyr_[_pID]
REF_239(uint256) -> REF_238.aff
RETURN REF_232,TMP_263,REF_239"];
}
// Function: 514.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_240(F3Ddatasets.Round) -> round_[_rID]
REF_241(uint256) -> REF_240.mask
REF_243(F3Ddatasets.Round) -> round_[_rID]
REF_244(uint256) -> REF_243.pot
REF_246(F3Ddatasets.Round) -> round_[_rID]
REF_247(uint256) -> REF_246.team
REF_248(F3Ddatasets.PotSplit) -> potSplit_[REF_247]
REF_249(uint256) -> REF_248.gen
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_244', 'REF_249'] 
TMP_265(uint256) = TMP_264 / 100
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_265', '1000000000000000000'] 
REF_251(F3Ddatasets.Round) -> round_[_rID]
REF_252(uint256) -> REF_251.keys
TMP_267(uint256) = TMP_266 / REF_252
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_241', 'TMP_267'] 
REF_254(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_255(F3Ddatasets.PlayerRounds) -> REF_254[_rID]
REF_256(uint256) -> REF_255.keys
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_268', 'REF_256'] 
TMP_270(uint256) = TMP_269 / 1000000000000000000
RETURN TMP_270"];
}
// Function: 514.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_187(F3Ddatasets.Round) -> round_[_rID]
REF_188(uint256) -> REF_187.end
TMP_241(bool) = _now < REF_188
CONDITION TMP_241"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_189(F3Ddatasets.Round) -> round_[_rID]
REF_190(uint256) -> REF_189.strt
TMP_242(uint256) = REF_190 + rndGap_
TMP_243(bool) = _now > TMP_242
CONDITION TMP_243"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_191(F3Ddatasets.Round) -> round_[_rID]
REF_192(uint256) -> REF_191.end
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_192', '_now'] 
RETURN TMP_244"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_194(F3Ddatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.strt
TMP_245(uint256) = REF_195 + rndGap_
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_245', '_now'] 
RETURN TMP_246"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 514.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_490(F3Ddatasets.Round) -> round_[_rID]
REF_491(uint256) -> REF_490.strt
TMP_388(uint256) = REF_491 + rndGap_
TMP_389(bool) = _now > TMP_388
REF_492(F3Ddatasets.Round) -> round_[_rID]
REF_493(uint256) -> REF_492.end
TMP_390(bool) = _now <= REF_493
REF_494(F3Ddatasets.Round) -> round_[_rID]
REF_495(uint256) -> REF_494.end
TMP_391(bool) = _now > REF_495
REF_496(F3Ddatasets.Round) -> round_[_rID]
REF_497(uint256) -> REF_496.plyr
TMP_392(bool) = REF_497 == 0
TMP_393(bool) = TMP_391 && TMP_392
TMP_394(bool) = TMP_390 || TMP_393
TMP_395(bool) = TMP_389 && TMP_394
CONDITION TMP_395"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_498(F3Ddatasets.Round) -> round_[_rID]
REF_499(uint256) -> REF_498.keys
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_499', '_keys'] 
TMP_397(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_396', '_keys'] 
RETURN TMP_397"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_398(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_398"];
}
// Function: 514.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_557(bool) = activated_ == True
TMP_558(None) = SOLIDITY_CALL require(bool,string)(TMP_557,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 514.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_559(bool) = _addr == tx.origin
TMP_560(None) = SOLIDITY_CALL require(bool)(TMP_559)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_561(bool) = _codeLength == 0
TMP_562(None) = SOLIDITY_CALL require(bool,string)(TMP_561,sorry humans only)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 514.sol-FoMo3Dlong-isRoundActive(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(now > round_[_rID].strt + rndGap_ && (now <= round_[_rID].end || (now > round_[_rID].end && round_[_rID].plyr == 0)))

IRs:
REF_257(F3Ddatasets.Round) -> round_[_rID]
REF_258(uint256) -> REF_257.strt
TMP_271(uint256) = REF_258 + rndGap_
TMP_272(bool) = now > TMP_271
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.end
TMP_273(bool) = now <= REF_260
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_274(bool) = now > REF_262
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.plyr
TMP_275(bool) = REF_264 == 0
TMP_276(bool) = TMP_274 && TMP_275
TMP_277(bool) = TMP_273 || TMP_276
TMP_278(bool) = TMP_272 && TMP_277
RETURN TMP_278"];
}
// Function: 514.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_563(bool) = _eth >= 1000000000
TMP_564(None) = SOLIDITY_CALL require(bool,string)(TMP_563,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_565(bool) = _eth <= 100000000000000000000000
TMP_566(None) = SOLIDITY_CALL require(bool,string)(TMP_565,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 514.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_543(F3Ddatasets.Player) -> plyr_[_pID]
REF_544(uint256) -> REF_543.lrnd
TMP_424(bool) = REF_544 != 0
CONDITION TMP_424"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_545(F3Ddatasets.Player) -> plyr_[_pID]
REF_546(uint256) -> REF_545.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_546)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_547(F3Ddatasets.Player) -> plyr_[_pID]
REF_548(uint256) -> REF_547.lrnd
REF_548(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_549(uint256) -> _eventData_.compressedData
REF_550(uint256) -> _eventData_.compressedData
TMP_426(uint256) = REF_550 + 10
REF_549(uint256) (->_eventData_) := TMP_426(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 514.sol-FoMo3Dlong-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0x00904cF2F74Aba6Df6A60E089CDF9b7b155BAf6c || msg.sender == 0x00b0Beac53077938634A63306b2c801169b18464,only team just can activate)

IRs:
TMP_567(bool) = msg.sender == 3218010519359344545030296475657360186399240044
TMP_568(bool) = msg.sender == 3941541128200262888414709443076825697355924580
TMP_569(bool) = TMP_567 || TMP_568
TMP_570(None) = SOLIDITY_CALL require(bool,string)(TMP_569,only team just can activate)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 514.sol-FoMo3Dlong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_506(uint256) = rID_ + 1
_rID(uint256) := TMP_506(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_664(F3Ddatasets.Round) -> round_[_rID]
REF_665(uint256) -> REF_664.pot
REF_666(F3Ddatasets.Round) -> round_[_rID]
REF_667(uint256) -> REF_666.pot
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_667', 'msg.value'] 
REF_665(uint256) (->round_) := TMP_507(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 514.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.strt
TMP_306(uint256) = REF_348 + rndGap_
TMP_307(bool) = _now > TMP_306
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.end
TMP_308(bool) = _now <= REF_350
REF_351(F3Ddatasets.Round) -> round_[_rID]
REF_352(uint256) -> REF_351.end
TMP_309(bool) = _now > REF_352
REF_353(F3Ddatasets.Round) -> round_[_rID]
REF_354(uint256) -> REF_353.plyr
TMP_310(bool) = REF_354 == 0
TMP_311(bool) = TMP_309 && TMP_310
TMP_312(bool) = TMP_308 || TMP_311
TMP_313(bool) = TMP_307 && TMP_312
CONDITION TMP_313"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_355(F3Ddatasets.Player) -> plyr_[_pID]
REF_356(uint256) -> REF_355.gen
TMP_314(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_314', '_eth'] 
REF_356(uint256) (->plyr_) := TMP_315(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_358(F3Ddatasets.Round) -> round_[_rID]
REF_359(uint256) -> REF_358.end
TMP_317(bool) = _now > REF_359
REF_360(F3Ddatasets.Round) -> round_[_rID]
REF_361(bool) -> REF_360.ended
TMP_318(bool) = REF_361 == False
TMP_319(bool) = TMP_317 && TMP_318
CONDITION TMP_319"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_362(F3Ddatasets.Round) -> round_[_rID]
REF_363(bool) -> REF_362.ended
REF_363(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_320(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_320(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_364(uint256) -> _eventData_.compressedData
REF_365(uint256) -> _eventData_.compressedData
TMP_321(uint256) = _now * 1000000000000000000
TMP_322(uint256) = REF_365 + TMP_321
REF_364(uint256) (->_eventData_) := TMP_322(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_366(uint256) -> _eventData_.compressedIDs
REF_367(uint256) -> _eventData_.compressedIDs
TMP_323(uint256) = REF_367 + _pID
REF_366(uint256) (->_eventData_) := TMP_323(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_369(F3Ddatasets.Player) -> plyr_[_pID]
REF_370(bytes32) -> REF_369.name
REF_371(uint256) -> _eventData_.compressedData
REF_372(uint256) -> _eventData_.compressedIDs
REF_373(address) -> _eventData_.winnerAddr
REF_374(bytes32) -> _eventData_.winnerName
REF_375(uint256) -> _eventData_.amountWon
REF_376(uint256) -> _eventData_.newPot
REF_377(uint256) -> _eventData_.P3DAmount
REF_378(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_370,REF_371,REF_372,REF_373,REF_374,REF_375,REF_376,REF_377,REF_378)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 514.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_97(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_97(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_181 = CONVERT 0 to address
TMP_182(bool) = _affCode == TMP_181
TMP_183(bool) = _affCode == msg.sender
TMP_184(bool) = TMP_182 || TMP_183
CONDITION TMP_184"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_98(F3Ddatasets.Player) -> plyr_[_pID]
REF_99(uint256) -> REF_98.laff
_affID(uint256) := REF_99(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_100(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_100(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_pID]
REF_102(uint256) -> REF_101.laff
TMP_185(bool) = _affID != REF_102
CONDITION TMP_185"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_103(F3Ddatasets.Player) -> plyr_[_pID]
REF_104(uint256) -> REF_103.laff
REF_104(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_186(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_186(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 514.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_90(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_90(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_172(bool) = _affCode == 0
TMP_173(bool) = _affCode == _pID
TMP_174(bool) = TMP_172 || TMP_173
CONDITION TMP_174"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_91(F3Ddatasets.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.laff
_affCode(uint256) := REF_92(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_93(F3Ddatasets.Player) -> plyr_[_pID]
REF_94(uint256) -> REF_93.laff
TMP_175(bool) = _affCode != REF_94
CONDITION TMP_175"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_95(F3Ddatasets.Player) -> plyr_[_pID]
REF_96(uint256) -> REF_95.laff
REF_96(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_176(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_176(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 514.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_105(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_105(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_191(bool) = _affCode == 
REF_106(F3Ddatasets.Player) -> plyr_[_pID]
REF_107(bytes32) -> REF_106.name
TMP_192(bool) = _affCode == REF_107
TMP_193(bool) = TMP_191 || TMP_192
CONDITION TMP_193"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_108(F3Ddatasets.Player) -> plyr_[_pID]
REF_109(uint256) -> REF_108.laff
_affID(uint256) := REF_109(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_110(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_110(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_111(F3Ddatasets.Player) -> plyr_[_pID]
REF_112(uint256) -> REF_111.laff
TMP_194(bool) = _affID != REF_112
CONDITION TMP_194"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_113(F3Ddatasets.Player) -> plyr_[_pID]
REF_114(uint256) -> REF_113.laff
REF_114(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_195(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_195(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 514.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_399 = CONVERT PlayerBook to address
TMP_400(bool) = msg.sender == TMP_399
TMP_401(None) = SOLIDITY_CALL require(bool,string)(TMP_400,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_503(uint256) -> pIDxAddr_[_addr]
TMP_402(bool) = REF_503 != _pID
CONDITION TMP_402"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_504(uint256) -> pIDxAddr_[_addr]
REF_504(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_505(uint256) -> pIDxName_[_name]
TMP_403(bool) = REF_505 != _pID
CONDITION TMP_403"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_506(uint256) -> pIDxName_[_name]
REF_506(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_507(F3Ddatasets.Player) -> plyr_[_pID]
REF_508(address) -> REF_507.addr
TMP_404(bool) = REF_508 != _addr
CONDITION TMP_404"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_509(F3Ddatasets.Player) -> plyr_[_pID]
REF_510(address) -> REF_509.addr
REF_510(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_511(F3Ddatasets.Player) -> plyr_[_pID]
REF_512(bytes32) -> REF_511.name
TMP_405(bool) = REF_512 != _name
CONDITION TMP_405"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_513(F3Ddatasets.Player) -> plyr_[_pID]
REF_514(bytes32) -> REF_513.name
REF_514(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_515(F3Ddatasets.Player) -> plyr_[_pID]
REF_516(uint256) -> REF_515.laff
TMP_406(bool) = REF_516 != _laff
CONDITION TMP_406"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_517(F3Ddatasets.Player) -> plyr_[_pID]
REF_518(uint256) -> REF_517.laff
REF_518(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_519(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_520(bool) -> REF_519[_name]
TMP_407(bool) = REF_520 == False
CONDITION TMP_407"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_521(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_522(bool) -> REF_521[_name]
REF_522(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 514.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_408 = CONVERT PlayerBook to address
TMP_409(bool) = msg.sender == TMP_408
TMP_410(None) = SOLIDITY_CALL require(bool,string)(TMP_409,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_523(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_524(bool) -> REF_523[_name]
TMP_411(bool) = REF_524 == False
CONDITION TMP_411"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_525(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_526(bool) -> REF_525[_name]
REF_526(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 514.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_219(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_219(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_151(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_151(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_153(F3Ddatasets.Player) -> plyr_[_affID]
REF_154(address) -> REF_153.addr
REF_155(F3Ddatasets.Player) -> plyr_[_affID]
REF_156(bytes32) -> REF_155.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_154,REF_156,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 514.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_223(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_223(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_160(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_160(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_162(F3Ddatasets.Player) -> plyr_[_affID]
REF_163(address) -> REF_162.addr
REF_164(F3Ddatasets.Player) -> plyr_[_affID]
REF_165(bytes32) -> REF_164.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_163,REF_165,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 514.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_227(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_227(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_169(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_169(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_171(F3Ddatasets.Player) -> plyr_[_affID]
REF_172(address) -> REF_171.addr
REF_173(F3Ddatasets.Player) -> plyr_[_affID]
REF_174(bytes32) -> REF_173.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_172,REF_174,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 514.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x1e09aF1634Aab1522eDBF84AA668028Ac373bF79)

IRs:
TMP_556 = CONVERT 171485682037758234383555449508451558058886414201 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_556(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = SuperCC

IRs:
name(string) := SuperCC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = SC

IRs:
symbol(string) := SC(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 514.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
teamWallet = 0x7a9f5d9f4BdCf4C2Aa93e929d823FCFBD1fa19D0

IRs:
teamWallet(address) := 700050848175402154491845995165241806129437743568(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 15

IRs:
rndExtra_(uint256) := 15(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 3600

IRs:
rndGap_(uint256) := 3600(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 514.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_460(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_460(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_461(bool) = _earnings > 0
CONDITION TMP_461"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_613(F3Ddatasets.Player) -> plyr_[_pID]
REF_614(uint256) -> REF_613.gen
REF_616(F3Ddatasets.Player) -> plyr_[_pID]
REF_617(uint256) -> REF_616.gen
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_617'] 
REF_614(uint256) (->plyr_) := TMP_462(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_618(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_619(F3Ddatasets.PlayerRounds) -> REF_618[_rIDlast]
REF_620(uint256) -> REF_619.mask
REF_622(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_623(F3Ddatasets.PlayerRounds) -> REF_622[_rIDlast]
REF_624(uint256) -> REF_623.mask
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_624'] 
REF_620(uint256) (->plyrRnds_) := TMP_463(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 514.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_526(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_693(F3Ddatasets.Round) -> round_[_rID]
REF_694(uint256) -> REF_693.keys
TMP_527(uint256) = TMP_526 / REF_694
_ppt(uint256) := TMP_527(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_695(F3Ddatasets.Round) -> round_[_rID]
REF_696(uint256) -> REF_695.mask
REF_698(F3Ddatasets.Round) -> round_[_rID]
REF_699(uint256) -> REF_698.mask
TMP_528(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_699'] 
REF_696(uint256) (->round_) := TMP_528(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_529(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_530(uint256) = TMP_529 / 1000000000000000000
_pearn(uint256) := TMP_530(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_701(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_702(F3Ddatasets.PlayerRounds) -> REF_701[_rID]
REF_703(uint256) -> REF_702.mask
REF_704(F3Ddatasets.Round) -> round_[_rID]
REF_705(uint256) -> REF_704.mask
TMP_531(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_705', '_keys'] 
TMP_532(uint256) = TMP_531 / 1000000000000000000
TMP_533(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_532', '_pearn'] 
REF_709(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_710(F3Ddatasets.PlayerRounds) -> REF_709[_rID]
REF_711(uint256) -> REF_710.mask
TMP_534(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_533', 'REF_711'] 
REF_703(uint256) (->plyrRnds_) := TMP_534(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_714(F3Ddatasets.Round) -> round_[_rID]
REF_715(uint256) -> REF_714.keys
TMP_535(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_715'] 
TMP_536(uint256) = TMP_535 / 1000000000000000000
TMP_537(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_536'] 
RETURN TMP_537"];
}
// Function: 514.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_625(F3Ddatasets.Round) -> round_[_rID]
REF_626(uint256) -> REF_625.end
TMP_464(bool) = _now > REF_626
REF_627(F3Ddatasets.Round) -> round_[_rID]
REF_628(uint256) -> REF_627.plyr
TMP_465(bool) = REF_628 == 0
TMP_466(bool) = TMP_464 && TMP_465
CONDITION TMP_466"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_467(uint256) = _keys / 1000000000000000000
TMP_468(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_467', 'rndInc_'] 
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_468', '_now'] 
_newTime(uint256) := TMP_469(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_470(uint256) = _keys / 1000000000000000000
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_470', 'rndInc_'] 
REF_633(F3Ddatasets.Round) -> round_[_rID]
REF_634(uint256) -> REF_633.end
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_471', 'REF_634'] 
_newTime(uint256) := TMP_472(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_474(bool) = _newTime < TMP_473
CONDITION TMP_474"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_636(F3Ddatasets.Round) -> round_[_rID]
REF_637(uint256) -> REF_636.end
REF_637(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_638(F3Ddatasets.Round) -> round_[_rID]
REF_639(uint256) -> REF_638.end
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_639(uint256) (->round_) := TMP_475(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 514.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_421(bool) = _team < 0
TMP_422(bool) = _team > 3
TMP_423(bool) = TMP_421 || TMP_422
CONDITION TMP_423"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 514.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_115(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_115(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_116(F3Ddatasets.Round) -> round_[_rID]
REF_117(uint256) -> REF_116.end
TMP_200(bool) = _now > REF_117
REF_118(F3Ddatasets.Round) -> round_[_rID]
REF_119(bool) -> REF_118.ended
TMP_201(bool) = REF_119 == False
TMP_202(bool) = TMP_200 && TMP_201
REF_120(F3Ddatasets.Round) -> round_[_rID]
REF_121(uint256) -> REF_120.plyr
TMP_203(bool) = REF_121 != 0
TMP_204(bool) = TMP_202 && TMP_203
CONDITION TMP_204"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_122(F3Ddatasets.Round) -> round_[_rID]
REF_123(bool) -> REF_122.ended
REF_123(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_205(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_205(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_206(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_206(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_207(bool) = _eth > 0
CONDITION TMP_207"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_124(F3Ddatasets.Player) -> plyr_[_pID]
REF_125(address) -> REF_124.addr
Transfer dest:REF_125 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_127(uint256) -> _eventData_.compressedData
REF_128(uint256) -> _eventData_.compressedData
TMP_209(uint256) = _now * 1000000000000000000
TMP_210(uint256) = REF_128 + TMP_209
REF_127(uint256) (->_eventData_) := TMP_210(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_129(uint256) -> _eventData_.compressedIDs
REF_130(uint256) -> _eventData_.compressedIDs
TMP_211(uint256) = REF_130 + _pID
REF_129(uint256) (->_eventData_) := TMP_211(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_132(F3Ddatasets.Player) -> plyr_[_pID]
REF_133(bytes32) -> REF_132.name
REF_134(uint256) -> _eventData_.compressedData
REF_135(uint256) -> _eventData_.compressedIDs
REF_136(address) -> _eventData_.winnerAddr
REF_137(bytes32) -> _eventData_.winnerName
REF_138(uint256) -> _eventData_.amountWon
REF_139(uint256) -> _eventData_.newPot
REF_140(uint256) -> _eventData_.P3DAmount
REF_141(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_133,_eth,REF_134,REF_135,REF_136,REF_137,REF_138,REF_139,REF_140,REF_141)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_213(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_213(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_214(bool) = _eth > 0
CONDITION TMP_214"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_142(F3Ddatasets.Player) -> plyr_[_pID]
REF_143(address) -> REF_142.addr
Transfer dest:REF_143 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_146(F3Ddatasets.Player) -> plyr_[_pID]
REF_147(bytes32) -> REF_146.name
Emit onWithdraw(_pID,msg.sender,REF_147,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
}
// Function: 514.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_716(F3Ddatasets.Player) -> plyr_[_pID]
REF_717(uint256) -> REF_716.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_717)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_718(F3Ddatasets.Player) -> plyr_[_pID]
REF_719(uint256) -> REF_718.win
REF_721(F3Ddatasets.Player) -> plyr_[_pID]
REF_722(uint256) -> REF_721.gen
TMP_539(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_719', 'REF_722'] 
REF_724(F3Ddatasets.Player) -> plyr_[_pID]
REF_725(uint256) -> REF_724.aff
TMP_540(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_539', 'REF_725'] 
_earnings(uint256) := TMP_540(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_541(bool) = _earnings > 0
CONDITION TMP_541"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_726(F3Ddatasets.Player) -> plyr_[_pID]
REF_727(uint256) -> REF_726.win
REF_727(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_728(F3Ddatasets.Player) -> plyr_[_pID]
REF_729(uint256) -> REF_728.gen
REF_729(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_730(F3Ddatasets.Player) -> plyr_[_pID]
REF_731(uint256) -> REF_730.aff
REF_731(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 514.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_46 = CONVERT _input to bytes
_temp(bytes) := TMP_46(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_15 -> LENGTH _temp
_length(uint256) := REF_15(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_47(bool) = _length <= 32
TMP_48(bool) = _length > 0
TMP_49(bool) = TMP_47 && TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_16(None) -> _temp[0]
TMP_51(bool) = REF_16 != 32
TMP_52(uint256) = _length - 1
REF_17(None) -> _temp[TMP_52]
TMP_53(bool) = REF_17 != 32
TMP_54(bool) = TMP_51 && TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_18(None) -> _temp[0]
TMP_56(bool) = REF_18 == 48
CONDITION TMP_56"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_19(None) -> _temp[1]
TMP_57(bool) = REF_19 != 120
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_20(None) -> _temp[1]
TMP_59(bool) = REF_20 != 88
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_61(bool) = i < _length
CONDITION TMP_61"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_21(None) -> _temp[i]
TMP_62(bool) = REF_21 > 64
REF_22(None) -> _temp[i]
TMP_63(bool) = REF_22 < 91
TMP_64(bool) = TMP_62 && TMP_63
CONDITION TMP_64"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_23(bytes1) -> _temp[i]
REF_24(None) -> _temp[i]
TMP_65 = CONVERT REF_24 to uint256
TMP_66(uint256) = TMP_65 + 32
TMP_67 = CONVERT TMP_66 to bytes1
REF_23(bytes1) (->_temp) := TMP_67(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_68(bool) = _hasNonNumber == False
CONDITION TMP_68"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_25(None) -> _temp[i]
TMP_69(bool) = REF_25 == 32
REF_26(None) -> _temp[i]
TMP_70(bool) = REF_26 > 96
REF_27(None) -> _temp[i]
TMP_71(bool) = REF_27 < 123
TMP_72(bool) = TMP_70 && TMP_71
TMP_73(bool) = TMP_69 || TMP_72
REF_28(None) -> _temp[i]
TMP_74(bool) = REF_28 > 47
REF_29(None) -> _temp[i]
TMP_75(bool) = REF_29 < 58
TMP_76(bool) = TMP_74 && TMP_75
TMP_77(bool) = TMP_73 || TMP_76
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_30(None) -> _temp[i]
TMP_79(bool) = REF_30 == 32
CONDITION TMP_79"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_80(uint256) = i + 1
REF_31(None) -> _temp[TMP_80]
TMP_81(bool) = REF_31 != 32
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_83(bool) = _hasNonNumber == False
REF_32(None) -> _temp[i]
TMP_84(bool) = REF_32 < 48
REF_33(None) -> _temp[i]
TMP_85(bool) = REF_33 > 57
TMP_86(bool) = TMP_84 || TMP_85
TMP_87(bool) = TMP_83 && TMP_86
CONDITION TMP_87"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_88(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_89(bool) = _hasNonNumber == True
TMP_90(None) = SOLIDITY_CALL require(bool,string)(TMP_89,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 514.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 514.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 514.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 514.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 514.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 514.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 514.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 514.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 514.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 514.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 514.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 514.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_19(bool) = x == 0
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_20(bool) = y == 0
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_21(bool) = i < y
CONDITION TMP_21"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_22(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 514.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_18(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_18"];
}
// Function: 514.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_13(uint256) = TMP_12 / 2
z(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_14(bool) = z < y
CONDITION TMP_14"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_15(uint256) = x / z
TMP_16(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_15,z)
TMP_17(uint256) = TMP_16 / 2
z(uint256) := TMP_17(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 514.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 514.sol-UintCompressor-exponent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((10).pwr(_position))

IRs:
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.pwr(uint256,uint256), arguments:['10', '_position'] 
RETURN TMP_127"];
}
// Function: 514.sol-UintCompressor-extract(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_112(bool) = _end < 77
TMP_113(bool) = _start < 77
TMP_114(bool) = TMP_112 && TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool,string)(TMP_114,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_116(bool) = _end >= _start
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_118(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_118', '10'] 
_end(uint256) := TMP_119(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_120(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_120(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start)

IRs:
TMP_121(uint256) = _input / _start
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_121', '_start'] 
TMP_123(uint256) = _input / _end
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', '_end'] 
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_122', 'TMP_124'] 
TMP_126(uint256) = TMP_125 / _start
RETURN TMP_126"];
}
// Function: 514.sol-UintCompressor-insert(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_91(bool) = _end < 77
TMP_92(bool) = _start < 77
TMP_93(bool) = TMP_91 && TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_95(bool) = _end >= _start
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_97(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_97', '10'] 
_end(uint256) := TMP_98(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_99(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_99(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_include < (_end / _start))

IRs:
TMP_100(uint256) = _end / _start
TMP_101(bool) = _include < TMP_100
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_include > 0

IRs:
TMP_103(bool) = _include > 0
CONDITION TMP_103"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_include = _include.mul(_start)

IRs:
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_include', '_start'] 
_include(uint256) := TMP_104(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)))

IRs:
TMP_105(uint256) = _var / _start
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_105', '_start'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_var', 'TMP_106'] 
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_107', '_include'] 
TMP_109(uint256) = _var / _end
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_109', '_end'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_108', 'TMP_110'] 
RETURN TMP_111"];
}
}
