digraph G {
// Function: 561.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 561.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 561.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 561.sol-ERC20-totalSupply()
digraph{
}
// Function: 561.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 561.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 561.sol-ElpisToken-allowance(address,address)
digraph{
}
// Function: 561.sol-ElpisToken-approve(address,uint256)
digraph{
}
// Function: 561.sol-ElpisToken-balanceOf(address)
digraph{
}
// Function: 561.sol-ElpisToken-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_target])

IRs:
REF_130(uint256) -> balances[_target]
TMP_223(bool) = _value <= REF_130
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_target] = balances[_target].sub(_value)

IRs:
REF_131(uint256) -> balances[_target]
REF_132(uint256) -> balances[_target]
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_132', '_value'] 
REF_131(uint256) (->balances) := TMP_225(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_226(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_target,_value)

IRs:
Emit Burn(_target,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_target,address(0),_value)

IRs:
TMP_228 = CONVERT 0 to address
Emit Transfer(_target,TMP_228,_value)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 561.sol-ElpisToken-claimTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
_token == address(0)

IRs:
TMP_212 = CONVERT 0 to address
TMP_213(bool) = _token == TMP_212
CONDITION TMP_213"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_214 = CONVERT this to address
TMP_215(uint256) = SOLIDITY_CALL balance(address)(TMP_214)
Transfer dest:owner value:TMP_215"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_217 = CONVERT _token to ERC20
token(ERC20) := TMP_217(ERC20)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = token.balanceOf(address(this))

IRs:
TMP_218 = CONVERT this to address
TMP_219(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['TMP_218']  
balance(uint256) := TMP_219(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_220(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'balance']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ClaimedTokens(_token,owner,balance)

IRs:
Emit ClaimedTokens(_token,owner,balance)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 561.sol-ElpisToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deploymentBlock = block.number

IRs:
deploymentBlock(uint256) := block.number(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = 250000000000000000000000000

IRs:
totalSupply_(uint256) := 250000000000000000000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = totalSupply_

IRs:
REF_126(uint256) -> balances[msg.sender]
REF_126(uint256) (->balances) := totalSupply_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transfer(0x6467704b5CD5a5A380656886AE0284133825D378,7000000000000000000000000)

IRs:
TMP_157(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(573205836058432777219493695709884801331264607096,7000000000000000000000000)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transfer(0x7EF7F9104867454f0E3cd8B4aE99045a01f605c0,1000000000000000000000000)

IRs:
TMP_158(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(724862817687796351028402745518645248924826600896,1000000000000000000000000)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transfer(0x1499493fd2fdb2c6d536569322fe37f5da24a5c9,4672955120000000000000000)

IRs:
TMP_159(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(117598210346969266584559514634346877278409237961,4672955120000000000000000)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transfer(0x22a5c82364faa085394b6e82d8d39643d0ad38e7,2500000000000000000000000)

IRs:
TMP_160(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(197802743667061420458195161090369754551661967591,2500000000000000000000000)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
transfer(0xdc64259785a9dbae1b40fee4dfe2055af4fefd6b,2000000000000000000000000)

IRs:
TMP_161(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1258211318815983915086603477380621864216339348843,2000000000000000000000000)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transfer(0xbd14c21b0ed5fefee65d9c0609136fff8aafb1e8,1500000000000000000000000)

IRs:
TMP_162(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1079462179580491273995226931630488216194801185256,1500000000000000000000000)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
transfer(0x4aca633f98559bb7e6025c629e1789537b9ee72f,1000000000000000000000000)

IRs:
TMP_163(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(426978713327650829887093461543307468191588869935,1000000000000000000000000)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
transfer(0x4aeac209d18151f79ff5dc320619a554872b099d,1000000000000000000000000)

IRs:
TMP_164(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(427700594541912474292505411480099519445408090525,1000000000000000000000000)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
transfer(0x9d3b6f11c9f17bf98e1bc8618a17bb1e9928e1c1,1000000000000000000000000)

IRs:
TMP_165(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(897636970503023460317135008106347552946113798593,1000000000000000000000000)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
transfer(0xffdfb7ef8e05b02a6bc024c15ce5e89f0561a6f7,646900270000000000000000)

IRs:
TMP_166(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1460781735803942523820214233697364744961645455095,646900270000000000000000)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
transfer(0x6d91062c251eb5042a71312e704c297fb924409c,379937110000000000000000)

IRs:
TMP_167(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(625514139769066059775691688379807217267385843868,379937110000000000000000)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
transfer(0x5182531e3ebeb35af19e00fa5de03a12d46eba72,379200360000000000000000)

IRs:
TMP_168(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(465334589924145636098326854729124508257181678194,379200360000000000000000)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
transfer(0x8b751c5d881ab355a0b5109ea1a1a7e0a7c0ea36,125000000000000000000000)

IRs:
TMP_169(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(796161375303921634190669712838439374437597899318,125000000000000000000000)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
transfer(0x6a877aa35ef434186985d07270ba50685d1b7ada,60000000000000000000000)

IRs:
TMP_170(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(608174305600253515212578583411249371737910639322,60000000000000000000000)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
transfer(0x9ecedc01e9fde532a5f30f398cbc0261e88136a1,28264000000000000000000)

IRs:
TMP_171(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(906633660655279730178854750591651807051552732833,28264000000000000000000)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
transfer(0xd24400ae8bfebb18ca49be86258a3c749cf46853,22641509433000000000000)

IRs:
TMP_172(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1200404571941723556296725344856231068018784102483,22641509433000000000000)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
transfer(0x964fcf14cbbd03b89caab136050cc02e6949d5e7,15094339622000000000000)

IRs:
TMP_173(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(858128413813909763377275757805659803945781548519,15094339622000000000000)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
transfer(0xdc8ce4f0278968f48c059461abbc59c27c08b6f0,10062893081000000000000)

IRs:
TMP_174(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1259120017230552850183409385531333355578493286128,10062893081000000000000)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
transfer(0x2c06c71e718ca02435804b0ce313a1333cb06d02,9811320754000000000000)

IRs:
TMP_175(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(251346744091744483860542733717546417748049947906,9811320754000000000000)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
transfer(0x9cca8e43a9a37c3969bfd0d3e0cdf60e732c0cee,8050314464000000000000)

IRs:
TMP_176(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(895119703747631440555977425235259604877775211758,8050314464000000000000)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
transfer(0xa48f71410d01ec4ca59c36af3a2e2602c28d8fc2,7547169811000000000000)

IRs:
TMP_177(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(939473358802453648815669528634082961806089621442,7547169811000000000000)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
transfer(0xeb5e9a1469da277b056a4bc250af4489eda36621,5031446540000000000000)

IRs:
TMP_178(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1343722523430646657300137237843703742886922380833,5031446540000000000000)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
transfer(0xbb5c14e2a821c0bada4ae7217d23c919472f7f77,3773584905000000000000)

IRs:
TMP_179(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1069634762075341925812482795299548701133808566135,3773584905000000000000)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
transfer(0x46b5c439228015e2596c7b2da8e81a705990c6ac,3773584905000000000000)

IRs:
TMP_180(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(403682882288599158705194506229833628658674222764,3773584905000000000000)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
transfer(0x3e7a3fb0976556aaf12484de68350ac3b6ae4c40,2515723270000000000000)

IRs:
TMP_181(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(356683666870248672683308476931399889232296037440,2515723270000000000000)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
transfer(0xe14362f83a0625e57f1ca92d515c3c060d7d5659,2264150943000000000000)

IRs:
TMP_182(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1286025694834840899768270699246559690132408850009,2264150943000000000000)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
transfer(0x795df9a9699b399ffc512732d2c797c781c22bc7,1509433962000000000000)

IRs:
TMP_183(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(692883601180439862667591209100948593893179534279,1509433962000000000000)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
transfer(0xaca9fd46bfa5e903a75fb604f977792bd349a1af,1396226415000000000000)

IRs:
TMP_184(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(985737302003102495554613342472954205296893993391,1396226415000000000000)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
transfer(0xe2cdffd7b906cdd7ae74d8eb8553328a66d12b84,1368887886000000000000)

IRs:
TMP_185(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1294825854011450505068745858440136816093652134788,1368887886000000000000)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
transfer(0xee76d34d75ee0a72540abca5b26270b975f6adb6,1320754716000000000000)

IRs:
TMP_186(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1361389698440329928663776312187560736395944701366,1320754716000000000000)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
transfer(0xc44aa2d68d51fa5195b3d03af14a3706feeb29fc,1320754716000000000000)

IRs:
TMP_187(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1120626631424758079620384960649448460795482155516,1320754716000000000000)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
transfer(0xe694d8dd4b01bb12cb44568ebed792bd45a3f2cf,1257861635000000000000)

IRs:
TMP_188(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1316387279134731058819584580486683337608013279951,1257861635000000000000)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
transfer(0x9484e40deff4c6b4a475fe7625d3c70c71f54db7,1207547169000000000000)

IRs:
TMP_189(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(847894198791953944804769818754866908949996981687,1207547169000000000000)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
transfer(0x15ae5afd84c15f740a28a45fe166e161e3ed9251,1132075471000000000000)

IRs:
TMP_190(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(123777062225479792614981987684675498518824981073,1132075471000000000000)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
transfer(0x7fd9138acbcf9b1600eea70befe87729cc30968b,1006289308000000000000)

IRs:
TMP_191(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(729882791966019337444368053187076686269002061451,1006289308000000000000)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
transfer(0xfd3c389d724a230b4d086a77c83013ef6b4afdf1,766037735000000000000)

IRs:
TMP_192(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1445717641594603954447326941031586569414008045041,766037735000000000000)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
transfer(0x774c988ec49df627093b6755c3baebb0d9a9d0b3,758650475000000000000)

IRs:
TMP_193(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(681078048012031831419404429770232724485499900083,758650475000000000000)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
transfer(0x7a0702d58d6a4b6f06a9d275dc027555148e81c7,754716981000000000000)

IRs:
TMP_194(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(696653226149587214848606669226063614793887941063,754716981000000000000)"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
transfer(0x4b1b467a6a80af7ebc53051015e089b20588f1e7,566037735000000000000)

IRs:
TMP_195(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(428782567448178619727871264334761128049534104039,566037735000000000000)"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
transfer(0x0f6e5559ba758638d0931528967a54b9b5182b93,566037735000000000000)

IRs:
TMP_196(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(88095378611477445286211909820776800308870785939,566037735000000000000)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
transfer(0xc1ec7ea396923d1a866a4f3798a87d1a92b9e37a,556345720000000000000)

IRs:
TMP_197(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1107109226450050979180047242506321379117701391226,556345720000000000000)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
transfer(0x64bea49dd8d3a328a4aa4c739d776b0bfdda6128,503144654000000000000)

IRs:
TMP_198(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(575150558797541317067540977323237892558801232168,503144654000000000000)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
transfer(0x472745526b7f72f7a9eb117e738f309d2abcc1a2,503144654000000000000)

IRs:
TMP_199(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(406214112585007828563703755045587477295456371106,503144654000000000000)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
transfer(0xe3f68a6b6b39534a975eb9605dd71c8e36989e52,490566037000000000000)

IRs:
TMP_200(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1301438946344046994567844635279682736000442342994,490566037000000000000)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
transfer(0x0caef953d12a24680c821d6e292a74634351d5a6,452830188000000000000)

IRs:
TMP_201(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(72409938395091331454184050920147662411509388710,452830188000000000000)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
transfer(0x3f5d8a83b470b9d51b9c5a9ac1928e4e77a37842,427942513000000000000)

IRs:
TMP_202(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(361752454177660233155187998376013631252951431234,427942513000000000000)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
transfer(0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98,422382641000000000000)

IRs:
TMP_203(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1436919877447261723048929433803713945911935613848,422382641000000000000)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
transfer(0x0b9fe4475e6a5ecbfb1fefc56c4c28fe97064dc1,415094339000000000000)

IRs:
TMP_204(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(66364602852368834347260961897042370839664020929,415094339000000000000)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
transfer(0x83658d1d001092cabf33502cd1c66c91c16a18a6,377358490000000000000)

IRs:
TMP_205(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(750142458943565643558630758920869498340902574246,377358490000000000000)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
transfer(0x236bea162cc2115b20309c632619ac876682becc,94339622000000000000)

IRs:
TMP_206(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(202221248535690953608446256880750955479416618700,94339622000000000000)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
transfer(0xdfb2b0210081bd17bc30bd163c415ba8a0f3e316,60314465000000000000)

IRs:
TMP_207(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(1277089817531370404568219466680215745107609248534,60314465000000000000)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
transfer(0x92df16e27d3147cf05e190e633bf934e654eec86,50314465000000000000)

IRs:
TMP_208(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(838487712260067700828434747795621486606597155974,50314465000000000000)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
transfer(0x6dd451c3f06a24da0b37d90e709f0e9f08987673,40314465000000000000)

IRs:
TMP_209(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(627014874771674872307738518690998292249665107571,40314465000000000000)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
transfer(0x550c6de28d89d876ca5b45e3b87e5ae4374aa770,1000000000000000000)

IRs:
TMP_210(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(485541396793527095523809172145845085450252494704,1000000000000000000)"];
}
// Function: 561.sol-ElpisToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_117(mapping(address => uint256)) -> allowed[msg.sender]
REF_118(uint256) -> REF_117[_spender]
oldValue(uint256) := REF_118(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_154(bool) = _subtractedValue >= oldValue
CONDITION TMP_154"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
REF_120(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_121(mapping(address => uint256)) -> allowed[msg.sender]
REF_122(uint256) -> REF_121[_spender]
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_122(uint256) (->allowed) := TMP_155(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_124(mapping(address => uint256)) -> allowed[msg.sender]
REF_125(uint256) -> REF_124[_spender]
Emit Approval(msg.sender,_spender,REF_125)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 561.sol-ElpisToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_211(None) = SOLIDITY_CALL revert()()"];
}
// Function: 561.sol-ElpisToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
REF_112(mapping(address => uint256)) -> allowed[msg.sender]
REF_113(uint256) -> REF_112[_spender]
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_113', '_addedValue'] 
REF_111(uint256) (->allowed) := TMP_152(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_115(mapping(address => uint256)) -> allowed[msg.sender]
REF_116(uint256) -> REF_115[_spender]
Emit Approval(msg.sender,_spender,REF_116)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 561.sol-ElpisToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_234(bool) = msg.sender == owner
TMP_235(None) = SOLIDITY_CALL require(bool)(TMP_234)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-ElpisToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 561.sol-ElpisToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Elpis AI Trading Token

IRs:
name(string) := Elpis AI Trading Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ELP

IRs:
symbol(string) := ELP(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 561.sol-ElpisToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 561.sol-ElpisToken-totalSupply()
digraph{
}
// Function: 561.sol-ElpisToken-transfer(address,uint256)
digraph{
}
// Function: 561.sol-ElpisToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 561.sol-ElpisToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_127 = CONVERT 0 to address
TMP_128(bool) = _newOwner != TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 561.sol-ElpisToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 561.sol-ElpisToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! paused,Contract is paused.)

IRs:
TMP_231 = UnaryType.BANG paused 
TMP_232(None) = SOLIDITY_CALL require(bool,string)(TMP_231,Contract is paused.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-ElpisToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_233(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 561.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 561.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 561.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 561.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 561.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = _newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 561.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 561.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! paused,Contract is paused.)

IRs:
TMP_20 = UnaryType.BANG paused 
TMP_21(None) = SOLIDITY_CALL require(bool,string)(TMP_20,Contract is paused.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_22(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-PausableToken-allowance(address,address)
digraph{
}
// Function: 561.sol-PausableToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(_spender,_value)

IRs:
TMP_100(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(_spender,_value)
RETURN TMP_100"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 561.sol-PausableToken-balanceOf(address)
digraph{
}
// Function: 561.sol-PausableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 561.sol-PausableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.decreaseApproval(_spender,_subtractedValue)

IRs:
TMP_104(bool) = INTERNAL_CALL, StandardToken.decreaseApproval(address,uint256)(_spender,_subtractedValue)
RETURN TMP_104"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 561.sol-PausableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.increaseApproval(_spender,_addedValue)

IRs:
TMP_102(bool) = INTERNAL_CALL, StandardToken.increaseApproval(address,uint256)(_spender,_addedValue)
RETURN TMP_102"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 561.sol-PausableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_109(bool) = msg.sender == owner
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-PausableToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 561.sol-PausableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 561.sol-PausableToken-totalSupply()
digraph{
}
// Function: 561.sol-PausableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_96(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(_to,_value)
RETURN TMP_96"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 561.sol-PausableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_98(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_98"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 561.sol-PausableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_66 = CONVERT 0 to address
TMP_67(bool) = _newOwner != TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 561.sol-PausableToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 561.sol-PausableToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! paused,Contract is paused.)

IRs:
TMP_106 = UnaryType.BANG paused 
TMP_107(None) = SOLIDITY_CALL require(bool,string)(TMP_106,Contract is paused.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-PausableToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_108(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 561.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_32(uint256) = _a + _b
c(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_33(bool) = c >= _a
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 561.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_28(uint256) = _a / _b
RETURN TMP_28"];
}
// Function: 561.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_23(bool) = _a == 0
CONDITION TMP_23"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_24(uint256) = _a * _b
c(uint256) := TMP_24(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_25(uint256) = c / _a
TMP_26(bool) = TMP_25 == _b
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 561.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_29(bool) = _b <= _a
TMP_30(None) = SOLIDITY_CALL assert(bool)(TMP_29)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_31(uint256) = _a - _b
RETURN TMP_31"];
}
// Function: 561.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
}
// Function: 561.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[_spender]
REF_11(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 561.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 561.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
oldValue(uint256) := REF_34(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_57(bool) = _subtractedValue >= oldValue
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[_spender]
REF_36(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_37(mapping(address => uint256)) -> allowed[msg.sender]
REF_38(uint256) -> REF_37[_spender]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_38(uint256) (->allowed) := TMP_58(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
Emit Approval(msg.sender,_spender,REF_41)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 561.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_29', '_addedValue'] 
REF_27(uint256) (->allowed) := TMP_55(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
Emit Approval(msg.sender,_spender,REF_32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 561.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 561.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_35(bool) = _value <= REF_3
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_37 = CONVERT 0 to address
TMP_38(bool) = _to != TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_40(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_41(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 561.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_12(uint256) -> balances[_from]
TMP_44(bool) = _value <= REF_12
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_46(bool) = _value <= REF_14
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _to != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_15(uint256) -> balances[_from]
REF_16(uint256) -> balances[_from]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_16', '_value'] 
REF_15(uint256) (->balances) := TMP_51(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_18(uint256) -> balances[_to]
REF_19(uint256) -> balances[_to]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_19', '_value'] 
REF_18(uint256) (->balances) := TMP_52(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_value'] 
REF_22(uint256) (->allowed) := TMP_53(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
