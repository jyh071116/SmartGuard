digraph G {
// Function: 562.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 562.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 562.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 562.sol-ERC20-totalSupply()
digraph{
}
// Function: 562.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 562.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 562.sol-ElpisCrowdsale-_getTokenAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
phase = getPhase()

IRs:
TMP_161(uint256) = INTERNAL_CALL, ElpisCrowdsale.getPhase()()
phase(uint256) := TMP_161(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
initialPriceNumerator = 110

IRs:
initialPriceNumerator(uint256) := 110(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
initialPriceDenominator = 1000

IRs:
initialPriceDenominator(uint256) := 1000(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
scaleNumerator = 104 ** phase

IRs:
TMP_162(uint256) = 104 ** phase
scaleNumerator(uint256) := TMP_162(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
scaleDenominator = 100 ** phase

IRs:
TMP_163(uint256) = 100 ** phase
scaleDenominator(uint256) := TMP_163(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_usdAmount.mul(initialPriceNumerator).mul(scaleNumerator).div(initialPriceDenominator).div(scaleDenominator)

IRs:
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_usdAmount', 'initialPriceNumerator'] 
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_164', 'scaleNumerator'] 
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_165', 'initialPriceDenominator'] 
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_166', 'scaleDenominator'] 
RETURN TMP_167"];
}
// Function: 562.sol-ElpisCrowdsale-_getUsdAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_weiAmount.mul(rate)

IRs:
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_weiAmount', 'rate'] 
RETURN TMP_168"];
}
// Function: 562.sol-ElpisCrowdsale-addToWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_62 = CONVERT 0 to address
TMP_63(bool) = _address != TMP_62
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WhitelistAdd(whitelister,_address)

IRs:
Emit WhitelistAdd(whitelister,_address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelist[_address] = true

IRs:
REF_3(bool) -> whitelist[_address]
REF_3(bool) (->whitelist) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWhitelister()

IRs:
MODIFIER_CALL, Whitelist.onlyWhitelister()()"];
4->1;
}
// Function: 562.sol-ElpisCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_112 = CONVERT 0 to address
TMP_113(bool) = _beneficiary != TMP_112
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(weiAmount != 0)

IRs:
TMP_115(bool) = weiAmount != 0
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_117(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(weiRaised <= cap)

IRs:
TMP_118(bool) = weiRaised <= cap
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
dollars = _getUsdAmount(weiAmount)

IRs:
TMP_120(uint256) = INTERNAL_CALL, ElpisCrowdsale._getUsdAmount(uint256)(weiAmount)
dollars(uint256) := TMP_120(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokens = _getTokenAmount(dollars)

IRs:
TMP_121(uint256) = INTERNAL_CALL, ElpisCrowdsale._getTokenAmount(uint256)(dollars)
tokens(uint256) := TMP_121(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
previousEthBalance = ethBalances[_beneficiary]

IRs:
REF_7(uint256) -> ethBalances[_beneficiary]
previousEthBalance(uint256) := REF_7(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ethBalances[_beneficiary] = ethBalances[_beneficiary].add(weiAmount)

IRs:
REF_8(uint256) -> ethBalances[_beneficiary]
REF_9(uint256) -> ethBalances[_beneficiary]
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', 'weiAmount'] 
REF_8(uint256) (->ethBalances) := TMP_122(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
elpBalances[_beneficiary] = elpBalances[_beneficiary].add(tokens)

IRs:
REF_11(uint256) -> elpBalances[_beneficiary]
REF_12(uint256) -> elpBalances[_beneficiary]
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', 'tokens'] 
REF_11(uint256) (->elpBalances) := TMP_123(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokensSold = tokensSold.add(tokens)

IRs:
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensSold', 'tokens'] 
tokensSold(uint256) := TMP_124(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
usdRaised = usdRaised.add(dollars)

IRs:
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['usdRaised', 'dollars'] 
usdRaised(uint256) := TMP_125(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
ethBalances[_beneficiary] > threshold

IRs:
REF_16(uint256) -> ethBalances[_beneficiary]
TMP_126(bool) = REF_16 > threshold
CONDITION TMP_126"];
13->14[label="True"];
13->19[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whitelist[_beneficiary] = false

IRs:
REF_17(bool) -> whitelist[_beneficiary]
REF_17(bool) (->whitelist) := False(bool)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
previousEthBalance < threshold

IRs:
TMP_127(bool) = previousEthBalance < threshold
CONDITION TMP_127"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
wallet.transfer(threshold - previousEthBalance)

IRs:
TMP_128(uint256) = threshold - previousEthBalance
Transfer dest:wallet value:TMP_128"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
NeedKyc(_beneficiary,weiAmount,ethBalances[_beneficiary])

IRs:
REF_19(uint256) -> ethBalances[_beneficiary]
Emit NeedKyc(_beneficiary,weiAmount,REF_19)"];
18->22;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
whitelist[_beneficiary] = true

IRs:
REF_20(bool) -> whitelist[_beneficiary]
REF_20(bool) (->whitelist) := True(bool)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
wallet.transfer(weiAmount)

IRs:
Transfer dest:wallet value:weiAmount"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Contribution(_beneficiary,weiAmount,ethBalances[_beneficiary])

IRs:
REF_22(uint256) -> ethBalances[_beneficiary]
Emit Contribution(_beneficiary,weiAmount,REF_22)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
whenNotStopped()

IRs:
MODIFIER_CALL, Stoppable.whenNotStopped()()"];
24->1;
}
// Function: 562.sol-ElpisCrowdsale-changeWhitelister(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newWhitelister != address(0))

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _newWhitelister != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WhitelisterChanged(whitelister,_newWhitelister)

IRs:
Emit WhitelisterChanged(whitelister,_newWhitelister)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelister = _newWhitelister

IRs:
whitelister(address) := _newWhitelister(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWhitelister()

IRs:
MODIFIER_CALL, Whitelist.onlyWhitelister()()"];
4->1;
}
// Function: 562.sol-ElpisCrowdsale-claimTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != address(token))

IRs:
TMP_147 = CONVERT token to address
TMP_148(bool) = _token != TMP_147
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_token == address(0)

IRs:
TMP_150 = CONVERT 0 to address
TMP_151(bool) = _token == TMP_150
CONDITION TMP_151"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_152 = CONVERT this to address
TMP_153(uint256) = SOLIDITY_CALL balance(address)(TMP_152)
Transfer dest:owner value:TMP_153"];
3->4;
4[label="Node Type: RETURN 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tokenReference = ERC20(_token)

IRs:
TMP_155 = CONVERT _token to ERC20
tokenReference(ERC20) := TMP_155(ERC20)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
balance = tokenReference.balanceOf(address(this))

IRs:
TMP_156 = CONVERT this to address
TMP_157(uint256) = HIGH_LEVEL_CALL, dest:tokenReference(ERC20), function:balanceOf, arguments:['TMP_156']  
balance(uint256) := TMP_157(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_158(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'balance']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ClaimedTokens(_token,owner,balance)

IRs:
Emit ClaimedTokens(_token,owner,balance)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 562.sol-ElpisCrowdsale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 562.sol-ElpisCrowdsale-constructor(uint256,uint256,uint256,ERC20,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_95(bool) = _rate > 0
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_threshold > 0)

IRs:
TMP_97(bool) = _threshold > 0
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_cap > 0)

IRs:
TMP_99(bool) = _cap > 0
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_token != address(0))

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = _token != TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_104 = CONVERT 0 to address
TMP_105(bool) = _wallet != TMP_104
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
threshold = _threshold

IRs:
threshold(uint256) := _threshold(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
token = _token

IRs:
token(ERC20) := _token(ERC20)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
deploymentBlock = block.number

IRs:
deploymentBlock(uint256) := block.number(uint256)"];
}
// Function: 562.sol-ElpisCrowdsale-disableWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawalEnabled = false

IRs:
withdrawalEnabled(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WithdrawalDisabled(owner)

IRs:
Emit WithdrawalDisabled(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenWithdrawalEnabled()

IRs:
MODIFIER_CALL, Stoppable.whenWithdrawalEnabled()()"];
4->1;
}
// Function: 562.sol-ElpisCrowdsale-enableWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawalEnabled = true

IRs:
withdrawalEnabled(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WithdrawalEnabled(owner)

IRs:
Emit WithdrawalEnabled(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenStopped()

IRs:
MODIFIER_CALL, Stoppable.whenStopped()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenWithdrawalDisabled()

IRs:
MODIFIER_CALL, Stoppable.whenWithdrawalDisabled()()"];
5->1;
}
// Function: 562.sol-ElpisCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, ElpisCrowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 562.sol-ElpisCrowdsale-getPhase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokensSold / AMOUNT_PER_PHASE

IRs:
TMP_169(uint256) = tokensSold / AMOUNT_PER_PHASE
RETURN TMP_169"];
}
// Function: 562.sol-ElpisCrowdsale-isWhitelisted(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
whitelist[_address]

IRs:
REF_5(bool) -> whitelist[_address]
RETURN REF_5"];
}
// Function: 562.sol-ElpisCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_178(bool) = msg.sender == owner
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-ElpisCrowdsale-onlyWhitelister()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == whitelister)

IRs:
TMP_170(bool) = msg.sender == whitelister
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-ElpisCrowdsale-removeFromWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_67 = CONVERT 0 to address
TMP_68(bool) = _address != TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WhitelistRemove(whitelister,_address)

IRs:
Emit WhitelistRemove(whitelister,_address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelist[_address] = false

IRs:
REF_4(bool) -> whitelist[_address]
REF_4(bool) (->whitelist) := False(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWhitelister()

IRs:
MODIFIER_CALL, Whitelist.onlyWhitelister()()"];
4->1;
}
// Function: 562.sol-ElpisCrowdsale-restart()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdrawalEnabled = false

IRs:
withdrawalEnabled(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Restarted(owner)

IRs:
Emit Restarted(owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenStopped()

IRs:
MODIFIER_CALL, Stoppable.whenStopped()()"];
5->1;
}
// Function: 562.sol-ElpisCrowdsale-setRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
RateChanged(owner,rate,_rate)

IRs:
Emit RateChanged(owner,rate,_rate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 562.sol-ElpisCrowdsale-setThreshold(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ThresholdChanged(owner,threshold,_threshold)

IRs:
Emit ThresholdChanged(owner,threshold,_threshold)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
threshold = _threshold

IRs:
threshold(uint256) := _threshold(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 562.sol-ElpisCrowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
AMOUNT_PER_PHASE = 14500000000000000000000000

IRs:
AMOUNT_PER_PHASE(uint256) := 14500000000000000000000000(uint256)"];
}
// Function: 562.sol-ElpisCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
withdrawalEnabled = false

IRs:
withdrawalEnabled(bool) := False(bool)"];
}
// Function: 562.sol-ElpisCrowdsale-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Stopped(owner)

IRs:
Emit Stopped(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotStopped()

IRs:
MODIFIER_CALL, Stoppable.whenNotStopped()()"];
4->1;
}
// Function: 562.sol-ElpisCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_90 = CONVERT 0 to address
TMP_91(bool) = _newOwner != TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 562.sol-ElpisCrowdsale-whenNotStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stopped)

IRs:
TMP_173 = UnaryType.BANG stopped 
TMP_174(None) = SOLIDITY_CALL require(bool)(TMP_173)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-ElpisCrowdsale-whenStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stopped)

IRs:
TMP_172(None) = SOLIDITY_CALL require(bool)(stopped)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-ElpisCrowdsale-whenWithdrawalDisabled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! withdrawalEnabled)

IRs:
TMP_176 = UnaryType.BANG withdrawalEnabled 
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-ElpisCrowdsale-whenWithdrawalEnabled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(withdrawalEnabled)

IRs:
TMP_175(None) = SOLIDITY_CALL require(bool)(withdrawalEnabled)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-ElpisCrowdsale-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ethBalance = ethBalances[msg.sender]

IRs:
REF_23(uint256) -> ethBalances[msg.sender]
ethBalance(uint256) := REF_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ethBalance > 0)

IRs:
TMP_135(bool) = ethBalance > 0
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elpBalance = elpBalances[msg.sender]

IRs:
REF_24(uint256) -> elpBalances[msg.sender]
elpBalance(uint256) := REF_24(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
elpBalances[msg.sender] = 0

IRs:
REF_25(uint256) -> elpBalances[msg.sender]
REF_25(uint256) (->elpBalances) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ethBalances[msg.sender] = 0

IRs:
REF_26(uint256) -> ethBalances[msg.sender]
REF_26(uint256) (->ethBalances) := 0(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
isWhitelisted(msg.sender)

IRs:
TMP_137(bool) = INTERNAL_CALL, Whitelist.isWhitelisted(address)(msg.sender)
CONDITION TMP_137"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(msg.sender,elpBalance)

IRs:
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['msg.sender', 'elpBalance']  "];
7->12;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token.transfer(msg.sender,elpBalance.mul(threshold).div(ethBalance))

IRs:
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['elpBalance', 'threshold'] 
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_139', 'ethBalance'] 
TMP_141(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['msg.sender', 'TMP_140']  "];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
ethBalance > threshold

IRs:
TMP_142(bool) = ethBalance > threshold
CONDITION TMP_142"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
msg.sender.transfer(ethBalance - threshold)

IRs:
TMP_143(uint256) = ethBalance - threshold
Transfer dest:msg.sender value:TMP_143"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Withdrawal(msg.sender,ethBalance,elpBalance)

IRs:
Emit Withdrawal(msg.sender,ethBalance,elpBalance)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenWithdrawalEnabled()

IRs:
MODIFIER_CALL, Stoppable.whenWithdrawalEnabled()()"];
14->1;
}
// Function: 562.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 562.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 562.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_16(uint256) = _a + _b
c(uint256) := TMP_16(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_17(bool) = c >= _a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 562.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_12(uint256) = _a / _b
RETURN TMP_12"];
}
// Function: 562.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_7(bool) = _a == 0
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_8(uint256) = _a * _b
c(uint256) := TMP_8(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_9(uint256) = c / _a
TMP_10(bool) = TMP_9 == _b
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 562.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_13(bool) = _b <= _a
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_15(uint256) = _a - _b
RETURN TMP_15"];
}
// Function: 562.sol-Stoppable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 562.sol-Stoppable-disableWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawalEnabled = false

IRs:
withdrawalEnabled(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WithdrawalDisabled(owner)

IRs:
Emit WithdrawalDisabled(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenWithdrawalEnabled()

IRs:
MODIFIER_CALL, Stoppable.whenWithdrawalEnabled()()"];
4->1;
}
// Function: 562.sol-Stoppable-enableWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawalEnabled = true

IRs:
withdrawalEnabled(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WithdrawalEnabled(owner)

IRs:
Emit WithdrawalEnabled(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenStopped()

IRs:
MODIFIER_CALL, Stoppable.whenStopped()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenWithdrawalDisabled()

IRs:
MODIFIER_CALL, Stoppable.whenWithdrawalDisabled()()"];
5->1;
}
// Function: 562.sol-Stoppable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_37(bool) = msg.sender == owner
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-Stoppable-restart()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdrawalEnabled = false

IRs:
withdrawalEnabled(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Restarted(owner)

IRs:
Emit Restarted(owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenStopped()

IRs:
MODIFIER_CALL, Stoppable.whenStopped()()"];
5->1;
}
// Function: 562.sol-Stoppable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
withdrawalEnabled = false

IRs:
withdrawalEnabled(bool) := False(bool)"];
}
// Function: 562.sol-Stoppable-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Stopped(owner)

IRs:
Emit Stopped(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotStopped()

IRs:
MODIFIER_CALL, Stoppable.whenNotStopped()()"];
4->1;
}
// Function: 562.sol-Stoppable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 562.sol-Stoppable-whenNotStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stopped)

IRs:
TMP_40 = UnaryType.BANG stopped 
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-Stoppable-whenStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stopped)

IRs:
TMP_39(None) = SOLIDITY_CALL require(bool)(stopped)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-Stoppable-whenWithdrawalDisabled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! withdrawalEnabled)

IRs:
TMP_43 = UnaryType.BANG withdrawalEnabled 
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-Stoppable-whenWithdrawalEnabled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(withdrawalEnabled)

IRs:
TMP_42(None) = SOLIDITY_CALL require(bool)(withdrawalEnabled)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-Whitelist-addToWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = _address != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WhitelistAdd(whitelister,_address)

IRs:
Emit WhitelistAdd(whitelister,_address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelist[_address] = true

IRs:
REF_0(bool) -> whitelist[_address]
REF_0(bool) (->whitelist) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWhitelister()

IRs:
MODIFIER_CALL, Whitelist.onlyWhitelister()()"];
4->1;
}
// Function: 562.sol-Whitelist-changeWhitelister(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newWhitelister != address(0))

IRs:
TMP_55 = CONVERT 0 to address
TMP_56(bool) = _newWhitelister != TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WhitelisterChanged(whitelister,_newWhitelister)

IRs:
Emit WhitelisterChanged(whitelister,_newWhitelister)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelister = _newWhitelister

IRs:
whitelister(address) := _newWhitelister(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWhitelister()

IRs:
MODIFIER_CALL, Whitelist.onlyWhitelister()()"];
4->1;
}
// Function: 562.sol-Whitelist-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
whitelister = msg.sender

IRs:
whitelister(address) := msg.sender(address)"];
}
// Function: 562.sol-Whitelist-isWhitelisted(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
whitelist[_address]

IRs:
REF_2(bool) -> whitelist[_address]
RETURN REF_2"];
}
// Function: 562.sol-Whitelist-onlyWhitelister()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == whitelister)

IRs:
TMP_60(bool) = msg.sender == whitelister
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 562.sol-Whitelist-removeFromWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_50 = CONVERT 0 to address
TMP_51(bool) = _address != TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WhitelistRemove(whitelister,_address)

IRs:
Emit WhitelistRemove(whitelister,_address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelist[_address] = false

IRs:
REF_1(bool) -> whitelist[_address]
REF_1(bool) (->whitelist) := False(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWhitelister()

IRs:
MODIFIER_CALL, Whitelist.onlyWhitelister()()"];
4->1;
}
}
