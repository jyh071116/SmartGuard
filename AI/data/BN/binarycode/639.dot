digraph G {
// Function: 639.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 639.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 639.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 639.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 639.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 639.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 639.sol-EthorseHelpers-_addHorse(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
all_horses.push(newHorse)

IRs:
REF_44 -> LENGTH all_horses
TMP_149(uint256) := REF_44(uint256)
TMP_150(uint256) = TMP_149 + 1
REF_44(uint256) (->all_horses) := TMP_150(uint256)
REF_45(bytes32) -> all_horses[TMP_149]
REF_45(bytes32) (->all_horses) := newHorse(bytes32)"];
}
// Function: 639.sol-EthorseHelpers-_addLegitOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_legitOwners[newOwner] = true

IRs:
REF_46(bool) -> _legitOwners[newOwner]
REF_46(bool) (->_legitOwners) := True(bool)"];
}
// Function: 639.sol-EthorseHelpers-_isWinnerOf(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
race = EthorseRace(raceAddress)

IRs:
TMP_151 = CONVERT raceAddress to EthorseRace
race(EthorseRace) := TMP_151(EthorseRace)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
bc = BettingControllerInterface(race.owner())

IRs:
TMP_152(address) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:owner, arguments:[]  
TMP_153 = CONVERT TMP_152 to BettingControllerInterface
bc(BettingControllerInterface) := TMP_153(BettingControllerInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_legitOwners[bc.owner()])

IRs:
TMP_154(address) = HIGH_LEVEL_CALL, dest:bc(BettingControllerInterface), function:owner, arguments:[]  
REF_50(bool) -> _legitOwners[TMP_154]
TMP_155(None) = SOLIDITY_CALL require(bool)(REF_50)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(None,None,race_end,voided_bet,None,None,None,None) = race.chronus()

IRs:
TUPLE_0(bool,bool,bool,bool,uint32,uint32,uint32,uint32) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:chronus, arguments:[]  
race_end(bool)= UNPACK TUPLE_0 index: 2 
voided_bet(bool)= UNPACK TUPLE_0 index: 3 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
voided_bet || ! race_end

IRs:
TMP_156 = UnaryType.BANG race_end 
TMP_157(bool) = voided_bet || TMP_156
CONDITION TMP_157"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
(false,bytes32(0))

IRs:
TMP_158 = CONVERT 0 to bytes32
RETURN False,TMP_158"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
found = false

IRs:
found(bool) := False(bool)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
arrayLength = all_horses.length

IRs:
REF_52 -> LENGTH all_horses
arrayLength(uint256) := REF_52(uint256)"];
12->15;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->23;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < arrayLength

IRs:
TMP_159(bool) = i < arrayLength
CONDITION TMP_159"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: IF 17

EXPRESSION:
race.winner_horse(all_horses[i])

IRs:
REF_54(bytes32) -> all_horses[i]
TMP_160(bool) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:winner_horse, arguments:['REF_54']  
CONDITION TMP_160"];
17->18[label="True"];
17->21[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
horse = all_horses[i]

IRs:
REF_55(bytes32) -> all_horses[i]
horse(bytes32) := REF_55(bytes32)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
found = true

IRs:
found(bool) := True(bool)"];
19->20;
20[label="Node Type: BREAK 20
"];
20->14;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_161(uint256) := i(uint256)
i(uint256) = i + 1"];
22->16;
23[label="Node Type: IF 23

EXPRESSION:
! found

IRs:
TMP_162 = UnaryType.BANG found 
CONDITION TMP_162"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: RETURN 24

EXPRESSION:
(false,bytes32(0))

IRs:
TMP_163 = CONVERT 0 to bytes32
RETURN False,TMP_163"];
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
bet_amount = 0

IRs:
bet_amount(uint256) := 0(uint256)"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
eth_address != address(0)

IRs:
TMP_164 = CONVERT 0 to address
TMP_165(bool) = eth_address != TMP_164
CONDITION TMP_165"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
(None,None,None,None,bet_amount) = race.getCoinIndex(horse,eth_address)

IRs:
TUPLE_1(uint256,uint256,uint256,bool,uint256) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:getCoinIndex, arguments:['horse', 'eth_address']  
bet_amount(uint256)= UNPACK TUPLE_1 index: 4 "];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
(bet_amount > 0,horse)

IRs:
TMP_166(bool) = bet_amount > 0
RETURN TMP_166,horse"];
}
// Function: 639.sol-EthorseHelpers-getall_horsesCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
all_horses.length

IRs:
REF_47 -> LENGTH all_horses
RETURN REF_47"];
}
// Function: 639.sol-EthorseHelpers-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
all_horses = (bytes32(BTC),bytes32(ETH),bytes32(LTC))

IRs:
TMP_167 = CONVERT BTC to bytes32
TMP_168 = CONVERT ETH to bytes32
TMP_169 = CONVERT LTC to bytes32
all_horses(bytes32[]) = ['TMP_167(bytes32)', 'TMP_168(bytes32)', 'TMP_169(bytes32)']"];
}
// Function: 639.sol-EthorseRace-getCoinIndex(bytes32,address)
digraph{
}
// Function: 639.sol-HorseyExchange-_indexOf(uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < array.length

IRs:
REF_35 -> LENGTH array
TMP_122(bool) = i < REF_35
CONDITION TMP_122"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
array[i] == item

IRs:
REF_36(uint256) -> array[i]
TMP_123(bool) = REF_36 == item
CONDITION TMP_123"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
int256(i)

IRs:
TMP_124 = CONVERT i to int256
RETURN TMP_124"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_125(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
- 1

IRs:
TMP_126(uint256) = 0 - 1
RETURN TMP_126"];
}
// Function: 639.sol-HorseyExchange-_removeTokenFromBarn(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
barnArray = userBarn[barnAddress]

IRs:
REF_29(uint256[]) -> userBarn[barnAddress]
barnArray(uint256[]) = ['REF_29(uint256[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(barnArray.length > 0,No tokens to remove)

IRs:
REF_30 -> LENGTH barnArray
TMP_111(bool) = REF_30 > 0
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,No tokens to remove)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
index = _indexOf(tokenId,barnArray)

IRs:
TMP_113(int256) = INTERNAL_CALL, HorseyExchange._indexOf(uint256,uint256[])(tokenId,barnArray)
index(int256) := TMP_113(int256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(index >= 0,Token not found in barn)

IRs:
TMP_114(bool) = index >= 0
TMP_115(None) = SOLIDITY_CALL require(bool,string)(TMP_114,Token not found in barn)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = uint256(index)

IRs:
TMP_116 = CONVERT index to uint256
i(uint256) := TMP_116(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < barnArray.length - 1

IRs:
REF_31 -> LENGTH barnArray
TMP_117(uint256) = REF_31 - 1
TMP_118(bool) = i < TMP_117
CONDITION TMP_118"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
barnArray[i] = barnArray[i + 1]

IRs:
REF_32(uint256) -> barnArray[i]
TMP_119(uint256) = i + 1
REF_33(uint256) -> barnArray[TMP_119]
REF_32(uint256) (->barnArray) := REF_33(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_120(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
barnArray.length --

IRs:
REF_34 -> LENGTH barnArray
TMP_121(uint256) := REF_34(uint256)
REF_34(-> barnArray) = REF_34 - 1"];
}
// Function: 639.sol-HorseyExchange-cancelSale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.transferFrom(address(this),msg.sender,tokenId)

IRs:
TMP_81 = CONVERT this to address
HIGH_LEVEL_CALL, dest:token(ERC721Basic), function:transferFrom, arguments:['TMP_81', 'msg.sender', 'tokenId']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete market[tokenId]

IRs:
REF_15(HorseyExchange.SaleData) -> market[tokenId]
market = delete REF_15 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_removeTokenFromBarn(tokenId,msg.sender)

IRs:
INTERNAL_CALL, HorseyExchange._removeTokenFromBarn(uint256,address)(tokenId,msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SaleCanceled(tokenId)

IRs:
Emit SaleCanceled(tokenId)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
userBarn[msg.sender].length > 0

IRs:
REF_16(uint256[]) -> userBarn[msg.sender]
REF_17 -> LENGTH REF_16
TMP_85(bool) = REF_17 > 0
RETURN TMP_85"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
originalOwnerOf(tokenId)

IRs:
MODIFIER_CALL, HorseyExchange.originalOwnerOf(uint256)(tokenId)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenAvailable()

IRs:
MODIFIER_CALL, HorseyExchange.tokenAvailable()()"];
8->1;
}
// Function: 639.sol-HorseyExchange-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Pausable()

IRs:
INTERNAL_CALL, Ownable.constructor()()"];
}
// Function: 639.sol-HorseyExchange-depositToExchange(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(token.getApproved(tokenId) == address(this),Exchange is not allowed to transfer)

IRs:
TMP_66(address) = HIGH_LEVEL_CALL, dest:token(ERC721Basic), function:getApproved, arguments:['tokenId']  
TMP_67 = CONVERT this to address
TMP_68(bool) = TMP_66 == TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Exchange is not allowed to transfer)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.transferFrom(msg.sender,address(this),tokenId)

IRs:
TMP_70 = CONVERT this to address
HIGH_LEVEL_CALL, dest:token(ERC721Basic), function:transferFrom, arguments:['msg.sender', 'TMP_70', 'tokenId']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
market[tokenId] = SaleData(price,msg.sender)

IRs:
REF_9(HorseyExchange.SaleData) -> market[tokenId]
TMP_72(HorseyExchange.SaleData) = new SaleData(price,msg.sender)
REF_9(HorseyExchange.SaleData) (->market) := TMP_72(HorseyExchange.SaleData)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
userBarn[msg.sender].push(tokenId)

IRs:
REF_10(uint256[]) -> userBarn[msg.sender]
REF_12 -> LENGTH REF_10
TMP_74(uint256) := REF_12(uint256)
TMP_75(uint256) = TMP_74 + 1
REF_12(uint256) (->userBarn) := TMP_75(uint256)
REF_13(uint256) -> REF_10[TMP_74]
REF_13(uint256) (->userBarn) := tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
HorseyDeposit(tokenId,price)

IRs:
Emit HorseyDeposit(tokenId,price)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isTokenOwner(tokenId)

IRs:
MODIFIER_CALL, HorseyExchange.isTokenOwner(uint256)(tokenId)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonZeroPrice(price)

IRs:
MODIFIER_CALL, HorseyExchange.nonZeroPrice(uint256)(price)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenAvailable()

IRs:
MODIFIER_CALL, HorseyExchange.tokenAvailable()()"];
9->1;
}
// Function: 639.sol-HorseyExchange-getTokenPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
market[tokenId].price + (market[tokenId].price.div(100).mul(marketMakerFee))

IRs:
REF_1(HorseyExchange.SaleData) -> market[tokenId]
REF_2(uint256) -> REF_1.price
REF_3(HorseyExchange.SaleData) -> market[tokenId]
REF_4(uint256) -> REF_3.price
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_4', '100'] 
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_62', 'marketMakerFee'] 
TMP_64(uint256) = REF_2 + TMP_63
RETURN TMP_64"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOnMarket(tokenId)

IRs:
MODIFIER_CALL, HorseyExchange.isOnMarket(uint256)(tokenId)"];
2->1;
}
// Function: 639.sol-HorseyExchange-getTokensOnSale(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
userBarn[user]

IRs:
REF_0(uint256[]) -> userBarn[user]
RETURN REF_0"];
}
// Function: 639.sol-HorseyExchange-isOnMarket(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(token.ownerOf(tokenId) == address(this),Token not on market)

IRs:
TMP_132(address) = HIGH_LEVEL_CALL, dest:token(ERC721Basic), function:ownerOf, arguments:['tokenId']  
TMP_133 = CONVERT this to address
TMP_134(bool) = TMP_132 == TMP_133
TMP_135(None) = SOLIDITY_CALL require(bool,string)(TMP_134,Token not on market)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-isTokenOwner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(token.ownerOf(tokenId) == msg.sender,Not tokens owner)

IRs:
TMP_136(address) = HIGH_LEVEL_CALL, dest:token(ERC721Basic), function:ownerOf, arguments:['tokenId']  
TMP_137(bool) = TMP_136 == msg.sender
TMP_138(None) = SOLIDITY_CALL require(bool,string)(TMP_137,Not tokens owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-nonZeroPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(price > 0,Price is zero)

IRs:
TMP_143(bool) = price > 0
TMP_144(None) = SOLIDITY_CALL require(bool,string)(TMP_143,Price is zero)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-notOriginalOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(market[tokenId].owner != msg.sender,Is the original owner)

IRs:
REF_41(HorseyExchange.SaleData) -> market[tokenId]
REF_42(address) -> REF_41.owner
TMP_141(bool) = REF_42 != msg.sender
TMP_142(None) = SOLIDITY_CALL require(bool,string)(TMP_141,Is the original owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_130(bool) = msg.sender == owner
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-originalOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(market[tokenId].owner == msg.sender,Not the original owner of)

IRs:
REF_39(HorseyExchange.SaleData) -> market[tokenId]
REF_40(address) -> REF_39.owner
TMP_139(bool) = REF_40 == msg.sender
TMP_140(None) = SOLIDITY_CALL require(bool,string)(TMP_139,Not the original owner of)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 639.sol-HorseyExchange-purchaseToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
totalToPay = getTokenPrice(tokenId)

IRs:
TMP_89(uint256) = INTERNAL_CALL, HorseyExchange.getTokenPrice(uint256)(tokenId)
totalToPay(uint256) := TMP_89(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(msg.value >= totalToPay,Not paying enough)

IRs:
TMP_90(bool) = msg.value >= totalToPay
TMP_91(None) = SOLIDITY_CALL require(bool,string)(TMP_90,Not paying enough)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
sale = market[tokenId]

IRs:
REF_18(HorseyExchange.SaleData) -> market[tokenId]
sale(HorseyExchange.SaleData) := REF_18(HorseyExchange.SaleData)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
collectedFees += totalToPay - sale.price

IRs:
REF_19(uint256) -> sale.price
TMP_92(uint256) = totalToPay - REF_19
collectedFees(uint256) = collectedFees + TMP_92"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
sale.owner.transfer(sale.price)

IRs:
REF_20(address) -> sale.owner
REF_22(uint256) -> sale.price
Transfer dest:REF_20 value:REF_22"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_removeTokenFromBarn(tokenId,sale.owner)

IRs:
REF_23(address) -> sale.owner
INTERNAL_CALL, HorseyExchange._removeTokenFromBarn(uint256,address)(tokenId,REF_23)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete market[tokenId]

IRs:
REF_24(HorseyExchange.SaleData) -> market[tokenId]
market = delete REF_24 "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token.transferFrom(address(this),msg.sender,tokenId)

IRs:
TMP_95 = CONVERT this to address
HIGH_LEVEL_CALL, dest:token(ERC721Basic), function:transferFrom, arguments:['TMP_95', 'msg.sender', 'tokenId']  "];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
msg.value > totalToPay

IRs:
TMP_97(bool) = msg.value > totalToPay
CONDITION TMP_97"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
msg.sender.transfer(msg.value.sub(totalToPay))

IRs:
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['msg.value', 'totalToPay'] 
Transfer dest:msg.sender value:TMP_98"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
HorseyPurchased(tokenId,msg.sender,totalToPay)

IRs:
Emit HorseyPurchased(tokenId,msg.sender,totalToPay)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isOnMarket(tokenId)

IRs:
MODIFIER_CALL, HorseyExchange.isOnMarket(uint256)(tokenId)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokenAvailable()

IRs:
MODIFIER_CALL, HorseyExchange.tokenAvailable()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
notOriginalOwnerOf(tokenId)

IRs:
MODIFIER_CALL, HorseyExchange.notOriginalOwnerOf(uint256)(tokenId)"];
16->1;
}
// Function: 639.sol-HorseyExchange-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_53 = CONVERT 0 to address
owner(address) := TMP_53(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 639.sol-HorseyExchange-setMarketFees(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
marketMakerFee = fees

IRs:
marketMakerFee(uint256) := fees(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-HorseyExchange-setStables(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(_token) != 0,Address of token is zero)

IRs:
TMP_56 = CONVERT _token to address
TMP_57(bool) = TMP_56 != 0
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,Address of token is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = ERC721Basic(_token)

IRs:
TMP_59 = CONVERT _token to ERC721Basic
token(ERC721Basic) := TMP_59(ERC721Basic)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 639.sol-HorseyExchange-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
marketMakerFee = 3

IRs:
marketMakerFee(uint256) := 3(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
collectedFees = 0

IRs:
collectedFees(uint256) := 0(uint256)"];
}
// Function: 639.sol-HorseyExchange-tokenAvailable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(token) != 0,Token address not set)

IRs:
TMP_145 = CONVERT token to address
TMP_146(bool) = TMP_145 != 0
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,Token address not set)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = newOwner != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 639.sol-HorseyExchange-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 639.sol-HorseyExchange-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_127 = UnaryType.BANG paused 
TMP_128(None) = SOLIDITY_CALL require(bool)(TMP_127)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_129(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyExchange-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(collectedFees <= address(this).balance)

IRs:
TMP_105 = CONVERT this to address
TMP_106(uint256) = SOLIDITY_CALL balance(address)(TMP_105)
TMP_107(bool) = collectedFees <= TMP_106
TMP_108(None) = SOLIDITY_CALL assert(bool)(TMP_107)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(collectedFees)

IRs:
Transfer dest:owner value:collectedFees"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
collectedFees = 0

IRs:
collectedFees(uint256) := 0(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 639.sol-HorseyPilot-_doProposal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentProposal.methodId == 0

IRs:
REF_170(uint8) -> currentProposal.methodId
TMP_419(bool) = REF_170 == 0
CONDITION TMP_419"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
HorseyToken(tokenAddress).setRenamingCosts(currentProposal.parameter)

IRs:
TMP_420 = CONVERT tokenAddress to HorseyToken
REF_172(uint256) -> currentProposal.parameter
HIGH_LEVEL_CALL, dest:TMP_420(HorseyToken), function:setRenamingCosts, arguments:['REF_172']  "];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
currentProposal.methodId == 1

IRs:
REF_173(uint8) -> currentProposal.methodId
TMP_422(bool) = REF_173 == 1
CONDITION TMP_422"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
HorseyExchange(exchangeAddress).setMarketFees(currentProposal.parameter)

IRs:
TMP_423 = CONVERT exchangeAddress to HorseyExchange
REF_175(uint256) -> currentProposal.parameter
HIGH_LEVEL_CALL, dest:TMP_423(HorseyExchange), function:setMarketFees, arguments:['REF_175']  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
currentProposal.methodId == 2

IRs:
REF_176(uint8) -> currentProposal.methodId
TMP_425(bool) = REF_176 == 2
CONDITION TMP_425"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
HorseyToken(tokenAddress).addLegitDevAddress(address(currentProposal.parameter))

IRs:
TMP_426 = CONVERT tokenAddress to HorseyToken
REF_178(uint256) -> currentProposal.parameter
TMP_427 = CONVERT REF_178 to address
HIGH_LEVEL_CALL, dest:TMP_426(HorseyToken), function:addLegitDevAddress, arguments:['TMP_427']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
currentProposal.methodId == 3

IRs:
REF_179(uint8) -> currentProposal.methodId
TMP_429(bool) = REF_179 == 3
CONDITION TMP_429"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
HorseyToken(tokenAddress).addHorseIndex(bytes32(currentProposal.parameter))

IRs:
TMP_430 = CONVERT tokenAddress to HorseyToken
REF_181(uint256) -> currentProposal.parameter
TMP_431 = CONVERT REF_181 to bytes32
HIGH_LEVEL_CALL, dest:TMP_430(HorseyToken), function:addHorseIndex, arguments:['TMP_431']  "];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
currentProposal.methodId == 4

IRs:
REF_182(uint8) -> currentProposal.methodId
TMP_433(bool) = REF_182 == 4
CONDITION TMP_433"];
13->14[label="True"];
13->20[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
currentProposal.parameter == 0

IRs:
REF_183(uint256) -> currentProposal.parameter
TMP_434(bool) = REF_183 == 0
CONDITION TMP_434"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
HorseyExchange(exchangeAddress).unpause()

IRs:
TMP_435 = CONVERT exchangeAddress to HorseyExchange
HIGH_LEVEL_CALL, dest:TMP_435(HorseyExchange), function:unpause, arguments:[]  "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
HorseyToken(tokenAddress).unpause()

IRs:
TMP_437 = CONVERT tokenAddress to HorseyToken
HIGH_LEVEL_CALL, dest:TMP_437(HorseyToken), function:unpause, arguments:[]  "];
16->19;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
HorseyExchange(exchangeAddress).pause()

IRs:
TMP_439 = CONVERT exchangeAddress to HorseyExchange
HIGH_LEVEL_CALL, dest:TMP_439(HorseyExchange), function:pause, arguments:[]  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
HorseyToken(tokenAddress).pause()

IRs:
TMP_441 = CONVERT tokenAddress to HorseyToken
HIGH_LEVEL_CALL, dest:TMP_441(HorseyToken), function:pause, arguments:[]  "];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
currentProposal.methodId == 5

IRs:
REF_188(uint8) -> currentProposal.methodId
TMP_443(bool) = REF_188 == 5
CONDITION TMP_443"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
HorseyToken(tokenAddress).setClaimingCosts(currentProposal.parameter)

IRs:
TMP_444 = CONVERT tokenAddress to HorseyToken
REF_190(uint256) -> currentProposal.parameter
HIGH_LEVEL_CALL, dest:TMP_444(HorseyToken), function:setClaimingCosts, arguments:['REF_190']  "];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
currentProposal.methodId == 8

IRs:
REF_191(uint8) -> currentProposal.methodId
TMP_446(bool) = REF_191 == 8
CONDITION TMP_446"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
HorseyToken(tokenAddress).setCarrotsMultiplier(uint8(currentProposal.parameter))

IRs:
TMP_447 = CONVERT tokenAddress to HorseyToken
REF_193(uint256) -> currentProposal.parameter
TMP_448 = CONVERT REF_193 to uint8
HIGH_LEVEL_CALL, dest:TMP_447(HorseyToken), function:setCarrotsMultiplier, arguments:['TMP_448']  "];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
currentProposal.methodId == 9

IRs:
REF_194(uint8) -> currentProposal.methodId
TMP_450(bool) = REF_194 == 9
CONDITION TMP_450"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
HorseyToken(tokenAddress).setRarityMultiplier(uint8(currentProposal.parameter))

IRs:
TMP_451 = CONVERT tokenAddress to HorseyToken
REF_196(uint256) -> currentProposal.parameter
TMP_452 = CONVERT REF_196 to uint8
HIGH_LEVEL_CALL, dest:TMP_451(HorseyToken), function:setRarityMultiplier, arguments:['TMP_452']  "];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
ProposalPassed(currentProposal.methodId,currentProposal.parameter,currentProposal.proposer)

IRs:
REF_197(uint8) -> currentProposal.methodId
REF_198(uint256) -> currentProposal.parameter
REF_199(address) -> currentProposal.proposer
Emit ProposalPassed(REF_197,REF_198,REF_199)"];
}
// Function: 639.sol-HorseyPilot-_moveBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAddress != msg.sender)

IRs:
TMP_405(bool) = newAddress != msg.sender
TMP_406(None) = SOLIDITY_CALL require(bool)(TMP_405)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_cBalance[newAddress] = _cBalance[msg.sender]

IRs:
REF_152(uint256) -> _cBalance[newAddress]
REF_153(uint256) -> _cBalance[msg.sender]
REF_152(uint256) (->_cBalance) := REF_153(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_cBalance[msg.sender] = 0

IRs:
REF_154(uint256) -> _cBalance[msg.sender]
REF_154(uint256) (->_cBalance) := 0(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(newAddress)

IRs:
MODIFIER_CALL, HorseyPilot.validAddress(address)(newAddress)"];
4->1;
}
// Function: 639.sol-HorseyPilot-_updateDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(toBeDistributed != 0,nothing to distribute)

IRs:
TMP_408(bool) = toBeDistributed != 0
TMP_409(None) = SOLIDITY_CALL require(bool,string)(TMP_408,nothing to distribute)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
knightPayday = toBeDistributed.div(100).mul(knightEquity)

IRs:
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['toBeDistributed', '100'] 
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_410', 'knightEquity'] 
knightPayday(uint256) := TMP_411(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
paladinPayday = toBeDistributed.div(100).mul(paladinEquity)

IRs:
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['toBeDistributed', '100'] 
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_412', 'paladinEquity'] 
paladinPayday(uint256) := TMP_413(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
jokerPayday = toBeDistributed.sub(knightPayday).sub(paladinPayday)

IRs:
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['toBeDistributed', 'knightPayday'] 
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_414', 'paladinPayday'] 
jokerPayday(uint256) := TMP_415(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_cBalance[jokerAddress] = _cBalance[jokerAddress].add(jokerPayday)

IRs:
REF_161(uint256) -> _cBalance[jokerAddress]
REF_162(uint256) -> _cBalance[jokerAddress]
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_162', 'jokerPayday'] 
REF_161(uint256) (->_cBalance) := TMP_416(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_cBalance[knightAddress] = _cBalance[knightAddress].add(knightPayday)

IRs:
REF_164(uint256) -> _cBalance[knightAddress]
REF_165(uint256) -> _cBalance[knightAddress]
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_165', 'knightPayday'] 
REF_164(uint256) (->_cBalance) := TMP_417(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_cBalance[paladinAddress] = _cBalance[paladinAddress].add(paladinPayday)

IRs:
REF_167(uint256) -> _cBalance[paladinAddress]
REF_168(uint256) -> _cBalance[paladinAddress]
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_168', 'paladinPayday'] 
REF_167(uint256) (->_cBalance) := TMP_418(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
toBeDistributed = 0

IRs:
toBeDistributed(uint256) := 0(uint256)"];
}
// Function: 639.sol-HorseyPilot-constructor(address,address,address,address[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
jokerAddress = _jokerAddress

IRs:
jokerAddress(address) := _jokerAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
knightAddress = _knightAddress

IRs:
knightAddress(address) := _knightAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
paladinAddress = _paladinAddress

IRs:
paladinAddress(address) := _paladinAddress(address)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < 3

IRs:
TMP_342(bool) = i < 3
CONDITION TMP_342"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
voters[i] = _voters[i]

IRs:
REF_123(address) -> voters[i]
REF_124(address) -> _voters[i]
REF_123(address) (->voters) := REF_124(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_343(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cooldownStart = block.timestamp - proposalCooldown

IRs:
TMP_344(uint256) = block.timestamp - proposalCooldown
cooldownStart(uint256) := TMP_344(uint256)"];
}
// Function: 639.sol-HorseyPilot-cooledDown()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == currentProposal.proposer && (block.timestamp - cooldownStart < 86400)

IRs:
REF_201(address) -> currentProposal.proposer
TMP_469(bool) = msg.sender == REF_201
TMP_470(uint256) = block.timestamp - cooldownStart
TMP_471(bool) = TMP_470 < 86400
TMP_472(bool) = TMP_469 && TMP_471
CONDITION TMP_472"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Cool down period not passed yet)

IRs:
TMP_473(None) = SOLIDITY_CALL revert(string)(Cool down period not passed yet)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 639.sol-HorseyPilot-deployChildren(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! deployed,already deployed)

IRs:
TMP_345 = UnaryType.BANG deployed 
TMP_346(None) = SOLIDITY_CALL require(bool,string)(TMP_345,already deployed)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exchangeAddress = new HorseyExchange()

IRs:
TMP_348(HorseyExchange) = new HorseyExchange() 
exchangeAddress(address) := TMP_348(HorseyExchange)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenAddress = new HorseyToken(stablesAddress)

IRs:
TMP_350(HorseyToken) = new HorseyToken(stablesAddress) 
tokenAddress(address) := TMP_350(HorseyToken)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
HorseyExchange(exchangeAddress).setStables(stablesAddress)

IRs:
TMP_351 = CONVERT exchangeAddress to HorseyExchange
HIGH_LEVEL_CALL, dest:TMP_351(HorseyExchange), function:setStables, arguments:['stablesAddress']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
deployed = true

IRs:
deployed(bool) := True(bool)"];
}
// Function: 639.sol-HorseyPilot-getNobleBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_cBalance[msg.sender]

IRs:
REF_132(uint256) -> _cBalance[msg.sender]
RETURN REF_132"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCLevelAccess()

IRs:
MODIFIER_CALL, HorseyPilot.onlyCLevelAccess()()"];
2->1;
}
// Function: 639.sol-HorseyPilot-makeProposal(uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
currentProposal.timestamp = block.timestamp

IRs:
REF_133(uint256) -> currentProposal.timestamp
REF_133(uint256) (->currentProposal) := block.timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
currentProposal.parameter = parameter

IRs:
REF_134(uint256) -> currentProposal.parameter
REF_134(uint256) (->currentProposal) := parameter(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
currentProposal.methodId = methodId

IRs:
REF_135(uint8) -> currentProposal.methodId
REF_135(uint8) (->currentProposal) := methodId(uint8)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
currentProposal.proposer = msg.sender

IRs:
REF_136(address) -> currentProposal.proposer
REF_136(address) (->currentProposal) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete currentProposal.yay

IRs:
REF_137(address[]) -> currentProposal.yay
currentProposal = delete REF_137 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete currentProposal.nay

IRs:
REF_138(address[]) -> currentProposal.nay
currentProposal = delete REF_138 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
proposalInProgress = true

IRs:
proposalInProgress(bool) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
NewProposal(methodId,parameter,msg.sender)

IRs:
Emit NewProposal(methodId,parameter,msg.sender)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyCLevelAccess()

IRs:
MODIFIER_CALL, HorseyPilot.onlyCLevelAccess()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
proposalAvailable()

IRs:
MODIFIER_CALL, HorseyPilot.proposalAvailable()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cooledDown()

IRs:
MODIFIER_CALL, HorseyPilot.cooledDown()()"];
11->1;
}
// Function: 639.sol-HorseyPilot-notVoted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = currentProposal.yay.length

IRs:
REF_202(address[]) -> currentProposal.yay
REF_203 -> LENGTH REF_202
length(uint256) := REF_203(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < length

IRs:
TMP_475(bool) = i < length
CONDITION TMP_475"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
currentProposal.yay[i] == msg.sender

IRs:
REF_204(address[]) -> currentProposal.yay
REF_205(address) -> REF_204[i]
TMP_476(bool) = REF_205 == msg.sender
CONDITION TMP_476"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert(string)(Already voted)

IRs:
TMP_477(None) = SOLIDITY_CALL revert(string)(Already voted)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_478(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
length = currentProposal.nay.length

IRs:
REF_206(address[]) -> currentProposal.nay
REF_207 -> LENGTH REF_206
length(uint256) := REF_207(uint256)"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->19;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i < length

IRs:
TMP_479(bool) = i < length
CONDITION TMP_479"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
currentProposal.nay[i] == msg.sender

IRs:
REF_208(address[]) -> currentProposal.nay
REF_209(address) -> REF_208[i]
TMP_480(bool) = REF_209 == msg.sender
CONDITION TMP_480"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
revert(string)(Already voted)

IRs:
TMP_481(None) = SOLIDITY_CALL revert(string)(Already voted)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_482(uint256) := i(uint256)
i(uint256) = i + 1"];
18->14;
19[label="Node Type: _ 19
"];
}
// Function: 639.sol-HorseyPilot-onlyCLevelAccess()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)((jokerAddress == msg.sender) || (knightAddress == msg.sender) || (paladinAddress == msg.sender),not c level)

IRs:
TMP_458(bool) = jokerAddress == msg.sender
TMP_459(bool) = knightAddress == msg.sender
TMP_460(bool) = TMP_458 || TMP_459
TMP_461(bool) = paladinAddress == msg.sender
TMP_462(bool) = TMP_460 || TMP_461
TMP_463(None) = SOLIDITY_CALL require(bool,string)(TMP_462,not c level)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyPilot-onlyVoters()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
found = false

IRs:
found(bool) := False(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = voters.length

IRs:
REF_210 -> LENGTH voters
length(uint256) := REF_210(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < length

IRs:
TMP_483(bool) = i < length
CONDITION TMP_483"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
voters[i] == msg.sender

IRs:
REF_211(address) -> voters[i]
TMP_484(bool) = REF_211 == msg.sender
CONDITION TMP_484"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
found = true

IRs:
found(bool) := True(bool)"];
8->9;
9[label="Node Type: BREAK 9
"];
9->4;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_485(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: IF 12

EXPRESSION:
! found

IRs:
TMP_486 = UnaryType.BANG found 
CONDITION TMP_486"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert(string)(not a voter)

IRs:
TMP_487(None) = SOLIDITY_CALL revert(string)(not a voter)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: _ 15
"];
}
// Function: 639.sol-HorseyPilot-proposalAvailable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(((! proposalInProgress) || ((block.timestamp - currentProposal.timestamp) > proposalLife)),proposal already pending)

IRs:
TMP_464 = UnaryType.BANG proposalInProgress 
REF_200(uint256) -> currentProposal.timestamp
TMP_465(uint256) = block.timestamp - REF_200
TMP_466(bool) = TMP_465 > proposalLife
TMP_467(bool) = TMP_464 || TMP_466
TMP_468(None) = SOLIDITY_CALL require(bool,string)(TMP_467,proposal already pending)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyPilot-proposalPending()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(proposalInProgress,no proposal pending)

IRs:
TMP_474(None) = SOLIDITY_CALL require(bool,string)(proposalInProgress,no proposal pending)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyPilot-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
votingThreshold = 2

IRs:
votingThreshold(uint8) := 2(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
proposalLife = 604800

IRs:
proposalLife(uint256) := 604800(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
proposalCooldown = 86400

IRs:
proposalCooldown(uint256) := 86400(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
knightEquity = 40

IRs:
knightEquity(uint8) := 40(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
paladinEquity = 10

IRs:
paladinEquity(uint8) := 10(uint256)"];
}
// Function: 639.sol-HorseyPilot-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
proposalInProgress = false

IRs:
proposalInProgress(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
deployed = false

IRs:
deployed(bool) := False(bool)"];
}
// Function: 639.sol-HorseyPilot-syncFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
prevBalance = address(this).balance

IRs:
TMP_375 = CONVERT this to address
TMP_376(uint256) = SOLIDITY_CALL balance(address)(TMP_375)
prevBalance(uint256) := TMP_376(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
HorseyToken(tokenAddress).withdraw()

IRs:
TMP_377 = CONVERT tokenAddress to HorseyToken
HIGH_LEVEL_CALL, dest:TMP_377(HorseyToken), function:withdraw, arguments:[]  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
HorseyExchange(exchangeAddress).withdraw()

IRs:
TMP_379 = CONVERT exchangeAddress to HorseyExchange
HIGH_LEVEL_CALL, dest:TMP_379(HorseyExchange), function:withdraw, arguments:[]  "];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
newBalance = address(this).balance

IRs:
TMP_381 = CONVERT this to address
TMP_382(uint256) = SOLIDITY_CALL balance(address)(TMP_381)
newBalance(uint256) := TMP_382(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
toBeDistributed = toBeDistributed.add(newBalance - prevBalance)

IRs:
TMP_383(uint256) = newBalance - prevBalance
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['toBeDistributed', 'TMP_383'] 
toBeDistributed(uint256) := TMP_384(uint256)"];
}
// Function: 639.sol-HorseyPilot-transferJokerOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(jokerAddress == msg.sender,Not right role)

IRs:
TMP_353(bool) = jokerAddress == msg.sender
TMP_354(None) = SOLIDITY_CALL require(bool,string)(TMP_353,Not right role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_moveBalance(newJoker)

IRs:
INTERNAL_CALL, HorseyPilot._moveBalance(address)(newJoker)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
jokerAddress = newJoker

IRs:
jokerAddress(address) := newJoker(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(newJoker)

IRs:
MODIFIER_CALL, HorseyPilot.validAddress(address)(newJoker)"];
4->1;
}
// Function: 639.sol-HorseyPilot-transferKnightOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(knightAddress == msg.sender,Not right role)

IRs:
TMP_357(bool) = knightAddress == msg.sender
TMP_358(None) = SOLIDITY_CALL require(bool,string)(TMP_357,Not right role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_moveBalance(newKnight)

IRs:
INTERNAL_CALL, HorseyPilot._moveBalance(address)(newKnight)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
knightAddress = newKnight

IRs:
knightAddress(address) := newKnight(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(newKnight)

IRs:
MODIFIER_CALL, HorseyPilot.validAddress(address)(newKnight)"];
4->1;
}
// Function: 639.sol-HorseyPilot-transferPaladinOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(paladinAddress == msg.sender,Not right role)

IRs:
TMP_361(bool) = paladinAddress == msg.sender
TMP_362(None) = SOLIDITY_CALL require(bool,string)(TMP_361,Not right role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_moveBalance(newPaladin)

IRs:
INTERNAL_CALL, HorseyPilot._moveBalance(address)(newPaladin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
paladinAddress = newPaladin

IRs:
paladinAddress(address) := newPaladin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(newPaladin)

IRs:
MODIFIER_CALL, HorseyPilot.validAddress(address)(newPaladin)"];
4->1;
}
// Function: 639.sol-HorseyPilot-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(addr != address(0),Address is zero)

IRs:
TMP_455 = CONVERT 0 to address
TMP_456(bool) = addr != TMP_455
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,Address is zero)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyPilot-voteOnProposal(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((block.timestamp - currentProposal.timestamp) <= proposalLife)

IRs:
REF_139(uint256) -> currentProposal.timestamp
TMP_390(uint256) = block.timestamp - REF_139
TMP_391(bool) = TMP_390 <= proposalLife
TMP_392(None) = SOLIDITY_CALL require(bool)(TMP_391)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
voteFor

IRs:
CONDITION voteFor"];
2->3[label="True"];
2->9[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
currentProposal.yay.push(msg.sender)

IRs:
REF_140(address[]) -> currentProposal.yay
REF_142 -> LENGTH REF_140
TMP_394(uint256) := REF_142(uint256)
TMP_395(uint256) = TMP_394 + 1
REF_142(uint256) (->currentProposal) := TMP_395(uint256)
REF_143(address) -> REF_140[TMP_394]
REF_143(address) (->currentProposal) := msg.sender(address)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
currentProposal.yay.length >= votingThreshold

IRs:
REF_144(address[]) -> currentProposal.yay
REF_145 -> LENGTH REF_144
TMP_396(bool) = REF_145 >= votingThreshold
CONDITION TMP_396"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_doProposal()

IRs:
INTERNAL_CALL, HorseyPilot._doProposal()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
proposalInProgress = false

IRs:
proposalInProgress(bool) := False(bool)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->15;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
currentProposal.nay.push(msg.sender)

IRs:
REF_146(address[]) -> currentProposal.nay
REF_148 -> LENGTH REF_146
TMP_399(uint256) := REF_148(uint256)
TMP_400(uint256) = TMP_399 + 1
REF_148(uint256) (->currentProposal) := TMP_400(uint256)
REF_149(address) -> REF_146[TMP_399]
REF_149(address) (->currentProposal) := msg.sender(address)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
currentProposal.nay.length >= votingThreshold

IRs:
REF_150(address[]) -> currentProposal.nay
REF_151 -> LENGTH REF_150
TMP_401(bool) = REF_151 >= votingThreshold
CONDITION TMP_401"];
10->11[label="True"];
10->14[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
proposalInProgress = false

IRs:
proposalInProgress(bool) := False(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
cooldownStart = block.timestamp

IRs:
cooldownStart(uint256) := block.timestamp(uint256)"];
12->13;
13[label="Node Type: RETURN 13
"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
proposalPending()

IRs:
MODIFIER_CALL, HorseyPilot.proposalPending()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyVoters()

IRs:
MODIFIER_CALL, HorseyPilot.onlyVoters()()"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
notVoted()

IRs:
MODIFIER_CALL, HorseyPilot.notVoted()()"];
18->1;
}
// Function: 639.sol-HorseyPilot-withdrawCeo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
toBeDistributed > 0

IRs:
TMP_365(bool) = toBeDistributed > 0
CONDITION TMP_365"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_updateDistribution()

IRs:
INTERNAL_CALL, HorseyPilot._updateDistribution()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
balance = _cBalance[msg.sender]

IRs:
REF_126(uint256) -> _cBalance[msg.sender]
balance(uint256) := REF_126(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
balance > 0 && (address(this).balance >= balance)

IRs:
TMP_367(bool) = balance > 0
TMP_368 = CONVERT this to address
TMP_369(uint256) = SOLIDITY_CALL balance(address)(TMP_368)
TMP_370(bool) = TMP_369 >= balance
TMP_371(bool) = TMP_367 && TMP_370
CONDITION TMP_371"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
destination.transfer(balance)

IRs:
Transfer dest:destination value:balance"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_cBalance[msg.sender] = 0

IRs:
REF_128(uint256) -> _cBalance[msg.sender]
REF_128(uint256) (->_cBalance) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyCLevelAccess()

IRs:
MODIFIER_CALL, HorseyPilot.onlyCLevelAccess()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
validAddress(destination)

IRs:
MODIFIER_CALL, HorseyPilot.validAddress(address)(destination)"];
10->1;
}
// Function: 639.sol-HorseyToken-_addHorse(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
all_horses.push(newHorse)

IRs:
REF_58 -> LENGTH all_horses
TMP_185(uint256) := REF_58(uint256)
TMP_186(uint256) = TMP_185 + 1
REF_58(uint256) (->all_horses) := TMP_186(uint256)
REF_59(bytes32) -> all_horses[TMP_185]
REF_59(bytes32) (->all_horses) := newHorse(bytes32)"];
}
// Function: 639.sol-HorseyToken-_addLegitOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_legitOwners[newOwner] = true

IRs:
REF_60(bool) -> _legitOwners[newOwner]
REF_60(bool) (->_legitOwners) := True(bool)"];
}
// Function: 639.sol-HorseyToken-_feed(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(None,None,feedingCounter,tier) = stables.horseys(tokenId)

IRs:
TUPLE_10(address,bytes32,uint8,uint8) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:horseys, arguments:['tokenId']  
feedingCounter(uint8)= UNPACK TUPLE_10 index: 2 
tier(uint8)= UNPACK TUPLE_10 index: 3 "];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
probabilityByRarity = 10 ** (uint256(tier).add(1))

IRs:
TMP_278 = CONVERT tier to uint256
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_278', '1'] 
TMP_280(uint256) = 10 ** TMP_279
probabilityByRarity(uint256) := TMP_280(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
randNum = uint256(keccak256()(abi.encodePacked(tokenId,blockHash))) % probabilityByRarity

IRs:
TMP_281(bytes) = SOLIDITY_CALL abi.encodePacked()(tokenId,blockHash)
TMP_282(bytes32) = SOLIDITY_CALL keccak256()(TMP_281)
TMP_283 = CONVERT TMP_282 to uint256
TMP_284(uint256) = TMP_283 % probabilityByRarity
randNum(uint256) := TMP_284(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
randNum <= (feedingCounter * rarityMultiplier)

IRs:
TMP_285(uint8) = feedingCounter * rarityMultiplier
TMP_286(bool) = randNum <= TMP_285
CONDITION TMP_286"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_increaseRarity(tokenId,blockHash)

IRs:
INTERNAL_CALL, HorseyToken._increaseRarity(uint256,bytes32)(tokenId,blockHash)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
feedingCounter < 255

IRs:
TMP_288(bool) = feedingCounter < 255
CONDITION TMP_288"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stables.modifyHorseyFeedingCounter(tokenId,feedingCounter + 1)

IRs:
TMP_289(uint8) = feedingCounter + 1
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:modifyHorseyFeedingCounter, arguments:['tokenId', 'TMP_289']  "];
10->11;
11[label="Node Type: END_IF 11
"];
}
// Function: 639.sol-HorseyToken-_generate_special_horsey(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
id = _makeSpecialId(race,eth_address,coinIndex)

IRs:
TMP_294(uint256) = INTERNAL_CALL, HorseyToken._makeSpecialId(address,address,bytes32)(race,eth_address,coinIndex)
id(uint256) := TMP_294(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
dna = _shiftRight(keccak256()(abi.encodePacked(race,coinIndex)),16)

IRs:
TMP_295(bytes) = SOLIDITY_CALL abi.encodePacked()(race,coinIndex)
TMP_296(bytes32) = SOLIDITY_CALL keccak256()(TMP_295)
TMP_297(bytes32) = INTERNAL_CALL, HorseyToken._shiftRight(bytes32,uint256)(TMP_296,16)
dna(bytes32) := TMP_297(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
stables.storeHorsey(eth_address,id,race,dna,1,0)

IRs:
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:storeHorsey, arguments:['eth_address', 'id', 'race', 'dna', '1', '0']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 639.sol-HorseyToken-_increaseRarity(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(None,dna,None,tier) = stables.horseys(tokenId)

IRs:
TUPLE_11(address,bytes32,uint8,uint8) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:horseys, arguments:['tokenId']  
dna(bytes32)= UNPACK TUPLE_11 index: 1 
tier(uint8)= UNPACK TUPLE_11 index: 3 "];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tier < 255

IRs:
TMP_299(bool) = tier < 255
CONDITION TMP_299"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stables.modifyHorseyTier(tokenId,tier + 1)

IRs:
TMP_300(uint8) = tier + 1
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:modifyHorseyTier, arguments:['tokenId', 'TMP_300']  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
random = uint256(keccak256()(abi.encodePacked(tokenId,blockHash)))

IRs:
TMP_302(bytes) = SOLIDITY_CALL abi.encodePacked()(tokenId,blockHash)
TMP_303(bytes32) = SOLIDITY_CALL keccak256()(TMP_302)
TMP_304 = CONVERT TMP_303 to uint256
random(uint256) := TMP_304(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
rarityMask = _shiftLeft(bytes32(1),(random % 16 + 240))

IRs:
TMP_305 = CONVERT 1 to bytes32
TMP_306(uint256) = random % 16
TMP_307(uint256) = TMP_306 + 240
TMP_308(bytes32) = INTERNAL_CALL, HorseyToken._shiftLeft(bytes32,uint256)(TMP_305,TMP_307)
rarityMask(bytes32) := TMP_308(bytes32)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
newdna = dna | rarityMask

IRs:
TMP_309(bytes32) = dna | rarityMask
newdna(bytes32) := TMP_309(bytes32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stables.modifyHorseyDna(tokenId,newdna)

IRs:
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:modifyHorseyDna, arguments:['tokenId', 'newdna']  "];
}
// Function: 639.sol-HorseyToken-_isWinnerOf(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
race = EthorseRace(raceAddress)

IRs:
TMP_187 = CONVERT raceAddress to EthorseRace
race(EthorseRace) := TMP_187(EthorseRace)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
bc = BettingControllerInterface(race.owner())

IRs:
TMP_188(address) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:owner, arguments:[]  
TMP_189 = CONVERT TMP_188 to BettingControllerInterface
bc(BettingControllerInterface) := TMP_189(BettingControllerInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_legitOwners[bc.owner()])

IRs:
TMP_190(address) = HIGH_LEVEL_CALL, dest:bc(BettingControllerInterface), function:owner, arguments:[]  
REF_64(bool) -> _legitOwners[TMP_190]
TMP_191(None) = SOLIDITY_CALL require(bool)(REF_64)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(None,None,race_end,voided_bet,None,None,None,None) = race.chronus()

IRs:
TUPLE_2(bool,bool,bool,bool,uint32,uint32,uint32,uint32) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:chronus, arguments:[]  
race_end(bool)= UNPACK TUPLE_2 index: 2 
voided_bet(bool)= UNPACK TUPLE_2 index: 3 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
voided_bet || ! race_end

IRs:
TMP_192 = UnaryType.BANG race_end 
TMP_193(bool) = voided_bet || TMP_192
CONDITION TMP_193"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
(false,bytes32(0))

IRs:
TMP_194 = CONVERT 0 to bytes32
RETURN False,TMP_194"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
found = false

IRs:
found(bool) := False(bool)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
arrayLength = all_horses.length

IRs:
REF_66 -> LENGTH all_horses
arrayLength(uint256) := REF_66(uint256)"];
12->15;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->23;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < arrayLength

IRs:
TMP_195(bool) = i < arrayLength
CONDITION TMP_195"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: IF 17

EXPRESSION:
race.winner_horse(all_horses[i])

IRs:
REF_68(bytes32) -> all_horses[i]
TMP_196(bool) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:winner_horse, arguments:['REF_68']  
CONDITION TMP_196"];
17->18[label="True"];
17->21[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
horse = all_horses[i]

IRs:
REF_69(bytes32) -> all_horses[i]
horse(bytes32) := REF_69(bytes32)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
found = true

IRs:
found(bool) := True(bool)"];
19->20;
20[label="Node Type: BREAK 20
"];
20->14;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_197(uint256) := i(uint256)
i(uint256) = i + 1"];
22->16;
23[label="Node Type: IF 23

EXPRESSION:
! found

IRs:
TMP_198 = UnaryType.BANG found 
CONDITION TMP_198"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: RETURN 24

EXPRESSION:
(false,bytes32(0))

IRs:
TMP_199 = CONVERT 0 to bytes32
RETURN False,TMP_199"];
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
bet_amount = 0

IRs:
bet_amount(uint256) := 0(uint256)"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
eth_address != address(0)

IRs:
TMP_200 = CONVERT 0 to address
TMP_201(bool) = eth_address != TMP_200
CONDITION TMP_201"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
(None,None,None,None,bet_amount) = race.getCoinIndex(horse,eth_address)

IRs:
TUPLE_3(uint256,uint256,uint256,bool,uint256) = HIGH_LEVEL_CALL, dest:race(EthorseRace), function:getCoinIndex, arguments:['horse', 'eth_address']  
bet_amount(uint256)= UNPACK TUPLE_3 index: 4 "];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
(bet_amount > 0,horse)

IRs:
TMP_202(bool) = bet_amount > 0
RETURN TMP_202,horse"];
}
// Function: 639.sol-HorseyToken-_makeSpecialId(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(abi.encodePacked(race,sender,coinIndex)))

IRs:
TMP_291(bytes) = SOLIDITY_CALL abi.encodePacked()(race,sender,coinIndex)
TMP_292(bytes32) = SOLIDITY_CALL keccak256()(TMP_291)
TMP_293 = CONVERT TMP_292 to uint256
RETURN TMP_293"];
}
// Function: 639.sol-HorseyToken-_shiftLeft(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bytes32(uint256(data) * (2 ** n))

IRs:
TMP_311 = CONVERT data to uint256
TMP_312(uint256) = 2 ** n
TMP_313(uint256) = TMP_311 * TMP_312
TMP_314 = CONVERT TMP_313 to bytes32
RETURN TMP_314"];
}
// Function: 639.sol-HorseyToken-_shiftRight(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bytes32(uint256(data) / (2 ** n))

IRs:
TMP_315 = CONVERT data to uint256
TMP_316(uint256) = 2 ** n
TMP_317(uint256) = TMP_315 / TMP_316
TMP_318 = CONVERT TMP_317 to bytes32
RETURN TMP_318"];
}
// Function: 639.sol-HorseyToken-addHorseIndex(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addHorse(newHorse)

IRs:
INTERNAL_CALL, EthorseHelpers._addHorse(bytes32)(newHorse)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-HorseyToken-addLegitDevAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addLegitOwner(newAddress)

IRs:
INTERNAL_CALL, EthorseHelpers._addLegitOwner(address)(newAddress)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-HorseyToken-can_claim(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(res,None) = _isWinnerOf(raceAddress,eth_address)

IRs:
TUPLE_4(bool,bytes32) = INTERNAL_CALL, EthorseHelpers._isWinnerOf(address,address)(raceAddress,eth_address)
res(bool)= UNPACK TUPLE_4 index: 0 "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
res

IRs:
RETURN res"];
}
// Function: 639.sol-HorseyToken-carrotsMeetLevel(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(None,None,feedingCounter,None) = stables.horseys(tokenId)

IRs:
TUPLE_12(address,bytes32,uint8,uint8) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:horseys, arguments:['tokenId']  
feedingCounter(uint256)= UNPACK TUPLE_12 index: 2 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(feedingCounter <= stables.carrot_credits(msg.sender),Not enough carrots)

IRs:
TMP_327(uint32) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:carrot_credits, arguments:['msg.sender']  
TMP_328(bool) = feedingCounter <= TMP_327
TMP_329(None) = SOLIDITY_CALL require(bool,string)(TMP_328,Not enough carrots)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 639.sol-HorseyToken-claim(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(None,winner) = _isWinnerOf(raceAddress,address(0))

IRs:
TMP_219 = CONVERT 0 to address
TUPLE_5(bool,bytes32) = INTERNAL_CALL, EthorseHelpers._isWinnerOf(address,address)(raceAddress,TMP_219)
winner(bytes32)= UNPACK TUPLE_5 index: 1 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(winner != bytes32(0),Winner is zero)

IRs:
TMP_220 = CONVERT 0 to bytes32
TMP_221(bool) = winner != TMP_220
TMP_222(None) = SOLIDITY_CALL require(bool,string)(TMP_221,Winner is zero)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(can_claim(raceAddress,msg.sender),can_claim return false)

IRs:
TMP_223(bool) = INTERNAL_CALL, HorseyToken.can_claim(address,address)(raceAddress,msg.sender)
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,can_claim return false)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
id = _generate_special_horsey(raceAddress,msg.sender,winner)

IRs:
TMP_225(uint256) = INTERNAL_CALL, HorseyToken._generate_special_horsey(address,address,bytes32)(raceAddress,msg.sender,winner)
id(uint256) := TMP_225(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Claimed(raceAddress,msg.sender,id)

IRs:
Emit Claimed(raceAddress,msg.sender,id)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
costs(claimingFee)

IRs:
MODIFIER_CALL, HorseyToken.costs(uint256)(claimingFee)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->1;
}
// Function: 639.sol-HorseyToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 639.sol-HorseyToken-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stables = RoyalStablesInterface(stablesAddress)

IRs:
TMP_203 = CONVERT stablesAddress to RoyalStablesInterface
stables(RoyalStablesInterface) := TMP_203(RoyalStablesInterface)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EthorseHelpers()

IRs:
NOP"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Pausable()

IRs:
INTERNAL_CALL, Ownable.constructor()()"];
3->1;
}
// Function: 639.sol-HorseyToken-costs(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= amount,Not enough funds)

IRs:
TMP_330(bool) = msg.value >= amount
TMP_331(None) = SOLIDITY_CALL require(bool,string)(TMP_330,Not enough funds)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert(string)(Not accepting donations)

IRs:
TMP_277(None) = SOLIDITY_CALL revert(string)(Not accepting donations)"];
}
// Function: 639.sol-HorseyToken-feed(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingFeedings[msg.sender] = FeedingData(block.number,tokenId)

IRs:
REF_94(HorseyToken.FeedingData) -> pendingFeedings[msg.sender]
TMP_254(HorseyToken.FeedingData) = new FeedingData(block.number,tokenId)
REF_94(HorseyToken.FeedingData) (->pendingFeedings) := TMP_254(HorseyToken.FeedingData)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(None,None,feedingCounter,None) = stables.horseys(tokenId)

IRs:
TUPLE_8(address,bytes32,uint8,uint8) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:horseys, arguments:['tokenId']  
feedingCounter(uint8)= UNPACK TUPLE_8 index: 2 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stables.storeCarrotsCredit(msg.sender,stables.carrot_credits(msg.sender) - uint32(feedingCounter))

IRs:
TMP_255(uint32) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:carrot_credits, arguments:['msg.sender']  
TMP_256 = CONVERT feedingCounter to uint32
TMP_257(uint32) = TMP_255 - TMP_256
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:storeCarrotsCredit, arguments:['msg.sender', 'TMP_257']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Feeding(tokenId)

IRs:
Emit Feeding(tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwnerOf(tokenId)

IRs:
MODIFIER_CALL, HorseyToken.onlyOwnerOf(uint256)(tokenId)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
carrotsMeetLevel(tokenId)

IRs:
MODIFIER_CALL, HorseyToken.carrotsMeetLevel(uint256)(tokenId)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
noFeedingInProgress()

IRs:
MODIFIER_CALL, HorseyToken.noFeedingInProgress()()"];
9->1;
}
// Function: 639.sol-HorseyToken-feedingInProgress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(pendingFeedings[msg.sender].blockNumber != 0,No pending feeding)

IRs:
REF_120(HorseyToken.FeedingData) -> pendingFeedings[msg.sender]
REF_121(uint256) -> REF_120.blockNumber
TMP_337(bool) = REF_121 != 0
TMP_338(None) = SOLIDITY_CALL require(bool,string)(TMP_337,No pending feeding)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-freeForCarrots(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(pendingFeedings[msg.sender].horsey != tokenId,)

IRs:
REF_78(HorseyToken.FeedingData) -> pendingFeedings[msg.sender]
REF_79(uint256) -> REF_78.horsey
TMP_241(bool) = REF_79 != tokenId
TMP_242(None) = SOLIDITY_CALL require(bool,string)(TMP_241,)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(None,None,feedingCounter,None) = stables.horseys(tokenId)

IRs:
TUPLE_6(address,bytes32,uint8,uint8) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:horseys, arguments:['tokenId']  
feedingCounter(uint8)= UNPACK TUPLE_6 index: 2 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stables.storeCarrotsCredit(msg.sender,stables.carrot_credits(msg.sender) + uint32(feedingCounter * carrotsMultiplier))

IRs:
TMP_243(uint32) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:carrot_credits, arguments:['msg.sender']  
TMP_244(uint8) = feedingCounter * carrotsMultiplier
TMP_245 = CONVERT TMP_244 to uint32
TMP_246(uint32) = TMP_243 + TMP_245
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:storeCarrotsCredit, arguments:['msg.sender', 'TMP_246']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stables.unstoreHorsey(tokenId)

IRs:
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:unstoreHorsey, arguments:['tokenId']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
HorseyFreed(tokenId)

IRs:
Emit HorseyFreed(tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwnerOf(tokenId)

IRs:
MODIFIER_CALL, HorseyToken.onlyOwnerOf(uint256)(tokenId)"];
8->1;
}
// Function: 639.sol-HorseyToken-getCarrotCredits()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
stables.carrot_credits(msg.sender)

IRs:
TMP_252(uint32) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:carrot_credits, arguments:['msg.sender']  
RETURN TMP_252"];
}
// Function: 639.sol-HorseyToken-getHorsey(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(temp.race,temp.dna,temp.feedingCounter,temp.tier) = stables.horseys(tokenId)

IRs:
REF_85(address) -> temp.race
REF_86(bytes32) -> temp.dna
REF_87(uint8) -> temp.feedingCounter
REF_88(uint8) -> temp.tier
TUPLE_7(address,bytes32,uint8,uint8) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:horseys, arguments:['tokenId']  
REF_85(address)= UNPACK TUPLE_7 index: 0 
REF_86(bytes32)= UNPACK TUPLE_7 index: 1 
REF_87(uint8)= UNPACK TUPLE_7 index: 2 
REF_88(uint8)= UNPACK TUPLE_7 index: 3 "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(temp.race,temp.dna,temp.feedingCounter,stables.names(tokenId))

IRs:
REF_90(address) -> temp.race
REF_91(bytes32) -> temp.dna
REF_92(uint8) -> temp.feedingCounter
TMP_253(string) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:names, arguments:['tokenId']  
RETURN REF_90,REF_91,REF_92,TMP_253"];
}
// Function: 639.sol-HorseyToken-getOwnedTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
stables.getOwnedTokens(eth_address)

IRs:
TMP_218(uint256[]) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:getOwnedTokens, arguments:['eth_address']  
RETURN TMP_218"];
}
// Function: 639.sol-HorseyToken-getall_horsesCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
all_horses.length

IRs:
REF_61 -> LENGTH all_horses
RETURN REF_61"];
}
// Function: 639.sol-HorseyToken-noFeedingInProgress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(pendingFeedings[msg.sender].blockNumber == 0,Already feeding)

IRs:
REF_118(HorseyToken.FeedingData) -> pendingFeedings[msg.sender]
REF_119(uint256) -> REF_118.blockNumber
TMP_335(bool) = REF_119 == 0
TMP_336(None) = SOLIDITY_CALL require(bool,string)(TMP_335,Already feeding)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_325(bool) = msg.sender == owner
TMP_326(None) = SOLIDITY_CALL require(bool)(TMP_325)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(stables.ownerOf(tokenId) == msg.sender,Caller is not owner of this token)

IRs:
TMP_339(address) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:ownerOf, arguments:['tokenId']  
TMP_340(bool) = TMP_339 == msg.sender
TMP_341(None) = SOLIDITY_CALL require(bool,string)(TMP_340,Caller is not owner of this token)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 639.sol-HorseyToken-renameHorsey(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
renamingFee = renamingCostsPerChar * bytes(newName).length

IRs:
TMP_229 = CONVERT newName to bytes
REF_73 -> LENGTH TMP_229
TMP_230(uint256) = renamingCostsPerChar * REF_73
renamingFee(uint256) := TMP_230(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
msg.value > renamingFee

IRs:
TMP_231(bool) = msg.value > renamingFee
CONDITION TMP_231"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(msg.value.sub(renamingFee))

IRs:
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['msg.value', 'renamingFee'] 
Transfer dest:msg.sender value:TMP_232"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stables.storeName(tokenId,newName)

IRs:
HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:storeName, arguments:['tokenId', 'newName']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
HorseyRenamed(tokenId,newName)

IRs:
Emit HorseyRenamed(tokenId,newName)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwnerOf(tokenId)

IRs:
MODIFIER_CALL, HorseyToken.onlyOwnerOf(uint256)(tokenId)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
costs(renamingCostsPerChar * bytes(newName).length)

IRs:
TMP_238 = CONVERT newName to bytes
REF_77 -> LENGTH TMP_238
TMP_239(uint256) = renamingCostsPerChar * REF_77
MODIFIER_CALL, HorseyToken.costs(uint256)(TMP_239)"];
9->1;
}
// Function: 639.sol-HorseyToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_182 = CONVERT 0 to address
owner(address) := TMP_182(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 639.sol-HorseyToken-setCarrotsMultiplier(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
carrotsMultiplier = newCarrotsMultiplier

IRs:
carrotsMultiplier(uint8) := newCarrotsMultiplier(uint8)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-HorseyToken-setClaimingCosts(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
claimingFee = newClaimingFee

IRs:
claimingFee(uint256) := newClaimingFee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-HorseyToken-setRarityMultiplier(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rarityMultiplier = newRarityMultiplier

IRs:
rarityMultiplier(uint8) := newRarityMultiplier(uint8)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-HorseyToken-setRenamingCosts(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
renamingCostsPerChar = newRenamingCost

IRs:
renamingCostsPerChar(uint256) := newRenamingCost(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-HorseyToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
all_horses = (bytes32(BTC),bytes32(ETH),bytes32(LTC))

IRs:
TMP_319 = CONVERT BTC to bytes32
TMP_320 = CONVERT ETH to bytes32
TMP_321 = CONVERT LTC to bytes32
all_horses(bytes32[]) = ['TMP_319(bytes32)', 'TMP_320(bytes32)', 'TMP_321(bytes32)']"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
carrotsMultiplier = 1

IRs:
carrotsMultiplier(uint8) := 1(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rarityMultiplier = 1

IRs:
rarityMultiplier(uint8) := 1(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
claimingFee = 8000000000000000

IRs:
claimingFee(uint256) := 8000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
renamingCostsPerChar = 1000000000000000

IRs:
renamingCostsPerChar(uint256) := 1000000000000000(uint256)"];
}
// Function: 639.sol-HorseyToken-stopFeeding()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
blockNumber = pendingFeedings[msg.sender].blockNumber

IRs:
REF_98(HorseyToken.FeedingData) -> pendingFeedings[msg.sender]
REF_99(uint256) -> REF_98.blockNumber
blockNumber(uint256) := REF_99(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenId = pendingFeedings[msg.sender].horsey

IRs:
REF_100(HorseyToken.FeedingData) -> pendingFeedings[msg.sender]
REF_101(uint256) -> REF_100.horsey
tokenId(uint256) := REF_101(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(block.number - blockNumber >= 1,feeding and stop feeding are in same block)

IRs:
TMP_264(uint256) = block.number - blockNumber
TMP_265(bool) = TMP_264 >= 1
TMP_266(None) = SOLIDITY_CALL require(bool,string)(TMP_265,feeding and stop feeding are in same block)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete pendingFeedings[msg.sender]

IRs:
REF_102(HorseyToken.FeedingData) -> pendingFeedings[msg.sender]
pendingFeedings = delete REF_102 "];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
block.number - blockNumber > 255

IRs:
TMP_267(uint256) = block.number - blockNumber
TMP_268(bool) = TMP_267 > 255
CONDITION TMP_268"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
FeedingFailed(tokenId)

IRs:
Emit FeedingFailed(tokenId)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
stables.ownerOf(tokenId) != msg.sender

IRs:
TMP_270(address) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:ownerOf, arguments:['tokenId']  
TMP_271(bool) = TMP_270 != msg.sender
CONDITION TMP_271"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
FeedingFailed(tokenId)

IRs:
Emit FeedingFailed(tokenId)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_feed(tokenId,blockhash(uint256)(blockNumber))

IRs:
TMP_273(uint256) = SOLIDITY_CALL blockhash(uint256)(blockNumber)
INTERNAL_CALL, HorseyToken._feed(uint256,bytes32)(tokenId,TMP_273)"];
13->14;
14[label="Node Type: NEW VARIABLE 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
(None,dna,None,None) = stables.horseys(tokenId)

IRs:
TUPLE_9(address,bytes32,uint8,uint8) = HIGH_LEVEL_CALL, dest:stables(RoyalStablesInterface), function:horseys, arguments:['tokenId']  
dna(bytes32)= UNPACK TUPLE_9 index: 1 "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ReceivedCarrot(tokenId,dna)

IRs:
Emit ReceivedCarrot(tokenId,dna)"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
true

IRs:
RETURN True"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
feedingInProgress()

IRs:
MODIFIER_CALL, HorseyToken.feedingInProgress()()"];
18->1;
}
// Function: 639.sol-HorseyToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_176 = CONVERT 0 to address
TMP_177(bool) = newOwner != TMP_176
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 639.sol-HorseyToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 639.sol-HorseyToken-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(addr != address(0),Address is zero)

IRs:
TMP_332 = CONVERT 0 to address
TMP_333(bool) = addr != TMP_332
TMP_334(None) = SOLIDITY_CALL require(bool,string)(TMP_333,Address is zero)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_322 = UnaryType.BANG paused 
TMP_323(None) = SOLIDITY_CALL require(bool)(TMP_322)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_324(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-HorseyToken-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_212 = CONVERT this to address
TMP_213(uint256) = SOLIDITY_CALL balance(address)(TMP_212)
Transfer dest:owner value:TMP_213"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 639.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 639.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_18 = CONVERT 0 to address
owner(address) := TMP_18(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 639.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 639.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 639.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_36(bool) = msg.sender == owner
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 639.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_28 = CONVERT 0 to address
owner(address) := TMP_28(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 639.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 639.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = newOwner != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 639.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 639.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_38 = UnaryType.BANG paused 
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_40(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 639.sol-RoyalStablesInterface-getOwnedTokens(address)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-modifyHorsey(uint256,address,bytes32,uint8,uint8)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-modifyHorseyDna(uint256,bytes32)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-modifyHorseyFeedingCounter(uint256,uint8)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-modifyHorseyTier(uint256,uint8)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-ownerOf(uint256)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-storeCarrotsCredit(address,uint32)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-storeHorsey(address,uint256,address,bytes32,uint8,uint8)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-storeName(uint256,string)
digraph{
}
// Function: 639.sol-RoyalStablesInterface-unstoreHorsey(uint256)
digraph{
}
// Function: 639.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 639.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 639.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 639.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
