digraph G {
// Function: 748.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((7812500000).mul(_keys.sq()).add((7499992187500000).mul(_keys.mul(1000000000000000000)))) / ((1000000000000000000).sq())

IRs:
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['7812500000', 'TMP_463'] 
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_466(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['7499992187500000', 'TMP_465'] 
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_464', 'TMP_466'] 
TMP_468(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_469(uint256) = TMP_467 / TMP_468
RETURN TMP_469"];
}
// Function: 748.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_453(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_455(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_454)
TMP_456(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_453', 'TMP_455'] 
RETURN TMP_456"];
}
// Function: 748.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(31250000000000000000000000000)).add(56249882812561035156250000000000000000000000000000000000000000000000)).sqrt()).sub(7499992187500000000000000000000000)) / (15625000000)

IRs:
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_457', '31250000000000000000000000000'] 
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_458', '56249882812561035156250000000000000000000000000000000000000000000000'] 
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_459'] 
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_460', '7499992187500000000000000000000000'] 
TMP_462(uint256) = TMP_461 / 15625000000
RETURN TMP_462"];
}
// Function: 748.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_450(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_449)
TMP_451(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_452(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_450', 'TMP_451'] 
RETURN TMP_452"];
}
// Function: 748.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == ceo,ONLY ceo CAN activate)

IRs:
TMP_432(bool) = msg.sender == ceo
TMP_433(None) = SOLIDITY_CALL require(bool,string)(TMP_432,ONLY ceo CAN activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,Already Activated)

IRs:
TMP_434(bool) = activated_ == False
TMP_435(None) = SOLIDITY_CALL require(bool,string)(TMP_434,Already Activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_694(F3Ddatasets.Round) -> round_[1]
REF_695(uint256) -> REF_694.strt
TMP_436(uint256) = now + rndExtra_
TMP_437(uint256) = TMP_436 - rndGap_
REF_695(uint256) (->round_) := TMP_437(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_696(F3Ddatasets.Round) -> round_[1]
REF_697(uint256) -> REF_696.end
TMP_438(uint256) = now + rndInit_
TMP_439(uint256) = TMP_438 + rndExtra_
REF_697(uint256) (->round_) := TMP_439(uint256)"];
}
// Function: 748.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_353(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_354(bytes32) = SOLIDITY_CALL keccak256()(TMP_353)
TMP_355 = CONVERT TMP_354 to uint256
TMP_356(uint256) = TMP_355 / now
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_352', 'TMP_356'] 
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_357', 'block.gaslimit'] 
TMP_359(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_360(bytes32) = SOLIDITY_CALL keccak256()(TMP_359)
TMP_361 = CONVERT TMP_360 to uint256
TMP_362(uint256) = TMP_361 / now
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_358', 'TMP_362'] 
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_363', 'block.number'] 
TMP_365(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_364)
TMP_366(bytes32) = SOLIDITY_CALL keccak256()(TMP_365)
TMP_367 = CONVERT TMP_366 to uint256
seed(uint256) := TMP_367(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_368(uint256) = seed / 1000
TMP_369(uint256) = TMP_368 * 1000
TMP_370(uint256) = seed - TMP_369
TMP_371(bool) = TMP_370 < airDropTracker_
CONDITION TMP_371"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 748.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.strt
TMP_164(uint256) = REF_260 + rndGap_
TMP_165(bool) = _now > TMP_164
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_166(bool) = _now <= REF_262
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.end
TMP_167(bool) = _now > REF_264
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.plyr
TMP_168(bool) = REF_266 == 0
TMP_169(bool) = TMP_167 && TMP_168
TMP_170(bool) = TMP_166 || TMP_169
TMP_171(bool) = TMP_165 && TMP_170
CONDITION TMP_171"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.end
TMP_173(bool) = _now > REF_268
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(bool) -> REF_269.ended
TMP_174(bool) = REF_270 == False
TMP_175(bool) = TMP_173 && TMP_174
CONDITION TMP_175"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(bool) -> REF_271.ended
REF_272(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_176(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_176(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_273(uint256) -> _eventData_.compressedData
REF_274(uint256) -> _eventData_.compressedData
TMP_177(uint256) = _now * 1000000000000000000
TMP_178(uint256) = REF_274 + TMP_177
REF_273(uint256) (->_eventData_) := TMP_178(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_275(uint256) -> _eventData_.compressedIDs
REF_276(uint256) -> _eventData_.compressedIDs
TMP_179(uint256) = REF_276 + _pID
REF_275(uint256) (->_eventData_) := TMP_179(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_278(F3Ddatasets.Player) -> plyr_[_pID]
REF_279(bytes32) -> REF_278.name
REF_280(uint256) -> _eventData_.compressedData
REF_281(uint256) -> _eventData_.compressedIDs
REF_282(address) -> _eventData_.winnerAddr
REF_283(bytes32) -> _eventData_.winnerName
REF_284(uint256) -> _eventData_.amountWon
REF_285(uint256) -> _eventData_.newPot
REF_286(uint256) -> _eventData_.P3DAmount
REF_287(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_279,msg.value,REF_280,REF_281,REF_282,REF_283,REF_284,REF_285,REF_286,REF_287)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_288(F3Ddatasets.Player) -> plyr_[_pID]
REF_289(uint256) -> REF_288.gen
REF_290(F3Ddatasets.Player) -> plyr_[_pID]
REF_291(uint256) -> REF_290.gen
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_291', 'msg.value'] 
REF_289(uint256) (->plyr_) := TMP_181(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 748.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_35(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_35(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_36 = CONVERT 0 to address
TMP_37(bool) = _affCode == TMP_36
TMP_38(bool) = _affCode == msg.sender
TMP_39(bool) = TMP_37 || TMP_38
CONDITION TMP_39"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_40(bool) = _affID != REF_31
CONDITION TMP_40"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_41(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_41(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 748.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_25(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_25(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_26(bool) = _affCode == 0
TMP_27(bool) = _affCode == _pID
TMP_28(bool) = TMP_26 || TMP_27
CONDITION TMP_28"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_29(bool) = _affCode != REF_23
CONDITION TMP_29"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_30(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_30(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 748.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_46(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_46(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_47(bool) = _affCode == 
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_48(bool) = _affCode == REF_36
TMP_49(bool) = TMP_47 || TMP_48
CONDITION TMP_49"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_50(bool) = _affID != REF_41
CONDITION TMP_50"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_51(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_51(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 748.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.strt
TMP_254(uint256) = REF_425 + rndGap_
TMP_255(bool) = _now > TMP_254
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.end
TMP_256(bool) = _now <= REF_427
REF_428(F3Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.end
TMP_257(bool) = _now > REF_429
REF_430(F3Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.plyr
TMP_258(bool) = REF_431 == 0
TMP_259(bool) = TMP_257 && TMP_258
TMP_260(bool) = TMP_256 || TMP_259
TMP_261(bool) = TMP_255 && TMP_260
CONDITION TMP_261"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.eth
TMP_262(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_433', '_eth'] 
RETURN TMP_262"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_263(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_263"];
}
// Function: 748.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_414(F3Ddatasets.Round) -> round_[_rIDlast]
REF_415(uint256) -> REF_414.mask
REF_417(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_418(F3Ddatasets.PlayerRounds) -> REF_417[_rIDlast]
REF_419(uint256) -> REF_418.keys
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_415', 'REF_419'] 
TMP_252(uint256) = TMP_251 / 1000000000000000000
REF_421(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_422(F3Ddatasets.PlayerRounds) -> REF_421[_rIDlast]
REF_423(uint256) -> REF_422.mask
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_252', 'REF_423'] 
RETURN TMP_253"];
}
// Function: 748.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ceo = msg.sender

IRs:
ceo(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cfo = msg.sender

IRs:
cfo(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,0)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(30,0)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(20,0)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(20,0)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(40,0)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(40,0)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(30,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(30,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(10,0)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(10,0)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(20,0)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(20,0)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 748.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_325(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_326(F3Ddatasets.PlayerRounds) -> REF_325[_rID]
REF_327(uint256) -> REF_326.keys
TMP_201(bool) = REF_327 == 0
CONDITION TMP_201"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_202(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_202(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_328(F3Ddatasets.Round) -> round_[_rID]
REF_329(uint256) -> REF_328.eth
TMP_203(bool) = REF_329 < 100000000000000000000
REF_330(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_331(F3Ddatasets.PlayerRounds) -> REF_330[_rID]
REF_332(uint256) -> REF_331.eth
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_332', '_eth'] 
TMP_205(bool) = TMP_204 > 1000000000000000000
TMP_206(bool) = TMP_203 && TMP_205
CONDITION TMP_206"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_335(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_336(F3Ddatasets.PlayerRounds) -> REF_335[_rID]
REF_337(uint256) -> REF_336.eth
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_337'] 
_availableLimit(uint256) := TMP_207(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_208(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_339(F3Ddatasets.Player) -> plyr_[_pID]
REF_340(uint256) -> REF_339.gen
REF_341(F3Ddatasets.Player) -> plyr_[_pID]
REF_342(uint256) -> REF_341.gen
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_342', '_refund'] 
REF_340(uint256) (->plyr_) := TMP_209(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_210(bool) = _eth > 1000000000
CONDITION TMP_210"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_344(F3Ddatasets.Round) -> round_[_rID]
REF_345(uint256) -> REF_344.eth
TMP_211(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_345', '_eth'] 
_keys(uint256) := TMP_211(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_212(bool) = _keys >= 1000000000000000000
CONDITION TMP_212"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.plyr
TMP_214(bool) = REF_348 != _pID
CONDITION TMP_214"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.plyr
REF_350(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_351(F3Ddatasets.Round) -> round_[_rID]
REF_352(uint256) -> REF_351.team
TMP_215(bool) = REF_352 != _team
CONDITION TMP_215"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_353(F3Ddatasets.Round) -> round_[_rID]
REF_354(uint256) -> REF_353.team
REF_354(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_355(uint256) -> _eventData_.compressedData
REF_356(uint256) -> _eventData_.compressedData
TMP_216(uint256) = REF_356 + 100
REF_355(uint256) (->_eventData_) := TMP_216(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_217(bool) = _eth >= 100000000000000000
CONDITION TMP_217"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_218(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_219(bool) = INTERNAL_CALL, FoMo3Dlong.airdrop()()
TMP_220(bool) = TMP_219 == True
CONDITION TMP_220"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_221(bool) = _eth >= 10000000000000000000
CONDITION TMP_221"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_223(uint256) = TMP_222 / 100
_prize(uint256) := TMP_223(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_358(F3Ddatasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.win
REF_360(F3Ddatasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.win
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_361', '_prize'] 
REF_359(uint256) (->plyr_) := TMP_224(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_225(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_364(uint256) -> _eventData_.compressedData
REF_364(-> _eventData_) = REF_364 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_226(bool) = _eth >= 1000000000000000000
TMP_227(bool) = _eth < 10000000000000000000
TMP_228(bool) = TMP_226 && TMP_227
CONDITION TMP_228"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_230(uint256) = TMP_229 / 100
_prize(uint256) := TMP_230(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_366(F3Ddatasets.Player) -> plyr_[_pID]
REF_367(uint256) -> REF_366.win
REF_368(F3Ddatasets.Player) -> plyr_[_pID]
REF_369(uint256) -> REF_368.win
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_369', '_prize'] 
REF_367(uint256) (->plyr_) := TMP_231(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_232(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_372(uint256) -> _eventData_.compressedData
REF_372(-> _eventData_) = REF_372 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_233(bool) = _eth >= 100000000000000000
TMP_234(bool) = _eth < 1000000000000000000
TMP_235(bool) = TMP_233 && TMP_234
CONDITION TMP_235"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_237(uint256) = TMP_236 / 100
_prize(uint256) := TMP_237(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_374(F3Ddatasets.Player) -> plyr_[_pID]
REF_375(uint256) -> REF_374.win
REF_376(F3Ddatasets.Player) -> plyr_[_pID]
REF_377(uint256) -> REF_376.win
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_377', '_prize'] 
REF_375(uint256) (->plyr_) := TMP_238(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_239(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_380(uint256) -> _eventData_.compressedData
REF_380(-> _eventData_) = REF_380 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_381(uint256) -> _eventData_.compressedData
REF_381(-> _eventData_) = REF_381 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_382(uint256) -> _eventData_.compressedData
TMP_240(uint256) = _prize * 1000000000000000000000000000000000
REF_382(-> _eventData_) = REF_382 + TMP_240"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_383(uint256) -> _eventData_.compressedData
REF_384(uint256) -> _eventData_.compressedData
TMP_241(uint256) = airDropTracker_ * 1000
TMP_242(uint256) = REF_384 + TMP_241
REF_383(uint256) (->_eventData_) := TMP_242(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_385(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_386(F3Ddatasets.PlayerRounds) -> REF_385[_rID]
REF_387(uint256) -> REF_386.keys
REF_389(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_390(F3Ddatasets.PlayerRounds) -> REF_389[_rID]
REF_391(uint256) -> REF_390.keys
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_391'] 
REF_387(uint256) (->plyrRnds_) := TMP_243(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_392(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_393(F3Ddatasets.PlayerRounds) -> REF_392[_rID]
REF_394(uint256) -> REF_393.eth
REF_396(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_397(F3Ddatasets.PlayerRounds) -> REF_396[_rID]
REF_398(uint256) -> REF_397.eth
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_398'] 
REF_394(uint256) (->plyrRnds_) := TMP_244(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_399(F3Ddatasets.Round) -> round_[_rID]
REF_400(uint256) -> REF_399.keys
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.keys
TMP_245(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_403'] 
REF_400(uint256) (->round_) := TMP_245(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.eth
REF_407(F3Ddatasets.Round) -> round_[_rID]
REF_408(uint256) -> REF_407.eth
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_408'] 
REF_405(uint256) (->round_) := TMP_246(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_409(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_410(uint256) -> REF_409[_team]
REF_412(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_413(uint256) -> REF_412[_team]
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_413'] 
REF_410(uint256) (->rndTmEth_) := TMP_247(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_248(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_248(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_249(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_249(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 748.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_473(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_473(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_288(bool) = _pID == 0
CONDITION TMP_288"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_289(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_289(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_290(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_290(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_291(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_291(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_477(uint256) -> pIDxAddr_[msg.sender]
REF_477(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_478(F3Ddatasets.Player) -> plyr_[_pID]
REF_479(address) -> REF_478.addr
REF_479(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_292(bool) = _name != 
CONDITION TMP_292"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_480(uint256) -> pIDxName_[_name]
REF_480(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_481(F3Ddatasets.Player) -> plyr_[_pID]
REF_482(bytes32) -> REF_481.name
REF_482(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_483(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_484(bool) -> REF_483[_name]
REF_484(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_293(bool) = _laff != 0
TMP_294(bool) = _laff != _pID
TMP_295(bool) = TMP_293 && TMP_294
CONDITION TMP_295"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.laff
REF_486(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_487(uint256) -> _eventData_.compressedData
REF_488(uint256) -> _eventData_.compressedData
TMP_296(uint256) = REF_488 + 1
REF_487(uint256) (->_eventData_) := TMP_296(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 748.sol-FoMo3Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 20

IRs:
TMP_372(uint256) = _eth / 20
_com(uint256) := TMP_372(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_373(uint256) = _eth / 10
_aff(uint256) := TMP_373(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_team == 0

IRs:
TMP_374(bool) = _team == 0
CONDITION TMP_374"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_aff = _eth.mul(30) / 100

IRs:
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '30'] 
TMP_376(uint256) = TMP_375 / 100
_aff(uint256) := TMP_376(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_377(bool) = _affID != _pID
REF_596(F3Ddatasets.Player) -> plyr_[_affID]
REF_597(bytes32) -> REF_596.name
TMP_378(bool) = REF_597 != 
TMP_379(bool) = TMP_377 && TMP_378
CONDITION TMP_379"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_598(F3Ddatasets.Player) -> plyr_[_affID]
REF_599(uint256) -> REF_598.aff
REF_601(F3Ddatasets.Player) -> plyr_[_affID]
REF_602(uint256) -> REF_601.aff
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_602'] 
REF_599(uint256) (->plyr_) := TMP_380(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_604(F3Ddatasets.Player) -> plyr_[_affID]
REF_605(address) -> REF_604.addr
REF_606(F3Ddatasets.Player) -> plyr_[_affID]
REF_607(bytes32) -> REF_606.name
Emit onAffiliatePayout(_affID,REF_605,REF_607,_rID,_pID,_aff,now)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_com = _com.add(_aff)

IRs:
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_aff'] 
_com(uint256) := TMP_382(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cfo.transfer(_com)

IRs:
Transfer dest:cfo value:_com"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 748.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_611(F3Ddatasets.TeamFee) -> fees_[_team]
REF_612(uint256) -> REF_611.gen
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_612'] 
TMP_385(uint256) = TMP_384 / 100
_gen(uint256) := TMP_385(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 20)

IRs:
TMP_386(uint256) = _eth / 20
_air(uint256) := TMP_386(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_387(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_team == 0

IRs:
TMP_388(bool) = _team == 0
CONDITION TMP_388"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eth = _eth.sub(((_eth.mul(40)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '40'] 
TMP_390(uint256) = TMP_389 / 100
REF_618(F3Ddatasets.TeamFee) -> fees_[_team]
REF_619(uint256) -> REF_618.p3d
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_619'] 
TMP_392(uint256) = TMP_391 / 100
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_390', 'TMP_392'] 
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_393'] 
_eth(uint256) := TMP_394(uint256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_eth = _eth.sub(((_eth.mul(20)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '20'] 
TMP_396(uint256) = TMP_395 / 100
REF_624(F3Ddatasets.TeamFee) -> fees_[_team]
REF_625(uint256) -> REF_624.p3d
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_625'] 
TMP_398(uint256) = TMP_397 / 100
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_396', 'TMP_398'] 
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_399'] 
_eth(uint256) := TMP_400(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_401(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_402(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_402(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_dust > 0

IRs:
TMP_403(bool) = _dust > 0
CONDITION TMP_403"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_404(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_628(F3Ddatasets.Round) -> round_[_rID]
REF_629(uint256) -> REF_628.pot
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_632(F3Ddatasets.Round) -> round_[_rID]
REF_633(uint256) -> REF_632.pot
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_405', 'REF_633'] 
REF_629(uint256) (->round_) := TMP_406(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_634(uint256) -> _eventData_.genAmount
REF_636(uint256) -> _eventData_.genAmount
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_636'] 
REF_634(uint256) (->_eventData_) := TMP_407(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_637(uint256) -> _eventData_.potAmount
REF_637(uint256) (->_eventData_) := _pot(uint256)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 748.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_497(F3Ddatasets.Round) -> round_[_rID]
REF_498(uint256) -> REF_497.plyr
_winPID(uint256) := REF_498(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_499(F3Ddatasets.Round) -> round_[_rID]
REF_500(uint256) -> REF_499.team
_winTID(uint256) := REF_500(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_501(F3Ddatasets.Round) -> round_[_rID]
REF_502(uint256) -> REF_501.pot
_pot(uint256) := REF_502(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(55)) / 100

IRs:
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '55'] 
TMP_304(uint256) = TMP_303 / 100
_win(uint256) := TMP_304(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 20)

IRs:
TMP_305(uint256) = _pot / 20
_com(uint256) := TMP_305(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_505(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_506(uint256) -> REF_505.gen
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_506'] 
TMP_307(uint256) = TMP_306 / 100
_gen(uint256) := TMP_307(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_508(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_509(uint256) -> REF_508.p3d
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_509'] 
TMP_309(uint256) = TMP_308 / 100
_p3d(uint256) := TMP_309(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_310', '_com'] 
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_311', '_gen'] 
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_312', '_p3d'] 
_res(uint256) := TMP_313(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_515(F3Ddatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.keys
TMP_315(uint256) = TMP_314 / REF_516
_ppt(uint256) := TMP_315(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_519(F3Ddatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.keys
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_520'] 
TMP_317(uint256) = TMP_316 / 1000000000000000000
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_317'] 
_dust(uint256) := TMP_318(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_319(bool) = _dust > 0
CONDITION TMP_319"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_320(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_321(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_523(F3Ddatasets.Player) -> plyr_[_winPID]
REF_524(uint256) -> REF_523.win
REF_526(F3Ddatasets.Player) -> plyr_[_winPID]
REF_527(uint256) -> REF_526.win
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_527'] 
REF_524(uint256) (->plyr_) := TMP_322(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_com = _com.add(_p3d)

IRs:
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p3d'] 
_com(uint256) := TMP_323(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
cfo.transfer(_com)

IRs:
Transfer dest:cfo value:_com"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_530(F3Ddatasets.Round) -> round_[_rID]
REF_531(uint256) -> REF_530.mask
REF_533(F3Ddatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.mask
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_534'] 
REF_531(uint256) (->round_) := TMP_325(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_535(uint256) -> _eventData_.compressedData
REF_536(uint256) -> _eventData_.compressedData
REF_537(F3Ddatasets.Round) -> round_[_rID]
REF_538(uint256) -> REF_537.end
TMP_326(uint256) = REF_538 * 1000000
TMP_327(uint256) = REF_536 + TMP_326
REF_535(uint256) (->_eventData_) := TMP_327(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_539(uint256) -> _eventData_.compressedIDs
REF_540(uint256) -> _eventData_.compressedIDs
TMP_328(uint256) = _winPID * 100000000000000000000000000
TMP_329(uint256) = REF_540 + TMP_328
TMP_330(uint256) = _winTID * 100000000000000000
TMP_331(uint256) = TMP_329 + TMP_330
REF_539(uint256) (->_eventData_) := TMP_331(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_541(address) -> _eventData_.winnerAddr
REF_542(F3Ddatasets.Player) -> plyr_[_winPID]
REF_543(address) -> REF_542.addr
REF_541(address) (->_eventData_) := REF_543(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_544(bytes32) -> _eventData_.winnerName
REF_545(F3Ddatasets.Player) -> plyr_[_winPID]
REF_546(bytes32) -> REF_545.name
REF_544(bytes32) (->_eventData_) := REF_546(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_547(uint256) -> _eventData_.amountWon
REF_547(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_548(uint256) -> _eventData_.genAmount
REF_548(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_549(uint256) -> _eventData_.P3DAmount
REF_549(uint256) (->_eventData_) := _p3d(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_550(uint256) -> _eventData_.newPot
REF_550(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_332(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_333(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.strt
REF_552(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.end
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_334', 'rndGap_'] 
REF_554(uint256) (->round_) := TMP_335(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_557(F3Ddatasets.Round) -> round_[_rID]
REF_558(uint256) -> REF_557.pot
REF_558(uint256) (->round_) := _res(uint256)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 748.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_678(uint256) -> _eventData_.compressedData
REF_679(uint256) -> _eventData_.compressedData
TMP_424(uint256) = now * 1000000000000000000
TMP_425(uint256) = REF_679 + TMP_424
TMP_426(uint256) = _team * 100000000000000000000000000000
TMP_427(uint256) = TMP_425 + TMP_426
REF_678(uint256) (->_eventData_) := TMP_427(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_680(uint256) -> _eventData_.compressedIDs
REF_681(uint256) -> _eventData_.compressedIDs
TMP_428(uint256) = REF_681 + _pID
TMP_429(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_430(uint256) = TMP_428 + TMP_429
REF_680(uint256) (->_eventData_) := TMP_430(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_683(uint256) -> _eventData_.compressedData
REF_684(uint256) -> _eventData_.compressedIDs
REF_685(F3Ddatasets.Player) -> plyr_[_pID]
REF_686(bytes32) -> REF_685.name
REF_687(address) -> _eventData_.winnerAddr
REF_688(bytes32) -> _eventData_.winnerName
REF_689(uint256) -> _eventData_.amountWon
REF_690(uint256) -> _eventData_.newPot
REF_691(uint256) -> _eventData_.P3DAmount
REF_692(uint256) -> _eventData_.genAmount
REF_693(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_683,REF_684,REF_686,msg.sender,_eth,_keys,REF_687,REF_688,REF_689,REF_690,REF_691,REF_692,REF_693,airDropPot_)"];
}
// Function: 748.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 748.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_129(F3Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.strt
TMP_115(uint256) = REF_130 + rndGap_
TMP_116(bool) = _now > TMP_115
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_117(bool) = _now <= REF_132
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.end
TMP_118(bool) = _now > REF_134
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.plyr
TMP_119(bool) = REF_136 == 0
TMP_120(bool) = TMP_118 && TMP_119
TMP_121(bool) = TMP_117 || TMP_120
TMP_122(bool) = TMP_116 && TMP_121
CONDITION TMP_122"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.keys
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_138', '1000000000000000000'] 
TMP_124(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_123', '1000000000000000000'] 
RETURN TMP_124"];
5[label="Node Type: RETURN 5

EXPRESSION:
(7500000000000000)

IRs:
RETURN 7500000000000000"];
}
// Function: 748.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_211(F3Ddatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.ico
REF_213(F3Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.keys
REF_215(F3Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.end
REF_217(F3Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.strt
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.pot
REF_221(F3Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.team
REF_223(F3Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.plyr
TMP_155(uint256) = REF_224 * 10
TMP_156(uint256) = REF_222 + TMP_155
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.plyr
REF_227(F3Ddatasets.Player) -> plyr_[REF_226]
REF_228(address) -> REF_227.addr
REF_229(F3Ddatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.plyr
REF_231(F3Ddatasets.Player) -> plyr_[REF_230]
REF_232(bytes32) -> REF_231.name
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[0]
REF_235(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_236(uint256) -> REF_235[1]
REF_237(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_238(uint256) -> REF_237[2]
REF_239(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_240(uint256) -> REF_239[3]
TMP_157(uint256) = airDropPot_ * 1000
TMP_158(uint256) = airDropTracker_ + TMP_157
RETURN REF_212,_rID,REF_214,REF_216,REF_218,REF_220,TMP_156,REF_228,REF_232,REF_234,REF_236,REF_238,REF_240,TMP_158"];
}
// Function: 748.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_159 = CONVERT 0 to address
TMP_160(bool) = _addr == TMP_159
CONDITION TMP_160"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_161(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_241(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_241(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_242(F3Ddatasets.Player) -> plyr_[_pID]
REF_243(bytes32) -> REF_242.name
REF_244(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_245(F3Ddatasets.PlayerRounds) -> REF_244[_rID]
REF_246(uint256) -> REF_245.keys
REF_247(F3Ddatasets.Player) -> plyr_[_pID]
REF_248(uint256) -> REF_247.win
REF_249(F3Ddatasets.Player) -> plyr_[_pID]
REF_250(uint256) -> REF_249.gen
REF_252(F3Ddatasets.Player) -> plyr_[_pID]
REF_253(uint256) -> REF_252.lrnd
TMP_162(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_253)
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_250', 'TMP_162'] 
REF_254(F3Ddatasets.Player) -> plyr_[_pID]
REF_255(uint256) -> REF_254.aff
REF_256(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_257(F3Ddatasets.PlayerRounds) -> REF_256[_rID]
REF_258(uint256) -> REF_257.eth
RETURN _pID,REF_243,REF_246,REF_248,TMP_163,REF_255,REF_258"];
}
// Function: 748.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_131(bool) = now > REF_152
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(bool) -> REF_153.ended
TMP_132(bool) = REF_154 == False
TMP_133(bool) = TMP_131 && TMP_132
REF_155(F3Ddatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.plyr
TMP_134(bool) = REF_156 != 0
TMP_135(bool) = TMP_133 && TMP_134
CONDITION TMP_135"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_157(F3Ddatasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.plyr
TMP_136(bool) = REF_158 == _pID
CONDITION TMP_136"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_159(F3Ddatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.win
REF_162(F3Ddatasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.pot
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_163', '48'] 
TMP_138(uint256) = TMP_137 / 100
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_138'] 
REF_165(F3Ddatasets.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.gen
TMP_140(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_169(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_170(F3Ddatasets.PlayerRounds) -> REF_169[_rID]
REF_171(uint256) -> REF_170.mask
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_140', 'REF_171'] 
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_166', 'TMP_141'] 
REF_172(F3Ddatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.aff
RETURN TMP_139,TMP_142,REF_173"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_174(F3Ddatasets.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.win
REF_176(F3Ddatasets.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.gen
TMP_143(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_180(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_181(F3Ddatasets.PlayerRounds) -> REF_180[_rID]
REF_182(uint256) -> REF_181.mask
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_143', 'REF_182'] 
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_177', 'TMP_144'] 
REF_183(F3Ddatasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.aff
RETURN REF_175,TMP_145,REF_184"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_185(F3Ddatasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.win
REF_187(F3Ddatasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.gen
REF_190(F3Ddatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.lrnd
TMP_146(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_191)
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', 'TMP_146'] 
REF_192(F3Ddatasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.aff
RETURN REF_186,TMP_147,REF_193"];
}
// Function: 748.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_194(F3Ddatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.mask
REF_197(F3Ddatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.pot
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.team
REF_202(F3Ddatasets.PotSplit) -> potSplit_[REF_201]
REF_203(uint256) -> REF_202.gen
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_198', 'REF_203'] 
TMP_149(uint256) = TMP_148 / 100
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_149', '1000000000000000000'] 
REF_205(F3Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.keys
TMP_151(uint256) = TMP_150 / REF_206
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_195', 'TMP_151'] 
REF_208(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_209(F3Ddatasets.PlayerRounds) -> REF_208[_rID]
REF_210(uint256) -> REF_209.keys
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_152', 'REF_210'] 
TMP_154(uint256) = TMP_153 / 1000000000000000000
RETURN TMP_154"];
}
// Function: 748.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_125(bool) = _now < REF_142
CONDITION TMP_125"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_143(F3Ddatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.strt
TMP_126(uint256) = REF_144 + rndGap_
TMP_127(bool) = _now > TMP_126
CONDITION TMP_127"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_145(F3Ddatasets.Round) -> round_[_rID]
REF_146(uint256) -> REF_145.end
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_146', '_now'] 
RETURN TMP_128"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_148(F3Ddatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.strt
TMP_129(uint256) = REF_149 + rndGap_
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_129', '_now'] 
RETURN TMP_130"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 748.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.strt
TMP_264(uint256) = REF_437 + rndGap_
TMP_265(bool) = _now > TMP_264
REF_438(F3Ddatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.end
TMP_266(bool) = _now <= REF_439
REF_440(F3Ddatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.end
TMP_267(bool) = _now > REF_441
REF_442(F3Ddatasets.Round) -> round_[_rID]
REF_443(uint256) -> REF_442.plyr
TMP_268(bool) = REF_443 == 0
TMP_269(bool) = TMP_267 && TMP_268
TMP_270(bool) = TMP_266 || TMP_269
TMP_271(bool) = TMP_265 && TMP_270
CONDITION TMP_271"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_444(F3Ddatasets.Round) -> round_[_rID]
REF_445(uint256) -> REF_444.keys
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_445', '_keys'] 
TMP_273(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_272', '_keys'] 
RETURN TMP_273"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_274(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_274"];
}
// Function: 748.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,Not Active!)

IRs:
TMP_441(bool) = activated_ == True
TMP_442(None) = SOLIDITY_CALL require(bool,string)(TMP_441,Not Active!)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 748.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,Not Human)

IRs:
TMP_443(bool) = _codeLength == 0
TMP_444(None) = SOLIDITY_CALL require(bool,string)(TMP_443,Not Human)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 748.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,Too Less)

IRs:
TMP_445(bool) = _eth >= 1000000000
TMP_446(None) = SOLIDITY_CALL require(bool,string)(TMP_445,Too Less)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,Too More)

IRs:
TMP_447(bool) = _eth <= 100000000000000000000000
TMP_448(None) = SOLIDITY_CALL require(bool,string)(TMP_447,Too More)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 748.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_489(F3Ddatasets.Player) -> plyr_[_pID]
REF_490(uint256) -> REF_489.lrnd
TMP_300(bool) = REF_490 != 0
CONDITION TMP_300"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_491(F3Ddatasets.Player) -> plyr_[_pID]
REF_492(uint256) -> REF_491.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_492)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_493(F3Ddatasets.Player) -> plyr_[_pID]
REF_494(uint256) -> REF_493.lrnd
REF_494(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_495(uint256) -> _eventData_.compressedData
REF_496(uint256) -> _eventData_.compressedData
TMP_302(uint256) = REF_496 + 10
REF_495(uint256) (->_eventData_) := TMP_302(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 748.sol-FoMo3Dlong-modCEOAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != newCEO,CEO Can not be 0)

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = TMP_13 != newCEO
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,CEO Can not be 0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(ceo == msg.sender,only ceo can modify ceo)

IRs:
TMP_16(bool) = ceo == msg.sender
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,only ceo can modify ceo)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ceo = newCEO

IRs:
ceo(address) := newCEO(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
4->1;
}
// Function: 748.sol-FoMo3Dlong-modCFOAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != newCFO,CFO Can not be 0)

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = TMP_19 != newCFO
TMP_21(None) = SOLIDITY_CALL require(bool,string)(TMP_20,CFO Can not be 0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(cfo == msg.sender,only cfo can modify cfo)

IRs:
TMP_22(bool) = cfo == msg.sender
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,only cfo can modify cfo)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cfo = newCFO

IRs:
cfo(address) := newCFO(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
4->1;
}
// Function: 748.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_293(F3Ddatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.strt
TMP_182(uint256) = REF_294 + rndGap_
TMP_183(bool) = _now > TMP_182
REF_295(F3Ddatasets.Round) -> round_[_rID]
REF_296(uint256) -> REF_295.end
TMP_184(bool) = _now <= REF_296
REF_297(F3Ddatasets.Round) -> round_[_rID]
REF_298(uint256) -> REF_297.end
TMP_185(bool) = _now > REF_298
REF_299(F3Ddatasets.Round) -> round_[_rID]
REF_300(uint256) -> REF_299.plyr
TMP_186(bool) = REF_300 == 0
TMP_187(bool) = TMP_185 && TMP_186
TMP_188(bool) = TMP_184 || TMP_187
TMP_189(bool) = TMP_183 && TMP_188
CONDITION TMP_189"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_301(F3Ddatasets.Player) -> plyr_[_pID]
REF_302(uint256) -> REF_301.gen
TMP_190(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_190', '_eth'] 
REF_302(uint256) (->plyr_) := TMP_191(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_304(F3Ddatasets.Round) -> round_[_rID]
REF_305(uint256) -> REF_304.end
TMP_193(bool) = _now > REF_305
REF_306(F3Ddatasets.Round) -> round_[_rID]
REF_307(bool) -> REF_306.ended
TMP_194(bool) = REF_307 == False
TMP_195(bool) = TMP_193 && TMP_194
CONDITION TMP_195"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_308(F3Ddatasets.Round) -> round_[_rID]
REF_309(bool) -> REF_308.ended
REF_309(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_196(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_196(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_310(uint256) -> _eventData_.compressedData
REF_311(uint256) -> _eventData_.compressedData
TMP_197(uint256) = _now * 1000000000000000000
TMP_198(uint256) = REF_311 + TMP_197
REF_310(uint256) (->_eventData_) := TMP_198(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_312(uint256) -> _eventData_.compressedIDs
REF_313(uint256) -> _eventData_.compressedIDs
TMP_199(uint256) = REF_313 + _pID
REF_312(uint256) (->_eventData_) := TMP_199(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_315(F3Ddatasets.Player) -> plyr_[_pID]
REF_316(bytes32) -> REF_315.name
REF_317(uint256) -> _eventData_.compressedData
REF_318(uint256) -> _eventData_.compressedIDs
REF_319(address) -> _eventData_.winnerAddr
REF_320(bytes32) -> _eventData_.winnerName
REF_321(uint256) -> _eventData_.amountWon
REF_322(uint256) -> _eventData_.newPot
REF_323(uint256) -> _eventData_.P3DAmount
REF_324(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_316,REF_317,REF_318,REF_319,REF_320,REF_321,REF_322,REF_323,REF_324)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 748.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_65 = CONVERT 0 to address
TMP_66(bool) = _affCode == TMP_65
TMP_67(bool) = _affCode == msg.sender
TMP_68(bool) = TMP_66 || TMP_67
CONDITION TMP_68"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_69(bool) = _affID != REF_56
CONDITION TMP_69"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_70(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_70(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 748.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_56(bool) = _affCode == 0
TMP_57(bool) = _affCode == _pID
TMP_58(bool) = TMP_56 || TMP_57
CONDITION TMP_58"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_59(bool) = _affCode != REF_48
CONDITION TMP_59"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_60(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_60(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 748.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_75(bool) = _affCode == 
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_76(bool) = _affCode == REF_61
TMP_77(bool) = TMP_75 || TMP_76
CONDITION TMP_77"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_78(bool) = _affID != REF_66
CONDITION TMP_78"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_79(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_79(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 748.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_275 = CONVERT PlayerBook to address
TMP_276(bool) = msg.sender == TMP_275
TMP_277(None) = SOLIDITY_CALL require(bool,string)(TMP_276,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_449(uint256) -> pIDxAddr_[_addr]
TMP_278(bool) = REF_449 != _pID
CONDITION TMP_278"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_450(uint256) -> pIDxAddr_[_addr]
REF_450(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_451(uint256) -> pIDxName_[_name]
TMP_279(bool) = REF_451 != _pID
CONDITION TMP_279"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_452(uint256) -> pIDxName_[_name]
REF_452(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_453(F3Ddatasets.Player) -> plyr_[_pID]
REF_454(address) -> REF_453.addr
TMP_280(bool) = REF_454 != _addr
CONDITION TMP_280"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_455(F3Ddatasets.Player) -> plyr_[_pID]
REF_456(address) -> REF_455.addr
REF_456(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_pID]
REF_458(bytes32) -> REF_457.name
TMP_281(bool) = REF_458 != _name
CONDITION TMP_281"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_459(F3Ddatasets.Player) -> plyr_[_pID]
REF_460(bytes32) -> REF_459.name
REF_460(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_461(F3Ddatasets.Player) -> plyr_[_pID]
REF_462(uint256) -> REF_461.laff
TMP_282(bool) = REF_462 != _laff
CONDITION TMP_282"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_463(F3Ddatasets.Player) -> plyr_[_pID]
REF_464(uint256) -> REF_463.laff
REF_464(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_465(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_466(bool) -> REF_465[_name]
TMP_283(bool) = REF_466 == False
CONDITION TMP_283"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_467(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_468(bool) -> REF_467[_name]
REF_468(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 748.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_284 = CONVERT PlayerBook to address
TMP_285(bool) = msg.sender == TMP_284
TMP_286(None) = SOLIDITY_CALL require(bool,string)(TMP_285,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_469(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_470(bool) -> REF_469[_name]
TMP_287(bool) = REF_470 == False
CONDITION TMP_287"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_471(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_472(bool) -> REF_471[_name]
REF_472(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 748.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_103(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_103(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_105(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_105(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_107(F3Ddatasets.Player) -> plyr_[_affID]
REF_108(address) -> REF_107.addr
REF_109(F3Ddatasets.Player) -> plyr_[_affID]
REF_110(bytes32) -> REF_109.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_108,REF_110,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 748.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_107(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_107(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_114(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_114(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_116(F3Ddatasets.Player) -> plyr_[_affID]
REF_117(address) -> REF_116.addr
REF_118(F3Ddatasets.Player) -> plyr_[_affID]
REF_119(bytes32) -> REF_118.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_117,REF_119,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 748.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_111(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_111(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_123(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_123(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_125(F3Ddatasets.Player) -> plyr_[_affID]
REF_126(address) -> REF_125.addr
REF_127(F3Ddatasets.Player) -> plyr_[_affID]
REF_128(bytes32) -> REF_127.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_126,REF_128,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 748.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0xa6fd21aa986247357f404aa37a7bc90809da1ad8)

IRs:
TMP_440 = CONVERT 953337489247976678066188966083927352807905696472 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_440(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Must Be Hit 4D

IRs:
name(string) := Must Be Hit 4D(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = MBT4D

IRs:
symbol(string) := MBT4D(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 43200

IRs:
rndMax_(uint256) := 43200(uint256)"];
}
// Function: 748.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 30

IRs:
rndExtra_(uint256) := 30(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 30

IRs:
rndGap_(uint256) := 30(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 748.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_336(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_336(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_337(bool) = _earnings > 0
CONDITION TMP_337"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_559(F3Ddatasets.Player) -> plyr_[_pID]
REF_560(uint256) -> REF_559.gen
REF_562(F3Ddatasets.Player) -> plyr_[_pID]
REF_563(uint256) -> REF_562.gen
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_563'] 
REF_560(uint256) (->plyr_) := TMP_338(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_564(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_565(F3Ddatasets.PlayerRounds) -> REF_564[_rIDlast]
REF_566(uint256) -> REF_565.mask
REF_568(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_569(F3Ddatasets.PlayerRounds) -> REF_568[_rIDlast]
REF_570(uint256) -> REF_569.mask
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_570'] 
REF_566(uint256) (->plyrRnds_) := TMP_339(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 748.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_639(F3Ddatasets.Round) -> round_[_rID]
REF_640(uint256) -> REF_639.keys
TMP_409(uint256) = TMP_408 / REF_640
_ppt(uint256) := TMP_409(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_641(F3Ddatasets.Round) -> round_[_rID]
REF_642(uint256) -> REF_641.mask
REF_644(F3Ddatasets.Round) -> round_[_rID]
REF_645(uint256) -> REF_644.mask
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_645'] 
REF_642(uint256) (->round_) := TMP_410(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_412(uint256) = TMP_411 / 1000000000000000000
_pearn(uint256) := TMP_412(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_647(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_648(F3Ddatasets.PlayerRounds) -> REF_647[_rID]
REF_649(uint256) -> REF_648.mask
REF_650(F3Ddatasets.Round) -> round_[_rID]
REF_651(uint256) -> REF_650.mask
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_651', '_keys'] 
TMP_414(uint256) = TMP_413 / 1000000000000000000
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_414', '_pearn'] 
REF_655(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_656(F3Ddatasets.PlayerRounds) -> REF_655[_rID]
REF_657(uint256) -> REF_656.mask
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_415', 'REF_657'] 
REF_649(uint256) (->plyrRnds_) := TMP_416(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_660(F3Ddatasets.Round) -> round_[_rID]
REF_661(uint256) -> REF_660.keys
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_661'] 
TMP_418(uint256) = TMP_417 / 1000000000000000000
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_418'] 
RETURN TMP_419"];
}
// Function: 748.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_571(F3Ddatasets.Round) -> round_[_rID]
REF_572(uint256) -> REF_571.end
TMP_340(bool) = _now > REF_572
REF_573(F3Ddatasets.Round) -> round_[_rID]
REF_574(uint256) -> REF_573.plyr
TMP_341(bool) = REF_574 == 0
TMP_342(bool) = TMP_340 && TMP_341
CONDITION TMP_342"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_343(uint256) = _keys / 1000000000000000000
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_343', 'rndInc_'] 
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_344', '_now'] 
_newTime(uint256) := TMP_345(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_346(uint256) = _keys / 1000000000000000000
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_346', 'rndInc_'] 
REF_579(F3Ddatasets.Round) -> round_[_rID]
REF_580(uint256) -> REF_579.end
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_347', 'REF_580'] 
_newTime(uint256) := TMP_348(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_350(bool) = _newTime < TMP_349
CONDITION TMP_350"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_582(F3Ddatasets.Round) -> round_[_rID]
REF_583(uint256) -> REF_582.end
REF_583(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_584(F3Ddatasets.Round) -> round_[_rID]
REF_585(uint256) -> REF_584.end
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_585(uint256) (->round_) := TMP_351(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 748.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_297(bool) = _team < 0
TMP_298(bool) = _team > 3
TMP_299(bool) = TMP_297 || TMP_298
CONDITION TMP_299"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 748.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_84(bool) = _now > REF_71
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_85(bool) = REF_73 == False
TMP_86(bool) = TMP_84 && TMP_85
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_87(bool) = REF_75 != 0
TMP_88(bool) = TMP_86 && TMP_87
CONDITION TMP_88"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(F3Ddatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_89(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_89(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_90(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_90(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_91(bool) = _eth > 0
CONDITION TMP_91"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_78(F3Ddatasets.Player) -> plyr_[_pID]
REF_79(address) -> REF_78.addr
Transfer dest:REF_79 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_81(uint256) -> _eventData_.compressedData
REF_82(uint256) -> _eventData_.compressedData
TMP_93(uint256) = _now * 1000000000000000000
TMP_94(uint256) = REF_82 + TMP_93
REF_81(uint256) (->_eventData_) := TMP_94(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_83(uint256) -> _eventData_.compressedIDs
REF_84(uint256) -> _eventData_.compressedIDs
TMP_95(uint256) = REF_84 + _pID
REF_83(uint256) (->_eventData_) := TMP_95(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(bytes32) -> REF_86.name
REF_88(uint256) -> _eventData_.compressedData
REF_89(uint256) -> _eventData_.compressedIDs
REF_90(address) -> _eventData_.winnerAddr
REF_91(bytes32) -> _eventData_.winnerName
REF_92(uint256) -> _eventData_.amountWon
REF_93(uint256) -> _eventData_.newPot
REF_94(uint256) -> _eventData_.P3DAmount
REF_95(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_87,_eth,REF_88,REF_89,REF_90,REF_91,REF_92,REF_93,REF_94,REF_95)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_97(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_97(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_98(bool) = _eth > 0
CONDITION TMP_98"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(address) -> REF_96.addr
Transfer dest:REF_97 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_100(F3Ddatasets.Player) -> plyr_[_pID]
REF_101(bytes32) -> REF_100.name
Emit onWithdraw(_pID,msg.sender,REF_101,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
}
// Function: 748.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_662(F3Ddatasets.Player) -> plyr_[_pID]
REF_663(uint256) -> REF_662.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_663)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_664(F3Ddatasets.Player) -> plyr_[_pID]
REF_665(uint256) -> REF_664.win
REF_667(F3Ddatasets.Player) -> plyr_[_pID]
REF_668(uint256) -> REF_667.gen
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_665', 'REF_668'] 
REF_670(F3Ddatasets.Player) -> plyr_[_pID]
REF_671(uint256) -> REF_670.aff
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_421', 'REF_671'] 
_earnings(uint256) := TMP_422(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_423(bool) = _earnings > 0
CONDITION TMP_423"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_672(F3Ddatasets.Player) -> plyr_[_pID]
REF_673(uint256) -> REF_672.win
REF_673(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_674(F3Ddatasets.Player) -> plyr_[_pID]
REF_675(uint256) -> REF_674.gen
REF_675(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_676(F3Ddatasets.Player) -> plyr_[_pID]
REF_677(uint256) -> REF_676.aff
REF_677(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 748.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_470 = CONVERT _input to bytes
_temp(bytes) := TMP_470(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_713 -> LENGTH _temp
_length(uint256) := REF_713(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,Invalid Length)

IRs:
TMP_471(bool) = _length <= 32
TMP_472(bool) = _length > 0
TMP_473(bool) = TMP_471 && TMP_472
TMP_474(None) = SOLIDITY_CALL require(bool,string)(TMP_473,Invalid Length)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,Can NOT start with SPACE)

IRs:
REF_714(None) -> _temp[0]
TMP_475(bool) = REF_714 != 32
TMP_476(uint256) = _length - 1
REF_715(None) -> _temp[TMP_476]
TMP_477(bool) = REF_715 != 32
TMP_478(bool) = TMP_475 && TMP_477
TMP_479(None) = SOLIDITY_CALL require(bool,string)(TMP_478,Can NOT start with SPACE)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_716(None) -> _temp[0]
TMP_480(bool) = REF_716 == 48
CONDITION TMP_480"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,CAN NOT Start With 0x)

IRs:
REF_717(None) -> _temp[1]
TMP_481(bool) = REF_717 != 120
TMP_482(None) = SOLIDITY_CALL require(bool,string)(TMP_481,CAN NOT Start With 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,CAN NOT Start With 0X)

IRs:
REF_718(None) -> _temp[1]
TMP_483(bool) = REF_718 != 88
TMP_484(None) = SOLIDITY_CALL require(bool,string)(TMP_483,CAN NOT Start With 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_485(bool) = i < _length
CONDITION TMP_485"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_719(None) -> _temp[i]
TMP_486(bool) = REF_719 > 64
REF_720(None) -> _temp[i]
TMP_487(bool) = REF_720 < 91
TMP_488(bool) = TMP_486 && TMP_487
CONDITION TMP_488"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_721(bytes1) -> _temp[i]
REF_722(None) -> _temp[i]
TMP_489 = CONVERT REF_722 to uint256
TMP_490(uint256) = TMP_489 + 32
TMP_491 = CONVERT TMP_490 to bytes1
REF_721(bytes1) (->_temp) := TMP_491(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_492(bool) = _hasNonNumber == False
CONDITION TMP_492"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),Include Illegal Characters!)

IRs:
REF_723(None) -> _temp[i]
TMP_493(bool) = REF_723 == 32
REF_724(None) -> _temp[i]
TMP_494(bool) = REF_724 > 96
REF_725(None) -> _temp[i]
TMP_495(bool) = REF_725 < 123
TMP_496(bool) = TMP_494 && TMP_495
TMP_497(bool) = TMP_493 || TMP_496
REF_726(None) -> _temp[i]
TMP_498(bool) = REF_726 > 47
REF_727(None) -> _temp[i]
TMP_499(bool) = REF_727 < 58
TMP_500(bool) = TMP_498 && TMP_499
TMP_501(bool) = TMP_497 || TMP_500
TMP_502(None) = SOLIDITY_CALL require(bool,string)(TMP_501,Include Illegal Characters!)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_728(None) -> _temp[i]
TMP_503(bool) = REF_728 == 32
CONDITION TMP_503"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,ONLY One Space Allowed)

IRs:
TMP_504(uint256) = i + 1
REF_729(None) -> _temp[TMP_504]
TMP_505(bool) = REF_729 != 32
TMP_506(None) = SOLIDITY_CALL require(bool,string)(TMP_505,ONLY One Space Allowed)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_507(bool) = _hasNonNumber == False
REF_730(None) -> _temp[i]
TMP_508(bool) = REF_730 < 48
REF_731(None) -> _temp[i]
TMP_509(bool) = REF_731 > 57
TMP_510(bool) = TMP_508 || TMP_509
TMP_511(bool) = TMP_507 && TMP_510
CONDITION TMP_511"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_512(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,All Numbers Not Allowed)

IRs:
TMP_513(bool) = _hasNonNumber == True
TMP_514(None) = SOLIDITY_CALL require(bool,string)(TMP_513,All Numbers Not Allowed)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 748.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 748.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 748.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 748.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 748.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 748.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 748.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 748.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 748.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_523(uint256) = a + b
c(uint256) := TMP_523(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,Add Failed)

IRs:
TMP_524(bool) = c >= a
TMP_525(None) = SOLIDITY_CALL require(bool,string)(TMP_524,Add Failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 748.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_515(bool) = a == 0
CONDITION TMP_515"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_516(uint256) = a * b
c(uint256) := TMP_516(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,Mul Failed)

IRs:
TMP_517(uint256) = c / a
TMP_518(bool) = TMP_517 == b
TMP_519(None) = SOLIDITY_CALL require(bool,string)(TMP_518,Mul Failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 748.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_532(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_532"];
}
// Function: 748.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_526(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_527(uint256) = TMP_526 / 2
z(uint256) := TMP_527(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_528(bool) = z < y
CONDITION TMP_528"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_529(uint256) = x / z
TMP_530(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_529,z)
TMP_531(uint256) = TMP_530 / 2
z(uint256) := TMP_531(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 748.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,Sub Failed)

IRs:
TMP_520(bool) = b <= a
TMP_521(None) = SOLIDITY_CALL require(bool,string)(TMP_520,Sub Failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_522(uint256) = a - b
RETURN TMP_522"];
}
}
