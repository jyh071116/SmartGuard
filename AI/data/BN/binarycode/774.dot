digraph G {
// Function: 774.sol-BankInterfaceForForwarder-deposit()
digraph{
}
// Function: 774.sol-FDDKeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_408'] 
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_410'] 
TMP_412(uint256) = TMP_411 / 2
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_409', 'TMP_412'] 
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_415(uint256) = TMP_413 / TMP_414
RETURN TMP_415"];
}
// Function: 774.sol-FDDKeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_398(uint256) = INTERNAL_CALL, FDDKeysCalc.eth(uint256)(_curKeys)
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_400(uint256) = INTERNAL_CALL, FDDKeysCalc.eth(uint256)(TMP_399)
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_398', 'TMP_400'] 
RETURN TMP_401"];
}
// Function: 774.sol-FDDKeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_402', '312500000000000000000000000'] 
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_403', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_404'] 
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_405', '74999921875000000000000000000000'] 
TMP_407(uint256) = TMP_406 / 156250000
RETURN TMP_407"];
}
// Function: 774.sol-FDDKeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_395(uint256) = INTERNAL_CALL, FDDKeysCalc.keys(uint256)(TMP_394)
TMP_396(uint256) = INTERNAL_CALL, FDDKeysCalc.keys(uint256)(_curEth)
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_395', 'TMP_396'] 
RETURN TMP_397"];
}
// Function: 774.sol-FomoDD-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_377(bool) = msg.sender == admin
TMP_378(None) = SOLIDITY_CALL require(bool)(TMP_377)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FomoDD already activated)

IRs:
TMP_379(bool) = activated_ == False
TMP_380(None) = SOLIDITY_CALL require(bool,string)(TMP_379,FomoDD already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round[1].strt = now + rndExtra_

IRs:
REF_635(FDDdatasets.Round) -> round[1]
REF_636(uint256) -> REF_635.strt
TMP_381(uint256) = now + rndExtra_
REF_636(uint256) (->round) := TMP_381(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round[1].end = now + rndInit_ + rndExtra_

IRs:
REF_637(FDDdatasets.Round) -> round[1]
REF_638(uint256) -> REF_637.end
TMP_382(uint256) = now + rndInit_
TMP_383(uint256) = TMP_382 + rndExtra_
REF_638(uint256) (->round) := TMP_383(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_ = round[1]

IRs:
REF_639(FDDdatasets.Round) -> round[1]
round_(FDDdatasets.Round) := REF_639(FDDdatasets.Round)"];
}
// Function: 774.sol-FomoDD-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_311(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_312(bytes32) = SOLIDITY_CALL keccak256()(TMP_311)
TMP_313 = CONVERT TMP_312 to uint256
TMP_314(uint256) = TMP_313 / now
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_310', 'TMP_314'] 
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_315', 'block.gaslimit'] 
TMP_317(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_318(bytes32) = SOLIDITY_CALL keccak256()(TMP_317)
TMP_319 = CONVERT TMP_318 to uint256
TMP_320(uint256) = TMP_319 / now
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_316', 'TMP_320'] 
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_321', 'block.number'] 
TMP_323(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_322)
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(TMP_323)
TMP_325 = CONVERT TMP_324 to uint256
seed(uint256) := TMP_325(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_326(uint256) = seed / 1000
TMP_327(uint256) = TMP_326 * 1000
TMP_328(uint256) = seed - TMP_327
TMP_329(bool) = TMP_328 < airDropTracker_
CONDITION TMP_329"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 774.sol-FomoDD-buyCore(uint256,uint256,FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round[_rID].strt + rndGap_ && (_now <= round[_rID].end || (_now > round[_rID].end && round[_rID].plyr == 0))

IRs:
REF_229(FDDdatasets.Round) -> round[_rID]
REF_230(uint256) -> REF_229.strt
TMP_136(uint256) = REF_230 + rndGap_
TMP_137(bool) = _now > TMP_136
REF_231(FDDdatasets.Round) -> round[_rID]
REF_232(uint256) -> REF_231.end
TMP_138(bool) = _now <= REF_232
REF_233(FDDdatasets.Round) -> round[_rID]
REF_234(uint256) -> REF_233.end
TMP_139(bool) = _now > REF_234
REF_235(FDDdatasets.Round) -> round[_rID]
REF_236(uint256) -> REF_235.plyr
TMP_140(bool) = REF_236 == 0
TMP_141(bool) = TMP_139 && TMP_140
TMP_142(bool) = TMP_138 || TMP_141
TMP_143(bool) = TMP_137 && TMP_142
CONDITION TMP_143"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.core(uint256,uint256,uint256,uint256,FDDdatasets.EventReturns)(_rID,_pID,msg.value,_affID,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round[_rID].end && round[_rID].ended == false

IRs:
REF_237(FDDdatasets.Round) -> round[_rID]
REF_238(uint256) -> REF_237.end
TMP_145(bool) = _now > REF_238
REF_239(FDDdatasets.Round) -> round[_rID]
REF_240(bool) -> REF_239.ended
TMP_146(bool) = REF_240 == False
TMP_147(bool) = TMP_145 && TMP_146
CONDITION TMP_147"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round[_rID].ended = true

IRs:
REF_241(FDDdatasets.Round) -> round[_rID]
REF_242(bool) -> REF_241.ended
REF_242(bool) (->round) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_148(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.endRound(FDDdatasets.EventReturns)(_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_148(FDDdatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_243(uint256) -> _eventData_.compressedData
REF_244(uint256) -> _eventData_.compressedData
TMP_149(uint256) = _now * 1000000000000000000
TMP_150(uint256) = REF_244 + TMP_149
REF_243(uint256) (->_eventData_) := TMP_150(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_245(uint256) -> _eventData_.compressedIDs
REF_246(uint256) -> _eventData_.compressedIDs
TMP_151(uint256) = REF_246 + _pID
REF_245(uint256) (->_eventData_) := TMP_151(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
FDDEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_248(FDDdatasets.Player) -> plyr_[_pID]
REF_249(bytes32) -> REF_248.name
REF_250(uint256) -> _eventData_.compressedData
REF_251(uint256) -> _eventData_.compressedIDs
REF_252(address) -> _eventData_.winnerAddr
REF_253(bytes32) -> _eventData_.winnerName
REF_254(uint256) -> _eventData_.amountWon
REF_255(uint256) -> _eventData_.newPot
REF_256(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_249,msg.value,REF_250,REF_251,REF_252,REF_253,REF_254,REF_255,REF_256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_257(FDDdatasets.Player) -> plyr_[_pID]
REF_258(uint256) -> REF_257.gen
REF_259(FDDdatasets.Player) -> plyr_[_pID]
REF_260(uint256) -> REF_259.gen
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_260', 'msg.value'] 
REF_258(uint256) (->plyr_) := TMP_153(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 774.sol-FomoDD-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_14(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.determinePID(FDDdatasets.EventReturns)(_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_14(FDDdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_10(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_10(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_15 = CONVERT 0 to address
TMP_16(bool) = _affCode == TMP_15
TMP_17(bool) = _affCode == msg.sender
TMP_18(bool) = TMP_16 || TMP_17
CONDITION TMP_18"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_11(FDDdatasets.Player) -> plyr_[_pID]
REF_12(uint256) -> REF_11.laff
_affID(uint256) := REF_12(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_13(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_13(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_14(FDDdatasets.Player) -> plyr_[_pID]
REF_15(uint256) -> REF_14.laff
TMP_19(bool) = _affID != REF_15
CONDITION TMP_19"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_16(FDDdatasets.Player) -> plyr_[_pID]
REF_17(uint256) -> REF_16.laff
REF_17(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.buyCore(uint256,uint256,FDDdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoDD.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 774.sol-FomoDD-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_5(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.determinePID(FDDdatasets.EventReturns)(_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_5(FDDdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_3(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_3(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_6(bool) = _affCode == 0
TMP_7(bool) = _affCode == _pID
TMP_8(bool) = TMP_6 || TMP_7
CONDITION TMP_8"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_4(FDDdatasets.Player) -> plyr_[_pID]
REF_5(uint256) -> REF_4.laff
_affCode(uint256) := REF_5(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_6(FDDdatasets.Player) -> plyr_[_pID]
REF_7(uint256) -> REF_6.laff
TMP_9(bool) = _affCode != REF_7
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_8(FDDdatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
REF_9(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.buyCore(uint256,uint256,FDDdatasets.EventReturns)(_pID,_affCode,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoDD.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 774.sol-FomoDD-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_24(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.determinePID(FDDdatasets.EventReturns)(_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_24(FDDdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_18(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_18(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_25(bool) = _affCode == 
REF_19(FDDdatasets.Player) -> plyr_[_pID]
REF_20(bytes32) -> REF_19.name
TMP_26(bool) = _affCode == REF_20
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_21(FDDdatasets.Player) -> plyr_[_pID]
REF_22(uint256) -> REF_21.laff
_affID(uint256) := REF_22(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_23(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_23(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_24(FDDdatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
TMP_28(bool) = _affID != REF_25
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_26(FDDdatasets.Player) -> plyr_[_pID]
REF_27(uint256) -> REF_26.laff
REF_27(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.buyCore(uint256,uint256,FDDdatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoDD.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 774.sol-FomoDD-calcKeysReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round[_rID].strt + rndGap_ && (_now <= round[_rID].end || (_now > round[_rID].end && round[_rID].plyr == 0))

IRs:
REF_387(FDDdatasets.Round) -> round[_rID]
REF_388(uint256) -> REF_387.strt
TMP_224(uint256) = REF_388 + rndGap_
TMP_225(bool) = _now > TMP_224
REF_389(FDDdatasets.Round) -> round[_rID]
REF_390(uint256) -> REF_389.end
TMP_226(bool) = _now <= REF_390
REF_391(FDDdatasets.Round) -> round[_rID]
REF_392(uint256) -> REF_391.end
TMP_227(bool) = _now > REF_392
REF_393(FDDdatasets.Round) -> round[_rID]
REF_394(uint256) -> REF_393.plyr
TMP_228(bool) = REF_394 == 0
TMP_229(bool) = TMP_227 && TMP_228
TMP_230(bool) = TMP_226 || TMP_229
TMP_231(bool) = TMP_225 && TMP_230
CONDITION TMP_231"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round[_rID].eth).keysRec(_eth))

IRs:
REF_395(FDDdatasets.Round) -> round[_rID]
REF_396(uint256) -> REF_395.eth
TMP_232(uint256) = LIBRARY_CALL, dest:FDDKeysCalc, function:FDDKeysCalc.keysRec(uint256,uint256), arguments:['REF_396', '_eth'] 
RETURN TMP_232"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_eth).keys())

IRs:
TMP_233(uint256) = LIBRARY_CALL, dest:FDDKeysCalc, function:FDDKeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_233"];
}
// Function: 774.sol-FomoDD-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round[_rIDlast].mask).mul(plyrRnds[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds[_pID][_rIDlast].mask))

IRs:
REF_377(FDDdatasets.Round) -> round[_rIDlast]
REF_378(uint256) -> REF_377.mask
REF_380(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_381(FDDdatasets.PlayerRounds) -> REF_380[_rIDlast]
REF_382(uint256) -> REF_381.keys
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_378', 'REF_382'] 
TMP_222(uint256) = TMP_221 / 1000000000000000000
REF_384(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_385(FDDdatasets.PlayerRounds) -> REF_384[_rIDlast]
REF_386(uint256) -> REF_385.mask
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_222', 'REF_386'] 
RETURN TMP_223"];
}
// Function: 774.sol-FomoDD-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 774.sol-FomoDD-core(uint256,uint256,uint256,uint256,FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds[_pID][_rID].keys == 0

IRs:
REF_293(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_294(FDDdatasets.PlayerRounds) -> REF_293[_rID]
REF_295(uint256) -> REF_294.keys
TMP_173(bool) = REF_295 == 0
CONDITION TMP_173"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_174(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.managePlayer(uint256,FDDdatasets.EventReturns)(_pID,_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_174(FDDdatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round[_rID].eth < 100000000000000000000 && plyrRnds[_pID][_rID].eth.add(_eth) > 10000000000000000000

IRs:
REF_296(FDDdatasets.Round) -> round[_rID]
REF_297(uint256) -> REF_296.eth
TMP_175(bool) = REF_297 < 100000000000000000000
REF_298(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_299(FDDdatasets.PlayerRounds) -> REF_298[_rID]
REF_300(uint256) -> REF_299.eth
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_300', '_eth'] 
TMP_177(bool) = TMP_176 > 10000000000000000000
TMP_178(bool) = TMP_175 && TMP_177
CONDITION TMP_178"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (10000000000000000000).sub(plyrRnds[_pID][_rID].eth)

IRs:
REF_303(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_304(FDDdatasets.PlayerRounds) -> REF_303[_rID]
REF_305(uint256) -> REF_304.eth
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['10000000000000000000', 'REF_305'] 
_availableLimit(uint256) := TMP_179(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_180(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_307(FDDdatasets.Player) -> plyr_[_pID]
REF_308(uint256) -> REF_307.gen
REF_309(FDDdatasets.Player) -> plyr_[_pID]
REF_310(uint256) -> REF_309.gen
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_310', '_refund'] 
REF_308(uint256) (->plyr_) := TMP_181(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_182(bool) = _eth > 1000000000
CONDITION TMP_182"];
10->11[label="True"];
10->54[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round[_rID].eth).keysRec(_eth)

IRs:
REF_312(FDDdatasets.Round) -> round[_rID]
REF_313(uint256) -> REF_312.eth
TMP_183(uint256) = LIBRARY_CALL, dest:FDDKeysCalc, function:FDDKeysCalc.keysRec(uint256,uint256), arguments:['REF_313', '_eth'] 
_keys(uint256) := TMP_183(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_184(bool) = _keys >= 1000000000000000000
CONDITION TMP_184"];
12->13[label="True"];
12->18[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FomoDD.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round[_rID].plyr != _pID

IRs:
REF_315(FDDdatasets.Round) -> round[_rID]
REF_316(uint256) -> REF_315.plyr
TMP_186(bool) = REF_316 != _pID
CONDITION TMP_186"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round[_rID].plyr = _pID

IRs:
REF_317(FDDdatasets.Round) -> round[_rID]
REF_318(uint256) -> REF_317.plyr
REF_318(uint256) (->round) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_319(uint256) -> _eventData_.compressedData
REF_320(uint256) -> _eventData_.compressedData
TMP_187(uint256) = REF_320 + 100
REF_319(uint256) (->_eventData_) := TMP_187(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_188(bool) = _eth >= 100000000000000000
CONDITION TMP_188"];
19->20[label="True"];
19->45[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_189(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
airdrop() == true

IRs:
TMP_190(bool) = INTERNAL_CALL, FomoDD.airdrop()()
TMP_191(bool) = TMP_190 == True
CONDITION TMP_191"];
21->22[label="True"];
21->44[label="False"];
22[label="Node Type: NEW VARIABLE 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_192(bool) = _eth >= 10000000000000000000
CONDITION TMP_192"];
23->24[label="True"];
23->28[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_194(uint256) = TMP_193 / 100
_prize(uint256) := TMP_194(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_322(FDDdatasets.Player) -> plyr_[_pID]
REF_323(uint256) -> REF_322.win
REF_324(FDDdatasets.Player) -> plyr_[_pID]
REF_325(uint256) -> REF_324.win
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_325', '_prize'] 
REF_323(uint256) (->plyr_) := TMP_195(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_196(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_328(uint256) -> _eventData_.compressedData
REF_328(-> _eventData_) = REF_328 + 300000000000000000000000000000000"];
27->40;
28[label="Node Type: IF 28

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_197(bool) = _eth >= 1000000000000000000
TMP_198(bool) = _eth < 10000000000000000000
TMP_199(bool) = TMP_197 && TMP_198
CONDITION TMP_199"];
28->29[label="True"];
28->33[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_201(uint256) = TMP_200 / 100
_prize(uint256) := TMP_201(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_330(FDDdatasets.Player) -> plyr_[_pID]
REF_331(uint256) -> REF_330.win
REF_332(FDDdatasets.Player) -> plyr_[_pID]
REF_333(uint256) -> REF_332.win
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_333', '_prize'] 
REF_331(uint256) (->plyr_) := TMP_202(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_203(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_336(uint256) -> _eventData_.compressedData
REF_336(-> _eventData_) = REF_336 + 200000000000000000000000000000000"];
32->39;
33[label="Node Type: IF 33

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_204(bool) = _eth >= 100000000000000000
TMP_205(bool) = _eth < 1000000000000000000
TMP_206(bool) = TMP_204 && TMP_205
CONDITION TMP_206"];
33->34[label="True"];
33->38[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_208(uint256) = TMP_207 / 100
_prize(uint256) := TMP_208(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_338(FDDdatasets.Player) -> plyr_[_pID]
REF_339(uint256) -> REF_338.win
REF_340(FDDdatasets.Player) -> plyr_[_pID]
REF_341(uint256) -> REF_340.win
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_341', '_prize'] 
REF_339(uint256) (->plyr_) := TMP_209(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_210(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_eventData_.compressedData += 100000000000000000000000000000000

IRs:
REF_344(uint256) -> _eventData_.compressedData
REF_344(-> _eventData_) = REF_344 + 100000000000000000000000000000000"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_345(uint256) -> _eventData_.compressedData
REF_345(-> _eventData_) = REF_345 + 10000000000000000000000000000000"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_346(uint256) -> _eventData_.compressedData
TMP_211(uint256) = _prize * 1000000000000000000000000000000000
REF_346(-> _eventData_) = REF_346 + TMP_211"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_347(uint256) -> _eventData_.compressedData
REF_348(uint256) -> _eventData_.compressedData
TMP_212(uint256) = airDropTracker_ * 1000
TMP_213(uint256) = REF_348 + TMP_212
REF_347(uint256) (->_eventData_) := TMP_213(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
plyrRnds[_pID][_rID].keys = _keys.add(plyrRnds[_pID][_rID].keys)

IRs:
REF_349(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_350(FDDdatasets.PlayerRounds) -> REF_349[_rID]
REF_351(uint256) -> REF_350.keys
REF_353(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_354(FDDdatasets.PlayerRounds) -> REF_353[_rID]
REF_355(uint256) -> REF_354.keys
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_355'] 
REF_351(uint256) (->plyrRnds) := TMP_214(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
plyrRnds[_pID][_rID].eth = _eth.add(plyrRnds[_pID][_rID].eth)

IRs:
REF_356(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_357(FDDdatasets.PlayerRounds) -> REF_356[_rID]
REF_358(uint256) -> REF_357.eth
REF_360(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_361(FDDdatasets.PlayerRounds) -> REF_360[_rID]
REF_362(uint256) -> REF_361.eth
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_362'] 
REF_358(uint256) (->plyrRnds) := TMP_215(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
round[_rID].keys = _keys.add(round[_rID].keys)

IRs:
REF_363(FDDdatasets.Round) -> round[_rID]
REF_364(uint256) -> REF_363.keys
REF_366(FDDdatasets.Round) -> round[_rID]
REF_367(uint256) -> REF_366.keys
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_367'] 
REF_364(uint256) (->round) := TMP_216(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
round[_rID].eth = _eth.add(round[_rID].eth)

IRs:
REF_368(FDDdatasets.Round) -> round[_rID]
REF_369(uint256) -> REF_368.eth
REF_371(FDDdatasets.Round) -> round[_rID]
REF_372(uint256) -> REF_371.eth
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_372'] 
REF_369(uint256) (->round) := TMP_217(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
_eventData_ = distributeExternal(_pID,_eth,_affID,_eventData_)

IRs:
TMP_218(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.distributeExternal(uint256,uint256,uint256,FDDdatasets.EventReturns)(_pID,_eth,_affID,_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_218(FDDdatasets.EventReturns)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_keys,_eventData_)

IRs:
TMP_219(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.distributeInternal(uint256,uint256,uint256,uint256,FDDdatasets.EventReturns)(_rID,_pID,_eth,_keys,_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_219(FDDdatasets.EventReturns)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
endTx(_pID,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.endTx(uint256,uint256,uint256,FDDdatasets.EventReturns)(_pID,_eth,_keys,_eventData_)"];
53->54;
54[label="Node Type: END_IF 54
"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
plyrRnds_[_pID] = plyrRnds[_pID][_rID]

IRs:
REF_373(FDDdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_374(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_375(FDDdatasets.PlayerRounds) -> REF_374[_rID]
REF_373(FDDdatasets.PlayerRounds) (->plyrRnds_) := REF_375(FDDdatasets.PlayerRounds)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
round_ = round[_rID]

IRs:
REF_376(FDDdatasets.Round) -> round[_rID]
round_(FDDdatasets.Round) := REF_376(FDDdatasets.Round)"];
}
// Function: 774.sol-FomoDD-determinePID(FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_436(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_436(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_258(bool) = _pID == 0
CONDITION TMP_258"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_259(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_259(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_260(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_260(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_261(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_261(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_440(uint256) -> pIDxAddr_[msg.sender]
REF_440(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_441(FDDdatasets.Player) -> plyr_[_pID]
REF_442(address) -> REF_441.addr
REF_442(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_262(bool) = _name != 
CONDITION TMP_262"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_443(uint256) -> pIDxName_[_name]
REF_443(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_444(FDDdatasets.Player) -> plyr_[_pID]
REF_445(bytes32) -> REF_444.name
REF_445(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_446(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_447(bool) -> REF_446[_name]
REF_447(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_263(bool) = _laff != 0
TMP_264(bool) = _laff != _pID
TMP_265(bool) = TMP_263 && TMP_264
CONDITION TMP_265"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_448(FDDdatasets.Player) -> plyr_[_pID]
REF_449(uint256) -> REF_448.laff
REF_449(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_450(uint256) -> _eventData_.compressedData
REF_451(uint256) -> _eventData_.compressedData
TMP_266(uint256) = REF_451 + 1
REF_450(uint256) (->_eventData_) := TMP_266(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 774.sol-FomoDD-distributeExternal(uint256,uint256,uint256,FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth * 5 / 100

IRs:
TMP_330(uint256) = _eth * 5
TMP_331(uint256) = TMP_330 / 100
_com(uint256) := TMP_331(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth * 10 / 100

IRs:
TMP_332(uint256) = _eth * 10
TMP_333(uint256) = TMP_332 / 100
_aff(uint256) := TMP_333(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_334(bool) = _affID != _pID
REF_547(FDDdatasets.Player) -> plyr_[_affID]
REF_548(bytes32) -> REF_547.name
TMP_335(bool) = REF_548 != 
TMP_336(bool) = TMP_334 && TMP_335
CONDITION TMP_336"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_549(FDDdatasets.Player) -> plyr_[_affID]
REF_550(uint256) -> REF_549.aff
REF_552(FDDdatasets.Player) -> plyr_[_affID]
REF_553(uint256) -> REF_552.aff
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_553'] 
REF_550(uint256) (->plyr_) := TMP_337(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
FDDEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now)

IRs:
REF_555(FDDdatasets.Player) -> plyr_[_affID]
REF_556(address) -> REF_555.addr
REF_557(FDDdatasets.Player) -> plyr_[_affID]
REF_558(bytes32) -> REF_557.name
Emit onAffiliatePayout(_affID,REF_556,REF_558,_pID,_aff,now)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_com += _aff

IRs:
_com(uint256) = _com + _aff"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! address(Bank).call.value(_com)(bytes4(keccak256()(deposit())))

IRs:
TMP_339 = CONVERT Bank to address
TMP_341(bytes32) = SOLIDITY_CALL keccak256()(deposit())
TMP_342 = CONVERT TMP_341 to bytes4
TMP_343(bool) = LOW_LEVEL_CALL, dest:TMP_339, function:call, arguments:['TMP_342'] value:_com 
TMP_344 = UnaryType.BANG TMP_343 
CONDITION TMP_344"];
8->9[label="True"];
8->9[label="False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 774.sol-FomoDD-distributeInternal(uint256,uint256,uint256,uint256,FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_)) / 100

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'fees_'] 
TMP_346(uint256) = TMP_345 / 100
_gen(uint256) := TMP_346(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 20)

IRs:
TMP_347(uint256) = _eth / 20
_air(uint256) := TMP_347(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_348(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = (_eth.mul(20) / 100)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '20'] 
TMP_350(uint256) = TMP_349 / 100
_pot(uint256) := TMP_350(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_351(uint256) = INTERNAL_CALL, FomoDD.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_351(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_352(bool) = _dust > 0
CONDITION TMP_352"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_353(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round[_rID].pot = _pot.add(_dust).add(round[_rID].pot)

IRs:
REF_565(FDDdatasets.Round) -> round[_rID]
REF_566(uint256) -> REF_565.pot
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_569(FDDdatasets.Round) -> round[_rID]
REF_570(uint256) -> REF_569.pot
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_354', 'REF_570'] 
REF_566(uint256) (->round) := TMP_355(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_571(uint256) -> _eventData_.genAmount
REF_573(uint256) -> _eventData_.genAmount
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_573'] 
REF_571(uint256) (->_eventData_) := TMP_356(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_574(uint256) -> _eventData_.potAmount
REF_574(uint256) (->_eventData_) := _pot(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_ = round[_rID]

IRs:
REF_575(FDDdatasets.Round) -> round[_rID]
round_(FDDdatasets.Round) := REF_575(FDDdatasets.Round)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 774.sol-FomoDD-endRound(FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round[_rID].plyr

IRs:
REF_460(FDDdatasets.Round) -> round[_rID]
REF_461(uint256) -> REF_460.plyr
_winPID(uint256) := REF_461(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pot = round[_rID].pot

IRs:
REF_462(FDDdatasets.Round) -> round[_rID]
REF_463(uint256) -> REF_462.pot
_pot(uint256) := REF_463(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_win = (_pot.mul(45)) / 100

IRs:
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '45'] 
TMP_271(uint256) = TMP_270 / 100
_win(uint256) := TMP_271(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_com = (_pot / 10)

IRs:
TMP_272(uint256) = _pot / 10
_com(uint256) := TMP_272(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_gen = (_pot.mul(potSplit_)) / 100

IRs:
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'potSplit_'] 
TMP_274(uint256) = TMP_273 / 100
_gen(uint256) := TMP_274(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round[_rID].keys)

IRs:
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_467(FDDdatasets.Round) -> round[_rID]
REF_468(uint256) -> REF_467.keys
TMP_276(uint256) = TMP_275 / REF_468
_ppt(uint256) := TMP_276(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round[_rID].keys)) / 1000000000000000000)

IRs:
REF_471(FDDdatasets.Round) -> round[_rID]
REF_472(uint256) -> REF_471.keys
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_472'] 
TMP_278(uint256) = TMP_277 / 1000000000000000000
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_278'] 
_dust(uint256) := TMP_279(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_dust > 0

IRs:
TMP_280(bool) = _dust > 0
CONDITION TMP_280"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_281(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_com = _com.add(_dust)

IRs:
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_dust'] 
_com(uint256) := TMP_282(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_475(FDDdatasets.Player) -> plyr_[_winPID]
REF_476(uint256) -> REF_475.win
REF_478(FDDdatasets.Player) -> plyr_[_winPID]
REF_479(uint256) -> REF_478.win
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_479'] 
REF_476(uint256) (->plyr_) := TMP_283(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
round[_rID].mask = _ppt.add(round[_rID].mask)

IRs:
REF_480(FDDdatasets.Round) -> round[_rID]
REF_481(uint256) -> REF_480.mask
REF_483(FDDdatasets.Round) -> round[_rID]
REF_484(uint256) -> REF_483.mask
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_484'] 
REF_481(uint256) (->round) := TMP_284(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round[_rID].end * 1000000)

IRs:
REF_485(uint256) -> _eventData_.compressedData
REF_486(uint256) -> _eventData_.compressedData
REF_487(FDDdatasets.Round) -> round[_rID]
REF_488(uint256) -> REF_487.end
TMP_285(uint256) = REF_488 * 1000000
TMP_286(uint256) = REF_486 + TMP_285
REF_485(uint256) (->_eventData_) := TMP_286(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000)

IRs:
REF_489(uint256) -> _eventData_.compressedIDs
REF_490(uint256) -> _eventData_.compressedIDs
TMP_287(uint256) = _winPID * 100000000000000000000000000
TMP_288(uint256) = REF_490 + TMP_287
REF_489(uint256) (->_eventData_) := TMP_288(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_491(address) -> _eventData_.winnerAddr
REF_492(FDDdatasets.Player) -> plyr_[_winPID]
REF_493(address) -> REF_492.addr
REF_491(address) (->_eventData_) := REF_493(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_494(bytes32) -> _eventData_.winnerName
REF_495(FDDdatasets.Player) -> plyr_[_winPID]
REF_496(bytes32) -> REF_495.name
REF_494(bytes32) (->_eventData_) := REF_496(bytes32)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_497(uint256) -> _eventData_.amountWon
REF_497(uint256) (->_eventData_) := _win(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_498(uint256) -> _eventData_.genAmount
REF_498(uint256) (->_eventData_) := _gen(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.newPot = _com

IRs:
REF_499(uint256) -> _eventData_.newPot
REF_499(uint256) (->_eventData_) := _com(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
rID_ ++

IRs:
TMP_289(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_rID ++

IRs:
TMP_290(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
round[_rID].strt = now + rndExtra_

IRs:
REF_500(FDDdatasets.Round) -> round[_rID]
REF_501(uint256) -> REF_500.strt
TMP_291(uint256) = now + rndExtra_
REF_501(uint256) (->round) := TMP_291(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
round[_rID].end = now + rndInit_ + rndExtra_

IRs:
REF_502(FDDdatasets.Round) -> round[_rID]
REF_503(uint256) -> REF_502.end
TMP_292(uint256) = now + rndInit_
TMP_293(uint256) = TMP_292 + rndExtra_
REF_503(uint256) (->round) := TMP_293(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
round[_rID].pot = _com

IRs:
REF_504(FDDdatasets.Round) -> round[_rID]
REF_505(uint256) -> REF_504.pot
REF_505(uint256) (->round) := _com(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
round_ = round[_rID]

IRs:
REF_506(FDDdatasets.Round) -> round[_rID]
round_(FDDdatasets.Round) := REF_506(FDDdatasets.Round)"];
27->28;
28[label="Node Type: RETURN 28

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 774.sol-FomoDD-endTx(uint256,uint256,uint256,FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000)

IRs:
REF_620(uint256) -> _eventData_.compressedData
REF_621(uint256) -> _eventData_.compressedData
TMP_373(uint256) = now * 1000000000000000000
TMP_374(uint256) = REF_621 + TMP_373
REF_620(uint256) (->_eventData_) := TMP_374(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_622(uint256) -> _eventData_.compressedIDs
REF_623(uint256) -> _eventData_.compressedIDs
TMP_375(uint256) = REF_623 + _pID
REF_622(uint256) (->_eventData_) := TMP_375(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
FDDEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_625(uint256) -> _eventData_.compressedData
REF_626(uint256) -> _eventData_.compressedIDs
REF_627(FDDdatasets.Player) -> plyr_[_pID]
REF_628(bytes32) -> REF_627.name
REF_629(address) -> _eventData_.winnerAddr
REF_630(bytes32) -> _eventData_.winnerName
REF_631(uint256) -> _eventData_.amountWon
REF_632(uint256) -> _eventData_.newPot
REF_633(uint256) -> _eventData_.genAmount
REF_634(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_625,REF_626,REF_628,msg.sender,_eth,_keys,REF_629,REF_630,REF_631,REF_632,REF_633,REF_634,airDropPot_)"];
}
// Function: 774.sol-FomoDD-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_0(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.determinePID(FDDdatasets.EventReturns)(_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_0(FDDdatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_0(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_1(FDDdatasets.Player) -> plyr_[_pID]
REF_2(uint256) -> REF_1.laff
INTERNAL_CALL, FomoDD.buyCore(uint256,uint256,FDDdatasets.EventReturns)(_pID,REF_2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FomoDD.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 774.sol-FomoDD-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round[_rID].strt + rndGap_ && (_now <= round[_rID].end || (_now > round[_rID].end && round[_rID].plyr == 0))

IRs:
REF_112(FDDdatasets.Round) -> round[_rID]
REF_113(uint256) -> REF_112.strt
TMP_89(uint256) = REF_113 + rndGap_
TMP_90(bool) = _now > TMP_89
REF_114(FDDdatasets.Round) -> round[_rID]
REF_115(uint256) -> REF_114.end
TMP_91(bool) = _now <= REF_115
REF_116(FDDdatasets.Round) -> round[_rID]
REF_117(uint256) -> REF_116.end
TMP_92(bool) = _now > REF_117
REF_118(FDDdatasets.Round) -> round[_rID]
REF_119(uint256) -> REF_118.plyr
TMP_93(bool) = REF_119 == 0
TMP_94(bool) = TMP_92 && TMP_93
TMP_95(bool) = TMP_91 || TMP_94
TMP_96(bool) = TMP_90 && TMP_95
CONDITION TMP_96"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_120(FDDdatasets.Round) -> round[_rID]
REF_121(uint256) -> REF_120.keys
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_121', '1000000000000000000'] 
TMP_98(uint256) = LIBRARY_CALL, dest:FDDKeysCalc, function:FDDKeysCalc.ethRec(uint256,uint256), arguments:['TMP_97', '1000000000000000000'] 
RETURN TMP_98"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 774.sol-FomoDD-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round[_rID].keys,round[_rID].end,round[_rID].strt,round[_rID].pot,round[_rID].plyr,plyr_[round[_rID].plyr].addr,plyr_[round[_rID].plyr].name,airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_193(FDDdatasets.Round) -> round[_rID]
REF_194(uint256) -> REF_193.keys
REF_195(FDDdatasets.Round) -> round[_rID]
REF_196(uint256) -> REF_195.end
REF_197(FDDdatasets.Round) -> round[_rID]
REF_198(uint256) -> REF_197.strt
REF_199(FDDdatasets.Round) -> round[_rID]
REF_200(uint256) -> REF_199.pot
REF_201(FDDdatasets.Round) -> round[_rID]
REF_202(uint256) -> REF_201.plyr
REF_203(FDDdatasets.Round) -> round[_rID]
REF_204(uint256) -> REF_203.plyr
REF_205(FDDdatasets.Player) -> plyr_[REF_204]
REF_206(address) -> REF_205.addr
REF_207(FDDdatasets.Round) -> round[_rID]
REF_208(uint256) -> REF_207.plyr
REF_209(FDDdatasets.Player) -> plyr_[REF_208]
REF_210(bytes32) -> REF_209.name
TMP_129(uint256) = airDropPot_ * 1000
TMP_130(uint256) = airDropTracker_ + TMP_129
RETURN REF_194,REF_196,REF_198,REF_200,REF_202,REF_206,REF_210,TMP_130"];
}
// Function: 774.sol-FomoDD-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = _addr == TMP_131
CONDITION TMP_132"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_133(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_211(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_211(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds[_pID][_rID].eth)

IRs:
REF_212(FDDdatasets.Player) -> plyr_[_pID]
REF_213(bytes32) -> REF_212.name
REF_214(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_215(FDDdatasets.PlayerRounds) -> REF_214[_rID]
REF_216(uint256) -> REF_215.keys
REF_217(FDDdatasets.Player) -> plyr_[_pID]
REF_218(uint256) -> REF_217.win
REF_219(FDDdatasets.Player) -> plyr_[_pID]
REF_220(uint256) -> REF_219.gen
REF_222(FDDdatasets.Player) -> plyr_[_pID]
REF_223(uint256) -> REF_222.lrnd
TMP_134(uint256) = INTERNAL_CALL, FomoDD.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_223)
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_220', 'TMP_134'] 
REF_224(FDDdatasets.Player) -> plyr_[_pID]
REF_225(uint256) -> REF_224.aff
REF_226(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_227(FDDdatasets.PlayerRounds) -> REF_226[_rID]
REF_228(uint256) -> REF_227.eth
RETURN _pID,REF_213,REF_216,REF_218,TMP_135,REF_225,REF_228"];
}
// Function: 774.sol-FomoDD-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round[_rID].end && round[_rID].ended == false && round[_rID].plyr != 0

IRs:
REF_134(FDDdatasets.Round) -> round[_rID]
REF_135(uint256) -> REF_134.end
TMP_105(bool) = now > REF_135
REF_136(FDDdatasets.Round) -> round[_rID]
REF_137(bool) -> REF_136.ended
TMP_106(bool) = REF_137 == False
TMP_107(bool) = TMP_105 && TMP_106
REF_138(FDDdatasets.Round) -> round[_rID]
REF_139(uint256) -> REF_138.plyr
TMP_108(bool) = REF_139 != 0
TMP_109(bool) = TMP_107 && TMP_108
CONDITION TMP_109"];
2->3[label="True"];
2->8[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round[_rID].plyr == _pID

IRs:
REF_140(FDDdatasets.Round) -> round[_rID]
REF_141(uint256) -> REF_140.plyr
TMP_110(bool) = REF_141 == _pID
CONDITION TMP_110"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_142(FDDdatasets.Player) -> plyr_[_pID]
REF_143(uint256) -> REF_142.win
REF_145(FDDdatasets.Round) -> round[_rID]
REF_146(uint256) -> REF_145.pot
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_146', '48'] 
TMP_112(uint256) = TMP_111 / 100
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_143', 'TMP_112'] 
REF_148(FDDdatasets.Player) -> plyr_[_pID]
REF_149(uint256) -> REF_148.gen
TMP_114(uint256) = INTERNAL_CALL, FomoDD.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_152(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_153(FDDdatasets.PlayerRounds) -> REF_152[_rID]
REF_154(uint256) -> REF_153.mask
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_114', 'REF_154'] 
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_149', 'TMP_115'] 
REF_155(FDDdatasets.Player) -> plyr_[_pID]
REF_156(uint256) -> REF_155.aff
RETURN TMP_113,TMP_116,REF_156"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_157(FDDdatasets.Player) -> plyr_[_pID]
REF_158(uint256) -> REF_157.win
REF_159(FDDdatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.gen
TMP_117(uint256) = INTERNAL_CALL, FomoDD.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_163(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_164(FDDdatasets.PlayerRounds) -> REF_163[_rID]
REF_165(uint256) -> REF_164.mask
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', 'REF_165'] 
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', 'TMP_118'] 
REF_166(FDDdatasets.Player) -> plyr_[_pID]
REF_167(uint256) -> REF_166.aff
RETURN REF_158,TMP_119,REF_167"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrRnds_[_pID] = plyrRnds[_pID][_rID]

IRs:
REF_168(FDDdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_169(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_170(FDDdatasets.PlayerRounds) -> REF_169[_rID]
REF_168(FDDdatasets.PlayerRounds) (->plyrRnds_) := REF_170(FDDdatasets.PlayerRounds)"];
7->9;
8[label="Node Type: RETURN 8

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_171(FDDdatasets.Player) -> plyr_[_pID]
REF_172(uint256) -> REF_171.win
REF_173(FDDdatasets.Player) -> plyr_[_pID]
REF_174(uint256) -> REF_173.gen
REF_176(FDDdatasets.Player) -> plyr_[_pID]
REF_177(uint256) -> REF_176.lrnd
TMP_120(uint256) = INTERNAL_CALL, FomoDD.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_177)
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_174', 'TMP_120'] 
REF_178(FDDdatasets.Player) -> plyr_[_pID]
REF_179(uint256) -> REF_178.aff
RETURN REF_172,TMP_121,REF_179"];
9[label="Node Type: END_IF 9
"];
}
// Function: 774.sol-FomoDD-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round[_rID].mask).add(((((round[_rID].pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round[_rID].keys))).mul(plyrRnds[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_180(FDDdatasets.Round) -> round[_rID]
REF_181(uint256) -> REF_180.mask
REF_183(FDDdatasets.Round) -> round[_rID]
REF_184(uint256) -> REF_183.pot
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_184', 'potSplit_'] 
TMP_123(uint256) = TMP_122 / 100
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', '1000000000000000000'] 
REF_187(FDDdatasets.Round) -> round[_rID]
REF_188(uint256) -> REF_187.keys
TMP_125(uint256) = TMP_124 / REF_188
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_181', 'TMP_125'] 
REF_190(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_191(FDDdatasets.PlayerRounds) -> REF_190[_rID]
REF_192(uint256) -> REF_191.keys
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_126', 'REF_192'] 
TMP_128(uint256) = TMP_127 / 1000000000000000000
RETURN TMP_128"];
}
// Function: 774.sol-FomoDD-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round[_rID].end

IRs:
REF_124(FDDdatasets.Round) -> round[_rID]
REF_125(uint256) -> REF_124.end
TMP_99(bool) = _now < REF_125
CONDITION TMP_99"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round[_rID].strt + rndGap_

IRs:
REF_126(FDDdatasets.Round) -> round[_rID]
REF_127(uint256) -> REF_126.strt
TMP_100(uint256) = REF_127 + rndGap_
TMP_101(bool) = _now > TMP_100
CONDITION TMP_101"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round[_rID].end).sub(_now))

IRs:
REF_128(FDDdatasets.Round) -> round[_rID]
REF_129(uint256) -> REF_128.end
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_129', '_now'] 
RETURN TMP_102"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round[_rID].strt + rndGap_).sub(_now))

IRs:
REF_131(FDDdatasets.Round) -> round[_rID]
REF_132(uint256) -> REF_131.strt
TMP_103(uint256) = REF_132 + rndGap_
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_103', '_now'] 
RETURN TMP_104"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 774.sol-FomoDD-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round[_rID].strt + rndGap_ && (_now <= round[_rID].end || (_now > round[_rID].end && round[_rID].plyr == 0))

IRs:
REF_399(FDDdatasets.Round) -> round[_rID]
REF_400(uint256) -> REF_399.strt
TMP_234(uint256) = REF_400 + rndGap_
TMP_235(bool) = _now > TMP_234
REF_401(FDDdatasets.Round) -> round[_rID]
REF_402(uint256) -> REF_401.end
TMP_236(bool) = _now <= REF_402
REF_403(FDDdatasets.Round) -> round[_rID]
REF_404(uint256) -> REF_403.end
TMP_237(bool) = _now > REF_404
REF_405(FDDdatasets.Round) -> round[_rID]
REF_406(uint256) -> REF_405.plyr
TMP_238(bool) = REF_406 == 0
TMP_239(bool) = TMP_237 && TMP_238
TMP_240(bool) = TMP_236 || TMP_239
TMP_241(bool) = TMP_235 && TMP_240
CONDITION TMP_241"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_407(FDDdatasets.Round) -> round[_rID]
REF_408(uint256) -> REF_407.keys
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_408', '_keys'] 
TMP_243(uint256) = LIBRARY_CALL, dest:FDDKeysCalc, function:FDDKeysCalc.ethRec(uint256,uint256), arguments:['TMP_242', '_keys'] 
RETURN TMP_243"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_244(uint256) = LIBRARY_CALL, dest:FDDKeysCalc, function:FDDKeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_244"];
}
// Function: 774.sol-FomoDD-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet)

IRs:
TMP_386(bool) = activated_ == True
TMP_387(None) = SOLIDITY_CALL require(bool,string)(TMP_386,its not ready yet)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 774.sol-FomoDD-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,non smart contract address only)

IRs:
TMP_388(bool) = _codeLength == 0
TMP_389(None) = SOLIDITY_CALL require(bool,string)(TMP_388,non smart contract address only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 774.sol-FomoDD-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,too little money)

IRs:
TMP_390(bool) = _eth >= 1000000000
TMP_391(None) = SOLIDITY_CALL require(bool,string)(TMP_390,too little money)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,too much money)

IRs:
TMP_392(bool) = _eth <= 100000000000000000000000
TMP_393(None) = SOLIDITY_CALL require(bool,string)(TMP_392,too much money)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 774.sol-FomoDD-managePlayer(uint256,FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_452(FDDdatasets.Player) -> plyr_[_pID]
REF_453(uint256) -> REF_452.lrnd
TMP_267(bool) = REF_453 != 0
CONDITION TMP_267"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_454(FDDdatasets.Player) -> plyr_[_pID]
REF_455(uint256) -> REF_454.lrnd
INTERNAL_CALL, FomoDD.updateGenVault(uint256,uint256)(_pID,REF_455)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_456(FDDdatasets.Player) -> plyr_[_pID]
REF_457(uint256) -> REF_456.lrnd
REF_457(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_458(uint256) -> _eventData_.compressedData
REF_459(uint256) -> _eventData_.compressedData
TMP_269(uint256) = REF_459 + 10
REF_458(uint256) (->_eventData_) := TMP_269(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 774.sol-FomoDD-reLoadCore(uint256,uint256,uint256,FDDdatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round[_rID].strt + rndGap_ && (_now <= round[_rID].end || (_now > round[_rID].end && round[_rID].plyr == 0))

IRs:
REF_262(FDDdatasets.Round) -> round[_rID]
REF_263(uint256) -> REF_262.strt
TMP_154(uint256) = REF_263 + rndGap_
TMP_155(bool) = _now > TMP_154
REF_264(FDDdatasets.Round) -> round[_rID]
REF_265(uint256) -> REF_264.end
TMP_156(bool) = _now <= REF_265
REF_266(FDDdatasets.Round) -> round[_rID]
REF_267(uint256) -> REF_266.end
TMP_157(bool) = _now > REF_267
REF_268(FDDdatasets.Round) -> round[_rID]
REF_269(uint256) -> REF_268.plyr
TMP_158(bool) = REF_269 == 0
TMP_159(bool) = TMP_157 && TMP_158
TMP_160(bool) = TMP_156 || TMP_159
TMP_161(bool) = TMP_155 && TMP_160
CONDITION TMP_161"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_270(FDDdatasets.Player) -> plyr_[_pID]
REF_271(uint256) -> REF_270.gen
TMP_162(uint256) = INTERNAL_CALL, FomoDD.withdrawEarnings(uint256)(_pID)
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_162', '_eth'] 
REF_271(uint256) (->plyr_) := TMP_163(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.core(uint256,uint256,uint256,uint256,FDDdatasets.EventReturns)(_rID,_pID,_eth,_affID,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round[_rID].end && round[_rID].ended == false

IRs:
REF_273(FDDdatasets.Round) -> round[_rID]
REF_274(uint256) -> REF_273.end
TMP_165(bool) = _now > REF_274
REF_275(FDDdatasets.Round) -> round[_rID]
REF_276(bool) -> REF_275.ended
TMP_166(bool) = REF_276 == False
TMP_167(bool) = TMP_165 && TMP_166
CONDITION TMP_167"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round[_rID].ended = true

IRs:
REF_277(FDDdatasets.Round) -> round[_rID]
REF_278(bool) -> REF_277.ended
REF_278(bool) (->round) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_168(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.endRound(FDDdatasets.EventReturns)(_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_168(FDDdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_279(uint256) -> _eventData_.compressedData
REF_280(uint256) -> _eventData_.compressedData
TMP_169(uint256) = _now * 1000000000000000000
TMP_170(uint256) = REF_280 + TMP_169
REF_279(uint256) (->_eventData_) := TMP_170(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_281(uint256) -> _eventData_.compressedIDs
REF_282(uint256) -> _eventData_.compressedIDs
TMP_171(uint256) = REF_282 + _pID
REF_281(uint256) (->_eventData_) := TMP_171(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
FDDEvents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_284(FDDdatasets.Player) -> plyr_[_pID]
REF_285(bytes32) -> REF_284.name
REF_286(uint256) -> _eventData_.compressedData
REF_287(uint256) -> _eventData_.compressedIDs
REF_288(address) -> _eventData_.winnerAddr
REF_289(bytes32) -> _eventData_.winnerName
REF_290(uint256) -> _eventData_.amountWon
REF_291(uint256) -> _eventData_.newPot
REF_292(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_285,REF_286,REF_287,REF_288,REF_289,REF_290,REF_291,REF_292)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 774.sol-FomoDD-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _affCode == TMP_41
TMP_43(bool) = _affCode == msg.sender
TMP_44(bool) = TMP_42 || TMP_43
CONDITION TMP_44"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_36(FDDdatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
_affID(uint256) := REF_37(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_38(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_38(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_39(FDDdatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
TMP_45(bool) = _affID != REF_40
CONDITION TMP_45"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_41(FDDdatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
REF_42(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.reLoadCore(uint256,uint256,uint256,FDDdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FomoDD.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 774.sol-FomoDD-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_33(bool) = _affCode == 0
TMP_34(bool) = _affCode == _pID
TMP_35(bool) = TMP_33 || TMP_34
CONDITION TMP_35"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_29(FDDdatasets.Player) -> plyr_[_pID]
REF_30(uint256) -> REF_29.laff
_affCode(uint256) := REF_30(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_31(FDDdatasets.Player) -> plyr_[_pID]
REF_32(uint256) -> REF_31.laff
TMP_36(bool) = _affCode != REF_32
CONDITION TMP_36"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_33(FDDdatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
REF_34(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.reLoadCore(uint256,uint256,uint256,FDDdatasets.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FomoDD.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 774.sol-FomoDD-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_43(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_43(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_50(bool) = _affCode == 
REF_44(FDDdatasets.Player) -> plyr_[_pID]
REF_45(bytes32) -> REF_44.name
TMP_51(bool) = _affCode == REF_45
TMP_52(bool) = TMP_50 || TMP_51
CONDITION TMP_52"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_46(FDDdatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
_affID(uint256) := REF_47(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_48(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_48(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_49(FDDdatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
TMP_53(bool) = _affID != REF_50
CONDITION TMP_53"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_51(FDDdatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
REF_52(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, FomoDD.reLoadCore(uint256,uint256,uint256,FDDdatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FomoDD.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 774.sol-FomoDD-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),only PlayerBook can call this function)

IRs:
TMP_245 = CONVERT PlayerBook to address
TMP_246(bool) = msg.sender == TMP_245
TMP_247(None) = SOLIDITY_CALL require(bool,string)(TMP_246,only PlayerBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_412(uint256) -> pIDxAddr_[_addr]
TMP_248(bool) = REF_412 != _pID
CONDITION TMP_248"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_413(uint256) -> pIDxAddr_[_addr]
REF_413(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_414(uint256) -> pIDxName_[_name]
TMP_249(bool) = REF_414 != _pID
CONDITION TMP_249"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_415(uint256) -> pIDxName_[_name]
REF_415(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_416(FDDdatasets.Player) -> plyr_[_pID]
REF_417(address) -> REF_416.addr
TMP_250(bool) = REF_417 != _addr
CONDITION TMP_250"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_418(FDDdatasets.Player) -> plyr_[_pID]
REF_419(address) -> REF_418.addr
REF_419(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_420(FDDdatasets.Player) -> plyr_[_pID]
REF_421(bytes32) -> REF_420.name
TMP_251(bool) = REF_421 != _name
CONDITION TMP_251"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_422(FDDdatasets.Player) -> plyr_[_pID]
REF_423(bytes32) -> REF_422.name
REF_423(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_424(FDDdatasets.Player) -> plyr_[_pID]
REF_425(uint256) -> REF_424.laff
TMP_252(bool) = REF_425 != _laff
CONDITION TMP_252"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_426(FDDdatasets.Player) -> plyr_[_pID]
REF_427(uint256) -> REF_426.laff
REF_427(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_428(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_429(bool) -> REF_428[_name]
TMP_253(bool) = REF_429 == False
CONDITION TMP_253"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_430(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_431(bool) -> REF_430[_name]
REF_431(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 774.sol-FomoDD-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),only PlayerBook can call this function)

IRs:
TMP_254 = CONVERT PlayerBook to address
TMP_255(bool) = msg.sender == TMP_254
TMP_256(None) = SOLIDITY_CALL require(bool,string)(TMP_255,only PlayerBook can call this function)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_432(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_433(bool) -> REF_432[_name]
TMP_257(bool) = REF_433 == False
CONDITION TMP_257"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_434(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_435(bool) -> REF_434[_name]
REF_435(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 774.sol-FomoDD-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_77(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_77(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_88(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_88(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
FDDEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_90(FDDdatasets.Player) -> plyr_[_affID]
REF_91(address) -> REF_90.addr
REF_92(FDDdatasets.Player) -> plyr_[_affID]
REF_93(bytes32) -> REF_92.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_91,REF_93,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
9->1;
}
// Function: 774.sol-FomoDD-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_81(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_97(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_97(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
FDDEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_99(FDDdatasets.Player) -> plyr_[_affID]
REF_100(address) -> REF_99.addr
REF_101(FDDdatasets.Player) -> plyr_[_affID]
REF_102(bytes32) -> REF_101.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_100,REF_102,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
9->1;
}
// Function: 774.sol-FomoDD-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_85(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_106(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_106(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
FDDEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_108(FDDdatasets.Player) -> plyr_[_affID]
REF_109(address) -> REF_108.addr
REF_110(FDDdatasets.Player) -> plyr_[_affID]
REF_111(bytes32) -> REF_110.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_109,REF_111,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
9->1;
}
// Function: 774.sol-FomoDD-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Bank = BankInterfaceForForwarder(0xfa1678C00299fB685794865eA5e20dB155a8C913)

IRs:
TMP_384 = CONVERT 1427748827912311791379752164931914396676766877971 to BankInterfaceForForwarder
Bank(BankInterfaceForForwarder) := TMP_384(BankInterfaceForForwarder)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PlayerBook = PlayerBookInterface(0xA5d855212A9475558ACf92338F6a1df44dFCE908)

IRs:
TMP_385 = CONVERT 946807853979036859686281643831899703571317057800 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_385(PlayerBookInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = FomoDD

IRs:
name(string) := FomoDD(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = Chives

IRs:
symbol(string) := Chives(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 43200

IRs:
rndInit_(uint256) := 43200(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 774.sol-FomoDD-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
fees_ = 60

IRs:
fees_(uint256) := 60(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
potSplit_ = 45

IRs:
potSplit_(uint256) := 45(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 774.sol-FomoDD-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_294(uint256) = INTERNAL_CALL, FomoDD.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_294(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_295(bool) = _earnings > 0
CONDITION TMP_295"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_507(FDDdatasets.Player) -> plyr_[_pID]
REF_508(uint256) -> REF_507.gen
REF_510(FDDdatasets.Player) -> plyr_[_pID]
REF_511(uint256) -> REF_510.gen
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_511'] 
REF_508(uint256) (->plyr_) := TMP_296(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds[_pID][_rIDlast].mask = _earnings.add(plyrRnds[_pID][_rIDlast].mask)

IRs:
REF_512(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_513(FDDdatasets.PlayerRounds) -> REF_512[_rIDlast]
REF_514(uint256) -> REF_513.mask
REF_516(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_517(FDDdatasets.PlayerRounds) -> REF_516[_rIDlast]
REF_518(uint256) -> REF_517.mask
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_518'] 
REF_514(uint256) (->plyrRnds) := TMP_297(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyrRnds_[_pID] = plyrRnds[_pID][_rIDlast]

IRs:
REF_519(FDDdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_520(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_521(FDDdatasets.PlayerRounds) -> REF_520[_rIDlast]
REF_519(FDDdatasets.PlayerRounds) (->plyrRnds_) := REF_521(FDDdatasets.PlayerRounds)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 774.sol-FomoDD-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round[_rID].keys)

IRs:
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_577(FDDdatasets.Round) -> round[_rID]
REF_578(uint256) -> REF_577.keys
TMP_358(uint256) = TMP_357 / REF_578
_ppt(uint256) := TMP_358(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round[_rID].mask = _ppt.add(round[_rID].mask)

IRs:
REF_579(FDDdatasets.Round) -> round[_rID]
REF_580(uint256) -> REF_579.mask
REF_582(FDDdatasets.Round) -> round[_rID]
REF_583(uint256) -> REF_582.mask
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_583'] 
REF_580(uint256) (->round) := TMP_359(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_361(uint256) = TMP_360 / 1000000000000000000
_pearn(uint256) := TMP_361(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds[_pID][_rID].mask = (((round[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds[_pID][_rID].mask)

IRs:
REF_585(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_586(FDDdatasets.PlayerRounds) -> REF_585[_rID]
REF_587(uint256) -> REF_586.mask
REF_588(FDDdatasets.Round) -> round[_rID]
REF_589(uint256) -> REF_588.mask
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_589', '_keys'] 
TMP_363(uint256) = TMP_362 / 1000000000000000000
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_363', '_pearn'] 
REF_593(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_594(FDDdatasets.PlayerRounds) -> REF_593[_rID]
REF_595(uint256) -> REF_594.mask
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_364', 'REF_595'] 
REF_587(uint256) (->plyrRnds) := TMP_365(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyrRnds_[_pID] = plyrRnds[_pID][_rID]

IRs:
REF_596(FDDdatasets.PlayerRounds) -> plyrRnds_[_pID]
REF_597(mapping(uint256 => FDDdatasets.PlayerRounds)) -> plyrRnds[_pID]
REF_598(FDDdatasets.PlayerRounds) -> REF_597[_rID]
REF_596(FDDdatasets.PlayerRounds) (->plyrRnds_) := REF_598(FDDdatasets.PlayerRounds)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_ = round[_rID]

IRs:
REF_599(FDDdatasets.Round) -> round[_rID]
round_(FDDdatasets.Round) := REF_599(FDDdatasets.Round)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
(_gen.sub((_ppt.mul(round[_rID].keys)) / (1000000000000000000)))

IRs:
REF_602(FDDdatasets.Round) -> round[_rID]
REF_603(uint256) -> REF_602.keys
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_603'] 
TMP_367(uint256) = TMP_366 / 1000000000000000000
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_367'] 
RETURN TMP_368"];
}
// Function: 774.sol-FomoDD-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round[_rID].end && round[_rID].plyr == 0

IRs:
REF_522(FDDdatasets.Round) -> round[_rID]
REF_523(uint256) -> REF_522.end
TMP_298(bool) = _now > REF_523
REF_524(FDDdatasets.Round) -> round[_rID]
REF_525(uint256) -> REF_524.plyr
TMP_299(bool) = REF_525 == 0
TMP_300(bool) = TMP_298 && TMP_299
CONDITION TMP_300"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_301(uint256) = _keys / 1000000000000000000
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_301', 'rndInc_'] 
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_302', '_now'] 
_newTime(uint256) := TMP_303(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round[_rID].end)

IRs:
TMP_304(uint256) = _keys / 1000000000000000000
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_304', 'rndInc_'] 
REF_530(FDDdatasets.Round) -> round[_rID]
REF_531(uint256) -> REF_530.end
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_305', 'REF_531'] 
_newTime(uint256) := TMP_306(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_308(bool) = _newTime < TMP_307
CONDITION TMP_308"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round[_rID].end = _newTime

IRs:
REF_533(FDDdatasets.Round) -> round[_rID]
REF_534(uint256) -> REF_533.end
REF_534(uint256) (->round) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round[_rID].end = rndMax_.add(_now)

IRs:
REF_535(FDDdatasets.Round) -> round[_rID]
REF_536(uint256) -> REF_535.end
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_536(uint256) (->round) := TMP_309(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
round_ = round[_rID]

IRs:
REF_538(FDDdatasets.Round) -> round[_rID]
round_(FDDdatasets.Round) := REF_538(FDDdatasets.Round)"];
}
// Function: 774.sol-FomoDD-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round[_rID].end && round[_rID].ended == false && round[_rID].plyr != 0

IRs:
REF_54(FDDdatasets.Round) -> round[_rID]
REF_55(uint256) -> REF_54.end
TMP_58(bool) = _now > REF_55
REF_56(FDDdatasets.Round) -> round[_rID]
REF_57(bool) -> REF_56.ended
TMP_59(bool) = REF_57 == False
TMP_60(bool) = TMP_58 && TMP_59
REF_58(FDDdatasets.Round) -> round[_rID]
REF_59(uint256) -> REF_58.plyr
TMP_61(bool) = REF_59 != 0
TMP_62(bool) = TMP_60 && TMP_61
CONDITION TMP_62"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round[_rID].ended = true

IRs:
REF_60(FDDdatasets.Round) -> round[_rID]
REF_61(bool) -> REF_60.ended
REF_61(bool) (->round) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_63(FDDdatasets.EventReturns) = INTERNAL_CALL, FomoDD.endRound(FDDdatasets.EventReturns)(_eventData_)
_eventData_(FDDdatasets.EventReturns) := TMP_63(FDDdatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_64(uint256) = INTERNAL_CALL, FomoDD.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_64(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_65(bool) = _eth > 0
CONDITION TMP_65"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_62(FDDdatasets.Player) -> plyr_[_pID]
REF_63(address) -> REF_62.addr
Transfer dest:REF_63 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_65(uint256) -> _eventData_.compressedData
REF_66(uint256) -> _eventData_.compressedData
TMP_67(uint256) = _now * 1000000000000000000
TMP_68(uint256) = REF_66 + TMP_67
REF_65(uint256) (->_eventData_) := TMP_68(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_67(uint256) -> _eventData_.compressedIDs
REF_68(uint256) -> _eventData_.compressedIDs
TMP_69(uint256) = REF_68 + _pID
REF_67(uint256) (->_eventData_) := TMP_69(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
FDDEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount)

IRs:
REF_70(FDDdatasets.Player) -> plyr_[_pID]
REF_71(bytes32) -> REF_70.name
REF_72(uint256) -> _eventData_.compressedData
REF_73(uint256) -> _eventData_.compressedIDs
REF_74(address) -> _eventData_.winnerAddr
REF_75(bytes32) -> _eventData_.winnerName
REF_76(uint256) -> _eventData_.amountWon
REF_77(uint256) -> _eventData_.newPot
REF_78(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_71,_eth,REF_72,REF_73,REF_74,REF_75,REF_76,REF_77,REF_78)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_71(uint256) = INTERNAL_CALL, FomoDD.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_71(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_72(bool) = _eth > 0
CONDITION TMP_72"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_79(FDDdatasets.Player) -> plyr_[_pID]
REF_80(address) -> REF_79.addr
Transfer dest:REF_80 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
FDDEvents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_83(FDDdatasets.Player) -> plyr_[_pID]
REF_84(bytes32) -> REF_83.name
Emit onWithdraw(_pID,msg.sender,REF_84,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FomoDD.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FomoDD.isHuman()()"];
23->1;
}
// Function: 774.sol-FomoDD-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_604(FDDdatasets.Player) -> plyr_[_pID]
REF_605(uint256) -> REF_604.lrnd
INTERNAL_CALL, FomoDD.updateGenVault(uint256,uint256)(_pID,REF_605)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_606(FDDdatasets.Player) -> plyr_[_pID]
REF_607(uint256) -> REF_606.win
REF_609(FDDdatasets.Player) -> plyr_[_pID]
REF_610(uint256) -> REF_609.gen
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_607', 'REF_610'] 
REF_612(FDDdatasets.Player) -> plyr_[_pID]
REF_613(uint256) -> REF_612.aff
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_370', 'REF_613'] 
_earnings(uint256) := TMP_371(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_372(bool) = _earnings > 0
CONDITION TMP_372"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_614(FDDdatasets.Player) -> plyr_[_pID]
REF_615(uint256) -> REF_614.win
REF_615(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_616(FDDdatasets.Player) -> plyr_[_pID]
REF_617(uint256) -> REF_616.gen
REF_617(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_618(FDDdatasets.Player) -> plyr_[_pID]
REF_619(uint256) -> REF_618.aff
REF_619(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 774.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_416 = CONVERT _input to bytes
_temp(bytes) := TMP_416(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_655 -> LENGTH _temp
_length(uint256) := REF_655(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_417(bool) = _length <= 32
TMP_418(bool) = _length > 0
TMP_419(bool) = TMP_417 && TMP_418
TMP_420(None) = SOLIDITY_CALL require(bool,string)(TMP_419,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_656(None) -> _temp[0]
TMP_421(bool) = REF_656 != 32
TMP_422(uint256) = _length - 1
REF_657(None) -> _temp[TMP_422]
TMP_423(bool) = REF_657 != 32
TMP_424(bool) = TMP_421 && TMP_423
TMP_425(None) = SOLIDITY_CALL require(bool,string)(TMP_424,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_658(None) -> _temp[0]
TMP_426(bool) = REF_658 == 48
CONDITION TMP_426"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_659(None) -> _temp[1]
TMP_427(bool) = REF_659 != 120
TMP_428(None) = SOLIDITY_CALL require(bool,string)(TMP_427,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_660(None) -> _temp[1]
TMP_429(bool) = REF_660 != 88
TMP_430(None) = SOLIDITY_CALL require(bool,string)(TMP_429,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_431(bool) = i < _length
CONDITION TMP_431"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_661(None) -> _temp[i]
TMP_432(bool) = REF_661 > 64
REF_662(None) -> _temp[i]
TMP_433(bool) = REF_662 < 91
TMP_434(bool) = TMP_432 && TMP_433
CONDITION TMP_434"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_663(bytes1) -> _temp[i]
REF_664(None) -> _temp[i]
TMP_435 = CONVERT REF_664 to uint256
TMP_436(uint256) = TMP_435 + 32
TMP_437 = CONVERT TMP_436 to bytes1
REF_663(bytes1) (->_temp) := TMP_437(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_438(bool) = _hasNonNumber == False
CONDITION TMP_438"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_665(None) -> _temp[i]
TMP_439(bool) = REF_665 == 32
REF_666(None) -> _temp[i]
TMP_440(bool) = REF_666 > 96
REF_667(None) -> _temp[i]
TMP_441(bool) = REF_667 < 123
TMP_442(bool) = TMP_440 && TMP_441
TMP_443(bool) = TMP_439 || TMP_442
REF_668(None) -> _temp[i]
TMP_444(bool) = REF_668 > 47
REF_669(None) -> _temp[i]
TMP_445(bool) = REF_669 < 58
TMP_446(bool) = TMP_444 && TMP_445
TMP_447(bool) = TMP_443 || TMP_446
TMP_448(None) = SOLIDITY_CALL require(bool,string)(TMP_447,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_670(None) -> _temp[i]
TMP_449(bool) = REF_670 == 32
CONDITION TMP_449"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_450(uint256) = i + 1
REF_671(None) -> _temp[TMP_450]
TMP_451(bool) = REF_671 != 32
TMP_452(None) = SOLIDITY_CALL require(bool,string)(TMP_451,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_453(bool) = _hasNonNumber == False
REF_672(None) -> _temp[i]
TMP_454(bool) = REF_672 < 48
REF_673(None) -> _temp[i]
TMP_455(bool) = REF_673 > 57
TMP_456(bool) = TMP_454 || TMP_455
TMP_457(bool) = TMP_453 && TMP_456
CONDITION TMP_457"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_458(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_459(bool) = _hasNonNumber == True
TMP_460(None) = SOLIDITY_CALL require(bool,string)(TMP_459,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 774.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 774.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 774.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 774.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 774.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 774.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 774.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 774.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 774.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_469(uint256) = a + b
c(uint256) := TMP_469(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_470(bool) = c >= a
TMP_471(None) = SOLIDITY_CALL require(bool,string)(TMP_470,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 774.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_461(bool) = a == 0
CONDITION TMP_461"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_462(uint256) = a * b
c(uint256) := TMP_462(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_463(uint256) = c / a
TMP_464(bool) = TMP_463 == b
TMP_465(None) = SOLIDITY_CALL require(bool,string)(TMP_464,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 774.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_478(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_478"];
}
// Function: 774.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_472(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_473(uint256) = TMP_472 / 2
z(uint256) := TMP_473(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_474(bool) = z < y
CONDITION TMP_474"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_475(uint256) = x / z
TMP_476(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_475,z)
TMP_477(uint256) = TMP_476 / 2
z(uint256) := TMP_477(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 774.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_466(bool) = b <= a
TMP_467(None) = SOLIDITY_CALL require(bool,string)(TMP_466,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_468(uint256) = a - b
RETURN TMP_468"];
}
}
