digraph G {
// Function: 785.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_82'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_84'] 
TMP_86(uint256) = TMP_85 / 2
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_83', 'TMP_86'] 
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_89(uint256) = TMP_87 / TMP_88
RETURN TMP_89"];
}
// Function: 785.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_72(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_74(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_73)
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_72', 'TMP_74'] 
RETURN TMP_75"];
}
// Function: 785.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_76', '312500000000000000000000000'] 
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_77', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_78'] 
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_79', '74999921875000000000000000000000'] 
TMP_81(uint256) = TMP_80 / 156250000
RETURN TMP_81"];
}
// Function: 785.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_69(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_68)
TMP_70(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_69', 'TMP_70'] 
RETURN TMP_71"];
}
// Function: 785.sol-FoMo3DFast-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_586(bool) = msg.sender == admin
TMP_587(None) = SOLIDITY_CALL require(bool,string)(TMP_586,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_588(bool) = activated_ == False
TMP_589(None) = SOLIDITY_CALL require(bool,string)(TMP_588,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_855(F3Ddatasets.Round) -> round_[1]
REF_856(uint256) -> REF_855.strt
TMP_590(uint256) = now + rndExtra_
TMP_591(uint256) = TMP_590 - rndGap_
REF_856(uint256) (->round_) := TMP_591(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_857(F3Ddatasets.Round) -> round_[1]
REF_858(uint256) -> REF_857.end
TMP_592(uint256) = now + rndInit_
TMP_593(uint256) = TMP_592 + rndExtra_
REF_858(uint256) (->round_) := TMP_593(uint256)"];
}
// Function: 785.sol-FoMo3DFast-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_493(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_494(bytes32) = SOLIDITY_CALL keccak256()(TMP_493)
TMP_495 = CONVERT TMP_494 to uint256
TMP_496(uint256) = TMP_495 / now
TMP_497(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_492', 'TMP_496'] 
TMP_498(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_497', 'block.gaslimit'] 
TMP_499(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_500(bytes32) = SOLIDITY_CALL keccak256()(TMP_499)
TMP_501 = CONVERT TMP_500 to uint256
TMP_502(uint256) = TMP_501 / now
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_498', 'TMP_502'] 
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_503', 'block.number'] 
TMP_505(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_504)
TMP_506(bytes32) = SOLIDITY_CALL keccak256()(TMP_505)
TMP_507 = CONVERT TMP_506 to uint256
seed(uint256) := TMP_507(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_508(uint256) = seed / 1000
TMP_509(uint256) = TMP_508 * 1000
TMP_510(uint256) = seed - TMP_509
TMP_511(bool) = TMP_510 < airDropTracker_
CONDITION TMP_511"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 785.sol-FoMo3DFast-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_336(F3Ddatasets.Round) -> round_[_rID]
REF_337(uint256) -> REF_336.strt
TMP_268(uint256) = REF_337 + rndGap_
TMP_269(bool) = _now > TMP_268
REF_338(F3Ddatasets.Round) -> round_[_rID]
REF_339(uint256) -> REF_338.end
TMP_270(bool) = _now <= REF_339
REF_340(F3Ddatasets.Round) -> round_[_rID]
REF_341(uint256) -> REF_340.end
TMP_271(bool) = _now > REF_341
REF_342(F3Ddatasets.Round) -> round_[_rID]
REF_343(uint256) -> REF_342.plyr
TMP_272(bool) = REF_343 == 0
TMP_273(bool) = TMP_271 && TMP_272
TMP_274(bool) = TMP_270 || TMP_273
TMP_275(bool) = TMP_269 && TMP_274
CONDITION TMP_275"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(address(0),_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
TMP_276 = CONVERT 0 to address
INTERNAL_CALL, FoMo3DFast.core(address,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(TMP_276,_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_344(F3Ddatasets.Round) -> round_[_rID]
REF_345(uint256) -> REF_344.end
TMP_278(bool) = _now > REF_345
REF_346(F3Ddatasets.Round) -> round_[_rID]
REF_347(bool) -> REF_346.ended
TMP_279(bool) = REF_347 == False
TMP_280(bool) = TMP_278 && TMP_279
CONDITION TMP_280"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_348(F3Ddatasets.Round) -> round_[_rID]
REF_349(bool) -> REF_348.ended
REF_349(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_281(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_281(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_350(uint256) -> _eventData_.compressedData
REF_351(uint256) -> _eventData_.compressedData
TMP_282(uint256) = _now * 1000000000000000000
TMP_283(uint256) = REF_351 + TMP_282
REF_350(uint256) (->_eventData_) := TMP_283(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_352(uint256) -> _eventData_.compressedIDs
REF_353(uint256) -> _eventData_.compressedIDs
TMP_284(uint256) = REF_353 + _pID
REF_352(uint256) (->_eventData_) := TMP_284(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_355(F3Ddatasets.Player) -> plyr_[_pID]
REF_356(bytes32) -> REF_355.name
REF_357(uint256) -> _eventData_.compressedData
REF_358(uint256) -> _eventData_.compressedIDs
REF_359(address) -> _eventData_.winnerAddr
REF_360(bytes32) -> _eventData_.winnerName
REF_361(uint256) -> _eventData_.amountWon
REF_362(uint256) -> _eventData_.newPot
REF_363(uint256) -> _eventData_.P3DAmount
REF_364(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_356,msg.value,REF_357,REF_358,REF_359,REF_360,REF_361,REF_362,REF_363,REF_364)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_365(F3Ddatasets.Player) -> plyr_[_pID]
REF_366(uint256) -> REF_365.gen
REF_367(F3Ddatasets.Player) -> plyr_[_pID]
REF_368(uint256) -> REF_367.gen
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_368', 'msg.value'] 
REF_366(uint256) (->plyr_) := TMP_286(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 785.sol-FoMo3DFast-buyCoreQR(address,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_370(F3Ddatasets.Round) -> round_[_rID]
REF_371(uint256) -> REF_370.strt
TMP_287(uint256) = REF_371 + rndGap_
TMP_288(bool) = _now > TMP_287
REF_372(F3Ddatasets.Round) -> round_[_rID]
REF_373(uint256) -> REF_372.end
TMP_289(bool) = _now <= REF_373
REF_374(F3Ddatasets.Round) -> round_[_rID]
REF_375(uint256) -> REF_374.end
TMP_290(bool) = _now > REF_375
REF_376(F3Ddatasets.Round) -> round_[_rID]
REF_377(uint256) -> REF_376.plyr
TMP_291(bool) = REF_377 == 0
TMP_292(bool) = TMP_290 && TMP_291
TMP_293(bool) = TMP_289 || TMP_292
TMP_294(bool) = TMP_288 && TMP_293
CONDITION TMP_294"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_realSender,_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.core(address,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_realSender,_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_378(F3Ddatasets.Round) -> round_[_rID]
REF_379(uint256) -> REF_378.end
TMP_296(bool) = _now > REF_379
REF_380(F3Ddatasets.Round) -> round_[_rID]
REF_381(bool) -> REF_380.ended
TMP_297(bool) = REF_381 == False
TMP_298(bool) = TMP_296 && TMP_297
CONDITION TMP_298"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_382(F3Ddatasets.Round) -> round_[_rID]
REF_383(bool) -> REF_382.ended
REF_383(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_299(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_299(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_384(uint256) -> _eventData_.compressedData
REF_385(uint256) -> _eventData_.compressedData
TMP_300(uint256) = _now * 1000000000000000000
TMP_301(uint256) = REF_385 + TMP_300
REF_384(uint256) (->_eventData_) := TMP_301(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_386(uint256) -> _eventData_.compressedIDs
REF_387(uint256) -> _eventData_.compressedIDs
TMP_302(uint256) = REF_387 + _pID
REF_386(uint256) (->_eventData_) := TMP_302(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(_realSender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_389(F3Ddatasets.Player) -> plyr_[_pID]
REF_390(bytes32) -> REF_389.name
REF_391(uint256) -> _eventData_.compressedData
REF_392(uint256) -> _eventData_.compressedIDs
REF_393(address) -> _eventData_.winnerAddr
REF_394(bytes32) -> _eventData_.winnerName
REF_395(uint256) -> _eventData_.amountWon
REF_396(uint256) -> _eventData_.newPot
REF_397(uint256) -> _eventData_.P3DAmount
REF_398(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(_realSender,REF_390,msg.value,REF_391,REF_392,REF_393,REF_394,REF_395,REF_396,REF_397,REF_398)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_399(F3Ddatasets.Player) -> plyr_[_pID]
REF_400(uint256) -> REF_399.gen
REF_401(F3Ddatasets.Player) -> plyr_[_pID]
REF_402(uint256) -> REF_401.gen
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_402', 'msg.value'] 
REF_400(uint256) (->plyr_) := TMP_304(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 785.sol-FoMo3DFast-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_113(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_113(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_60(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_60(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _affCode == TMP_114
TMP_116(bool) = _affCode == msg.sender
TMP_117(bool) = TMP_115 || TMP_116
CONDITION TMP_117"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
_affID(uint256) := REF_62(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_63(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_63(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_64(F3Ddatasets.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.laff
TMP_118(bool) = _affID != REF_65
CONDITION TMP_118"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
REF_67(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_119(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_119(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 785.sol-FoMo3DFast-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_103(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_103(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_104(bool) = _affCode == 0
TMP_105(bool) = _affCode == _pID
TMP_106(bool) = TMP_104 || TMP_105
CONDITION TMP_106"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_54(F3Ddatasets.Player) -> plyr_[_pID]
REF_55(uint256) -> REF_54.laff
_affCode(uint256) := REF_55(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
TMP_107(bool) = _affCode != REF_57
CONDITION TMP_107"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
REF_59(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_108(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_108(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 785.sol-FoMo3DFast-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_123(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_123(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_68(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_68(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_124(bool) = _affCode == 
REF_69(F3Ddatasets.Player) -> plyr_[_pID]
REF_70(bytes32) -> REF_69.name
TMP_125(bool) = _affCode == REF_70
TMP_126(bool) = TMP_124 || TMP_125
CONDITION TMP_126"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
_affID(uint256) := REF_72(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_73(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_73(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
TMP_127(bool) = _affID != REF_75
CONDITION TMP_127"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
REF_77(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_128(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_128(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 785.sol-FoMo3DFast-buyXnameQR(address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePIDQR(_realSender,_eventData_)

IRs:
TMP_133(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePIDQR(address,F3Ddatasets.EventReturns)(_realSender,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_133(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_realSender]

IRs:
REF_78(uint256) -> pIDxAddr_[_realSender]
_pID(uint256) := REF_78(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_134(bool) = _affCode == 
REF_79(F3Ddatasets.Player) -> plyr_[_pID]
REF_80(bytes32) -> REF_79.name
TMP_135(bool) = _affCode == REF_80
TMP_136(bool) = TMP_134 || TMP_135
CONDITION TMP_136"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
_affID(uint256) := REF_82(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_83(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_83(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_84(F3Ddatasets.Player) -> plyr_[_pID]
REF_85(uint256) -> REF_84.laff
TMP_137(bool) = _affID != REF_85
CONDITION TMP_137"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.laff
REF_87(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_138(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_138(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCoreQR(_realSender,_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.buyCoreQR(address,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_realSender,_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 785.sol-FoMo3DFast-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_535(F3Ddatasets.Round) -> round_[_rID]
REF_536(uint256) -> REF_535.strt
TMP_381(uint256) = REF_536 + rndGap_
TMP_382(bool) = _now > TMP_381
REF_537(F3Ddatasets.Round) -> round_[_rID]
REF_538(uint256) -> REF_537.end
TMP_383(bool) = _now <= REF_538
REF_539(F3Ddatasets.Round) -> round_[_rID]
REF_540(uint256) -> REF_539.end
TMP_384(bool) = _now > REF_540
REF_541(F3Ddatasets.Round) -> round_[_rID]
REF_542(uint256) -> REF_541.plyr
TMP_385(bool) = REF_542 == 0
TMP_386(bool) = TMP_384 && TMP_385
TMP_387(bool) = TMP_383 || TMP_386
TMP_388(bool) = TMP_382 && TMP_387
CONDITION TMP_388"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_543(F3Ddatasets.Round) -> round_[_rID]
REF_544(uint256) -> REF_543.eth
TMP_389(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_544', '_eth'] 
RETURN TMP_389"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_390"];
}
// Function: 785.sol-FoMo3DFast-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_525(F3Ddatasets.Round) -> round_[_rIDlast]
REF_526(uint256) -> REF_525.mask
REF_528(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_529(F3Ddatasets.PlayerRounds) -> REF_528[_rIDlast]
REF_530(uint256) -> REF_529.keys
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_526', 'REF_530'] 
TMP_379(uint256) = TMP_378 / 1000000000000000000
REF_532(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_533(F3Ddatasets.PlayerRounds) -> REF_532[_rIDlast]
REF_534(uint256) -> REF_533.mask
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_379', 'REF_534'] 
RETURN TMP_380"];
}
// Function: 785.sol-FoMo3DFast-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_34(F3Ddatasets.TeamFee) -> fees_[0]
TMP_90(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_34(F3Ddatasets.TeamFee) (->fees_) := TMP_90(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_36(F3Ddatasets.TeamFee) -> fees_[1]
TMP_91(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_36(F3Ddatasets.TeamFee) (->fees_) := TMP_91(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_38(F3Ddatasets.TeamFee) -> fees_[2]
TMP_92(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_38(F3Ddatasets.TeamFee) (->fees_) := TMP_92(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_40(F3Ddatasets.TeamFee) -> fees_[3]
TMP_93(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_40(F3Ddatasets.TeamFee) (->fees_) := TMP_93(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_42(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_94(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_42(F3Ddatasets.PotSplit) (->potSplit_) := TMP_94(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_44(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_95(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_44(F3Ddatasets.PotSplit) (->potSplit_) := TMP_95(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_46(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_96(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_46(F3Ddatasets.PotSplit) (->potSplit_) := TMP_96(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_48(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_97(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_48(F3Ddatasets.PotSplit) (->potSplit_) := TMP_97(F3Ddatasets.PotSplit)"];
}
// Function: 785.sol-FoMo3DFast-core(address,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_436(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_437(F3Ddatasets.PlayerRounds) -> REF_436[_rID]
REF_438(uint256) -> REF_437.keys
TMP_325(bool) = REF_438 == 0
CONDITION TMP_325"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_326(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_326(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_439(F3Ddatasets.Round) -> round_[_rID]
REF_440(uint256) -> REF_439.eth
TMP_327(bool) = REF_440 < 100000000000000000000
REF_441(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_442(F3Ddatasets.PlayerRounds) -> REF_441[_rID]
REF_443(uint256) -> REF_442.eth
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_443', '_eth'] 
TMP_329(bool) = TMP_328 > 1000000000000000000
TMP_330(bool) = TMP_327 && TMP_329
CONDITION TMP_330"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_446(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_447(F3Ddatasets.PlayerRounds) -> REF_446[_rID]
REF_448(uint256) -> REF_447.eth
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_448'] 
_availableLimit(uint256) := TMP_331(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_332(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_450(F3Ddatasets.Player) -> plyr_[_pID]
REF_451(uint256) -> REF_450.gen
REF_452(F3Ddatasets.Player) -> plyr_[_pID]
REF_453(uint256) -> REF_452.gen
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_453', '_refund'] 
REF_451(uint256) (->plyr_) := TMP_333(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_334(bool) = _eth > 1000000000
CONDITION TMP_334"];
10->11[label="True"];
10->61[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_455(F3Ddatasets.Round) -> round_[_rID]
REF_456(uint256) -> REF_455.eth
TMP_335(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_456', '_eth'] 
_keys(uint256) := TMP_335(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_336(bool) = _keys >= 1000000000000000000
CONDITION TMP_336"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DFast.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_458(F3Ddatasets.Round) -> round_[_rID]
REF_459(uint256) -> REF_458.plyr
TMP_338(bool) = REF_459 != _pID
CONDITION TMP_338"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_460(F3Ddatasets.Round) -> round_[_rID]
REF_461(uint256) -> REF_460.plyr
REF_461(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_462(F3Ddatasets.Round) -> round_[_rID]
REF_463(uint256) -> REF_462.team
TMP_339(bool) = REF_463 != _team
CONDITION TMP_339"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_464(F3Ddatasets.Round) -> round_[_rID]
REF_465(uint256) -> REF_464.team
REF_465(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_466(uint256) -> _eventData_.compressedData
REF_467(uint256) -> _eventData_.compressedData
TMP_340(uint256) = REF_467 + 100
REF_466(uint256) (->_eventData_) := TMP_340(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_341(bool) = _eth >= 100000000000000000
CONDITION TMP_341"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_342(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_343(bool) = INTERNAL_CALL, FoMo3DFast.airdrop()()
TMP_344(bool) = TMP_343 == True
CONDITION TMP_344"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_345(bool) = _eth >= 10000000000000000000
CONDITION TMP_345"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_347(uint256) = TMP_346 / 100
_prize(uint256) := TMP_347(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_469(F3Ddatasets.Player) -> plyr_[_pID]
REF_470(uint256) -> REF_469.win
REF_471(F3Ddatasets.Player) -> plyr_[_pID]
REF_472(uint256) -> REF_471.win
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_472', '_prize'] 
REF_470(uint256) (->plyr_) := TMP_348(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_349(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_475(uint256) -> _eventData_.compressedData
REF_475(-> _eventData_) = REF_475 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_350(bool) = _eth >= 1000000000000000000
TMP_351(bool) = _eth < 10000000000000000000
TMP_352(bool) = TMP_350 && TMP_351
CONDITION TMP_352"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_354(uint256) = TMP_353 / 100
_prize(uint256) := TMP_354(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_477(F3Ddatasets.Player) -> plyr_[_pID]
REF_478(uint256) -> REF_477.win
REF_479(F3Ddatasets.Player) -> plyr_[_pID]
REF_480(uint256) -> REF_479.win
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_480', '_prize'] 
REF_478(uint256) (->plyr_) := TMP_355(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_356(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_483(uint256) -> _eventData_.compressedData
REF_483(-> _eventData_) = REF_483 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_357(bool) = _eth >= 100000000000000000
TMP_358(bool) = _eth < 1000000000000000000
TMP_359(bool) = TMP_357 && TMP_358
CONDITION TMP_359"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_361(uint256) = TMP_360 / 100
_prize(uint256) := TMP_361(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.win
REF_487(F3Ddatasets.Player) -> plyr_[_pID]
REF_488(uint256) -> REF_487.win
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_488', '_prize'] 
REF_486(uint256) (->plyr_) := TMP_362(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_363(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_491(uint256) -> _eventData_.compressedData
REF_491(-> _eventData_) = REF_491 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_492(uint256) -> _eventData_.compressedData
REF_492(-> _eventData_) = REF_492 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_493(uint256) -> _eventData_.compressedData
TMP_364(uint256) = _prize * 1000000000000000000000000000000000
REF_493(-> _eventData_) = REF_493 + TMP_364"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_494(uint256) -> _eventData_.compressedData
REF_495(uint256) -> _eventData_.compressedData
TMP_365(uint256) = airDropTracker_ * 1000
TMP_366(uint256) = REF_495 + TMP_365
REF_494(uint256) (->_eventData_) := TMP_366(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_496(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_497(F3Ddatasets.PlayerRounds) -> REF_496[_rID]
REF_498(uint256) -> REF_497.keys
REF_500(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_501(F3Ddatasets.PlayerRounds) -> REF_500[_rID]
REF_502(uint256) -> REF_501.keys
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_502'] 
REF_498(uint256) (->plyrRnds_) := TMP_367(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_503(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_504(F3Ddatasets.PlayerRounds) -> REF_503[_rID]
REF_505(uint256) -> REF_504.eth
REF_507(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_508(F3Ddatasets.PlayerRounds) -> REF_507[_rID]
REF_509(uint256) -> REF_508.eth
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_509'] 
REF_505(uint256) (->plyrRnds_) := TMP_368(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_510(F3Ddatasets.Round) -> round_[_rID]
REF_511(uint256) -> REF_510.keys
REF_513(F3Ddatasets.Round) -> round_[_rID]
REF_514(uint256) -> REF_513.keys
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_514'] 
REF_511(uint256) (->round_) := TMP_369(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_515(F3Ddatasets.Round) -> round_[_rID]
REF_516(uint256) -> REF_515.eth
REF_518(F3Ddatasets.Round) -> round_[_rID]
REF_519(uint256) -> REF_518.eth
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_519'] 
REF_516(uint256) (->round_) := TMP_370(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_520(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_521(uint256) -> REF_520[_team]
REF_523(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_524(uint256) -> REF_523[_team]
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_524'] 
REF_521(uint256) (->rndTmEth_) := TMP_371(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_372(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_372(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_373(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_373(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: IF 57

EXPRESSION:
_realSender == address(0)

IRs:
TMP_374 = CONVERT 0 to address
TMP_375(bool) = _realSender == TMP_374
CONDITION TMP_375"];
57->58[label="True"];
57->59[label="False"];
58[label="Node Type: EXPRESSION 58

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
58->60;
59[label="Node Type: EXPRESSION 59

EXPRESSION:
endTxQR(_realSender,_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.endTxQR(address,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_realSender,_pID,_team,_eth,_keys,_eventData_)"];
59->60;
60[label="Node Type: END_IF 60
"];
60->61;
61[label="Node Type: END_IF 61
"];
}
// Function: 785.sol-FoMo3DFast-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_584(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_584(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_415(bool) = _pID == 0
CONDITION TMP_415"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_416(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_416(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_417(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_417(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_418(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_418(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_588(uint256) -> pIDxAddr_[msg.sender]
REF_588(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_589(F3Ddatasets.Player) -> plyr_[_pID]
REF_590(address) -> REF_589.addr
REF_590(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_419(bool) = _name != 
CONDITION TMP_419"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_591(uint256) -> pIDxName_[_name]
REF_591(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_592(F3Ddatasets.Player) -> plyr_[_pID]
REF_593(bytes32) -> REF_592.name
REF_593(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_594(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_595(bool) -> REF_594[_name]
REF_595(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_420(bool) = _laff != 0
TMP_421(bool) = _laff != _pID
TMP_422(bool) = TMP_420 && TMP_421
CONDITION TMP_422"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_596(F3Ddatasets.Player) -> plyr_[_pID]
REF_597(uint256) -> REF_596.laff
REF_597(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_598(uint256) -> _eventData_.compressedData
REF_599(uint256) -> _eventData_.compressedData
TMP_423(uint256) = REF_599 + 1
REF_598(uint256) (->_eventData_) := TMP_423(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 785.sol-FoMo3DFast-determinePIDQR(address,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[_realSender]

IRs:
REF_600(uint256) -> pIDxAddr_[_realSender]
_pID(uint256) := REF_600(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_424(bool) = _pID == 0
CONDITION TMP_424"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(_realSender)

IRs:
TMP_425(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['_realSender']  
_pID(uint256) := TMP_425(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_426(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_426(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_427(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_427(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[_realSender] = _pID

IRs:
REF_604(uint256) -> pIDxAddr_[_realSender]
REF_604(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = _realSender

IRs:
REF_605(F3Ddatasets.Player) -> plyr_[_pID]
REF_606(address) -> REF_605.addr
REF_606(address) (->plyr_) := _realSender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_428(bool) = _name != 
CONDITION TMP_428"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_607(uint256) -> pIDxName_[_name]
REF_607(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_608(F3Ddatasets.Player) -> plyr_[_pID]
REF_609(bytes32) -> REF_608.name
REF_609(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_610(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_611(bool) -> REF_610[_name]
REF_611(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_429(bool) = _laff != 0
TMP_430(bool) = _laff != _pID
TMP_431(bool) = TMP_429 && TMP_430
CONDITION TMP_431"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_612(F3Ddatasets.Player) -> plyr_[_pID]
REF_613(uint256) -> REF_612.laff
REF_613(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_614(uint256) -> _eventData_.compressedData
REF_615(uint256) -> _eventData_.compressedData
TMP_432(uint256) = REF_615 + 1
REF_614(uint256) (->_eventData_) := TMP_432(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 785.sol-FoMo3DFast-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_512(uint256) = _eth / 100
_p1(uint256) := TMP_512(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_513(uint256) = _eth / 50
_com(uint256) := TMP_513(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_514(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_515 = CONVERT admin to address
TMP_517(bool) = LOW_LEVEL_CALL, dest:TMP_515, function:call, arguments:[] value:_com 
TMP_518 = UnaryType.BANG TMP_517 
CONDITION TMP_518"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_519(uint256) = _eth / 10
_aff(uint256) := TMP_519(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_520(bool) = _affID != _pID
REF_729(F3Ddatasets.Player) -> plyr_[_affID]
REF_730(bytes32) -> REF_729.name
TMP_521(bool) = REF_730 != 
TMP_522(bool) = TMP_520 && TMP_521
CONDITION TMP_522"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_731(F3Ddatasets.Player) -> plyr_[_affID]
REF_732(uint256) -> REF_731.aff
REF_734(F3Ddatasets.Player) -> plyr_[_affID]
REF_735(uint256) -> REF_734.aff
TMP_523(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_735'] 
REF_732(uint256) (->plyr_) := TMP_523(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_737(F3Ddatasets.Player) -> plyr_[_affID]
REF_738(address) -> REF_737.addr
REF_739(F3Ddatasets.Player) -> plyr_[_affID]
REF_740(bytes32) -> REF_739.name
Emit onAffiliatePayout(_affID,REF_738,REF_740,_rID,_pID,_aff,now)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_743(F3Ddatasets.TeamFee) -> fees_[_team]
REF_744(uint256) -> REF_743.p3d
TMP_525(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_744'] 
TMP_526(uint256) = TMP_525 / 100
TMP_527(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_526'] 
_p3d(uint256) := TMP_527(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_p3d > 0

IRs:
TMP_528(bool) = _p3d > 0
CONDITION TMP_528"];
16->17[label="True"];
16->21[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_529(uint256) = _p3d / 2
_potAmount(uint256) := TMP_529(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_530(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_530"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_747(F3Ddatasets.Round) -> round_[_rID]
REF_748(uint256) -> REF_747.pot
REF_749(F3Ddatasets.Round) -> round_[_rID]
REF_750(uint256) -> REF_749.pot
TMP_532(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_750', '_potAmount'] 
REF_748(uint256) (->round_) := TMP_532(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_752(uint256) -> _eventData_.P3DAmount
REF_754(uint256) -> _eventData_.P3DAmount
TMP_533(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_754'] 
REF_752(uint256) (->_eventData_) := TMP_533(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 785.sol-FoMo3DFast-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_762(F3Ddatasets.TeamFee) -> fees_[_team]
REF_763(uint256) -> REF_762.gen
TMP_537(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_763'] 
TMP_538(uint256) = TMP_537 / 100
_gen(uint256) := TMP_538(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_539(uint256) = _eth / 100
_air(uint256) := TMP_539(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_540(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_540(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_541(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_542(uint256) = TMP_541 / 100
REF_769(F3Ddatasets.TeamFee) -> fees_[_team]
REF_770(uint256) -> REF_769.p3d
TMP_543(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_770'] 
TMP_544(uint256) = TMP_543 / 100
TMP_545(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_542', 'TMP_544'] 
TMP_546(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_545'] 
_eth(uint256) := TMP_546(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_547(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_547(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_548(uint256) = INTERNAL_CALL, FoMo3DFast.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_548(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_549(bool) = _dust > 0
CONDITION TMP_549"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_550(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_550(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_773(F3Ddatasets.Round) -> round_[_rID]
REF_774(uint256) -> REF_773.pot
TMP_551(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_777(F3Ddatasets.Round) -> round_[_rID]
REF_778(uint256) -> REF_777.pot
TMP_552(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_551', 'REF_778'] 
REF_774(uint256) (->round_) := TMP_552(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_779(uint256) -> _eventData_.genAmount
REF_781(uint256) -> _eventData_.genAmount
TMP_553(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_781'] 
REF_779(uint256) (->_eventData_) := TMP_553(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_782(uint256) -> _eventData_.potAmount
REF_782(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 785.sol-FoMo3DFast-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_624(F3Ddatasets.Round) -> round_[_rID]
REF_625(uint256) -> REF_624.plyr
_winPID(uint256) := REF_625(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_626(F3Ddatasets.Round) -> round_[_rID]
REF_627(uint256) -> REF_626.team
_winTID(uint256) := REF_627(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_628(F3Ddatasets.Round) -> round_[_rID]
REF_629(uint256) -> REF_628.pot
_pot(uint256) := REF_629(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_440(uint256) = TMP_439 / 100
_win(uint256) := TMP_440(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_441(uint256) = _pot / 50
_com(uint256) := TMP_441(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_632(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_633(uint256) -> REF_632.gen
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_633'] 
TMP_443(uint256) = TMP_442 / 100
_gen(uint256) := TMP_443(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_635(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_636(uint256) -> REF_635.p3d
TMP_444(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_636'] 
TMP_445(uint256) = TMP_444 / 100
_p3d(uint256) := TMP_445(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_447(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_446', '_com'] 
TMP_448(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_447', '_gen'] 
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_448', '_p3d'] 
_res(uint256) := TMP_449(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_642(F3Ddatasets.Round) -> round_[_rID]
REF_643(uint256) -> REF_642.keys
TMP_451(uint256) = TMP_450 / REF_643
_ppt(uint256) := TMP_451(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_646(F3Ddatasets.Round) -> round_[_rID]
REF_647(uint256) -> REF_646.keys
TMP_452(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_647'] 
TMP_453(uint256) = TMP_452 / 1000000000000000000
TMP_454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_453'] 
_dust(uint256) := TMP_454(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_455(bool) = _dust > 0
CONDITION TMP_455"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_456(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_456(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_457(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_650(F3Ddatasets.Player) -> plyr_[_winPID]
REF_651(uint256) -> REF_650.win
REF_653(F3Ddatasets.Player) -> plyr_[_winPID]
REF_654(uint256) -> REF_653.win
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_654'] 
REF_651(uint256) (->plyr_) := TMP_458(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_p3d.sub(_p3d / 2))

IRs:
TMP_460(uint256) = _p3d / 2
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_460'] 
Transfer dest:admin value:TMP_461"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].pot = _pot.add(_p3d / 2)

IRs:
REF_658(F3Ddatasets.Round) -> round_[_rID]
REF_659(uint256) -> REF_658.pot
TMP_463(uint256) = _p3d / 2
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', 'TMP_463'] 
REF_659(uint256) (->round_) := TMP_464(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_661(F3Ddatasets.Round) -> round_[_rID]
REF_662(uint256) -> REF_661.mask
REF_664(F3Ddatasets.Round) -> round_[_rID]
REF_665(uint256) -> REF_664.mask
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_665'] 
REF_662(uint256) (->round_) := TMP_465(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_666(uint256) -> _eventData_.compressedData
REF_667(uint256) -> _eventData_.compressedData
REF_668(F3Ddatasets.Round) -> round_[_rID]
REF_669(uint256) -> REF_668.end
TMP_466(uint256) = REF_669 * 1000000
TMP_467(uint256) = REF_667 + TMP_466
REF_666(uint256) (->_eventData_) := TMP_467(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_670(uint256) -> _eventData_.compressedIDs
REF_671(uint256) -> _eventData_.compressedIDs
TMP_468(uint256) = _winPID * 100000000000000000000000000
TMP_469(uint256) = REF_671 + TMP_468
TMP_470(uint256) = _winTID * 100000000000000000
TMP_471(uint256) = TMP_469 + TMP_470
REF_670(uint256) (->_eventData_) := TMP_471(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_672(address) -> _eventData_.winnerAddr
REF_673(F3Ddatasets.Player) -> plyr_[_winPID]
REF_674(address) -> REF_673.addr
REF_672(address) (->_eventData_) := REF_674(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_675(bytes32) -> _eventData_.winnerName
REF_676(F3Ddatasets.Player) -> plyr_[_winPID]
REF_677(bytes32) -> REF_676.name
REF_675(bytes32) (->_eventData_) := REF_677(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_678(uint256) -> _eventData_.amountWon
REF_678(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_679(uint256) -> _eventData_.genAmount
REF_679(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_680(uint256) -> _eventData_.P3DAmount
REF_680(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_681(uint256) -> _eventData_.newPot
REF_681(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_472(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_473(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_682(F3Ddatasets.Round) -> round_[_rID]
REF_683(uint256) -> REF_682.strt
REF_683(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_684(F3Ddatasets.Round) -> round_[_rID]
REF_685(uint256) -> REF_684.end
TMP_474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_474', 'rndGap_'] 
REF_685(uint256) (->round_) := TMP_475(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_688(F3Ddatasets.Round) -> round_[_rID]
REF_689(uint256) -> REF_688.pot
REF_689(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 785.sol-FoMo3DFast-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_823(uint256) -> _eventData_.compressedData
REF_824(uint256) -> _eventData_.compressedData
TMP_570(uint256) = now * 1000000000000000000
TMP_571(uint256) = REF_824 + TMP_570
TMP_572(uint256) = _team * 100000000000000000000000000000
TMP_573(uint256) = TMP_571 + TMP_572
REF_823(uint256) (->_eventData_) := TMP_573(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_825(uint256) -> _eventData_.compressedIDs
REF_826(uint256) -> _eventData_.compressedIDs
TMP_574(uint256) = REF_826 + _pID
TMP_575(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_576(uint256) = TMP_574 + TMP_575
REF_825(uint256) (->_eventData_) := TMP_576(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_828(uint256) -> _eventData_.compressedData
REF_829(uint256) -> _eventData_.compressedIDs
REF_830(F3Ddatasets.Player) -> plyr_[_pID]
REF_831(bytes32) -> REF_830.name
REF_832(address) -> _eventData_.winnerAddr
REF_833(bytes32) -> _eventData_.winnerName
REF_834(uint256) -> _eventData_.amountWon
REF_835(uint256) -> _eventData_.newPot
REF_836(uint256) -> _eventData_.P3DAmount
REF_837(uint256) -> _eventData_.genAmount
REF_838(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_828,REF_829,REF_831,msg.sender,_eth,_keys,REF_832,REF_833,REF_834,REF_835,REF_836,REF_837,REF_838,airDropPot_)"];
}
// Function: 785.sol-FoMo3DFast-endTxQR(address,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_839(uint256) -> _eventData_.compressedData
REF_840(uint256) -> _eventData_.compressedData
TMP_578(uint256) = now * 1000000000000000000
TMP_579(uint256) = REF_840 + TMP_578
TMP_580(uint256) = _team * 100000000000000000000000000000
TMP_581(uint256) = TMP_579 + TMP_580
REF_839(uint256) (->_eventData_) := TMP_581(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_841(uint256) -> _eventData_.compressedIDs
REF_842(uint256) -> _eventData_.compressedIDs
TMP_582(uint256) = REF_842 + _pID
TMP_583(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_584(uint256) = TMP_582 + TMP_583
REF_841(uint256) (->_eventData_) := TMP_584(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,_realSender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_844(uint256) -> _eventData_.compressedData
REF_845(uint256) -> _eventData_.compressedIDs
REF_846(F3Ddatasets.Player) -> plyr_[_pID]
REF_847(bytes32) -> REF_846.name
REF_848(address) -> _eventData_.winnerAddr
REF_849(bytes32) -> _eventData_.winnerName
REF_850(uint256) -> _eventData_.amountWon
REF_851(uint256) -> _eventData_.newPot
REF_852(uint256) -> _eventData_.P3DAmount
REF_853(uint256) -> _eventData_.genAmount
REF_854(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_844,REF_845,REF_847,_realSender,_eth,_keys,REF_848,REF_849,REF_850,REF_851,REF_852,REF_853,REF_854,airDropPot_)"];
}
// Function: 785.sol-FoMo3DFast-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_98(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_98(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_50(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_50(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
INTERNAL_CALL, FoMo3DFast.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_52,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 785.sol-FoMo3DFast-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_206(F3Ddatasets.Round) -> round_[_rID]
REF_207(uint256) -> REF_206.strt
TMP_219(uint256) = REF_207 + rndGap_
TMP_220(bool) = _now > TMP_219
REF_208(F3Ddatasets.Round) -> round_[_rID]
REF_209(uint256) -> REF_208.end
TMP_221(bool) = _now <= REF_209
REF_210(F3Ddatasets.Round) -> round_[_rID]
REF_211(uint256) -> REF_210.end
TMP_222(bool) = _now > REF_211
REF_212(F3Ddatasets.Round) -> round_[_rID]
REF_213(uint256) -> REF_212.plyr
TMP_223(bool) = REF_213 == 0
TMP_224(bool) = TMP_222 && TMP_223
TMP_225(bool) = TMP_221 || TMP_224
TMP_226(bool) = TMP_220 && TMP_225
CONDITION TMP_226"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_214(F3Ddatasets.Round) -> round_[_rID]
REF_215(uint256) -> REF_214.keys
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_215', '1000000000000000000'] 
TMP_228(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_227', '1000000000000000000'] 
RETURN TMP_228"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 785.sol-FoMo3DFast-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_288(F3Ddatasets.Round) -> round_[_rID]
REF_289(uint256) -> REF_288.ico
REF_290(F3Ddatasets.Round) -> round_[_rID]
REF_291(uint256) -> REF_290.keys
REF_292(F3Ddatasets.Round) -> round_[_rID]
REF_293(uint256) -> REF_292.end
REF_294(F3Ddatasets.Round) -> round_[_rID]
REF_295(uint256) -> REF_294.strt
REF_296(F3Ddatasets.Round) -> round_[_rID]
REF_297(uint256) -> REF_296.pot
REF_298(F3Ddatasets.Round) -> round_[_rID]
REF_299(uint256) -> REF_298.team
REF_300(F3Ddatasets.Round) -> round_[_rID]
REF_301(uint256) -> REF_300.plyr
TMP_259(uint256) = REF_301 * 10
TMP_260(uint256) = REF_299 + TMP_259
REF_302(F3Ddatasets.Round) -> round_[_rID]
REF_303(uint256) -> REF_302.plyr
REF_304(F3Ddatasets.Player) -> plyr_[REF_303]
REF_305(address) -> REF_304.addr
REF_306(F3Ddatasets.Round) -> round_[_rID]
REF_307(uint256) -> REF_306.plyr
REF_308(F3Ddatasets.Player) -> plyr_[REF_307]
REF_309(bytes32) -> REF_308.name
REF_310(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_311(uint256) -> REF_310[0]
REF_312(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_313(uint256) -> REF_312[1]
REF_314(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_315(uint256) -> REF_314[2]
REF_316(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_317(uint256) -> REF_316[3]
TMP_261(uint256) = airDropPot_ * 1000
TMP_262(uint256) = airDropTracker_ + TMP_261
RETURN REF_289,_rID,REF_291,REF_293,REF_295,REF_297,TMP_260,REF_305,REF_309,REF_311,REF_313,REF_315,REF_317,TMP_262"];
}
// Function: 785.sol-FoMo3DFast-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_263 = CONVERT 0 to address
TMP_264(bool) = _addr == TMP_263
CONDITION TMP_264"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_265(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_318(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_318(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_319(F3Ddatasets.Player) -> plyr_[_pID]
REF_320(bytes32) -> REF_319.name
REF_321(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_322(F3Ddatasets.PlayerRounds) -> REF_321[_rID]
REF_323(uint256) -> REF_322.keys
REF_324(F3Ddatasets.Player) -> plyr_[_pID]
REF_325(uint256) -> REF_324.win
REF_326(F3Ddatasets.Player) -> plyr_[_pID]
REF_327(uint256) -> REF_326.gen
REF_329(F3Ddatasets.Player) -> plyr_[_pID]
REF_330(uint256) -> REF_329.lrnd
TMP_266(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_330)
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_327', 'TMP_266'] 
REF_331(F3Ddatasets.Player) -> plyr_[_pID]
REF_332(uint256) -> REF_331.aff
REF_333(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_334(F3Ddatasets.PlayerRounds) -> REF_333[_rID]
REF_335(uint256) -> REF_334.eth
RETURN _pID,REF_320,REF_323,REF_325,TMP_267,REF_332,REF_335"];
}
// Function: 785.sol-FoMo3DFast-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_228(F3Ddatasets.Round) -> round_[_rID]
REF_229(uint256) -> REF_228.end
TMP_235(bool) = now > REF_229
REF_230(F3Ddatasets.Round) -> round_[_rID]
REF_231(bool) -> REF_230.ended
TMP_236(bool) = REF_231 == False
TMP_237(bool) = TMP_235 && TMP_236
REF_232(F3Ddatasets.Round) -> round_[_rID]
REF_233(uint256) -> REF_232.plyr
TMP_238(bool) = REF_233 != 0
TMP_239(bool) = TMP_237 && TMP_238
CONDITION TMP_239"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_234(F3Ddatasets.Round) -> round_[_rID]
REF_235(uint256) -> REF_234.plyr
TMP_240(bool) = REF_235 == _pID
CONDITION TMP_240"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_236(F3Ddatasets.Player) -> plyr_[_pID]
REF_237(uint256) -> REF_236.win
REF_239(F3Ddatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.pot
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_240', '48'] 
TMP_242(uint256) = TMP_241 / 100
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_237', 'TMP_242'] 
REF_242(F3Ddatasets.Player) -> plyr_[_pID]
REF_243(uint256) -> REF_242.gen
TMP_244(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_246(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_247(F3Ddatasets.PlayerRounds) -> REF_246[_rID]
REF_248(uint256) -> REF_247.mask
TMP_245(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_244', 'REF_248'] 
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_243', 'TMP_245'] 
REF_249(F3Ddatasets.Player) -> plyr_[_pID]
REF_250(uint256) -> REF_249.aff
RETURN TMP_243,TMP_246,REF_250"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_251(F3Ddatasets.Player) -> plyr_[_pID]
REF_252(uint256) -> REF_251.win
REF_253(F3Ddatasets.Player) -> plyr_[_pID]
REF_254(uint256) -> REF_253.gen
TMP_247(uint256) = INTERNAL_CALL, FoMo3DFast.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_257(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_258(F3Ddatasets.PlayerRounds) -> REF_257[_rID]
REF_259(uint256) -> REF_258.mask
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_247', 'REF_259'] 
TMP_249(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_254', 'TMP_248'] 
REF_260(F3Ddatasets.Player) -> plyr_[_pID]
REF_261(uint256) -> REF_260.aff
RETURN REF_252,TMP_249,REF_261"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_262(F3Ddatasets.Player) -> plyr_[_pID]
REF_263(uint256) -> REF_262.win
REF_264(F3Ddatasets.Player) -> plyr_[_pID]
REF_265(uint256) -> REF_264.gen
REF_267(F3Ddatasets.Player) -> plyr_[_pID]
REF_268(uint256) -> REF_267.lrnd
TMP_250(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_268)
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_265', 'TMP_250'] 
REF_269(F3Ddatasets.Player) -> plyr_[_pID]
REF_270(uint256) -> REF_269.aff
RETURN REF_263,TMP_251,REF_270"];
}
// Function: 785.sol-FoMo3DFast-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.mask
REF_274(F3Ddatasets.Round) -> round_[_rID]
REF_275(uint256) -> REF_274.pot
REF_277(F3Ddatasets.Round) -> round_[_rID]
REF_278(uint256) -> REF_277.team
REF_279(F3Ddatasets.PotSplit) -> potSplit_[REF_278]
REF_280(uint256) -> REF_279.gen
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_275', 'REF_280'] 
TMP_253(uint256) = TMP_252 / 100
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_253', '1000000000000000000'] 
REF_282(F3Ddatasets.Round) -> round_[_rID]
REF_283(uint256) -> REF_282.keys
TMP_255(uint256) = TMP_254 / REF_283
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_272', 'TMP_255'] 
REF_285(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_286(F3Ddatasets.PlayerRounds) -> REF_285[_rID]
REF_287(uint256) -> REF_286.keys
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_256', 'REF_287'] 
TMP_258(uint256) = TMP_257 / 1000000000000000000
RETURN TMP_258"];
}
// Function: 785.sol-FoMo3DFast-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_218(F3Ddatasets.Round) -> round_[_rID]
REF_219(uint256) -> REF_218.end
TMP_229(bool) = _now < REF_219
CONDITION TMP_229"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_220(F3Ddatasets.Round) -> round_[_rID]
REF_221(uint256) -> REF_220.strt
TMP_230(uint256) = REF_221 + rndGap_
TMP_231(bool) = _now > TMP_230
CONDITION TMP_231"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_222(F3Ddatasets.Round) -> round_[_rID]
REF_223(uint256) -> REF_222.end
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_223', '_now'] 
RETURN TMP_232"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.strt
TMP_233(uint256) = REF_226 + rndGap_
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_233', '_now'] 
RETURN TMP_234"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 785.sol-FoMo3DFast-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_547(F3Ddatasets.Round) -> round_[_rID]
REF_548(uint256) -> REF_547.strt
TMP_391(uint256) = REF_548 + rndGap_
TMP_392(bool) = _now > TMP_391
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.end
TMP_393(bool) = _now <= REF_550
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.end
TMP_394(bool) = _now > REF_552
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.plyr
TMP_395(bool) = REF_554 == 0
TMP_396(bool) = TMP_394 && TMP_395
TMP_397(bool) = TMP_393 || TMP_396
TMP_398(bool) = TMP_392 && TMP_397
CONDITION TMP_398"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_555(F3Ddatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.keys
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_556', '_keys'] 
TMP_400(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_399', '_keys'] 
RETURN TMP_400"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_401(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_401"];
}
// Function: 785.sol-FoMo3DFast-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_595(bool) = activated_ == True
TMP_596(None) = SOLIDITY_CALL require(bool,string)(TMP_595,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 785.sol-FoMo3DFast-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_597(bool) = _codeLength == 0
TMP_598(None) = SOLIDITY_CALL require(bool,string)(TMP_597,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 785.sol-FoMo3DFast-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_599(bool) = _eth >= 1000000000
TMP_600(None) = SOLIDITY_CALL require(bool,string)(TMP_599,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_601(bool) = _eth <= 100000000000000000000000
TMP_602(None) = SOLIDITY_CALL require(bool,string)(TMP_601,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 785.sol-FoMo3DFast-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_616(F3Ddatasets.Player) -> plyr_[_pID]
REF_617(uint256) -> REF_616.lrnd
TMP_436(bool) = REF_617 != 0
CONDITION TMP_436"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_618(F3Ddatasets.Player) -> plyr_[_pID]
REF_619(uint256) -> REF_618.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_619)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_620(F3Ddatasets.Player) -> plyr_[_pID]
REF_621(uint256) -> REF_620.lrnd
REF_621(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_622(uint256) -> _eventData_.compressedData
REF_623(uint256) -> _eventData_.compressedData
TMP_438(uint256) = REF_623 + 10
REF_622(uint256) (->_eventData_) := TMP_438(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 785.sol-FoMo3DFast-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_534(uint256) = rID_ + 1
_rID(uint256) := TMP_534(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_755(F3Ddatasets.Round) -> round_[_rID]
REF_756(uint256) -> REF_755.pot
REF_757(F3Ddatasets.Round) -> round_[_rID]
REF_758(uint256) -> REF_757.pot
TMP_535(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_758', 'msg.value'] 
REF_756(uint256) (->round_) := TMP_535(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 785.sol-FoMo3DFast-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.strt
TMP_305(uint256) = REF_405 + rndGap_
TMP_306(bool) = _now > TMP_305
REF_406(F3Ddatasets.Round) -> round_[_rID]
REF_407(uint256) -> REF_406.end
TMP_307(bool) = _now <= REF_407
REF_408(F3Ddatasets.Round) -> round_[_rID]
REF_409(uint256) -> REF_408.end
TMP_308(bool) = _now > REF_409
REF_410(F3Ddatasets.Round) -> round_[_rID]
REF_411(uint256) -> REF_410.plyr
TMP_309(bool) = REF_411 == 0
TMP_310(bool) = TMP_308 && TMP_309
TMP_311(bool) = TMP_307 || TMP_310
TMP_312(bool) = TMP_306 && TMP_311
CONDITION TMP_312"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_412(F3Ddatasets.Player) -> plyr_[_pID]
REF_413(uint256) -> REF_412.gen
TMP_313(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_313', '_eth'] 
REF_413(uint256) (->plyr_) := TMP_314(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(address(0),_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_315 = CONVERT 0 to address
INTERNAL_CALL, FoMo3DFast.core(address,uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(TMP_315,_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_415(F3Ddatasets.Round) -> round_[_rID]
REF_416(uint256) -> REF_415.end
TMP_317(bool) = _now > REF_416
REF_417(F3Ddatasets.Round) -> round_[_rID]
REF_418(bool) -> REF_417.ended
TMP_318(bool) = REF_418 == False
TMP_319(bool) = TMP_317 && TMP_318
CONDITION TMP_319"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_419(F3Ddatasets.Round) -> round_[_rID]
REF_420(bool) -> REF_419.ended
REF_420(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_320(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_320(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_421(uint256) -> _eventData_.compressedData
REF_422(uint256) -> _eventData_.compressedData
TMP_321(uint256) = _now * 1000000000000000000
TMP_322(uint256) = REF_422 + TMP_321
REF_421(uint256) (->_eventData_) := TMP_322(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_423(uint256) -> _eventData_.compressedIDs
REF_424(uint256) -> _eventData_.compressedIDs
TMP_323(uint256) = REF_424 + _pID
REF_423(uint256) (->_eventData_) := TMP_323(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_426(F3Ddatasets.Player) -> plyr_[_pID]
REF_427(bytes32) -> REF_426.name
REF_428(uint256) -> _eventData_.compressedData
REF_429(uint256) -> _eventData_.compressedIDs
REF_430(address) -> _eventData_.winnerAddr
REF_431(bytes32) -> _eventData_.winnerName
REF_432(uint256) -> _eventData_.amountWon
REF_433(uint256) -> _eventData_.newPot
REF_434(uint256) -> _eventData_.P3DAmount
REF_435(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_427,REF_428,REF_429,REF_430,REF_431,REF_432,REF_433,REF_434,REF_435)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 785.sol-FoMo3DFast-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_95(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_95(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_151 = CONVERT 0 to address
TMP_152(bool) = _affCode == TMP_151
TMP_153(bool) = _affCode == msg.sender
TMP_154(bool) = TMP_152 || TMP_153
CONDITION TMP_154"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(uint256) -> REF_96.laff
_affID(uint256) := REF_97(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_98(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_98(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_99(F3Ddatasets.Player) -> plyr_[_pID]
REF_100(uint256) -> REF_99.laff
TMP_155(bool) = _affID != REF_100
CONDITION TMP_155"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_pID]
REF_102(uint256) -> REF_101.laff
REF_102(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_156(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_156(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 785.sol-FoMo3DFast-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_88(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_88(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_142(bool) = _affCode == 0
TMP_143(bool) = _affCode == _pID
TMP_144(bool) = TMP_142 || TMP_143
CONDITION TMP_144"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_89(F3Ddatasets.Player) -> plyr_[_pID]
REF_90(uint256) -> REF_89.laff
_affCode(uint256) := REF_90(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_91(F3Ddatasets.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.laff
TMP_145(bool) = _affCode != REF_92
CONDITION TMP_145"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_93(F3Ddatasets.Player) -> plyr_[_pID]
REF_94(uint256) -> REF_93.laff
REF_94(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_146(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_146(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 785.sol-FoMo3DFast-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_103(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_103(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_161(bool) = _affCode == 
REF_104(F3Ddatasets.Player) -> plyr_[_pID]
REF_105(bytes32) -> REF_104.name
TMP_162(bool) = _affCode == REF_105
TMP_163(bool) = TMP_161 || TMP_162
CONDITION TMP_163"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_106(F3Ddatasets.Player) -> plyr_[_pID]
REF_107(uint256) -> REF_106.laff
_affID(uint256) := REF_107(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_108(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_108(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_109(F3Ddatasets.Player) -> plyr_[_pID]
REF_110(uint256) -> REF_109.laff
TMP_164(bool) = _affID != REF_110
CONDITION TMP_164"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_111(F3Ddatasets.Player) -> plyr_[_pID]
REF_112(uint256) -> REF_111.laff
REF_112(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_165(uint256) = INTERNAL_CALL, FoMo3DFast.verifyTeam(uint256)(_team)
_team(uint256) := TMP_165(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DFast.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DFast.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 785.sol-FoMo3DFast-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_402 = CONVERT PlayerBook to address
TMP_403(bool) = msg.sender == TMP_402
TMP_404(None) = SOLIDITY_CALL require(bool,string)(TMP_403,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_560(uint256) -> pIDxAddr_[_addr]
TMP_405(bool) = REF_560 != _pID
CONDITION TMP_405"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_561(uint256) -> pIDxAddr_[_addr]
REF_561(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_562(uint256) -> pIDxName_[_name]
TMP_406(bool) = REF_562 != _pID
CONDITION TMP_406"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_563(uint256) -> pIDxName_[_name]
REF_563(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_564(F3Ddatasets.Player) -> plyr_[_pID]
REF_565(address) -> REF_564.addr
TMP_407(bool) = REF_565 != _addr
CONDITION TMP_407"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_566(F3Ddatasets.Player) -> plyr_[_pID]
REF_567(address) -> REF_566.addr
REF_567(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_568(F3Ddatasets.Player) -> plyr_[_pID]
REF_569(bytes32) -> REF_568.name
TMP_408(bool) = REF_569 != _name
CONDITION TMP_408"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_570(F3Ddatasets.Player) -> plyr_[_pID]
REF_571(bytes32) -> REF_570.name
REF_571(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_572(F3Ddatasets.Player) -> plyr_[_pID]
REF_573(uint256) -> REF_572.laff
TMP_409(bool) = REF_573 != _laff
CONDITION TMP_409"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_574(F3Ddatasets.Player) -> plyr_[_pID]
REF_575(uint256) -> REF_574.laff
REF_575(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_576(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_577(bool) -> REF_576[_name]
TMP_410(bool) = REF_577 == False
CONDITION TMP_410"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_578(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_579(bool) -> REF_578[_name]
REF_579(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 785.sol-FoMo3DFast-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_411 = CONVERT PlayerBook to address
TMP_412(bool) = msg.sender == TMP_411
TMP_413(None) = SOLIDITY_CALL require(bool,string)(TMP_412,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_580(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_581(bool) -> REF_580[_name]
TMP_414(bool) = REF_581 == False
CONDITION TMP_414"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_582(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_583(bool) -> REF_582[_name]
REF_583(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 785.sol-FoMo3DFast-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_207(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_207(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_182(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_182(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_184(F3Ddatasets.Player) -> plyr_[_affID]
REF_185(address) -> REF_184.addr
REF_186(F3Ddatasets.Player) -> plyr_[_affID]
REF_187(bytes32) -> REF_186.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_185,REF_187,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 785.sol-FoMo3DFast-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_211(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_211(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_191(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_191(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_193(F3Ddatasets.Player) -> plyr_[_affID]
REF_194(address) -> REF_193.addr
REF_195(F3Ddatasets.Player) -> plyr_[_affID]
REF_196(bytes32) -> REF_195.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_194,REF_196,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 785.sol-FoMo3DFast-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_215(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_215(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_200(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_200(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_202(F3Ddatasets.Player) -> plyr_[_affID]
REF_203(address) -> REF_202.addr
REF_204(F3Ddatasets.Player) -> plyr_[_affID]
REF_205(bytes32) -> REF_204.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_203,REF_205,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
9->1;
}
// Function: 785.sol-FoMo3DFast-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0xea07723857747Ae8b92Df3bCA6A67Fb85e586c6d)

IRs:
TMP_594 = CONVERT 1336069895561824566234311435760699231267121032301 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_594(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = FOMO Fast

IRs:
name(string) := FOMO Fast(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = FAST

IRs:
symbol(string) := FAST(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 1800

IRs:
rndInit_(uint256) := 1800(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 20

IRs:
rndInc_(uint256) := 20(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 28800

IRs:
rndMax_(uint256) := 28800(uint256)"];
}
// Function: 785.sol-FoMo3DFast-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 180

IRs:
rndExtra_(uint256) := 180(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 180

IRs:
rndGap_(uint256) := 180(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 785.sol-FoMo3DFast-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_476(uint256) = INTERNAL_CALL, FoMo3DFast.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_476(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_477(bool) = _earnings > 0
CONDITION TMP_477"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_690(F3Ddatasets.Player) -> plyr_[_pID]
REF_691(uint256) -> REF_690.gen
REF_693(F3Ddatasets.Player) -> plyr_[_pID]
REF_694(uint256) -> REF_693.gen
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_694'] 
REF_691(uint256) (->plyr_) := TMP_478(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_695(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_696(F3Ddatasets.PlayerRounds) -> REF_695[_rIDlast]
REF_697(uint256) -> REF_696.mask
REF_699(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_700(F3Ddatasets.PlayerRounds) -> REF_699[_rIDlast]
REF_701(uint256) -> REF_700.mask
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_701'] 
REF_697(uint256) (->plyrRnds_) := TMP_479(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 785.sol-FoMo3DFast-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_554(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_784(F3Ddatasets.Round) -> round_[_rID]
REF_785(uint256) -> REF_784.keys
TMP_555(uint256) = TMP_554 / REF_785
_ppt(uint256) := TMP_555(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_786(F3Ddatasets.Round) -> round_[_rID]
REF_787(uint256) -> REF_786.mask
REF_789(F3Ddatasets.Round) -> round_[_rID]
REF_790(uint256) -> REF_789.mask
TMP_556(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_790'] 
REF_787(uint256) (->round_) := TMP_556(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_557(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_558(uint256) = TMP_557 / 1000000000000000000
_pearn(uint256) := TMP_558(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_792(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_793(F3Ddatasets.PlayerRounds) -> REF_792[_rID]
REF_794(uint256) -> REF_793.mask
REF_795(F3Ddatasets.Round) -> round_[_rID]
REF_796(uint256) -> REF_795.mask
TMP_559(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_796', '_keys'] 
TMP_560(uint256) = TMP_559 / 1000000000000000000
TMP_561(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_560', '_pearn'] 
REF_800(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_801(F3Ddatasets.PlayerRounds) -> REF_800[_rID]
REF_802(uint256) -> REF_801.mask
TMP_562(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_561', 'REF_802'] 
REF_794(uint256) (->plyrRnds_) := TMP_562(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_805(F3Ddatasets.Round) -> round_[_rID]
REF_806(uint256) -> REF_805.keys
TMP_563(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_806'] 
TMP_564(uint256) = TMP_563 / 1000000000000000000
TMP_565(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_564'] 
RETURN TMP_565"];
}
// Function: 785.sol-FoMo3DFast-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_702(F3Ddatasets.Round) -> round_[_rID]
REF_703(uint256) -> REF_702.end
TMP_480(bool) = _now > REF_703
REF_704(F3Ddatasets.Round) -> round_[_rID]
REF_705(uint256) -> REF_704.plyr
TMP_481(bool) = REF_705 == 0
TMP_482(bool) = TMP_480 && TMP_481
CONDITION TMP_482"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_483(uint256) = _keys / 1000000000000000000
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_483', 'rndInc_'] 
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_484', '_now'] 
_newTime(uint256) := TMP_485(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_486(uint256) = _keys / 1000000000000000000
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_486', 'rndInc_'] 
REF_710(F3Ddatasets.Round) -> round_[_rID]
REF_711(uint256) -> REF_710.end
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_487', 'REF_711'] 
_newTime(uint256) := TMP_488(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_490(bool) = _newTime < TMP_489
CONDITION TMP_490"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_713(F3Ddatasets.Round) -> round_[_rID]
REF_714(uint256) -> REF_713.end
REF_714(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_715(F3Ddatasets.Round) -> round_[_rID]
REF_716(uint256) -> REF_715.end
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_716(uint256) (->round_) := TMP_491(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 785.sol-FoMo3DFast-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_433(bool) = _team < 0
TMP_434(bool) = _team > 3
TMP_435(bool) = TMP_433 || TMP_434
CONDITION TMP_435"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 785.sol-FoMo3DFast-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_113(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_113(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_114(F3Ddatasets.Round) -> round_[_rID]
REF_115(uint256) -> REF_114.end
TMP_170(bool) = _now > REF_115
REF_116(F3Ddatasets.Round) -> round_[_rID]
REF_117(bool) -> REF_116.ended
TMP_171(bool) = REF_117 == False
TMP_172(bool) = TMP_170 && TMP_171
REF_118(F3Ddatasets.Round) -> round_[_rID]
REF_119(uint256) -> REF_118.plyr
TMP_173(bool) = REF_119 != 0
TMP_174(bool) = TMP_172 && TMP_173
CONDITION TMP_174"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_120(F3Ddatasets.Round) -> round_[_rID]
REF_121(bool) -> REF_120.ended
REF_121(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_175(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_175(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_176(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_176(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_177(bool) = _eth > 0
CONDITION TMP_177"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_122(F3Ddatasets.Player) -> plyr_[_pID]
REF_123(address) -> REF_122.addr
Transfer dest:REF_123 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_125(uint256) -> _eventData_.compressedData
REF_126(uint256) -> _eventData_.compressedData
TMP_179(uint256) = _now * 1000000000000000000
TMP_180(uint256) = REF_126 + TMP_179
REF_125(uint256) (->_eventData_) := TMP_180(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_127(uint256) -> _eventData_.compressedIDs
REF_128(uint256) -> _eventData_.compressedIDs
TMP_181(uint256) = REF_128 + _pID
REF_127(uint256) (->_eventData_) := TMP_181(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_130(F3Ddatasets.Player) -> plyr_[_pID]
REF_131(bytes32) -> REF_130.name
REF_132(uint256) -> _eventData_.compressedData
REF_133(uint256) -> _eventData_.compressedIDs
REF_134(address) -> _eventData_.winnerAddr
REF_135(bytes32) -> _eventData_.winnerName
REF_136(uint256) -> _eventData_.amountWon
REF_137(uint256) -> _eventData_.newPot
REF_138(uint256) -> _eventData_.P3DAmount
REF_139(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_131,_eth,REF_132,REF_133,REF_134,REF_135,REF_136,REF_137,REF_138,REF_139)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_183(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_183(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_184(bool) = _eth > 0
CONDITION TMP_184"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_140(F3Ddatasets.Player) -> plyr_[_pID]
REF_141(address) -> REF_140.addr
Transfer dest:REF_141 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_144(F3Ddatasets.Player) -> plyr_[_pID]
REF_145(bytes32) -> REF_144.name
Emit onWithdraw(_pID,msg.sender,REF_145,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DFast.isHuman()()"];
23->1;
}
// Function: 785.sol-FoMo3DFast-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_807(F3Ddatasets.Player) -> plyr_[_pID]
REF_808(uint256) -> REF_807.lrnd
INTERNAL_CALL, FoMo3DFast.updateGenVault(uint256,uint256)(_pID,REF_808)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_809(F3Ddatasets.Player) -> plyr_[_pID]
REF_810(uint256) -> REF_809.win
REF_812(F3Ddatasets.Player) -> plyr_[_pID]
REF_813(uint256) -> REF_812.gen
TMP_567(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_810', 'REF_813'] 
REF_815(F3Ddatasets.Player) -> plyr_[_pID]
REF_816(uint256) -> REF_815.aff
TMP_568(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_567', 'REF_816'] 
_earnings(uint256) := TMP_568(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_569(bool) = _earnings > 0
CONDITION TMP_569"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_817(F3Ddatasets.Player) -> plyr_[_pID]
REF_818(uint256) -> REF_817.win
REF_818(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_819(F3Ddatasets.Player) -> plyr_[_pID]
REF_820(uint256) -> REF_819.gen
REF_820(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_821(F3Ddatasets.Player) -> plyr_[_pID]
REF_822(uint256) -> REF_821.aff
REF_822(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 785.sol-FoMo3DFast-withdrawQR(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_realSender]

IRs:
REF_146(uint256) -> pIDxAddr_[_realSender]
_pID(uint256) := REF_146(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.end
TMP_189(bool) = _now > REF_148
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(bool) -> REF_149.ended
TMP_190(bool) = REF_150 == False
TMP_191(bool) = TMP_189 && TMP_190
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.plyr
TMP_192(bool) = REF_152 != 0
TMP_193(bool) = TMP_191 && TMP_192
CONDITION TMP_193"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(bool) -> REF_153.ended
REF_154(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_194(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DFast.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_194(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_195(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_195(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_196(bool) = _eth > 0
CONDITION TMP_196"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_155(F3Ddatasets.Player) -> plyr_[_pID]
REF_156(address) -> REF_155.addr
Transfer dest:REF_156 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_158(uint256) -> _eventData_.compressedData
REF_159(uint256) -> _eventData_.compressedData
TMP_198(uint256) = _now * 1000000000000000000
TMP_199(uint256) = REF_159 + TMP_198
REF_158(uint256) (->_eventData_) := TMP_199(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_160(uint256) -> _eventData_.compressedIDs
REF_161(uint256) -> _eventData_.compressedIDs
TMP_200(uint256) = REF_161 + _pID
REF_160(uint256) (->_eventData_) := TMP_200(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(_realSender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_163(F3Ddatasets.Player) -> plyr_[_pID]
REF_164(bytes32) -> REF_163.name
REF_165(uint256) -> _eventData_.compressedData
REF_166(uint256) -> _eventData_.compressedIDs
REF_167(address) -> _eventData_.winnerAddr
REF_168(bytes32) -> _eventData_.winnerName
REF_169(uint256) -> _eventData_.amountWon
REF_170(uint256) -> _eventData_.newPot
REF_171(uint256) -> _eventData_.P3DAmount
REF_172(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(_realSender,REF_164,_eth,REF_165,REF_166,REF_167,REF_168,REF_169,REF_170,REF_171,REF_172)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_202(uint256) = INTERNAL_CALL, FoMo3DFast.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_202(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_203(bool) = _eth > 0
CONDITION TMP_203"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_173(F3Ddatasets.Player) -> plyr_[_pID]
REF_174(address) -> REF_173.addr
Transfer dest:REF_174 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,_realSender,plyr_[_pID].name,_eth,_now)

IRs:
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(bytes32) -> REF_177.name
Emit onWithdraw(_pID,_realSender,REF_178,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DFast.isActivated()()"];
22->1;
}
// Function: 785.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_0 = CONVERT _input to bytes
_temp(bytes) := TMP_0(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_1(bool) = _length <= 32
TMP_2(bool) = _length > 0
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_5(bool) = REF_1 != 32
TMP_6(uint256) = _length - 1
REF_2(None) -> _temp[TMP_6]
TMP_7(bool) = REF_2 != 32
TMP_8(bool) = TMP_5 && TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool,string)(TMP_8,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_10(bool) = REF_3 == 48
CONDITION TMP_10"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_11(bool) = REF_4 != 120
TMP_12(None) = SOLIDITY_CALL require(bool,string)(TMP_11,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_13(bool) = REF_5 != 88
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_15(bool) = i < _length
CONDITION TMP_15"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_16(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_17(bool) = REF_7 < 91
TMP_18(bool) = TMP_16 && TMP_17
CONDITION TMP_18"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_19 = CONVERT REF_9 to uint256
TMP_20(uint256) = TMP_19 + 32
TMP_21 = CONVERT TMP_20 to bytes1
REF_8(bytes1) (->_temp) := TMP_21(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_22(bool) = _hasNonNumber == False
CONDITION TMP_22"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_23(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_24(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_25(bool) = REF_12 < 123
TMP_26(bool) = TMP_24 && TMP_25
TMP_27(bool) = TMP_23 || TMP_26
REF_13(None) -> _temp[i]
TMP_28(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_29(bool) = REF_14 < 58
TMP_30(bool) = TMP_28 && TMP_29
TMP_31(bool) = TMP_27 || TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_33(bool) = REF_15 == 32
CONDITION TMP_33"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_34(uint256) = i + 1
REF_16(None) -> _temp[TMP_34]
TMP_35(bool) = REF_16 != 32
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_37(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_38(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_39(bool) = REF_18 > 57
TMP_40(bool) = TMP_38 || TMP_39
TMP_41(bool) = TMP_37 && TMP_40
CONDITION TMP_41"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_42(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_43(bool) = _hasNonNumber == True
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 785.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 785.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 785.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 785.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 785.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 785.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 785.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 785.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 785.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_53(uint256) = a + b
c(uint256) := TMP_53(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_54(bool) = c >= a
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 785.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_45(bool) = a == 0
CONDITION TMP_45"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_46(uint256) = a * b
c(uint256) := TMP_46(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_47(uint256) = c / a
TMP_48(bool) = TMP_47 == b
TMP_49(None) = SOLIDITY_CALL require(bool,string)(TMP_48,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 785.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_63(bool) = x == 0
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_64(bool) = y == 0
CONDITION TMP_64"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_65(bool) = i < y
CONDITION TMP_65"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_66(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_66(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_67(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 785.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_62(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_62"];
}
// Function: 785.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_56(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_57(uint256) = TMP_56 / 2
z(uint256) := TMP_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_58(bool) = z < y
CONDITION TMP_58"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_59(uint256) = x / z
TMP_60(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_59,z)
TMP_61(uint256) = TMP_60 / 2
z(uint256) := TMP_61(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 785.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_50(bool) = b <= a
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_52(uint256) = a - b
RETURN TMP_52"];
}
}
