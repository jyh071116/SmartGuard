digraph G {
// Function: 803.sol-AccessAdmin-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addrAdmin = msg.sender

IRs:
addrAdmin(address) := msg.sender(address)"];
}
// Function: 803.sol-AccessAdmin-doPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = true

IRs:
isPaused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 803.sol-AccessAdmin-doUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenPaused()()"];
3->1;
}
// Function: 803.sol-AccessAdmin-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrAdmin)

IRs:
TMP_17(bool) = msg.sender == addrAdmin
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-AccessAdmin-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_8 = CONVERT 0 to address
TMP_9(bool) = _newAdmin != TMP_8
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(addrAdmin,_newAdmin)

IRs:
Emit AdminTransferred(addrAdmin,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrAdmin = _newAdmin

IRs:
addrAdmin(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
4->1;
}
// Function: 803.sol-AccessAdmin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
}
// Function: 803.sol-AccessAdmin-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isPaused)

IRs:
TMP_19 = UnaryType.BANG isPaused 
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-AccessAdmin-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPaused)

IRs:
TMP_21(None) = SOLIDITY_CALL require(bool)(isPaused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-AccessService-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addrAdmin = msg.sender

IRs:
addrAdmin(address) := msg.sender(address)"];
}
// Function: 803.sol-AccessService-doPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = true

IRs:
isPaused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 803.sol-AccessService-doUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenPaused()()"];
3->1;
}
// Function: 803.sol-AccessService-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrAdmin)

IRs:
TMP_45(bool) = msg.sender == addrAdmin
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-AccessService-onlyFinance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrFinance)

IRs:
TMP_52(bool) = msg.sender == addrFinance
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-AccessService-onlyService()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrService)

IRs:
TMP_50(bool) = msg.sender == addrService
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-AccessService-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = _newAdmin != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(addrAdmin,_newAdmin)

IRs:
Emit AdminTransferred(addrAdmin,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrAdmin = _newAdmin

IRs:
addrAdmin(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
4->1;
}
// Function: 803.sol-AccessService-setFinance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrFinance || msg.sender == addrAdmin)

IRs:
TMP_38(bool) = msg.sender == addrFinance
TMP_39(bool) = msg.sender == addrAdmin
TMP_40(bool) = TMP_38 || TMP_39
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_newFinance != address(0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = _newFinance != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrFinance = _newFinance

IRs:
addrFinance(address) := _newFinance(address)"];
}
// Function: 803.sol-AccessService-setService(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrService || msg.sender == addrAdmin)

IRs:
TMP_31(bool) = msg.sender == addrService
TMP_32(bool) = msg.sender == addrAdmin
TMP_33(bool) = TMP_31 || TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_newService != address(0))

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = _newService != TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrService = _newService

IRs:
addrService(address) := _newService(address)"];
}
// Function: 803.sol-AccessService-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
}
// Function: 803.sol-AccessService-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isPaused)

IRs:
TMP_47 = UnaryType.BANG isPaused 
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-AccessService-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPaused)

IRs:
TMP_49(None) = SOLIDITY_CALL require(bool)(isPaused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-ELHeroToken-_changeAttrByIndex(ELHeroToken.Card,uint16,uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_index == 2

IRs:
TMP_146(bool) = _index == 2
CONDITION TMP_146"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_cd.quality = _val

IRs:
REF_55(uint16) -> _cd.quality
REF_55(uint16) (->_cd) := _val(uint16)"];
2->15;
3[label="Node Type: IF 3

EXPRESSION:
_index == 3

IRs:
TMP_147(bool) = _index == 3
CONDITION TMP_147"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_cd.feature = _val

IRs:
REF_56(uint16) -> _cd.feature
REF_56(uint16) (->_cd) := _val(uint16)"];
4->14;
5[label="Node Type: IF 5

EXPRESSION:
_index == 4

IRs:
TMP_148(bool) = _index == 4
CONDITION TMP_148"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_cd.level = _val

IRs:
REF_57(uint16) -> _cd.level
REF_57(uint16) (->_cd) := _val(uint16)"];
6->13;
7[label="Node Type: IF 7

EXPRESSION:
_index == 5

IRs:
TMP_149(bool) = _index == 5
CONDITION TMP_149"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_cd.attrExt1 = _val

IRs:
REF_58(uint16) -> _cd.attrExt1
REF_58(uint16) (->_cd) := _val(uint16)"];
8->12;
9[label="Node Type: IF 9

EXPRESSION:
_index == 6

IRs:
TMP_150(bool) = _index == 6
CONDITION TMP_150"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_cd.attrExt2 = _val

IRs:
REF_59(uint16) -> _cd.attrExt2
REF_59(uint16) (->_cd) := _val(uint16)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
}
// Function: 803.sol-ELHeroToken-_safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = cardIdToOwner[_tokenId]

IRs:
REF_17(address) -> cardIdToOwner[_tokenId]
owner(address) := REF_17(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_104 = CONVERT 0 to address
TMP_105(bool) = owner != TMP_104
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_107 = CONVERT 0 to address
TMP_108(bool) = _to != TMP_107
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(owner == _from)

IRs:
TMP_110(bool) = owner == _from
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ELHeroToken._transfer(address,address,uint256)(_from,_to,_tokenId)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
codeSize == 0

IRs:
TMP_113(bool) = codeSize == 0
CONDITION TMP_113"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
retval = ERC721TokenReceiver(_to).onERC721Received(_from,_tokenId,data)

IRs:
TMP_114 = CONVERT _to to ERC721TokenReceiver
TMP_115(bytes4) = HIGH_LEVEL_CALL, dest:TMP_114(ERC721TokenReceiver), function:onERC721Received, arguments:['_from', '_tokenId', 'data']  
retval(bytes4) := TMP_115(bytes4)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(retval == 0xf0b9e5ba)

IRs:
TMP_116(bool) = retval == 4038714810
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.isValidToken(uint256)(_tokenId)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.canTransfer(uint256)(_tokenId)"];
15->1;
}
// Function: 803.sol-ELHeroToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_from != address(0)

IRs:
TMP_120 = CONVERT 0 to address
TMP_121(bool) = _from != TMP_120
CONDITION TMP_121"];
1->2[label="True"];
1->14[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
indexFrom = cardIdToOwnerIndex[_tokenId]

IRs:
REF_19(uint256) -> cardIdToOwnerIndex[_tokenId]
indexFrom(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
cdArray = ownerToCardArray[_from]

IRs:
REF_20(uint256[]) -> ownerToCardArray[_from]
cdArray(uint256[]) = ['REF_20(uint256[])']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(cdArray[indexFrom] == _tokenId)

IRs:
REF_21(uint256) -> cdArray[indexFrom]
TMP_122(bool) = REF_21 == _tokenId
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
indexFrom != cdArray.length - 1

IRs:
REF_22 -> LENGTH cdArray
TMP_124(uint256) = REF_22 - 1
TMP_125(bool) = indexFrom != TMP_124
CONDITION TMP_125"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTokenId = cdArray[cdArray.length - 1]

IRs:
REF_23 -> LENGTH cdArray
TMP_126(uint256) = REF_23 - 1
REF_24(uint256) -> cdArray[TMP_126]
lastTokenId(uint256) := REF_24(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
cdArray[indexFrom] = lastTokenId

IRs:
REF_25(uint256) -> cdArray[indexFrom]
REF_25(uint256) (->cdArray) := lastTokenId(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cardIdToOwnerIndex[lastTokenId] = indexFrom

IRs:
REF_26(uint256) -> cardIdToOwnerIndex[lastTokenId]
REF_26(uint256) (->cardIdToOwnerIndex) := indexFrom(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cdArray.length -= 1

IRs:
REF_27 -> LENGTH cdArray
REF_27(-> cdArray) = REF_27 - 1"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
cardIdToApprovals[_tokenId] != address(0)

IRs:
REF_28(address) -> cardIdToApprovals[_tokenId]
TMP_127 = CONVERT 0 to address
TMP_128(bool) = REF_28 != TMP_127
CONDITION TMP_128"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete cardIdToApprovals[_tokenId]

IRs:
REF_29(address) -> cardIdToApprovals[_tokenId]
cardIdToApprovals = delete REF_29 "];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
cardIdToOwner[_tokenId] = _to

IRs:
REF_30(address) -> cardIdToOwner[_tokenId]
REF_30(address) (->cardIdToOwner) := _to(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ownerToCardArray[_to].push(_tokenId)

IRs:
REF_31(uint256[]) -> ownerToCardArray[_to]
REF_33 -> LENGTH REF_31
TMP_130(uint256) := REF_33(uint256)
TMP_131(uint256) = TMP_130 + 1
REF_33(uint256) (->ownerToCardArray) := TMP_131(uint256)
REF_34(uint256) -> REF_31[TMP_130]
REF_34(uint256) (->ownerToCardArray) := _tokenId(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
cardIdToOwnerIndex[_tokenId] = ownerToCardArray[_to].length - 1

IRs:
REF_35(uint256) -> cardIdToOwnerIndex[_tokenId]
REF_36(uint256[]) -> ownerToCardArray[_to]
REF_37 -> LENGTH REF_36
TMP_132(uint256) = REF_37 - 1
REF_35(uint256) (->cardIdToOwnerIndex) := TMP_132(uint256)"];
17->19;
19[label="Node Type: IF 19

EXPRESSION:
_from != address(0)

IRs:
TMP_133 = CONVERT 0 to address
TMP_134(bool) = _from != TMP_133
CONDITION TMP_134"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
20->22;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Transfer(this,_to,_tokenId)

IRs:
Emit Transfer(this,_to,_tokenId)"];
21->22;
22[label="Node Type: END_IF 22
"];
}
// Function: 803.sol-ELHeroToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = cardIdToOwner[_tokenId]

IRs:
REF_7(address) -> cardIdToOwner[_tokenId]
owner(address) := REF_7(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_91 = CONVERT 0 to address
TMP_92(bool) = owner != TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || operatorToApprovals[owner][msg.sender])

IRs:
TMP_94(bool) = msg.sender == owner
REF_8(mapping(address => bool)) -> operatorToApprovals[owner]
REF_9(bool) -> REF_8[msg.sender]
TMP_95(bool) = TMP_94 || REF_9
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cardIdToApprovals[_tokenId] = _approved

IRs:
REF_10(address) -> cardIdToApprovals[_tokenId]
REF_10(address) (->cardIdToApprovals) := _approved(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_approved,_tokenId)

IRs:
Emit Approval(owner,_approved,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
6->1;
}
// Function: 803.sol-ELHeroToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _owner != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownerToCardArray[_owner].length

IRs:
REF_3(uint256[]) -> ownerToCardArray[_owner]
REF_4 -> LENGTH REF_3
RETURN REF_4"];
}
// Function: 803.sol-ELHeroToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = cardIdToOwner[_tokenId]

IRs:
REF_137(address) -> cardIdToOwner[_tokenId]
owner(address) := REF_137(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == cardIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender])

IRs:
TMP_233(bool) = msg.sender == owner
REF_138(address) -> cardIdToApprovals[_tokenId]
TMP_234(bool) = msg.sender == REF_138
TMP_235(bool) = TMP_233 || TMP_234
REF_139(mapping(address => bool)) -> operatorToApprovals[owner]
REF_140(bool) -> REF_139[msg.sender]
TMP_236(bool) = TMP_235 || REF_140
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 803.sol-ELHeroToken-changeCardAttr(uint256,uint16[5],uint16[5],uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_60(bool) -> actionContracts[msg.sender]
TMP_151(None) = SOLIDITY_CALL require(bool)(REF_60)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
cd = cardArray[_tokenId]

IRs:
REF_61(ELHeroToken.Card) -> cardArray[_tokenId]
cd(ELHeroToken.Card) := REF_61(ELHeroToken.Card)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_idxArray[0] > 0

IRs:
REF_62(uint16) -> _idxArray[0]
TMP_152(bool) = REF_62 > 0
CONDITION TMP_152"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_changeAttrByIndex(cd,_idxArray[0],_params[0])

IRs:
REF_63(uint16) -> _idxArray[0]
REF_64(uint16) -> _params[0]
INTERNAL_CALL, ELHeroToken._changeAttrByIndex(ELHeroToken.Card,uint16,uint16)(cd,REF_63,REF_64)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_idxArray[1] > 0

IRs:
REF_65(uint16) -> _idxArray[1]
TMP_154(bool) = REF_65 > 0
CONDITION TMP_154"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_changeAttrByIndex(cd,_idxArray[1],_params[1])

IRs:
REF_66(uint16) -> _idxArray[1]
REF_67(uint16) -> _params[1]
INTERNAL_CALL, ELHeroToken._changeAttrByIndex(ELHeroToken.Card,uint16,uint16)(cd,REF_66,REF_67)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_idxArray[2] > 0

IRs:
REF_68(uint16) -> _idxArray[2]
TMP_156(bool) = REF_68 > 0
CONDITION TMP_156"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_changeAttrByIndex(cd,_idxArray[2],_params[2])

IRs:
REF_69(uint16) -> _idxArray[2]
REF_70(uint16) -> _params[2]
INTERNAL_CALL, ELHeroToken._changeAttrByIndex(ELHeroToken.Card,uint16,uint16)(cd,REF_69,REF_70)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_idxArray[3] > 0

IRs:
REF_71(uint16) -> _idxArray[3]
TMP_158(bool) = REF_71 > 0
CONDITION TMP_158"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_changeAttrByIndex(cd,_idxArray[3],_params[3])

IRs:
REF_72(uint16) -> _idxArray[3]
REF_73(uint16) -> _params[3]
INTERNAL_CALL, ELHeroToken._changeAttrByIndex(ELHeroToken.Card,uint16,uint16)(cd,REF_72,REF_73)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
_idxArray[4] > 0

IRs:
REF_74(uint16) -> _idxArray[4]
TMP_160(bool) = REF_74 > 0
CONDITION TMP_160"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_changeAttrByIndex(cd,_idxArray[4],_params[4])

IRs:
REF_75(uint16) -> _idxArray[4]
REF_76(uint16) -> _params[4]
INTERNAL_CALL, ELHeroToken._changeAttrByIndex(ELHeroToken.Card,uint16,uint16)(cd,REF_75,REF_76)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ChangeCard(cardIdToOwner[_tokenId],_tokenId,_changeType)

IRs:
REF_77(address) -> cardIdToOwner[_tokenId]
Emit ChangeCard(REF_77,_tokenId,_changeType)"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.isValidToken(uint256)(_tokenId)"];
20->1;
}
// Function: 803.sol-ELHeroToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addrAdmin = msg.sender

IRs:
addrAdmin(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cardArray.length += 1

IRs:
REF_2 -> LENGTH cardArray
REF_2(-> cardArray) = REF_2 + 1"];
}
// Function: 803.sol-ELHeroToken-createCard(address,uint16[5],uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_38(bool) -> actionContracts[msg.sender]
TMP_137(None) = SOLIDITY_CALL require(bool)(REF_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_138 = CONVERT 0 to address
TMP_139(bool) = _owner != TMP_138
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
newCardId = cardArray.length

IRs:
REF_39 -> LENGTH cardArray
newCardId(uint256) := REF_39(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(newCardId < 4294967296)

IRs:
TMP_141(bool) = newCardId < 4294967296
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cardArray.length += 1

IRs:
REF_40 -> LENGTH cardArray
REF_40(-> cardArray) = REF_40 + 1"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
cd = cardArray[newCardId]

IRs:
REF_41(ELHeroToken.Card) -> cardArray[newCardId]
cd(ELHeroToken.Card) := REF_41(ELHeroToken.Card)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
cd.protoId = _attrs[0]

IRs:
REF_42(uint16) -> cd.protoId
REF_43(uint16) -> _attrs[0]
REF_42(uint16) (->cd) := REF_43(uint16)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cd.hero = _attrs[1]

IRs:
REF_44(uint16) -> cd.hero
REF_45(uint16) -> _attrs[1]
REF_44(uint16) (->cd) := REF_45(uint16)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
cd.quality = _attrs[2]

IRs:
REF_46(uint16) -> cd.quality
REF_47(uint16) -> _attrs[2]
REF_46(uint16) (->cd) := REF_47(uint16)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cd.feature = _attrs[3]

IRs:
REF_48(uint16) -> cd.feature
REF_49(uint16) -> _attrs[3]
REF_48(uint16) (->cd) := REF_49(uint16)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cd.level = _attrs[4]

IRs:
REF_50(uint16) -> cd.level
REF_51(uint16) -> _attrs[4]
REF_50(uint16) (->cd) := REF_51(uint16)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_transfer(0,_owner,newCardId)

IRs:
INTERNAL_CALL, ELHeroToken._transfer(address,address,uint256)(0,_owner,newCardId)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
CreateCard(_owner,newCardId,_attrs[0],_attrs[1],_attrs[2],_createType)

IRs:
REF_52(uint16) -> _attrs[0]
REF_53(uint16) -> _attrs[1]
REF_54(uint16) -> _attrs[2]
Emit CreateCard(_owner,newCardId,REF_52,REF_53,REF_54,_createType)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
newCardId

IRs:
RETURN newCardId"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
15->1;
}
// Function: 803.sol-ELHeroToken-destroyCard(uint256,uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_78(bool) -> actionContracts[msg.sender]
TMP_165(None) = SOLIDITY_CALL require(bool)(REF_78)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_from = cardIdToOwner[_tokenId]

IRs:
REF_79(address) -> cardIdToOwner[_tokenId]
_from(address) := REF_79(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
indexFrom = cardIdToOwnerIndex[_tokenId]

IRs:
REF_80(uint256) -> cardIdToOwnerIndex[_tokenId]
indexFrom(uint256) := REF_80(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
cdArray = ownerToCardArray[_from]

IRs:
REF_81(uint256[]) -> ownerToCardArray[_from]
cdArray(uint256[]) = ['REF_81(uint256[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(cdArray[indexFrom] == _tokenId)

IRs:
REF_82(uint256) -> cdArray[indexFrom]
TMP_166(bool) = REF_82 == _tokenId
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
indexFrom != cdArray.length - 1

IRs:
REF_83 -> LENGTH cdArray
TMP_168(uint256) = REF_83 - 1
TMP_169(bool) = indexFrom != TMP_168
CONDITION TMP_169"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastTokenId = cdArray[cdArray.length - 1]

IRs:
REF_84 -> LENGTH cdArray
TMP_170(uint256) = REF_84 - 1
REF_85(uint256) -> cdArray[TMP_170]
lastTokenId(uint256) := REF_85(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cdArray[indexFrom] = lastTokenId

IRs:
REF_86(uint256) -> cdArray[indexFrom]
REF_86(uint256) (->cdArray) := lastTokenId(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
cardIdToOwnerIndex[lastTokenId] = indexFrom

IRs:
REF_87(uint256) -> cardIdToOwnerIndex[lastTokenId]
REF_87(uint256) (->cardIdToOwnerIndex) := indexFrom(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cdArray.length -= 1

IRs:
REF_88 -> LENGTH cdArray
REF_88(-> cdArray) = REF_88 - 1"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
cardIdToOwner[_tokenId] = address(0)

IRs:
REF_89(address) -> cardIdToOwner[_tokenId]
TMP_171 = CONVERT 0 to address
REF_89(address) (->cardIdToOwner) := TMP_171(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
delete cardIdToOwnerIndex[_tokenId]

IRs:
REF_90(uint256) -> cardIdToOwnerIndex[_tokenId]
cardIdToOwnerIndex = delete REF_90 "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
destroyCardCount += 1

IRs:
destroyCardCount(uint256) = destroyCardCount + 1"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(_from,0,_tokenId)

IRs:
Emit Transfer(_from,0,_tokenId)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
DeleteCard(_from,_tokenId,_deleteType)

IRs:
Emit DeleteCard(_from,_tokenId,_deleteType)"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.isValidToken(uint256)(_tokenId)"];
18->1;
}
// Function: 803.sol-ELHeroToken-doPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = true

IRs:
isPaused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 803.sol-ELHeroToken-doUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenPaused()()"];
3->1;
}
// Function: 803.sol-ELHeroToken-getActionContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
actionContracts[_actionAddr]

IRs:
REF_1(bool) -> actionContracts[_actionAddr]
RETURN REF_1"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 803.sol-ELHeroToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
cardIdToApprovals[_tokenId]

IRs:
REF_13(address) -> cardIdToApprovals[_tokenId]
RETURN REF_13"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.isValidToken(uint256)(_tokenId)"];
2->1;
}
// Function: 803.sol-ELHeroToken-getCard(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
cd = cardArray[_tokenId]

IRs:
REF_94(ELHeroToken.Card) -> cardArray[_tokenId]
cd(ELHeroToken.Card) := REF_94(ELHeroToken.Card)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
datas[0] = cd.protoId

IRs:
REF_95(uint16) -> datas[0]
REF_96(uint16) -> cd.protoId
REF_95(uint16) (->datas) := REF_96(uint16)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
datas[1] = cd.hero

IRs:
REF_97(uint16) -> datas[1]
REF_98(uint16) -> cd.hero
REF_97(uint16) (->datas) := REF_98(uint16)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
datas[2] = cd.quality

IRs:
REF_99(uint16) -> datas[2]
REF_100(uint16) -> cd.quality
REF_99(uint16) (->datas) := REF_100(uint16)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
datas[3] = cd.feature

IRs:
REF_101(uint16) -> datas[3]
REF_102(uint16) -> cd.feature
REF_101(uint16) (->datas) := REF_102(uint16)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
datas[4] = cd.level

IRs:
REF_103(uint16) -> datas[4]
REF_104(uint16) -> cd.level
REF_103(uint16) (->datas) := REF_104(uint16)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
datas[5] = cd.attrExt1

IRs:
REF_105(uint16) -> datas[5]
REF_106(uint16) -> cd.attrExt1
REF_105(uint16) (->datas) := REF_106(uint16)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
datas[6] = cd.attrExt2

IRs:
REF_107(uint16) -> datas[6]
REF_108(uint16) -> cd.attrExt2
REF_107(uint16) (->datas) := REF_108(uint16)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.isValidToken(uint256)(_tokenId)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
datas

IRs:
RETURN datas"];
}
// Function: 803.sol-ELHeroToken-getCardAttrs(uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = _tokens.length

IRs:
REF_119 -> LENGTH _tokens
length(uint256) := REF_119(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(length <= 64)

IRs:
TMP_207(bool) = length <= 64
TMP_208(None) = SOLIDITY_CALL require(bool)(TMP_207)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
attrs = new uint16[](length * 11)

IRs:
TMP_210(uint256) = length * 11
TMP_211(uint16[])  = new uint16[](TMP_210)
attrs(uint16[]) = ['TMP_211(uint16[])']"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->22;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < length

IRs:
TMP_212(bool) = i < length
CONDITION TMP_212"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenId = _tokens[i]

IRs:
REF_120(uint256) -> _tokens[i]
tokenId(uint256) := REF_120(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
cardIdToOwner[tokenId] != address(0)

IRs:
REF_121(address) -> cardIdToOwner[tokenId]
TMP_213 = CONVERT 0 to address
TMP_214(bool) = REF_121 != TMP_213
CONDITION TMP_214"];
11->12[label="True"];
11->20[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
index = i * 11

IRs:
TMP_215(uint256) = i * 11
index(uint256) := TMP_215(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
cd = cardArray[tokenId]

IRs:
REF_122(ELHeroToken.Card) -> cardArray[tokenId]
cd(ELHeroToken.Card) := REF_122(ELHeroToken.Card)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
attrs[index] = cd.hero

IRs:
REF_123(uint16) -> attrs[index]
REF_124(uint16) -> cd.hero
REF_123(uint16) (->attrs) := REF_124(uint16)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
attrs[index + 1] = cd.quality

IRs:
TMP_216(uint256) = index + 1
REF_125(uint16) -> attrs[TMP_216]
REF_126(uint16) -> cd.quality
REF_125(uint16) (->attrs) := REF_126(uint16)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
attrs[index + 2] = cd.feature

IRs:
TMP_217(uint256) = index + 2
REF_127(uint16) -> attrs[TMP_217]
REF_128(uint16) -> cd.feature
REF_127(uint16) (->attrs) := REF_128(uint16)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
attrs[index + 3] = cd.level

IRs:
TMP_218(uint256) = index + 3
REF_129(uint16) -> attrs[TMP_218]
REF_130(uint16) -> cd.level
REF_129(uint16) (->attrs) := REF_130(uint16)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
attrs[index + 4] = cd.attrExt1

IRs:
TMP_219(uint256) = index + 4
REF_131(uint16) -> attrs[TMP_219]
REF_132(uint16) -> cd.attrExt1
REF_131(uint16) (->attrs) := REF_132(uint16)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
attrs[index + 5] = cd.attrExt2

IRs:
TMP_220(uint256) = index + 5
REF_133(uint16) -> attrs[TMP_220]
REF_134(uint16) -> cd.attrExt2
REF_133(uint16) (->attrs) := REF_134(uint16)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
21->9;
22[label="Node Type: RETURN 22

EXPRESSION:
attrs

IRs:
RETURN attrs"];
}
// Function: 803.sol-ELHeroToken-getOwnCard(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_192 = CONVERT 0 to address
TMP_193(bool) = _owner != TMP_192
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
cdArray = ownerToCardArray[_owner]

IRs:
REF_109(uint256[]) -> ownerToCardArray[_owner]
cdArray(uint256[]) = ['REF_109(uint256[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = cdArray.length

IRs:
REF_110 -> LENGTH cdArray
length(uint256) := REF_110(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokens = new uint256[](length)

IRs:
TMP_196(uint256[])  = new uint256[](length)
tokens(uint256[]) = ['TMP_196(uint256[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
flags = new uint32[](length)

IRs:
TMP_198(uint32[])  = new uint32[](length)
flags(uint32[]) = ['TMP_198(uint32[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->14;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < length

IRs:
TMP_199(bool) = i < length
CONDITION TMP_199"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokens[i] = cdArray[i]

IRs:
REF_111(uint256) -> tokens[i]
REF_112(uint256) -> cdArray[i]
REF_111(uint256) (->tokens) := REF_112(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
cd = cardArray[cdArray[i]]

IRs:
REF_113(uint256) -> cdArray[i]
REF_114(ELHeroToken.Card) -> cardArray[REF_113]
cd(ELHeroToken.Card) := REF_114(ELHeroToken.Card)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
flags[i] = uint32(uint32(cd.protoId) * 1000 + uint32(cd.hero) * 10 + cd.quality)

IRs:
REF_115(uint32) -> flags[i]
REF_116(uint16) -> cd.protoId
TMP_200 = CONVERT REF_116 to uint32
TMP_201(uint32) = TMP_200 * 1000
REF_117(uint16) -> cd.hero
TMP_202 = CONVERT REF_117 to uint32
TMP_203(uint32) = TMP_202 * 10
TMP_204(uint32) = TMP_201 + TMP_203
REF_118(uint16) -> cd.quality
TMP_205(uint32) = TMP_204 + REF_118
TMP_206 = CONVERT TMP_205 to uint32
REF_115(uint32) (->flags) := TMP_206(uint32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
13->9;
14[label="Node Type: RETURN 14

EXPRESSION:
(tokens,flags)

IRs:
RETURN tokens,flags"];
}
// Function: 803.sol-ELHeroToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorToApprovals[_owner][_operator]

IRs:
REF_14(mapping(address => bool)) -> operatorToApprovals[_owner]
REF_15(bool) -> REF_14[_operator]
RETURN REF_15"];
}
// Function: 803.sol-ELHeroToken-isValidToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenId >= 1 && _tokenId <= cardArray.length)

IRs:
TMP_226(bool) = _tokenId >= 1
REF_135 -> LENGTH cardArray
TMP_227(bool) = _tokenId <= REF_135
TMP_228(bool) = TMP_226 && TMP_227
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(cardIdToOwner[_tokenId] != address(0))

IRs:
REF_136(address) -> cardIdToOwner[_tokenId]
TMP_230 = CONVERT 0 to address
TMP_231(bool) = REF_136 != TMP_230
TMP_232(None) = SOLIDITY_CALL require(bool)(TMP_231)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 803.sol-ELHeroToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Ether League Hero Token

IRs:
RETURN Ether League Hero Token"];
}
// Function: 803.sol-ELHeroToken-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrAdmin)

IRs:
TMP_221(bool) = msg.sender == addrAdmin
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-ELHeroToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cardIdToOwner[_tokenId]

IRs:
REF_5(address) -> cardIdToOwner[_tokenId]
RETURN REF_5"];
}
// Function: 803.sol-ELHeroToken-safeTransferByContract(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_91(bool) -> actionContracts[msg.sender]
TMP_176(None) = SOLIDITY_CALL require(bool)(REF_91)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_tokenId >= 1 && _tokenId <= cardArray.length)

IRs:
TMP_177(bool) = _tokenId >= 1
REF_92 -> LENGTH cardArray
TMP_178(bool) = _tokenId <= REF_92
TMP_179(bool) = TMP_177 && TMP_178
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
owner = cardIdToOwner[_tokenId]

IRs:
REF_93(address) -> cardIdToOwner[_tokenId]
owner(address) := REF_93(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_181 = CONVERT 0 to address
TMP_182(bool) = owner != TMP_181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_184 = CONVERT 0 to address
TMP_185(bool) = _to != TMP_184
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(owner != _to)

IRs:
TMP_187(bool) = owner != _to
TMP_188(None) = SOLIDITY_CALL require(bool)(TMP_187)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_transfer(owner,_to,_tokenId)

IRs:
INTERNAL_CALL, ELHeroToken._transfer(address,address,uint256)(owner,_to,_tokenId)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
8->1;
}
// Function: 803.sol-ELHeroToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ELHeroToken._safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
2->1;
}
// Function: 803.sol-ELHeroToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_safeTransferFrom(_from,_to,_tokenId,data)

IRs:
INTERNAL_CALL, ELHeroToken._safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
2->1;
}
// Function: 803.sol-ELHeroToken-setActionContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
actionContracts[_actionAddr] = _useful

IRs:
REF_0(bool) -> actionContracts[_actionAddr]
REF_0(bool) (->actionContracts) := _useful(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 803.sol-ELHeroToken-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _newAdmin != TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(addrAdmin,_newAdmin)

IRs:
Emit AdminTransferred(addrAdmin,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrAdmin = _newAdmin

IRs:
addrAdmin(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
4->1;
}
// Function: 803.sol-ELHeroToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operatorToApprovals[msg.sender][_operator] = _approved

IRs:
REF_11(mapping(address => bool)) -> operatorToApprovals[msg.sender]
REF_12(bool) -> REF_11[_operator]
REF_12(bool) (->operatorToApprovals) := _approved(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ApprovalForAll(msg.sender,_operator,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_operator,_approved)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 803.sol-ELHeroToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
}
// Function: 803.sol-ELHeroToken-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff)

IRs:
TMP_65(bool) = _interfaceId == 33540519
TMP_66(bool) = _interfaceId == 2158778573
TMP_67(bool) = TMP_65 || TMP_66
TMP_68(bool) = _interfaceId == 2169737578
TMP_69(bool) = TMP_67 || TMP_68
TMP_70(bool) = _interfaceId != 4294967295
TMP_71(bool) = TMP_69 && TMP_70
RETURN TMP_71"];
}
// Function: 803.sol-ELHeroToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ELHT

IRs:
RETURN ELHT"];
}
// Function: 803.sol-ELHeroToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cardArray.length - destroyCardCount - 1

IRs:
REF_16 -> LENGTH cardArray
TMP_102(uint256) = REF_16 - destroyCardCount
TMP_103(uint256) = TMP_102 - 1
RETURN TMP_103"];
}
// Function: 803.sol-ELHeroToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = cardIdToOwner[_tokenId]

IRs:
REF_6(address) -> cardIdToOwner[_tokenId]
owner(address) := REF_6(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_79 = CONVERT 0 to address
TMP_80(bool) = owner != TMP_79
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_82 = CONVERT 0 to address
TMP_83(bool) = _to != TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(owner == _from)

IRs:
TMP_85(bool) = owner == _from
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ELHeroToken._transfer(address,address,uint256)(_from,_to,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.isValidToken(uint256)(_tokenId)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ELHeroToken.canTransfer(uint256)(_tokenId)"];
8->1;
}
// Function: 803.sol-ELHeroToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isPaused)

IRs:
TMP_223 = UnaryType.BANG isPaused 
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-ELHeroToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPaused)

IRs:
TMP_225(None) = SOLIDITY_CALL require(bool)(isPaused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-ERC165-supportsInterface(bytes4)
digraph{
}
// Function: 803.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 803.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 803.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 803.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 803.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 803.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 803.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 803.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 803.sol-ERC721-supportsInterface(bytes4)
digraph{
}
// Function: 803.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 803.sol-ERC721TokenReceiver-onERC721Received(address,uint256,bytes)
digraph{
}
// Function: 803.sol-Presale-_rand()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_seed = uint256(keccak256()(_seed,blockhash(uint256)(block.number - 1),block.coinbase,block.difficulty))

IRs:
TMP_238(uint256) = block.number - 1
TMP_239(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_238)
TMP_240(bytes32) = SOLIDITY_CALL keccak256()(_seed,TMP_239,block.coinbase,block.difficulty)
TMP_241 = CONVERT TMP_240 to uint256
_seed(uint256) := TMP_241(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_seed

IRs:
RETURN _seed"];
}
// Function: 803.sol-Presale-_randBySeed(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(_outSeed,blockhash(uint256)(block.number - 1),block.coinbase,block.difficulty))

IRs:
TMP_242(uint256) = block.number - 1
TMP_243(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_242)
TMP_244(bytes32) = SOLIDITY_CALL keccak256()(_outSeed,TMP_243,block.coinbase,block.difficulty)
TMP_245 = CONVERT TMP_244 to uint256
RETURN TMP_245"];
}
// Function: 803.sol-Presale-cardPresale(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
curSupply = cardPresaleCounter[_protoId]

IRs:
REF_166(uint16) -> cardPresaleCounter[_protoId]
curSupply(uint16) := REF_166(uint16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(curSupply > 0)

IRs:
TMP_274(bool) = curSupply > 0
TMP_275(None) = SOLIDITY_CALL require(bool)(TMP_274)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value == 250000000000000000)

IRs:
TMP_276(bool) = msg.value == 250000000000000000
TMP_277(None) = SOLIDITY_CALL require(bool)(TMP_276)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
buyArray = OwnerToPresale[msg.sender]

IRs:
REF_167(uint16[]) -> OwnerToPresale[msg.sender]
buyArray(uint16[]) = ['REF_167(uint16[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
param = (10000 + _protoId,_protoId,6,0,1)

IRs:
TMP_278(uint256) = 10000 + _protoId
param(uint16[5]) = ['TMP_278(uint256)', '_protoId(uint16)', '6(uint256)', '0(uint256)', '1(uint256)']"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenContract.createCard(msg.sender,param,1)

IRs:
TMP_279(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(ELHeroToken), function:createCard, arguments:['msg.sender', 'param', '1']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
buyArray.push(_protoId)

IRs:
REF_170 -> LENGTH buyArray
TMP_281(uint256) := REF_170(uint256)
TMP_282(uint256) = TMP_281 + 1
REF_170(uint256) (->buyArray) := TMP_282(uint256)
REF_171(uint16) -> buyArray[TMP_281]
REF_171(uint16) (->buyArray) := _protoId(uint16)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cardPresaleCounter[_protoId] = curSupply - 1

IRs:
REF_172(uint16) -> cardPresaleCounter[_protoId]
TMP_283(uint16) = curSupply - 1
REF_172(uint16) (->cardPresaleCounter) := TMP_283(uint16)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
CardPreSelled(msg.sender,_protoId)

IRs:
Emit CardPreSelled(msg.sender,_protoId)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
jackpotBalance += msg.value * 2 / 10

IRs:
TMP_285(uint256) = msg.value * 2
TMP_286(uint256) = TMP_285 / 10
jackpotBalance(uint256) = jackpotBalance + TMP_286"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
addrFinance.transfer(address(this).balance - jackpotBalance)

IRs:
TMP_287 = CONVERT this to address
TMP_288(uint256) = SOLIDITY_CALL balance(address)(TMP_287)
TMP_289(uint256) = TMP_288 - jackpotBalance
Transfer dest:addrFinance value:TMP_289"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
seed = _rand()

IRs:
TMP_291(uint256) = INTERNAL_CALL, Random._rand()()
seed(uint256) := TMP_291(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
seed % 100 == 99

IRs:
TMP_292(uint256) = seed % 100
TMP_293(bool) = TMP_292 == 99
CONDITION TMP_293"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Jackpot(msg.sender,jackpotBalance,2)

IRs:
Emit Jackpot(msg.sender,jackpotBalance,2)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
msg.sender.transfer(jackpotBalance)

IRs:
Transfer dest:msg.sender value:jackpotBalance"];
15->16;
16[label="Node Type: END_IF 16
"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
17->1;
}
// Function: 803.sol-Presale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addrAdmin = msg.sender

IRs:
addrAdmin(address) := msg.sender(address)"];
}
// Function: 803.sol-Presale-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addrAdmin = msg.sender

IRs:
addrAdmin(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addrService = msg.sender

IRs:
addrService(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrFinance = msg.sender

IRs:
addrFinance(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenContract = ELHeroToken(_nftAddr)

IRs:
TMP_269 = CONVERT _nftAddr to ELHeroToken
tokenContract(ELHeroToken) := TMP_269(ELHeroToken)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cardPresaleCounter[1] = 20

IRs:
REF_141(uint16) -> cardPresaleCounter[1]
REF_141(uint16) (->cardPresaleCounter) := 20(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
cardPresaleCounter[2] = 20

IRs:
REF_142(uint16) -> cardPresaleCounter[2]
REF_142(uint16) (->cardPresaleCounter) := 20(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
cardPresaleCounter[3] = 20

IRs:
REF_143(uint16) -> cardPresaleCounter[3]
REF_143(uint16) (->cardPresaleCounter) := 20(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cardPresaleCounter[4] = 20

IRs:
REF_144(uint16) -> cardPresaleCounter[4]
REF_144(uint16) (->cardPresaleCounter) := 20(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
cardPresaleCounter[5] = 20

IRs:
REF_145(uint16) -> cardPresaleCounter[5]
REF_145(uint16) (->cardPresaleCounter) := 20(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cardPresaleCounter[6] = 20

IRs:
REF_146(uint16) -> cardPresaleCounter[6]
REF_146(uint16) (->cardPresaleCounter) := 20(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cardPresaleCounter[7] = 20

IRs:
REF_147(uint16) -> cardPresaleCounter[7]
REF_147(uint16) (->cardPresaleCounter) := 20(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
cardPresaleCounter[8] = 20

IRs:
REF_148(uint16) -> cardPresaleCounter[8]
REF_148(uint16) (->cardPresaleCounter) := 20(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
cardPresaleCounter[9] = 20

IRs:
REF_149(uint16) -> cardPresaleCounter[9]
REF_149(uint16) (->cardPresaleCounter) := 20(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
cardPresaleCounter[10] = 20

IRs:
REF_150(uint16) -> cardPresaleCounter[10]
REF_150(uint16) (->cardPresaleCounter) := 20(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
cardPresaleCounter[11] = 20

IRs:
REF_151(uint16) -> cardPresaleCounter[11]
REF_151(uint16) (->cardPresaleCounter) := 20(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
cardPresaleCounter[12] = 20

IRs:
REF_152(uint16) -> cardPresaleCounter[12]
REF_152(uint16) (->cardPresaleCounter) := 20(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
cardPresaleCounter[13] = 20

IRs:
REF_153(uint16) -> cardPresaleCounter[13]
REF_153(uint16) (->cardPresaleCounter) := 20(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
cardPresaleCounter[14] = 20

IRs:
REF_154(uint16) -> cardPresaleCounter[14]
REF_154(uint16) (->cardPresaleCounter) := 20(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
cardPresaleCounter[15] = 20

IRs:
REF_155(uint16) -> cardPresaleCounter[15]
REF_155(uint16) (->cardPresaleCounter) := 20(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
cardPresaleCounter[16] = 20

IRs:
REF_156(uint16) -> cardPresaleCounter[16]
REF_156(uint16) (->cardPresaleCounter) := 20(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
cardPresaleCounter[17] = 20

IRs:
REF_157(uint16) -> cardPresaleCounter[17]
REF_157(uint16) (->cardPresaleCounter) := 20(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
cardPresaleCounter[18] = 20

IRs:
REF_158(uint16) -> cardPresaleCounter[18]
REF_158(uint16) (->cardPresaleCounter) := 20(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
cardPresaleCounter[19] = 20

IRs:
REF_159(uint16) -> cardPresaleCounter[19]
REF_159(uint16) (->cardPresaleCounter) := 20(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
cardPresaleCounter[20] = 20

IRs:
REF_160(uint16) -> cardPresaleCounter[20]
REF_160(uint16) (->cardPresaleCounter) := 20(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
cardPresaleCounter[21] = 20

IRs:
REF_161(uint16) -> cardPresaleCounter[21]
REF_161(uint16) (->cardPresaleCounter) := 20(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
cardPresaleCounter[22] = 20

IRs:
REF_162(uint16) -> cardPresaleCounter[22]
REF_162(uint16) (->cardPresaleCounter) := 20(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
cardPresaleCounter[23] = 20

IRs:
REF_163(uint16) -> cardPresaleCounter[23]
REF_163(uint16) (->cardPresaleCounter) := 20(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
cardPresaleCounter[24] = 20

IRs:
REF_164(uint16) -> cardPresaleCounter[24]
REF_164(uint16) (->cardPresaleCounter) := 20(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
cardPresaleCounter[25] = 20

IRs:
REF_165(uint16) -> cardPresaleCounter[25]
REF_165(uint16) (->cardPresaleCounter) := 20(uint256)"];
}
// Function: 803.sol-Presale-doPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = true

IRs:
isPaused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 803.sol-Presale-doUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenPaused()()"];
3->1;
}
// Function: 803.sol-Presale-eventPirze(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_id == 20 || _id == 21)

IRs:
TMP_305(bool) = _id == 20
TMP_306(bool) = _id == 21
TMP_307(bool) = TMP_305 || TMP_306
TMP_308(None) = SOLIDITY_CALL require(bool)(TMP_307)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
curSupply = cardPresaleCounter[_id]

IRs:
REF_229(uint16) -> cardPresaleCounter[_id]
curSupply(uint16) := REF_229(uint16)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(curSupply > 0)

IRs:
TMP_309(bool) = curSupply > 0
TMP_310(None) = SOLIDITY_CALL require(bool)(TMP_309)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
buyArray = OwnerToPresale[_addr]

IRs:
REF_230(uint16[]) -> OwnerToPresale[_addr]
buyArray(uint16[]) = ['REF_230(uint16[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
param = (10000 + _id,_id,6,0,1)

IRs:
TMP_311(uint256) = 10000 + _id
param(uint16[5]) = ['TMP_311(uint256)', '_id(uint8)', '6(uint256)', '0(uint256)', '1(uint256)']"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenContract.createCard(_addr,param,1)

IRs:
TMP_312(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(ELHeroToken), function:createCard, arguments:['_addr', 'param', '1']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
buyArray.push(_id)

IRs:
REF_233 -> LENGTH buyArray
TMP_314(uint256) := REF_233(uint256)
TMP_315(uint256) = TMP_314 + 1
REF_233(uint256) (->buyArray) := TMP_315(uint256)
REF_234(uint16) -> buyArray[TMP_314]
REF_234(uint16) (->buyArray) := _id(uint8)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cardPresaleCounter[_id] = curSupply - 1

IRs:
REF_235(uint16) -> cardPresaleCounter[_id]
TMP_316(uint16) = curSupply - 1
REF_235(uint16) (->cardPresaleCounter) := TMP_316(uint16)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
9->1;
}
// Function: 803.sol-Presale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_270(bool) = msg.value > 0
TMP_271(None) = SOLIDITY_CALL require(bool)(TMP_270)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jackpotBalance += msg.value

IRs:
jackpotBalance(uint256) = jackpotBalance + msg.value"];
}
// Function: 803.sol-Presale-getBuyArray(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
buyArray = OwnerToPresale[_owner]

IRs:
REF_228(uint16[]) -> OwnerToPresale[_owner]
buyArray(uint16[]) = ['REF_228(uint16[])']"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
buyArray

IRs:
RETURN buyArray"];
}
// Function: 803.sol-Presale-getBuyCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint32(OwnerToPresale[_owner].length)

IRs:
REF_226(uint16[]) -> OwnerToPresale[_owner]
REF_227 -> LENGTH REF_226
TMP_304 = CONVERT REF_227 to uint32
RETURN TMP_304"];
}
// Function: 803.sol-Presale-getCardCanPresaleCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cntArray[0] = cardPresaleCounter[1]

IRs:
REF_176(uint16) -> cntArray[0]
REF_177(uint16) -> cardPresaleCounter[1]
REF_176(uint16) (->cntArray) := REF_177(uint16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cntArray[1] = cardPresaleCounter[2]

IRs:
REF_178(uint16) -> cntArray[1]
REF_179(uint16) -> cardPresaleCounter[2]
REF_178(uint16) (->cntArray) := REF_179(uint16)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cntArray[2] = cardPresaleCounter[3]

IRs:
REF_180(uint16) -> cntArray[2]
REF_181(uint16) -> cardPresaleCounter[3]
REF_180(uint16) (->cntArray) := REF_181(uint16)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cntArray[3] = cardPresaleCounter[4]

IRs:
REF_182(uint16) -> cntArray[3]
REF_183(uint16) -> cardPresaleCounter[4]
REF_182(uint16) (->cntArray) := REF_183(uint16)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cntArray[4] = cardPresaleCounter[5]

IRs:
REF_184(uint16) -> cntArray[4]
REF_185(uint16) -> cardPresaleCounter[5]
REF_184(uint16) (->cntArray) := REF_185(uint16)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
cntArray[5] = cardPresaleCounter[6]

IRs:
REF_186(uint16) -> cntArray[5]
REF_187(uint16) -> cardPresaleCounter[6]
REF_186(uint16) (->cntArray) := REF_187(uint16)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
cntArray[6] = cardPresaleCounter[7]

IRs:
REF_188(uint16) -> cntArray[6]
REF_189(uint16) -> cardPresaleCounter[7]
REF_188(uint16) (->cntArray) := REF_189(uint16)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
cntArray[7] = cardPresaleCounter[8]

IRs:
REF_190(uint16) -> cntArray[7]
REF_191(uint16) -> cardPresaleCounter[8]
REF_190(uint16) (->cntArray) := REF_191(uint16)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
cntArray[8] = cardPresaleCounter[9]

IRs:
REF_192(uint16) -> cntArray[8]
REF_193(uint16) -> cardPresaleCounter[9]
REF_192(uint16) (->cntArray) := REF_193(uint16)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cntArray[9] = cardPresaleCounter[10]

IRs:
REF_194(uint16) -> cntArray[9]
REF_195(uint16) -> cardPresaleCounter[10]
REF_194(uint16) (->cntArray) := REF_195(uint16)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cntArray[10] = cardPresaleCounter[11]

IRs:
REF_196(uint16) -> cntArray[10]
REF_197(uint16) -> cardPresaleCounter[11]
REF_196(uint16) (->cntArray) := REF_197(uint16)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
cntArray[11] = cardPresaleCounter[12]

IRs:
REF_198(uint16) -> cntArray[11]
REF_199(uint16) -> cardPresaleCounter[12]
REF_198(uint16) (->cntArray) := REF_199(uint16)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
cntArray[12] = cardPresaleCounter[13]

IRs:
REF_200(uint16) -> cntArray[12]
REF_201(uint16) -> cardPresaleCounter[13]
REF_200(uint16) (->cntArray) := REF_201(uint16)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
cntArray[13] = cardPresaleCounter[14]

IRs:
REF_202(uint16) -> cntArray[13]
REF_203(uint16) -> cardPresaleCounter[14]
REF_202(uint16) (->cntArray) := REF_203(uint16)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
cntArray[14] = cardPresaleCounter[15]

IRs:
REF_204(uint16) -> cntArray[14]
REF_205(uint16) -> cardPresaleCounter[15]
REF_204(uint16) (->cntArray) := REF_205(uint16)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
cntArray[15] = cardPresaleCounter[16]

IRs:
REF_206(uint16) -> cntArray[15]
REF_207(uint16) -> cardPresaleCounter[16]
REF_206(uint16) (->cntArray) := REF_207(uint16)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
cntArray[16] = cardPresaleCounter[17]

IRs:
REF_208(uint16) -> cntArray[16]
REF_209(uint16) -> cardPresaleCounter[17]
REF_208(uint16) (->cntArray) := REF_209(uint16)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
cntArray[17] = cardPresaleCounter[18]

IRs:
REF_210(uint16) -> cntArray[17]
REF_211(uint16) -> cardPresaleCounter[18]
REF_210(uint16) (->cntArray) := REF_211(uint16)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
cntArray[18] = cardPresaleCounter[19]

IRs:
REF_212(uint16) -> cntArray[18]
REF_213(uint16) -> cardPresaleCounter[19]
REF_212(uint16) (->cntArray) := REF_213(uint16)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
cntArray[19] = cardPresaleCounter[20]

IRs:
REF_214(uint16) -> cntArray[19]
REF_215(uint16) -> cardPresaleCounter[20]
REF_214(uint16) (->cntArray) := REF_215(uint16)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
cntArray[20] = cardPresaleCounter[21]

IRs:
REF_216(uint16) -> cntArray[20]
REF_217(uint16) -> cardPresaleCounter[21]
REF_216(uint16) (->cntArray) := REF_217(uint16)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
cntArray[21] = cardPresaleCounter[22]

IRs:
REF_218(uint16) -> cntArray[21]
REF_219(uint16) -> cardPresaleCounter[22]
REF_218(uint16) (->cntArray) := REF_219(uint16)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
cntArray[22] = cardPresaleCounter[23]

IRs:
REF_220(uint16) -> cntArray[22]
REF_221(uint16) -> cardPresaleCounter[23]
REF_220(uint16) (->cntArray) := REF_221(uint16)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
cntArray[23] = cardPresaleCounter[24]

IRs:
REF_222(uint16) -> cntArray[23]
REF_223(uint16) -> cardPresaleCounter[24]
REF_222(uint16) (->cntArray) := REF_223(uint16)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
cntArray[24] = cardPresaleCounter[25]

IRs:
REF_224(uint16) -> cntArray[24]
REF_225(uint16) -> cardPresaleCounter[25]
REF_224(uint16) (->cntArray) := REF_225(uint16)"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
cntArray

IRs:
RETURN cntArray"];
}
// Function: 803.sol-Presale-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrAdmin)

IRs:
TMP_322(bool) = msg.sender == addrAdmin
TMP_323(None) = SOLIDITY_CALL require(bool)(TMP_322)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-Presale-onlyFinance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrFinance)

IRs:
TMP_320(bool) = msg.sender == addrFinance
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-Presale-onlyService()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrService)

IRs:
TMP_318(bool) = msg.sender == addrService
TMP_319(None) = SOLIDITY_CALL require(bool)(TMP_318)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-Presale-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_260 = CONVERT 0 to address
TMP_261(bool) = _newAdmin != TMP_260
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(addrAdmin,_newAdmin)

IRs:
Emit AdminTransferred(addrAdmin,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrAdmin = _newAdmin

IRs:
addrAdmin(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
4->1;
}
// Function: 803.sol-Presale-setELHeroTokenAddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenContract = ELHeroToken(_nftAddr)

IRs:
TMP_272 = CONVERT _nftAddr to ELHeroToken
tokenContract(ELHeroToken) := TMP_272(ELHeroToken)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 803.sol-Presale-setFinance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrFinance || msg.sender == addrAdmin)

IRs:
TMP_253(bool) = msg.sender == addrFinance
TMP_254(bool) = msg.sender == addrAdmin
TMP_255(bool) = TMP_253 || TMP_254
TMP_256(None) = SOLIDITY_CALL require(bool)(TMP_255)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_newFinance != address(0))

IRs:
TMP_257 = CONVERT 0 to address
TMP_258(bool) = _newFinance != TMP_257
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrFinance = _newFinance

IRs:
addrFinance(address) := _newFinance(address)"];
}
// Function: 803.sol-Presale-setService(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrService || msg.sender == addrAdmin)

IRs:
TMP_246(bool) = msg.sender == addrService
TMP_247(bool) = msg.sender == addrAdmin
TMP_248(bool) = TMP_246 || TMP_247
TMP_249(None) = SOLIDITY_CALL require(bool)(TMP_248)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_newService != address(0))

IRs:
TMP_250 = CONVERT 0 to address
TMP_251(bool) = _newService != TMP_250
TMP_252(None) = SOLIDITY_CALL require(bool)(TMP_251)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrService = _newService

IRs:
addrService(address) := _newService(address)"];
}
// Function: 803.sol-Presale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
}
// Function: 803.sol-Presale-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isPaused)

IRs:
TMP_324 = UnaryType.BANG isPaused 
TMP_325(None) = SOLIDITY_CALL require(bool)(TMP_324)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-Presale-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPaused)

IRs:
TMP_326(None) = SOLIDITY_CALL require(bool)(isPaused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 803.sol-Presale-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrFinance || msg.sender == addrAdmin)

IRs:
TMP_297(bool) = msg.sender == addrFinance
TMP_298(bool) = msg.sender == addrAdmin
TMP_299(bool) = TMP_297 || TMP_298
TMP_300(None) = SOLIDITY_CALL require(bool)(TMP_299)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addrFinance.transfer(address(this).balance)

IRs:
TMP_301 = CONVERT this to address
TMP_302(uint256) = SOLIDITY_CALL balance(address)(TMP_301)
Transfer dest:addrFinance value:TMP_302"];
}
// Function: 803.sol-Random-_rand()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_seed = uint256(keccak256()(_seed,blockhash(uint256)(block.number - 1),block.coinbase,block.difficulty))

IRs:
TMP_0(uint256) = block.number - 1
TMP_1(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_0)
TMP_2(bytes32) = SOLIDITY_CALL keccak256()(_seed,TMP_1,block.coinbase,block.difficulty)
TMP_3 = CONVERT TMP_2 to uint256
_seed(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_seed

IRs:
RETURN _seed"];
}
// Function: 803.sol-Random-_randBySeed(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(_outSeed,blockhash(uint256)(block.number - 1),block.coinbase,block.difficulty))

IRs:
TMP_4(uint256) = block.number - 1
TMP_5(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_4)
TMP_6(bytes32) = SOLIDITY_CALL keccak256()(_outSeed,TMP_5,block.coinbase,block.difficulty)
TMP_7 = CONVERT TMP_6 to uint256
RETURN TMP_7"];
}
}
