digraph G {
// Function: 927.sol-AccessDeploy-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-AccessDeploy-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_168 = CONVERT 0 to address
pendingOwner(address) := TMP_168(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 927.sol-AccessDeploy-grantAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = true

IRs:
REF_82(bool) -> deployAccess[_address]
REF_82(bool) (->deployAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-AccessDeploy-onlyAccessDeploy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || deployAccess[msg.sender] == true)

IRs:
TMP_181(bool) = msg.sender == owner
REF_84(bool) -> deployAccess[msg.sender]
TMP_182(bool) = REF_84 == True
TMP_183(bool) = TMP_181 || TMP_182
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessDeploy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_179(bool) = msg.sender == owner
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessDeploy-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_177(bool) = msg.sender == pendingOwner
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessDeploy-revokeAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = false

IRs:
REF_83(bool) -> deployAccess[_address]
REF_83(bool) (->deployAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-AccessDeploy-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_170 = CONVERT 0 to address
TMP_171(bool) = newOwner != TMP_170
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-AccessDeposit-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-AccessDeposit-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_149 = CONVERT 0 to address
pendingOwner(address) := TMP_149(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 927.sol-AccessDeposit-grantAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = true

IRs:
REF_79(bool) -> depositAccess[_address]
REF_79(bool) (->depositAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-AccessDeposit-onlyAccessDeposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || depositAccess[msg.sender] == true)

IRs:
TMP_162(bool) = msg.sender == owner
REF_81(bool) -> depositAccess[msg.sender]
TMP_163(bool) = REF_81 == True
TMP_164(bool) = TMP_162 || TMP_163
TMP_165(None) = SOLIDITY_CALL require(bool)(TMP_164)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessDeposit-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_160(bool) = msg.sender == owner
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessDeposit-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_158(bool) = msg.sender == pendingOwner
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessDeposit-revokeAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = false

IRs:
REF_80(bool) -> depositAccess[_address]
REF_80(bool) (->depositAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-AccessDeposit-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_151 = CONVERT 0 to address
TMP_152(bool) = newOwner != TMP_151
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-AccessMint-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-AccessMint-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_187 = CONVERT 0 to address
pendingOwner(address) := TMP_187(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 927.sol-AccessMint-grantAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = true

IRs:
REF_85(bool) -> mintAccess[_address]
REF_85(bool) (->mintAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-AccessMint-onlyAccessMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || mintAccess[msg.sender] == true)

IRs:
TMP_200(bool) = msg.sender == owner
REF_87(bool) -> mintAccess[msg.sender]
TMP_201(bool) = REF_87 == True
TMP_202(bool) = TMP_200 || TMP_201
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessMint-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_198(bool) = msg.sender == owner
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessMint-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_196(bool) = msg.sender == pendingOwner
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-AccessMint-revokeAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = false

IRs:
REF_86(bool) -> mintAccess[_address]
REF_86(bool) (->mintAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-AccessMint-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_189 = CONVERT 0 to address
TMP_190(bool) = newOwner != TMP_189
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_36(uint256) -> balances[_owner]
RETURN REF_36"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 927.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 927.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _to != TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_29(uint256) -> balances[msg.sender]
TMP_117(bool) = _value <= REF_29
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_31(uint256) -> balances[msg.sender]
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_31', '_value'] 
REF_30(uint256) (->balances) := TMP_119(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_33(uint256) -> balances[_to]
REF_34(uint256) -> balances[_to]
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_34', '_value'] 
REF_33(uint256) (->balances) := TMP_120(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 927.sol-BitGuildToken-BitGuildToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_295(uint256) -> balanceOf[msg.sender]
REF_295(uint256) (->balanceOf) := totalSupply(uint256)"];
}
// Function: 927.sol-BitGuildToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_500(bool) = _to != 0
TMP_501(None) = SOLIDITY_CALL require(bool)(TMP_500)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_296(uint256) -> balanceOf[_from]
TMP_502(bool) = REF_296 >= _value
TMP_503(None) = SOLIDITY_CALL require(bool)(TMP_502)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_297(uint256) -> balanceOf[_to]
TMP_504(uint256) = REF_297 + _value
REF_298(uint256) -> balanceOf[_to]
TMP_505(bool) = TMP_504 > REF_298
TMP_506(None) = SOLIDITY_CALL require(bool)(TMP_505)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_299(uint256) -> balanceOf[_from]
REF_300(uint256) -> balanceOf[_to]
TMP_507(uint256) = REF_299 + REF_300
previousBalances(uint256) := TMP_507(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_301(uint256) -> balanceOf[_from]
REF_301(-> balanceOf) = REF_301 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_302(uint256) -> balanceOf[_to]
REF_302(-> balanceOf) = REF_302 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_303(uint256) -> balanceOf[_from]
REF_304(uint256) -> balanceOf[_to]
TMP_509(uint256) = REF_303 + REF_304
TMP_510(bool) = TMP_509 == previousBalances
TMP_511(None) = SOLIDITY_CALL assert(bool)(TMP_510)"];
}
// Function: 927.sol-BitGuildToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_309(mapping(address => uint256)) -> allowance[msg.sender]
REF_310(uint256) -> REF_309[_spender]
REF_310(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 927.sol-BitGuildToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_516 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_516(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_517(bool) = INTERNAL_CALL, BitGuildToken.approve(address,uint256)(_spender,_value)
CONDITION TMP_517"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 927.sol-BitGuildToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_312(uint256) -> balanceOf[msg.sender]
TMP_519(bool) = REF_312 >= _value
TMP_520(None) = SOLIDITY_CALL require(bool)(TMP_519)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_313(uint256) -> balanceOf[msg.sender]
REF_313(-> balanceOf) = REF_313 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 927.sol-BitGuildToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_314(uint256) -> balanceOf[_from]
TMP_522(bool) = REF_314 >= _value
TMP_523(None) = SOLIDITY_CALL require(bool)(TMP_522)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_315(mapping(address => uint256)) -> allowance[_from]
REF_316(uint256) -> REF_315[msg.sender]
TMP_524(bool) = _value <= REF_316
TMP_525(None) = SOLIDITY_CALL require(bool)(TMP_524)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_317(uint256) -> balanceOf[_from]
REF_317(-> balanceOf) = REF_317 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_318(mapping(address => uint256)) -> allowance[_from]
REF_319(uint256) -> REF_318[msg.sender]
REF_319(-> allowance) = REF_319 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 927.sol-BitGuildToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = BitGuild PLAT

IRs:
name(string) := BitGuild PLAT(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = PLAT

IRs:
symbol(string) := PLAT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 10000000000 * 10 ** uint256(decimals)

IRs:
TMP_527 = CONVERT decimals to uint256
TMP_528(uint256) = 10 ** TMP_527
TMP_529(uint256) = 10000000000 * TMP_528
totalSupply(uint256) := TMP_529(uint256)"];
}
// Function: 927.sol-BitGuildToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BitGuildToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
}
// Function: 927.sol-BitGuildToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_305(mapping(address => uint256)) -> allowance[_from]
REF_306(uint256) -> REF_305[msg.sender]
TMP_513(bool) = _value <= REF_306
TMP_514(None) = SOLIDITY_CALL require(bool)(TMP_513)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_307(mapping(address => uint256)) -> allowance[_from]
REF_308(uint256) -> REF_307[msg.sender]
REF_308(-> allowance) = REF_308 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BitGuildToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 927.sol-Claimable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-Claimable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
pendingOwner(address) := TMP_26(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 927.sol-Claimable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_28(bool) = msg.sender == owner
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Claimable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_30(bool) = msg.sender == pendingOwner
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Claimable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-CryptoSagaHero(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_goldAddress != address(0))

IRs:
TMP_362 = CONVERT 0 to address
TMP_363(bool) = _goldAddress != TMP_362
TMP_364(None) = SOLIDITY_CALL require(bool)(TMP_363)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setGoldContract(_goldAddress)

IRs:
INTERNAL_CALL, CryptoSagaHero.setGoldContract(address)(_goldAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
defineType(Archangel,4,1,13540,0,99,3,(uint32(74),75,57,99,95),(uint32(8),6,8,5,5),(uint32(8),10,10,6,6))

IRs:
TMP_366 = CONVERT 74 to uint32
TMP_367 = CONVERT 8 to uint32
TMP_368 = CONVERT 8 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Archangel,4,1,13540,0,99,3,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c4f640>, 75, 57, 99, 95],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c4f790>, 6, 8, 5, 5],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c4f8e0>, 10, 10, 6, 6])"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
defineType(Shadowalker,3,4,134,1,75,4,(uint32(45),35,60,80,40),(uint32(3),2,10,4,5),(uint32(5),5,10,7,5))

IRs:
TMP_370 = CONVERT 45 to uint32
TMP_371 = CONVERT 3 to uint32
TMP_372 = CONVERT 5 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Shadowalker,3,4,134,1,75,4,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c4fbe0>, 35, 60, 80, 40],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c4fd30>, 2, 10, 4, 5],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c4fe80>, 5, 10, 7, 5])"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
defineType(Pyromancer,2,0,14,2,50,1,(uint32(50),28,17,40,35),(uint32(5),3,2,3,3),(uint32(8),4,3,4,5))

IRs:
TMP_374 = CONVERT 50 to uint32
TMP_375 = CONVERT 5 to uint32
TMP_376 = CONVERT 8 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Pyromancer,2,0,14,2,50,1,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c801c0>, 28, 17, 40, 35],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c80310>, 3, 2, 3, 3],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c80460>, 4, 3, 4, 5])"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
defineType(Magician,1,3,224,2,30,0,(uint32(35),15,25,25,30),(uint32(3),1,2,2,2),(uint32(5),2,3,3,3))

IRs:
TMP_378 = CONVERT 35 to uint32
TMP_379 = CONVERT 3 to uint32
TMP_380 = CONVERT 5 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Magician,1,3,224,2,30,0,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c80760>, 15, 25, 25, 30],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c808b0>, 1, 2, 2, 2],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c80a00>, 2, 3, 3, 3])"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
defineType(Farmer,0,0,59,0,15,2,(uint32(10),22,8,15,25),(uint32(1),2,1,1,2),(uint32(1),3,1,2,3))

IRs:
TMP_382 = CONVERT 10 to uint32
TMP_383 = CONVERT 1 to uint32
TMP_384 = CONVERT 1 to uint32
INTERNAL_CALL, CryptoSagaHero.defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])(Farmer,0,0,59,0,15,2,[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c80d00>, 22, 8, 15, 25],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c80e50>, 2, 1, 1, 2],[<slither.slithir.variables.temporary.TemporaryVariable object at 0x7fe241c80fa0>, 3, 1, 2, 3])"];
}
// Function: 927.sol-CryptoSagaHero-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-CryptoSagaHero-_burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
approvedFor(_tokenId) != 0

IRs:
TMP_298(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_299(bool) = TMP_298 != 0
CONDITION TMP_299"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clearApproval(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(msg.sender,_tokenId)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeToken(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(msg.sender,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,0x0,_tokenId)

IRs:
Emit Transfer(msg.sender,0,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 927.sol-CryptoSagaHero-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_293 = CONVERT 0 to address
TMP_294(bool) = _to != TMP_293
TMP_295(None) = SOLIDITY_CALL require(bool)(TMP_294)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0x0,_to,_tokenId)

IRs:
Emit Transfer(0,_to,_tokenId)"];
}
// Function: 927.sol-CryptoSagaHero-addDeposit(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addressToGoldDeposit[_to] += _amount

IRs:
REF_266(uint256) -> addressToGoldDeposit[_to]
REF_266(-> addressToGoldDeposit) = REF_266 + _amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccessDeposit()

IRs:
MODIFIER_CALL, AccessDeposit.onlyAccessDeposit()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-addExp(uint256,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) != address(0))

IRs:
TMP_431(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_432 = CONVERT 0 to address
TMP_433(bool) = TMP_431 != TMP_432
TMP_434(None) = SOLIDITY_CALL require(bool)(TMP_433)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_heroInstance = tokenIdToHeroInstance[_tokenId]

IRs:
REF_263(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_heroInstance(CryptoSagaHero.HeroInstance) := REF_263(CryptoSagaHero.HeroInstance)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_newExp = _heroInstance.currentExp + _exp

IRs:
REF_264(uint32) -> _heroInstance.currentExp
TMP_435(uint32) = REF_264 + _exp
_newExp(uint32) := TMP_435(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_newExp == uint256(uint128(_newExp)))

IRs:
TMP_436 = CONVERT _newExp to uint128
TMP_437 = CONVERT TMP_436 to uint256
TMP_438(bool) = _newExp == TMP_437
TMP_439(None) = SOLIDITY_CALL require(bool)(TMP_438)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_heroInstance.currentExp += _newExp

IRs:
REF_265(uint32) -> _heroInstance.currentExp
REF_265(-> _heroInstance) = REF_265 + _newExp"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAccessDeploy()

IRs:
MODIFIER_CALL, AccessDeploy.onlyAccessDeploy()()"];
6->1;
}
// Function: 927.sol-CryptoSagaHero-addToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_150(address) -> tokenOwner[_tokenId]
TMP_323 = CONVERT 0 to address
TMP_324(bool) = REF_150 == TMP_323
TMP_325(None) = SOLIDITY_CALL require(bool)(TMP_324)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_151(address) -> tokenOwner[_tokenId]
REF_151(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = balanceOf(_to)

IRs:
TMP_326(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_to)
length(uint256) := TMP_326(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_152(uint256[]) -> ownedTokens[_to]
REF_154 -> LENGTH REF_152
TMP_328(uint256) := REF_154(uint256)
TMP_329(uint256) = TMP_328 + 1
REF_154(uint256) (->ownedTokens) := TMP_329(uint256)
REF_155(uint256) -> REF_152[TMP_328]
REF_155(uint256) (->ownedTokens) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_156(uint256) -> ownedTokensIndex[_tokenId]
REF_156(uint256) (->ownedTokensIndex) := length(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalTokens = totalTokens.add(1)

IRs:
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_330(uint256)"];
}
// Function: 927.sol-CryptoSagaHero-approve(address,uint256)
digraph{
}
// Function: 927.sol-CryptoSagaHero-approvedFor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_147(address) -> tokenApprovals[_tokenId]
RETURN REF_147"];
}
// Function: 927.sol-CryptoSagaHero-balanceOf(address)
digraph{
}
// Function: 927.sol-CryptoSagaHero-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_258 = CONVERT 0 to address
pendingOwner(address) := TMP_258(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 927.sol-CryptoSagaHero-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_319(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_320(bool) = TMP_319 == _owner
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenApprovals[_tokenId] = 0

IRs:
REF_149(address) -> tokenApprovals[_tokenId]
REF_149(address) (->tokenApprovals) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(_owner,0,_tokenId)

IRs:
Emit Approval(_owner,0,_tokenId)"];
}
// Function: 927.sol-CryptoSagaHero-clearApprovalAndTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_306 = CONVERT 0 to address
TMP_307(bool) = _to != TMP_306
TMP_308(None) = SOLIDITY_CALL require(bool)(TMP_307)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != ownerOf(_tokenId))

IRs:
TMP_309(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_310(bool) = _to != TMP_309
TMP_311(None) = SOLIDITY_CALL require(bool)(TMP_310)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_312(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_313(bool) = TMP_312 == _from
TMP_314(None) = SOLIDITY_CALL require(bool)(TMP_313)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeToken(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 927.sol-CryptoSagaHero-defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,uint32[5],uint32[5],uint32[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_classRank < 5)

IRs:
TMP_386(bool) = _classRank < 5
TMP_387(None) = SOLIDITY_CALL require(bool)(TMP_386)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_classType < 3)

IRs:
TMP_388(bool) = _classType < 3
TMP_389(None) = SOLIDITY_CALL require(bool)(TMP_388)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_aura < 5)

IRs:
TMP_390(bool) = _aura < 5
TMP_391(None) = SOLIDITY_CALL require(bool)(TMP_390)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_minIVForStats[0] <= _maxIVForStats[0] && _minIVForStats[1] <= _maxIVForStats[1] && _minIVForStats[2] <= _maxIVForStats[2] && _minIVForStats[3] <= _maxIVForStats[3] && _minIVForStats[4] <= _maxIVForStats[4])

IRs:
REF_235(uint32) -> _minIVForStats[0]
REF_236(uint32) -> _maxIVForStats[0]
TMP_392(bool) = REF_235 <= REF_236
REF_237(uint32) -> _minIVForStats[1]
REF_238(uint32) -> _maxIVForStats[1]
TMP_393(bool) = REF_237 <= REF_238
TMP_394(bool) = TMP_392 && TMP_393
REF_239(uint32) -> _minIVForStats[2]
REF_240(uint32) -> _maxIVForStats[2]
TMP_395(bool) = REF_239 <= REF_240
TMP_396(bool) = TMP_394 && TMP_395
REF_241(uint32) -> _minIVForStats[3]
REF_242(uint32) -> _maxIVForStats[3]
TMP_397(bool) = REF_241 <= REF_242
TMP_398(bool) = TMP_396 && TMP_397
REF_243(uint32) -> _minIVForStats[4]
REF_244(uint32) -> _maxIVForStats[4]
TMP_399(bool) = REF_243 <= REF_244
TMP_400(bool) = TMP_398 && TMP_399
TMP_401(None) = SOLIDITY_CALL require(bool)(TMP_400)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_heroType = HeroClass({className:_className,classRank:_classRank,classRace:_classRace,classAge:_classAge,classType:_classType,maxLevel:_maxLevel,aura:_aura,baseStats:_baseStats,minIVForStats:_minIVForStats,maxIVForStats:_maxIVForStats,currentNumberOfInstancedHeroes:0})

IRs:
TMP_402(CryptoSagaHero.HeroClass) = new HeroClass(_className,_classRank,_classRace,_classAge,_classType,_maxLevel,_aura,_baseStats,_minIVForStats,_maxIVForStats,0)
_heroType(CryptoSagaHero.HeroClass) := TMP_402(CryptoSagaHero.HeroClass)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
heroClasses[numberOfHeroClasses] = _heroType

IRs:
REF_245(CryptoSagaHero.HeroClass) -> heroClasses[numberOfHeroClasses]
REF_245(CryptoSagaHero.HeroClass) (->heroClasses) := _heroType(CryptoSagaHero.HeroClass)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
DefineType(msg.sender,numberOfHeroClasses,_heroType.className)

IRs:
REF_246(string) -> _heroType.className
Emit DefineType(msg.sender,numberOfHeroClasses,REF_246)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
numberOfHeroClasses ++

IRs:
TMP_404(uint32) := numberOfHeroClasses(uint32)
numberOfHeroClasses(uint32) = numberOfHeroClasses + 1"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 927.sol-CryptoSagaHero-deploy(uint256,uint32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) != address(0))

IRs:
TMP_422(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_423 = CONVERT 0 to address
TMP_424(bool) = TMP_422 != TMP_423
TMP_425(None) = SOLIDITY_CALL require(bool)(TMP_424)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_heroInstance = tokenIdToHeroInstance[_tokenId]

IRs:
REF_259(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_heroInstance(CryptoSagaHero.HeroInstance) := REF_259(CryptoSagaHero.HeroInstance)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_heroInstance.availableAt <= now)

IRs:
REF_260(uint256) -> _heroInstance.availableAt
TMP_426(bool) = REF_260 <= now
TMP_427(None) = SOLIDITY_CALL require(bool)(TMP_426)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_heroInstance.lastLocationId = _locationId

IRs:
REF_261(uint32) -> _heroInstance.lastLocationId
REF_261(uint32) (->_heroInstance) := _locationId(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_heroInstance.availableAt = now + _duration

IRs:
REF_262(uint256) -> _heroInstance.availableAt
TMP_428(uint256) = now + _duration
REF_262(uint256) (->_heroInstance) := TMP_428(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Deploy(msg.sender,_tokenId,_locationId,_duration)

IRs:
Emit Deploy(msg.sender,_tokenId,_locationId,_duration)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccessDeploy()

IRs:
MODIFIER_CALL, AccessDeploy.onlyAccessDeploy()()"];
7->1;
}
// Function: 927.sol-CryptoSagaHero-getClassInfo(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_cl = heroClasses[_classId]

IRs:
REF_172(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
_cl(CryptoSagaHero.HeroClass) := REF_172(CryptoSagaHero.HeroClass)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_cl.className,_cl.classRank,_cl.classRace,_cl.classAge,_cl.classType,_cl.maxLevel,_cl.aura,_cl.baseStats,_cl.minIVForStats,_cl.maxIVForStats)

IRs:
REF_173(string) -> _cl.className
REF_174(uint8) -> _cl.classRank
REF_175(uint8) -> _cl.classRace
REF_176(uint32) -> _cl.classAge
REF_177(uint8) -> _cl.classType
REF_178(uint32) -> _cl.maxLevel
REF_179(uint8) -> _cl.aura
REF_180(uint32[5]) -> _cl.baseStats
REF_181(uint32[5]) -> _cl.minIVForStats
REF_182(uint32[5]) -> _cl.maxIVForStats
RETURN REF_173,REF_174,REF_175,REF_176,REF_177,REF_178,REF_179,REF_180,REF_181,REF_182"];
3[label="Node Type: RETURN 3

EXPRESSION:
(className,classRank,classRace,classAge,classType,maxLevel,aura,baseStats,minIVs,maxIVs)

IRs:
RETURN className,classRank,classRace,classAge,classType,maxLevel,aura,baseStats,minIVs,maxIVs"];
}
// Function: 927.sol-CryptoSagaHero-getClassMintCount(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
heroClasses[_classId].currentNumberOfInstancedHeroes

IRs:
REF_187(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
REF_188(uint32) -> REF_187.currentNumberOfInstancedHeroes
RETURN REF_188"];
}
// Function: 927.sol-CryptoSagaHero-getClassName(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
heroClasses[_classId].className

IRs:
REF_183(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
REF_184(string) -> REF_183.className
RETURN REF_184"];
}
// Function: 927.sol-CryptoSagaHero-getClassRank(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
heroClasses[_classId].classRank

IRs:
REF_185(CryptoSagaHero.HeroClass) -> heroClasses[_classId]
REF_186(uint8) -> REF_185.classRank
RETURN REF_186"];
}
// Function: 927.sol-CryptoSagaHero-getGoldDepositOfAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
addressToGoldDeposit[_address]

IRs:
REF_229(uint256) -> addressToGoldDeposit[_address]
RETURN REF_229"];
}
// Function: 927.sol-CryptoSagaHero-getHeroAvailableAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].availableAt

IRs:
REF_216(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_217(uint256) -> REF_216.availableAt
RETURN REF_217"];
}
// Function: 927.sol-CryptoSagaHero-getHeroBP(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_tmp = tokenIdToHeroInstance[_tokenId].currentStats

IRs:
REF_218(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_219(uint32[5]) -> REF_218.currentStats
_tmp(uint32[1]) = ['REF_219(uint32[5])']"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_tmp[0] + _tmp[1] + _tmp[2] + _tmp[3] + _tmp[4])

IRs:
REF_220(uint32) -> _tmp[0]
REF_221(uint32) -> _tmp[1]
TMP_342(uint32) = REF_220 + REF_221
REF_222(uint32) -> _tmp[2]
TMP_343(uint32) = TMP_342 + REF_222
REF_223(uint32) -> _tmp[3]
TMP_344(uint32) = TMP_343 + REF_223
REF_224(uint32) -> _tmp[4]
TMP_345(uint32) = TMP_344 + REF_224
RETURN TMP_345"];
}
// Function: 927.sol-CryptoSagaHero-getHeroClassId(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].heroClassId

IRs:
REF_208(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_209(uint32) -> REF_208.heroClassId
RETURN REF_209"];
}
// Function: 927.sol-CryptoSagaHero-getHeroInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_h = tokenIdToHeroInstance[_tokenId]

IRs:
REF_189(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_h(CryptoSagaHero.HeroInstance) := REF_189(CryptoSagaHero.HeroInstance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bp = _h.currentStats[0] + _h.currentStats[1] + _h.currentStats[2] + _h.currentStats[3] + _h.currentStats[4]

IRs:
REF_190(uint32[5]) -> _h.currentStats
REF_191(uint32) -> REF_190[0]
REF_192(uint32[5]) -> _h.currentStats
REF_193(uint32) -> REF_192[1]
TMP_338(uint32) = REF_191 + REF_193
REF_194(uint32[5]) -> _h.currentStats
REF_195(uint32) -> REF_194[2]
TMP_339(uint32) = TMP_338 + REF_195
REF_196(uint32[5]) -> _h.currentStats
REF_197(uint32) -> REF_196[3]
TMP_340(uint32) = TMP_339 + REF_197
REF_198(uint32[5]) -> _h.currentStats
REF_199(uint32) -> REF_198[4]
TMP_341(uint32) = TMP_340 + REF_199
_bp(uint32) := TMP_341(uint32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(_h.heroClassId,_h.heroName,_h.currentLevel,_h.currentExp,_h.lastLocationId,_h.availableAt,_h.currentStats,_h.ivForStats,_bp)

IRs:
REF_200(uint32) -> _h.heroClassId
REF_201(string) -> _h.heroName
REF_202(uint32) -> _h.currentLevel
REF_203(uint32) -> _h.currentExp
REF_204(uint32) -> _h.lastLocationId
REF_205(uint256) -> _h.availableAt
REF_206(uint32[5]) -> _h.currentStats
REF_207(uint32[5]) -> _h.ivForStats
RETURN REF_200,REF_201,REF_202,REF_203,REF_204,REF_205,REF_206,REF_207,_bp"];
4[label="Node Type: RETURN 4

EXPRESSION:
(classId,heroName,currentLevel,currentExp,lastLocationId,availableAt,currentStats,ivs,bp)

IRs:
RETURN classId,heroName,currentLevel,currentExp,lastLocationId,availableAt,currentStats,ivs,bp"];
}
// Function: 927.sol-CryptoSagaHero-getHeroLevel(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].currentLevel

IRs:
REF_212(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_213(uint32) -> REF_212.currentLevel
RETURN REF_213"];
}
// Function: 927.sol-CryptoSagaHero-getHeroLocation(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].lastLocationId

IRs:
REF_214(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_215(uint32) -> REF_214.lastLocationId
RETURN REF_215"];
}
// Function: 927.sol-CryptoSagaHero-getHeroName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].heroName

IRs:
REF_210(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_211(string) -> REF_210.heroName
RETURN REF_211"];
}
// Function: 927.sol-CryptoSagaHero-getHeroRequiredExpForLevelUp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((tokenIdToHeroInstance[_tokenId].currentLevel + 2) * requiredExpIncreaseFactor)

IRs:
REF_227(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_228(uint32) -> REF_227.currentLevel
TMP_350(uint32) = REF_228 + 2
TMP_351(uint32) = TMP_350 * requiredExpIncreaseFactor
RETURN TMP_351"];
}
// Function: 927.sol-CryptoSagaHero-getHeroRequiredGoldForLevelUp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(uint256(2) ** (tokenIdToHeroInstance[_tokenId].currentLevel / 10)) * requiredGoldIncreaseFactor

IRs:
TMP_346 = CONVERT 2 to uint256
REF_225(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_226(uint32) -> REF_225.currentLevel
TMP_347(uint32) = REF_226 / 10
TMP_348(uint256) = TMP_346 ** TMP_347
TMP_349(uint256) = TMP_348 * requiredGoldIncreaseFactor
RETURN TMP_349"];
}
// Function: 927.sol-CryptoSagaHero-getTokenIdOfAddressAndIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokensOf(_address)[_index]

IRs:
TMP_352(uint256[]) = INTERNAL_CALL, ERC721Token.tokensOf(address)(_address)
REF_230(uint256) -> TMP_352[_index]
RETURN REF_230"];
}
// Function: 927.sol-CryptoSagaHero-getTotalBPOfAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_tokens = tokensOf(_address)

IRs:
TMP_353(uint256[]) = INTERNAL_CALL, ERC721Token.tokensOf(address)(_address)
_tokens(uint256[1]) = ['TMP_353(uint256[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_totalBP = 0

IRs:
_totalBP(uint32) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _tokens.length

IRs:
REF_231 -> LENGTH _tokens
TMP_354(bool) = i < REF_231
CONDITION TMP_354"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_totalBP += getHeroBP(_tokens[i])

IRs:
REF_232(uint256) -> _tokens[i]
TMP_355(uint32) = INTERNAL_CALL, CryptoSagaHero.getHeroBP(uint256)(REF_232)
_totalBP(uint32) = _totalBP + TMP_355"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_356(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: RETURN 9

EXPRESSION:
_totalBP

IRs:
RETURN _totalBP"];
}
// Function: 927.sol-CryptoSagaHero-grantAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = true

IRs:
REF_139(bool) -> deployAccess[_address]
REF_139(bool) (->deployAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-grantAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = true

IRs:
REF_137(bool) -> depositAccess[_address]
REF_137(bool) (->depositAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-grantAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = true

IRs:
REF_141(bool) -> mintAccess[_address]
REF_141(bool) (->mintAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-isApprovedFor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
approvedFor(_tokenId) == _owner

IRs:
TMP_304(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_305(bool) = TMP_304 == _owner
RETURN TMP_305"];
}
// Function: 927.sol-CryptoSagaHero-levelUp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_heroInstance = tokenIdToHeroInstance[_tokenId]

IRs:
REF_267(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
_heroInstance(CryptoSagaHero.HeroInstance) := REF_267(CryptoSagaHero.HeroInstance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_heroInstance.availableAt <= now)

IRs:
REF_268(uint256) -> _heroInstance.availableAt
TMP_442(bool) = REF_268 <= now
TMP_443(None) = SOLIDITY_CALL require(bool)(TMP_442)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_heroClassInfo = heroClasses[_heroInstance.heroClassId]

IRs:
REF_269(uint32) -> _heroInstance.heroClassId
REF_270(CryptoSagaHero.HeroClass) -> heroClasses[REF_269]
_heroClassInfo(CryptoSagaHero.HeroClass) := REF_270(CryptoSagaHero.HeroClass)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_heroInstance.currentLevel < _heroClassInfo.maxLevel)

IRs:
REF_271(uint32) -> _heroInstance.currentLevel
REF_272(uint32) -> _heroClassInfo.maxLevel
TMP_444(bool) = REF_271 < REF_272
TMP_445(None) = SOLIDITY_CALL require(bool)(TMP_444)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
requiredExp = getHeroRequiredExpForLevelUp(_tokenId)

IRs:
TMP_446(uint32) = INTERNAL_CALL, CryptoSagaHero.getHeroRequiredExpForLevelUp(uint256)(_tokenId)
requiredExp(uint32) := TMP_446(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_heroInstance.currentExp >= requiredExp)

IRs:
REF_273(uint32) -> _heroInstance.currentExp
TMP_447(bool) = REF_273 >= requiredExp
TMP_448(None) = SOLIDITY_CALL require(bool)(TMP_447)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
requiredGold = getHeroRequiredGoldForLevelUp(_tokenId)

IRs:
TMP_449(uint256) = INTERNAL_CALL, CryptoSagaHero.getHeroRequiredGoldForLevelUp(uint256)(_tokenId)
requiredGold(uint256) := TMP_449(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_ownerOfToken = ownerOf(_tokenId)

IRs:
TMP_450(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
_ownerOfToken(address) := TMP_450(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(addressToGoldDeposit[_ownerOfToken] >= requiredGold)

IRs:
REF_274(uint256) -> addressToGoldDeposit[_ownerOfToken]
TMP_451(bool) = REF_274 >= requiredGold
TMP_452(None) = SOLIDITY_CALL require(bool)(TMP_451)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_heroInstance.currentLevel += 1

IRs:
REF_275(uint32) -> _heroInstance.currentLevel
REF_275(-> _heroInstance) = REF_275 + 1"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->17;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i < 5

IRs:
TMP_453(bool) = i < 5
CONDITION TMP_453"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_heroInstance.currentStats[i] = _heroClassInfo.baseStats[i] + (_heroInstance.currentLevel - 1) * _heroInstance.ivForStats[i]

IRs:
REF_276(uint32[5]) -> _heroInstance.currentStats
REF_277(uint32) -> REF_276[i]
REF_278(uint32[5]) -> _heroClassInfo.baseStats
REF_279(uint32) -> REF_278[i]
REF_280(uint32) -> _heroInstance.currentLevel
TMP_454(uint32) = REF_280 - 1
REF_281(uint32[5]) -> _heroInstance.ivForStats
REF_282(uint32) -> REF_281[i]
TMP_455(uint32) = TMP_454 * REF_282
TMP_456(uint32) = REF_279 + TMP_455
REF_277(uint32) (->_heroInstance) := TMP_456(uint32)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_457(uint8) := i(uint8)
i(uint8) = i + 1"];
16->14;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_heroInstance.currentExp -= requiredExp

IRs:
REF_283(uint32) -> _heroInstance.currentExp
REF_283(-> _heroInstance) = REF_283 - requiredExp"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
addressToGoldDeposit[_ownerOfToken] -= requiredGold

IRs:
REF_284(uint256) -> addressToGoldDeposit[_ownerOfToken]
REF_284(-> addressToGoldDeposit) = REF_284 - requiredGold"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LevelUp(msg.sender,_tokenId,_heroInstance.currentLevel)

IRs:
REF_285(uint32) -> _heroInstance.currentLevel
Emit LevelUp(msg.sender,_tokenId,REF_285)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
21->1;
}
// Function: 927.sol-CryptoSagaHero-mint(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_406 = CONVERT 0 to address
TMP_407(bool) = _owner != TMP_406
TMP_408(None) = SOLIDITY_CALL require(bool)(TMP_407)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_heroClassId < numberOfHeroClasses)

IRs:
TMP_409(bool) = _heroClassId < numberOfHeroClasses
TMP_410(None) = SOLIDITY_CALL require(bool)(TMP_409)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_heroClassInfo = heroClasses[_heroClassId]

IRs:
REF_247(CryptoSagaHero.HeroClass) -> heroClasses[_heroClassId]
_heroClassInfo(CryptoSagaHero.HeroClass) := REF_247(CryptoSagaHero.HeroClass)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(_owner,numberOfTokenIds)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(_owner,numberOfTokenIds)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->14;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < 5

IRs:
TMP_412(bool) = i < 5
CONDITION TMP_412"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_ivForStats[i] = (random(_heroClassInfo.maxIVForStats[i] + 1,_heroClassInfo.minIVForStats[i]))

IRs:
REF_248(uint32) -> _ivForStats[i]
REF_249(uint32[5]) -> _heroClassInfo.maxIVForStats
REF_250(uint32) -> REF_249[i]
TMP_413(uint32) = REF_250 + 1
REF_251(uint32[5]) -> _heroClassInfo.minIVForStats
REF_252(uint32) -> REF_251[i]
TMP_414(uint32) = INTERNAL_CALL, CryptoSagaHero.random(uint32,uint32)(TMP_413,REF_252)
REF_248(uint32) (->_ivForStats) := TMP_414(uint32)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_initialStats[i] = _heroClassInfo.baseStats[i] + _ivForStats[i]

IRs:
REF_253(uint32) -> _initialStats[i]
REF_254(uint32[5]) -> _heroClassInfo.baseStats
REF_255(uint32) -> REF_254[i]
REF_256(uint32) -> _ivForStats[i]
TMP_415(uint32) = REF_255 + REF_256
REF_253(uint32) (->_initialStats) := TMP_415(uint32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_416(uint8) := i(uint8)
i(uint8) = i + 1"];
13->10;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_heroInstance = HeroInstance({heroClassId:_heroClassId,heroName:,currentLevel:1,currentExp:0,lastLocationId:0,availableAt:now,currentStats:_initialStats,ivForStats:_ivForStats})

IRs:
TMP_417(CryptoSagaHero.HeroInstance) = new HeroInstance(_heroClassId,,1,0,0,now,_initialStats,_ivForStats)
_heroInstance(CryptoSagaHero.HeroInstance) := TMP_417(CryptoSagaHero.HeroInstance)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokenIdToHeroInstance[numberOfTokenIds] = _heroInstance

IRs:
REF_257(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[numberOfTokenIds]
REF_257(CryptoSagaHero.HeroInstance) (->tokenIdToHeroInstance) := _heroInstance(CryptoSagaHero.HeroInstance)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
numberOfTokenIds ++

IRs:
TMP_418(uint256) := numberOfTokenIds(uint256)
numberOfTokenIds(uint256) = numberOfTokenIds + 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_heroClassInfo.currentNumberOfInstancedHeroes ++

IRs:
REF_258(uint32) -> _heroClassInfo.currentNumberOfInstancedHeroes
TMP_419(uint32) := REF_258(uint32)
REF_258(-> _heroClassInfo) = REF_258 + 1"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
numberOfTokenIds - 1

IRs:
TMP_420(uint256) = numberOfTokenIds - 1
RETURN TMP_420"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onlyAccessMint()

IRs:
MODIFIER_CALL, AccessMint.onlyAccessMint()()"];
19->1;
}
// Function: 927.sol-CryptoSagaHero-onlyAccessDeploy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || deployAccess[msg.sender] == true)

IRs:
TMP_486(bool) = msg.sender == owner
REF_293(bool) -> deployAccess[msg.sender]
TMP_487(bool) = REF_293 == True
TMP_488(bool) = TMP_486 || TMP_487
TMP_489(None) = SOLIDITY_CALL require(bool)(TMP_488)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-onlyAccessDeposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || depositAccess[msg.sender] == true)

IRs:
TMP_478(bool) = msg.sender == owner
REF_292(bool) -> depositAccess[msg.sender]
TMP_479(bool) = REF_292 == True
TMP_480(bool) = TMP_478 || TMP_479
TMP_481(None) = SOLIDITY_CALL require(bool)(TMP_480)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-onlyAccessMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || mintAccess[msg.sender] == true)

IRs:
TMP_490(bool) = msg.sender == owner
REF_294(bool) -> mintAccess[msg.sender]
TMP_491(bool) = REF_294 == True
TMP_492(bool) = TMP_490 || TMP_491
TMP_493(None) = SOLIDITY_CALL require(bool)(TMP_492)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_484(bool) = msg.sender == owner
TMP_485(None) = SOLIDITY_CALL require(bool)(TMP_484)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_497(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_498(bool) = TMP_497 == msg.sender
TMP_499(None) = SOLIDITY_CALL require(bool)(TMP_498)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_482(bool) = msg.sender == pendingOwner
TMP_483(None) = SOLIDITY_CALL require(bool)(TMP_482)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-ownerOf(uint256)
digraph{
}
// Function: 927.sol-CryptoSagaHero-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 927.sol-CryptoSagaHero-random(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_upper > _lower)

IRs:
TMP_469(bool) = _upper > _lower
TMP_470(None) = SOLIDITY_CALL require(bool)(TMP_469)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
seed = uint32(keccak256()(keccak256()(block.blockhash(block.number),seed),now))

IRs:
TMP_471(uint256) = SOLIDITY_CALL blockhash(uint256)(block.number)
TMP_472(bytes32) = SOLIDITY_CALL keccak256()(TMP_471,seed)
TMP_473(bytes32) = SOLIDITY_CALL keccak256()(TMP_472,now)
TMP_474 = CONVERT TMP_473 to uint32
seed(uint32) := TMP_474(uint32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
seed % (_upper - _lower) + _lower

IRs:
TMP_475(uint32) = _upper - _lower
TMP_476(uint32) = seed % TMP_475
TMP_477(uint32) = TMP_476 + _lower
RETURN TMP_477"];
}
// Function: 927.sol-CryptoSagaHero-removeToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_331(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_332(bool) = TMP_331 == _from
TMP_333(None) = SOLIDITY_CALL require(bool)(TMP_332)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_158(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_158(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = balanceOf(_from).sub(1)

IRs:
TMP_334(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_from)
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_334', '1'] 
lastTokenIndex(uint256) := TMP_335(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_160(uint256[]) -> ownedTokens[_from]
REF_161(uint256) -> REF_160[lastTokenIndex]
lastToken(uint256) := REF_161(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenOwner[_tokenId] = 0

IRs:
REF_162(address) -> tokenOwner[_tokenId]
REF_162(address) (->tokenOwner) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_163(uint256[]) -> ownedTokens[_from]
REF_164(uint256) -> REF_163[tokenIndex]
REF_164(uint256) (->ownedTokens) := lastToken(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_165(uint256[]) -> ownedTokens[_from]
REF_166(uint256) -> REF_165[lastTokenIndex]
REF_166(uint256) (->ownedTokens) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_167(uint256[]) -> ownedTokens[_from]
REF_168 -> LENGTH REF_167
TMP_336(uint256) := REF_168(uint256)
REF_168(-> ownedTokens) = REF_168 - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_169(uint256) -> ownedTokensIndex[_tokenId]
REF_169(uint256) (->ownedTokensIndex) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_170(uint256) -> ownedTokensIndex[lastToken]
REF_170(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalTokens = totalTokens.sub(1)

IRs:
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_337(uint256)"];
}
// Function: 927.sol-CryptoSagaHero-revokeAccessDeploy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deployAccess[_address] = false

IRs:
REF_140(bool) -> deployAccess[_address]
REF_140(bool) (->deployAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-revokeAccessDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
depositAccess[_address] = false

IRs:
REF_138(bool) -> depositAccess[_address]
REF_138(bool) (->depositAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-revokeAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = false

IRs:
REF_142(bool) -> mintAccess[_address]
REF_142(bool) (->mintAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-setGoldContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
goldContract = Gold(_contractAddress)

IRs:
TMP_358 = CONVERT _contractAddress to Gold
goldContract(Gold) := TMP_358(Gold)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-setHeroName(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenIdToHeroInstance[_tokenId].heroName = _name

IRs:
REF_233(CryptoSagaHero.HeroInstance) -> tokenIdToHeroInstance[_tokenId]
REF_234(string) -> REF_233.heroName
REF_234(string) (->tokenIdToHeroInstance) := _name(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-setRequiredExpIncreaseFactor(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
requiredExpIncreaseFactor = _value

IRs:
requiredExpIncreaseFactor(uint32) := _value(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-setRequiredGoldIncreaseFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
requiredGoldIncreaseFactor = _value

IRs:
requiredGoldIncreaseFactor(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaHero-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CryptoSaga Hero

IRs:
name(string) := CryptoSaga Hero(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = HERO

IRs:
symbol(string) := HERO(string)"];
}
// Function: 927.sol-CryptoSagaHero-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
requiredExpIncreaseFactor = 100

IRs:
requiredExpIncreaseFactor(uint32) := 100(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
requiredGoldIncreaseFactor = 1000000000000000000

IRs:
requiredGoldIncreaseFactor(uint256) := 1000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
seed = 0

IRs:
seed(uint32) := 0(uint256)"];
}
// Function: 927.sol-CryptoSagaHero-takeOwnership(uint256)
digraph{
}
// Function: 927.sol-CryptoSagaHero-tokensOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner]

IRs:
REF_145(uint256[]) -> ownedTokens[_owner]
RETURN REF_145"];
}
// Function: 927.sol-CryptoSagaHero-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalTokens

IRs:
RETURN totalTokens"];
}
// Function: 927.sol-CryptoSagaHero-transfer(address,uint256)
digraph{
}
// Function: 927.sol-CryptoSagaHero-transferDeposit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(goldContract.allowance(msg.sender,this) >= _amount)

IRs:
TMP_461(uint256) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:allowance, arguments:['msg.sender', 'this']  
TMP_462(bool) = TMP_461 >= _amount
TMP_463(None) = SOLIDITY_CALL require(bool)(TMP_462)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
goldContract.transferFrom(msg.sender,this,_amount)

IRs:
TMP_464(bool) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:transferFrom, arguments:['msg.sender', 'this', '_amount']  
CONDITION TMP_464"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addressToGoldDeposit[msg.sender] += _amount

IRs:
REF_288(uint256) -> addressToGoldDeposit[msg.sender]
REF_288(-> addressToGoldDeposit) = REF_288 + _amount"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 927.sol-CryptoSagaHero-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_260 = CONVERT 0 to address
TMP_261(bool) = newOwner != TMP_260
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-CryptoSagaHero-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 927.sol-CryptoSagaHero-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_494 = UnaryType.BANG paused 
TMP_495(None) = SOLIDITY_CALL require(bool)(TMP_494)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_496(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaHero-withdrawDeposit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addressToGoldDeposit[msg.sender] >= _amount)

IRs:
REF_289(uint256) -> addressToGoldDeposit[msg.sender]
TMP_466(bool) = REF_289 >= _amount
TMP_467(None) = SOLIDITY_CALL require(bool)(TMP_466)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
goldContract.transfer(msg.sender,_amount)

IRs:
TMP_468(bool) = HIGH_LEVEL_CALL, dest:goldContract(Gold), function:transfer, arguments:['msg.sender', '_amount']  
CONDITION TMP_468"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addressToGoldDeposit[msg.sender] -= _amount

IRs:
REF_291(uint256) -> addressToGoldDeposit[msg.sender]
REF_291(-> addressToGoldDeposit) = REF_291 - _amount"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-CryptoSagaSwapPLAT(address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_heroAddress != address(0))

IRs:
TMP_550 = CONVERT 0 to address
TMP_551(bool) = _heroAddress != TMP_550
TMP_552(None) = SOLIDITY_CALL require(bool)(TMP_551)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_platAddress != address(0))

IRs:
TMP_553 = CONVERT 0 to address
TMP_554(bool) = _platAddress != TMP_553
TMP_555(None) = SOLIDITY_CALL require(bool)(TMP_554)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_platPriceOracleAddress != address(0))

IRs:
TMP_556 = CONVERT 0 to address
TMP_557(bool) = _platPriceOracleAddress != TMP_556
TMP_558(None) = SOLIDITY_CALL require(bool)(TMP_557)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_walletAddress != address(0))

IRs:
TMP_559 = CONVERT 0 to address
TMP_560(bool) = _walletAddress != TMP_559
TMP_561(None) = SOLIDITY_CALL require(bool)(TMP_560)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
wallet = _walletAddress

IRs:
wallet(address) := _walletAddress(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
heroContract = CryptoSagaHero(_heroAddress)

IRs:
TMP_562 = CONVERT _heroAddress to CryptoSagaHero
heroContract(CryptoSagaHero) := TMP_562(CryptoSagaHero)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
platContract = BitGuildToken(_platAddress)

IRs:
TMP_563 = CONVERT _platAddress to BitGuildToken
platContract(BitGuildToken) := TMP_563(BitGuildToken)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
platPriceOracleContract = PLATPriceOracle(_platPriceOracleAddress)

IRs:
TMP_564 = CONVERT _platPriceOracleAddress to PLATPriceOracle
platPriceOracleContract(PLATPriceOracle) := TMP_564(PLATPriceOracle)"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_631(bool) = msg.sender == owner
TMP_632(None) = SOLIDITY_CALL require(bool)(TMP_631)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 927.sol-CryptoSagaSwapPLAT-payWithPLAT(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _amount

IRs:
TMP_597(bool) = i < _amount
CONDITION TMP_597"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_randomValue = random(10000,0)

IRs:
TMP_598(uint32) = INTERNAL_CALL, CryptoSagaSwapPLAT.random(uint32,uint32)(10000,0)
_randomValue(uint32) := TMP_598(uint32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_heroRankToMint = 0

IRs:
_heroRankToMint(uint8) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_randomValue < 5000

IRs:
TMP_599(bool) = _randomValue < 5000
CONDITION TMP_599"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_heroRankToMint = 1

IRs:
_heroRankToMint(uint8) := 1(uint256)"];
8->16;
9[label="Node Type: IF 9

EXPRESSION:
_randomValue < 9550

IRs:
TMP_600(bool) = _randomValue < 9550
CONDITION TMP_600"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_heroRankToMint = 2

IRs:
_heroRankToMint(uint8) := 2(uint256)"];
10->15;
11[label="Node Type: IF 11

EXPRESSION:
_randomValue < 9950

IRs:
TMP_601(bool) = _randomValue < 9950
CONDITION TMP_601"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_heroRankToMint = 3

IRs:
_heroRankToMint(uint8) := 3(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_heroRankToMint = 4

IRs:
_heroRankToMint(uint8) := 4(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
summonHero(msg.sender,_heroRankToMint)

IRs:
TMP_602(uint256) = INTERNAL_CALL, CryptoSagaSwapPLAT.summonHero(address,uint8)(msg.sender,_heroRankToMint)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_603(uint256) := i(uint256)
i(uint256) = i + 1"];
18->4;
}
// Function: 927.sol-CryptoSagaSwapPLAT-random(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_upper > _lower)

IRs:
TMP_618(bool) = _upper > _lower
TMP_619(None) = SOLIDITY_CALL require(bool)(TMP_618)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
seed = uint32(keccak256()(keccak256()(block.blockhash(block.number - 1),seed),now))

IRs:
TMP_620(uint256) = block.number - 1
TMP_621(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_620)
TMP_622(bytes32) = SOLIDITY_CALL keccak256()(TMP_621,seed)
TMP_623(bytes32) = SOLIDITY_CALL keccak256()(TMP_622,now)
TMP_624 = CONVERT TMP_623 to uint32
seed(uint32) := TMP_624(uint32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
seed % (_upper - _lower) + _lower

IRs:
TMP_625(uint32) = _upper - _lower
TMP_626(uint32) = seed % TMP_625
TMP_627(uint32) = TMP_626 + _lower
RETURN TMP_627"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-receiveApproval(address,uint256,BitGuildToken,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != address(0))

IRs:
TMP_565 = CONVERT 0 to address
TMP_566(bool) = msg.sender != TMP_565
TMP_567(None) = SOLIDITY_CALL require(bool)(TMP_566)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_tokenContract == platContract)

IRs:
TMP_568(bool) = _tokenContract == platContract
TMP_569(None) = SOLIDITY_CALL require(bool)(TMP_568)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_tokenContract.transferFrom(_sender,address(this),_value))

IRs:
TMP_570 = CONVERT this to address
TMP_571(bool) = HIGH_LEVEL_CALL, dest:_tokenContract(BitGuildToken), function:transferFrom, arguments:['_sender', 'TMP_570', '_value']  
TMP_572(None) = SOLIDITY_CALL require(bool)(TMP_571)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_extraData.length != 0)

IRs:
REF_326 -> LENGTH _extraData
TMP_573(bool) = REF_326 != 0
TMP_574(None) = SOLIDITY_CALL require(bool)(TMP_573)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _extraData.length

IRs:
REF_327 -> LENGTH _extraData
TMP_575(bool) = i < REF_327
CONDITION TMP_575"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_amount = _amount + uint256(_extraData[i]) * (2 ** (8 * (_extraData.length - (i + 1))))

IRs:
REF_328(None) -> _extraData[i]
TMP_576 = CONVERT REF_328 to uint256
REF_329 -> LENGTH _extraData
TMP_577(uint256) = i + 1
TMP_578(uint256) = REF_329 - TMP_577
TMP_579(uint256) = 8 * TMP_578
TMP_580(uint256) = 2 ** TMP_579
TMP_581(uint256) = TMP_576 * TMP_580
TMP_582(uint256) = _amount + TMP_581
_amount(uint256) := TMP_582(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_583(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(_amount >= 1 && _amount <= 5)

IRs:
TMP_584(bool) = _amount >= 1
TMP_585(bool) = _amount <= 5
TMP_586(bool) = TMP_584 && TMP_585
TMP_587(None) = SOLIDITY_CALL require(bool)(TMP_586)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_priceOfBundle = _amount * ethPrice * platPriceOracleContract.ETHPrice() / (10 ** 18)

IRs:
TMP_588(uint256) = _amount * ethPrice
TMP_589(uint256) = HIGH_LEVEL_CALL, dest:platPriceOracleContract(PLATPriceOracle), function:ETHPrice, arguments:[]  
TMP_590(uint256) = TMP_588 * TMP_589
TMP_591(uint256) = 10 ** 18
TMP_592(uint256) = TMP_590 / TMP_591
_priceOfBundle(uint256) := TMP_592(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
require(bool)(_value >= _priceOfBundle)

IRs:
TMP_593(bool) = _value >= _priceOfBundle
TMP_594(None) = SOLIDITY_CALL require(bool)(TMP_593)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
payWithPLAT(_amount)

IRs:
INTERNAL_CALL, CryptoSagaSwapPLAT.payWithPLAT(uint256)(_amount)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
16->1;
}
// Function: 927.sol-CryptoSagaSwapPLAT-setBlacklist(uint32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
blackList[_classId] = _value

IRs:
REF_324(bool) -> blackList[_classId]
REF_324(bool) (->blackList) := _value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaSwapPLAT-setEthPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethPrice = _value

IRs:
ethPrice(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-CryptoSagaSwapPLAT-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ethPrice = 20000000000000000

IRs:
ethPrice(uint256) := 20000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
seed = 0

IRs:
seed(uint32) := 0(uint256)"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-summonHero(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_numberOfClasses = heroContract.numberOfHeroClasses()

IRs:
TMP_604(uint32) = HIGH_LEVEL_CALL, dest:heroContract(CryptoSagaHero), function:numberOfHeroClasses, arguments:[]  
_numberOfClasses(uint32) := TMP_604(uint32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_candidates = new uint32[](_numberOfClasses)

IRs:
TMP_606(uint32[])  = new uint32[](_numberOfClasses)
_candidates(uint32[]) = ['TMP_606(uint32[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_count = 0

IRs:
_count(uint32) := 0(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _numberOfClasses

IRs:
TMP_607(bool) = i < _numberOfClasses
CONDITION TMP_607"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
heroContract.getClassRank(i) == _heroRankToMint && blackList[i] != true

IRs:
TMP_608(uint8) = HIGH_LEVEL_CALL, dest:heroContract(CryptoSagaHero), function:getClassRank, arguments:['i']  
TMP_609(bool) = TMP_608 == _heroRankToMint
REF_333(bool) -> blackList[i]
TMP_610(bool) = REF_333 != True
TMP_611(bool) = TMP_609 && TMP_610
CONDITION TMP_611"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_candidates[_count] = i

IRs:
REF_334(uint32) -> _candidates[_count]
REF_334(uint32) (->_candidates) := i(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_count ++

IRs:
TMP_612(uint32) := _count(uint32)
_count(uint32) = _count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_613(uint32) := i(uint32)
i(uint32) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(_count != 0)

IRs:
TMP_614(bool) = _count != 0
TMP_615(None) = SOLIDITY_CALL require(bool)(TMP_614)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
heroContract.mint(_to,_candidates[random(_count,0)])

IRs:
TMP_616(uint32) = INTERNAL_CALL, CryptoSagaSwapPLAT.random(uint32,uint32)(_count,0)
REF_336(uint32) -> _candidates[TMP_616]
TMP_617(uint256) = HIGH_LEVEL_CALL, dest:heroContract(CryptoSagaHero), function:mint, arguments:['_to', 'REF_336']  
RETURN TMP_617"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_543 = CONVERT 0 to address
TMP_544(bool) = newOwner != TMP_543
TMP_545(None) = SOLIDITY_CALL require(bool)(TMP_544)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-CryptoSagaSwapPLAT-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 927.sol-CryptoSagaSwapPLAT-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_628 = UnaryType.BANG paused 
TMP_629(None) = SOLIDITY_CALL require(bool)(TMP_628)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-CryptoSagaSwapPLAT-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_630(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 927.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 927.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 927.sol-ERC20-totalSupply()
digraph{
}
// Function: 927.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 927.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 927.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 927.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 927.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 927.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 927.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 927.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 927.sol-ERC721-takeOwnership(uint256)
digraph{
}
// Function: 927.sol-ERC721-transfer(address,uint256)
digraph{
}
// Function: 927.sol-ERC721Token-_burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
approvedFor(_tokenId) != 0

IRs:
TMP_71(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_72(bool) = TMP_71 != 0
CONDITION TMP_72"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clearApproval(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(msg.sender,_tokenId)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeToken(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(msg.sender,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,0x0,_tokenId)

IRs:
Emit Transfer(msg.sender,0,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 927.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_66 = CONVERT 0 to address
TMP_67(bool) = _to != TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0x0,_to,_tokenId)

IRs:
Emit Transfer(0,_to,_tokenId)"];
}
// Function: 927.sol-ERC721Token-addToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_7(address) -> tokenOwner[_tokenId]
TMP_96 = CONVERT 0 to address
TMP_97(bool) = REF_7 == TMP_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_8(address) -> tokenOwner[_tokenId]
REF_8(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = balanceOf(_to)

IRs:
TMP_99(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_to)
length(uint256) := TMP_99(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_9(uint256[]) -> ownedTokens[_to]
REF_11 -> LENGTH REF_9
TMP_101(uint256) := REF_11(uint256)
TMP_102(uint256) = TMP_101 + 1
REF_11(uint256) (->ownedTokens) := TMP_102(uint256)
REF_12(uint256) -> REF_9[TMP_101]
REF_12(uint256) (->ownedTokens) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_13(uint256) -> ownedTokensIndex[_tokenId]
REF_13(uint256) (->ownedTokensIndex) := length(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalTokens = totalTokens.add(1)

IRs:
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_103(uint256)"];
}
// Function: 927.sol-ERC721Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_53(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
owner(address) := TMP_53(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_54(bool) = _to != owner
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
approvedFor(_tokenId) != 0 || _to != 0

IRs:
TMP_56(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_57(bool) = TMP_56 != 0
TMP_58(bool) = _to != 0
TMP_59(bool) = TMP_57 || TMP_58
CONDITION TMP_59"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_5(address) -> tokenApprovals[_tokenId]
REF_5(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
7->1;
}
// Function: 927.sol-ERC721Token-approvedFor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_4(address) -> tokenApprovals[_tokenId]
RETURN REF_4"];
}
// Function: 927.sol-ERC721Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner].length

IRs:
REF_0(uint256[]) -> ownedTokens[_owner]
REF_1 -> LENGTH REF_0
RETURN REF_1"];
}
// Function: 927.sol-ERC721Token-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_92(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_93(bool) = TMP_92 == _owner
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenApprovals[_tokenId] = 0

IRs:
REF_6(address) -> tokenApprovals[_tokenId]
REF_6(address) (->tokenApprovals) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(_owner,0,_tokenId)

IRs:
Emit Approval(_owner,0,_tokenId)"];
}
// Function: 927.sol-ERC721Token-clearApprovalAndTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_79 = CONVERT 0 to address
TMP_80(bool) = _to != TMP_79
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != ownerOf(_tokenId))

IRs:
TMP_82(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_83(bool) = _to != TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_85(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_86(bool) = TMP_85 == _from
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApproval(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
removeToken(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeToken(address,uint256)(_from,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addToken(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addToken(address,uint256)(_to,_tokenId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
}
// Function: 927.sol-ERC721Token-isApprovedFor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
approvedFor(_tokenId) == _owner

IRs:
TMP_77(address) = INTERNAL_CALL, ERC721Token.approvedFor(uint256)(_tokenId)
TMP_78(bool) = TMP_77 == _owner
RETURN TMP_78"];
}
// Function: 927.sol-ERC721Token-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_111(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_112(bool) = TMP_111 == msg.sender
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-ERC721Token-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_3(address) -> tokenOwner[_tokenId]
owner(address) := REF_3(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = owner != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 927.sol-ERC721Token-removeToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_104(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
TMP_105(bool) = TMP_104 == _from
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_15(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_15(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = balanceOf(_from).sub(1)

IRs:
TMP_107(uint256) = INTERNAL_CALL, ERC721Token.balanceOf(address)(_from)
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', '1'] 
lastTokenIndex(uint256) := TMP_108(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_17(uint256[]) -> ownedTokens[_from]
REF_18(uint256) -> REF_17[lastTokenIndex]
lastToken(uint256) := REF_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenOwner[_tokenId] = 0

IRs:
REF_19(address) -> tokenOwner[_tokenId]
REF_19(address) (->tokenOwner) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_20(uint256[]) -> ownedTokens[_from]
REF_21(uint256) -> REF_20[tokenIndex]
REF_21(uint256) (->ownedTokens) := lastToken(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_22(uint256[]) -> ownedTokens[_from]
REF_23(uint256) -> REF_22[lastTokenIndex]
REF_23(uint256) (->ownedTokens) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_24(uint256[]) -> ownedTokens[_from]
REF_25 -> LENGTH REF_24
TMP_109(uint256) := REF_25(uint256)
REF_25(-> ownedTokens) = REF_25 - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_26(uint256) -> ownedTokensIndex[_tokenId]
REF_26(uint256) (->ownedTokensIndex) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_27(uint256) -> ownedTokensIndex[lastToken]
REF_27(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalTokens = totalTokens.sub(1)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalTokens', '1'] 
totalTokens(uint256) := TMP_110(uint256)"];
}
// Function: 927.sol-ERC721Token-takeOwnership(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedFor(msg.sender,_tokenId))

IRs:
TMP_62(bool) = INTERNAL_CALL, ERC721Token.isApprovedFor(address,uint256)(msg.sender,_tokenId)
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clearApprovalAndTransfer(ownerOf(_tokenId),msg.sender,_tokenId)

IRs:
TMP_64(address) = INTERNAL_CALL, ERC721Token.ownerOf(uint256)(_tokenId)
INTERNAL_CALL, ERC721Token.clearApprovalAndTransfer(address,address,uint256)(TMP_64,msg.sender,_tokenId)"];
}
// Function: 927.sol-ERC721Token-tokensOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_owner]

IRs:
REF_2(uint256[]) -> ownedTokens[_owner]
RETURN REF_2"];
}
// Function: 927.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalTokens

IRs:
RETURN totalTokens"];
}
// Function: 927.sol-ERC721Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApprovalAndTransfer(msg.sender,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.clearApprovalAndTransfer(address,address,uint256)(msg.sender,_to,_tokenId)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721Token.onlyOwnerOf(uint256)(_tokenId)"];
2->1;
}
// Function: 927.sol-Gold-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-Gold-allowance(address,address)
digraph{
}
// Function: 927.sol-Gold-approve(address,uint256)
digraph{
}
// Function: 927.sol-Gold-balanceOf(address)
digraph{
}
// Function: 927.sol-Gold-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_208 = CONVERT 0 to address
pendingOwner(address) := TMP_208(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 927.sol-Gold-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_115(mapping(address => uint256)) -> allowed[msg.sender]
REF_116(uint256) -> REF_115[_spender]
oldValue(uint256) := REF_116(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_229(bool) = _subtractedValue > oldValue
CONDITION TMP_229"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_117(mapping(address => uint256)) -> allowed[msg.sender]
REF_118(uint256) -> REF_117[_spender]
REF_118(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_120(uint256) (->allowed) := TMP_230(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_122(mapping(address => uint256)) -> allowed[msg.sender]
REF_123(uint256) -> REF_122[_spender]
Emit Approval(msg.sender,_spender,REF_123)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 927.sol-Gold-grantAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = true

IRs:
REF_88(bool) -> mintAccess[_address]
REF_88(bool) (->mintAccess) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-Gold-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_108(mapping(address => uint256)) -> allowed[msg.sender]
REF_109(uint256) -> REF_108[_spender]
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_111', '_addedValue'] 
REF_109(uint256) (->allowed) := TMP_227(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_113(mapping(address => uint256)) -> allowed[msg.sender]
REF_114(uint256) -> REF_113[_spender]
Emit Approval(msg.sender,_spender,REF_114)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 927.sol-Gold-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_240(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_133(uint256) -> balances[_to]
REF_134(uint256) -> balances[_to]
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_134', '_amount'] 
REF_133(uint256) (->balances) := TMP_241(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_243 = CONVERT 0 to address
Emit Transfer(TMP_243,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAccessMint()

IRs:
MODIFIER_CALL, AccessMint.onlyAccessMint()()"];
6->1;
}
// Function: 927.sol-Gold-onlyAccessMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || mintAccess[msg.sender] == true)

IRs:
TMP_246(bool) = msg.sender == owner
REF_136(bool) -> mintAccess[msg.sender]
TMP_247(bool) = REF_136 == True
TMP_248(bool) = TMP_246 || TMP_247
TMP_249(None) = SOLIDITY_CALL require(bool)(TMP_248)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Gold-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_252(bool) = msg.sender == owner
TMP_253(None) = SOLIDITY_CALL require(bool)(TMP_252)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Gold-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_250(bool) = msg.sender == pendingOwner
TMP_251(None) = SOLIDITY_CALL require(bool)(TMP_250)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Gold-revokeAccessMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAccess[_address] = false

IRs:
REF_89(bool) -> mintAccess[_address]
REF_89(bool) (->mintAccess) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 927.sol-Gold-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Gold

IRs:
name(string) := Gold(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = G

IRs:
symbol(string) := G(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 927.sol-Gold-totalSupply()
digraph{
}
// Function: 927.sol-Gold-transfer(address,uint256)
digraph{
}
// Function: 927.sol-Gold-transferFrom(address,address,uint256)
digraph{
}
// Function: 927.sol-Gold-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_210 = CONVERT 0 to address
TMP_211(bool) = newOwner != TMP_210
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-PLATPriceOracle-PLATPriceOracle()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins[msg.sender] = true

IRs:
REF_320(bool) -> admins[msg.sender]
REF_320(bool) (->admins) := True(bool)"];
}
// Function: 927.sol-PLATPriceOracle-setAdmin(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(admins[msg.sender] == true)

IRs:
REF_322(bool) -> admins[msg.sender]
TMP_535(bool) = REF_322 == True
TMP_536(None) = SOLIDITY_CALL require(bool)(TMP_535)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[_newAdmin] = _value

IRs:
REF_323(bool) -> admins[_newAdmin]
REF_323(bool) (->admins) := _value(bool)"];
}
// Function: 927.sol-PLATPriceOracle-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ETHPrice = 60000000000000000000000

IRs:
ETHPrice(uint256) := 60000000000000000000000(uint256)"];
}
// Function: 927.sol-PLATPriceOracle-updatePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newPrice > 0)

IRs:
TMP_530(bool) = _newPrice > 0
TMP_531(None) = SOLIDITY_CALL require(bool)(TMP_530)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(admins[msg.sender] == true)

IRs:
REF_321(bool) -> admins[msg.sender]
TMP_532(bool) = REF_321 == True
TMP_533(None) = SOLIDITY_CALL require(bool)(TMP_532)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ETHPrice = _newPrice

IRs:
ETHPrice(uint256) := _newPrice(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
PriceChanged(_newPrice)

IRs:
Emit PriceChanged(_newPrice)"];
}
// Function: 927.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 927.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_43(bool) = msg.sender == owner
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 927.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 927.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = newOwner != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 927.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 927.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_45 = UnaryType.BANG paused 
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_47(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 927.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 927.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 927.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 927.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 927.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_61(mapping(address => uint256)) -> allowed[_owner]
REF_62(uint256) -> REF_61[_spender]
RETURN REF_62"];
}
// Function: 927.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_59(mapping(address => uint256)) -> allowed[msg.sender]
REF_60(uint256) -> REF_59[_spender]
REF_60(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 927.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 927.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
oldValue(uint256) := REF_71(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_144(bool) = _subtractedValue > oldValue
CONDITION TMP_144"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_72(mapping(address => uint256)) -> allowed[msg.sender]
REF_73(uint256) -> REF_72[_spender]
REF_73(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_74(mapping(address => uint256)) -> allowed[msg.sender]
REF_75(uint256) -> REF_74[_spender]
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_75(uint256) (->allowed) := TMP_145(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
Emit Approval(msg.sender,_spender,REF_78)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 927.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_63(mapping(address => uint256)) -> allowed[msg.sender]
REF_64(uint256) -> REF_63[_spender]
REF_65(mapping(address => uint256)) -> allowed[msg.sender]
REF_66(uint256) -> REF_65[_spender]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_66', '_addedValue'] 
REF_64(uint256) (->allowed) := TMP_142(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
Emit Approval(msg.sender,_spender,REF_69)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 927.sol-StandardToken-totalSupply()
digraph{
}
// Function: 927.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 927.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_130 = CONVERT 0 to address
TMP_131(bool) = _to != TMP_130
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_45(uint256) -> balances[_from]
TMP_133(bool) = _value <= REF_45
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_46(mapping(address => uint256)) -> allowed[_from]
REF_47(uint256) -> REF_46[msg.sender]
TMP_135(bool) = _value <= REF_47
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_48(uint256) -> balances[_from]
REF_49(uint256) -> balances[_from]
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_49', '_value'] 
REF_48(uint256) (->balances) := TMP_137(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_51(uint256) -> balances[_to]
REF_52(uint256) -> balances[_to]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_52', '_value'] 
REF_51(uint256) (->balances) := TMP_138(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_54(mapping(address => uint256)) -> allowed[_from]
REF_55(uint256) -> REF_54[msg.sender]
REF_56(mapping(address => uint256)) -> allowed[_from]
REF_57(uint256) -> REF_56[msg.sender]
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_57', '_value'] 
REF_55(uint256) (->allowed) := TMP_139(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 927.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
