digraph G {
// Function: 993.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_120'] 
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_122'] 
TMP_124(uint256) = TMP_123 / 2
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_121', 'TMP_124'] 
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_127(uint256) = TMP_125 / TMP_126
RETURN TMP_127"];
}
// Function: 993.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_110(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_112(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_111)
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_110', 'TMP_112'] 
RETURN TMP_113"];
}
// Function: 993.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_114', '312500000000000000000000000'] 
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_115', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_116'] 
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', '74999921875000000000000000000000'] 
TMP_119(uint256) = TMP_118 / 156250000
RETURN TMP_119"];
}
// Function: 993.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_107(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_106)
TMP_108(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', 'TMP_108'] 
RETURN TMP_109"];
}
// Function: 993.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_542(bool) = activated_ == False
TMP_543(None) = SOLIDITY_CALL require(bool,string)(TMP_542,fomo3d already activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_745(F3Ddatasets.Round) -> round_[1]
REF_746(uint256) -> REF_745.strt
TMP_544(uint256) = now + rndExtra_
TMP_545(uint256) = TMP_544 - rndGap_
REF_746(uint256) (->round_) := TMP_545(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_747(F3Ddatasets.Round) -> round_[1]
REF_748(uint256) -> REF_747.end
TMP_546(uint256) = now + rndInit_
TMP_547(uint256) = TMP_546 + rndExtra_
REF_748(uint256) (->round_) := TMP_547(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, FoMo3Dlong.onlyDevs()()"];
6->1;
}
// Function: 993.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_468(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_469(bytes32) = SOLIDITY_CALL keccak256()(TMP_468)
TMP_470 = CONVERT TMP_469 to uint256
TMP_471(uint256) = TMP_470 / now
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_467', 'TMP_471'] 
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_472', 'block.gaslimit'] 
TMP_474(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_475(bytes32) = SOLIDITY_CALL keccak256()(TMP_474)
TMP_476 = CONVERT TMP_475 to uint256
TMP_477(uint256) = TMP_476 / now
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_473', 'TMP_477'] 
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_478', 'block.number'] 
TMP_480(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_479)
TMP_481(bytes32) = SOLIDITY_CALL keccak256()(TMP_480)
TMP_482 = CONVERT TMP_481 to uint256
seed(uint256) := TMP_482(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_483(uint256) = seed / 1000
TMP_484(uint256) = TMP_483 * 1000
TMP_485(uint256) = seed - TMP_484
TMP_486(bool) = TMP_485 < airDropTracker_
CONDITION TMP_486"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 993.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_310(F3Ddatasets.Round) -> round_[_rID]
REF_311(uint256) -> REF_310.strt
TMP_280(uint256) = REF_311 + rndGap_
TMP_281(bool) = _now > TMP_280
REF_312(F3Ddatasets.Round) -> round_[_rID]
REF_313(uint256) -> REF_312.end
TMP_282(bool) = _now <= REF_313
REF_314(F3Ddatasets.Round) -> round_[_rID]
REF_315(uint256) -> REF_314.end
TMP_283(bool) = _now > REF_315
REF_316(F3Ddatasets.Round) -> round_[_rID]
REF_317(uint256) -> REF_316.plyr
TMP_284(bool) = REF_317 == 0
TMP_285(bool) = TMP_283 && TMP_284
TMP_286(bool) = TMP_282 || TMP_285
TMP_287(bool) = TMP_281 && TMP_286
CONDITION TMP_287"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_318(F3Ddatasets.Round) -> round_[_rID]
REF_319(uint256) -> REF_318.end
TMP_289(bool) = _now > REF_319
REF_320(F3Ddatasets.Round) -> round_[_rID]
REF_321(bool) -> REF_320.ended
TMP_290(bool) = REF_321 == False
TMP_291(bool) = TMP_289 && TMP_290
CONDITION TMP_291"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_322(F3Ddatasets.Round) -> round_[_rID]
REF_323(bool) -> REF_322.ended
REF_323(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_292(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_292(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_324(uint256) -> _eventData_.compressedData
REF_325(uint256) -> _eventData_.compressedData
TMP_293(uint256) = _now * 1000000000000000000
TMP_294(uint256) = REF_325 + TMP_293
REF_324(uint256) (->_eventData_) := TMP_294(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_326(uint256) -> _eventData_.compressedIDs
REF_327(uint256) -> _eventData_.compressedIDs
TMP_295(uint256) = REF_327 + _pID
REF_326(uint256) (->_eventData_) := TMP_295(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_329(F3Ddatasets.Player) -> plyr_[_pID]
REF_330(bytes32) -> REF_329.name
REF_331(uint256) -> _eventData_.compressedData
REF_332(uint256) -> _eventData_.compressedIDs
REF_333(address) -> _eventData_.winnerAddr
REF_334(bytes32) -> _eventData_.winnerName
REF_335(uint256) -> _eventData_.amountWon
REF_336(uint256) -> _eventData_.newPot
REF_337(uint256) -> _eventData_.P3DAmount
REF_338(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_330,msg.value,REF_331,REF_332,REF_333,REF_334,REF_335,REF_336,REF_337,REF_338)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_339(F3Ddatasets.Player) -> plyr_[_pID]
REF_340(uint256) -> REF_339.gen
REF_341(F3Ddatasets.Player) -> plyr_[_pID]
REF_342(uint256) -> REF_341.gen
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_342', 'msg.value'] 
REF_340(uint256) (->plyr_) := TMP_297(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 993.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_151(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_151(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_77(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_77(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_152 = CONVERT 0 to address
TMP_153(bool) = _affCode == TMP_152
TMP_154(bool) = _affCode == msg.sender
TMP_155(bool) = TMP_153 || TMP_154
CONDITION TMP_155"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_78(F3Ddatasets.Player) -> plyr_[_pID]
REF_79(uint256) -> REF_78.laff
_affID(uint256) := REF_79(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_80(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_80(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
TMP_156(bool) = _affID != REF_82
CONDITION TMP_156"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_83(F3Ddatasets.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
REF_84(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_157(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_157(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 993.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_141(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_141(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_70(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_70(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_142(bool) = _affCode == 0
TMP_143(bool) = _affCode == _pID
TMP_144(bool) = TMP_142 || TMP_143
CONDITION TMP_144"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
_affCode(uint256) := REF_72(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_73(F3Ddatasets.Player) -> plyr_[_pID]
REF_74(uint256) -> REF_73.laff
TMP_145(bool) = _affCode != REF_74
CONDITION TMP_145"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_75(F3Ddatasets.Player) -> plyr_[_pID]
REF_76(uint256) -> REF_75.laff
REF_76(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_146(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_146(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 993.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_162(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_162(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_85(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_85(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_163(bool) = _affCode == 
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(bytes32) -> REF_86.name
TMP_164(bool) = _affCode == REF_87
TMP_165(bool) = TMP_163 || TMP_164
CONDITION TMP_165"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_88(F3Ddatasets.Player) -> plyr_[_pID]
REF_89(uint256) -> REF_88.laff
_affID(uint256) := REF_89(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_90(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_90(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_91(F3Ddatasets.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.laff
TMP_166(bool) = _affID != REF_92
CONDITION TMP_166"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_93(F3Ddatasets.Player) -> plyr_[_pID]
REF_94(uint256) -> REF_93.laff
REF_94(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_167(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_167(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 993.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_475(F3Ddatasets.Round) -> round_[_rID]
REF_476(uint256) -> REF_475.strt
TMP_370(uint256) = REF_476 + rndGap_
TMP_371(bool) = _now > TMP_370
REF_477(F3Ddatasets.Round) -> round_[_rID]
REF_478(uint256) -> REF_477.end
TMP_372(bool) = _now <= REF_478
REF_479(F3Ddatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.end
TMP_373(bool) = _now > REF_480
REF_481(F3Ddatasets.Round) -> round_[_rID]
REF_482(uint256) -> REF_481.plyr
TMP_374(bool) = REF_482 == 0
TMP_375(bool) = TMP_373 && TMP_374
TMP_376(bool) = TMP_372 || TMP_375
TMP_377(bool) = TMP_371 && TMP_376
CONDITION TMP_377"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_483(F3Ddatasets.Round) -> round_[_rID]
REF_484(uint256) -> REF_483.eth
TMP_378(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_484', '_eth'] 
RETURN TMP_378"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_379"];
}
// Function: 993.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_465(F3Ddatasets.Round) -> round_[_rIDlast]
REF_466(uint256) -> REF_465.mask
REF_468(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_469(F3Ddatasets.PlayerRounds) -> REF_468[_rIDlast]
REF_470(uint256) -> REF_469.keys
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_466', 'REF_470'] 
TMP_368(uint256) = TMP_367 / 1000000000000000000
REF_472(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_473(F3Ddatasets.PlayerRounds) -> REF_472[_rIDlast]
REF_474(uint256) -> REF_473.mask
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_368', 'REF_474'] 
RETURN TMP_369"];
}
// Function: 993.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(54,0)

IRs:
REF_46(F3Ddatasets.TeamFee) -> fees_[0]
TMP_128(F3Ddatasets.TeamFee) = new TeamFee(54,0)
REF_46(F3Ddatasets.TeamFee) (->fees_) := TMP_128(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(41,0)

IRs:
REF_48(F3Ddatasets.TeamFee) -> fees_[1]
TMP_129(F3Ddatasets.TeamFee) = new TeamFee(41,0)
REF_48(F3Ddatasets.TeamFee) (->fees_) := TMP_129(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(30,0)

IRs:
REF_50(F3Ddatasets.TeamFee) -> fees_[2]
TMP_130(F3Ddatasets.TeamFee) = new TeamFee(30,0)
REF_50(F3Ddatasets.TeamFee) (->fees_) := TMP_130(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(40,0)

IRs:
REF_52(F3Ddatasets.TeamFee) -> fees_[3]
TMP_131(F3Ddatasets.TeamFee) = new TeamFee(40,0)
REF_52(F3Ddatasets.TeamFee) (->fees_) := TMP_131(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(37,0)

IRs:
REF_54(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_132(F3Ddatasets.PotSplit) = new PotSplit(37,0)
REF_54(F3Ddatasets.PotSplit) (->potSplit_) := TMP_132(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(34,0)

IRs:
REF_56(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_133(F3Ddatasets.PotSplit) = new PotSplit(34,0)
REF_56(F3Ddatasets.PotSplit) (->potSplit_) := TMP_133(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_58(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_134(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_58(F3Ddatasets.PotSplit) (->potSplit_) := TMP_134(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(32,0)

IRs:
REF_60(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_135(F3Ddatasets.PotSplit) = new PotSplit(32,0)
REF_60(F3Ddatasets.PotSplit) (->potSplit_) := TMP_135(F3Ddatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
leaderWallets.length = 4

IRs:
REF_62 -> LENGTH leaderWallets
REF_62(uint256) (->leaderWallets) := 4(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
leaderWallets[0] = 0x326d8d593195a3153f6d55d7791c10af9bcef597

IRs:
REF_63(address) -> leaderWallets[0]
REF_63(address) (->leaderWallets) := 287892632951187980033954118411566022188063454615(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
leaderWallets[1] = 0x15B474F7DE7157FA0dB9FaaA8b82761E78E804B9

IRs:
REF_64(address) -> leaderWallets[1]
REF_64(address) (->leaderWallets) := 123913129693625984824973980258711150651234583737(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
leaderWallets[2] = 0x0c2d482FBc1da4DaCf3CD05b6A5955De1A296fa8

IRs:
REF_65(address) -> leaderWallets[2]
REF_65(address) (->leaderWallets) := 69517711111727067821546211166674614150608023464(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
leaderWallets[3] = 0xD3d96E74aFAE57B5191DC44Bdb08b037355523Ba

IRs:
REF_66(address) -> leaderWallets[3]
REF_66(address) (->leaderWallets) := 1209445936409638479124350881081062817572593148858(address)"];
}
// Function: 993.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_376(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_377(F3Ddatasets.PlayerRounds) -> REF_376[_rID]
REF_378(uint256) -> REF_377.keys
TMP_317(bool) = REF_378 == 0
CONDITION TMP_317"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_318(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_318(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_379(F3Ddatasets.Round) -> round_[_rID]
REF_380(uint256) -> REF_379.eth
TMP_319(bool) = REF_380 < 100000000000000000000
REF_381(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_382(F3Ddatasets.PlayerRounds) -> REF_381[_rID]
REF_383(uint256) -> REF_382.eth
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_383', '_eth'] 
TMP_321(bool) = TMP_320 > 1000000000000000000
TMP_322(bool) = TMP_319 && TMP_321
CONDITION TMP_322"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_386(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_387(F3Ddatasets.PlayerRounds) -> REF_386[_rID]
REF_388(uint256) -> REF_387.eth
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_388'] 
_availableLimit(uint256) := TMP_323(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_324(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_390(F3Ddatasets.Player) -> plyr_[_pID]
REF_391(uint256) -> REF_390.gen
REF_392(F3Ddatasets.Player) -> plyr_[_pID]
REF_393(uint256) -> REF_392.gen
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_393', '_refund'] 
REF_391(uint256) (->plyr_) := TMP_325(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_326(bool) = _eth > 1000000000
CONDITION TMP_326"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_395(F3Ddatasets.Round) -> round_[_rID]
REF_396(uint256) -> REF_395.eth
TMP_327(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_396', '_eth'] 
_keys(uint256) := TMP_327(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_328(bool) = _keys >= 1000000000000000000
CONDITION TMP_328"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_398(F3Ddatasets.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.plyr
TMP_330(bool) = REF_399 != _pID
CONDITION TMP_330"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_400(F3Ddatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.plyr
REF_401(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.team
TMP_331(bool) = REF_403 != _team
CONDITION TMP_331"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.team
REF_405(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_406(uint256) -> _eventData_.compressedData
REF_407(uint256) -> _eventData_.compressedData
TMP_332(uint256) = REF_407 + 100
REF_406(uint256) (->_eventData_) := TMP_332(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_333(bool) = _eth >= 100000000000000000
CONDITION TMP_333"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_334(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_335(bool) = INTERNAL_CALL, FoMo3Dlong.airdrop()()
TMP_336(bool) = TMP_335 == True
CONDITION TMP_336"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_337(bool) = _eth >= 10000000000000000000
CONDITION TMP_337"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_339(uint256) = TMP_338 / 100
_prize(uint256) := TMP_339(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_409(F3Ddatasets.Player) -> plyr_[_pID]
REF_410(uint256) -> REF_409.win
REF_411(F3Ddatasets.Player) -> plyr_[_pID]
REF_412(uint256) -> REF_411.win
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_412', '_prize'] 
REF_410(uint256) (->plyr_) := TMP_340(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_341(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_415(uint256) -> _eventData_.compressedData
REF_415(-> _eventData_) = REF_415 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_342(bool) = _eth >= 1000000000000000000
TMP_343(bool) = _eth < 10000000000000000000
TMP_344(bool) = TMP_342 && TMP_343
CONDITION TMP_344"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_346(uint256) = TMP_345 / 100
_prize(uint256) := TMP_346(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_417(F3Ddatasets.Player) -> plyr_[_pID]
REF_418(uint256) -> REF_417.win
REF_419(F3Ddatasets.Player) -> plyr_[_pID]
REF_420(uint256) -> REF_419.win
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_420', '_prize'] 
REF_418(uint256) (->plyr_) := TMP_347(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_348(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_423(uint256) -> _eventData_.compressedData
REF_423(-> _eventData_) = REF_423 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_349(bool) = _eth >= 100000000000000000
TMP_350(bool) = _eth < 1000000000000000000
TMP_351(bool) = TMP_349 && TMP_350
CONDITION TMP_351"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_353(uint256) = TMP_352 / 100
_prize(uint256) := TMP_353(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_425(F3Ddatasets.Player) -> plyr_[_pID]
REF_426(uint256) -> REF_425.win
REF_427(F3Ddatasets.Player) -> plyr_[_pID]
REF_428(uint256) -> REF_427.win
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_428', '_prize'] 
REF_426(uint256) (->plyr_) := TMP_354(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_355(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_431(uint256) -> _eventData_.compressedData
REF_431(-> _eventData_) = REF_431 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_432(uint256) -> _eventData_.compressedData
REF_432(-> _eventData_) = REF_432 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_433(uint256) -> _eventData_.compressedData
TMP_356(uint256) = _prize * 1000000000000000000000000000000000
REF_433(-> _eventData_) = REF_433 + TMP_356"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_434(uint256) -> _eventData_.compressedData
REF_435(uint256) -> _eventData_.compressedData
TMP_357(uint256) = airDropTracker_ * 1000
TMP_358(uint256) = REF_435 + TMP_357
REF_434(uint256) (->_eventData_) := TMP_358(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_436(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_437(F3Ddatasets.PlayerRounds) -> REF_436[_rID]
REF_438(uint256) -> REF_437.keys
REF_440(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_441(F3Ddatasets.PlayerRounds) -> REF_440[_rID]
REF_442(uint256) -> REF_441.keys
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_442'] 
REF_438(uint256) (->plyrRnds_) := TMP_359(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_443(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_444(F3Ddatasets.PlayerRounds) -> REF_443[_rID]
REF_445(uint256) -> REF_444.eth
REF_447(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_448(F3Ddatasets.PlayerRounds) -> REF_447[_rID]
REF_449(uint256) -> REF_448.eth
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_449'] 
REF_445(uint256) (->plyrRnds_) := TMP_360(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_450(F3Ddatasets.Round) -> round_[_rID]
REF_451(uint256) -> REF_450.keys
REF_453(F3Ddatasets.Round) -> round_[_rID]
REF_454(uint256) -> REF_453.keys
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_454'] 
REF_451(uint256) (->round_) := TMP_361(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_455(F3Ddatasets.Round) -> round_[_rID]
REF_456(uint256) -> REF_455.eth
REF_458(F3Ddatasets.Round) -> round_[_rID]
REF_459(uint256) -> REF_458.eth
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_459'] 
REF_456(uint256) (->round_) := TMP_362(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_460(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_461(uint256) -> REF_460[_team]
REF_463(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_464(uint256) -> REF_463[_team]
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_464'] 
REF_461(uint256) (->rndTmEth_) := TMP_363(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_364(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_364(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_365(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_365(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 993.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_524(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_524(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_404(bool) = _pID == 0
CONDITION TMP_404"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_405(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_405(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_406(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_406(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_407(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_407(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_528(uint256) -> pIDxAddr_[msg.sender]
REF_528(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_529(F3Ddatasets.Player) -> plyr_[_pID]
REF_530(address) -> REF_529.addr
REF_530(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_408(bool) = _name != 
CONDITION TMP_408"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_531(uint256) -> pIDxName_[_name]
REF_531(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_532(F3Ddatasets.Player) -> plyr_[_pID]
REF_533(bytes32) -> REF_532.name
REF_533(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_534(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_535(bool) -> REF_534[_name]
REF_535(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_409(bool) = _laff != 0
TMP_410(bool) = _laff != _pID
TMP_411(bool) = TMP_409 && TMP_410
CONDITION TMP_411"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_536(F3Ddatasets.Player) -> plyr_[_pID]
REF_537(uint256) -> REF_536.laff
REF_537(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_538(uint256) -> _eventData_.compressedData
REF_539(uint256) -> _eventData_.compressedData
TMP_412(uint256) = REF_539 + 1
REF_538(uint256) (->_eventData_) := TMP_412(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 993.sol-FoMo3Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 10

IRs:
TMP_487(uint256) = _eth / 10
_com(uint256) := TMP_487(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
teamWallet.transfer(_com)

IRs:
Transfer dest:teamWallet value:_com"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_leader = _eth / 20

IRs:
TMP_489(uint256) = _eth / 20
_leader(uint256) := TMP_489(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_490(uint256) = _eth / 10
_aff(uint256) := TMP_490(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_491(bool) = _affID != _pID
REF_646(F3Ddatasets.Player) -> plyr_[_affID]
REF_647(bytes32) -> REF_646.name
TMP_492(bool) = REF_647 != 
TMP_493(bool) = TMP_491 && TMP_492
CONDITION TMP_493"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_648(F3Ddatasets.Player) -> plyr_[_affID]
REF_649(uint256) -> REF_648.aff
REF_651(F3Ddatasets.Player) -> plyr_[_affID]
REF_652(uint256) -> REF_651.aff
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_652'] 
REF_649(uint256) (->plyr_) := TMP_494(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_654(F3Ddatasets.Player) -> plyr_[_affID]
REF_655(address) -> REF_654.addr
REF_656(F3Ddatasets.Player) -> plyr_[_affID]
REF_657(bytes32) -> REF_656.name
Emit onAffiliatePayout(_affID,REF_655,REF_657,_rID,_pID,_aff,now)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_leader = _leader.add(_aff)

IRs:
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_leader', '_aff'] 
_leader(uint256) := TMP_496(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
leaderWallets[_team].transfer(_leader)

IRs:
REF_659(address) -> leaderWallets[_team]
Transfer dest:REF_659 value:_leader"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 993.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_668(F3Ddatasets.TeamFee) -> fees_[_team]
REF_669(uint256) -> REF_668.gen
TMP_501(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_669'] 
TMP_502(uint256) = TMP_501 / 100
_gen(uint256) := TMP_502(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_503(uint256) = _eth / 100
_air(uint256) := TMP_503(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_504(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(26)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '26'] 
TMP_506(uint256) = TMP_505 / 100
REF_675(F3Ddatasets.TeamFee) -> fees_[_team]
REF_676(uint256) -> REF_675.p3d
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_676'] 
TMP_508(uint256) = TMP_507 / 100
TMP_509(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_506', 'TMP_508'] 
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_509'] 
_eth(uint256) := TMP_510(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_511(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_511(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_512(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_512(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_513(bool) = _dust > 0
CONDITION TMP_513"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_514(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_679(F3Ddatasets.Round) -> round_[_rID]
REF_680(uint256) -> REF_679.pot
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_683(F3Ddatasets.Round) -> round_[_rID]
REF_684(uint256) -> REF_683.pot
TMP_516(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_515', 'REF_684'] 
REF_680(uint256) (->round_) := TMP_516(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_685(uint256) -> _eventData_.genAmount
REF_687(uint256) -> _eventData_.genAmount
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_687'] 
REF_685(uint256) (->_eventData_) := TMP_517(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_688(uint256) -> _eventData_.potAmount
REF_688(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 993.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_548(F3Ddatasets.Round) -> round_[_rID]
REF_549(uint256) -> REF_548.plyr
_winPID(uint256) := REF_549(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_550(F3Ddatasets.Round) -> round_[_rID]
REF_551(uint256) -> REF_550.team
_winTID(uint256) := REF_551(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_552(F3Ddatasets.Round) -> round_[_rID]
REF_553(uint256) -> REF_552.pot
_pot(uint256) := REF_553(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_420(uint256) = TMP_419 / 100
_win(uint256) := TMP_420(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 20)

IRs:
TMP_421(uint256) = _pot / 20
_com(uint256) := TMP_421(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_556(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_557(uint256) -> REF_556.gen
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_557'] 
TMP_423(uint256) = TMP_422 / 100
_gen(uint256) := TMP_423(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_559(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_560(uint256) -> REF_559.p3d
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_560'] 
TMP_425(uint256) = TMP_424 / 100
_p3d(uint256) := TMP_425(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_426', '_com'] 
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_427', '_gen'] 
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_428', '_p3d'] 
_res(uint256) := TMP_429(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_566(F3Ddatasets.Round) -> round_[_rID]
REF_567(uint256) -> REF_566.keys
TMP_431(uint256) = TMP_430 / REF_567
_ppt(uint256) := TMP_431(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_570(F3Ddatasets.Round) -> round_[_rID]
REF_571(uint256) -> REF_570.keys
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_571'] 
TMP_433(uint256) = TMP_432 / 1000000000000000000
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_433'] 
_dust(uint256) := TMP_434(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_435(bool) = _dust > 0
CONDITION TMP_435"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_436(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_437(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_574(F3Ddatasets.Player) -> plyr_[_winPID]
REF_575(uint256) -> REF_574.win
REF_577(F3Ddatasets.Player) -> plyr_[_winPID]
REF_578(uint256) -> REF_577.win
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_578'] 
REF_575(uint256) (->plyr_) := TMP_438(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
teamWallet.transfer(_com)

IRs:
Transfer dest:teamWallet value:_com"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_580(F3Ddatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.mask
REF_583(F3Ddatasets.Round) -> round_[_rID]
REF_584(uint256) -> REF_583.mask
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_584'] 
REF_581(uint256) (->round_) := TMP_440(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_585(uint256) -> _eventData_.compressedData
REF_586(uint256) -> _eventData_.compressedData
REF_587(F3Ddatasets.Round) -> round_[_rID]
REF_588(uint256) -> REF_587.end
TMP_441(uint256) = REF_588 * 1000000
TMP_442(uint256) = REF_586 + TMP_441
REF_585(uint256) (->_eventData_) := TMP_442(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_589(uint256) -> _eventData_.compressedIDs
REF_590(uint256) -> _eventData_.compressedIDs
TMP_443(uint256) = _winPID * 100000000000000000000000000
TMP_444(uint256) = REF_590 + TMP_443
TMP_445(uint256) = _winTID * 100000000000000000
TMP_446(uint256) = TMP_444 + TMP_445
REF_589(uint256) (->_eventData_) := TMP_446(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_591(address) -> _eventData_.winnerAddr
REF_592(F3Ddatasets.Player) -> plyr_[_winPID]
REF_593(address) -> REF_592.addr
REF_591(address) (->_eventData_) := REF_593(address)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_594(bytes32) -> _eventData_.winnerName
REF_595(F3Ddatasets.Player) -> plyr_[_winPID]
REF_596(bytes32) -> REF_595.name
REF_594(bytes32) (->_eventData_) := REF_596(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_597(uint256) -> _eventData_.amountWon
REF_597(uint256) (->_eventData_) := _win(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_598(uint256) -> _eventData_.genAmount
REF_598(uint256) (->_eventData_) := _gen(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_599(uint256) -> _eventData_.P3DAmount
REF_599(uint256) (->_eventData_) := _p3d(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_600(uint256) -> _eventData_.newPot
REF_600(uint256) (->_eventData_) := _res(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
rID_ ++

IRs:
TMP_447(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_rID ++

IRs:
TMP_448(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_601(F3Ddatasets.Round) -> round_[_rID]
REF_602(uint256) -> REF_601.strt
REF_602(uint256) (->round_) := now(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(uint256) -> REF_603.end
TMP_449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_449', 'rndGap_'] 
REF_604(uint256) (->round_) := TMP_450(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_607(F3Ddatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.pot
REF_608(uint256) (->round_) := _res(uint256)"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 993.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_729(uint256) -> _eventData_.compressedData
REF_730(uint256) -> _eventData_.compressedData
TMP_534(uint256) = now * 1000000000000000000
TMP_535(uint256) = REF_730 + TMP_534
TMP_536(uint256) = _team * 100000000000000000000000000000
TMP_537(uint256) = TMP_535 + TMP_536
REF_729(uint256) (->_eventData_) := TMP_537(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_731(uint256) -> _eventData_.compressedIDs
REF_732(uint256) -> _eventData_.compressedIDs
TMP_538(uint256) = REF_732 + _pID
TMP_539(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_540(uint256) = TMP_538 + TMP_539
REF_731(uint256) (->_eventData_) := TMP_540(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_734(uint256) -> _eventData_.compressedData
REF_735(uint256) -> _eventData_.compressedIDs
REF_736(F3Ddatasets.Player) -> plyr_[_pID]
REF_737(bytes32) -> REF_736.name
REF_738(address) -> _eventData_.winnerAddr
REF_739(bytes32) -> _eventData_.winnerName
REF_740(uint256) -> _eventData_.amountWon
REF_741(uint256) -> _eventData_.newPot
REF_742(uint256) -> _eventData_.P3DAmount
REF_743(uint256) -> _eventData_.genAmount
REF_744(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_734,REF_735,REF_737,msg.sender,_eth,_keys,REF_738,REF_739,REF_740,REF_741,REF_742,REF_743,REF_744,airDropPot_)"];
}
// Function: 993.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_136(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_136(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_67(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_67(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_68(F3Ddatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_69,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 993.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_180(F3Ddatasets.Round) -> round_[_rID]
REF_181(uint256) -> REF_180.strt
TMP_231(uint256) = REF_181 + rndGap_
TMP_232(bool) = _now > TMP_231
REF_182(F3Ddatasets.Round) -> round_[_rID]
REF_183(uint256) -> REF_182.end
TMP_233(bool) = _now <= REF_183
REF_184(F3Ddatasets.Round) -> round_[_rID]
REF_185(uint256) -> REF_184.end
TMP_234(bool) = _now > REF_185
REF_186(F3Ddatasets.Round) -> round_[_rID]
REF_187(uint256) -> REF_186.plyr
TMP_235(bool) = REF_187 == 0
TMP_236(bool) = TMP_234 && TMP_235
TMP_237(bool) = TMP_233 || TMP_236
TMP_238(bool) = TMP_232 && TMP_237
CONDITION TMP_238"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_188(F3Ddatasets.Round) -> round_[_rID]
REF_189(uint256) -> REF_188.keys
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_189', '1000000000000000000'] 
TMP_240(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_239', '1000000000000000000'] 
RETURN TMP_240"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 993.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_262(F3Ddatasets.Round) -> round_[_rID]
REF_263(uint256) -> REF_262.ico
REF_264(F3Ddatasets.Round) -> round_[_rID]
REF_265(uint256) -> REF_264.keys
REF_266(F3Ddatasets.Round) -> round_[_rID]
REF_267(uint256) -> REF_266.end
REF_268(F3Ddatasets.Round) -> round_[_rID]
REF_269(uint256) -> REF_268.strt
REF_270(F3Ddatasets.Round) -> round_[_rID]
REF_271(uint256) -> REF_270.pot
REF_272(F3Ddatasets.Round) -> round_[_rID]
REF_273(uint256) -> REF_272.team
REF_274(F3Ddatasets.Round) -> round_[_rID]
REF_275(uint256) -> REF_274.plyr
TMP_271(uint256) = REF_275 * 10
TMP_272(uint256) = REF_273 + TMP_271
REF_276(F3Ddatasets.Round) -> round_[_rID]
REF_277(uint256) -> REF_276.plyr
REF_278(F3Ddatasets.Player) -> plyr_[REF_277]
REF_279(address) -> REF_278.addr
REF_280(F3Ddatasets.Round) -> round_[_rID]
REF_281(uint256) -> REF_280.plyr
REF_282(F3Ddatasets.Player) -> plyr_[REF_281]
REF_283(bytes32) -> REF_282.name
REF_284(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_285(uint256) -> REF_284[0]
REF_286(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_287(uint256) -> REF_286[1]
REF_288(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_289(uint256) -> REF_288[2]
REF_290(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_291(uint256) -> REF_290[3]
TMP_273(uint256) = airDropPot_ * 1000
TMP_274(uint256) = airDropTracker_ + TMP_273
RETURN REF_263,_rID,REF_265,REF_267,REF_269,REF_271,TMP_272,REF_279,REF_283,REF_285,REF_287,REF_289,REF_291,TMP_274"];
}
// Function: 993.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_275 = CONVERT 0 to address
TMP_276(bool) = _addr == TMP_275
CONDITION TMP_276"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_277(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_292(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_292(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_293(F3Ddatasets.Player) -> plyr_[_pID]
REF_294(bytes32) -> REF_293.name
REF_295(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_296(F3Ddatasets.PlayerRounds) -> REF_295[_rID]
REF_297(uint256) -> REF_296.keys
REF_298(F3Ddatasets.Player) -> plyr_[_pID]
REF_299(uint256) -> REF_298.win
REF_300(F3Ddatasets.Player) -> plyr_[_pID]
REF_301(uint256) -> REF_300.gen
REF_303(F3Ddatasets.Player) -> plyr_[_pID]
REF_304(uint256) -> REF_303.lrnd
TMP_278(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_304)
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_301', 'TMP_278'] 
REF_305(F3Ddatasets.Player) -> plyr_[_pID]
REF_306(uint256) -> REF_305.aff
REF_307(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_308(F3Ddatasets.PlayerRounds) -> REF_307[_rID]
REF_309(uint256) -> REF_308.eth
RETURN _pID,REF_294,REF_297,REF_299,TMP_279,REF_306,REF_309"];
}
// Function: 993.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_202(F3Ddatasets.Round) -> round_[_rID]
REF_203(uint256) -> REF_202.end
TMP_247(bool) = now > REF_203
REF_204(F3Ddatasets.Round) -> round_[_rID]
REF_205(bool) -> REF_204.ended
TMP_248(bool) = REF_205 == False
TMP_249(bool) = TMP_247 && TMP_248
REF_206(F3Ddatasets.Round) -> round_[_rID]
REF_207(uint256) -> REF_206.plyr
TMP_250(bool) = REF_207 != 0
TMP_251(bool) = TMP_249 && TMP_250
CONDITION TMP_251"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_208(F3Ddatasets.Round) -> round_[_rID]
REF_209(uint256) -> REF_208.plyr
TMP_252(bool) = REF_209 == _pID
CONDITION TMP_252"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_210(F3Ddatasets.Player) -> plyr_[_pID]
REF_211(uint256) -> REF_210.win
REF_213(F3Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.pot
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_214', '48'] 
TMP_254(uint256) = TMP_253 / 100
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_211', 'TMP_254'] 
REF_216(F3Ddatasets.Player) -> plyr_[_pID]
REF_217(uint256) -> REF_216.gen
TMP_256(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_220(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_221(F3Ddatasets.PlayerRounds) -> REF_220[_rID]
REF_222(uint256) -> REF_221.mask
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_256', 'REF_222'] 
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_217', 'TMP_257'] 
REF_223(F3Ddatasets.Player) -> plyr_[_pID]
REF_224(uint256) -> REF_223.aff
RETURN TMP_255,TMP_258,REF_224"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_225(F3Ddatasets.Player) -> plyr_[_pID]
REF_226(uint256) -> REF_225.win
REF_227(F3Ddatasets.Player) -> plyr_[_pID]
REF_228(uint256) -> REF_227.gen
TMP_259(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_231(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_232(F3Ddatasets.PlayerRounds) -> REF_231[_rID]
REF_233(uint256) -> REF_232.mask
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_259', 'REF_233'] 
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_228', 'TMP_260'] 
REF_234(F3Ddatasets.Player) -> plyr_[_pID]
REF_235(uint256) -> REF_234.aff
RETURN REF_226,TMP_261,REF_235"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_236(F3Ddatasets.Player) -> plyr_[_pID]
REF_237(uint256) -> REF_236.win
REF_238(F3Ddatasets.Player) -> plyr_[_pID]
REF_239(uint256) -> REF_238.gen
REF_241(F3Ddatasets.Player) -> plyr_[_pID]
REF_242(uint256) -> REF_241.lrnd
TMP_262(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_242)
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_239', 'TMP_262'] 
REF_243(F3Ddatasets.Player) -> plyr_[_pID]
REF_244(uint256) -> REF_243.aff
RETURN REF_237,TMP_263,REF_244"];
}
// Function: 993.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_245(F3Ddatasets.Round) -> round_[_rID]
REF_246(uint256) -> REF_245.mask
REF_248(F3Ddatasets.Round) -> round_[_rID]
REF_249(uint256) -> REF_248.pot
REF_251(F3Ddatasets.Round) -> round_[_rID]
REF_252(uint256) -> REF_251.team
REF_253(F3Ddatasets.PotSplit) -> potSplit_[REF_252]
REF_254(uint256) -> REF_253.gen
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_249', 'REF_254'] 
TMP_265(uint256) = TMP_264 / 100
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_265', '1000000000000000000'] 
REF_256(F3Ddatasets.Round) -> round_[_rID]
REF_257(uint256) -> REF_256.keys
TMP_267(uint256) = TMP_266 / REF_257
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_246', 'TMP_267'] 
REF_259(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_260(F3Ddatasets.PlayerRounds) -> REF_259[_rID]
REF_261(uint256) -> REF_260.keys
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_268', 'REF_261'] 
TMP_270(uint256) = TMP_269 / 1000000000000000000
RETURN TMP_270"];
}
// Function: 993.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_192(F3Ddatasets.Round) -> round_[_rID]
REF_193(uint256) -> REF_192.end
TMP_241(bool) = _now < REF_193
CONDITION TMP_241"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_194(F3Ddatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.strt
TMP_242(uint256) = REF_195 + rndGap_
TMP_243(bool) = _now > TMP_242
CONDITION TMP_243"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_196(F3Ddatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.end
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_197', '_now'] 
RETURN TMP_244"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_199(F3Ddatasets.Round) -> round_[_rID]
REF_200(uint256) -> REF_199.strt
TMP_245(uint256) = REF_200 + rndGap_
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_245', '_now'] 
RETURN TMP_246"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 993.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_487(F3Ddatasets.Round) -> round_[_rID]
REF_488(uint256) -> REF_487.strt
TMP_380(uint256) = REF_488 + rndGap_
TMP_381(bool) = _now > TMP_380
REF_489(F3Ddatasets.Round) -> round_[_rID]
REF_490(uint256) -> REF_489.end
TMP_382(bool) = _now <= REF_490
REF_491(F3Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.end
TMP_383(bool) = _now > REF_492
REF_493(F3Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.plyr
TMP_384(bool) = REF_494 == 0
TMP_385(bool) = TMP_383 && TMP_384
TMP_386(bool) = TMP_382 || TMP_385
TMP_387(bool) = TMP_381 && TMP_386
CONDITION TMP_387"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_495(F3Ddatasets.Round) -> round_[_rID]
REF_496(uint256) -> REF_495.keys
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_496', '_keys'] 
TMP_389(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_388', '_keys'] 
RETURN TMP_389"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_390"];
}
// Function: 993.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_550(bool) = activated_ == True
TMP_551(None) = SOLIDITY_CALL require(bool,string)(TMP_550,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 993.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_552(bool) = _addr == tx.origin
TMP_553(None) = SOLIDITY_CALL require(bool)(TMP_552)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_554(bool) = _codeLength == 0
TMP_555(None) = SOLIDITY_CALL require(bool,string)(TMP_554,sorry humans only)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 993.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_556(bool) = _eth >= 1000000000
TMP_557(None) = SOLIDITY_CALL require(bool,string)(TMP_556,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_558(bool) = _eth <= 100000000000000000000000
TMP_559(None) = SOLIDITY_CALL require(bool,string)(TMP_558,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 993.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_540(F3Ddatasets.Player) -> plyr_[_pID]
REF_541(uint256) -> REF_540.lrnd
TMP_416(bool) = REF_541 != 0
CONDITION TMP_416"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_542(F3Ddatasets.Player) -> plyr_[_pID]
REF_543(uint256) -> REF_542.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_543)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_544(F3Ddatasets.Player) -> plyr_[_pID]
REF_545(uint256) -> REF_544.lrnd
REF_545(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_546(uint256) -> _eventData_.compressedData
REF_547(uint256) -> _eventData_.compressedData
TMP_418(uint256) = REF_547 + 10
REF_546(uint256) (->_eventData_) := TMP_418(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 993.sol-FoMo3Dlong-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0xE9675cdAf47bab3Eef5B1f1c2b7f8d41cDcf9b29 || msg.sender == 0x0020116131498D968DeBCF75E5A11F77e7e1CadE,only team just can activate)

IRs:
TMP_560(bool) = msg.sender == 1332499915194238730800561860540191085893243607849
TMP_561(bool) = msg.sender == 715137828117492407787967409799543577372642014
TMP_562(bool) = TMP_560 || TMP_561
TMP_563(None) = SOLIDITY_CALL require(bool,string)(TMP_562,only team just can activate)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 993.sol-FoMo3Dlong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_498(uint256) = rID_ + 1
_rID(uint256) := TMP_498(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_661(F3Ddatasets.Round) -> round_[_rID]
REF_662(uint256) -> REF_661.pot
REF_663(F3Ddatasets.Round) -> round_[_rID]
REF_664(uint256) -> REF_663.pot
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_664', 'msg.value'] 
REF_662(uint256) (->round_) := TMP_499(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 993.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_344(F3Ddatasets.Round) -> round_[_rID]
REF_345(uint256) -> REF_344.strt
TMP_298(uint256) = REF_345 + rndGap_
TMP_299(bool) = _now > TMP_298
REF_346(F3Ddatasets.Round) -> round_[_rID]
REF_347(uint256) -> REF_346.end
TMP_300(bool) = _now <= REF_347
REF_348(F3Ddatasets.Round) -> round_[_rID]
REF_349(uint256) -> REF_348.end
TMP_301(bool) = _now > REF_349
REF_350(F3Ddatasets.Round) -> round_[_rID]
REF_351(uint256) -> REF_350.plyr
TMP_302(bool) = REF_351 == 0
TMP_303(bool) = TMP_301 && TMP_302
TMP_304(bool) = TMP_300 || TMP_303
TMP_305(bool) = TMP_299 && TMP_304
CONDITION TMP_305"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_352(F3Ddatasets.Player) -> plyr_[_pID]
REF_353(uint256) -> REF_352.gen
TMP_306(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_306', '_eth'] 
REF_353(uint256) (->plyr_) := TMP_307(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_355(F3Ddatasets.Round) -> round_[_rID]
REF_356(uint256) -> REF_355.end
TMP_309(bool) = _now > REF_356
REF_357(F3Ddatasets.Round) -> round_[_rID]
REF_358(bool) -> REF_357.ended
TMP_310(bool) = REF_358 == False
TMP_311(bool) = TMP_309 && TMP_310
CONDITION TMP_311"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_359(F3Ddatasets.Round) -> round_[_rID]
REF_360(bool) -> REF_359.ended
REF_360(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_312(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_312(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_361(uint256) -> _eventData_.compressedData
REF_362(uint256) -> _eventData_.compressedData
TMP_313(uint256) = _now * 1000000000000000000
TMP_314(uint256) = REF_362 + TMP_313
REF_361(uint256) (->_eventData_) := TMP_314(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_363(uint256) -> _eventData_.compressedIDs
REF_364(uint256) -> _eventData_.compressedIDs
TMP_315(uint256) = REF_364 + _pID
REF_363(uint256) (->_eventData_) := TMP_315(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_366(F3Ddatasets.Player) -> plyr_[_pID]
REF_367(bytes32) -> REF_366.name
REF_368(uint256) -> _eventData_.compressedData
REF_369(uint256) -> _eventData_.compressedIDs
REF_370(address) -> _eventData_.winnerAddr
REF_371(bytes32) -> _eventData_.winnerName
REF_372(uint256) -> _eventData_.amountWon
REF_373(uint256) -> _eventData_.newPot
REF_374(uint256) -> _eventData_.P3DAmount
REF_375(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_367,REF_368,REF_369,REF_370,REF_371,REF_372,REF_373,REF_374,REF_375)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 993.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_102(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_102(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_181 = CONVERT 0 to address
TMP_182(bool) = _affCode == TMP_181
TMP_183(bool) = _affCode == msg.sender
TMP_184(bool) = TMP_182 || TMP_183
CONDITION TMP_184"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_103(F3Ddatasets.Player) -> plyr_[_pID]
REF_104(uint256) -> REF_103.laff
_affID(uint256) := REF_104(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_105(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_105(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_106(F3Ddatasets.Player) -> plyr_[_pID]
REF_107(uint256) -> REF_106.laff
TMP_185(bool) = _affID != REF_107
CONDITION TMP_185"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_108(F3Ddatasets.Player) -> plyr_[_pID]
REF_109(uint256) -> REF_108.laff
REF_109(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_186(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_186(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 993.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_95(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_95(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_172(bool) = _affCode == 0
TMP_173(bool) = _affCode == _pID
TMP_174(bool) = TMP_172 || TMP_173
CONDITION TMP_174"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_96(F3Ddatasets.Player) -> plyr_[_pID]
REF_97(uint256) -> REF_96.laff
_affCode(uint256) := REF_97(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_98(F3Ddatasets.Player) -> plyr_[_pID]
REF_99(uint256) -> REF_98.laff
TMP_175(bool) = _affCode != REF_99
CONDITION TMP_175"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_100(F3Ddatasets.Player) -> plyr_[_pID]
REF_101(uint256) -> REF_100.laff
REF_101(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_176(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_176(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 993.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_110(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_110(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_191(bool) = _affCode == 
REF_111(F3Ddatasets.Player) -> plyr_[_pID]
REF_112(bytes32) -> REF_111.name
TMP_192(bool) = _affCode == REF_112
TMP_193(bool) = TMP_191 || TMP_192
CONDITION TMP_193"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_113(F3Ddatasets.Player) -> plyr_[_pID]
REF_114(uint256) -> REF_113.laff
_affID(uint256) := REF_114(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_115(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_115(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_116(F3Ddatasets.Player) -> plyr_[_pID]
REF_117(uint256) -> REF_116.laff
TMP_194(bool) = _affID != REF_117
CONDITION TMP_194"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_118(F3Ddatasets.Player) -> plyr_[_pID]
REF_119(uint256) -> REF_118.laff
REF_119(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_195(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_195(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 993.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_391 = CONVERT PlayerBook to address
TMP_392(bool) = msg.sender == TMP_391
TMP_393(None) = SOLIDITY_CALL require(bool,string)(TMP_392,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_500(uint256) -> pIDxAddr_[_addr]
TMP_394(bool) = REF_500 != _pID
CONDITION TMP_394"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_501(uint256) -> pIDxAddr_[_addr]
REF_501(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_502(uint256) -> pIDxName_[_name]
TMP_395(bool) = REF_502 != _pID
CONDITION TMP_395"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_503(uint256) -> pIDxName_[_name]
REF_503(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_504(F3Ddatasets.Player) -> plyr_[_pID]
REF_505(address) -> REF_504.addr
TMP_396(bool) = REF_505 != _addr
CONDITION TMP_396"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_506(F3Ddatasets.Player) -> plyr_[_pID]
REF_507(address) -> REF_506.addr
REF_507(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_508(F3Ddatasets.Player) -> plyr_[_pID]
REF_509(bytes32) -> REF_508.name
TMP_397(bool) = REF_509 != _name
CONDITION TMP_397"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_510(F3Ddatasets.Player) -> plyr_[_pID]
REF_511(bytes32) -> REF_510.name
REF_511(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_512(F3Ddatasets.Player) -> plyr_[_pID]
REF_513(uint256) -> REF_512.laff
TMP_398(bool) = REF_513 != _laff
CONDITION TMP_398"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_514(F3Ddatasets.Player) -> plyr_[_pID]
REF_515(uint256) -> REF_514.laff
REF_515(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_516(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_517(bool) -> REF_516[_name]
TMP_399(bool) = REF_517 == False
CONDITION TMP_399"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_518(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_519(bool) -> REF_518[_name]
REF_519(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 993.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_400 = CONVERT PlayerBook to address
TMP_401(bool) = msg.sender == TMP_400
TMP_402(None) = SOLIDITY_CALL require(bool,string)(TMP_401,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_520(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_521(bool) -> REF_520[_name]
TMP_403(bool) = REF_521 == False
CONDITION TMP_403"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_522(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_523(bool) -> REF_522[_name]
REF_523(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 993.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_219(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_219(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_156(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_156(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_158(F3Ddatasets.Player) -> plyr_[_affID]
REF_159(address) -> REF_158.addr
REF_160(F3Ddatasets.Player) -> plyr_[_affID]
REF_161(bytes32) -> REF_160.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_159,REF_161,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 993.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_223(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_223(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_165(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_165(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_167(F3Ddatasets.Player) -> plyr_[_affID]
REF_168(address) -> REF_167.addr
REF_169(F3Ddatasets.Player) -> plyr_[_affID]
REF_170(bytes32) -> REF_169.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_168,REF_170,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 993.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_227(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_227(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_174(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_174(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_176(F3Ddatasets.Player) -> plyr_[_affID]
REF_177(address) -> REF_176.addr
REF_178(F3Ddatasets.Player) -> plyr_[_affID]
REF_179(bytes32) -> REF_178.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_177,REF_179,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 993.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x19dB4339c0ad1BE41FE497795FF2c5263962a573)

IRs:
TMP_549 = CONVERT 147614488644437145250023770792558531413335516531 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_549(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Peach Will

IRs:
name(string) := Peach Will(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = PW

IRs:
symbol(string) := PW(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 36000

IRs:
rndInit_(uint256) := 36000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 88

IRs:
rndInc_(uint256) := 88(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 36000

IRs:
rndMax_(uint256) := 36000(uint256)"];
}
// Function: 993.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
teamWallet = 0xE9675cdAf47bab3Eef5B1f1c2b7f8d41cDcf9b29

IRs:
teamWallet(address) := 1332499915194238730800561860540191085893243607849(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 3600

IRs:
rndExtra_(uint256) := 3600(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 15

IRs:
rndGap_(uint256) := 15(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 993.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_451(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_451(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_452(bool) = _earnings > 0
CONDITION TMP_452"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_609(F3Ddatasets.Player) -> plyr_[_pID]
REF_610(uint256) -> REF_609.gen
REF_612(F3Ddatasets.Player) -> plyr_[_pID]
REF_613(uint256) -> REF_612.gen
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_613'] 
REF_610(uint256) (->plyr_) := TMP_453(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_614(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_615(F3Ddatasets.PlayerRounds) -> REF_614[_rIDlast]
REF_616(uint256) -> REF_615.mask
REF_618(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_619(F3Ddatasets.PlayerRounds) -> REF_618[_rIDlast]
REF_620(uint256) -> REF_619.mask
TMP_454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_620'] 
REF_616(uint256) (->plyrRnds_) := TMP_454(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 993.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_518(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_690(F3Ddatasets.Round) -> round_[_rID]
REF_691(uint256) -> REF_690.keys
TMP_519(uint256) = TMP_518 / REF_691
_ppt(uint256) := TMP_519(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_692(F3Ddatasets.Round) -> round_[_rID]
REF_693(uint256) -> REF_692.mask
REF_695(F3Ddatasets.Round) -> round_[_rID]
REF_696(uint256) -> REF_695.mask
TMP_520(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_696'] 
REF_693(uint256) (->round_) := TMP_520(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_521(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_522(uint256) = TMP_521 / 1000000000000000000
_pearn(uint256) := TMP_522(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_698(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_699(F3Ddatasets.PlayerRounds) -> REF_698[_rID]
REF_700(uint256) -> REF_699.mask
REF_701(F3Ddatasets.Round) -> round_[_rID]
REF_702(uint256) -> REF_701.mask
TMP_523(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_702', '_keys'] 
TMP_524(uint256) = TMP_523 / 1000000000000000000
TMP_525(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_524', '_pearn'] 
REF_706(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_707(F3Ddatasets.PlayerRounds) -> REF_706[_rID]
REF_708(uint256) -> REF_707.mask
TMP_526(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_525', 'REF_708'] 
REF_700(uint256) (->plyrRnds_) := TMP_526(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_711(F3Ddatasets.Round) -> round_[_rID]
REF_712(uint256) -> REF_711.keys
TMP_527(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_712'] 
TMP_528(uint256) = TMP_527 / 1000000000000000000
TMP_529(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_528'] 
RETURN TMP_529"];
}
// Function: 993.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_621(F3Ddatasets.Round) -> round_[_rID]
REF_622(uint256) -> REF_621.end
TMP_455(bool) = _now > REF_622
REF_623(F3Ddatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.plyr
TMP_456(bool) = REF_624 == 0
TMP_457(bool) = TMP_455 && TMP_456
CONDITION TMP_457"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_458(uint256) = _keys / 1000000000000000000
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_458', 'rndInc_'] 
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_459', '_now'] 
_newTime(uint256) := TMP_460(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_461(uint256) = _keys / 1000000000000000000
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_461', 'rndInc_'] 
REF_629(F3Ddatasets.Round) -> round_[_rID]
REF_630(uint256) -> REF_629.end
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_462', 'REF_630'] 
_newTime(uint256) := TMP_463(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_465(bool) = _newTime < TMP_464
CONDITION TMP_465"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_632(F3Ddatasets.Round) -> round_[_rID]
REF_633(uint256) -> REF_632.end
REF_633(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_634(F3Ddatasets.Round) -> round_[_rID]
REF_635(uint256) -> REF_634.end
TMP_466(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_635(uint256) (->round_) := TMP_466(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 993.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_413(bool) = _team < 0
TMP_414(bool) = _team > 3
TMP_415(bool) = TMP_413 || TMP_414
CONDITION TMP_415"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 993.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_120(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_120(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_121(F3Ddatasets.Round) -> round_[_rID]
REF_122(uint256) -> REF_121.end
TMP_200(bool) = _now > REF_122
REF_123(F3Ddatasets.Round) -> round_[_rID]
REF_124(bool) -> REF_123.ended
TMP_201(bool) = REF_124 == False
TMP_202(bool) = TMP_200 && TMP_201
REF_125(F3Ddatasets.Round) -> round_[_rID]
REF_126(uint256) -> REF_125.plyr
TMP_203(bool) = REF_126 != 0
TMP_204(bool) = TMP_202 && TMP_203
CONDITION TMP_204"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_127(F3Ddatasets.Round) -> round_[_rID]
REF_128(bool) -> REF_127.ended
REF_128(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_205(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_205(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_206(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_206(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_207(bool) = _eth > 0
CONDITION TMP_207"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_129(F3Ddatasets.Player) -> plyr_[_pID]
REF_130(address) -> REF_129.addr
Transfer dest:REF_130 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_132(uint256) -> _eventData_.compressedData
REF_133(uint256) -> _eventData_.compressedData
TMP_209(uint256) = _now * 1000000000000000000
TMP_210(uint256) = REF_133 + TMP_209
REF_132(uint256) (->_eventData_) := TMP_210(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_134(uint256) -> _eventData_.compressedIDs
REF_135(uint256) -> _eventData_.compressedIDs
TMP_211(uint256) = REF_135 + _pID
REF_134(uint256) (->_eventData_) := TMP_211(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_137(F3Ddatasets.Player) -> plyr_[_pID]
REF_138(bytes32) -> REF_137.name
REF_139(uint256) -> _eventData_.compressedData
REF_140(uint256) -> _eventData_.compressedIDs
REF_141(address) -> _eventData_.winnerAddr
REF_142(bytes32) -> _eventData_.winnerName
REF_143(uint256) -> _eventData_.amountWon
REF_144(uint256) -> _eventData_.newPot
REF_145(uint256) -> _eventData_.P3DAmount
REF_146(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_138,_eth,REF_139,REF_140,REF_141,REF_142,REF_143,REF_144,REF_145,REF_146)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_213(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_213(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_214(bool) = _eth > 0
CONDITION TMP_214"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_147(F3Ddatasets.Player) -> plyr_[_pID]
REF_148(address) -> REF_147.addr
Transfer dest:REF_148 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_151(F3Ddatasets.Player) -> plyr_[_pID]
REF_152(bytes32) -> REF_151.name
Emit onWithdraw(_pID,msg.sender,REF_152,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
}
// Function: 993.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_713(F3Ddatasets.Player) -> plyr_[_pID]
REF_714(uint256) -> REF_713.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_714)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_715(F3Ddatasets.Player) -> plyr_[_pID]
REF_716(uint256) -> REF_715.win
REF_718(F3Ddatasets.Player) -> plyr_[_pID]
REF_719(uint256) -> REF_718.gen
TMP_531(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_716', 'REF_719'] 
REF_721(F3Ddatasets.Player) -> plyr_[_pID]
REF_722(uint256) -> REF_721.aff
TMP_532(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_531', 'REF_722'] 
_earnings(uint256) := TMP_532(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_533(bool) = _earnings > 0
CONDITION TMP_533"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_723(F3Ddatasets.Player) -> plyr_[_pID]
REF_724(uint256) -> REF_723.win
REF_724(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_725(F3Ddatasets.Player) -> plyr_[_pID]
REF_726(uint256) -> REF_725.gen
REF_726(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_727(F3Ddatasets.Player) -> plyr_[_pID]
REF_728(uint256) -> REF_727.aff
REF_728(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 993.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_61 = CONVERT _input to bytes
_temp(bytes) := TMP_61(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_12 -> LENGTH _temp
_length(uint256) := REF_12(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_62(bool) = _length <= 32
TMP_63(bool) = _length > 0
TMP_64(bool) = TMP_62 && TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool,string)(TMP_64,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_13(None) -> _temp[0]
TMP_66(bool) = REF_13 != 32
TMP_67(uint256) = _length - 1
REF_14(None) -> _temp[TMP_67]
TMP_68(bool) = REF_14 != 32
TMP_69(bool) = TMP_66 && TMP_68
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_15(None) -> _temp[0]
TMP_71(bool) = REF_15 == 48
CONDITION TMP_71"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_16(None) -> _temp[1]
TMP_72(bool) = REF_16 != 120
TMP_73(None) = SOLIDITY_CALL require(bool,string)(TMP_72,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_17(None) -> _temp[1]
TMP_74(bool) = REF_17 != 88
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_76(bool) = i < _length
CONDITION TMP_76"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_18(None) -> _temp[i]
TMP_77(bool) = REF_18 > 64
REF_19(None) -> _temp[i]
TMP_78(bool) = REF_19 < 91
TMP_79(bool) = TMP_77 && TMP_78
CONDITION TMP_79"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_20(bytes1) -> _temp[i]
REF_21(None) -> _temp[i]
TMP_80 = CONVERT REF_21 to uint256
TMP_81(uint256) = TMP_80 + 32
TMP_82 = CONVERT TMP_81 to bytes1
REF_20(bytes1) (->_temp) := TMP_82(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_83(bool) = _hasNonNumber == False
CONDITION TMP_83"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_22(None) -> _temp[i]
TMP_84(bool) = REF_22 == 32
REF_23(None) -> _temp[i]
TMP_85(bool) = REF_23 > 96
REF_24(None) -> _temp[i]
TMP_86(bool) = REF_24 < 123
TMP_87(bool) = TMP_85 && TMP_86
TMP_88(bool) = TMP_84 || TMP_87
REF_25(None) -> _temp[i]
TMP_89(bool) = REF_25 > 47
REF_26(None) -> _temp[i]
TMP_90(bool) = REF_26 < 58
TMP_91(bool) = TMP_89 && TMP_90
TMP_92(bool) = TMP_88 || TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool,string)(TMP_92,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_27(None) -> _temp[i]
TMP_94(bool) = REF_27 == 32
CONDITION TMP_94"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_95(uint256) = i + 1
REF_28(None) -> _temp[TMP_95]
TMP_96(bool) = REF_28 != 32
TMP_97(None) = SOLIDITY_CALL require(bool,string)(TMP_96,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_98(bool) = _hasNonNumber == False
REF_29(None) -> _temp[i]
TMP_99(bool) = REF_29 < 48
REF_30(None) -> _temp[i]
TMP_100(bool) = REF_30 > 57
TMP_101(bool) = TMP_99 || TMP_100
TMP_102(bool) = TMP_98 && TMP_101
CONDITION TMP_102"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_103(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_104(bool) = _hasNonNumber == True
TMP_105(None) = SOLIDITY_CALL require(bool,string)(TMP_104,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 993.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 993.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 993.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 993.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 993.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 993.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 993.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 993.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 993.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 993.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 993.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 993.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_19(bool) = x == 0
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_20(bool) = y == 0
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_21(bool) = i < y
CONDITION TMP_21"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_22(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 993.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_18(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_18"];
}
// Function: 993.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_13(uint256) = TMP_12 / 2
z(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_14(bool) = z < y
CONDITION TMP_14"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_15(uint256) = x / z
TMP_16(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_15,z)
TMP_17(uint256) = TMP_16 / 2
z(uint256) := TMP_17(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 993.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 993.sol-UintCompressor-exponent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((10).pwr(_position))

IRs:
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.pwr(uint256,uint256), arguments:['10', '_position'] 
RETURN TMP_60"];
}
// Function: 993.sol-UintCompressor-extract(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_45(bool) = _end < 77
TMP_46(bool) = _start < 77
TMP_47(bool) = TMP_45 && TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_49(bool) = _end >= _start
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_51(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_51', '10'] 
_end(uint256) := TMP_52(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_53(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_53(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start)

IRs:
TMP_54(uint256) = _input / _start
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_54', '_start'] 
TMP_56(uint256) = _input / _end
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_56', '_end'] 
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_55', 'TMP_57'] 
TMP_59(uint256) = TMP_58 / _start
RETURN TMP_59"];
}
// Function: 993.sol-UintCompressor-insert(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_24(bool) = _end < 77
TMP_25(bool) = _start < 77
TMP_26(bool) = TMP_24 && TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_28(bool) = _end >= _start
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_30(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_30', '10'] 
_end(uint256) := TMP_31(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_32(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_32(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_include < (_end / _start))

IRs:
TMP_33(uint256) = _end / _start
TMP_34(bool) = _include < TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_include > 0

IRs:
TMP_36(bool) = _include > 0
CONDITION TMP_36"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_include = _include.mul(_start)

IRs:
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_include', '_start'] 
_include(uint256) := TMP_37(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)))

IRs:
TMP_38(uint256) = _var / _start
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_38', '_start'] 
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_var', 'TMP_39'] 
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_40', '_include'] 
TMP_42(uint256) = _var / _end
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_42', '_end'] 
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_41', 'TMP_43'] 
RETURN TMP_44"];
}
}
