digraph G {
// Function: 10726.sol-Main0003_setupSBSigners-execute(Main0003_setupSBSigners)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
signersToAdd = new address[](3)

IRs:
TMP_1(address[])  = new address[](3)
signersToAdd(address[]) = ['TMP_1(address[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
signersToAdd[0] = 0x9de3F6E7caCbb7e1c2489dFCe21abbB0ecEE6213

IRs:
REF_0(address) -> signersToAdd[0]
REF_0(address) (->signersToAdd) := 901395328676537049493449817322073376022221185555(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
signersToAdd[1] = 0xAE162e28575Ba898dc08D283f2Be10AE8b4114A2

IRs:
REF_1(address) -> signersToAdd[1]
REF_1(address) (->signersToAdd) := 993859031410282042937570937377075464194851148962(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
signersToAdd[2] = 0x53DBF6E8fe46307C7536eAbb0D90CADA3e732716

IRs:
REF_2(address) -> signersToAdd[2]
REF_2(address) (->signersToAdd) := 478751606082693580783441190469283463230494287638(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stabilityBoardProxy.addSigners(signersToAdd)

IRs:
HIGH_LEVEL_CALL, dest:stabilityBoardProxy(StabilityBoardProxy), function:addSigners, arguments:['signersToAdd']  "];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
signersToRemove = new address[](1)

IRs:
TMP_4(address[])  = new address[](1)
signersToRemove(address[]) = ['TMP_4(address[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
signersToRemove[0] = 0x7b534c2D0F9Ee973e0b6FE8D4000cA711A20f22e

IRs:
REF_4(address) -> signersToRemove[0]
REF_4(address) (->signersToRemove) := 704063462530011166245044610478314105101149598254(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
stabilityBoardProxy.removeSigners(signersToRemove)

IRs:
HIGH_LEVEL_CALL, dest:stabilityBoardProxy(StabilityBoardProxy), function:removeSigners, arguments:['signersToRemove']  "];
}
// Function: 10726.sol-Main0003_setupSBSigners-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
stabilityBoardProxy = StabilityBoardProxy(0x4686f017D456331ed2C1de66e134D8d05B24413D)

IRs:
TMP_6 = CONVERT 402638568871633841319262753991495580167681884477 to StabilityBoardProxy
stabilityBoardProxy(StabilityBoardProxy) := TMP_6(StabilityBoardProxy)"];
}
// Function: 10726.sol-MultiSig-addSigners(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),only callable via MultiSig)

IRs:
TMP_44 = CONVERT this to address
TMP_45(bool) = msg.sender == TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,only callable via MultiSig)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < signers.length

IRs:
REF_51 -> LENGTH signers
TMP_47(bool) = i < REF_51
CONDITION TMP_47"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
! isSigner[signers[i]]

IRs:
REF_52(address) -> signers[i]
REF_53(bool) -> isSigner[REF_52]
TMP_48 = UnaryType.BANG REF_53 
CONDITION TMP_48"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(signers[i] != address(0),new signer must not be 0x0)

IRs:
REF_54(address) -> signers[i]
TMP_49 = CONVERT 0 to address
TMP_50(bool) = REF_54 != TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,new signer must not be 0x0)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
activeSignersCount ++

IRs:
TMP_52(uint256) := activeSignersCount(uint256)
activeSignersCount(uint256) = activeSignersCount + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allSigners.push(signers[i])

IRs:
REF_56(address) -> signers[i]
REF_57 -> LENGTH allSigners
TMP_54(uint256) := REF_57(uint256)
TMP_55(uint256) = TMP_54 + 1
REF_57(uint256) (->allSigners) := TMP_55(uint256)
REF_58(address) -> allSigners[TMP_54]
REF_58(address) (->allSigners) := REF_56(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isSigner[signers[i]] = true

IRs:
REF_59(address) -> signers[i]
REF_60(bool) -> isSigner[REF_59]
REF_60(bool) (->isSigner) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
SignerAdded(signers[i])

IRs:
REF_61(address) -> signers[i]
Emit SignerAdded(REF_61)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_57(uint256) := i(uint256)
i(uint256) = i + 1"];
13->5;
}
// Function: 10726.sol-MultiSig-cancelScript(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),only callable via MultiSig)

IRs:
TMP_36 = CONVERT this to address
TMP_37(bool) = msg.sender == TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,only callable via MultiSig)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
script = scripts[scriptAddress]

IRs:
REF_44(MultiSig.Script) -> scripts[scriptAddress]
script(MultiSig.Script) := REF_44(MultiSig.Script)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(script.state == ScriptState.Approved || script.state == ScriptState.New,script state must be New or Approved)

IRs:
REF_45(MultiSig.ScriptState) -> script.state
REF_46(MultiSig.ScriptState) -> ScriptState.Approved
TMP_39(bool) = REF_45 == REF_46
REF_47(MultiSig.ScriptState) -> script.state
REF_48(MultiSig.ScriptState) -> ScriptState.New
TMP_40(bool) = REF_47 == REF_48
TMP_41(bool) = TMP_39 || TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool,string)(TMP_41,script state must be New or Approved)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
script.state = ScriptState.Cancelled

IRs:
REF_49(MultiSig.ScriptState) -> script.state
REF_50(MultiSig.ScriptState) -> ScriptState.Cancelled
REF_49(MultiSig.ScriptState) (->script) := REF_50(MultiSig.ScriptState)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ScriptCancelled(scriptAddress)

IRs:
Emit ScriptCancelled(scriptAddress)"];
}
// Function: 10726.sol-MultiSig-checkQuorum(uint256)
digraph{
}
// Function: 10726.sol-MultiSig-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isSigner[msg.sender] = true

IRs:
REF_6(bool) -> isSigner[msg.sender]
REF_6(bool) (->isSigner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allSigners.push(msg.sender)

IRs:
REF_8 -> LENGTH allSigners
TMP_8(uint256) := REF_8(uint256)
TMP_9(uint256) = TMP_8 + 1
REF_8(uint256) (->allSigners) := TMP_9(uint256)
REF_9(address) -> allSigners[TMP_8]
REF_9(address) (->allSigners) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activeSignersCount = 1

IRs:
activeSignersCount(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SignerAdded(msg.sender)

IRs:
Emit SignerAdded(msg.sender)"];
}
// Function: 10726.sol-MultiSig-execute(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isSigner[msg.sender],sender must be signer)

IRs:
REF_35(bool) -> isSigner[msg.sender]
TMP_29(None) = SOLIDITY_CALL require(bool,string)(REF_35,sender must be signer)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
script = scripts[scriptAddress]

IRs:
REF_36(MultiSig.Script) -> scripts[scriptAddress]
script(MultiSig.Script) := REF_36(MultiSig.Script)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(script.state == ScriptState.Approved,script state must be Approved)

IRs:
REF_37(MultiSig.ScriptState) -> script.state
REF_38(MultiSig.ScriptState) -> ScriptState.Approved
TMP_30(bool) = REF_37 == REF_38
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,script state must be Approved)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
script.state = ScriptState.Failed

IRs:
REF_39(MultiSig.ScriptState) -> script.state
REF_40(MultiSig.ScriptState) -> ScriptState.Failed
REF_39(MultiSig.ScriptState) (->script) := REF_40(MultiSig.ScriptState)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
scriptAddress.delegatecall(bytes4(keccak256()(execute(address))),scriptAddress)

IRs:
TMP_32(bytes32) = SOLIDITY_CALL keccak256()(execute(address))
TMP_33 = CONVERT TMP_32 to bytes4
TMP_34(bool) = LOW_LEVEL_CALL, dest:scriptAddress, function:delegatecall, arguments:['TMP_33', 'scriptAddress']  
CONDITION TMP_34"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
script.state = ScriptState.Done

IRs:
REF_42(MultiSig.ScriptState) -> script.state
REF_43(MultiSig.ScriptState) -> ScriptState.Done
REF_42(MultiSig.ScriptState) (->script) := REF_43(MultiSig.ScriptState)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
result = true

IRs:
result(bool) := True(bool)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
result = false

IRs:
result(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ScriptExecuted(scriptAddress,result)

IRs:
Emit ScriptExecuted(scriptAddress,result)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 10726.sol-MultiSig-getAllScripts(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->8;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < CHUNK_SIZE && i + offset < scriptAddresses.length

IRs:
TMP_77(bool) = i < CHUNK_SIZE
TMP_78(uint8) = i + offset
REF_75 -> LENGTH scriptAddresses
TMP_79(bool) = TMP_78 < REF_75
TMP_80(bool) = TMP_77 && TMP_79
CONDITION TMP_80"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
scriptAddress = scriptAddresses[i + offset]

IRs:
TMP_81(uint8) = i + offset
REF_76(address) -> scriptAddresses[TMP_81]
scriptAddress(address) := REF_76(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
scriptsResult[i] = (i + offset,uint256(scriptAddress),uint256(scripts[scriptAddress].state),scripts[scriptAddress].signCount)

IRs:
REF_77(uint256[4]) -> scriptsResult[i]
TMP_82(uint8) = i + offset
TMP_83 = CONVERT scriptAddress to uint256
REF_78(MultiSig.Script) -> scripts[scriptAddress]
REF_79(MultiSig.ScriptState) -> REF_78.state
TMP_84 = CONVERT REF_79 to uint256
REF_80(MultiSig.Script) -> scripts[scriptAddress]
REF_81(uint256) -> REF_80.signCount
REF_77(uint256[4]) = ['TMP_82(uint8)', 'TMP_83(uint256)', 'TMP_84(uint256)', 'REF_81(uint256)']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_85(uint8) := i(uint8)
i(uint8) = i + 1"];
7->4;
8[label="Node Type: RETURN 8

EXPRESSION:
scriptsResult

IRs:
RETURN scriptsResult"];
}
// Function: 10726.sol-MultiSig-getAllSigners(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->12;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < CHUNK_SIZE && i + offset < allSigners.length

IRs:
TMP_67(bool) = i < CHUNK_SIZE
TMP_68(uint8) = i + offset
REF_69 -> LENGTH allSigners
TMP_69(bool) = TMP_68 < REF_69
TMP_70(bool) = TMP_67 && TMP_69
CONDITION TMP_70"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
signerAddress = allSigners[i + offset]

IRs:
TMP_71(uint8) = i + offset
REF_70(address) -> allSigners[TMP_71]
signerAddress(address) := REF_70(address)"];
5->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_72(uint8) := i(uint8)
i(uint8) = i + 1"];
7->4;
8[label="Node Type: IF 8

EXPRESSION:
isSigner[signerAddress]

IRs:
REF_71(bool) -> isSigner[signerAddress]
CONDITION REF_71"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
signersResult[i] = (i + offset,uint256(signerAddress),1)

IRs:
REF_72(uint256[3]) -> signersResult[i]
TMP_73(uint8) = i + offset
TMP_74 = CONVERT signerAddress to uint256
REF_72(uint256[3]) = ['TMP_73(uint8)', 'TMP_74(uint256)', '1(uint256)']"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
signersResult[i] = (i + offset,uint256(signerAddress),0)

IRs:
REF_73(uint256[3]) -> signersResult[i]
TMP_75(uint8) = i + offset
TMP_76 = CONVERT signerAddress to uint256
REF_73(uint256[3]) = ['TMP_75(uint8)', 'TMP_76(uint256)', '0(uint256)']"];
10->11;
11[label="Node Type: END_IF 11
"];
11->7;
12[label="Node Type: RETURN 12

EXPRESSION:
signersResult

IRs:
RETURN signersResult"];
}
// Function: 10726.sol-MultiSig-getAllSignersCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allSigners.length

IRs:
REF_68 -> LENGTH allSigners
RETURN REF_68"];
2[label="Node Type: RETURN 2

EXPRESSION:
allSignersCount

IRs:
RETURN allSignersCount"];
}
// Function: 10726.sol-MultiSig-getScriptsCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
scriptAddresses.length

IRs:
REF_74 -> LENGTH scriptAddresses
RETURN REF_74"];
2[label="Node Type: RETURN 2

EXPRESSION:
scriptsCount

IRs:
RETURN scriptsCount"];
}
// Function: 10726.sol-MultiSig-removeSigners(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),only callable via MultiSig)

IRs:
TMP_58 = CONVERT this to address
TMP_59(bool) = msg.sender == TMP_58
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,only callable via MultiSig)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < signers.length

IRs:
REF_62 -> LENGTH signers
TMP_61(bool) = i < REF_62
CONDITION TMP_61"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
isSigner[signers[i]]

IRs:
REF_63(address) -> signers[i]
REF_64(bool) -> isSigner[REF_63]
CONDITION REF_64"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(activeSignersCount > 1,must not remove last signer)

IRs:
TMP_62(bool) = activeSignersCount > 1
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,must not remove last signer)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
activeSignersCount --

IRs:
TMP_64(uint256) := activeSignersCount(uint256)
activeSignersCount(uint256) = activeSignersCount - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isSigner[signers[i]] = false

IRs:
REF_65(address) -> signers[i]
REF_66(bool) -> isSigner[REF_65]
REF_66(bool) (->isSigner) := False(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
SignerRemoved(signers[i])

IRs:
REF_67(address) -> signers[i]
Emit SignerRemoved(REF_67)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_66(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
}
// Function: 10726.sol-MultiSig-sign(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isSigner[msg.sender],sender must be signer)

IRs:
REF_10(bool) -> isSigner[msg.sender]
TMP_11(None) = SOLIDITY_CALL require(bool,string)(REF_10,sender must be signer)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
script = scripts[scriptAddress]

IRs:
REF_11(MultiSig.Script) -> scripts[scriptAddress]
script(MultiSig.Script) := REF_11(MultiSig.Script)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(script.state == ScriptState.Approved || script.state == ScriptState.New,script state must be New or Approved)

IRs:
REF_12(MultiSig.ScriptState) -> script.state
REF_13(MultiSig.ScriptState) -> ScriptState.Approved
TMP_12(bool) = REF_12 == REF_13
REF_14(MultiSig.ScriptState) -> script.state
REF_15(MultiSig.ScriptState) -> ScriptState.New
TMP_13(bool) = REF_14 == REF_15
TMP_14(bool) = TMP_12 || TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,script state must be New or Approved)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(! script.signedBy[msg.sender],script must not be signed by signer yet)

IRs:
REF_16(mapping(address => bool)) -> script.signedBy
REF_17(bool) -> REF_16[msg.sender]
TMP_16 = UnaryType.BANG REF_17 
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,script must not be signed by signer yet)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
script.allSigners.length == 0

IRs:
REF_18(address[]) -> script.allSigners
REF_19 -> LENGTH REF_18
TMP_18(bool) = REF_19 == 0
CONDITION TMP_18"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
scriptAddresses.push(scriptAddress)

IRs:
REF_21 -> LENGTH scriptAddresses
TMP_20(uint256) := REF_21(uint256)
TMP_21(uint256) = TMP_20 + 1
REF_21(uint256) (->scriptAddresses) := TMP_21(uint256)
REF_22(address) -> scriptAddresses[TMP_20]
REF_22(address) (->scriptAddresses) := scriptAddress(address)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
script.allSigners.push(msg.sender)

IRs:
REF_23(address[]) -> script.allSigners
REF_25 -> LENGTH REF_23
TMP_23(uint256) := REF_25(uint256)
TMP_24(uint256) = TMP_23 + 1
REF_25(uint256) (->script) := TMP_24(uint256)
REF_26(address) -> REF_23[TMP_23]
REF_26(address) (->script) := msg.sender(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
script.signedBy[msg.sender] = true

IRs:
REF_27(mapping(address => bool)) -> script.signedBy
REF_28(bool) -> REF_27[msg.sender]
REF_28(bool) (->script) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
script.signCount = script.signCount.add(1)

IRs:
REF_29(uint256) -> script.signCount
REF_30(uint256) -> script.signCount
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_30', '1'] 
REF_29(uint256) (->script) := TMP_25(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ScriptSigned(scriptAddress,msg.sender)

IRs:
Emit ScriptSigned(scriptAddress,msg.sender)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkQuorum(script.signCount)

IRs:
REF_32(uint256) -> script.signCount
TMP_27(bool) = INTERNAL_CALL, MultiSig.checkQuorum(uint256)(REF_32)
CONDITION TMP_27"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
script.state = ScriptState.Approved

IRs:
REF_33(MultiSig.ScriptState) -> script.state
REF_34(MultiSig.ScriptState) -> ScriptState.Approved
REF_33(MultiSig.ScriptState) (->script) := REF_34(MultiSig.ScriptState)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ScriptApproved(scriptAddress)

IRs:
Emit ScriptApproved(scriptAddress)"];
14->15;
15[label="Node Type: END_IF 15
"];
}
// Function: 10726.sol-MultiSig-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
CHUNK_SIZE = 100

IRs:
CHUNK_SIZE(uint256) := 100(uint256)"];
}
// Function: 10726.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_98(uint256) = a + b
c(uint256) := TMP_98(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,add overflow)

IRs:
TMP_99(bool) = c >= a
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,add overflow)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10726.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b > 0,div by 0)

IRs:
TMP_92(bool) = b > 0
TMP_93(None) = SOLIDITY_CALL require(bool,string)(TMP_92,div by 0)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_94(uint256) = a / b
c(uint256) := TMP_94(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10726.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_86(uint256) = a * b
c(uint256) := TMP_86(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(a == 0 || c / a == b,mul overflow)

IRs:
TMP_87(bool) = a == 0
TMP_88(uint256) = c / a
TMP_89(bool) = TMP_88 == b
TMP_90(bool) = TMP_87 || TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool,string)(TMP_90,mul overflow)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10726.sol-SafeMath-roundedDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b > 0,div by 0)

IRs:
TMP_101(bool) = b > 0
TMP_102(None) = SOLIDITY_CALL require(bool,string)(TMP_101,div by 0)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = a / b

IRs:
TMP_103(uint256) = a / b
z(uint256) := TMP_103(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
a % b >= b / 2

IRs:
TMP_104(uint256) = a % b
TMP_105(uint256) = b / 2
TMP_106(bool) = TMP_104 >= TMP_105
CONDITION TMP_106"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
z ++

IRs:
TMP_107(uint256) := z(uint256)
z(uint256) = z + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 10726.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,sub underflow)

IRs:
TMP_95(bool) = b <= a
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,sub underflow)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_97(uint256) = a - b
RETURN TMP_97"];
}
// Function: 10726.sol-StabilityBoardProxy-addSigners(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),only callable via MultiSig)

IRs:
TMP_145 = CONVERT this to address
TMP_146(bool) = msg.sender == TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,only callable via MultiSig)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < signers.length

IRs:
REF_127 -> LENGTH signers
TMP_148(bool) = i < REF_127
CONDITION TMP_148"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
! isSigner[signers[i]]

IRs:
REF_128(address) -> signers[i]
REF_129(bool) -> isSigner[REF_128]
TMP_149 = UnaryType.BANG REF_129 
CONDITION TMP_149"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(signers[i] != address(0),new signer must not be 0x0)

IRs:
REF_130(address) -> signers[i]
TMP_150 = CONVERT 0 to address
TMP_151(bool) = REF_130 != TMP_150
TMP_152(None) = SOLIDITY_CALL require(bool,string)(TMP_151,new signer must not be 0x0)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
activeSignersCount ++

IRs:
TMP_153(uint256) := activeSignersCount(uint256)
activeSignersCount(uint256) = activeSignersCount + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allSigners.push(signers[i])

IRs:
REF_132(address) -> signers[i]
REF_133 -> LENGTH allSigners
TMP_155(uint256) := REF_133(uint256)
TMP_156(uint256) = TMP_155 + 1
REF_133(uint256) (->allSigners) := TMP_156(uint256)
REF_134(address) -> allSigners[TMP_155]
REF_134(address) (->allSigners) := REF_132(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isSigner[signers[i]] = true

IRs:
REF_135(address) -> signers[i]
REF_136(bool) -> isSigner[REF_135]
REF_136(bool) (->isSigner) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
SignerAdded(signers[i])

IRs:
REF_137(address) -> signers[i]
Emit SignerAdded(REF_137)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_158(uint256) := i(uint256)
i(uint256) = i + 1"];
13->5;
}
// Function: 10726.sol-StabilityBoardProxy-cancelScript(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),only callable via MultiSig)

IRs:
TMP_137 = CONVERT this to address
TMP_138(bool) = msg.sender == TMP_137
TMP_139(None) = SOLIDITY_CALL require(bool,string)(TMP_138,only callable via MultiSig)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
script = scripts[scriptAddress]

IRs:
REF_120(MultiSig.Script) -> scripts[scriptAddress]
script(MultiSig.Script) := REF_120(MultiSig.Script)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(script.state == ScriptState.Approved || script.state == ScriptState.New,script state must be New or Approved)

IRs:
REF_121(MultiSig.ScriptState) -> script.state
REF_122(MultiSig.ScriptState) -> ScriptState.Approved
TMP_140(bool) = REF_121 == REF_122
REF_123(MultiSig.ScriptState) -> script.state
REF_124(MultiSig.ScriptState) -> ScriptState.New
TMP_141(bool) = REF_123 == REF_124
TMP_142(bool) = TMP_140 || TMP_141
TMP_143(None) = SOLIDITY_CALL require(bool,string)(TMP_142,script state must be New or Approved)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
script.state = ScriptState.Cancelled

IRs:
REF_125(MultiSig.ScriptState) -> script.state
REF_126(MultiSig.ScriptState) -> ScriptState.Cancelled
REF_125(MultiSig.ScriptState) (->script) := REF_126(MultiSig.ScriptState)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ScriptCancelled(scriptAddress)

IRs:
Emit ScriptCancelled(scriptAddress)"];
}
// Function: 10726.sol-StabilityBoardProxy-checkQuorum(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isQuorum = signersCount > activeSignersCount / 2

IRs:
TMP_187(uint256) = activeSignersCount / 2
TMP_188(bool) = signersCount > TMP_187
isQuorum(bool) := TMP_188(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
isQuorum

IRs:
RETURN isQuorum"];
}
// Function: 10726.sol-StabilityBoardProxy-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isSigner[msg.sender] = true

IRs:
REF_82(bool) -> isSigner[msg.sender]
REF_82(bool) (->isSigner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allSigners.push(msg.sender)

IRs:
REF_84 -> LENGTH allSigners
TMP_109(uint256) := REF_84(uint256)
TMP_110(uint256) = TMP_109 + 1
REF_84(uint256) (->allSigners) := TMP_110(uint256)
REF_85(address) -> allSigners[TMP_109]
REF_85(address) (->allSigners) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activeSignersCount = 1

IRs:
activeSignersCount(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SignerAdded(msg.sender)

IRs:
Emit SignerAdded(msg.sender)"];
}
// Function: 10726.sol-StabilityBoardProxy-execute(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isSigner[msg.sender],sender must be signer)

IRs:
REF_111(bool) -> isSigner[msg.sender]
TMP_130(None) = SOLIDITY_CALL require(bool,string)(REF_111,sender must be signer)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
script = scripts[scriptAddress]

IRs:
REF_112(MultiSig.Script) -> scripts[scriptAddress]
script(MultiSig.Script) := REF_112(MultiSig.Script)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(script.state == ScriptState.Approved,script state must be Approved)

IRs:
REF_113(MultiSig.ScriptState) -> script.state
REF_114(MultiSig.ScriptState) -> ScriptState.Approved
TMP_131(bool) = REF_113 == REF_114
TMP_132(None) = SOLIDITY_CALL require(bool,string)(TMP_131,script state must be Approved)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
script.state = ScriptState.Failed

IRs:
REF_115(MultiSig.ScriptState) -> script.state
REF_116(MultiSig.ScriptState) -> ScriptState.Failed
REF_115(MultiSig.ScriptState) (->script) := REF_116(MultiSig.ScriptState)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
scriptAddress.delegatecall(bytes4(keccak256()(execute(address))),scriptAddress)

IRs:
TMP_133(bytes32) = SOLIDITY_CALL keccak256()(execute(address))
TMP_134 = CONVERT TMP_133 to bytes4
TMP_135(bool) = LOW_LEVEL_CALL, dest:scriptAddress, function:delegatecall, arguments:['TMP_134', 'scriptAddress']  
CONDITION TMP_135"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
script.state = ScriptState.Done

IRs:
REF_118(MultiSig.ScriptState) -> script.state
REF_119(MultiSig.ScriptState) -> ScriptState.Done
REF_118(MultiSig.ScriptState) (->script) := REF_119(MultiSig.ScriptState)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
result = true

IRs:
result(bool) := True(bool)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
result = false

IRs:
result(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ScriptExecuted(scriptAddress,result)

IRs:
Emit ScriptExecuted(scriptAddress,result)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 10726.sol-StabilityBoardProxy-getAllScripts(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->8;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < CHUNK_SIZE && i + offset < scriptAddresses.length

IRs:
TMP_178(bool) = i < CHUNK_SIZE
TMP_179(uint8) = i + offset
REF_151 -> LENGTH scriptAddresses
TMP_180(bool) = TMP_179 < REF_151
TMP_181(bool) = TMP_178 && TMP_180
CONDITION TMP_181"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
scriptAddress = scriptAddresses[i + offset]

IRs:
TMP_182(uint8) = i + offset
REF_152(address) -> scriptAddresses[TMP_182]
scriptAddress(address) := REF_152(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
scriptsResult[i] = (i + offset,uint256(scriptAddress),uint256(scripts[scriptAddress].state),scripts[scriptAddress].signCount)

IRs:
REF_153(uint256[4]) -> scriptsResult[i]
TMP_183(uint8) = i + offset
TMP_184 = CONVERT scriptAddress to uint256
REF_154(MultiSig.Script) -> scripts[scriptAddress]
REF_155(MultiSig.ScriptState) -> REF_154.state
TMP_185 = CONVERT REF_155 to uint256
REF_156(MultiSig.Script) -> scripts[scriptAddress]
REF_157(uint256) -> REF_156.signCount
REF_153(uint256[4]) = ['TMP_183(uint8)', 'TMP_184(uint256)', 'TMP_185(uint256)', 'REF_157(uint256)']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_186(uint8) := i(uint8)
i(uint8) = i + 1"];
7->4;
8[label="Node Type: RETURN 8

EXPRESSION:
scriptsResult

IRs:
RETURN scriptsResult"];
}
// Function: 10726.sol-StabilityBoardProxy-getAllSigners(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->12;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < CHUNK_SIZE && i + offset < allSigners.length

IRs:
TMP_168(bool) = i < CHUNK_SIZE
TMP_169(uint8) = i + offset
REF_145 -> LENGTH allSigners
TMP_170(bool) = TMP_169 < REF_145
TMP_171(bool) = TMP_168 && TMP_170
CONDITION TMP_171"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
signerAddress = allSigners[i + offset]

IRs:
TMP_172(uint8) = i + offset
REF_146(address) -> allSigners[TMP_172]
signerAddress(address) := REF_146(address)"];
5->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_173(uint8) := i(uint8)
i(uint8) = i + 1"];
7->4;
8[label="Node Type: IF 8

EXPRESSION:
isSigner[signerAddress]

IRs:
REF_147(bool) -> isSigner[signerAddress]
CONDITION REF_147"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
signersResult[i] = (i + offset,uint256(signerAddress),1)

IRs:
REF_148(uint256[3]) -> signersResult[i]
TMP_174(uint8) = i + offset
TMP_175 = CONVERT signerAddress to uint256
REF_148(uint256[3]) = ['TMP_174(uint8)', 'TMP_175(uint256)', '1(uint256)']"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
signersResult[i] = (i + offset,uint256(signerAddress),0)

IRs:
REF_149(uint256[3]) -> signersResult[i]
TMP_176(uint8) = i + offset
TMP_177 = CONVERT signerAddress to uint256
REF_149(uint256[3]) = ['TMP_176(uint8)', 'TMP_177(uint256)', '0(uint256)']"];
10->11;
11[label="Node Type: END_IF 11
"];
11->7;
12[label="Node Type: RETURN 12

EXPRESSION:
signersResult

IRs:
RETURN signersResult"];
}
// Function: 10726.sol-StabilityBoardProxy-getAllSignersCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allSigners.length

IRs:
REF_144 -> LENGTH allSigners
RETURN REF_144"];
2[label="Node Type: RETURN 2

EXPRESSION:
allSignersCount

IRs:
RETURN allSignersCount"];
}
// Function: 10726.sol-StabilityBoardProxy-getScriptsCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
scriptAddresses.length

IRs:
REF_150 -> LENGTH scriptAddresses
RETURN REF_150"];
2[label="Node Type: RETURN 2

EXPRESSION:
scriptsCount

IRs:
RETURN scriptsCount"];
}
// Function: 10726.sol-StabilityBoardProxy-removeSigners(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),only callable via MultiSig)

IRs:
TMP_159 = CONVERT this to address
TMP_160(bool) = msg.sender == TMP_159
TMP_161(None) = SOLIDITY_CALL require(bool,string)(TMP_160,only callable via MultiSig)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < signers.length

IRs:
REF_138 -> LENGTH signers
TMP_162(bool) = i < REF_138
CONDITION TMP_162"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
isSigner[signers[i]]

IRs:
REF_139(address) -> signers[i]
REF_140(bool) -> isSigner[REF_139]
CONDITION REF_140"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(activeSignersCount > 1,must not remove last signer)

IRs:
TMP_163(bool) = activeSignersCount > 1
TMP_164(None) = SOLIDITY_CALL require(bool,string)(TMP_163,must not remove last signer)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
activeSignersCount --

IRs:
TMP_165(uint256) := activeSignersCount(uint256)
activeSignersCount(uint256) = activeSignersCount - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isSigner[signers[i]] = false

IRs:
REF_141(address) -> signers[i]
REF_142(bool) -> isSigner[REF_141]
REF_142(bool) (->isSigner) := False(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
SignerRemoved(signers[i])

IRs:
REF_143(address) -> signers[i]
Emit SignerRemoved(REF_143)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_167(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
}
// Function: 10726.sol-StabilityBoardProxy-sign(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isSigner[msg.sender],sender must be signer)

IRs:
REF_86(bool) -> isSigner[msg.sender]
TMP_112(None) = SOLIDITY_CALL require(bool,string)(REF_86,sender must be signer)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
script = scripts[scriptAddress]

IRs:
REF_87(MultiSig.Script) -> scripts[scriptAddress]
script(MultiSig.Script) := REF_87(MultiSig.Script)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(script.state == ScriptState.Approved || script.state == ScriptState.New,script state must be New or Approved)

IRs:
REF_88(MultiSig.ScriptState) -> script.state
REF_89(MultiSig.ScriptState) -> ScriptState.Approved
TMP_113(bool) = REF_88 == REF_89
REF_90(MultiSig.ScriptState) -> script.state
REF_91(MultiSig.ScriptState) -> ScriptState.New
TMP_114(bool) = REF_90 == REF_91
TMP_115(bool) = TMP_113 || TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool,string)(TMP_115,script state must be New or Approved)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(! script.signedBy[msg.sender],script must not be signed by signer yet)

IRs:
REF_92(mapping(address => bool)) -> script.signedBy
REF_93(bool) -> REF_92[msg.sender]
TMP_117 = UnaryType.BANG REF_93 
TMP_118(None) = SOLIDITY_CALL require(bool,string)(TMP_117,script must not be signed by signer yet)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
script.allSigners.length == 0

IRs:
REF_94(address[]) -> script.allSigners
REF_95 -> LENGTH REF_94
TMP_119(bool) = REF_95 == 0
CONDITION TMP_119"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
scriptAddresses.push(scriptAddress)

IRs:
REF_97 -> LENGTH scriptAddresses
TMP_121(uint256) := REF_97(uint256)
TMP_122(uint256) = TMP_121 + 1
REF_97(uint256) (->scriptAddresses) := TMP_122(uint256)
REF_98(address) -> scriptAddresses[TMP_121]
REF_98(address) (->scriptAddresses) := scriptAddress(address)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
script.allSigners.push(msg.sender)

IRs:
REF_99(address[]) -> script.allSigners
REF_101 -> LENGTH REF_99
TMP_124(uint256) := REF_101(uint256)
TMP_125(uint256) = TMP_124 + 1
REF_101(uint256) (->script) := TMP_125(uint256)
REF_102(address) -> REF_99[TMP_124]
REF_102(address) (->script) := msg.sender(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
script.signedBy[msg.sender] = true

IRs:
REF_103(mapping(address => bool)) -> script.signedBy
REF_104(bool) -> REF_103[msg.sender]
REF_104(bool) (->script) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
script.signCount = script.signCount.add(1)

IRs:
REF_105(uint256) -> script.signCount
REF_106(uint256) -> script.signCount
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_106', '1'] 
REF_105(uint256) (->script) := TMP_126(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ScriptSigned(scriptAddress,msg.sender)

IRs:
Emit ScriptSigned(scriptAddress,msg.sender)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkQuorum(script.signCount)

IRs:
REF_108(uint256) -> script.signCount
TMP_128(bool) = INTERNAL_CALL, StabilityBoardProxy.checkQuorum(uint256)(REF_108)
CONDITION TMP_128"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
script.state = ScriptState.Approved

IRs:
REF_109(MultiSig.ScriptState) -> script.state
REF_110(MultiSig.ScriptState) -> ScriptState.Approved
REF_109(MultiSig.ScriptState) (->script) := REF_110(MultiSig.ScriptState)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ScriptApproved(scriptAddress)

IRs:
Emit ScriptApproved(scriptAddress)"];
14->15;
15[label="Node Type: END_IF 15
"];
}
// Function: 10726.sol-StabilityBoardProxy-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
CHUNK_SIZE = 100

IRs:
CHUNK_SIZE(uint256) := 100(uint256)"];
}
}
