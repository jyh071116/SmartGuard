digraph G {
// Function: 18102.sol-EnclavesDEXProxy-EnclavesDEXProxy(address,address,address,address,uint256,uint256,address,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_implementation != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _implementation != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
implementation = _implementation

IRs:
implementation(address) := _implementation(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
admin = _admin

IRs:
admin(address) := _admin(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
feeAccount = _feeAccount

IRs:
feeAccount(address) := _feeAccount(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
feeTake = _feeTake

IRs:
feeTake(uint256) := _feeTake(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
feeAmountThreshold = _feeAmountThreshold

IRs:
feeAmountThreshold(uint256) := _feeAmountThreshold(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
etherDelta = _etherDelta

IRs:
etherDelta(address) := _etherDelta(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tradeABIHash = _tradeABIHash

IRs:
tradeABIHash(bytes32) := _tradeABIHash(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
withdrawABIHash = _withdrawABIHash

IRs:
withdrawABIHash(bytes32) := _withdrawABIHash(bytes32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
etherDeltaInfo.feeMake = EtherDeltaI(etherDelta).feeMake()

IRs:
REF_24(uint256) -> etherDeltaInfo.feeMake
TMP_24 = CONVERT etherDelta to EtherDeltaI
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:TMP_24(EtherDeltaI), function:feeMake, arguments:[]  
REF_24(uint256) (->etherDeltaInfo) := TMP_25(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
etherDeltaInfo.feeTake = EtherDeltaI(etherDelta).feeTake()

IRs:
REF_26(uint256) -> etherDeltaInfo.feeTake
TMP_26 = CONVERT etherDelta to EtherDeltaI
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:TMP_26(EtherDeltaI), function:feeTake, arguments:[]  
REF_26(uint256) (->etherDeltaInfo) := TMP_27(uint256)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
StorageConsumer(_storageAddress)

IRs:
INTERNAL_CALL, StorageConsumer.StorageConsumer(address)(_storageAddress)"];
12->1;
}
// Function: 18102.sol-EnclavesDEXProxy-StorageConsumer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_storageAddress != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = _storageAddress != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
keyValueStorage = KeyValueStorage(_storageAddress)

IRs:
TMP_20 = CONVERT _storageAddress to KeyValueStorage
keyValueStorage(KeyValueStorage) := TMP_20(KeyValueStorage)"];
}
// Function: 18102.sol-EnclavesDEXProxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
data = msg.data

IRs:
data(bytes) := msg.data(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
impl = getImplementation()

IRs:
TMP_44(address) = INTERNAL_CALL, EnclavesDEXProxy.getImplementation()()
impl(address) := TMP_44(address)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
}
// Function: 18102.sol-EnclavesDEXProxy-getImplementation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
implementation

IRs:
RETURN implementation"];
}
// Function: 18102.sol-EnclavesDEXProxy-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_45(bool) = msg.sender == admin
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 18102.sol-EnclavesDEXProxy-proposeUpgrade(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(implementation != _proposedImplementation)

IRs:
TMP_29(bool) = implementation != _proposedImplementation
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_proposedImplementation != address(0))

IRs:
TMP_31 = CONVERT 0 to address
TMP_32(bool) = _proposedImplementation != TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proposedImplementation = _proposedImplementation

IRs:
proposedImplementation(address) := _proposedImplementation(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proposedTimestamp = now + 1209600

IRs:
TMP_34(uint256) = now + 1209600
proposedTimestamp(uint256) := TMP_34(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
UpgradedProposed(proposedImplementation,now)

IRs:
Emit UpgradedProposed(proposedImplementation,now)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, EnclavesDEXProxy.onlyAdmin()()"];
6->1;
}
// Function: 18102.sol-EnclavesDEXProxy-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
useEIP712 = true

IRs:
useEIP712(bool) := True(bool)"];
}
// Function: 18102.sol-EnclavesDEXProxy-upgrade()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(proposedImplementation != address(0))

IRs:
TMP_37 = CONVERT 0 to address
TMP_38(bool) = proposedImplementation != TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(proposedTimestamp < now)

IRs:
TMP_40(bool) = proposedTimestamp < now
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
implementation = proposedImplementation

IRs:
implementation(address) := proposedImplementation(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Upgraded(implementation)

IRs:
Emit Upgraded(implementation)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, EnclavesDEXProxy.onlyAdmin()()"];
5->1;
}
// Function: 18102.sol-EtherDeltaI-amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)
digraph{
}
// Function: 18102.sol-EtherDeltaI-availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)
digraph{
}
// Function: 18102.sol-EtherDeltaI-balanceOf(address,address)
digraph{
}
// Function: 18102.sol-EtherDeltaI-cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)
digraph{
}
// Function: 18102.sol-EtherDeltaI-deposit()
digraph{
}
// Function: 18102.sol-EtherDeltaI-depositToken(address,uint256)
digraph{
}
// Function: 18102.sol-EtherDeltaI-order(address,uint256,address,uint256,uint256,uint256)
digraph{
}
// Function: 18102.sol-EtherDeltaI-testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)
digraph{
}
// Function: 18102.sol-EtherDeltaI-trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)
digraph{
}
// Function: 18102.sol-EtherDeltaI-withdraw(uint256)
digraph{
}
// Function: 18102.sol-EtherDeltaI-withdrawToken(address,uint256)
digraph{
}
// Function: 18102.sol-KeyValueStorage-deleteAddress(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete _addressStorage[msg.sender][key]

IRs:
REF_16(mapping(bytes32 => address)) -> _addressStorage[msg.sender]
REF_17(address) -> REF_16[key]
REF_16 = delete REF_17 "];
}
// Function: 18102.sol-KeyValueStorage-deleteBool(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete _boolStorage[msg.sender][key]

IRs:
REF_20(mapping(bytes32 => bool)) -> _boolStorage[msg.sender]
REF_21(bool) -> REF_20[key]
REF_20 = delete REF_21 "];
}
// Function: 18102.sol-KeyValueStorage-deleteBytes32(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete _bytes32Storage[msg.sender][key]

IRs:
REF_22(mapping(bytes32 => bytes32)) -> _bytes32Storage[msg.sender]
REF_23(bytes32) -> REF_22[key]
REF_22 = delete REF_23 "];
}
// Function: 18102.sol-KeyValueStorage-deleteUint(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete _uintStorage[msg.sender][key]

IRs:
REF_18(mapping(bytes32 => uint256)) -> _uintStorage[msg.sender]
REF_19(uint256) -> REF_18[key]
REF_18 = delete REF_19 "];
}
// Function: 18102.sol-KeyValueStorage-getAddress(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_addressStorage[msg.sender][key]

IRs:
REF_0(mapping(bytes32 => address)) -> _addressStorage[msg.sender]
REF_1(address) -> REF_0[key]
RETURN REF_1"];
}
// Function: 18102.sol-KeyValueStorage-getBool(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_boolStorage[msg.sender][key]

IRs:
REF_4(mapping(bytes32 => bool)) -> _boolStorage[msg.sender]
REF_5(bool) -> REF_4[key]
RETURN REF_5"];
}
// Function: 18102.sol-KeyValueStorage-getBytes32(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_bytes32Storage[msg.sender][key]

IRs:
REF_6(mapping(bytes32 => bytes32)) -> _bytes32Storage[msg.sender]
REF_7(bytes32) -> REF_6[key]
RETURN REF_7"];
}
// Function: 18102.sol-KeyValueStorage-getUint(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_uintStorage[msg.sender][key]

IRs:
REF_2(mapping(bytes32 => uint256)) -> _uintStorage[msg.sender]
REF_3(uint256) -> REF_2[key]
RETURN REF_3"];
}
// Function: 18102.sol-KeyValueStorage-setAddress(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addressStorage[msg.sender][key] = value

IRs:
REF_8(mapping(bytes32 => address)) -> _addressStorage[msg.sender]
REF_9(address) -> REF_8[key]
REF_9(address) (->_addressStorage) := value(address)"];
}
// Function: 18102.sol-KeyValueStorage-setBool(bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_boolStorage[msg.sender][key] = value

IRs:
REF_12(mapping(bytes32 => bool)) -> _boolStorage[msg.sender]
REF_13(bool) -> REF_12[key]
REF_13(bool) (->_boolStorage) := value(bool)"];
}
// Function: 18102.sol-KeyValueStorage-setBytes32(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_bytes32Storage[msg.sender][key] = value

IRs:
REF_14(mapping(bytes32 => bytes32)) -> _bytes32Storage[msg.sender]
REF_15(bytes32) -> REF_14[key]
REF_15(bytes32) (->_bytes32Storage) := value(bytes32)"];
}
// Function: 18102.sol-KeyValueStorage-setUint(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_uintStorage[msg.sender][key] = value

IRs:
REF_10(mapping(bytes32 => uint256)) -> _uintStorage[msg.sender]
REF_11(uint256) -> REF_10[key]
REF_11(uint256) (->_uintStorage) := value(uint256)"];
}
// Function: 18102.sol-KindMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 18102.sol-KindMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 18102.sol-KindMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 18102.sol-KindMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 18102.sol-StorageConsumer-StorageConsumer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_storageAddress != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = _storageAddress != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
keyValueStorage = KeyValueStorage(_storageAddress)

IRs:
TMP_16 = CONVERT _storageAddress to KeyValueStorage
keyValueStorage(KeyValueStorage) := TMP_16(KeyValueStorage)"];
}
// Function: 18102.sol-Token-allowance(address,address)
digraph{
}
// Function: 18102.sol-Token-approve(address,uint256)
digraph{
}
// Function: 18102.sol-Token-balanceOf(address)
digraph{
}
// Function: 18102.sol-Token-totalSupply()
digraph{
}
// Function: 18102.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 18102.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
