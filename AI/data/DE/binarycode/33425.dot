digraph G {
// Function: 33425.sol-AdminInterface-AdminInterface()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
}
// Function: 33425.sol-AdminInterface-Set(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Limit = msg.value

IRs:
Limit(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oracle = dataBase

IRs:
oracle(address) := dataBase(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, AdminInterface.onlyOwner()()"];
3->1;
}
// Function: 33425.sol-AdminInterface-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > Limit

IRs:
TMP_3(bool) = msg.value > Limit
CONDITION TMP_3"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oracle.delegatecall(bytes4(keccak256()(AddToWangDB(address))),msg.sender)

IRs:
TMP_4(bytes32) = SOLIDITY_CALL keccak256()(AddToWangDB(address))
TMP_5 = CONVERT TMP_4 to bytes4
TMP_6(bool) = LOW_LEVEL_CALL, dest:oracle, function:delegatecall, arguments:['TMP_5', 'msg.sender']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newAddr.transfer(this.balance)

IRs:
REF_3(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:newAddr value:REF_3"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 33425.sol-AdminInterface-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33425.sol-AdminInterface-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == Owner)

IRs:
TMP_8(bool) = msg.sender == Owner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33425.sol-AdminInterface-transfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
multisig.transfer(msg.value)

IRs:
Transfer dest:multisig value:msg.value"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, AdminInterface.onlyOwner()()"];
2->1;
}
}
