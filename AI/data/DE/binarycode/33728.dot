digraph G {
// Function: 33728.sol-BitcoinToken-_mint(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_value)

IRs:
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_158(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_157(uint256) -> balances[_to]
REF_158(uint256) -> balances[_to]
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_158', '_value'] 
REF_157(uint256) (->balances) := TMP_159(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_value,_data)

IRs:
Emit Mint(_to,_value,_data)"];
}
// Function: 33728.sol-BitcoinToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_213(mapping(address => uint256)) -> allowed[_owner]
REF_214(uint256) -> REF_213[_spender]
RETURN REF_214"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 33728.sol-BitcoinToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_194(mapping(address => uint256)) -> allowed[msg.sender]
REF_195(uint256) -> REF_194[_spender]
REF_195(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-BitcoinToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_212(uint256) -> balances[_owner]
RETURN REF_212"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33728.sol-BitcoinToken-burn(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_161(bool) = _value > 0
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_160(uint256) -> balances[msg.sender]
TMP_163(bool) = _value <= REF_160
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
checkBurnData(_value,_data)

IRs:
INTERNAL_CALL, BitcoinToken.checkBurnData(uint256,bytes)(_value,_data)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_161(uint256) -> balances[burner]
REF_162(uint256) -> balances[burner]
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_162', '_value'] 
REF_161(uint256) (->balances) := TMP_166(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_167(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Burn(burner,_value,_data)

IRs:
Emit Burn(burner,_value,_data)"];
}
// Function: 33728.sol-BitcoinToken-checkAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_223(bool) = msg.sender == admin
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
}
// Function: 33728.sol-BitcoinToken-checkBurnData(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_data.length == 20)

IRs:
REF_215 -> LENGTH _data
TMP_225(bool) = REF_215 == 20
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_225)"];
}
// Function: 33728.sol-BitcoinToken-checkMinter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == minter1 || msg.sender == minter2)

IRs:
TMP_219(bool) = msg.sender == minter1
TMP_220(bool) = msg.sender == minter2
TMP_221(bool) = TMP_219 || TMP_220
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
}
// Function: 33728.sol-BitcoinToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_203(mapping(address => uint256)) -> allowed[msg.sender]
REF_204(uint256) -> REF_203[_spender]
oldValue(uint256) := REF_204(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_206(bool) = _subtractedValue > oldValue
CONDITION TMP_206"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_205(mapping(address => uint256)) -> allowed[msg.sender]
REF_206(uint256) -> REF_205[_spender]
REF_206(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_207(mapping(address => uint256)) -> allowed[msg.sender]
REF_208(uint256) -> REF_207[_spender]
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_208(uint256) (->allowed) := TMP_207(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_210(mapping(address => uint256)) -> allowed[msg.sender]
REF_211(uint256) -> REF_210[_spender]
Emit Approval(msg.sender,_spender,REF_211)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-BitcoinToken-delegateGet(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
targetCall = bytes4(keccak256()(signature))

IRs:
TMP_217(bytes32) = SOLIDITY_CALL keccak256()(signature)
TMP_218 = CONVERT TMP_217 to bytes4
targetCall(bytes4) := TMP_218(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 33728.sol-BitcoinToken-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 33728.sol-BitcoinToken-emitTransferWithData(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value,_data)

IRs:
Emit Transfer(_from,_to,_value,_data)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 33728.sol-BitcoinToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_196(mapping(address => uint256)) -> allowed[msg.sender]
REF_197(uint256) -> REF_196[_spender]
REF_198(mapping(address => uint256)) -> allowed[msg.sender]
REF_199(uint256) -> REF_198[_spender]
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_199', '_addedValue'] 
REF_197(uint256) (->allowed) := TMP_204(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_201(mapping(address => uint256)) -> allowed[msg.sender]
REF_202(uint256) -> REF_201[_spender]
Emit Approval(msg.sender,_spender,REF_202)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-BitcoinToken-mint(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_mint(_to,_value,_mintData)

IRs:
INTERNAL_CALL, ExternalToken._mint(address,uint256,bytes)(_to,_value,_mintData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTransferWithData(0x0,_to,_value,)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransferWithData(address,address,uint256,bytes)(0,_to,_value,)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, ExternalToken.onlyMinter()()"];
4->1;
}
// Function: 33728.sol-BitcoinToken-mintAndCall(address,uint256,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_mint(_to,_value,_mintData)

IRs:
INTERNAL_CALL, ExternalToken._mint(address,uint256,bytes)(_to,_value,_mintData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTransferWithData(0x0,_to,_value,_data)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransferWithData(address,address,uint256,bytes)(0,_to,_value,_data)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TokenReceiver(_to).onTokenTransfer(0x0,_value,_data)

IRs:
TMP_155 = CONVERT _to to TokenReceiver
HIGH_LEVEL_CALL, dest:TMP_155(TokenReceiver), function:onTokenTransfer, arguments:['0', '_value', '_data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, ExternalToken.onlyMinter()()"];
5->1;
}
// Function: 33728.sol-BitcoinToken-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkAdmin()

IRs:
INTERNAL_CALL, BitcoinToken.checkAdmin()()"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33728.sol-BitcoinToken-onlyMinter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkMinter()

IRs:
INTERNAL_CALL, BitcoinToken.checkMinter()()"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33728.sol-BitcoinToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Bitcoin

IRs:
name(string) := Bitcoin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = BTCT

IRs:
symbol(string) := BTCT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
admin = 0x10a44fF9805c23f559d9c9f783091398CE54A556

IRs:
admin(address) := 95008141317258031050602481724966656849445430614(address)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
minter1 = 0x884FFccB29d5aba8c94509663595F1dBF823dCC9

IRs:
minter1(address) := 778206525131709171779264864560140085270482771145(address)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
minter2 = 0x5aCC33B4318575581a80522B2e57D1d09e5eC111

IRs:
minter2(address) := 518363025437879497141208315894191496899130736913(address)"];
}
// Function: 33728.sol-BitcoinToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_183 = CONVERT 0 to address
TMP_184(bool) = _to != TMP_183
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_173(uint256) -> balances[msg.sender]
TMP_186(bool) = _value <= REF_173
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_174(uint256) -> balances[msg.sender]
REF_175(uint256) -> balances[msg.sender]
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_175', '_value'] 
REF_174(uint256) (->balances) := TMP_188(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_177(uint256) -> balances[_to]
REF_178(uint256) -> balances[_to]
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_178', '_value'] 
REF_177(uint256) (->balances) := TMP_189(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
emitTransfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransfer(address,address,uint256)(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-BitcoinToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferAndCall(_to,_value,_data)

IRs:
TMP_169(bool) = INTERNAL_CALL, NotifyingTokenImpl.transferAndCall(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_169"];
}
// Function: 33728.sol-BitcoinToken-transferAndCall(address,uint256,bytes)
digraph{
}
// Function: 33728.sol-BitcoinToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_192 = CONVERT 0 to address
TMP_193(bool) = _to != TMP_192
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_180(uint256) -> balances[_from]
TMP_195(bool) = _value <= REF_180
TMP_196(None) = SOLIDITY_CALL require(bool)(TMP_195)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_181(mapping(address => uint256)) -> allowed[_from]
REF_182(uint256) -> REF_181[msg.sender]
TMP_197(bool) = _value <= REF_182
TMP_198(None) = SOLIDITY_CALL require(bool)(TMP_197)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_183(uint256) -> balances[_from]
REF_184(uint256) -> balances[_from]
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_184', '_value'] 
REF_183(uint256) (->balances) := TMP_199(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_186(uint256) -> balances[_to]
REF_187(uint256) -> balances[_to]
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_187', '_value'] 
REF_186(uint256) (->balances) := TMP_200(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_189(mapping(address => uint256)) -> allowed[_from]
REF_190(uint256) -> REF_189[msg.sender]
REF_191(mapping(address => uint256)) -> allowed[_from]
REF_192(uint256) -> REF_191[msg.sender]
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_192', '_value'] 
REF_190(uint256) (->allowed) := TMP_201(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(_from,_to,_value)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransfer(address,address,uint256)(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-BitcoinToken-upgrade(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
verifyTargetState(_target)

IRs:
INTERNAL_CALL, Upgradeable.verifyTargetState(address)(_target)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
verifyState(_target)

IRs:
INTERNAL_CALL, Upgradeable.verifyState(address)(_target)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
target = _target

IRs:
target(address) := _target(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
EventUpgrade(_target,msg.sender)

IRs:
Emit EventUpgrade(_target,msg.sender)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Upgradeable.onlyAdmin()()"];
5->1;
}
// Function: 33728.sol-BitcoinToken-verifyState(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33728.sol-BitcoinToken-verifyTargetState(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(delegateGet(testTarget,target())) == target)

IRs:
TMP_213(bytes32) = INTERNAL_CALL, Upgradeable.delegateGet(address,string)(testTarget,target())
TMP_214 = CONVERT TMP_213 to address
TMP_215(bool) = TMP_214 == target
TMP_216(None) = SOLIDITY_CALL require(bool)(TMP_215)"];
}
// Function: 33728.sol-ExternalToken-_mint(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_value)

IRs:
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_138(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_147(uint256) -> balances[_to]
REF_148(uint256) -> balances[_to]
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_148', '_value'] 
REF_147(uint256) (->balances) := TMP_139(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_value,_data)

IRs:
Emit Mint(_to,_value,_data)"];
}
// Function: 33728.sol-ExternalToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_143(mapping(address => uint256)) -> allowed[_owner]
REF_144(uint256) -> REF_143[_spender]
RETURN REF_144"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 33728.sol-ExternalToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_124(mapping(address => uint256)) -> allowed[msg.sender]
REF_125(uint256) -> REF_124[_spender]
REF_125(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-ExternalToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_142(uint256) -> balances[_owner]
RETURN REF_142"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33728.sol-ExternalToken-burn(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_141(bool) = _value > 0
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_150(uint256) -> balances[msg.sender]
TMP_143(bool) = _value <= REF_150
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
checkBurnData(_value,_data)

IRs:
INTERNAL_CALL, ExternalToken.checkBurnData(uint256,bytes)(_value,_data)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_151(uint256) -> balances[burner]
REF_152(uint256) -> balances[burner]
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_152', '_value'] 
REF_151(uint256) (->balances) := TMP_146(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_147(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Burn(burner,_value,_data)

IRs:
Emit Burn(burner,_value,_data)"];
}
// Function: 33728.sol-ExternalToken-checkBurnData(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33728.sol-ExternalToken-checkMinter()
digraph{
}
// Function: 33728.sol-ExternalToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_133(mapping(address => uint256)) -> allowed[msg.sender]
REF_134(uint256) -> REF_133[_spender]
oldValue(uint256) := REF_134(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_127(bool) = _subtractedValue > oldValue
CONDITION TMP_127"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_135(mapping(address => uint256)) -> allowed[msg.sender]
REF_136(uint256) -> REF_135[_spender]
REF_136(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_137(mapping(address => uint256)) -> allowed[msg.sender]
REF_138(uint256) -> REF_137[_spender]
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_138(uint256) (->allowed) := TMP_128(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_140(mapping(address => uint256)) -> allowed[msg.sender]
REF_141(uint256) -> REF_140[_spender]
Emit Approval(msg.sender,_spender,REF_141)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-ExternalToken-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 33728.sol-ExternalToken-emitTransferWithData(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value,_data)

IRs:
Emit Transfer(_from,_to,_value,_data)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 33728.sol-ExternalToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_126(mapping(address => uint256)) -> allowed[msg.sender]
REF_127(uint256) -> REF_126[_spender]
REF_128(mapping(address => uint256)) -> allowed[msg.sender]
REF_129(uint256) -> REF_128[_spender]
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_129', '_addedValue'] 
REF_127(uint256) (->allowed) := TMP_125(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_131(mapping(address => uint256)) -> allowed[msg.sender]
REF_132(uint256) -> REF_131[_spender]
Emit Approval(msg.sender,_spender,REF_132)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-ExternalToken-mint(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_mint(_to,_value,_mintData)

IRs:
INTERNAL_CALL, ExternalToken._mint(address,uint256,bytes)(_to,_value,_mintData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTransferWithData(0x0,_to,_value,)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransferWithData(address,address,uint256,bytes)(0,_to,_value,)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, ExternalToken.onlyMinter()()"];
4->1;
}
// Function: 33728.sol-ExternalToken-mintAndCall(address,uint256,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_mint(_to,_value,_mintData)

IRs:
INTERNAL_CALL, ExternalToken._mint(address,uint256,bytes)(_to,_value,_mintData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTransferWithData(0x0,_to,_value,_data)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransferWithData(address,address,uint256,bytes)(0,_to,_value,_data)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TokenReceiver(_to).onTokenTransfer(0x0,_value,_data)

IRs:
TMP_135 = CONVERT _to to TokenReceiver
HIGH_LEVEL_CALL, dest:TMP_135(TokenReceiver), function:onTokenTransfer, arguments:['0', '_value', '_data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, ExternalToken.onlyMinter()()"];
5->1;
}
// Function: 33728.sol-ExternalToken-onlyMinter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkMinter()

IRs:
INTERNAL_CALL, ExternalToken.checkMinter()()"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33728.sol-ExternalToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_104 = CONVERT 0 to address
TMP_105(bool) = _to != TMP_104
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_103(uint256) -> balances[msg.sender]
TMP_107(bool) = _value <= REF_103
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_104(uint256) -> balances[msg.sender]
REF_105(uint256) -> balances[msg.sender]
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_105', '_value'] 
REF_104(uint256) (->balances) := TMP_109(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_107(uint256) -> balances[_to]
REF_108(uint256) -> balances[_to]
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_108', '_value'] 
REF_107(uint256) (->balances) := TMP_110(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
emitTransfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransfer(address,address,uint256)(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-ExternalToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferAndCall(_to,_value,_data)

IRs:
TMP_90(bool) = INTERNAL_CALL, NotifyingTokenImpl.transferAndCall(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_90"];
}
// Function: 33728.sol-ExternalToken-transferAndCall(address,uint256,bytes)
digraph{
}
// Function: 33728.sol-ExternalToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_113 = CONVERT 0 to address
TMP_114(bool) = _to != TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_110(uint256) -> balances[_from]
TMP_116(bool) = _value <= REF_110
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_111(mapping(address => uint256)) -> allowed[_from]
REF_112(uint256) -> REF_111[msg.sender]
TMP_118(bool) = _value <= REF_112
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_113(uint256) -> balances[_from]
REF_114(uint256) -> balances[_from]
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_114', '_value'] 
REF_113(uint256) (->balances) := TMP_120(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_116(uint256) -> balances[_to]
REF_117(uint256) -> balances[_to]
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_117', '_value'] 
REF_116(uint256) (->balances) := TMP_121(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_119(mapping(address => uint256)) -> allowed[_from]
REF_120(uint256) -> REF_119[msg.sender]
REF_121(mapping(address => uint256)) -> allowed[_from]
REF_122(uint256) -> REF_121[msg.sender]
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_122', '_value'] 
REF_120(uint256) (->allowed) := TMP_122(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(_from,_to,_value)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransfer(address,address,uint256)(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-NotifyingToken-allowance(address,address)
digraph{
}
// Function: 33728.sol-NotifyingToken-approve(address,uint256)
digraph{
}
// Function: 33728.sol-NotifyingToken-balanceOf(address)
digraph{
}
// Function: 33728.sol-NotifyingToken-transfer(address,uint256)
digraph{
}
// Function: 33728.sol-NotifyingToken-transferAndCall(address,uint256,bytes)
digraph{
}
// Function: 33728.sol-NotifyingToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 33728.sol-NotifyingTokenImpl-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_85(mapping(address => uint256)) -> allowed[_owner]
REF_86(uint256) -> REF_85[_spender]
RETURN REF_86"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 33728.sol-NotifyingTokenImpl-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_66(mapping(address => uint256)) -> allowed[msg.sender]
REF_67(uint256) -> REF_66[_spender]
REF_67(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-NotifyingTokenImpl-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_84(uint256) -> balances[_owner]
RETURN REF_84"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33728.sol-NotifyingTokenImpl-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_73(bool) = _subtractedValue > oldValue
CONDITION TMP_73"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_74(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-NotifyingTokenImpl-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
emitTransferWithData(_from,_to,_value,)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransferWithData(address,address,uint256,bytes)(_from,_to,_value,)"];
}
// Function: 33728.sol-NotifyingTokenImpl-emitTransferWithData(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value,_data)

IRs:
Emit Transfer(_from,_to,_value,_data)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 33728.sol-NotifyingTokenImpl-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_71(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-NotifyingTokenImpl-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_50 = CONVERT 0 to address
TMP_51(bool) = _to != TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_45(uint256) -> balances[msg.sender]
TMP_53(bool) = _value <= REF_45
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_46(uint256) -> balances[msg.sender]
REF_47(uint256) -> balances[msg.sender]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_47', '_value'] 
REF_46(uint256) (->balances) := TMP_55(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_49(uint256) -> balances[_to]
REF_50(uint256) -> balances[_to]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_50', '_value'] 
REF_49(uint256) (->balances) := TMP_56(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
emitTransfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransfer(address,address,uint256)(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-NotifyingTokenImpl-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferAndCall(_to,_value,_data)

IRs:
TMP_76(bool) = INTERNAL_CALL, NotifyingTokenImpl.transferAndCall(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_76"];
}
// Function: 33728.sol-NotifyingTokenImpl-transferAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_77 = CONVERT 0 to address
TMP_78(bool) = _to != TMP_77
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_87(uint256) -> balances[msg.sender]
TMP_80(bool) = _value <= REF_87
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_88(uint256) -> balances[msg.sender]
REF_89(uint256) -> balances[msg.sender]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_89', '_value'] 
REF_88(uint256) (->balances) := TMP_82(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_91(uint256) -> balances[_to]
REF_92(uint256) -> balances[_to]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_92', '_value'] 
REF_91(uint256) (->balances) := TMP_83(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
emitTransferWithData(msg.sender,_to,_value,_data)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransferWithData(address,address,uint256,bytes)(msg.sender,_to,_value,_data)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
TokenReceiver(_to).onTokenTransfer(msg.sender,_value,_data)

IRs:
TMP_85 = CONVERT _to to TokenReceiver
HIGH_LEVEL_CALL, dest:TMP_85(TokenReceiver), function:onTokenTransfer, arguments:['msg.sender', '_value', '_data']  "];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-NotifyingTokenImpl-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_59 = CONVERT 0 to address
TMP_60(bool) = _to != TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_52(uint256) -> balances[_from]
TMP_62(bool) = _value <= REF_52
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_53(mapping(address => uint256)) -> allowed[_from]
REF_54(uint256) -> REF_53[msg.sender]
TMP_64(bool) = _value <= REF_54
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_55(uint256) -> balances[_from]
REF_56(uint256) -> balances[_from]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_56', '_value'] 
REF_55(uint256) (->balances) := TMP_66(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_58(uint256) -> balances[_to]
REF_59(uint256) -> balances[_to]
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_59', '_value'] 
REF_58(uint256) (->balances) := TMP_67(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_61(mapping(address => uint256)) -> allowed[_from]
REF_62(uint256) -> REF_61[msg.sender]
REF_63(mapping(address => uint256)) -> allowed[_from]
REF_64(uint256) -> REF_63[msg.sender]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_64', '_value'] 
REF_62(uint256) (->allowed) := TMP_68(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(_from,_to,_value)

IRs:
INTERNAL_CALL, NotifyingTokenImpl.emitTransfer(address,address,uint256)(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-ReadOnlyToken-allowance(address,address)
digraph{
}
// Function: 33728.sol-ReadOnlyToken-balanceOf(address)
digraph{
}
// Function: 33728.sol-ReadOnlyTokenImpl-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 33728.sol-ReadOnlyTokenImpl-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33728.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33728.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33728.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33728.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 33728.sol-Token-allowance(address,address)
digraph{
}
// Function: 33728.sol-Token-approve(address,uint256)
digraph{
}
// Function: 33728.sol-Token-balanceOf(address)
digraph{
}
// Function: 33728.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 33728.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 33728.sol-TokenImpl-allowance(address,address)
digraph{
}
// Function: 33728.sol-TokenImpl-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
REF_28(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-TokenImpl-balanceOf(address)
digraph{
}
// Function: 33728.sol-TokenImpl-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
oldValue(uint256) := REF_37(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_47(bool) = _subtractedValue > oldValue
CONDITION TMP_47"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
REF_39(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_41(uint256) (->allowed) := TMP_48(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
Emit Approval(msg.sender,_spender,REF_44)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-TokenImpl-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 33728.sol-TokenImpl-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_29(mapping(address => uint256)) -> allowed[msg.sender]
REF_30(uint256) -> REF_29[_spender]
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_32', '_addedValue'] 
REF_30(uint256) (->allowed) := TMP_45(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
Emit Approval(msg.sender,_spender,REF_35)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33728.sol-TokenImpl-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _to != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_6(uint256) -> balances[msg.sender]
TMP_27(bool) = _value <= REF_6
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_7(uint256) -> balances[msg.sender]
REF_8(uint256) -> balances[msg.sender]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_29(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_10(uint256) -> balances[_to]
REF_11(uint256) -> balances[_to]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_11', '_value'] 
REF_10(uint256) (->balances) := TMP_30(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
emitTransfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, TokenImpl.emitTransfer(address,address,uint256)(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-TokenImpl-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = _to != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_13(uint256) -> balances[_from]
TMP_36(bool) = _value <= REF_13
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
TMP_38(bool) = _value <= REF_15
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_16(uint256) -> balances[_from]
REF_17(uint256) -> balances[_from]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_17', '_value'] 
REF_16(uint256) (->balances) := TMP_40(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_19(uint256) -> balances[_to]
REF_20(uint256) -> balances[_to]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_41(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
REF_24(mapping(address => uint256)) -> allowed[_from]
REF_25(uint256) -> REF_24[msg.sender]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_25', '_value'] 
REF_23(uint256) (->allowed) := TMP_42(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(_from,_to,_value)

IRs:
INTERNAL_CALL, TokenImpl.emitTransfer(address,address,uint256)(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33728.sol-TokenReceiver-onTokenTransfer(address,uint256,bytes)
digraph{
}
// Function: 33728.sol-Upgradeable-checkAdmin()
digraph{
}
// Function: 33728.sol-Upgradeable-delegateGet(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
targetCall = bytes4(keccak256()(signature))

IRs:
TMP_21(bytes32) = SOLIDITY_CALL keccak256()(signature)
TMP_22 = CONVERT TMP_21 to bytes4
targetCall(bytes4) := TMP_22(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 33728.sol-Upgradeable-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkAdmin()

IRs:
INTERNAL_CALL, Upgradeable.checkAdmin()()"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33728.sol-Upgradeable-upgrade(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
verifyTargetState(_target)

IRs:
INTERNAL_CALL, Upgradeable.verifyTargetState(address)(_target)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
verifyState(_target)

IRs:
INTERNAL_CALL, Upgradeable.verifyState(address)(_target)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
target = _target

IRs:
target(address) := _target(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
EventUpgrade(_target,msg.sender)

IRs:
Emit EventUpgrade(_target,msg.sender)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Upgradeable.onlyAdmin()()"];
5->1;
}
// Function: 33728.sol-Upgradeable-verifyState(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33728.sol-Upgradeable-verifyTargetState(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(delegateGet(testTarget,target())) == target)

IRs:
TMP_17(bytes32) = INTERNAL_CALL, Upgradeable.delegateGet(address,string)(testTarget,target())
TMP_18 = CONVERT TMP_17 to address
TMP_19(bool) = TMP_18 == target
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
}
}
