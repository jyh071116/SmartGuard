digraph G {
// Function: 34483.sol-Conductor-Set(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == Owner)

IRs:
TMP_0(bool) = msg.sender == Owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Limit = limit

IRs:
Limit(uint256) := limit(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
DataBase = dataBase

IRs:
DataBase(address) := dataBase(address)"];
}
// Function: 34483.sol-Conductor-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 34483.sol-Conductor-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
}
// Function: 34483.sol-Conductor-transfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > Limit

IRs:
TMP_2(bool) = msg.value > Limit
CONDITION TMP_2"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DataBase.delegatecall(bytes4(sha3()(AddToDB(address))),msg.sender)

IRs:
TMP_3(bytes32) = SOLIDITY_CALL sha3()(AddToDB(address))
TMP_4 = CONVERT TMP_3 to bytes4
TMP_5(bool) = LOW_LEVEL_CALL, dest:DataBase, function:delegatecall, arguments:['TMP_4', 'msg.sender']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
adr.transfer(this.balance)

IRs:
REF_2(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:adr value:REF_2"];
3->4;
4[label="Node Type: END_IF 4
"];
}
}
