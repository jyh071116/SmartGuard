digraph G {
// Function: 3521.sol-CodexRecordProxy-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxyOwner = msg.sender

IRs:
proxyOwner(address) := msg.sender(address)"];
}
// Function: 3521.sol-CodexRecordProxy-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeTo(1,_implementation)

IRs:
INTERNAL_CALL, CodexRecordProxy.upgradeTo(string,address)(1,_implementation)"];
}
// Function: 3521.sol-CodexRecordProxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_implementation = implementation

IRs:
_implementation(address) := implementation(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3521.sol-CodexRecordProxy-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenMetadata = ERC721Metadata(implementation)

IRs:
TMP_14 = CONVERT implementation to ERC721Metadata
tokenMetadata(ERC721Metadata) := TMP_14(ERC721Metadata)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenMetadata.name()

IRs:
TMP_15(string) = HIGH_LEVEL_CALL, dest:tokenMetadata(ERC721Metadata), function:name, arguments:[]  
RETURN TMP_15"];
}
// Function: 3521.sol-CodexRecordProxy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == proxyOwner)

IRs:
TMP_31(bool) = msg.sender == proxyOwner
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3521.sol-CodexRecordProxy-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenMetadata = ERC721Metadata(implementation)

IRs:
TMP_16 = CONVERT implementation to ERC721Metadata
tokenMetadata(ERC721Metadata) := TMP_16(ERC721Metadata)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenMetadata.symbol()

IRs:
TMP_17(string) = HIGH_LEVEL_CALL, dest:tokenMetadata(ERC721Metadata), function:symbol, arguments:[]  
RETURN TMP_17"];
}
// Function: 3521.sol-CodexRecordProxy-transferProxyOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_8 = CONVERT 0 to address
TMP_9(bool) = _newOwner != TMP_8
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyOwnershipTransferred(proxyOwner,_newOwner)

IRs:
Emit ProxyOwnershipTransferred(proxyOwner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proxyOwner = _newOwner

IRs:
proxyOwner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, ProxyOwnable.onlyOwner()()"];
4->1;
}
// Function: 3521.sol-CodexRecordProxy-upgradeTo(string,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(keccak256()(abi.encodePacked(_version)) != keccak256()(abi.encodePacked(version)),The version cannot be the same)

IRs:
TMP_18(bytes) = SOLIDITY_CALL abi.encodePacked()(_version)
TMP_19(bytes32) = SOLIDITY_CALL keccak256()(TMP_18)
TMP_20(bytes) = SOLIDITY_CALL abi.encodePacked()(version)
TMP_21(bytes32) = SOLIDITY_CALL keccak256()(TMP_20)
TMP_22(bool) = TMP_19 != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,The version cannot be the same)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_implementation != implementation,The implementation cannot be the same)

IRs:
TMP_24(bool) = _implementation != implementation
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,The implementation cannot be the same)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_implementation != address(0),The implementation cannot be the 0 address)

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = _implementation != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,The implementation cannot be the 0 address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
version = _version

IRs:
version(string) := _version(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
implementation = _implementation

IRs:
implementation(address) := _implementation(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Upgraded(version,implementation)

IRs:
Emit Upgraded(version,implementation)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, ProxyOwnable.onlyOwner()()"];
7->1;
}
// Function: 3521.sol-ERC165-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INTERFACE_ERC165 = 0x01ffc9a7

IRs:
INTERFACE_ERC165(bytes4) := 33540519(uint256)"];
}
// Function: 3521.sol-ERC165-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_interfaceID == INTERFACE_ERC165

IRs:
TMP_0(bool) = _interfaceID == INTERFACE_ERC165
RETURN TMP_0"];
}
// Function: 3521.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 3521.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 3521.sol-ERC721-exists(uint256)
digraph{
}
// Function: 3521.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 3521.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 3521.sol-ERC721-name()
digraph{
}
// Function: 3521.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 3521.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 3521.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 3521.sol-ERC721-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INTERFACE_ERC721 = 0x80ac58cd

IRs:
INTERFACE_ERC721(bytes4) := 2158778573(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
INTERFACE_ERC721_ENUMERABLE = 0x780e9d63

IRs:
INTERFACE_ERC721_ENUMERABLE(bytes4) := 2014223715(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
INTERFACE_ERC721_METADATA = 0x5b5e139f

IRs:
INTERFACE_ERC721_METADATA(bytes4) := 1532892063(uint256)"];
}
// Function: 3521.sol-ERC721-symbol()
digraph{
}
// Function: 3521.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 3521.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 3521.sol-ERC721-tokenURI(uint256)
digraph{
}
// Function: 3521.sol-ERC721-totalSupply()
digraph{
}
// Function: 3521.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 3521.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 3521.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 3521.sol-ERC721Basic-isApprovedForAll(address,address)
digraph{
}
// Function: 3521.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 3521.sol-ERC721Basic-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Basic-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 3521.sol-ERC721Basic-setApprovalForAll(address,bool)
digraph{
}
// Function: 3521.sol-ERC721Basic-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INTERFACE_ERC721 = 0x80ac58cd

IRs:
INTERFACE_ERC721(bytes4) := 2158778573(uint256)"];
}
// Function: 3521.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-approve(address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-getApproved(uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-isApprovedForAll(address,address)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-setApprovalForAll(address,bool)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INTERFACE_ERC721 = 0x80ac58cd

IRs:
INTERFACE_ERC721(bytes4) := 2158778573(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
INTERFACE_ERC721_ENUMERABLE = 0x780e9d63

IRs:
INTERFACE_ERC721_ENUMERABLE(bytes4) := 2014223715(uint256)"];
}
// Function: 3521.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 3521.sol-ERC721Enumerable-transferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Metadata-approve(address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 3521.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 3521.sol-ERC721Metadata-getApproved(uint256)
digraph{
}
// Function: 3521.sol-ERC721Metadata-isApprovedForAll(address,address)
digraph{
}
// Function: 3521.sol-ERC721Metadata-name()
digraph{
}
// Function: 3521.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 3521.sol-ERC721Metadata-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ERC721Metadata-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 3521.sol-ERC721Metadata-setApprovalForAll(address,bool)
digraph{
}
// Function: 3521.sol-ERC721Metadata-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INTERFACE_ERC721 = 0x80ac58cd

IRs:
INTERFACE_ERC721(bytes4) := 2158778573(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
INTERFACE_ERC721_METADATA = 0x5b5e139f

IRs:
INTERFACE_ERC721_METADATA(bytes4) := 1532892063(uint256)"];
}
// Function: 3521.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 3521.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 3521.sol-ERC721Metadata-transferFrom(address,address,uint256)
digraph{
}
// Function: 3521.sol-ProxyOwnable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxyOwner = msg.sender

IRs:
proxyOwner(address) := msg.sender(address)"];
}
// Function: 3521.sol-ProxyOwnable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == proxyOwner)

IRs:
TMP_6(bool) = msg.sender == proxyOwner
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3521.sol-ProxyOwnable-transferProxyOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_1 = CONVERT 0 to address
TMP_2(bool) = _newOwner != TMP_1
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyOwnershipTransferred(proxyOwner,_newOwner)

IRs:
Emit ProxyOwnershipTransferred(proxyOwner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proxyOwner = _newOwner

IRs:
proxyOwner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, ProxyOwnable.onlyOwner()()"];
4->1;
}
}
