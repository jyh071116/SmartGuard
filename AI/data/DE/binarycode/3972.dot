digraph G {
// Function: 3972.sol-Ico-allowTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_success,_allow)

IRs:
RETURN _success,_allow"];
}
// Function: 3972.sol-Ico-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-calcVesting(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_success,_reward)

IRs:
RETURN _success,_reward"];
}
// Function: 3972.sol-Ico-calculateReward(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_success,_reward)

IRs:
RETURN _success,_reward"];
}
// Function: 3972.sol-Ico-changeKYCAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setKYCAddress = _setKYCAddress

IRs:
setKYCAddress(address) := _setKYCAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forOwner()

IRs:
MODIFIER_CALL, Owned.forOwner()()"];
2->1;
}
// Function: 3972.sol-Ico-changeLibAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
libAddress = _libAddress

IRs:
libAddress(address) := _libAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forOwner()

IRs:
MODIFIER_CALL, Owned.forOwner()()"];
2->1;
}
// Function: 3972.sol-Ico-changeOffchainUploaderAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
offchainUploaderAddress = _offchainUploaderAddress

IRs:
offchainUploaderAddress(address) := _offchainUploaderAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forOwner()

IRs:
MODIFIER_CALL, Owned.forOwner()()"];
2->1;
}
// Function: 3972.sol-Ico-changeSetRateAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setRateAddress = _setRateAddress

IRs:
setRateAddress(address) := _setRateAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forOwner()

IRs:
MODIFIER_CALL, Owned.forOwner()()"];
2->1;
}
// Function: 3972.sol-Ico-claimVesting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_owner == 0x00

IRs:
TMP_40(bool) = _owner == 0
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 3972.sol-Ico-constructor(address,address,address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
currentPhase = phaseType.pause

IRs:
REF_0(Ico.phaseType) -> phaseType.pause
currentPhase(Ico.phaseType) := REF_0(Ico.phaseType)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
libAddress = _libAddress

IRs:
libAddress(address) := _libAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token = Token(_tokenAddress)

IRs:
TMP_44 = CONVERT _tokenAddress to Token
token(Token) := TMP_44(Token)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
offchainUploaderAddress = _offchainUploaderAddress

IRs:
offchainUploaderAddress(address) := _offchainUploaderAddress(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
setKYCAddress = _setKYCAddress

IRs:
setKYCAddress(address) := _setKYCAddress(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setRateAddress = _setRateAddress

IRs:
setRateAddress(address) := _setRateAddress(address)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
7->1;
}
// Function: 3972.sol-Ico-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buy()

IRs:
INTERNAL_CALL, Ico.buy()()"];
}
// Function: 3972.sol-Ico-forOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_51(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3972.sol-Ico-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_43(bool) = owner == msg.sender
RETURN TMP_43"];
}
// Function: 3972.sol-Ico-offchainUpload(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-replaceOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_41(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3972.sol-Ico-setCurrentPhase(Ico.phaseType)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-setCurrentRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-setKYC(address[],address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-setTransferRight(address[],address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-setVesting(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_trg = libAddress

IRs:
_trg(address) := libAddress(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 3972.sol-Ico-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
currentRateM = 1e3

IRs:
currentRateM(uint256) := 1000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
privateSale1Hardcap = 4e16

IRs:
privateSale1Hardcap(uint256) := 40000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
privateSale2Hardcap = 64e15

IRs:
privateSale2Hardcap(uint256) := 64000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
thisBalance = 44e16

IRs:
thisBalance(uint256) := 440000000000000000(uint256)"];
}
// Function: 3972.sol-Owned-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_owner == 0x00

IRs:
TMP_0(bool) = _owner == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 3972.sol-Owned-forOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_4(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3972.sol-Owned-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_3(bool) = owner == msg.sender
RETURN TMP_3"];
}
// Function: 3972.sol-Owned-replaceOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_1(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3972.sol-Owned-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3972.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_6(uint256) = a + b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_7(bool) = c >= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3972.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_18(uint256) = a / b
RETURN TMP_18"];
}
// Function: 3972.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_12(uint256) = a * b
c(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c == 0 || c / a == b)

IRs:
TMP_13(bool) = c == 0
TMP_14(uint256) = c / a
TMP_15(bool) = TMP_14 == b
TMP_16(bool) = TMP_13 || TMP_15
TMP_17(None) = SOLIDITY_CALL assert(bool)(TMP_16)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3972.sol-SafeMath-pow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a ** b

IRs:
TMP_19(uint256) = a ** b
c(uint256) := TMP_19(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c % a == 0)

IRs:
TMP_20(uint256) = c % a
TMP_21(bool) = TMP_20 == 0
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
a ** b

IRs:
TMP_23(uint256) = a ** b
RETURN TMP_23"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3972.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a - b

IRs:
TMP_9(uint256) = a - b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c <= a)

IRs:
TMP_10(bool) = c <= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3972.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_remaining

IRs:
RETURN _remaining"];
}
// Function: 3972.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 3972.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balance

IRs:
RETURN _balance"];
}
// Function: 3972.sol-Token-bulkTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 3972.sol-Token-changeDBAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
forOwner()

IRs:
MODIFIER_CALL, Owned.forOwner()()"];
}
// Function: 3972.sol-Token-changeIcoAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
forOwner()

IRs:
MODIFIER_CALL, Owned.forOwner()()"];
}
// Function: 3972.sol-Token-changeLibAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
forOwner()

IRs:
MODIFIER_CALL, Owned.forOwner()()"];
}
// Function: 3972.sol-Token-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_owner == 0x00

IRs:
TMP_30(bool) = _owner == 0
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 3972.sol-Token-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_34(None) = SOLIDITY_CALL revert()()"];
}
// Function: 3972.sol-Token-forOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_38(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3972.sol-Token-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_33(bool) = owner == msg.sender
RETURN TMP_33"];
}
// Function: 3972.sol-Token-replaceOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_31(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3972.sol-Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Inlock token

IRs:
name(string) := Inlock token(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = ILK

IRs:
symbol(string) := ILK(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalSupply = 44e16

IRs:
totalSupply(uint256) := 440000000000000000(uint256)"];
}
// Function: 3972.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 3972.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 3972.sol-TokenDB-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_success,_balance)

IRs:
RETURN _success,_balance"];
}
// Function: 3972.sol-TokenDB-bulkTransfer(address,address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 3972.sol-TokenDB-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_owner == 0x00

IRs:
TMP_24(bool) = _owner == 0
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 3972.sol-TokenDB-forOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_28(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3972.sol-TokenDB-getAllowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_success,_remaining)

IRs:
RETURN _success,_remaining"];
}
// Function: 3972.sol-TokenDB-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_27(bool) = owner == msg.sender
RETURN TMP_27"];
}
// Function: 3972.sol-TokenDB-replaceOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner())

IRs:
TMP_25(bool) = INTERNAL_CALL, Owned.isOwner()()
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3972.sol-TokenDB-setAllowance(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 3972.sol-TokenDB-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3972.sol-TokenDB-transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_success

IRs:
RETURN _success"];
}
}
