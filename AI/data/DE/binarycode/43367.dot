digraph G {
// Function: 43367.sol-AddressRecord-logicAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(logicAddr != address(0),logic-proxy-address-required)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = logicAddr != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,logic-proxy-address-required)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(RegistryInterface(registry).logic(logicAddr),logic-not-authorised)

IRs:
TMP_3 = CONVERT registry to RegistryInterface
TMP_4(bool) = HIGH_LEVEL_CALL, dest:TMP_3(RegistryInterface), function:logic, arguments:['logicAddr']  
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,logic-not-authorised)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 43367.sol-RegistryInterface-logic(address)
digraph{
}
// Function: 43367.sol-RegistryInterface-record(address,address)
digraph{
}
// Function: 43367.sol-UserAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isAuth(msg.sender),permission-denied)

IRs:
TMP_19(bool) = INTERNAL_CALL, UserAuth.isAuth(address)(msg.sender)
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,permission-denied)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 43367.sol-UserAuth-isAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == owner

IRs:
TMP_10(bool) = src == owner
CONDITION TMP_10"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == address(this)

IRs:
TMP_11 = CONVERT this to address
TMP_12(bool) = src == TMP_11
CONDITION TMP_12"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 43367.sol-UserAuth-logicAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(logicAddr != address(0),logic-proxy-address-required)

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = logicAddr != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,logic-proxy-address-required)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(RegistryInterface(registry).logic(logicAddr),logic-not-authorised)

IRs:
TMP_16 = CONVERT registry to RegistryInterface
TMP_17(bool) = HIGH_LEVEL_CALL, dest:TMP_16(RegistryInterface), function:logic, arguments:['logicAddr']  
TMP_18(None) = SOLIDITY_CALL require(bool,string)(TMP_17,logic-not-authorised)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 43367.sol-UserAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
RegistryInterface(registry).record(owner,nextOwner)

IRs:
TMP_6 = CONVERT registry to RegistryInterface
HIGH_LEVEL_CALL, dest:TMP_6(RegistryInterface), function:record, arguments:['owner', 'nextOwner']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = nextOwner

IRs:
owner(address) := nextOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogSetOwner(nextOwner)

IRs:
Emit LogSetOwner(nextOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, UserAuth.auth()()"];
4->1;
}
// Function: 43367.sol-UserNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 43367.sol-UserWallet-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isAuth(msg.sender),permission-denied)

IRs:
TMP_34(bool) = INTERNAL_CALL, UserAuth.isAuth(address)(msg.sender)
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,permission-denied)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 43367.sol-UserWallet-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registry = msg.sender

IRs:
registry(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 43367.sol-UserWallet-execute(address,bytes,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
LogExecute(_target,_src,_session)

IRs:
Emit LogExecute(_target,_src,_session)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->7;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
note()

IRs:
MODIFIER_CALL, UserNote.note()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, UserAuth.auth()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
logicAuth(_target)

IRs:
MODIFIER_CALL, AddressRecord.logicAuth(address)(_target)"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
response

IRs:
RETURN response"];
}
// Function: 43367.sol-UserWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 43367.sol-UserWallet-isAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == owner

IRs:
TMP_26(bool) = src == owner
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == address(this)

IRs:
TMP_27 = CONVERT this to address
TMP_28(bool) = src == TMP_27
CONDITION TMP_28"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 43367.sol-UserWallet-logicAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(logicAddr != address(0),logic-proxy-address-required)

IRs:
TMP_36 = CONVERT 0 to address
TMP_37(bool) = logicAddr != TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,logic-proxy-address-required)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(RegistryInterface(registry).logic(logicAddr),logic-not-authorised)

IRs:
TMP_39 = CONVERT registry to RegistryInterface
TMP_40(bool) = HIGH_LEVEL_CALL, dest:TMP_39(RegistryInterface), function:logic, arguments:['logicAddr']  
TMP_41(None) = SOLIDITY_CALL require(bool,string)(TMP_40,logic-not-authorised)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 43367.sol-UserWallet-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 43367.sol-UserWallet-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
RegistryInterface(registry).record(owner,nextOwner)

IRs:
TMP_22 = CONVERT registry to RegistryInterface
HIGH_LEVEL_CALL, dest:TMP_22(RegistryInterface), function:record, arguments:['owner', 'nextOwner']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = nextOwner

IRs:
owner(address) := nextOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogSetOwner(nextOwner)

IRs:
Emit LogSetOwner(nextOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, UserAuth.auth()()"];
4->1;
}
}
