digraph G {
// Function: 44417.sol-CheckInterface-isOk()
digraph{
}
// Function: 44417.sol-ConnectorsInterface-isConnector(address[])
digraph{
}
// Function: 44417.sol-ConnectorsInterface-isStaticConnector(address[])
digraph{
}
// Function: 44417.sol-IndexInterface-check(uint256)
digraph{
}
// Function: 44417.sol-IndexInterface-connectors(uint256)
digraph{
}
// Function: 44417.sol-IndexInterface-list()
digraph{
}
// Function: 44417.sol-InstaAccount-cast(address[],bytes[],address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isAuth(msg.sender) || msg.sender == instaIndex,permission-denied)

IRs:
TMP_74(bool) = INTERNAL_CALL, Record.isAuth(address)(msg.sender)
TMP_75(bool) = msg.sender == instaIndex
TMP_76(bool) = TMP_74 || TMP_75
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,permission-denied)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_targets.length == _datas.length,array-length-invalid)

IRs:
REF_20 -> LENGTH _targets
REF_21 -> LENGTH _datas
TMP_78(bool) = REF_20 == REF_21
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,array-length-invalid)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
indexContract = IndexInterface(instaIndex)

IRs:
TMP_80 = CONVERT instaIndex to IndexInterface
indexContract(IndexInterface) := TMP_80(IndexInterface)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
isShield = shield

IRs:
isShield(bool) := shield(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! isShield

IRs:
TMP_81 = UnaryType.BANG isShield 
CONDITION TMP_81"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets),not-connector)

IRs:
TMP_82(address) = HIGH_LEVEL_CALL, dest:indexContract(IndexInterface), function:connectors, arguments:['version']  
TMP_83 = CONVERT TMP_82 to ConnectorsInterface
TMP_84(bool) = HIGH_LEVEL_CALL, dest:TMP_83(ConnectorsInterface), function:isConnector, arguments:['_targets']  
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,not-connector)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets),not-static-connector)

IRs:
TMP_86(address) = HIGH_LEVEL_CALL, dest:indexContract(IndexInterface), function:connectors, arguments:['version']  
TMP_87 = CONVERT TMP_86 to ConnectorsInterface
TMP_88(bool) = HIGH_LEVEL_CALL, dest:TMP_87(ConnectorsInterface), function:isStaticConnector, arguments:['_targets']  
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,not-static-connector)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->15;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _targets.length

IRs:
REF_26 -> LENGTH _targets
TMP_90(bool) = i < REF_26
CONDITION TMP_90"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
spell(_targets[i],_datas[i])

IRs:
REF_27(address) -> _targets[i]
REF_28(bytes) -> _datas[i]
INTERNAL_CALL, InstaAccount.spell(address,bytes)(REF_27,REF_28)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_92(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
_check = indexContract.check(version)

IRs:
TMP_93(address) = HIGH_LEVEL_CALL, dest:indexContract(IndexInterface), function:check, arguments:['version']  
_check(address) := TMP_93(address)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_check != address(0) && ! isShield

IRs:
TMP_94 = CONVERT 0 to address
TMP_95(bool) = _check != TMP_94
TMP_96 = UnaryType.BANG isShield 
TMP_97(bool) = TMP_95 && TMP_96
CONDITION TMP_97"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
require(bool,string)(CheckInterface(_check).isOk(),not-ok)

IRs:
TMP_98 = CONVERT _check to CheckInterface
TMP_99(bool) = HIGH_LEVEL_CALL, dest:TMP_98(CheckInterface), function:isOk, arguments:[]  
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,not-ok)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LogCast(_origin,msg.sender,msg.value)

IRs:
Emit LogCast(_origin,msg.sender,msg.value)"];
}
// Function: 44417.sol-InstaAccount-disable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),not-self)

IRs:
TMP_50 = CONVERT this to address
TMP_51(bool) = msg.sender == TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool,string)(TMP_51,not-self)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(user != address(0),not-valid)

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = user != TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,not-valid)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(auth[user],already-disabled)

IRs:
REF_16(bool) -> auth[user]
TMP_56(None) = SOLIDITY_CALL require(bool,string)(REF_16,already-disabled)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete auth[user]

IRs:
REF_17(bool) -> auth[user]
auth = delete REF_17 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ListInterface(IndexInterface(instaIndex).list()).removeAuth(user)

IRs:
TMP_57 = CONVERT instaIndex to IndexInterface
TMP_58(address) = HIGH_LEVEL_CALL, dest:TMP_57(IndexInterface), function:list, arguments:[]  
TMP_59 = CONVERT TMP_58 to ListInterface
HIGH_LEVEL_CALL, dest:TMP_59(ListInterface), function:removeAuth, arguments:['user']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LogDisable(user)

IRs:
Emit LogDisable(user)"];
}
// Function: 44417.sol-InstaAccount-enable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this) || msg.sender == instaIndex,not-self-index)

IRs:
TMP_35 = CONVERT this to address
TMP_36(bool) = msg.sender == TMP_35
TMP_37(bool) = msg.sender == instaIndex
TMP_38(bool) = TMP_36 || TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,not-self-index)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(user != address(0),not-valid)

IRs:
TMP_40 = CONVERT 0 to address
TMP_41(bool) = user != TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool,string)(TMP_41,not-valid)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(! auth[user],already-enabled)

IRs:
REF_12(bool) -> auth[user]
TMP_43 = UnaryType.BANG REF_12 
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,already-enabled)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth[user] = true

IRs:
REF_13(bool) -> auth[user]
REF_13(bool) (->auth) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ListInterface(IndexInterface(instaIndex).list()).addAuth(user)

IRs:
TMP_45 = CONVERT instaIndex to IndexInterface
TMP_46(address) = HIGH_LEVEL_CALL, dest:TMP_45(IndexInterface), function:list, arguments:[]  
TMP_47 = CONVERT TMP_46 to ListInterface
HIGH_LEVEL_CALL, dest:TMP_47(ListInterface), function:addAuth, arguments:['user']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LogEnable(user)

IRs:
Emit LogEnable(user)"];
}
// Function: 44417.sol-InstaAccount-isAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
auth[user]

IRs:
REF_10(bool) -> auth[user]
RETURN REF_10"];
}
// Function: 44417.sol-InstaAccount-receive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 44417.sol-InstaAccount-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
instaIndex = 0x0000000000000000000000000000000000000000

IRs:
instaIndex(address) := 0(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
version = 1

IRs:
version(uint256) := 1(uint256)"];
}
// Function: 44417.sol-InstaAccount-spell(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_target != address(0),target-invalid)

IRs:
TMP_62 = CONVERT 0 to address
TMP_63(bool) = _target != TMP_62
TMP_64(None) = SOLIDITY_CALL require(bool,string)(TMP_63,target-invalid)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
succeeded_spell_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_target,_data + 0x20,mload(uint256)(_data),0,0)

IRs:
TMP_65(uint256) = SOLIDITY_CALL gas()()
TMP_66(bytes) = _data + 32
TMP_67(uint256) = SOLIDITY_CALL mload(uint256)(_data)
TMP_68(uint256) = SOLIDITY_CALL delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(TMP_65,_target,TMP_66,TMP_67,0,0)
succeeded_spell_asm_0(uint256) := TMP_68(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
switch_expr_2527_230_0_spell_asm_0 = ! succeeded_spell_asm_0

IRs:
TMP_69 = UnaryType.BANG succeeded_spell_asm_0 
switch_expr_2527_230_0_spell_asm_0(uint256) := TMP_69(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
switch_expr_2527_230_0_spell_asm_0 == 1

IRs:
TMP_70(bool) = switch_expr_2527_230_0_spell_asm_0 == 1
CONDITION TMP_70"];
7->9[label="True"];
7->8[label="False"];
8[label="Node Type: END_IF 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
size_spell_asm_0 = returndatasize()()

IRs:
TMP_71(uint256) = SOLIDITY_CALL returndatasize()()
size_spell_asm_0(uint256) := TMP_71(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
returndatacopy(uint256,uint256,uint256)(0x00,0x00,size_spell_asm_0)

IRs:
TMP_72(None) = SOLIDITY_CALL returndatacopy(uint256,uint256,uint256)(0,0,size_spell_asm_0)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
revert(uint256,uint256)(0x00,size_spell_asm_0)

IRs:
TMP_73(None) = SOLIDITY_CALL revert(uint256,uint256)(0,size_spell_asm_0)"];
12->8;
13[label="Node Type: END INLINE ASM 13
"];
}
// Function: 44417.sol-InstaAccount-switchShield(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(auth[msg.sender],not-self)

IRs:
REF_11(bool) -> auth[msg.sender]
TMP_31(None) = SOLIDITY_CALL require(bool,string)(REF_11,not-self)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(shield != _shield,shield is set)

IRs:
TMP_32(bool) = shield != _shield
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,shield is set)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
shield = _shield

IRs:
shield(bool) := _shield(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogSwitchShield(shield)

IRs:
Emit LogSwitchShield(shield)"];
}
// Function: 44417.sol-ListInterface-addAuth(address)
digraph{
}
// Function: 44417.sol-ListInterface-removeAuth(address)
digraph{
}
// Function: 44417.sol-Record-disable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this),not-self)

IRs:
TMP_19 = CONVERT this to address
TMP_20(bool) = msg.sender == TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool,string)(TMP_20,not-self)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(user != address(0),not-valid)

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = user != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,not-valid)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(auth[user],already-disabled)

IRs:
REF_6(bool) -> auth[user]
TMP_25(None) = SOLIDITY_CALL require(bool,string)(REF_6,already-disabled)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete auth[user]

IRs:
REF_7(bool) -> auth[user]
auth = delete REF_7 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ListInterface(IndexInterface(instaIndex).list()).removeAuth(user)

IRs:
TMP_26 = CONVERT instaIndex to IndexInterface
TMP_27(address) = HIGH_LEVEL_CALL, dest:TMP_26(IndexInterface), function:list, arguments:[]  
TMP_28 = CONVERT TMP_27 to ListInterface
HIGH_LEVEL_CALL, dest:TMP_28(ListInterface), function:removeAuth, arguments:['user']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LogDisable(user)

IRs:
Emit LogDisable(user)"];
}
// Function: 44417.sol-Record-enable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(this) || msg.sender == instaIndex,not-self-index)

IRs:
TMP_4 = CONVERT this to address
TMP_5(bool) = msg.sender == TMP_4
TMP_6(bool) = msg.sender == instaIndex
TMP_7(bool) = TMP_5 || TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,not-self-index)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(user != address(0),not-valid)

IRs:
TMP_9 = CONVERT 0 to address
TMP_10(bool) = user != TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,not-valid)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(! auth[user],already-enabled)

IRs:
REF_2(bool) -> auth[user]
TMP_12 = UnaryType.BANG REF_2 
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,already-enabled)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth[user] = true

IRs:
REF_3(bool) -> auth[user]
REF_3(bool) (->auth) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ListInterface(IndexInterface(instaIndex).list()).addAuth(user)

IRs:
TMP_14 = CONVERT instaIndex to IndexInterface
TMP_15(address) = HIGH_LEVEL_CALL, dest:TMP_14(IndexInterface), function:list, arguments:[]  
TMP_16 = CONVERT TMP_15 to ListInterface
HIGH_LEVEL_CALL, dest:TMP_16(ListInterface), function:addAuth, arguments:['user']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LogEnable(user)

IRs:
Emit LogEnable(user)"];
}
// Function: 44417.sol-Record-isAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
auth[user]

IRs:
REF_0(bool) -> auth[user]
RETURN REF_0"];
}
// Function: 44417.sol-Record-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
instaIndex = 0x0000000000000000000000000000000000000000

IRs:
instaIndex(address) := 0(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
version = 1

IRs:
version(uint256) := 1(uint256)"];
}
// Function: 44417.sol-Record-switchShield(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(auth[msg.sender],not-self)

IRs:
REF_1(bool) -> auth[msg.sender]
TMP_0(None) = SOLIDITY_CALL require(bool,string)(REF_1,not-self)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(shield != _shield,shield is set)

IRs:
TMP_1(bool) = shield != _shield
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,shield is set)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
shield = _shield

IRs:
shield(bool) := _shield(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogSwitchShield(shield)

IRs:
Emit LogSwitchShield(shield)"];
}
}
