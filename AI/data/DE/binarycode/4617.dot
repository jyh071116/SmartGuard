digraph G {
// Function: 4617.sol-Proxy-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_masterCopy != 0,Invalid master copy address provided)

IRs:
TMP_0(bool) = _masterCopy != 0
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,Invalid master copy address provided)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
masterCopy = _masterCopy

IRs:
masterCopy(address) := _masterCopy(address)"];
}
// Function: 4617.sol-Proxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 4617.sol-Proxy-implementation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
masterCopy

IRs:
RETURN masterCopy"];
}
// Function: 4617.sol-Proxy-proxyType()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
2

IRs:
RETURN 2"];
}
// Function: 4617.sol-ProxyFactory-createProxy(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = new Proxy(masterCopy)

IRs:
TMP_3(Proxy) = new Proxy(masterCopy) 
proxy(Proxy) := TMP_3(Proxy)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
data.length > 0

IRs:
REF_0 -> LENGTH data
TMP_4(bool) = REF_0 > 0
CONDITION TMP_4"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ProxyCreation(proxy)

IRs:
Emit ProxyCreation(proxy)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
proxy

IRs:
RETURN proxy"];
}
}
