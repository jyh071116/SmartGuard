digraph G {
// Function: 5854.sol-Court-_closeMotion(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete targetMotionID[motionTarget[motionID]]

IRs:
REF_251(address) -> motionTarget[motionID]
REF_252(uint256) -> targetMotionID[REF_251]
targetMotionID = delete REF_252 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete motionTarget[motionID]

IRs:
REF_253(address) -> motionTarget[motionID]
motionTarget = delete REF_253 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete motionStartTime[motionID]

IRs:
REF_254(uint256) -> motionStartTime[motionID]
motionStartTime = delete REF_254 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete votesFor[motionID]

IRs:
REF_255(uint256) -> votesFor[motionID]
votesFor = delete REF_255 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete votesAgainst[motionID]

IRs:
REF_256(uint256) -> votesAgainst[motionID]
votesAgainst = delete REF_256 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MotionClosed(motionID)

IRs:
Emit MotionClosed(motionID)"];
}
// Function: 5854.sol-Court-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_944(bool) = msg.sender == nominatedOwner
TMP_945(None) = SOLIDITY_CALL require(bool)(TMP_944)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_947 = CONVERT 0 to address
nominatedOwner(address) := TMP_947(address)"];
}
// Function: 5854.sol-Court-addIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
x + y >= y

IRs:
TMP_948(uint256) = x + y
TMP_949(bool) = TMP_948 >= y
RETURN TMP_949"];
}
// Function: 5854.sol-Court-approveMotion(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(motionConfirming(motionID) && motionPasses(motionID))

IRs:
TMP_1073(bool) = INTERNAL_CALL, Court.motionConfirming(uint256)(motionID)
TMP_1074(bool) = INTERNAL_CALL, Court.motionPasses(uint256)(motionID)
TMP_1075(bool) = TMP_1073 && TMP_1074
TMP_1076(None) = SOLIDITY_CALL require(bool)(TMP_1075)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
target = motionTarget[motionID]

IRs:
REF_257(address) -> motionTarget[motionID]
target(address) := REF_257(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nomin.freezeAndConfiscate(target)

IRs:
HIGH_LEVEL_CALL, dest:nomin(Nomin), function:freezeAndConfiscate, arguments:['target']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_closeMotion(motionID)

IRs:
INTERNAL_CALL, Court._closeMotion(uint256)(motionID)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
MotionApproved(motionID)

IRs:
Emit MotionApproved(motionID)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 5854.sol-Court-beginMotion(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((havven.issuanceLastAverageBalance(msg.sender) >= minStandingBalance) || msg.sender == owner)

IRs:
TMP_1019(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:issuanceLastAverageBalance, arguments:['msg.sender']  
TMP_1020(bool) = TMP_1019 >= minStandingBalance
TMP_1021(bool) = msg.sender == owner
TMP_1022(bool) = TMP_1020 || TMP_1021
TMP_1023(None) = SOLIDITY_CALL require(bool)(TMP_1022)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(votingPeriod <= havven.feePeriodDuration())

IRs:
TMP_1024(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:feePeriodDuration, arguments:[]  
TMP_1025(bool) = votingPeriod <= TMP_1024
TMP_1026(None) = SOLIDITY_CALL require(bool)(TMP_1025)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(targetMotionID[target] == 0)

IRs:
REF_213(uint256) -> targetMotionID[target]
TMP_1027(bool) = REF_213 == 0
TMP_1028(None) = SOLIDITY_CALL require(bool)(TMP_1027)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! nomin.frozen(target))

IRs:
TMP_1029(bool) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:frozen, arguments:['target']  
TMP_1030 = UnaryType.BANG TMP_1029 
TMP_1031(None) = SOLIDITY_CALL require(bool)(TMP_1030)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
havven.rolloverFeePeriodIfElapsed()

IRs:
HIGH_LEVEL_CALL, dest:havven(Havven), function:rolloverFeePeriodIfElapsed, arguments:[]  "];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
motionID = nextMotionID ++

IRs:
TMP_1033(uint256) := nextMotionID(uint256)
nextMotionID(uint256) = nextMotionID + 1
motionID(uint256) := TMP_1033(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
motionTarget[motionID] = target

IRs:
REF_216(address) -> motionTarget[motionID]
REF_216(address) (->motionTarget) := target(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
targetMotionID[target] = motionID

IRs:
REF_217(uint256) -> targetMotionID[target]
REF_217(uint256) (->targetMotionID) := motionID(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
startTime = havven.feePeriodStartTime() + havven.feePeriodDuration()

IRs:
TMP_1034(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:feePeriodStartTime, arguments:[]  
TMP_1035(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:feePeriodDuration, arguments:[]  
TMP_1036(uint256) = TMP_1034 + TMP_1035
startTime(uint256) := TMP_1036(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
motionStartTime[motionID] = startTime

IRs:
REF_220(uint256) -> motionStartTime[motionID]
REF_220(uint256) (->motionStartTime) := startTime(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
MotionBegun(msg.sender,target,motionID,startTime)

IRs:
Emit MotionBegun(msg.sender,target,motionID,startTime)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
motionID

IRs:
RETURN motionID"];
}
// Function: 5854.sol-Court-cancelVote(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! motionConfirming(motionID))

IRs:
TMP_1054(bool) = INTERNAL_CALL, Court.motionConfirming(uint256)(motionID)
TMP_1055 = UnaryType.BANG TMP_1054 
TMP_1056(None) = SOLIDITY_CALL require(bool)(TMP_1055)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
senderVote = vote[msg.sender][motionID]

IRs:
REF_235(mapping(uint256 => Court.Vote)) -> vote[msg.sender]
REF_236(Court.Vote) -> REF_235[motionID]
senderVote(Court.Vote) := REF_236(Court.Vote)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(senderVote != Vote.Abstention)

IRs:
REF_237(Court.Vote) -> Vote.Abstention
TMP_1057(bool) = senderVote != REF_237
TMP_1058(None) = SOLIDITY_CALL require(bool)(TMP_1057)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
motionVoting(motionID)

IRs:
TMP_1059(bool) = INTERNAL_CALL, Court.motionVoting(uint256)(motionID)
CONDITION TMP_1059"];
4->5[label="True"];
4->10[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
senderVote == Vote.Yea

IRs:
REF_238(Court.Vote) -> Vote.Yea
TMP_1060(bool) = senderVote == REF_238
CONDITION TMP_1060"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
votesFor[motionID] = safeSub(votesFor[motionID],voteWeight[msg.sender][motionID])

IRs:
REF_239(uint256) -> votesFor[motionID]
REF_240(uint256) -> votesFor[motionID]
REF_241(mapping(uint256 => uint256)) -> voteWeight[msg.sender]
REF_242(uint256) -> REF_241[motionID]
TMP_1061(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(REF_240,REF_242)
REF_239(uint256) (->votesFor) := TMP_1061(uint256)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
votesAgainst[motionID] = safeSub(votesAgainst[motionID],voteWeight[msg.sender][motionID])

IRs:
REF_243(uint256) -> votesAgainst[motionID]
REF_244(uint256) -> votesAgainst[motionID]
REF_245(mapping(uint256 => uint256)) -> voteWeight[msg.sender]
REF_246(uint256) -> REF_245[motionID]
TMP_1062(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(REF_244,REF_246)
REF_243(uint256) (->votesAgainst) := TMP_1062(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
VoteCancelled(msg.sender,motionID)

IRs:
Emit VoteCancelled(msg.sender,motionID)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete voteWeight[msg.sender][motionID]

IRs:
REF_247(mapping(uint256 => uint256)) -> voteWeight[msg.sender]
REF_248(uint256) -> REF_247[motionID]
REF_247 = delete REF_248 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete vote[msg.sender][motionID]

IRs:
REF_249(mapping(uint256 => Court.Vote)) -> vote[msg.sender]
REF_250(Court.Vote) -> REF_249[motionID]
REF_249 = delete REF_250 "];
}
// Function: 5854.sol-Court-closeMotion(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((motionConfirming(motionID) && ! motionPasses(motionID)) || motionWaiting(motionID))

IRs:
TMP_1065(bool) = INTERNAL_CALL, Court.motionConfirming(uint256)(motionID)
TMP_1066(bool) = INTERNAL_CALL, Court.motionPasses(uint256)(motionID)
TMP_1067 = UnaryType.BANG TMP_1066 
TMP_1068(bool) = TMP_1065 && TMP_1067
TMP_1069(bool) = INTERNAL_CALL, Court.motionWaiting(uint256)(motionID)
TMP_1070(bool) = TMP_1068 || TMP_1069
TMP_1071(None) = SOLIDITY_CALL require(bool)(TMP_1070)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_closeMotion(motionID)

IRs:
INTERNAL_CALL, Court._closeMotion(uint256)(motionID)"];
}
// Function: 5854.sol-Court-constructor(Havven,Nomin,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
havven = _havven

IRs:
havven(Havven) := _havven(Havven)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nomin = _nomin

IRs:
nomin(Nomin) := _nomin(Nomin)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 5854.sol-Court-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_937 = CONVERT 0 to address
TMP_938(bool) = _owner != TMP_937
TMP_939(None) = SOLIDITY_CALL require(bool)(TMP_938)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_940 = CONVERT 0 to address
Emit OwnerChanged(TMP_940,_owner)"];
}
// Function: 5854.sol-Court-divIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y != 0

IRs:
TMP_969(bool) = y != 0
RETURN TMP_969"];
}
// Function: 5854.sol-Court-hasVoted(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
vote[account][motionID] != Vote.Abstention

IRs:
REF_208(mapping(uint256 => Court.Vote)) -> vote[account]
REF_209(Court.Vote) -> REF_208[motionID]
REF_210(Court.Vote) -> Vote.Abstention
TMP_1018(bool) = REF_209 != REF_210
RETURN TMP_1018"];
}
// Function: 5854.sol-Court-intToDec(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(i,UNIT)

IRs:
TMP_975(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(i,UNIT)
RETURN TMP_975"];
}
// Function: 5854.sol-Court-motionConfirming(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startTime = motionStartTime[motionID]

IRs:
REF_203(uint256) -> motionStartTime[motionID]
startTime(uint256) := REF_203(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
startTime + votingPeriod <= now && now < startTime + votingPeriod + confirmationPeriod

IRs:
TMP_1001(uint256) = startTime + votingPeriod
TMP_1002(bool) = TMP_1001 <= now
TMP_1003(uint256) = startTime + votingPeriod
TMP_1004(uint256) = TMP_1003 + confirmationPeriod
TMP_1005(bool) = now < TMP_1004
TMP_1006(bool) = TMP_1002 && TMP_1005
RETURN TMP_1006"];
}
// Function: 5854.sol-Court-motionPasses(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
yeas = votesFor[motionID]

IRs:
REF_205(uint256) -> votesFor[motionID]
yeas(uint256) := REF_205(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nays = votesAgainst[motionID]

IRs:
REF_206(uint256) -> votesAgainst[motionID]
nays(uint256) := REF_206(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
totalVotes = safeAdd(yeas,nays)

IRs:
TMP_1010(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(yeas,nays)
totalVotes(uint256) := TMP_1010(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
totalVotes == 0

IRs:
TMP_1011(bool) = totalVotes == 0
CONDITION TMP_1011"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
participation = safeDiv_dec(totalVotes,havven.totalIssuanceLastAverageBalance())

IRs:
TMP_1012(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:totalIssuanceLastAverageBalance, arguments:[]  
TMP_1013(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv_dec(uint256,uint256)(totalVotes,TMP_1012)
participation(uint256) := TMP_1013(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
fractionInFavour = safeDiv_dec(yeas,totalVotes)

IRs:
TMP_1014(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv_dec(uint256,uint256)(yeas,totalVotes)
fractionInFavour(uint256) := TMP_1014(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
participation > requiredParticipation && fractionInFavour > requiredMajority

IRs:
TMP_1015(bool) = participation > requiredParticipation
TMP_1016(bool) = fractionInFavour > requiredMajority
TMP_1017(bool) = TMP_1015 && TMP_1016
RETURN TMP_1017"];
}
// Function: 5854.sol-Court-motionVoting(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
motionStartTime[motionID] < now && now < motionStartTime[motionID] + votingPeriod

IRs:
REF_201(uint256) -> motionStartTime[motionID]
TMP_997(bool) = REF_201 < now
REF_202(uint256) -> motionStartTime[motionID]
TMP_998(uint256) = REF_202 + votingPeriod
TMP_999(bool) = now < TMP_998
TMP_1000(bool) = TMP_997 && TMP_999
RETURN TMP_1000"];
}
// Function: 5854.sol-Court-motionWaiting(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
motionStartTime[motionID] + votingPeriod + confirmationPeriod <= now

IRs:
REF_204(uint256) -> motionStartTime[motionID]
TMP_1007(uint256) = REF_204 + votingPeriod
TMP_1008(uint256) = TMP_1007 + confirmationPeriod
TMP_1009(bool) = TMP_1008 <= now
RETURN TMP_1009"];
}
// Function: 5854.sol-Court-mulIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_958(bool) = x == 0
CONDITION TMP_958"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(x * y) / x == y

IRs:
TMP_959(uint256) = x * y
TMP_960(uint256) = TMP_959 / x
TMP_961(bool) = TMP_960 == y
RETURN TMP_961"];
}
// Function: 5854.sol-Court-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Court-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1096(bool) = msg.sender == owner
TMP_1097(None) = SOLIDITY_CALL require(bool)(TMP_1096)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Court-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x + y >= y)

IRs:
TMP_950(uint256) = x + y
TMP_951(bool) = TMP_950 >= y
TMP_952(None) = SOLIDITY_CALL require(bool)(TMP_951)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_953(uint256) = x + y
RETURN TMP_953"];
}
// Function: 5854.sol-Court-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y != 0)

IRs:
TMP_970(bool) = y != 0
TMP_971(None) = SOLIDITY_CALL require(bool)(TMP_970)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x / y

IRs:
TMP_972(uint256) = x / y
RETURN TMP_972"];
}
// Function: 5854.sol-Court-safeDiv_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv(safeMul(x,UNIT),y)

IRs:
TMP_973(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,UNIT)
TMP_974(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv(uint256,uint256)(TMP_973,y)
RETURN TMP_974"];
}
// Function: 5854.sol-Court-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_962(bool) = x == 0
CONDITION TMP_962"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
p = x * y

IRs:
TMP_963(uint256) = x * y
p(uint256) := TMP_963(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(p / x == y)

IRs:
TMP_964(uint256) = p / x
TMP_965(bool) = TMP_964 == y
TMP_966(None) = SOLIDITY_CALL require(bool)(TMP_965)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
p

IRs:
RETURN p"];
}
// Function: 5854.sol-Court-safeMul_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(x,y) / UNIT

IRs:
TMP_967(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,y)
TMP_968(uint256) = TMP_967 / UNIT
RETURN TMP_968"];
}
// Function: 5854.sol-Court-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y <= x)

IRs:
TMP_955(bool) = y <= x
TMP_956(None) = SOLIDITY_CALL require(bool)(TMP_955)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_957(uint256) = x - y
RETURN TMP_957"];
}
// Function: 5854.sol-Court-setConfirmationPeriod(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(MIN_CONFIRMATION_PERIOD <= duration && duration <= MAX_CONFIRMATION_PERIOD)

IRs:
TMP_986(bool) = MIN_CONFIRMATION_PERIOD <= duration
TMP_987(bool) = duration <= MAX_CONFIRMATION_PERIOD
TMP_988(bool) = TMP_986 && TMP_987
TMP_989(None) = SOLIDITY_CALL require(bool)(TMP_988)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmationPeriod = duration

IRs:
confirmationPeriod(uint256) := duration(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Court-setMinStandingBalance(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minStandingBalance = balance

IRs:
minStandingBalance(uint256) := balance(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 5854.sol-Court-setRequiredMajority(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(MIN_REQUIRED_MAJORITY <= fraction)

IRs:
TMP_994(bool) = MIN_REQUIRED_MAJORITY <= fraction
TMP_995(None) = SOLIDITY_CALL require(bool)(TMP_994)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
requiredMajority = fraction

IRs:
requiredMajority(uint256) := fraction(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Court-setRequiredParticipation(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(MIN_REQUIRED_PARTICIPATION <= fraction)

IRs:
TMP_991(bool) = MIN_REQUIRED_PARTICIPATION <= fraction
TMP_992(None) = SOLIDITY_CALL require(bool)(TMP_991)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
requiredParticipation = fraction

IRs:
requiredParticipation(uint256) := fraction(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Court-setVotingPeriod(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(MIN_VOTING_PERIOD <= duration && duration <= MAX_VOTING_PERIOD)

IRs:
TMP_978(bool) = MIN_VOTING_PERIOD <= duration
TMP_979(bool) = duration <= MAX_VOTING_PERIOD
TMP_980(bool) = TMP_978 && TMP_979
TMP_981(None) = SOLIDITY_CALL require(bool)(TMP_980)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(duration <= havven.feePeriodDuration())

IRs:
TMP_982(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:feePeriodDuration, arguments:[]  
TMP_983(bool) = duration <= TMP_982
TMP_984(None) = SOLIDITY_CALL require(bool)(TMP_983)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
votingPeriod = duration

IRs:
votingPeriod(uint256) := duration(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Court-setupVote(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(motionVoting(motionID))

IRs:
TMP_1038(bool) = INTERNAL_CALL, Court.motionVoting(uint256)(motionID)
TMP_1039(None) = SOLIDITY_CALL require(bool)(TMP_1038)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! hasVoted(msg.sender,motionID))

IRs:
TMP_1040(bool) = INTERNAL_CALL, Court.hasVoted(address,uint256)(msg.sender,motionID)
TMP_1041 = UnaryType.BANG TMP_1040 
TMP_1042(None) = SOLIDITY_CALL require(bool)(TMP_1041)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender != motionTarget[motionID])

IRs:
REF_221(address) -> motionTarget[motionID]
TMP_1043(bool) = msg.sender != REF_221
TMP_1044(None) = SOLIDITY_CALL require(bool)(TMP_1043)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
weight = havven.recomputeLastAverageBalance(msg.sender)

IRs:
TMP_1045(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:recomputeLastAverageBalance, arguments:['msg.sender']  
weight(uint256) := TMP_1045(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(weight > 0)

IRs:
TMP_1046(bool) = weight > 0
TMP_1047(None) = SOLIDITY_CALL require(bool)(TMP_1046)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
voteWeight[msg.sender][motionID] = weight

IRs:
REF_223(mapping(uint256 => uint256)) -> voteWeight[msg.sender]
REF_224(uint256) -> REF_223[motionID]
REF_224(uint256) (->voteWeight) := weight(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
weight

IRs:
RETURN weight"];
}
// Function: 5854.sol-Court-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
UNIT = 10 ** uint256(decimals)

IRs:
TMP_1092 = CONVERT decimals to uint256
TMP_1093(uint256) = 10 ** TMP_1092
UNIT(uint256) := TMP_1093(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MIN_VOTING_PERIOD = 259200

IRs:
MIN_VOTING_PERIOD(uint256) := 259200(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MAX_VOTING_PERIOD = 2419200

IRs:
MAX_VOTING_PERIOD(uint256) := 2419200(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MIN_CONFIRMATION_PERIOD = 86400

IRs:
MIN_CONFIRMATION_PERIOD(uint256) := 86400(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MAX_CONFIRMATION_PERIOD = 1209600

IRs:
MAX_CONFIRMATION_PERIOD(uint256) := 1209600(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MIN_REQUIRED_PARTICIPATION = UNIT / 10

IRs:
TMP_1094(uint256) = UNIT / 10
MIN_REQUIRED_PARTICIPATION(uint256) := TMP_1094(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
MIN_REQUIRED_MAJORITY = UNIT / 2

IRs:
TMP_1095(uint256) = UNIT / 2
MIN_REQUIRED_MAJORITY(uint256) := TMP_1095(uint256)"];
}
// Function: 5854.sol-Court-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
minStandingBalance = 100 * UNIT

IRs:
TMP_1087(uint256) = 100 * UNIT
minStandingBalance(uint256) := TMP_1087(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
votingPeriod = 604800

IRs:
votingPeriod(uint256) := 604800(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
confirmationPeriod = 604800

IRs:
confirmationPeriod(uint256) := 604800(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
requiredParticipation = 3 * UNIT / 10

IRs:
TMP_1088(uint256) = 3 * UNIT
TMP_1089(uint256) = TMP_1088 / 10
requiredParticipation(uint256) := TMP_1089(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
requiredMajority = (2 * UNIT) / 3

IRs:
TMP_1090(uint256) = 2 * UNIT
TMP_1091(uint256) = TMP_1090 / 3
requiredMajority(uint256) := TMP_1091(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
nextMotionID = 1

IRs:
nextMotionID(uint256) := 1(uint256)"];
}
// Function: 5854.sol-Court-subIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y <= x

IRs:
TMP_954(bool) = y <= x
RETURN TMP_954"];
}
// Function: 5854.sol-Court-vetoMotion(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! motionWaiting(motionID))

IRs:
TMP_1081(bool) = INTERNAL_CALL, Court.motionWaiting(uint256)(motionID)
TMP_1082 = UnaryType.BANG TMP_1081 
TMP_1083(None) = SOLIDITY_CALL require(bool)(TMP_1082)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_closeMotion(motionID)

IRs:
INTERNAL_CALL, Court._closeMotion(uint256)(motionID)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MotionVetoed(motionID)

IRs:
Emit MotionVetoed(motionID)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Court-voteAgainst(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weight = setupVote(motionID)

IRs:
TMP_1051(uint256) = INTERNAL_CALL, Court.setupVote(uint256)(motionID)
weight(uint256) := TMP_1051(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vote[msg.sender][motionID] = Vote.Nay

IRs:
REF_230(mapping(uint256 => Court.Vote)) -> vote[msg.sender]
REF_231(Court.Vote) -> REF_230[motionID]
REF_232(Court.Vote) -> Vote.Nay
REF_231(Court.Vote) (->vote) := REF_232(Court.Vote)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
votesAgainst[motionID] = safeAdd(votesAgainst[motionID],weight)

IRs:
REF_233(uint256) -> votesAgainst[motionID]
REF_234(uint256) -> votesAgainst[motionID]
TMP_1052(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(REF_234,weight)
REF_233(uint256) (->votesAgainst) := TMP_1052(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
VotedAgainst(msg.sender,motionID,weight)

IRs:
Emit VotedAgainst(msg.sender,motionID,weight)"];
}
// Function: 5854.sol-Court-voteFor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weight = setupVote(motionID)

IRs:
TMP_1048(uint256) = INTERNAL_CALL, Court.setupVote(uint256)(motionID)
weight(uint256) := TMP_1048(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vote[msg.sender][motionID] = Vote.Yea

IRs:
REF_225(mapping(uint256 => Court.Vote)) -> vote[msg.sender]
REF_226(Court.Vote) -> REF_225[motionID]
REF_227(Court.Vote) -> Vote.Yea
REF_226(Court.Vote) (->vote) := REF_227(Court.Vote)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
votesFor[motionID] = safeAdd(votesFor[motionID],weight)

IRs:
REF_228(uint256) -> votesFor[motionID]
REF_229(uint256) -> votesFor[motionID]
TMP_1049(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(REF_229,weight)
REF_228(uint256) (->votesFor) := TMP_1049(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
VotedFor(msg.sender,motionID,weight)

IRs:
Emit VotedFor(msg.sender,motionID,weight)"];
}
// Function: 5854.sol-ExternStateToken-_internalTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_242 = CONVERT 0 to address
TMP_243(bool) = to != TMP_242
TMP_244(None) = SOLIDITY_CALL require(bool)(TMP_243)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_245 = CONVERT this to address
TMP_246(bool) = to != TMP_245
TMP_247(None) = SOLIDITY_CALL require(bool)(TMP_246)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(to != address(proxy))

IRs:
TMP_248 = CONVERT proxy to address
TMP_249(bool) = to != TMP_248
TMP_250(None) = SOLIDITY_CALL require(bool)(TMP_249)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(from,safeSub(tokenState.balanceOf(from),value))

IRs:
TMP_251(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['from']  
TMP_252(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_251,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['from', 'TMP_252']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(to,safeAdd(tokenState.balanceOf(to),value))

IRs:
TMP_254(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['to']  
TMP_255(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_254,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['to', 'TMP_255']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
emitTransfer(from,to,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,to,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 5854.sol-ExternStateToken-_transferFrom_byProxy(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState.setAllowance(from,sender,safeSub(tokenState.allowance(from,sender),value))

IRs:
TMP_259(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['from', 'sender']  
TMP_260(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_259,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['from', 'sender', 'TMP_260']  "];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_internalTransfer(from,to,value)

IRs:
TMP_262(bool) = INTERNAL_CALL, ExternStateToken._internalTransfer(address,address,uint256)(from,to,value)
RETURN TMP_262"];
}
// Function: 5854.sol-ExternStateToken-_transfer_byProxy(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_internalTransfer(from,to,value)

IRs:
TMP_258(bool) = INTERNAL_CALL, ExternStateToken._internalTransfer(address,address,uint256)(from,to,value)
RETURN TMP_258"];
}
// Function: 5854.sol-ExternStateToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_183(bool) = msg.sender == nominatedOwner
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_186 = CONVERT 0 to address
nominatedOwner(address) := TMP_186(address)"];
}
// Function: 5854.sol-ExternStateToken-addIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
x + y >= y

IRs:
TMP_208(uint256) = x + y
TMP_209(bool) = TMP_208 >= y
RETURN TMP_209"];
}
// Function: 5854.sol-ExternStateToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.allowance(owner,spender)

IRs:
TMP_238(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['owner', 'spender']  
RETURN TMP_238"];
}
// Function: 5854.sol-ExternStateToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenState.setAllowance(sender,spender,value)

IRs:
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['sender', 'spender', 'value']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitApproval(sender,spender,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitApproval(address,address,uint256)(sender,spender,value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
5->1;
}
// Function: 5854.sol-ExternStateToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.balanceOf(account)

IRs:
TMP_239(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
RETURN TMP_239"];
}
// Function: 5854.sol-ExternStateToken-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_187 = CONVERT 0 to address
TMP_188(bool) = _owner != TMP_187
TMP_189(None) = SOLIDITY_CALL require(bool)(TMP_188)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _owner

IRs:
selfDestructBeneficiary(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_owner)

IRs:
Emit SelfDestructBeneficiaryUpdated(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
4->1;
}
// Function: 5854.sol-ExternStateToken-constructor(address,TokenState,string,string,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SelfDestructible(_owner)

IRs:
INTERNAL_CALL, SelfDestructible.constructor(address)(_owner)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Proxyable(_proxy,_owner)

IRs:
INTERNAL_CALL, Proxyable.constructor(address,address)(_proxy,_owner)"];
6->1;
}
// Function: 5854.sol-ExternStateToken-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_169 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_169(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 5854.sol-ExternStateToken-divIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y != 0

IRs:
TMP_229(bool) = y != 0
RETURN TMP_229"];
}
// Function: 5854.sol-ExternStateToken-emitApproval(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,APPROVAL_SIG,bytes32(owner),bytes32(spender),0)

IRs:
TMP_270(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_271 = CONVERT owner to bytes32
TMP_272 = CONVERT spender to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_270', '3', 'APPROVAL_SIG', 'TMP_271', 'TMP_272', '0']  "];
}
// Function: 5854.sol-ExternStateToken-emitTokenStateUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newTokenState),1,TOKENSTATEUPDATED_SIG,0,0,0)

IRs:
TMP_274(bytes) = SOLIDITY_CALL abi.encode()(newTokenState)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_274', '1', 'TOKENSTATEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-ExternStateToken-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,TRANSFER_SIG,bytes32(from),bytes32(to),0)

IRs:
TMP_266(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_267 = CONVERT from to bytes32
TMP_268 = CONVERT to to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_266', '3', 'TRANSFER_SIG', 'TMP_267', 'TMP_268', '0']  "];
}
// Function: 5854.sol-ExternStateToken-initiateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = now

IRs:
initiationTime(uint256) := now(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = true

IRs:
selfDestructInitiated(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructInitiated(SELFDESTRUCT_DELAY)

IRs:
Emit SelfDestructInitiated(SELFDESTRUCT_DELAY)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-ExternStateToken-intToDec(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(i,UNIT)

IRs:
TMP_235(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(i,UNIT)
RETURN TMP_235"];
}
// Function: 5854.sol-ExternStateToken-mulIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_218(bool) = x == 0
CONDITION TMP_218"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(x * y) / x == y

IRs:
TMP_219(uint256) = x * y
TMP_220(uint256) = TMP_219 / x
TMP_221(bool) = TMP_220 == y
RETURN TMP_221"];
}
// Function: 5854.sol-ExternStateToken-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-ExternStateToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_290(bool) = msg.sender == owner
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-ExternStateToken-onlyProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxy(msg.sender) == proxy)

IRs:
TMP_281 = CONVERT msg.sender to Proxy
TMP_282(bool) = TMP_281 == proxy
TMP_283(None) = SOLIDITY_CALL require(bool)(TMP_282)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-ExternStateToken-optionalProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_284 = CONVERT msg.sender to Proxy
TMP_285(bool) = TMP_284 != proxy
CONDITION TMP_285"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5854.sol-ExternStateToken-optionalProxy_onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_286 = CONVERT msg.sender to Proxy
TMP_287(bool) = TMP_286 != proxy
CONDITION TMP_287"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(messageSender == owner)

IRs:
TMP_288(bool) = messageSender == owner
TMP_289(None) = SOLIDITY_CALL require(bool)(TMP_288)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 5854.sol-ExternStateToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x + y >= y)

IRs:
TMP_210(uint256) = x + y
TMP_211(bool) = TMP_210 >= y
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_213(uint256) = x + y
RETURN TMP_213"];
}
// Function: 5854.sol-ExternStateToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y != 0)

IRs:
TMP_230(bool) = y != 0
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x / y

IRs:
TMP_232(uint256) = x / y
RETURN TMP_232"];
}
// Function: 5854.sol-ExternStateToken-safeDiv_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv(safeMul(x,UNIT),y)

IRs:
TMP_233(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,UNIT)
TMP_234(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv(uint256,uint256)(TMP_233,y)
RETURN TMP_234"];
}
// Function: 5854.sol-ExternStateToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_222(bool) = x == 0
CONDITION TMP_222"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
p = x * y

IRs:
TMP_223(uint256) = x * y
p(uint256) := TMP_223(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(p / x == y)

IRs:
TMP_224(uint256) = p / x
TMP_225(bool) = TMP_224 == y
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_225)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
p

IRs:
RETURN p"];
}
// Function: 5854.sol-ExternStateToken-safeMul_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(x,y) / UNIT

IRs:
TMP_227(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,y)
TMP_228(uint256) = TMP_227 / UNIT
RETURN TMP_228"];
}
// Function: 5854.sol-ExternStateToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y <= x)

IRs:
TMP_215(bool) = y <= x
TMP_216(None) = SOLIDITY_CALL require(bool)(TMP_215)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_217(uint256) = x - y
RETURN TMP_217"];
}
// Function: 5854.sol-ExternStateToken-selfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(selfDestructInitiated && initiationTime + SELFDESTRUCT_DELAY < now)

IRs:
TMP_201(uint256) = initiationTime + SELFDESTRUCT_DELAY
TMP_202(bool) = TMP_201 < now
TMP_203(bool) = selfDestructInitiated && TMP_202
TMP_204(None) = SOLIDITY_CALL require(bool)(TMP_203)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
beneficiary = selfDestructBeneficiary

IRs:
beneficiary(address) := selfDestructBeneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructed(beneficiary)

IRs:
Emit SelfDestructed(beneficiary)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
selfdestruct(address)(beneficiary)

IRs:
TMP_206(None) = SOLIDITY_CALL selfdestruct(address)(beneficiary)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 5854.sol-ExternStateToken-setMessageSender(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
messageSender = sender

IRs:
messageSender(address) := sender(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy()

IRs:
MODIFIER_CALL, Proxyable.onlyProxy()()"];
2->1;
}
// Function: 5854.sol-ExternStateToken-setProxy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_172 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_172(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-ExternStateToken-setSelfDestructBeneficiary(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_192 = CONVERT 0 to address
TMP_193(bool) = _beneficiary != TMP_192
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _beneficiary

IRs:
selfDestructBeneficiary(address) := _beneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_beneficiary)

IRs:
Emit SelfDestructBeneficiaryUpdated(_beneficiary)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-ExternStateToken-setTokenState(TokenState)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTokenStateUpdated(_tokenState)

IRs:
INTERNAL_CALL, ExternStateToken.emitTokenStateUpdated(address)(_tokenState)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-ExternStateToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
UNIT = 10 ** uint256(decimals)

IRs:
TMP_276 = CONVERT decimals to uint256
TMP_277(uint256) = 10 ** TMP_276
UNIT(uint256) := TMP_277(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SELFDESTRUCT_DELAY = 2419200

IRs:
SELFDESTRUCT_DELAY(uint256) := 2419200(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TRANSFER_SIG = keccak256()(Transfer(address,address,uint256))

IRs:
TMP_278(bytes32) = SOLIDITY_CALL keccak256()(Transfer(address,address,uint256))
TRANSFER_SIG(bytes32) := TMP_278(bytes32)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
APPROVAL_SIG = keccak256()(Approval(address,address,uint256))

IRs:
TMP_279(bytes32) = SOLIDITY_CALL keccak256()(Approval(address,address,uint256))
APPROVAL_SIG(bytes32) := TMP_279(bytes32)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
TOKENSTATEUPDATED_SIG = keccak256()(TokenStateUpdated(address))

IRs:
TMP_280(bytes32) = SOLIDITY_CALL keccak256()(TokenStateUpdated(address))
TOKENSTATEUPDATED_SIG(bytes32) := TMP_280(bytes32)"];
}
// Function: 5854.sol-ExternStateToken-subIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y <= x

IRs:
TMP_214(bool) = y <= x
RETURN TMP_214"];
}
// Function: 5854.sol-ExternStateToken-terminateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = 0

IRs:
initiationTime(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = false

IRs:
selfDestructInitiated(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructTerminated()

IRs:
Emit SelfDestructTerminated()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-FeeToken-_internalTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_298 = CONVERT 0 to address
TMP_299(bool) = to != TMP_298
TMP_300(None) = SOLIDITY_CALL require(bool)(TMP_299)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_301 = CONVERT this to address
TMP_302(bool) = to != TMP_301
TMP_303(None) = SOLIDITY_CALL require(bool)(TMP_302)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(to != address(proxy))

IRs:
TMP_304 = CONVERT proxy to address
TMP_305(bool) = to != TMP_304
TMP_306(None) = SOLIDITY_CALL require(bool)(TMP_305)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(from,safeSub(tokenState.balanceOf(from),value))

IRs:
TMP_307(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['from']  
TMP_308(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_307,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['from', 'TMP_308']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(to,safeAdd(tokenState.balanceOf(to),value))

IRs:
TMP_310(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['to']  
TMP_311(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_310,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['to', 'TMP_311']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
emitTransfer(from,to,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,to,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 5854.sol-FeeToken-_internalTransfer(address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_414 = CONVERT 0 to address
TMP_415(bool) = to != TMP_414
TMP_416(None) = SOLIDITY_CALL require(bool)(TMP_415)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_417 = CONVERT this to address
TMP_418(bool) = to != TMP_417
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(to != address(proxy))

IRs:
TMP_420 = CONVERT proxy to address
TMP_421(bool) = to != TMP_420
TMP_422(None) = SOLIDITY_CALL require(bool)(TMP_421)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(from,safeSub(tokenState.balanceOf(from),safeAdd(amount,fee)))

IRs:
TMP_423(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['from']  
TMP_424(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(amount,fee)
TMP_425(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_423,TMP_424)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['from', 'TMP_425']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(to,safeAdd(tokenState.balanceOf(to),amount))

IRs:
TMP_427(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['to']  
TMP_428(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_427,amount)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['to', 'TMP_428']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenState.setBalanceOf(FEE_ADDRESS,safeAdd(tokenState.balanceOf(FEE_ADDRESS),fee))

IRs:
TMP_430(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
TMP_431(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_430,fee)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['FEE_ADDRESS', 'TMP_431']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(from,to,amount)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,to,amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
emitTransfer(from,FEE_ADDRESS,fee)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,FEE_ADDRESS,fee)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 5854.sol-FeeToken-_transferFromSenderPaysFee_byProxy(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = transferFeeIncurred(value)

IRs:
TMP_446(uint256) = INTERNAL_CALL, FeeToken.transferFeeIncurred(uint256)(value)
fee(uint256) := TMP_446(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
total = safeAdd(value,fee)

IRs:
TMP_447(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(value,fee)
total(uint256) := TMP_447(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenState.setAllowance(from,sender,safeSub(tokenState.allowance(from,sender),total))

IRs:
TMP_448(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['from', 'sender']  
TMP_449(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_448,total)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['from', 'sender', 'TMP_449']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_internalTransfer(from,to,value,fee)

IRs:
TMP_451(bool) = INTERNAL_CALL, FeeToken._internalTransfer(address,address,uint256,uint256)(from,to,value,fee)
RETURN TMP_451"];
}
// Function: 5854.sol-FeeToken-_transferFrom_byProxy(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
received = amountReceived(value)

IRs:
TMP_438(uint256) = INTERNAL_CALL, FeeToken.amountReceived(uint256)(value)
received(uint256) := TMP_438(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
fee = safeSub(value,received)

IRs:
TMP_439(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(value,received)
fee(uint256) := TMP_439(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenState.setAllowance(from,sender,safeSub(tokenState.allowance(from,sender),value))

IRs:
TMP_440(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['from', 'sender']  
TMP_441(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_440,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['from', 'sender', 'TMP_441']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_internalTransfer(from,to,received,fee)

IRs:
TMP_443(bool) = INTERNAL_CALL, FeeToken._internalTransfer(address,address,uint256,uint256)(from,to,received,fee)
RETURN TMP_443"];
}
// Function: 5854.sol-FeeToken-_transferSenderPaysFee_byProxy(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = transferFeeIncurred(value)

IRs:
TMP_444(uint256) = INTERNAL_CALL, FeeToken.transferFeeIncurred(uint256)(value)
fee(uint256) := TMP_444(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_internalTransfer(sender,to,value,fee)

IRs:
TMP_445(bool) = INTERNAL_CALL, FeeToken._internalTransfer(address,address,uint256,uint256)(sender,to,value,fee)
RETURN TMP_445"];
}
// Function: 5854.sol-FeeToken-_transfer_byProxy(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
received = amountReceived(value)

IRs:
TMP_435(uint256) = INTERNAL_CALL, FeeToken.amountReceived(uint256)(value)
received(uint256) := TMP_435(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
fee = safeSub(value,received)

IRs:
TMP_436(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(value,received)
fee(uint256) := TMP_436(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_internalTransfer(sender,to,received,fee)

IRs:
TMP_437(bool) = INTERNAL_CALL, FeeToken._internalTransfer(address,address,uint256,uint256)(sender,to,received,fee)
RETURN TMP_437"];
}
// Function: 5854.sol-FeeToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_346(bool) = msg.sender == nominatedOwner
TMP_347(None) = SOLIDITY_CALL require(bool)(TMP_346)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_349 = CONVERT 0 to address
nominatedOwner(address) := TMP_349(address)"];
}
// Function: 5854.sol-FeeToken-addIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
x + y >= y

IRs:
TMP_371(uint256) = x + y
TMP_372(bool) = TMP_371 >= y
RETURN TMP_372"];
}
// Function: 5854.sol-FeeToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.allowance(owner,spender)

IRs:
TMP_294(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['owner', 'spender']  
RETURN TMP_294"];
}
// Function: 5854.sol-FeeToken-amountReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv_dec(value,safeAdd(UNIT,transferFeeRate))

IRs:
TMP_411(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(UNIT,transferFeeRate)
TMP_412(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv_dec(uint256,uint256)(value,TMP_411)
RETURN TMP_412"];
}
// Function: 5854.sol-FeeToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenState.setAllowance(sender,spender,value)

IRs:
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['sender', 'spender', 'value']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitApproval(sender,spender,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitApproval(address,address,uint256)(sender,spender,value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
5->1;
}
// Function: 5854.sol-FeeToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.balanceOf(account)

IRs:
TMP_295(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
RETURN TMP_295"];
}
// Function: 5854.sol-FeeToken-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_350 = CONVERT 0 to address
TMP_351(bool) = _owner != TMP_350
TMP_352(None) = SOLIDITY_CALL require(bool)(TMP_351)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _owner

IRs:
selfDestructBeneficiary(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_owner)

IRs:
Emit SelfDestructBeneficiaryUpdated(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
4->1;
}
// Function: 5854.sol-FeeToken-constructor(address,TokenState,string,string,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SelfDestructible(_owner)

IRs:
INTERNAL_CALL, SelfDestructible.constructor(address)(_owner)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Proxyable(_proxy,_owner)

IRs:
INTERNAL_CALL, Proxyable.constructor(address,address)(_proxy,_owner)"];
6->1;
}
// Function: 5854.sol-FeeToken-constructor(address,TokenState,string,string,uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
feeAuthority = _feeAuthority

IRs:
feeAuthority(address) := _feeAuthority(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_transferFeeRate <= MAX_TRANSFER_FEE_RATE)

IRs:
TMP_399(bool) = _transferFeeRate <= MAX_TRANSFER_FEE_RATE
TMP_400(None) = SOLIDITY_CALL require(bool)(TMP_399)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferFeeRate = _transferFeeRate

IRs:
transferFeeRate(uint256) := _transferFeeRate(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ExternStateToken(_proxy,_tokenState,_name,_symbol,_totalSupply,_owner)

IRs:
INTERNAL_CALL, ExternStateToken.constructor(address,TokenState,string,string,uint256,address)(_proxy,_tokenState,_name,_symbol,_totalSupply,_owner)"];
4->1;
}
// Function: 5854.sol-FeeToken-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_332 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_332(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 5854.sol-FeeToken-divIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y != 0

IRs:
TMP_392(bool) = y != 0
RETURN TMP_392"];
}
// Function: 5854.sol-FeeToken-donateToFeePool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balance = tokenState.balanceOf(sender)

IRs:
TMP_465(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['sender']  
balance(uint256) := TMP_465(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balance != 0)

IRs:
TMP_466(bool) = balance != 0
TMP_467(None) = SOLIDITY_CALL require(bool)(TMP_466)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(sender,safeSub(balance,n))

IRs:
TMP_468(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(balance,n)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['sender', 'TMP_468']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(FEE_ADDRESS,safeAdd(tokenState.balanceOf(FEE_ADDRESS),n))

IRs:
TMP_470(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
TMP_471(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_470,n)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['FEE_ADDRESS', 'TMP_471']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
emitFeesDonated(sender,n)

IRs:
INTERNAL_CALL, FeeToken.emitFeesDonated(address,uint256)(sender,n)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(sender,FEE_ADDRESS,n)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(sender,FEE_ADDRESS,n)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
9->1;
}
// Function: 5854.sol-FeeToken-emitApproval(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,APPROVAL_SIG,bytes32(owner),bytes32(spender),0)

IRs:
TMP_326(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_327 = CONVERT owner to bytes32
TMP_328 = CONVERT spender to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_326', '3', 'APPROVAL_SIG', 'TMP_327', 'TMP_328', '0']  "];
}
// Function: 5854.sol-FeeToken-emitFeeAuthorityUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newFeeAuthority),1,FEEAUTHORITYUPDATED_SIG,0,0,0)

IRs:
TMP_478(bytes) = SOLIDITY_CALL abi.encode()(newFeeAuthority)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_478', '1', 'FEEAUTHORITYUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-FeeToken-emitFeesDonated(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),2,FEESDONATED_SIG,bytes32(donor),0,0)

IRs:
TMP_483(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_484 = CONVERT donor to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_483', '2', 'FEESDONATED_SIG', 'TMP_484', '0', '0']  "];
}
// Function: 5854.sol-FeeToken-emitFeesWithdrawn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),2,FEESWITHDRAWN_SIG,bytes32(account),0,0)

IRs:
TMP_480(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_481 = CONVERT account to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_480', '2', 'FEESWITHDRAWN_SIG', 'TMP_481', '0', '0']  "];
}
// Function: 5854.sol-FeeToken-emitTokenStateUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newTokenState),1,TOKENSTATEUPDATED_SIG,0,0,0)

IRs:
TMP_330(bytes) = SOLIDITY_CALL abi.encode()(newTokenState)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_330', '1', 'TOKENSTATEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-FeeToken-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,TRANSFER_SIG,bytes32(from),bytes32(to),0)

IRs:
TMP_322(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_323 = CONVERT from to bytes32
TMP_324 = CONVERT to to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_322', '3', 'TRANSFER_SIG', 'TMP_323', 'TMP_324', '0']  "];
}
// Function: 5854.sol-FeeToken-emitTransferFeeRateUpdated(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newFeeRate),1,TRANSFERFEERATEUPDATED_SIG,0,0,0)

IRs:
TMP_476(bytes) = SOLIDITY_CALL abi.encode()(newFeeRate)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_476', '1', 'TRANSFERFEERATEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-FeeToken-feePool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.balanceOf(FEE_ADDRESS)

IRs:
TMP_413(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
RETURN TMP_413"];
}
// Function: 5854.sol-FeeToken-initiateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = now

IRs:
initiationTime(uint256) := now(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = true

IRs:
selfDestructInitiated(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructInitiated(SELFDESTRUCT_DELAY)

IRs:
Emit SelfDestructInitiated(SELFDESTRUCT_DELAY)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-FeeToken-intToDec(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(i,UNIT)

IRs:
TMP_398(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(i,UNIT)
RETURN TMP_398"];
}
// Function: 5854.sol-FeeToken-mulIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_381(bool) = x == 0
CONDITION TMP_381"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(x * y) / x == y

IRs:
TMP_382(uint256) = x * y
TMP_383(uint256) = TMP_382 / x
TMP_384(bool) = TMP_383 == y
RETURN TMP_384"];
}
// Function: 5854.sol-FeeToken-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-FeeToken-onlyFeeAuthority()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == feeAuthority)

IRs:
TMP_507(bool) = msg.sender == feeAuthority
TMP_508(None) = SOLIDITY_CALL require(bool)(TMP_507)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-FeeToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_505(bool) = msg.sender == owner
TMP_506(None) = SOLIDITY_CALL require(bool)(TMP_505)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-FeeToken-onlyProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxy(msg.sender) == proxy)

IRs:
TMP_496 = CONVERT msg.sender to Proxy
TMP_497(bool) = TMP_496 == proxy
TMP_498(None) = SOLIDITY_CALL require(bool)(TMP_497)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-FeeToken-optionalProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_499 = CONVERT msg.sender to Proxy
TMP_500(bool) = TMP_499 != proxy
CONDITION TMP_500"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5854.sol-FeeToken-optionalProxy_onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_501 = CONVERT msg.sender to Proxy
TMP_502(bool) = TMP_501 != proxy
CONDITION TMP_502"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(messageSender == owner)

IRs:
TMP_503(bool) = messageSender == owner
TMP_504(None) = SOLIDITY_CALL require(bool)(TMP_503)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 5854.sol-FeeToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x + y >= y)

IRs:
TMP_373(uint256) = x + y
TMP_374(bool) = TMP_373 >= y
TMP_375(None) = SOLIDITY_CALL require(bool)(TMP_374)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_376(uint256) = x + y
RETURN TMP_376"];
}
// Function: 5854.sol-FeeToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y != 0)

IRs:
TMP_393(bool) = y != 0
TMP_394(None) = SOLIDITY_CALL require(bool)(TMP_393)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x / y

IRs:
TMP_395(uint256) = x / y
RETURN TMP_395"];
}
// Function: 5854.sol-FeeToken-safeDiv_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv(safeMul(x,UNIT),y)

IRs:
TMP_396(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,UNIT)
TMP_397(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv(uint256,uint256)(TMP_396,y)
RETURN TMP_397"];
}
// Function: 5854.sol-FeeToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_385(bool) = x == 0
CONDITION TMP_385"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
p = x * y

IRs:
TMP_386(uint256) = x * y
p(uint256) := TMP_386(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(p / x == y)

IRs:
TMP_387(uint256) = p / x
TMP_388(bool) = TMP_387 == y
TMP_389(None) = SOLIDITY_CALL require(bool)(TMP_388)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
p

IRs:
RETURN p"];
}
// Function: 5854.sol-FeeToken-safeMul_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(x,y) / UNIT

IRs:
TMP_390(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,y)
TMP_391(uint256) = TMP_390 / UNIT
RETURN TMP_391"];
}
// Function: 5854.sol-FeeToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y <= x)

IRs:
TMP_378(bool) = y <= x
TMP_379(None) = SOLIDITY_CALL require(bool)(TMP_378)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_380(uint256) = x - y
RETURN TMP_380"];
}
// Function: 5854.sol-FeeToken-selfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(selfDestructInitiated && initiationTime + SELFDESTRUCT_DELAY < now)

IRs:
TMP_364(uint256) = initiationTime + SELFDESTRUCT_DELAY
TMP_365(bool) = TMP_364 < now
TMP_366(bool) = selfDestructInitiated && TMP_365
TMP_367(None) = SOLIDITY_CALL require(bool)(TMP_366)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
beneficiary = selfDestructBeneficiary

IRs:
beneficiary(address) := selfDestructBeneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructed(beneficiary)

IRs:
Emit SelfDestructed(beneficiary)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
selfdestruct(address)(beneficiary)

IRs:
TMP_369(None) = SOLIDITY_CALL selfdestruct(address)(beneficiary)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 5854.sol-FeeToken-setFeeAuthority(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
feeAuthority = _feeAuthority

IRs:
feeAuthority(address) := _feeAuthority(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitFeeAuthorityUpdated(_feeAuthority)

IRs:
INTERNAL_CALL, FeeToken.emitFeeAuthorityUpdated(address)(_feeAuthority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-FeeToken-setMessageSender(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
messageSender = sender

IRs:
messageSender(address) := sender(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy()

IRs:
MODIFIER_CALL, Proxyable.onlyProxy()()"];
2->1;
}
// Function: 5854.sol-FeeToken-setProxy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_335 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_335(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-FeeToken-setSelfDestructBeneficiary(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_355 = CONVERT 0 to address
TMP_356(bool) = _beneficiary != TMP_355
TMP_357(None) = SOLIDITY_CALL require(bool)(TMP_356)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _beneficiary

IRs:
selfDestructBeneficiary(address) := _beneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_beneficiary)

IRs:
Emit SelfDestructBeneficiaryUpdated(_beneficiary)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-FeeToken-setTokenState(TokenState)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTokenStateUpdated(_tokenState)

IRs:
INTERNAL_CALL, ExternStateToken.emitTokenStateUpdated(address)(_tokenState)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-FeeToken-setTransferFeeRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_transferFeeRate <= MAX_TRANSFER_FEE_RATE)

IRs:
TMP_402(bool) = _transferFeeRate <= MAX_TRANSFER_FEE_RATE
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferFeeRate = _transferFeeRate

IRs:
transferFeeRate(uint256) := _transferFeeRate(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitTransferFeeRateUpdated(_transferFeeRate)

IRs:
INTERNAL_CALL, FeeToken.emitTransferFeeRateUpdated(uint256)(_transferFeeRate)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
4->1;
}
// Function: 5854.sol-FeeToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
UNIT = 10 ** uint256(decimals)

IRs:
TMP_486 = CONVERT decimals to uint256
TMP_487(uint256) = 10 ** TMP_486
UNIT(uint256) := TMP_487(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SELFDESTRUCT_DELAY = 2419200

IRs:
SELFDESTRUCT_DELAY(uint256) := 2419200(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TRANSFER_SIG = keccak256()(Transfer(address,address,uint256))

IRs:
TMP_488(bytes32) = SOLIDITY_CALL keccak256()(Transfer(address,address,uint256))
TRANSFER_SIG(bytes32) := TMP_488(bytes32)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
APPROVAL_SIG = keccak256()(Approval(address,address,uint256))

IRs:
TMP_489(bytes32) = SOLIDITY_CALL keccak256()(Approval(address,address,uint256))
APPROVAL_SIG(bytes32) := TMP_489(bytes32)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
TOKENSTATEUPDATED_SIG = keccak256()(TokenStateUpdated(address))

IRs:
TMP_490(bytes32) = SOLIDITY_CALL keccak256()(TokenStateUpdated(address))
TOKENSTATEUPDATED_SIG(bytes32) := TMP_490(bytes32)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_TRANSFER_FEE_RATE = UNIT / 10

IRs:
TMP_491(uint256) = UNIT / 10
MAX_TRANSFER_FEE_RATE(uint256) := TMP_491(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
FEE_ADDRESS = 0xfeefeefeefeefeefeefeefeefeefeefeefeefeef

IRs:
FEE_ADDRESS(address) := 1455434353366403443329579181396093322138435387119(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
TRANSFERFEERATEUPDATED_SIG = keccak256()(TransferFeeRateUpdated(uint256))

IRs:
TMP_492(bytes32) = SOLIDITY_CALL keccak256()(TransferFeeRateUpdated(uint256))
TRANSFERFEERATEUPDATED_SIG(bytes32) := TMP_492(bytes32)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
FEEAUTHORITYUPDATED_SIG = keccak256()(FeeAuthorityUpdated(address))

IRs:
TMP_493(bytes32) = SOLIDITY_CALL keccak256()(FeeAuthorityUpdated(address))
FEEAUTHORITYUPDATED_SIG(bytes32) := TMP_493(bytes32)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
FEESWITHDRAWN_SIG = keccak256()(FeesWithdrawn(address,uint256))

IRs:
TMP_494(bytes32) = SOLIDITY_CALL keccak256()(FeesWithdrawn(address,uint256))
FEESWITHDRAWN_SIG(bytes32) := TMP_494(bytes32)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
FEESDONATED_SIG = keccak256()(FeesDonated(address,uint256))

IRs:
TMP_495(bytes32) = SOLIDITY_CALL keccak256()(FeesDonated(address,uint256))
FEESDONATED_SIG(bytes32) := TMP_495(bytes32)"];
}
// Function: 5854.sol-FeeToken-subIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y <= x

IRs:
TMP_377(bool) = y <= x
RETURN TMP_377"];
}
// Function: 5854.sol-FeeToken-terminateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = 0

IRs:
initiationTime(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = false

IRs:
selfDestructInitiated(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructTerminated()

IRs:
Emit SelfDestructTerminated()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-FeeToken-transferFeeIncurred(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul_dec(value,transferFeeRate)

IRs:
TMP_408(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul_dec(uint256,uint256)(value,transferFeeRate)
RETURN TMP_408"];
}
// Function: 5854.sol-FeeToken-transferPlusFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeAdd(value,transferFeeIncurred(value))

IRs:
TMP_409(uint256) = INTERNAL_CALL, FeeToken.transferFeeIncurred(uint256)(value)
TMP_410(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(value,TMP_409)
RETURN TMP_410"];
}
// Function: 5854.sol-FeeToken-withdrawFees(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(account != address(0))

IRs:
TMP_452 = CONVERT 0 to address
TMP_453(bool) = account != TMP_452
TMP_454(None) = SOLIDITY_CALL require(bool)(TMP_453)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value == 0

IRs:
TMP_455(bool) = value == 0
CONDITION TMP_455"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(FEE_ADDRESS,safeSub(tokenState.balanceOf(FEE_ADDRESS),value))

IRs:
TMP_456(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
TMP_457(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_456,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['FEE_ADDRESS', 'TMP_457']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenState.setBalanceOf(account,safeAdd(tokenState.balanceOf(account),value))

IRs:
TMP_459(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
TMP_460(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_459,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['account', 'TMP_460']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitFeesWithdrawn(account,value)

IRs:
INTERNAL_CALL, FeeToken.emitFeesWithdrawn(address,uint256)(account,value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
emitTransfer(FEE_ADDRESS,account,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(FEE_ADDRESS,account,value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyFeeAuthority()

IRs:
MODIFIER_CALL, FeeToken.onlyFeeAuthority()()"];
10->1;
}
// Function: 5854.sol-Havven-HAVtoUSD(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul_dec(hav_dec,price)

IRs:
TMP_865(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul_dec(uint256,uint256)(hav_dec,price)
RETURN TMP_865"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
priceNotStale()

IRs:
MODIFIER_CALL, Havven.priceNotStale()()"];
2->1;
}
// Function: 5854.sol-Havven-USDtoHAV(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv_dec(usd_dec,price)

IRs:
TMP_867(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv_dec(uint256,uint256)(usd_dec,price)
RETURN TMP_867"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
priceNotStale()

IRs:
MODIFIER_CALL, Havven.priceNotStale()()"];
2->1;
}
// Function: 5854.sol-Havven-_internalTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_628 = CONVERT 0 to address
TMP_629(bool) = to != TMP_628
TMP_630(None) = SOLIDITY_CALL require(bool)(TMP_629)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_631 = CONVERT this to address
TMP_632(bool) = to != TMP_631
TMP_633(None) = SOLIDITY_CALL require(bool)(TMP_632)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(to != address(proxy))

IRs:
TMP_634 = CONVERT proxy to address
TMP_635(bool) = to != TMP_634
TMP_636(None) = SOLIDITY_CALL require(bool)(TMP_635)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(from,safeSub(tokenState.balanceOf(from),value))

IRs:
TMP_637(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['from']  
TMP_638(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_637,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['from', 'TMP_638']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(to,safeAdd(tokenState.balanceOf(to),value))

IRs:
TMP_640(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['to']  
TMP_641(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_640,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['to', 'TMP_641']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
emitTransfer(from,to,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,to,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 5854.sol-Havven-_transferFrom_byProxy(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState.setAllowance(from,sender,safeSub(tokenState.allowance(from,sender),value))

IRs:
TMP_645(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['from', 'sender']  
TMP_646(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_645,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['from', 'sender', 'TMP_646']  "];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_internalTransfer(from,to,value)

IRs:
TMP_648(bool) = INTERNAL_CALL, ExternStateToken._internalTransfer(address,address,uint256)(from,to,value)
RETURN TMP_648"];
}
// Function: 5854.sol-Havven-_transfer_byProxy(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_internalTransfer(from,to,value)

IRs:
TMP_644(bool) = INTERNAL_CALL, ExternStateToken._internalTransfer(address,address,uint256)(from,to,value)
RETURN TMP_644"];
}
// Function: 5854.sol-Havven-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_676(bool) = msg.sender == nominatedOwner
TMP_677(None) = SOLIDITY_CALL require(bool)(TMP_676)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_679 = CONVERT 0 to address
nominatedOwner(address) := TMP_679(address)"];
}
// Function: 5854.sol-Havven-addIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
x + y >= y

IRs:
TMP_701(uint256) = x + y
TMP_702(bool) = TMP_701 >= y
RETURN TMP_702"];
}
// Function: 5854.sol-Havven-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.allowance(owner,spender)

IRs:
TMP_624(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['owner', 'spender']  
RETURN TMP_624"];
}
// Function: 5854.sol-Havven-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenState.setAllowance(sender,spender,value)

IRs:
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['sender', 'spender', 'value']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitApproval(sender,spender,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitApproval(address,address,uint256)(sender,spender,value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
5->1;
}
// Function: 5854.sol-Havven-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.balanceOf(account)

IRs:
TMP_625(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
RETURN TMP_625"];
}
// Function: 5854.sol-Havven-burnNomins(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lastTot = nomin.totalSupply()

IRs:
TMP_820(uint256) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:totalSupply, arguments:[]  
lastTot(uint256) := TMP_820(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
preIssued = nominsIssued[sender]

IRs:
REF_167(uint256) -> nominsIssued[sender]
preIssued(uint256) := REF_167(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nomin.burn(sender,amount)

IRs:
HIGH_LEVEL_CALL, dest:nomin(Nomin), function:burn, arguments:['sender', 'amount']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nominsIssued[sender] = safeSub(preIssued,amount)

IRs:
REF_169(uint256) -> nominsIssued[sender]
TMP_822(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(preIssued,amount)
REF_169(uint256) (->nominsIssued) := TMP_822(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
updateIssuanceData(sender,preIssued,lastTot)

IRs:
INTERNAL_CALL, Havven.updateIssuanceData(address,uint256,uint256)(sender,preIssued,lastTot)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
7->1;
}
// Function: 5854.sol-Havven-collateral(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bal = tokenState.balanceOf(account)

IRs:
TMP_844(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
bal(uint256) := TMP_844(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
escrow != address(0)

IRs:
TMP_845 = CONVERT 0 to address
TMP_846(bool) = escrow != TMP_845
CONDITION TMP_846"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bal = safeAdd(bal,escrow.balanceOf(account))

IRs:
TMP_847(uint256) = HIGH_LEVEL_CALL, dest:escrow(HavvenEscrow), function:balanceOf, arguments:['account']  
TMP_848(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(bal,TMP_847)
bal(uint256) := TMP_848(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
bal

IRs:
RETURN bal"];
}
// Function: 5854.sol-Havven-computeIssuanceData(uint256,Havven.IssuanceData)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentBalanceSum = preIssuance.currentBalanceSum

IRs:
REF_155(uint256) -> preIssuance.currentBalanceSum
currentBalanceSum(uint256) := REF_155(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lastAverageBalance = preIssuance.lastAverageBalance

IRs:
REF_156(uint256) -> preIssuance.lastAverageBalance
lastAverageBalance(uint256) := REF_156(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastModified = preIssuance.lastModified

IRs:
REF_157(uint256) -> preIssuance.lastModified
lastModified(uint256) := REF_157(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
lastModified < feePeriodStartTime

IRs:
TMP_793(bool) = lastModified < feePeriodStartTime
CONDITION TMP_793"];
4->5[label="True"];
4->13[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
lastModified < lastFeePeriodStartTime

IRs:
TMP_794(bool) = lastModified < lastFeePeriodStartTime
CONDITION TMP_794"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastAverageBalance = preBalance

IRs:
lastAverageBalance(uint256) := preBalance(uint256)"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
timeUpToRollover = feePeriodStartTime - lastModified

IRs:
TMP_795(uint256) = feePeriodStartTime - lastModified
timeUpToRollover(uint256) := TMP_795(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
lastFeePeriodDuration = feePeriodStartTime - lastFeePeriodStartTime

IRs:
TMP_796(uint256) = feePeriodStartTime - lastFeePeriodStartTime
lastFeePeriodDuration(uint256) := TMP_796(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
lastBalanceSum = safeAdd(currentBalanceSum,safeMul(preBalance,timeUpToRollover))

IRs:
TMP_797(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(preBalance,timeUpToRollover)
TMP_798(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(currentBalanceSum,TMP_797)
lastBalanceSum(uint256) := TMP_798(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
lastAverageBalance = lastBalanceSum / lastFeePeriodDuration

IRs:
TMP_799(uint256) = lastBalanceSum / lastFeePeriodDuration
lastAverageBalance(uint256) := TMP_799(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
currentBalanceSum = safeMul(preBalance,now - feePeriodStartTime)

IRs:
TMP_800(uint256) = now - feePeriodStartTime
TMP_801(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(preBalance,TMP_800)
currentBalanceSum(uint256) := TMP_801(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
currentBalanceSum = safeAdd(currentBalanceSum,safeMul(preBalance,now - lastModified))

IRs:
TMP_802(uint256) = now - lastModified
TMP_803(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(preBalance,TMP_802)
TMP_804(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(currentBalanceSum,TMP_803)
currentBalanceSum(uint256) := TMP_804(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
IssuanceData(currentBalanceSum,lastAverageBalance,now)

IRs:
TMP_805(Havven.IssuanceData) = new IssuanceData(currentBalanceSum,lastAverageBalance,now)
RETURN TMP_805"];
}
// Function: 5854.sol-Havven-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_680 = CONVERT 0 to address
TMP_681(bool) = _owner != TMP_680
TMP_682(None) = SOLIDITY_CALL require(bool)(TMP_681)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _owner

IRs:
selfDestructBeneficiary(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_owner)

IRs:
Emit SelfDestructBeneficiaryUpdated(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
4->1;
}
// Function: 5854.sol-Havven-constructor(address,TokenState,address,address,uint256,address[],Havven)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->40;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oracle = _oracle

IRs:
oracle(address) := _oracle(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
price = _price

IRs:
price(uint256) := _price(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lastPriceUpdateTime = now

IRs:
lastPriceUpdateTime(uint256) := now(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_oldHavven == address(0)

IRs:
TMP_729 = CONVERT 0 to address
TMP_730(bool) = _oldHavven == TMP_729
CONDITION TMP_730"];
5->6[label="True"];
5->14[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
feePeriodStartTime = now

IRs:
feePeriodStartTime(uint256) := now(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
lastFeePeriodStartTime = now - feePeriodDuration

IRs:
TMP_731(uint256) = now - feePeriodDuration
lastFeePeriodStartTime(uint256) := TMP_731(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->39;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < _issuers.length

IRs:
REF_108 -> LENGTH _issuers
TMP_732(bool) = i < REF_108
CONDITION TMP_732"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isIssuer[_issuers[i]] = true

IRs:
REF_109(address) -> _issuers[i]
REF_110(bool) -> isIssuer[REF_109]
REF_110(bool) (->isIssuer) := True(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_733(uint256) := i(uint256)
i(uint256) = i + 1"];
13->11;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
feePeriodStartTime = _oldHavven.feePeriodStartTime()

IRs:
TMP_734(uint256) = HIGH_LEVEL_CALL, dest:_oldHavven(Havven), function:feePeriodStartTime, arguments:[]  
feePeriodStartTime(uint256) := TMP_734(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lastFeePeriodStartTime = _oldHavven.lastFeePeriodStartTime()

IRs:
TMP_735(uint256) = HIGH_LEVEL_CALL, dest:_oldHavven(Havven), function:lastFeePeriodStartTime, arguments:[]  
lastFeePeriodStartTime(uint256) := TMP_735(uint256)"];
15->16;
16[label="Node Type: NEW VARIABLE 16
"];
16->17;
17[label="Node Type: NEW VARIABLE 17
"];
17->18;
18[label="Node Type: NEW VARIABLE 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
(cbs,lab,lm) = _oldHavven.totalIssuanceData()

IRs:
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:_oldHavven(Havven), function:totalIssuanceData, arguments:[]  
cbs(uint256)= UNPACK TUPLE_0 index: 0 
lab(uint256)= UNPACK TUPLE_0 index: 1 
lm(uint256)= UNPACK TUPLE_0 index: 2 "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
totalIssuanceData.currentBalanceSum = cbs

IRs:
REF_114(uint256) -> totalIssuanceData.currentBalanceSum
REF_114(uint256) (->totalIssuanceData) := cbs(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
totalIssuanceData.lastAverageBalance = lab

IRs:
REF_115(uint256) -> totalIssuanceData.lastAverageBalance
REF_115(uint256) (->totalIssuanceData) := lab(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
totalIssuanceData.lastModified = lm

IRs:
REF_116(uint256) -> totalIssuanceData.lastModified
REF_116(uint256) (->totalIssuanceData) := lm(uint256)"];
22->25;
23[label="Node Type: BEGIN_LOOP 23
"];
23->26;
24[label="Node Type: END_LOOP 24
"];
24->39;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
25->23;
26[label="Node Type: IF_LOOP 26

EXPRESSION:
i < _issuers.length

IRs:
REF_117 -> LENGTH _issuers
TMP_736(bool) = i < REF_117
CONDITION TMP_736"];
26->27[label="True"];
26->24[label="False"];
27[label="Node Type: NEW VARIABLE 27

EXPRESSION:
issuer = _issuers[i]

IRs:
REF_118(address) -> _issuers[i]
issuer(address) := REF_118(address)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
isIssuer[issuer] = true

IRs:
REF_119(bool) -> isIssuer[issuer]
REF_119(bool) (->isIssuer) := True(bool)"];
28->29;
29[label="Node Type: NEW VARIABLE 29

EXPRESSION:
nomins = _oldHavven.nominsIssued(issuer)

IRs:
TMP_737(uint256) = HIGH_LEVEL_CALL, dest:_oldHavven(Havven), function:nominsIssued, arguments:['issuer']  
nomins(uint256) := TMP_737(uint256)"];
29->30;
30[label="Node Type: IF 30

EXPRESSION:
nomins == 0

IRs:
TMP_738(bool) = nomins == 0
CONDITION TMP_738"];
30->31[label="True"];
30->32[label="False"];
31[label="Node Type: CONTINUE 31
"];
31->38;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
(cbs,lab,lm) = _oldHavven.issuanceData(issuer)

IRs:
TUPLE_1(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:_oldHavven(Havven), function:issuanceData, arguments:['issuer']  
cbs(uint256)= UNPACK TUPLE_1 index: 0 
lab(uint256)= UNPACK TUPLE_1 index: 1 
lm(uint256)= UNPACK TUPLE_1 index: 2 "];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
nominsIssued[issuer] = nomins

IRs:
REF_122(uint256) -> nominsIssued[issuer]
REF_122(uint256) (->nominsIssued) := nomins(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
issuanceData[issuer].currentBalanceSum = cbs

IRs:
REF_123(Havven.IssuanceData) -> issuanceData[issuer]
REF_124(uint256) -> REF_123.currentBalanceSum
REF_124(uint256) (->issuanceData) := cbs(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
issuanceData[issuer].lastAverageBalance = lab

IRs:
REF_125(Havven.IssuanceData) -> issuanceData[issuer]
REF_126(uint256) -> REF_125.lastAverageBalance
REF_126(uint256) (->issuanceData) := lab(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
issuanceData[issuer].lastModified = lm

IRs:
REF_127(Havven.IssuanceData) -> issuanceData[issuer]
REF_128(uint256) -> REF_127.lastModified
REF_128(uint256) (->issuanceData) := lm(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_739(uint256) := i(uint256)
i(uint256) = i + 1"];
38->26;
39[label="Node Type: END_IF 39
"];
40[label="Node Type: EXPRESSION 40

EXPRESSION:
ExternStateToken(_proxy,_tokenState,TOKEN_NAME,TOKEN_SYMBOL,HAVVEN_SUPPLY,_owner)

IRs:
INTERNAL_CALL, ExternStateToken.constructor(address,TokenState,string,string,uint256,address)(_proxy,_tokenState,TOKEN_NAME,TOKEN_SYMBOL,HAVVEN_SUPPLY,_owner)"];
40->1;
}
// Function: 5854.sol-Havven-constructor(address,TokenState,string,string,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SelfDestructible(_owner)

IRs:
INTERNAL_CALL, SelfDestructible.constructor(address)(_owner)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Proxyable(_proxy,_owner)

IRs:
INTERNAL_CALL, Proxyable.constructor(address,address)(_proxy,_owner)"];
6->1;
}
// Function: 5854.sol-Havven-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_662 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_662(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 5854.sol-Havven-divIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y != 0

IRs:
TMP_722(bool) = y != 0
RETURN TMP_722"];
}
// Function: 5854.sol-Havven-emitApproval(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,APPROVAL_SIG,bytes32(owner),bytes32(spender),0)

IRs:
TMP_656(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_657 = CONVERT owner to bytes32
TMP_658 = CONVERT spender to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_656', '3', 'APPROVAL_SIG', 'TMP_657', 'TMP_658', '0']  "];
}
// Function: 5854.sol-Havven-emitEscrowUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newEscrow),1,ESCROWUPDATED_SIG,0,0,0)

IRs:
TMP_894(bytes) = SOLIDITY_CALL abi.encode()(newEscrow)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_894', '1', 'ESCROWUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitFeePeriodDurationUpdated(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(duration),1,FEEPERIODDURATIONUPDATED_SIG,0,0,0)

IRs:
TMP_885(bytes) = SOLIDITY_CALL abi.encode()(duration)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_885', '1', 'FEEPERIODDURATIONUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitFeePeriodRollover(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(timestamp),1,FEEPERIODROLLOVER_SIG,0,0,0)

IRs:
TMP_883(bytes) = SOLIDITY_CALL abi.encode()(timestamp)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_883', '1', 'FEEPERIODROLLOVER_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitFeesWithdrawn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),2,FEESWITHDRAWN_SIG,bytes32(account),0,0)

IRs:
TMP_887(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_888 = CONVERT account to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_887', '2', 'FEESWITHDRAWN_SIG', 'TMP_888', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitIssuanceRatioUpdated(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newRatio),1,ISSUANCERATIOUPDATED_SIG,0,0,0)

IRs:
TMP_881(bytes) = SOLIDITY_CALL abi.encode()(newRatio)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_881', '1', 'ISSUANCERATIOUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitIssuersUpdated(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
value

IRs:
CONDITION value"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proxy._emit(abi.encode(),3,ISSUERSUPDATED_SIG,bytes32(account),bytes32(1),0)

IRs:
TMP_896(bytes) = SOLIDITY_CALL abi.encode()()
TMP_897 = CONVERT account to bytes32
TMP_898 = CONVERT 1 to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_896', '3', 'ISSUERSUPDATED_SIG', 'TMP_897', 'TMP_898', '0']  "];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proxy._emit(abi.encode(),3,ISSUERSUPDATED_SIG,bytes32(account),bytes32(0),0)

IRs:
TMP_900(bytes) = SOLIDITY_CALL abi.encode()()
TMP_901 = CONVERT account to bytes32
TMP_902 = CONVERT 0 to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_900', '3', 'ISSUERSUPDATED_SIG', 'TMP_901', 'TMP_902', '0']  "];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 5854.sol-Havven-emitNominUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newNomin),1,NOMINUPDATED_SIG,0,0,0)

IRs:
TMP_892(bytes) = SOLIDITY_CALL abi.encode()(newNomin)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_892', '1', 'NOMINUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitOracleUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newOracle),1,ORACLEUPDATED_SIG,0,0,0)

IRs:
TMP_890(bytes) = SOLIDITY_CALL abi.encode()(newOracle)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_890', '1', 'ORACLEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitPriceUpdated(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newPrice,timestamp),1,PRICEUPDATED_SIG,0,0,0)

IRs:
TMP_879(bytes) = SOLIDITY_CALL abi.encode()(newPrice,timestamp)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_879', '1', 'PRICEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitTokenStateUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newTokenState),1,TOKENSTATEUPDATED_SIG,0,0,0)

IRs:
TMP_660(bytes) = SOLIDITY_CALL abi.encode()(newTokenState)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_660', '1', 'TOKENSTATEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Havven-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,TRANSFER_SIG,bytes32(from),bytes32(to),0)

IRs:
TMP_652(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_653 = CONVERT from to bytes32
TMP_654 = CONVERT to to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_652', '3', 'TRANSFER_SIG', 'TMP_653', 'TMP_654', '0']  "];
}
// Function: 5854.sol-Havven-initiateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = now

IRs:
initiationTime(uint256) := now(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = true

IRs:
selfDestructInitiated(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructInitiated(SELFDESTRUCT_DELAY)

IRs:
Emit SelfDestructInitiated(SELFDESTRUCT_DELAY)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Havven-intToDec(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(i,UNIT)

IRs:
TMP_728(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(i,UNIT)
RETURN TMP_728"];
}
// Function: 5854.sol-Havven-issuanceCurrentBalanceSum(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
issuanceData[account].currentBalanceSum

IRs:
REF_130(Havven.IssuanceData) -> issuanceData[account]
REF_131(uint256) -> REF_130.currentBalanceSum
RETURN REF_131"];
}
// Function: 5854.sol-Havven-issuanceDraft(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
issued = nominsIssued[account]

IRs:
REF_178(uint256) -> nominsIssued[account]
issued(uint256) := REF_178(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
issued == 0

IRs:
TMP_849(bool) = issued == 0
CONDITION TMP_849"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
USDtoHAV(safeDiv_dec(issued,issuanceRatio))

IRs:
TMP_850(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv_dec(uint256,uint256)(issued,issuanceRatio)
TMP_851(uint256) = INTERNAL_CALL, Havven.USDtoHAV(uint256)(TMP_850)
RETURN TMP_851"];
}
// Function: 5854.sol-Havven-issuanceLastAverageBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
issuanceData[account].lastAverageBalance

IRs:
REF_132(Havven.IssuanceData) -> issuanceData[account]
REF_133(uint256) -> REF_132.lastAverageBalance
RETURN REF_133"];
}
// Function: 5854.sol-Havven-issuanceLastModified(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
issuanceData[account].lastModified

IRs:
REF_134(Havven.IssuanceData) -> issuanceData[account]
REF_135(uint256) -> REF_134.lastModified
RETURN REF_135"];
}
// Function: 5854.sol-Havven-issueMaxNomins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
issueNomins(remainingIssuableNomins(messageSender))

IRs:
TMP_817(uint256) = INTERNAL_CALL, Havven.remainingIssuableNomins(address)(messageSender)
INTERNAL_CALL, Havven.issueNomins(uint256)(TMP_817)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
2->1;
}
// Function: 5854.sol-Havven-issueNomins(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount <= remainingIssuableNomins(sender))

IRs:
TMP_808(uint256) = INTERNAL_CALL, Havven.remainingIssuableNomins(address)(sender)
TMP_809(bool) = amount <= TMP_808
TMP_810(None) = SOLIDITY_CALL require(bool)(TMP_809)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTot = nomin.totalSupply()

IRs:
TMP_811(uint256) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:totalSupply, arguments:[]  
lastTot(uint256) := TMP_811(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
preIssued = nominsIssued[sender]

IRs:
REF_163(uint256) -> nominsIssued[sender]
preIssued(uint256) := REF_163(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nomin.issue(sender,amount)

IRs:
HIGH_LEVEL_CALL, dest:nomin(Nomin), function:issue, arguments:['sender', 'amount']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
nominsIssued[sender] = safeAdd(preIssued,amount)

IRs:
REF_165(uint256) -> nominsIssued[sender]
TMP_813(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(preIssued,amount)
REF_165(uint256) (->nominsIssued) := TMP_813(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateIssuanceData(sender,preIssued,lastTot)

IRs:
INTERNAL_CALL, Havven.updateIssuanceData(address,uint256,uint256)(sender,preIssued,lastTot)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
requireIssuer(messageSender)

IRs:
MODIFIER_CALL, Havven.requireIssuer(address)(messageSender)"];
9->1;
}
// Function: 5854.sol-Havven-lockedCollateral(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
debt = issuanceDraft(account)

IRs:
TMP_852(uint256) = INTERNAL_CALL, Havven.issuanceDraft(address)(account)
debt(uint256) := TMP_852(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
collat = collateral(account)

IRs:
TMP_853(uint256) = INTERNAL_CALL, Havven.collateral(address)(account)
collat(uint256) := TMP_853(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
debt > collat

IRs:
TMP_854(bool) = debt > collat
CONDITION TMP_854"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
collat

IRs:
RETURN collat"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
debt

IRs:
RETURN debt"];
}
// Function: 5854.sol-Havven-maxIssuableNomins(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
! isIssuer[issuer]

IRs:
REF_171(bool) -> isIssuer[issuer]
TMP_829 = UnaryType.BANG REF_171 
CONDITION TMP_829"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
escrow != HavvenEscrow(0)

IRs:
TMP_830 = CONVERT 0 to HavvenEscrow
TMP_831(bool) = escrow != TMP_830
CONDITION TMP_831"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
totalOwnedHavvens = safeAdd(tokenState.balanceOf(issuer),escrow.balanceOf(issuer))

IRs:
TMP_832(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['issuer']  
TMP_833(uint256) = HIGH_LEVEL_CALL, dest:escrow(HavvenEscrow), function:balanceOf, arguments:['issuer']  
TMP_834(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_832,TMP_833)
totalOwnedHavvens(uint256) := TMP_834(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
safeMul_dec(HAVtoUSD(totalOwnedHavvens),issuanceRatio)

IRs:
TMP_835(uint256) = INTERNAL_CALL, Havven.HAVtoUSD(uint256)(totalOwnedHavvens)
TMP_836(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul_dec(uint256,uint256)(TMP_835,issuanceRatio)
RETURN TMP_836"];
7[label="Node Type: RETURN 7

EXPRESSION:
safeMul_dec(HAVtoUSD(tokenState.balanceOf(issuer)),issuanceRatio)

IRs:
TMP_837(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['issuer']  
TMP_838(uint256) = INTERNAL_CALL, Havven.HAVtoUSD(uint256)(TMP_837)
TMP_839(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul_dec(uint256,uint256)(TMP_838,issuanceRatio)
RETURN TMP_839"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
priceNotStale()

IRs:
MODIFIER_CALL, Havven.priceNotStale()()"];
9->1;
}
// Function: 5854.sol-Havven-mulIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_711(bool) = x == 0
CONDITION TMP_711"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(x * y) / x == y

IRs:
TMP_712(uint256) = x * y
TMP_713(uint256) = TMP_712 / x
TMP_714(bool) = TMP_713 == y
RETURN TMP_714"];
}
// Function: 5854.sol-Havven-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Havven-onlyOracle()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oracle)

IRs:
TMP_932(bool) = msg.sender == oracle
TMP_933(None) = SOLIDITY_CALL require(bool)(TMP_932)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Havven-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_929(bool) = msg.sender == owner
TMP_930(None) = SOLIDITY_CALL require(bool)(TMP_929)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Havven-onlyProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxy(msg.sender) == proxy)

IRs:
TMP_920 = CONVERT msg.sender to Proxy
TMP_921(bool) = TMP_920 == proxy
TMP_922(None) = SOLIDITY_CALL require(bool)(TMP_921)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Havven-optionalProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_923 = CONVERT msg.sender to Proxy
TMP_924(bool) = TMP_923 != proxy
CONDITION TMP_924"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5854.sol-Havven-optionalProxy_onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_925 = CONVERT msg.sender to Proxy
TMP_926(bool) = TMP_925 != proxy
CONDITION TMP_926"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(messageSender == owner)

IRs:
TMP_927(bool) = messageSender == owner
TMP_928(None) = SOLIDITY_CALL require(bool)(TMP_927)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 5854.sol-Havven-priceIsStale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeAdd(lastPriceUpdateTime,priceStalePeriod) < now

IRs:
TMP_877(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(lastPriceUpdateTime,priceStalePeriod)
TMP_878(bool) = TMP_877 < now
RETURN TMP_878"];
}
// Function: 5854.sol-Havven-priceNotStale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! priceIsStale())

IRs:
TMP_934(bool) = INTERNAL_CALL, Havven.priceIsStale()()
TMP_935 = UnaryType.BANG TMP_934 
TMP_936(None) = SOLIDITY_CALL require(bool)(TMP_935)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Havven-recomputeLastAverageBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateIssuanceData(account,nominsIssued[account],nomin.totalSupply())

IRs:
REF_158(uint256) -> nominsIssued[account]
TMP_806(uint256) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:totalSupply, arguments:[]  
INTERNAL_CALL, Havven.updateIssuanceData(address,uint256,uint256)(account,REF_158,TMP_806)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
issuanceData[account].lastAverageBalance

IRs:
REF_160(Havven.IssuanceData) -> issuanceData[account]
REF_161(uint256) -> REF_160.lastAverageBalance
RETURN REF_161"];
}
// Function: 5854.sol-Havven-remainingIssuableNomins(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
issued = nominsIssued[issuer]

IRs:
REF_175(uint256) -> nominsIssued[issuer]
issued(uint256) := REF_175(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
max = maxIssuableNomins(issuer)

IRs:
TMP_841(uint256) = INTERNAL_CALL, Havven.maxIssuableNomins(address)(issuer)
max(uint256) := TMP_841(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
issued > max

IRs:
TMP_842(bool) = issued > max
CONDITION TMP_842"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: RETURN 5

EXPRESSION:
safeSub(max,issued)

IRs:
TMP_843(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(max,issued)
RETURN TMP_843"];
}
// Function: 5854.sol-Havven-requireIssuer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isIssuer[account])

IRs:
REF_199(bool) -> isIssuer[account]
TMP_931(None) = SOLIDITY_CALL require(bool)(REF_199)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Havven-rolloverFeePeriodIfElapsed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now >= feePeriodStartTime + feePeriodDuration

IRs:
TMP_825(uint256) = feePeriodStartTime + feePeriodDuration
TMP_826(bool) = now >= TMP_825
CONDITION TMP_826"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastFeesCollected = nomin.feePool()

IRs:
TMP_827(uint256) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:feePool, arguments:[]  
lastFeesCollected(uint256) := TMP_827(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lastFeePeriodStartTime = feePeriodStartTime

IRs:
lastFeePeriodStartTime(uint256) := feePeriodStartTime(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
feePeriodStartTime = now

IRs:
feePeriodStartTime(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
emitFeePeriodRollover(now)

IRs:
INTERNAL_CALL, Havven.emitFeePeriodRollover(uint256)(now)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 5854.sol-Havven-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x + y >= y)

IRs:
TMP_703(uint256) = x + y
TMP_704(bool) = TMP_703 >= y
TMP_705(None) = SOLIDITY_CALL require(bool)(TMP_704)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_706(uint256) = x + y
RETURN TMP_706"];
}
// Function: 5854.sol-Havven-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y != 0)

IRs:
TMP_723(bool) = y != 0
TMP_724(None) = SOLIDITY_CALL require(bool)(TMP_723)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x / y

IRs:
TMP_725(uint256) = x / y
RETURN TMP_725"];
}
// Function: 5854.sol-Havven-safeDiv_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv(safeMul(x,UNIT),y)

IRs:
TMP_726(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,UNIT)
TMP_727(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv(uint256,uint256)(TMP_726,y)
RETURN TMP_727"];
}
// Function: 5854.sol-Havven-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_715(bool) = x == 0
CONDITION TMP_715"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
p = x * y

IRs:
TMP_716(uint256) = x * y
p(uint256) := TMP_716(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(p / x == y)

IRs:
TMP_717(uint256) = p / x
TMP_718(bool) = TMP_717 == y
TMP_719(None) = SOLIDITY_CALL require(bool)(TMP_718)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
p

IRs:
RETURN p"];
}
// Function: 5854.sol-Havven-safeMul_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(x,y) / UNIT

IRs:
TMP_720(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,y)
TMP_721(uint256) = TMP_720 / UNIT
RETURN TMP_721"];
}
// Function: 5854.sol-Havven-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y <= x)

IRs:
TMP_708(bool) = y <= x
TMP_709(None) = SOLIDITY_CALL require(bool)(TMP_708)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_710(uint256) = x - y
RETURN TMP_710"];
}
// Function: 5854.sol-Havven-selfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(selfDestructInitiated && initiationTime + SELFDESTRUCT_DELAY < now)

IRs:
TMP_694(uint256) = initiationTime + SELFDESTRUCT_DELAY
TMP_695(bool) = TMP_694 < now
TMP_696(bool) = selfDestructInitiated && TMP_695
TMP_697(None) = SOLIDITY_CALL require(bool)(TMP_696)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
beneficiary = selfDestructBeneficiary

IRs:
beneficiary(address) := selfDestructBeneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructed(beneficiary)

IRs:
Emit SelfDestructed(beneficiary)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
selfdestruct(address)(beneficiary)

IRs:
TMP_699(None) = SOLIDITY_CALL selfdestruct(address)(beneficiary)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 5854.sol-Havven-setEscrow(HavvenEscrow)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
escrow = _escrow

IRs:
escrow(HavvenEscrow) := _escrow(HavvenEscrow)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitEscrowUpdated(_escrow)

IRs:
INTERNAL_CALL, Havven.emitEscrowUpdated(address)(_escrow)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Havven-setFeePeriodDuration(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(MIN_FEE_PERIOD_DURATION <= duration && duration <= MAX_FEE_PERIOD_DURATION)

IRs:
TMP_745(bool) = MIN_FEE_PERIOD_DURATION <= duration
TMP_746(bool) = duration <= MAX_FEE_PERIOD_DURATION
TMP_747(bool) = TMP_745 && TMP_746
TMP_748(None) = SOLIDITY_CALL require(bool)(TMP_747)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
feePeriodDuration = duration

IRs:
feePeriodDuration(uint256) := duration(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitFeePeriodDurationUpdated(duration)

IRs:
INTERNAL_CALL, Havven.emitFeePeriodDurationUpdated(uint256)(duration)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rolloverFeePeriodIfElapsed()

IRs:
INTERNAL_CALL, Havven.rolloverFeePeriodIfElapsed()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
5->1;
}
// Function: 5854.sol-Havven-setIssuanceRatio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_issuanceRatio <= MAX_ISSUANCE_RATIO)

IRs:
TMP_755(bool) = _issuanceRatio <= MAX_ISSUANCE_RATIO
TMP_756(None) = SOLIDITY_CALL require(bool)(TMP_755)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
issuanceRatio = _issuanceRatio

IRs:
issuanceRatio(uint256) := _issuanceRatio(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitIssuanceRatioUpdated(_issuanceRatio)

IRs:
INTERNAL_CALL, Havven.emitIssuanceRatioUpdated(uint256)(_issuanceRatio)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Havven-setIssuer(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isIssuer[account] = value

IRs:
REF_129(bool) -> isIssuer[account]
REF_129(bool) (->isIssuer) := value(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitIssuersUpdated(account,value)

IRs:
INTERNAL_CALL, Havven.emitIssuersUpdated(address,bool)(account,value)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Havven-setMessageSender(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
messageSender = sender

IRs:
messageSender(address) := sender(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy()

IRs:
MODIFIER_CALL, Proxyable.onlyProxy()()"];
2->1;
}
// Function: 5854.sol-Havven-setNomin(Nomin)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nomin = _nomin

IRs:
nomin(Nomin) := _nomin(Nomin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitNominUpdated(_nomin)

IRs:
INTERNAL_CALL, Havven.emitNominUpdated(address)(_nomin)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Havven-setOracle(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oracle = _oracle

IRs:
oracle(address) := _oracle(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitOracleUpdated(_oracle)

IRs:
INTERNAL_CALL, Havven.emitOracleUpdated(address)(_oracle)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Havven-setPriceStalePeriod(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
priceStalePeriod = time

IRs:
priceStalePeriod(uint256) := time(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
2->1;
}
// Function: 5854.sol-Havven-setProxy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_665 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_665(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Havven-setSelfDestructBeneficiary(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_685 = CONVERT 0 to address
TMP_686(bool) = _beneficiary != TMP_685
TMP_687(None) = SOLIDITY_CALL require(bool)(TMP_686)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _beneficiary

IRs:
selfDestructBeneficiary(address) := _beneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_beneficiary)

IRs:
Emit SelfDestructBeneficiaryUpdated(_beneficiary)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Havven-setTokenState(TokenState)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTokenStateUpdated(_tokenState)

IRs:
INTERNAL_CALL, ExternStateToken.emitTokenStateUpdated(address)(_tokenState)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Havven-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
UNIT = 10 ** uint256(decimals)

IRs:
TMP_905 = CONVERT decimals to uint256
TMP_906(uint256) = 10 ** TMP_905
UNIT(uint256) := TMP_906(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SELFDESTRUCT_DELAY = 2419200

IRs:
SELFDESTRUCT_DELAY(uint256) := 2419200(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TRANSFER_SIG = keccak256()(Transfer(address,address,uint256))

IRs:
TMP_907(bytes32) = SOLIDITY_CALL keccak256()(Transfer(address,address,uint256))
TRANSFER_SIG(bytes32) := TMP_907(bytes32)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
APPROVAL_SIG = keccak256()(Approval(address,address,uint256))

IRs:
TMP_908(bytes32) = SOLIDITY_CALL keccak256()(Approval(address,address,uint256))
APPROVAL_SIG(bytes32) := TMP_908(bytes32)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
TOKENSTATEUPDATED_SIG = keccak256()(TokenStateUpdated(address))

IRs:
TMP_909(bytes32) = SOLIDITY_CALL keccak256()(TokenStateUpdated(address))
TOKENSTATEUPDATED_SIG(bytes32) := TMP_909(bytes32)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MIN_FEE_PERIOD_DURATION = 86400

IRs:
MIN_FEE_PERIOD_DURATION(uint256) := 86400(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
MAX_FEE_PERIOD_DURATION = 15724800

IRs:
MAX_FEE_PERIOD_DURATION(uint256) := 15724800(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
MAX_ISSUANCE_RATIO = UNIT

IRs:
MAX_ISSUANCE_RATIO(uint256) := UNIT(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
HAVVEN_SUPPLY = 1e8 * UNIT

IRs:
TMP_910(uint256) = 100000000 * UNIT
HAVVEN_SUPPLY(uint256) := TMP_910(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
ORACLE_FUTURE_LIMIT = 600

IRs:
ORACLE_FUTURE_LIMIT(uint256) := 600(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
TOKEN_NAME = Havven

IRs:
TOKEN_NAME(string) := Havven(string)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
TOKEN_SYMBOL = HAV

IRs:
TOKEN_SYMBOL(string) := HAV(string)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
PRICEUPDATED_SIG = keccak256()(PriceUpdated(uint256,uint256))

IRs:
TMP_911(bytes32) = SOLIDITY_CALL keccak256()(PriceUpdated(uint256,uint256))
PRICEUPDATED_SIG(bytes32) := TMP_911(bytes32)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ISSUANCERATIOUPDATED_SIG = keccak256()(IssuanceRatioUpdated(uint256))

IRs:
TMP_912(bytes32) = SOLIDITY_CALL keccak256()(IssuanceRatioUpdated(uint256))
ISSUANCERATIOUPDATED_SIG(bytes32) := TMP_912(bytes32)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
FEEPERIODROLLOVER_SIG = keccak256()(FeePeriodRollover(uint256))

IRs:
TMP_913(bytes32) = SOLIDITY_CALL keccak256()(FeePeriodRollover(uint256))
FEEPERIODROLLOVER_SIG(bytes32) := TMP_913(bytes32)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
FEEPERIODDURATIONUPDATED_SIG = keccak256()(FeePeriodDurationUpdated(uint256))

IRs:
TMP_914(bytes32) = SOLIDITY_CALL keccak256()(FeePeriodDurationUpdated(uint256))
FEEPERIODDURATIONUPDATED_SIG(bytes32) := TMP_914(bytes32)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
FEESWITHDRAWN_SIG = keccak256()(FeesWithdrawn(address,uint256))

IRs:
TMP_915(bytes32) = SOLIDITY_CALL keccak256()(FeesWithdrawn(address,uint256))
FEESWITHDRAWN_SIG(bytes32) := TMP_915(bytes32)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
ORACLEUPDATED_SIG = keccak256()(OracleUpdated(address))

IRs:
TMP_916(bytes32) = SOLIDITY_CALL keccak256()(OracleUpdated(address))
ORACLEUPDATED_SIG(bytes32) := TMP_916(bytes32)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
NOMINUPDATED_SIG = keccak256()(NominUpdated(address))

IRs:
TMP_917(bytes32) = SOLIDITY_CALL keccak256()(NominUpdated(address))
NOMINUPDATED_SIG(bytes32) := TMP_917(bytes32)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
ESCROWUPDATED_SIG = keccak256()(EscrowUpdated(address))

IRs:
TMP_918(bytes32) = SOLIDITY_CALL keccak256()(EscrowUpdated(address))
ESCROWUPDATED_SIG(bytes32) := TMP_918(bytes32)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
ISSUERSUPDATED_SIG = keccak256()(IssuersUpdated(address,bool))

IRs:
TMP_919(bytes32) = SOLIDITY_CALL keccak256()(IssuersUpdated(address,bool))
ISSUERSUPDATED_SIG(bytes32) := TMP_919(bytes32)"];
}
// Function: 5854.sol-Havven-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
feePeriodDuration = 2419200

IRs:
feePeriodDuration(uint256) := 2419200(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
priceStalePeriod = 10800

IRs:
priceStalePeriod(uint256) := 10800(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
issuanceRatio = UNIT / 5

IRs:
TMP_904(uint256) = UNIT / 5
issuanceRatio(uint256) := TMP_904(uint256)"];
}
// Function: 5854.sol-Havven-subIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y <= x

IRs:
TMP_707(bool) = y <= x
RETURN TMP_707"];
}
// Function: 5854.sol-Havven-terminateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = 0

IRs:
initiationTime(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = false

IRs:
selfDestructInitiated(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructTerminated()

IRs:
Emit SelfDestructTerminated()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Havven-totalIssuanceCurrentBalanceSum()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalIssuanceData.currentBalanceSum

IRs:
REF_136(uint256) -> totalIssuanceData.currentBalanceSum
RETURN REF_136"];
}
// Function: 5854.sol-Havven-totalIssuanceLastAverageBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalIssuanceData.lastAverageBalance

IRs:
REF_137(uint256) -> totalIssuanceData.lastAverageBalance
RETURN REF_137"];
}
// Function: 5854.sol-Havven-totalIssuanceLastModified()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalIssuanceData.lastModified

IRs:
REF_138(uint256) -> totalIssuanceData.lastModified
RETURN REF_138"];
}
// Function: 5854.sol-Havven-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nominsIssued[sender] == 0 || value <= transferableHavvens(sender))

IRs:
REF_139(uint256) -> nominsIssued[sender]
TMP_761(bool) = REF_139 == 0
TMP_762(uint256) = INTERNAL_CALL, Havven.transferableHavvens(address)(sender)
TMP_763(bool) = value <= TMP_762
TMP_764(bool) = TMP_761 || TMP_763
TMP_765(None) = SOLIDITY_CALL require(bool)(TMP_764)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer_byProxy(sender,to,value)

IRs:
TMP_766(bool) = INTERNAL_CALL, ExternStateToken._transfer_byProxy(address,address,uint256)(sender,to,value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
5->1;
}
// Function: 5854.sol-Havven-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nominsIssued[from] == 0 || value <= transferableHavvens(from))

IRs:
REF_140(uint256) -> nominsIssued[from]
TMP_768(bool) = REF_140 == 0
TMP_769(uint256) = INTERNAL_CALL, Havven.transferableHavvens(address)(from)
TMP_770(bool) = value <= TMP_769
TMP_771(bool) = TMP_768 || TMP_770
TMP_772(None) = SOLIDITY_CALL require(bool)(TMP_771)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transferFrom_byProxy(sender,from,to,value)

IRs:
TMP_773(bool) = INTERNAL_CALL, ExternStateToken._transferFrom_byProxy(address,address,address,uint256)(sender,from,to,value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
5->1;
}
// Function: 5854.sol-Havven-transferableHavvens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
draft = issuanceDraft(account)

IRs:
TMP_858(uint256) = INTERNAL_CALL, Havven.issuanceDraft(address)(account)
draft(uint256) := TMP_858(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
collat = collateral(account)

IRs:
TMP_859(uint256) = INTERNAL_CALL, Havven.collateral(address)(account)
collat(uint256) := TMP_859(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
draft > collat

IRs:
TMP_860(bool) = draft > collat
CONDITION TMP_860"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
bal = balanceOf(account)

IRs:
TMP_861(uint256) = INTERNAL_CALL, ExternStateToken.balanceOf(address)(account)
bal(uint256) := TMP_861(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
draft > safeSub(collat,bal)

IRs:
TMP_862(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(collat,bal)
TMP_863(bool) = draft > TMP_862
CONDITION TMP_863"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
safeSub(collat,draft)

IRs:
TMP_864(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(collat,draft)
RETURN TMP_864"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
bal

IRs:
RETURN bal"];
}
// Function: 5854.sol-Havven-unlockedCollateral(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
locked = lockedCollateral(account)

IRs:
TMP_855(uint256) = INTERNAL_CALL, Havven.lockedCollateral(address)(account)
locked(uint256) := TMP_855(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
collat = collateral(account)

IRs:
TMP_856(uint256) = INTERNAL_CALL, Havven.collateral(address)(account)
collat(uint256) := TMP_856(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
safeSub(collat,locked)

IRs:
TMP_857(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(collat,locked)
RETURN TMP_857"];
}
// Function: 5854.sol-Havven-updateIssuanceData(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalIssuanceData = computeIssuanceData(lastTotalSupply,totalIssuanceData)

IRs:
TMP_790(Havven.IssuanceData) = INTERNAL_CALL, Havven.computeIssuanceData(uint256,Havven.IssuanceData)(lastTotalSupply,totalIssuanceData)
totalIssuanceData(Havven.IssuanceData) := TMP_790(Havven.IssuanceData)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
issuanceData[account].lastModified < feePeriodStartTime

IRs:
REF_150(Havven.IssuanceData) -> issuanceData[account]
REF_151(uint256) -> REF_150.lastModified
TMP_791(bool) = REF_151 < feePeriodStartTime
CONDITION TMP_791"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hasWithdrawnFees[account] = false

IRs:
REF_152(bool) -> hasWithdrawnFees[account]
REF_152(bool) (->hasWithdrawnFees) := False(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
issuanceData[account] = computeIssuanceData(preBalance,issuanceData[account])

IRs:
REF_153(Havven.IssuanceData) -> issuanceData[account]
REF_154(Havven.IssuanceData) -> issuanceData[account]
TMP_792(Havven.IssuanceData) = INTERNAL_CALL, Havven.computeIssuanceData(uint256,Havven.IssuanceData)(preBalance,REF_154)
REF_153(Havven.IssuanceData) (->issuanceData) := TMP_792(Havven.IssuanceData)"];
}
// Function: 5854.sol-Havven-updatePrice(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(lastPriceUpdateTime < timeSent && timeSent < now + ORACLE_FUTURE_LIMIT)

IRs:
TMP_869(bool) = lastPriceUpdateTime < timeSent
TMP_870(uint256) = now + ORACLE_FUTURE_LIMIT
TMP_871(bool) = timeSent < TMP_870
TMP_872(bool) = TMP_869 && TMP_871
TMP_873(None) = SOLIDITY_CALL require(bool)(TMP_872)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
price = newPrice

IRs:
price(uint256) := newPrice(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lastPriceUpdateTime = timeSent

IRs:
lastPriceUpdateTime(uint256) := timeSent(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
emitPriceUpdated(newPrice,timeSent)

IRs:
INTERNAL_CALL, Havven.emitPriceUpdated(uint256,uint256)(newPrice,timeSent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rolloverFeePeriodIfElapsed()

IRs:
INTERNAL_CALL, Havven.rolloverFeePeriodIfElapsed()()"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOracle()

IRs:
MODIFIER_CALL, Havven.onlyOracle()()"];
6->1;
}
// Function: 5854.sol-Havven-withdrawFees()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rolloverFeePeriodIfElapsed()

IRs:
INTERNAL_CALL, Havven.rolloverFeePeriodIfElapsed()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(! nomin.frozen(sender))

IRs:
TMP_776(bool) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:frozen, arguments:['sender']  
TMP_777 = UnaryType.BANG TMP_776 
TMP_778(None) = SOLIDITY_CALL require(bool)(TMP_777)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
updateIssuanceData(sender,nominsIssued[sender],nomin.totalSupply())

IRs:
REF_142(uint256) -> nominsIssued[sender]
TMP_779(uint256) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:totalSupply, arguments:[]  
INTERNAL_CALL, Havven.updateIssuanceData(address,uint256,uint256)(sender,REF_142,TMP_779)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! hasWithdrawnFees[sender])

IRs:
REF_144(bool) -> hasWithdrawnFees[sender]
TMP_781 = UnaryType.BANG REF_144 
TMP_782(None) = SOLIDITY_CALL require(bool)(TMP_781)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastTotalIssued = totalIssuanceData.lastAverageBalance

IRs:
REF_145(uint256) -> totalIssuanceData.lastAverageBalance
lastTotalIssued(uint256) := REF_145(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
lastTotalIssued > 0

IRs:
TMP_783(bool) = lastTotalIssued > 0
CONDITION TMP_783"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
feesOwed = safeDiv_dec(safeMul_dec(issuanceData[sender].lastAverageBalance,lastFeesCollected),lastTotalIssued)

IRs:
REF_146(Havven.IssuanceData) -> issuanceData[sender]
REF_147(uint256) -> REF_146.lastAverageBalance
TMP_784(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul_dec(uint256,uint256)(REF_147,lastFeesCollected)
TMP_785(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv_dec(uint256,uint256)(TMP_784,lastTotalIssued)
feesOwed(uint256) := TMP_785(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
hasWithdrawnFees[sender] = true

IRs:
REF_148(bool) -> hasWithdrawnFees[sender]
REF_148(bool) (->hasWithdrawnFees) := True(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
feesOwed != 0

IRs:
TMP_786(bool) = feesOwed != 0
CONDITION TMP_786"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
nomin.withdrawFees(sender,feesOwed)

IRs:
TMP_787(bool) = HIGH_LEVEL_CALL, dest:nomin(Nomin), function:withdrawFees, arguments:['sender', 'feesOwed']  "];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
emitFeesWithdrawn(messageSender,feesOwed)

IRs:
INTERNAL_CALL, Havven.emitFeesWithdrawn(address,uint256)(messageSender,feesOwed)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
16->1;
}
// Function: 5854.sol-HavvenEscrow-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_520(bool) = msg.sender == nominatedOwner
TMP_521(None) = SOLIDITY_CALL require(bool)(TMP_520)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_523 = CONVERT 0 to address
nominatedOwner(address) := TMP_523(address)"];
}
// Function: 5854.sol-HavvenEscrow-addIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
x + y >= y

IRs:
TMP_524(uint256) = x + y
TMP_525(bool) = TMP_524 >= y
RETURN TMP_525"];
}
// Function: 5854.sol-HavvenEscrow-addVestingSchedule(address,uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < times.length

IRs:
REF_85 -> LENGTH times
TMP_598(bool) = i < REF_85
CONDITION TMP_598"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
appendVestingEntry(account,times[i],quantities[i])

IRs:
REF_86(uint256) -> times[i]
REF_87(uint256) -> quantities[i]
INTERNAL_CALL, HavvenEscrow.appendVestingEntry(address,uint256,uint256)(account,REF_86,REF_87)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_600(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyDuringSetup()

IRs:
MODIFIER_CALL, LimitedSetup.onlyDuringSetup()()"];
8->3;
}
// Function: 5854.sol-HavvenEscrow-appendVestingEntry(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now < time)

IRs:
TMP_575(bool) = now < time
TMP_576(None) = SOLIDITY_CALL require(bool)(TMP_575)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(quantity != 0)

IRs:
TMP_577(bool) = quantity != 0
TMP_578(None) = SOLIDITY_CALL require(bool)(TMP_577)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalVestedBalance = safeAdd(totalVestedBalance,quantity)

IRs:
TMP_579(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(totalVestedBalance,quantity)
totalVestedBalance(uint256) := TMP_579(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(totalVestedBalance <= havven.balanceOf(this))

IRs:
TMP_580(uint256) = HIGH_LEVEL_CALL, dest:havven(Havven), function:balanceOf, arguments:['this']  
TMP_581(bool) = totalVestedBalance <= TMP_580
TMP_582(None) = SOLIDITY_CALL require(bool)(TMP_581)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
scheduleLength = vestingSchedules[account].length

IRs:
REF_76(uint256[2][]) -> vestingSchedules[account]
REF_77 -> LENGTH REF_76
scheduleLength(uint256) := REF_77(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(scheduleLength <= MAX_VESTING_ENTRIES)

IRs:
TMP_583(bool) = scheduleLength <= MAX_VESTING_ENTRIES
TMP_584(None) = SOLIDITY_CALL require(bool)(TMP_583)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
scheduleLength == 0

IRs:
TMP_585(bool) = scheduleLength == 0
CONDITION TMP_585"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalVestedAccountBalance[account] = quantity

IRs:
REF_78(uint256) -> totalVestedAccountBalance[account]
REF_78(uint256) (->totalVestedAccountBalance) := quantity(uint256)"];
8->11;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(getVestingTime(account,numVestingEntries(account) - 1) < time)

IRs:
TMP_586(uint256) = INTERNAL_CALL, HavvenEscrow.numVestingEntries(address)(account)
TMP_587(uint256) = TMP_586 - 1
TMP_588(uint256) = INTERNAL_CALL, HavvenEscrow.getVestingTime(address,uint256)(account,TMP_587)
TMP_589(bool) = TMP_588 < time
TMP_590(None) = SOLIDITY_CALL require(bool)(TMP_589)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalVestedAccountBalance[account] = safeAdd(totalVestedAccountBalance[account],quantity)

IRs:
REF_79(uint256) -> totalVestedAccountBalance[account]
REF_80(uint256) -> totalVestedAccountBalance[account]
TMP_591(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(REF_80,quantity)
REF_79(uint256) (->totalVestedAccountBalance) := TMP_591(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
vestingSchedules[account].push((time,quantity))

IRs:
REF_81(uint256[2][]) -> vestingSchedules[account]
REF_83 -> LENGTH REF_81
TMP_593(uint256) := REF_83(uint256)
TMP_594(uint256) = TMP_593 + 1
REF_83(uint256) (->vestingSchedules) := TMP_594(uint256)
REF_84(uint256[2]) -> REF_81[TMP_593]
TMP_595(uint256[2]) = ['time(uint256)', 'quantity(uint256)']
REF_84(uint256[2]) (->vestingSchedules) := TMP_595(uint256[2])"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyDuringSetup()

IRs:
MODIFIER_CALL, LimitedSetup.onlyDuringSetup()()"];
14->1;
}
// Function: 5854.sol-HavvenEscrow-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalVestedAccountBalance[account]

IRs:
REF_62(uint256) -> totalVestedAccountBalance[account]
RETURN REF_62"];
}
// Function: 5854.sol-HavvenEscrow-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_513 = CONVERT 0 to address
TMP_514(bool) = _owner != TMP_513
TMP_515(None) = SOLIDITY_CALL require(bool)(TMP_514)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_516 = CONVERT 0 to address
Emit OwnerChanged(TMP_516,_owner)"];
}
// Function: 5854.sol-HavvenEscrow-constructor(address,Havven)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
havven = _havven

IRs:
havven(Havven) := _havven(Havven)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
2->1;
}
// Function: 5854.sol-HavvenEscrow-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setupExpiryTime = now + setupDuration

IRs:
TMP_512(uint256) = now + setupDuration
setupExpiryTime(uint256) := TMP_512(uint256)"];
}
// Function: 5854.sol-HavvenEscrow-divIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y != 0

IRs:
TMP_545(bool) = y != 0
RETURN TMP_545"];
}
// Function: 5854.sol-HavvenEscrow-getNextVestingEntry(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
index = getNextVestingIndex(account)

IRs:
TMP_562(uint256) = INTERNAL_CALL, HavvenEscrow.getNextVestingIndex(address)(account)
index(uint256) := TMP_562(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
index == numVestingEntries(account)

IRs:
TMP_563(uint256) = INTERNAL_CALL, HavvenEscrow.numVestingEntries(address)(account)
TMP_564(bool) = index == TMP_563
CONDITION TMP_564"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(uint256(0),0)

IRs:
TMP_565 = CONVERT 0 to uint256
RETURN TMP_565,0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
getVestingScheduleEntry(account,index)

IRs:
TMP_566(uint256[2]) = INTERNAL_CALL, HavvenEscrow.getVestingScheduleEntry(address,uint256)(account,index)
RETURN TMP_566"];
}
// Function: 5854.sol-HavvenEscrow-getNextVestingIndex(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
len = numVestingEntries(account)

IRs:
TMP_557(uint256) = INTERNAL_CALL, HavvenEscrow.numVestingEntries(address)(account)
len(uint256) := TMP_557(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < len

IRs:
TMP_558(bool) = i < len
CONDITION TMP_558"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
getVestingTime(account,i) != 0

IRs:
TMP_559(uint256) = INTERNAL_CALL, HavvenEscrow.getVestingTime(address,uint256)(account,i)
TMP_560(bool) = TMP_559 != 0
CONDITION TMP_560"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
i

IRs:
RETURN i"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_561(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
len

IRs:
RETURN len"];
}
// Function: 5854.sol-HavvenEscrow-getNextVestingQuantity(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getNextVestingEntry(account)[QUANTITY_INDEX]

IRs:
TMP_568(uint256[2]) = INTERNAL_CALL, HavvenEscrow.getNextVestingEntry(address)(account)
REF_70(uint256) -> TMP_568[QUANTITY_INDEX]
RETURN REF_70"];
}
// Function: 5854.sol-HavvenEscrow-getNextVestingTime(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getNextVestingEntry(account)[TIME_INDEX]

IRs:
TMP_567(uint256[2]) = INTERNAL_CALL, HavvenEscrow.getNextVestingEntry(address)(account)
REF_69(uint256) -> TMP_567[TIME_INDEX]
RETURN REF_69"];
}
// Function: 5854.sol-HavvenEscrow-getVestingQuantity(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getVestingScheduleEntry(account,index)[QUANTITY_INDEX]

IRs:
TMP_556(uint256[2]) = INTERNAL_CALL, HavvenEscrow.getVestingScheduleEntry(address,uint256)(account,index)
REF_68(uint256) -> TMP_556[QUANTITY_INDEX]
RETURN REF_68"];
}
// Function: 5854.sol-HavvenEscrow-getVestingScheduleEntry(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
vestingSchedules[account][index]

IRs:
REF_65(uint256[2][]) -> vestingSchedules[account]
REF_66(uint256[2]) -> REF_65[index]
RETURN REF_66"];
}
// Function: 5854.sol-HavvenEscrow-getVestingTime(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getVestingScheduleEntry(account,index)[TIME_INDEX]

IRs:
TMP_555(uint256[2]) = INTERNAL_CALL, HavvenEscrow.getVestingScheduleEntry(address,uint256)(account,index)
REF_67(uint256) -> TMP_555[TIME_INDEX]
RETURN REF_67"];
}
// Function: 5854.sol-HavvenEscrow-intToDec(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(i,UNIT)

IRs:
TMP_551(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(i,UNIT)
RETURN TMP_551"];
}
// Function: 5854.sol-HavvenEscrow-mulIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_534(bool) = x == 0
CONDITION TMP_534"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(x * y) / x == y

IRs:
TMP_535(uint256) = x * y
TMP_536(uint256) = TMP_535 / x
TMP_537(bool) = TMP_536 == y
RETURN TMP_537"];
}
// Function: 5854.sol-HavvenEscrow-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-HavvenEscrow-numVestingEntries(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
vestingSchedules[account].length

IRs:
REF_63(uint256[2][]) -> vestingSchedules[account]
REF_64 -> LENGTH REF_63
RETURN REF_64"];
}
// Function: 5854.sol-HavvenEscrow-onlyDuringSetup()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now < setupExpiryTime)

IRs:
TMP_618(bool) = now < setupExpiryTime
TMP_619(None) = SOLIDITY_CALL require(bool)(TMP_618)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-HavvenEscrow-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_620(bool) = msg.sender == owner
TMP_621(None) = SOLIDITY_CALL require(bool)(TMP_620)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-HavvenEscrow-purgeAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete vestingSchedules[account]

IRs:
REF_72(uint256[2][]) -> vestingSchedules[account]
vestingSchedules = delete REF_72 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalVestedBalance = safeSub(totalVestedBalance,totalVestedAccountBalance[account])

IRs:
REF_73(uint256) -> totalVestedAccountBalance[account]
TMP_572(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(totalVestedBalance,REF_73)
totalVestedBalance(uint256) := TMP_572(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete totalVestedAccountBalance[account]

IRs:
REF_74(uint256) -> totalVestedAccountBalance[account]
totalVestedAccountBalance = delete REF_74 "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyDuringSetup()

IRs:
MODIFIER_CALL, LimitedSetup.onlyDuringSetup()()"];
5->1;
}
// Function: 5854.sol-HavvenEscrow-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x + y >= y)

IRs:
TMP_526(uint256) = x + y
TMP_527(bool) = TMP_526 >= y
TMP_528(None) = SOLIDITY_CALL require(bool)(TMP_527)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_529(uint256) = x + y
RETURN TMP_529"];
}
// Function: 5854.sol-HavvenEscrow-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y != 0)

IRs:
TMP_546(bool) = y != 0
TMP_547(None) = SOLIDITY_CALL require(bool)(TMP_546)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x / y

IRs:
TMP_548(uint256) = x / y
RETURN TMP_548"];
}
// Function: 5854.sol-HavvenEscrow-safeDiv_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv(safeMul(x,UNIT),y)

IRs:
TMP_549(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,UNIT)
TMP_550(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv(uint256,uint256)(TMP_549,y)
RETURN TMP_550"];
}
// Function: 5854.sol-HavvenEscrow-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_538(bool) = x == 0
CONDITION TMP_538"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
p = x * y

IRs:
TMP_539(uint256) = x * y
p(uint256) := TMP_539(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(p / x == y)

IRs:
TMP_540(uint256) = p / x
TMP_541(bool) = TMP_540 == y
TMP_542(None) = SOLIDITY_CALL require(bool)(TMP_541)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
p

IRs:
RETURN p"];
}
// Function: 5854.sol-HavvenEscrow-safeMul_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(x,y) / UNIT

IRs:
TMP_543(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,y)
TMP_544(uint256) = TMP_543 / UNIT
RETURN TMP_544"];
}
// Function: 5854.sol-HavvenEscrow-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y <= x)

IRs:
TMP_531(bool) = y <= x
TMP_532(None) = SOLIDITY_CALL require(bool)(TMP_531)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_533(uint256) = x - y
RETURN TMP_533"];
}
// Function: 5854.sol-HavvenEscrow-setHavven(Havven)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
havven = _havven

IRs:
havven(Havven) := _havven(Havven)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
HavvenUpdated(_havven)

IRs:
Emit HavvenUpdated(_havven)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-HavvenEscrow-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
UNIT = 10 ** uint256(decimals)

IRs:
TMP_616 = CONVERT decimals to uint256
TMP_617(uint256) = 10 ** TMP_616
UNIT(uint256) := TMP_617(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TIME_INDEX = 0

IRs:
TIME_INDEX(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
QUANTITY_INDEX = 1

IRs:
QUANTITY_INDEX(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MAX_VESTING_ENTRIES = 20

IRs:
MAX_VESTING_ENTRIES(uint256) := 20(uint256)"];
}
// Function: 5854.sol-HavvenEscrow-subIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y <= x

IRs:
TMP_530(bool) = y <= x
RETURN TMP_530"];
}
// Function: 5854.sol-HavvenEscrow-vest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
numEntries = numVestingEntries(msg.sender)

IRs:
TMP_603(uint256) = INTERNAL_CALL, HavvenEscrow.numVestingEntries(address)(msg.sender)
numEntries(uint256) := TMP_603(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->18;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < numEntries

IRs:
TMP_604(bool) = i < numEntries
CONDITION TMP_604"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
time = getVestingTime(msg.sender,i)

IRs:
TMP_605(uint256) = INTERNAL_CALL, HavvenEscrow.getVestingTime(address,uint256)(msg.sender,i)
time(uint256) := TMP_605(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
time > now

IRs:
TMP_606(bool) = time > now
CONDITION TMP_606"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: BREAK 9
"];
9->4;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
qty = getVestingQuantity(msg.sender,i)

IRs:
TMP_607(uint256) = INTERNAL_CALL, HavvenEscrow.getVestingQuantity(address,uint256)(msg.sender,i)
qty(uint256) := TMP_607(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
qty == 0

IRs:
TMP_608(bool) = qty == 0
CONDITION TMP_608"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: CONTINUE 13
"];
13->17;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
vestingSchedules[msg.sender][i] = (0,0)

IRs:
REF_88(uint256[2][]) -> vestingSchedules[msg.sender]
REF_89(uint256[2]) -> REF_88[i]
REF_89(uint256[2]) = ['0(uint256)', '0(uint256)']"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
total = safeAdd(total,qty)

IRs:
TMP_609(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(total,qty)
total(uint256) := TMP_609(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_610(uint256) := i(uint256)
i(uint256) = i + 1"];
17->6;
18[label="Node Type: IF 18

EXPRESSION:
total != 0

IRs:
TMP_611(bool) = total != 0
CONDITION TMP_611"];
18->19[label="True"];
18->23[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
totalVestedBalance = safeSub(totalVestedBalance,total)

IRs:
TMP_612(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(totalVestedBalance,total)
totalVestedBalance(uint256) := TMP_612(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
totalVestedAccountBalance[msg.sender] = safeSub(totalVestedAccountBalance[msg.sender],total)

IRs:
REF_90(uint256) -> totalVestedAccountBalance[msg.sender]
REF_91(uint256) -> totalVestedAccountBalance[msg.sender]
TMP_613(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(REF_91,total)
REF_90(uint256) (->totalVestedAccountBalance) := TMP_613(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
havven.transfer(msg.sender,total)

IRs:
TMP_614(bool) = HIGH_LEVEL_CALL, dest:havven(Havven), function:transfer, arguments:['msg.sender', 'total']  "];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Vested(msg.sender,now,total)

IRs:
Emit Vested(msg.sender,now,total)"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 5854.sol-HavvenEscrow-withdrawHavvens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
havven.transfer(havven,quantity)

IRs:
TMP_569(bool) = HIGH_LEVEL_CALL, dest:havven(Havven), function:transfer, arguments:['havven', 'quantity']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyDuringSetup()

IRs:
MODIFIER_CALL, LimitedSetup.onlyDuringSetup()()"];
3->1;
}
// Function: 5854.sol-LimitedSetup-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setupExpiryTime = now + setupDuration

IRs:
TMP_509(uint256) = now + setupDuration
setupExpiryTime(uint256) := TMP_509(uint256)"];
}
// Function: 5854.sol-LimitedSetup-onlyDuringSetup()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now < setupExpiryTime)

IRs:
TMP_510(bool) = now < setupExpiryTime
TMP_511(None) = SOLIDITY_CALL require(bool)(TMP_510)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Nomin-_internalTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_1191 = CONVERT 0 to address
TMP_1192(bool) = to != TMP_1191
TMP_1193(None) = SOLIDITY_CALL require(bool)(TMP_1192)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_1194 = CONVERT this to address
TMP_1195(bool) = to != TMP_1194
TMP_1196(None) = SOLIDITY_CALL require(bool)(TMP_1195)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(to != address(proxy))

IRs:
TMP_1197 = CONVERT proxy to address
TMP_1198(bool) = to != TMP_1197
TMP_1199(None) = SOLIDITY_CALL require(bool)(TMP_1198)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(from,safeSub(tokenState.balanceOf(from),value))

IRs:
TMP_1200(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['from']  
TMP_1201(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_1200,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['from', 'TMP_1201']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(to,safeAdd(tokenState.balanceOf(to),value))

IRs:
TMP_1203(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['to']  
TMP_1204(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_1203,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['to', 'TMP_1204']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
emitTransfer(from,to,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,to,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 5854.sol-Nomin-_internalTransfer(address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_1113 = CONVERT 0 to address
TMP_1114(bool) = to != TMP_1113
TMP_1115(None) = SOLIDITY_CALL require(bool)(TMP_1114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_1116 = CONVERT this to address
TMP_1117(bool) = to != TMP_1116
TMP_1118(None) = SOLIDITY_CALL require(bool)(TMP_1117)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(to != address(proxy))

IRs:
TMP_1119 = CONVERT proxy to address
TMP_1120(bool) = to != TMP_1119
TMP_1121(None) = SOLIDITY_CALL require(bool)(TMP_1120)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(from,safeSub(tokenState.balanceOf(from),safeAdd(amount,fee)))

IRs:
TMP_1122(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['from']  
TMP_1123(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(amount,fee)
TMP_1124(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_1122,TMP_1123)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['from', 'TMP_1124']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(to,safeAdd(tokenState.balanceOf(to),amount))

IRs:
TMP_1126(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['to']  
TMP_1127(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_1126,amount)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['to', 'TMP_1127']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenState.setBalanceOf(FEE_ADDRESS,safeAdd(tokenState.balanceOf(FEE_ADDRESS),fee))

IRs:
TMP_1129(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
TMP_1130(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_1129,fee)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['FEE_ADDRESS', 'TMP_1130']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(from,to,amount)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,to,amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
emitTransfer(from,FEE_ADDRESS,fee)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(from,FEE_ADDRESS,fee)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 5854.sol-Nomin-_transferFromSenderPaysFee_byProxy(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = transferFeeIncurred(value)

IRs:
TMP_1145(uint256) = INTERNAL_CALL, FeeToken.transferFeeIncurred(uint256)(value)
fee(uint256) := TMP_1145(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
total = safeAdd(value,fee)

IRs:
TMP_1146(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(value,fee)
total(uint256) := TMP_1146(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenState.setAllowance(from,sender,safeSub(tokenState.allowance(from,sender),total))

IRs:
TMP_1147(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['from', 'sender']  
TMP_1148(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_1147,total)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['from', 'sender', 'TMP_1148']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_internalTransfer(from,to,value,fee)

IRs:
TMP_1150(bool) = INTERNAL_CALL, FeeToken._internalTransfer(address,address,uint256,uint256)(from,to,value,fee)
RETURN TMP_1150"];
}
// Function: 5854.sol-Nomin-_transferFrom_byProxy(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState.setAllowance(from,sender,safeSub(tokenState.allowance(from,sender),value))

IRs:
TMP_1208(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['from', 'sender']  
TMP_1209(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_1208,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['from', 'sender', 'TMP_1209']  "];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_internalTransfer(from,to,value)

IRs:
TMP_1211(bool) = INTERNAL_CALL, ExternStateToken._internalTransfer(address,address,uint256)(from,to,value)
RETURN TMP_1211"];
}
// Function: 5854.sol-Nomin-_transferSenderPaysFee_byProxy(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = transferFeeIncurred(value)

IRs:
TMP_1143(uint256) = INTERNAL_CALL, FeeToken.transferFeeIncurred(uint256)(value)
fee(uint256) := TMP_1143(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_internalTransfer(sender,to,value,fee)

IRs:
TMP_1144(bool) = INTERNAL_CALL, FeeToken._internalTransfer(address,address,uint256,uint256)(sender,to,value,fee)
RETURN TMP_1144"];
}
// Function: 5854.sol-Nomin-_transfer_byProxy(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_internalTransfer(from,to,value)

IRs:
TMP_1207(bool) = INTERNAL_CALL, ExternStateToken._internalTransfer(address,address,uint256)(from,to,value)
RETURN TMP_1207"];
}
// Function: 5854.sol-Nomin-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_1239(bool) = msg.sender == nominatedOwner
TMP_1240(None) = SOLIDITY_CALL require(bool)(TMP_1239)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_1242 = CONVERT 0 to address
nominatedOwner(address) := TMP_1242(address)"];
}
// Function: 5854.sol-Nomin-addIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
x + y >= y

IRs:
TMP_1264(uint256) = x + y
TMP_1265(bool) = TMP_1264 >= y
RETURN TMP_1265"];
}
// Function: 5854.sol-Nomin-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.allowance(owner,spender)

IRs:
TMP_1187(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:allowance, arguments:['owner', 'spender']  
RETURN TMP_1187"];
}
// Function: 5854.sol-Nomin-amountReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv_dec(value,safeAdd(UNIT,transferFeeRate))

IRs:
TMP_1110(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(UNIT,transferFeeRate)
TMP_1111(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv_dec(uint256,uint256)(value,TMP_1110)
RETURN TMP_1111"];
}
// Function: 5854.sol-Nomin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenState.setAllowance(sender,spender,value)

IRs:
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setAllowance, arguments:['sender', 'spender', 'value']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitApproval(sender,spender,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitApproval(address,address,uint256)(sender,spender,value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
5->1;
}
// Function: 5854.sol-Nomin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.balanceOf(account)

IRs:
TMP_1188(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
RETURN TMP_1188"];
}
// Function: 5854.sol-Nomin-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState.setBalanceOf(account,safeSub(tokenState.balanceOf(account),amount))

IRs:
TMP_1351(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
TMP_1352(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_1351,amount)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['account', 'TMP_1352']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = safeSub(totalSupply,amount)

IRs:
TMP_1354(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(totalSupply,amount)
totalSupply(uint256) := TMP_1354(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitTransfer(account,address(0),amount)

IRs:
TMP_1355 = CONVERT 0 to address
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(account,TMP_1355,amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
emitBurned(account,amount)

IRs:
INTERNAL_CALL, Nomin.emitBurned(address,uint256)(account,amount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyHavven()

IRs:
MODIFIER_CALL, Nomin.onlyHavven()()"];
5->1;
}
// Function: 5854.sol-Nomin-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_1243 = CONVERT 0 to address
TMP_1244(bool) = _owner != TMP_1243
TMP_1245(None) = SOLIDITY_CALL require(bool)(TMP_1244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _owner

IRs:
selfDestructBeneficiary(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_owner)

IRs:
Emit SelfDestructBeneficiaryUpdated(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
4->1;
}
// Function: 5854.sol-Nomin-constructor(address,TokenState,Havven,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_proxy != 0 && address(_havven) != 0 && _owner != 0)

IRs:
TMP_1292(bool) = _proxy != 0
TMP_1293 = CONVERT _havven to address
TMP_1294(bool) = TMP_1293 != 0
TMP_1295(bool) = TMP_1292 && TMP_1294
TMP_1296(bool) = _owner != 0
TMP_1297(bool) = TMP_1295 && TMP_1296
TMP_1298(None) = SOLIDITY_CALL require(bool)(TMP_1297)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
frozen[FEE_ADDRESS] = true

IRs:
REF_301(bool) -> frozen[FEE_ADDRESS]
REF_301(bool) (->frozen) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
havven = _havven

IRs:
havven(Havven) := _havven(Havven)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
FeeToken(_proxy,_tokenState,TOKEN_NAME,TOKEN_SYMBOL,_totalSupply,TRANSFER_FEE_RATE,_havven,_owner)

IRs:
INTERNAL_CALL, FeeToken.constructor(address,TokenState,string,string,uint256,uint256,address,address)(_proxy,_tokenState,TOKEN_NAME,TOKEN_SYMBOL,_totalSupply,TRANSFER_FEE_RATE,_havven,_owner)"];
4->1;
}
// Function: 5854.sol-Nomin-constructor(address,TokenState,string,string,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SelfDestructible(_owner)

IRs:
INTERNAL_CALL, SelfDestructible.constructor(address)(_owner)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Proxyable(_proxy,_owner)

IRs:
INTERNAL_CALL, Proxyable.constructor(address,address)(_proxy,_owner)"];
6->1;
}
// Function: 5854.sol-Nomin-constructor(address,TokenState,string,string,uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
feeAuthority = _feeAuthority

IRs:
feeAuthority(address) := _feeAuthority(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_transferFeeRate <= MAX_TRANSFER_FEE_RATE)

IRs:
TMP_1098(bool) = _transferFeeRate <= MAX_TRANSFER_FEE_RATE
TMP_1099(None) = SOLIDITY_CALL require(bool)(TMP_1098)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferFeeRate = _transferFeeRate

IRs:
transferFeeRate(uint256) := _transferFeeRate(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ExternStateToken(_proxy,_tokenState,_name,_symbol,_totalSupply,_owner)

IRs:
INTERNAL_CALL, ExternStateToken.constructor(address,TokenState,string,string,uint256,address)(_proxy,_tokenState,_name,_symbol,_totalSupply,_owner)"];
4->1;
}
// Function: 5854.sol-Nomin-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_1225 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_1225(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 5854.sol-Nomin-divIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y != 0

IRs:
TMP_1285(bool) = y != 0
RETURN TMP_1285"];
}
// Function: 5854.sol-Nomin-donateToFeePool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = messageSender

IRs:
sender(address) := messageSender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balance = tokenState.balanceOf(sender)

IRs:
TMP_1164(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['sender']  
balance(uint256) := TMP_1164(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balance != 0)

IRs:
TMP_1165(bool) = balance != 0
TMP_1166(None) = SOLIDITY_CALL require(bool)(TMP_1165)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenState.setBalanceOf(sender,safeSub(balance,n))

IRs:
TMP_1167(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(balance,n)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['sender', 'TMP_1167']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(FEE_ADDRESS,safeAdd(tokenState.balanceOf(FEE_ADDRESS),n))

IRs:
TMP_1169(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
TMP_1170(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_1169,n)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['FEE_ADDRESS', 'TMP_1170']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
emitFeesDonated(sender,n)

IRs:
INTERNAL_CALL, FeeToken.emitFeesDonated(address,uint256)(sender,n)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitTransfer(sender,FEE_ADDRESS,n)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(sender,FEE_ADDRESS,n)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
9->1;
}
// Function: 5854.sol-Nomin-emitAccountFrozen(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(balance),2,ACCOUNTFROZEN_SIG,bytes32(target),0,0)

IRs:
TMP_1363(bytes) = SOLIDITY_CALL abi.encode()(balance)
TMP_1364 = CONVERT target to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1363', '2', 'ACCOUNTFROZEN_SIG', 'TMP_1364', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitAccountUnfrozen(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(),2,ACCOUNTUNFROZEN_SIG,bytes32(target),0,0)

IRs:
TMP_1366(bytes) = SOLIDITY_CALL abi.encode()()
TMP_1367 = CONVERT target to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1366', '2', 'ACCOUNTUNFROZEN_SIG', 'TMP_1367', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitApproval(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,APPROVAL_SIG,bytes32(owner),bytes32(spender),0)

IRs:
TMP_1219(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_1220 = CONVERT owner to bytes32
TMP_1221 = CONVERT spender to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1219', '3', 'APPROVAL_SIG', 'TMP_1220', 'TMP_1221', '0']  "];
}
// Function: 5854.sol-Nomin-emitBurned(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(amount),2,BURNED_SIG,bytes32(account),0,0)

IRs:
TMP_1372(bytes) = SOLIDITY_CALL abi.encode()(amount)
TMP_1373 = CONVERT account to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1372', '2', 'BURNED_SIG', 'TMP_1373', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitCourtUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newCourt),1,COURTUPDATED_SIG,0,0,0)

IRs:
TMP_1359(bytes) = SOLIDITY_CALL abi.encode()(newCourt)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1359', '1', 'COURTUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitFeeAuthorityUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newFeeAuthority),1,FEEAUTHORITYUPDATED_SIG,0,0,0)

IRs:
TMP_1177(bytes) = SOLIDITY_CALL abi.encode()(newFeeAuthority)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1177', '1', 'FEEAUTHORITYUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitFeesDonated(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),2,FEESDONATED_SIG,bytes32(donor),0,0)

IRs:
TMP_1182(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_1183 = CONVERT donor to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1182', '2', 'FEESDONATED_SIG', 'TMP_1183', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitFeesWithdrawn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),2,FEESWITHDRAWN_SIG,bytes32(account),0,0)

IRs:
TMP_1179(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_1180 = CONVERT account to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1179', '2', 'FEESWITHDRAWN_SIG', 'TMP_1180', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitHavvenUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newHavven),1,HAVVENUPDATED_SIG,0,0,0)

IRs:
TMP_1361(bytes) = SOLIDITY_CALL abi.encode()(newHavven)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1361', '1', 'HAVVENUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitIssued(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(amount),2,ISSUED_SIG,bytes32(account),0,0)

IRs:
TMP_1369(bytes) = SOLIDITY_CALL abi.encode()(amount)
TMP_1370 = CONVERT account to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1369', '2', 'ISSUED_SIG', 'TMP_1370', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitTokenStateUpdated(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newTokenState),1,TOKENSTATEUPDATED_SIG,0,0,0)

IRs:
TMP_1223(bytes) = SOLIDITY_CALL abi.encode()(newTokenState)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1223', '1', 'TOKENSTATEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Nomin-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(value),3,TRANSFER_SIG,bytes32(from),bytes32(to),0)

IRs:
TMP_1215(bytes) = SOLIDITY_CALL abi.encode()(value)
TMP_1216 = CONVERT from to bytes32
TMP_1217 = CONVERT to to bytes32
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1215', '3', 'TRANSFER_SIG', 'TMP_1216', 'TMP_1217', '0']  "];
}
// Function: 5854.sol-Nomin-emitTransferFeeRateUpdated(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy._emit(abi.encode(newFeeRate),1,TRANSFERFEERATEUPDATED_SIG,0,0,0)

IRs:
TMP_1175(bytes) = SOLIDITY_CALL abi.encode()(newFeeRate)
HIGH_LEVEL_CALL, dest:proxy(Proxy), function:_emit, arguments:['TMP_1175', '1', 'TRANSFERFEERATEUPDATED_SIG', '0', '0', '0']  "];
}
// Function: 5854.sol-Nomin-feePool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenState.balanceOf(FEE_ADDRESS)

IRs:
TMP_1112(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
RETURN TMP_1112"];
}
// Function: 5854.sol-Nomin-freezeAndConfiscate(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
motionID = court.targetMotionID(target)

IRs:
TMP_1321(uint256) = HIGH_LEVEL_CALL, dest:court(Court), function:targetMotionID, arguments:['target']  
motionID(uint256) := TMP_1321(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(motionID != 0)

IRs:
TMP_1322(bool) = motionID != 0
TMP_1323(None) = SOLIDITY_CALL require(bool)(TMP_1322)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(court.motionConfirming(motionID))

IRs:
TMP_1324(bool) = HIGH_LEVEL_CALL, dest:court(Court), function:motionConfirming, arguments:['motionID']  
TMP_1325(None) = SOLIDITY_CALL require(bool)(TMP_1324)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(court.motionPasses(motionID))

IRs:
TMP_1326(bool) = HIGH_LEVEL_CALL, dest:court(Court), function:motionPasses, arguments:['motionID']  
TMP_1327(None) = SOLIDITY_CALL require(bool)(TMP_1326)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! frozen[target])

IRs:
REF_309(bool) -> frozen[target]
TMP_1328 = UnaryType.BANG REF_309 
TMP_1329(None) = SOLIDITY_CALL require(bool)(TMP_1328)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = tokenState.balanceOf(target)

IRs:
TMP_1330(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['target']  
balance(uint256) := TMP_1330(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenState.setBalanceOf(FEE_ADDRESS,safeAdd(tokenState.balanceOf(FEE_ADDRESS),balance))

IRs:
TMP_1331(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
TMP_1332(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_1331,balance)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['FEE_ADDRESS', 'TMP_1332']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenState.setBalanceOf(target,0)

IRs:
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['target', '0']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
frozen[target] = true

IRs:
REF_314(bool) -> frozen[target]
REF_314(bool) (->frozen) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
emitAccountFrozen(target,balance)

IRs:
INTERNAL_CALL, Nomin.emitAccountFrozen(address,uint256)(target,balance)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
emitTransfer(target,FEE_ADDRESS,balance)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(target,FEE_ADDRESS,balance)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyCourt()

IRs:
MODIFIER_CALL, Nomin.onlyCourt()()"];
12->1;
}
// Function: 5854.sol-Nomin-initiateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = now

IRs:
initiationTime(uint256) := now(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = true

IRs:
selfDestructInitiated(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructInitiated(SELFDESTRUCT_DELAY)

IRs:
Emit SelfDestructInitiated(SELFDESTRUCT_DELAY)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Nomin-intToDec(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(i,UNIT)

IRs:
TMP_1291(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(i,UNIT)
RETURN TMP_1291"];
}
// Function: 5854.sol-Nomin-issue(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState.setBalanceOf(account,safeAdd(tokenState.balanceOf(account),amount))

IRs:
TMP_1343(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
TMP_1344(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_1343,amount)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['account', 'TMP_1344']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = safeAdd(totalSupply,amount)

IRs:
TMP_1346(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(totalSupply,amount)
totalSupply(uint256) := TMP_1346(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitTransfer(address(0),account,amount)

IRs:
TMP_1347 = CONVERT 0 to address
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(TMP_1347,account,amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
emitIssued(account,amount)

IRs:
INTERNAL_CALL, Nomin.emitIssued(address,uint256)(account,amount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyHavven()

IRs:
MODIFIER_CALL, Nomin.onlyHavven()()"];
5->1;
}
// Function: 5854.sol-Nomin-mulIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_1274(bool) = x == 0
CONDITION TMP_1274"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(x * y) / x == y

IRs:
TMP_1275(uint256) = x * y
TMP_1276(uint256) = TMP_1275 / x
TMP_1277(bool) = TMP_1276 == y
RETURN TMP_1277"];
}
// Function: 5854.sol-Nomin-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Nomin-onlyCourt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Court(msg.sender) == court)

IRs:
TMP_1409 = CONVERT msg.sender to Court
TMP_1410(bool) = TMP_1409 == court
TMP_1411(None) = SOLIDITY_CALL require(bool)(TMP_1410)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Nomin-onlyFeeAuthority()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == feeAuthority)

IRs:
TMP_1393(bool) = msg.sender == feeAuthority
TMP_1394(None) = SOLIDITY_CALL require(bool)(TMP_1393)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Nomin-onlyHavven()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Havven(msg.sender) == havven)

IRs:
TMP_1406 = CONVERT msg.sender to Havven
TMP_1407(bool) = TMP_1406 == havven
TMP_1408(None) = SOLIDITY_CALL require(bool)(TMP_1407)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Nomin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1404(bool) = msg.sender == owner
TMP_1405(None) = SOLIDITY_CALL require(bool)(TMP_1404)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Nomin-onlyProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxy(msg.sender) == proxy)

IRs:
TMP_1395 = CONVERT msg.sender to Proxy
TMP_1396(bool) = TMP_1395 == proxy
TMP_1397(None) = SOLIDITY_CALL require(bool)(TMP_1396)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Nomin-optionalProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_1398 = CONVERT msg.sender to Proxy
TMP_1399(bool) = TMP_1398 != proxy
CONDITION TMP_1399"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5854.sol-Nomin-optionalProxy_onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_1400 = CONVERT msg.sender to Proxy
TMP_1401(bool) = TMP_1400 != proxy
CONDITION TMP_1401"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(messageSender == owner)

IRs:
TMP_1402(bool) = messageSender == owner
TMP_1403(None) = SOLIDITY_CALL require(bool)(TMP_1402)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 5854.sol-Nomin-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x + y >= y)

IRs:
TMP_1266(uint256) = x + y
TMP_1267(bool) = TMP_1266 >= y
TMP_1268(None) = SOLIDITY_CALL require(bool)(TMP_1267)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_1269(uint256) = x + y
RETURN TMP_1269"];
}
// Function: 5854.sol-Nomin-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y != 0)

IRs:
TMP_1286(bool) = y != 0
TMP_1287(None) = SOLIDITY_CALL require(bool)(TMP_1286)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x / y

IRs:
TMP_1288(uint256) = x / y
RETURN TMP_1288"];
}
// Function: 5854.sol-Nomin-safeDiv_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv(safeMul(x,UNIT),y)

IRs:
TMP_1289(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,UNIT)
TMP_1290(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv(uint256,uint256)(TMP_1289,y)
RETURN TMP_1290"];
}
// Function: 5854.sol-Nomin-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_1278(bool) = x == 0
CONDITION TMP_1278"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
p = x * y

IRs:
TMP_1279(uint256) = x * y
p(uint256) := TMP_1279(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(p / x == y)

IRs:
TMP_1280(uint256) = p / x
TMP_1281(bool) = TMP_1280 == y
TMP_1282(None) = SOLIDITY_CALL require(bool)(TMP_1281)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
p

IRs:
RETURN p"];
}
// Function: 5854.sol-Nomin-safeMul_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(x,y) / UNIT

IRs:
TMP_1283(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,y)
TMP_1284(uint256) = TMP_1283 / UNIT
RETURN TMP_1284"];
}
// Function: 5854.sol-Nomin-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y <= x)

IRs:
TMP_1271(bool) = y <= x
TMP_1272(None) = SOLIDITY_CALL require(bool)(TMP_1271)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_1273(uint256) = x - y
RETURN TMP_1273"];
}
// Function: 5854.sol-Nomin-selfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(selfDestructInitiated && initiationTime + SELFDESTRUCT_DELAY < now)

IRs:
TMP_1257(uint256) = initiationTime + SELFDESTRUCT_DELAY
TMP_1258(bool) = TMP_1257 < now
TMP_1259(bool) = selfDestructInitiated && TMP_1258
TMP_1260(None) = SOLIDITY_CALL require(bool)(TMP_1259)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
beneficiary = selfDestructBeneficiary

IRs:
beneficiary(address) := selfDestructBeneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructed(beneficiary)

IRs:
Emit SelfDestructed(beneficiary)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
selfdestruct(address)(beneficiary)

IRs:
TMP_1262(None) = SOLIDITY_CALL selfdestruct(address)(beneficiary)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 5854.sol-Nomin-setCourt(Court)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
court = _court

IRs:
court(Court) := _court(Court)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitCourtUpdated(_court)

IRs:
INTERNAL_CALL, Nomin.emitCourtUpdated(address)(_court)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Nomin-setFeeAuthority(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
feeAuthority = _feeAuthority

IRs:
feeAuthority(address) := _feeAuthority(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitFeeAuthorityUpdated(_feeAuthority)

IRs:
INTERNAL_CALL, FeeToken.emitFeeAuthorityUpdated(address)(_feeAuthority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Nomin-setHavven(Havven)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
havven = _havven

IRs:
havven(Havven) := _havven(Havven)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setFeeAuthority(_havven)

IRs:
INTERNAL_CALL, FeeToken.setFeeAuthority(address)(_havven)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitHavvenUpdated(_havven)

IRs:
INTERNAL_CALL, Nomin.emitHavvenUpdated(address)(_havven)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Nomin-setMessageSender(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
messageSender = sender

IRs:
messageSender(address) := sender(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy()

IRs:
MODIFIER_CALL, Proxyable.onlyProxy()()"];
2->1;
}
// Function: 5854.sol-Nomin-setProxy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_1228 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_1228(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Nomin-setSelfDestructBeneficiary(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_1248 = CONVERT 0 to address
TMP_1249(bool) = _beneficiary != TMP_1248
TMP_1250(None) = SOLIDITY_CALL require(bool)(TMP_1249)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _beneficiary

IRs:
selfDestructBeneficiary(address) := _beneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_beneficiary)

IRs:
Emit SelfDestructBeneficiaryUpdated(_beneficiary)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Nomin-setTokenState(TokenState)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenState = _tokenState

IRs:
tokenState(TokenState) := _tokenState(TokenState)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitTokenStateUpdated(_tokenState)

IRs:
INTERNAL_CALL, ExternStateToken.emitTokenStateUpdated(address)(_tokenState)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Nomin-setTransferFeeRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_transferFeeRate <= MAX_TRANSFER_FEE_RATE)

IRs:
TMP_1101(bool) = _transferFeeRate <= MAX_TRANSFER_FEE_RATE
TMP_1102(None) = SOLIDITY_CALL require(bool)(TMP_1101)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferFeeRate = _transferFeeRate

IRs:
transferFeeRate(uint256) := _transferFeeRate(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitTransferFeeRateUpdated(_transferFeeRate)

IRs:
INTERNAL_CALL, FeeToken.emitTransferFeeRateUpdated(uint256)(_transferFeeRate)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Nomin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
UNIT = 10 ** uint256(decimals)

IRs:
TMP_1375 = CONVERT decimals to uint256
TMP_1376(uint256) = 10 ** TMP_1375
UNIT(uint256) := TMP_1376(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SELFDESTRUCT_DELAY = 2419200

IRs:
SELFDESTRUCT_DELAY(uint256) := 2419200(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TRANSFER_SIG = keccak256()(Transfer(address,address,uint256))

IRs:
TMP_1377(bytes32) = SOLIDITY_CALL keccak256()(Transfer(address,address,uint256))
TRANSFER_SIG(bytes32) := TMP_1377(bytes32)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
APPROVAL_SIG = keccak256()(Approval(address,address,uint256))

IRs:
TMP_1378(bytes32) = SOLIDITY_CALL keccak256()(Approval(address,address,uint256))
APPROVAL_SIG(bytes32) := TMP_1378(bytes32)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
TOKENSTATEUPDATED_SIG = keccak256()(TokenStateUpdated(address))

IRs:
TMP_1379(bytes32) = SOLIDITY_CALL keccak256()(TokenStateUpdated(address))
TOKENSTATEUPDATED_SIG(bytes32) := TMP_1379(bytes32)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAX_TRANSFER_FEE_RATE = UNIT / 10

IRs:
TMP_1380(uint256) = UNIT / 10
MAX_TRANSFER_FEE_RATE(uint256) := TMP_1380(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
FEE_ADDRESS = 0xfeefeefeefeefeefeefeefeefeefeefeefeefeef

IRs:
FEE_ADDRESS(address) := 1455434353366403443329579181396093322138435387119(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
TRANSFERFEERATEUPDATED_SIG = keccak256()(TransferFeeRateUpdated(uint256))

IRs:
TMP_1381(bytes32) = SOLIDITY_CALL keccak256()(TransferFeeRateUpdated(uint256))
TRANSFERFEERATEUPDATED_SIG(bytes32) := TMP_1381(bytes32)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
FEEAUTHORITYUPDATED_SIG = keccak256()(FeeAuthorityUpdated(address))

IRs:
TMP_1382(bytes32) = SOLIDITY_CALL keccak256()(FeeAuthorityUpdated(address))
FEEAUTHORITYUPDATED_SIG(bytes32) := TMP_1382(bytes32)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
FEESWITHDRAWN_SIG = keccak256()(FeesWithdrawn(address,uint256))

IRs:
TMP_1383(bytes32) = SOLIDITY_CALL keccak256()(FeesWithdrawn(address,uint256))
FEESWITHDRAWN_SIG(bytes32) := TMP_1383(bytes32)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
FEESDONATED_SIG = keccak256()(FeesDonated(address,uint256))

IRs:
TMP_1384(bytes32) = SOLIDITY_CALL keccak256()(FeesDonated(address,uint256))
FEESDONATED_SIG(bytes32) := TMP_1384(bytes32)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
TRANSFER_FEE_RATE = 15 * UNIT / 10000

IRs:
TMP_1385(uint256) = 15 * UNIT
TMP_1386(uint256) = TMP_1385 / 10000
TRANSFER_FEE_RATE(uint256) := TMP_1386(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
TOKEN_NAME = Nomin USD

IRs:
TOKEN_NAME(string) := Nomin USD(string)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
TOKEN_SYMBOL = nUSD

IRs:
TOKEN_SYMBOL(string) := nUSD(string)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
COURTUPDATED_SIG = keccak256()(CourtUpdated(address))

IRs:
TMP_1387(bytes32) = SOLIDITY_CALL keccak256()(CourtUpdated(address))
COURTUPDATED_SIG(bytes32) := TMP_1387(bytes32)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
HAVVENUPDATED_SIG = keccak256()(HavvenUpdated(address))

IRs:
TMP_1388(bytes32) = SOLIDITY_CALL keccak256()(HavvenUpdated(address))
HAVVENUPDATED_SIG(bytes32) := TMP_1388(bytes32)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
ACCOUNTFROZEN_SIG = keccak256()(AccountFrozen(address,uint256))

IRs:
TMP_1389(bytes32) = SOLIDITY_CALL keccak256()(AccountFrozen(address,uint256))
ACCOUNTFROZEN_SIG(bytes32) := TMP_1389(bytes32)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
ACCOUNTUNFROZEN_SIG = keccak256()(AccountUnfrozen(address))

IRs:
TMP_1390(bytes32) = SOLIDITY_CALL keccak256()(AccountUnfrozen(address))
ACCOUNTUNFROZEN_SIG(bytes32) := TMP_1390(bytes32)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
ISSUED_SIG = keccak256()(Issued(address,uint256))

IRs:
TMP_1391(bytes32) = SOLIDITY_CALL keccak256()(Issued(address,uint256))
ISSUED_SIG(bytes32) := TMP_1391(bytes32)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
BURNED_SIG = keccak256()(Burned(address,uint256))

IRs:
TMP_1392(bytes32) = SOLIDITY_CALL keccak256()(Burned(address,uint256))
BURNED_SIG(bytes32) := TMP_1392(bytes32)"];
}
// Function: 5854.sol-Nomin-subIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y <= x

IRs:
TMP_1270(bool) = y <= x
RETURN TMP_1270"];
}
// Function: 5854.sol-Nomin-terminateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = 0

IRs:
initiationTime(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = false

IRs:
selfDestructInitiated(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructTerminated()

IRs:
Emit SelfDestructTerminated()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Nomin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozen[to])

IRs:
REF_302(bool) -> frozen[to]
TMP_1305 = UnaryType.BANG REF_302 
TMP_1306(None) = SOLIDITY_CALL require(bool)(TMP_1305)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_transfer_byProxy(messageSender,to,value)

IRs:
TMP_1307(bool) = INTERNAL_CALL, FeeToken._transfer_byProxy(address,address,uint256)(messageSender,to,value)
RETURN TMP_1307"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
3->1;
}
// Function: 5854.sol-Nomin-transferFeeIncurred(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul_dec(value,transferFeeRate)

IRs:
TMP_1107(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul_dec(uint256,uint256)(value,transferFeeRate)
RETURN TMP_1107"];
}
// Function: 5854.sol-Nomin-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozen[to])

IRs:
REF_303(bool) -> frozen[to]
TMP_1309 = UnaryType.BANG REF_303 
TMP_1310(None) = SOLIDITY_CALL require(bool)(TMP_1309)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_transferFrom_byProxy(messageSender,from,to,value)

IRs:
TMP_1311(bool) = INTERNAL_CALL, FeeToken._transferFrom_byProxy(address,address,address,uint256)(messageSender,from,to,value)
RETURN TMP_1311"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
3->1;
}
// Function: 5854.sol-Nomin-transferFromSenderPaysFee(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozen[to])

IRs:
REF_305(bool) -> frozen[to]
TMP_1317 = UnaryType.BANG REF_305 
TMP_1318(None) = SOLIDITY_CALL require(bool)(TMP_1317)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_transferFromSenderPaysFee_byProxy(messageSender,from,to,value)

IRs:
TMP_1319(bool) = INTERNAL_CALL, FeeToken._transferFromSenderPaysFee_byProxy(address,address,address,uint256)(messageSender,from,to,value)
RETURN TMP_1319"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
3->1;
}
// Function: 5854.sol-Nomin-transferPlusFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeAdd(value,transferFeeIncurred(value))

IRs:
TMP_1108(uint256) = INTERNAL_CALL, FeeToken.transferFeeIncurred(uint256)(value)
TMP_1109(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(value,TMP_1108)
RETURN TMP_1109"];
}
// Function: 5854.sol-Nomin-transferSenderPaysFee(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozen[to])

IRs:
REF_304(bool) -> frozen[to]
TMP_1313 = UnaryType.BANG REF_304 
TMP_1314(None) = SOLIDITY_CALL require(bool)(TMP_1313)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_transferSenderPaysFee_byProxy(messageSender,to,value)

IRs:
TMP_1315(bool) = INTERNAL_CALL, FeeToken._transferSenderPaysFee_byProxy(address,address,uint256)(messageSender,to,value)
RETURN TMP_1315"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
optionalProxy()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy()()"];
3->1;
}
// Function: 5854.sol-Nomin-unfreezeAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(frozen[target] && target != FEE_ADDRESS)

IRs:
REF_315(bool) -> frozen[target]
TMP_1338(bool) = target != FEE_ADDRESS
TMP_1339(bool) = REF_315 && TMP_1338
TMP_1340(None) = SOLIDITY_CALL require(bool)(TMP_1339)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
frozen[target] = false

IRs:
REF_316(bool) -> frozen[target]
REF_316(bool) (->frozen) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitAccountUnfrozen(target)

IRs:
INTERNAL_CALL, Nomin.emitAccountUnfrozen(address)(target)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
optionalProxy_onlyOwner()

IRs:
MODIFIER_CALL, Proxyable.optionalProxy_onlyOwner()()"];
4->1;
}
// Function: 5854.sol-Nomin-withdrawFees(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(account != address(0))

IRs:
TMP_1151 = CONVERT 0 to address
TMP_1152(bool) = account != TMP_1151
TMP_1153(None) = SOLIDITY_CALL require(bool)(TMP_1152)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value == 0

IRs:
TMP_1154(bool) = value == 0
CONDITION TMP_1154"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenState.setBalanceOf(FEE_ADDRESS,safeSub(tokenState.balanceOf(FEE_ADDRESS),value))

IRs:
TMP_1155(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['FEE_ADDRESS']  
TMP_1156(uint256) = INTERNAL_CALL, SafeDecimalMath.safeSub(uint256,uint256)(TMP_1155,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['FEE_ADDRESS', 'TMP_1156']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenState.setBalanceOf(account,safeAdd(tokenState.balanceOf(account),value))

IRs:
TMP_1158(uint256) = HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:balanceOf, arguments:['account']  
TMP_1159(uint256) = INTERNAL_CALL, SafeDecimalMath.safeAdd(uint256,uint256)(TMP_1158,value)
HIGH_LEVEL_CALL, dest:tokenState(TokenState), function:setBalanceOf, arguments:['account', 'TMP_1159']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
emitFeesWithdrawn(account,value)

IRs:
INTERNAL_CALL, FeeToken.emitFeesWithdrawn(address,uint256)(account,value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
emitTransfer(FEE_ADDRESS,account,value)

IRs:
INTERNAL_CALL, ExternStateToken.emitTransfer(address,address,uint256)(FEE_ADDRESS,account,value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyFeeAuthority()

IRs:
MODIFIER_CALL, FeeToken.onlyFeeAuthority()()"];
10->1;
}
// Function: 5854.sol-NominAirdropper-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_1419(bool) = msg.sender == nominatedOwner
TMP_1420(None) = SOLIDITY_CALL require(bool)(TMP_1419)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_1422 = CONVERT 0 to address
nominatedOwner(address) := TMP_1422(address)"];
}
// Function: 5854.sol-NominAirdropper-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
}
// Function: 5854.sol-NominAirdropper-multisend(address,address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(destinations.length == values.length)

IRs:
REF_333 -> LENGTH destinations
REF_334 -> LENGTH values
TMP_1424(bool) = REF_333 == REF_334
TMP_1425(None) = SOLIDITY_CALL require(bool)(TMP_1424)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < destinations.length

IRs:
REF_335 -> LENGTH destinations
TMP_1426(bool) = i < REF_335
CONDITION TMP_1426"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Nomin(tokenAddress).transferSenderPaysFee(destinations[i],values[i])

IRs:
TMP_1427 = CONVERT tokenAddress to Nomin
REF_337(address) -> destinations[i]
REF_338(uint256) -> values[i]
TMP_1428(bool) = HIGH_LEVEL_CALL, dest:TMP_1427(Nomin), function:transferSenderPaysFee, arguments:['REF_337', 'REF_338']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
6->4;
7[label="Node Type: END_LOOP 7
"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
8->1;
}
// Function: 5854.sol-NominAirdropper-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-NominAirdropper-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1430(bool) = msg.sender == owner
TMP_1431(None) = SOLIDITY_CALL require(bool)(TMP_1430)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_7(bool) = msg.sender == nominatedOwner
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_10 = CONVERT 0 to address
nominatedOwner(address) := TMP_10(address)"];
}
// Function: 5854.sol-Owned-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _owner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_3 = CONVERT 0 to address
Emit OwnerChanged(TMP_3,_owner)"];
}
// Function: 5854.sol-Owned-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_11(bool) = msg.sender == owner
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Proxy-_emit(bytes,uint256,bytes32,bytes32,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
size = callData.length

IRs:
REF_3 -> LENGTH callData
size(uint256) := REF_3(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_callData = callData

IRs:
_callData(bytes) := callData(bytes)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyTarget()

IRs:
MODIFIER_CALL, Proxy.onlyTarget()()"];
5->1;
}
// Function: 5854.sol-Proxy-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_125(bool) = msg.sender == nominatedOwner
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_128 = CONVERT 0 to address
nominatedOwner(address) := TMP_128(address)"];
}
// Function: 5854.sol-Proxy-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
}
// Function: 5854.sol-Proxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
useDELEGATECALL

IRs:
CONDITION useDELEGATECALL"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->7;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
target.setMessageSender(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:target(Proxyable), function:setMessageSender, arguments:['msg.sender']  "];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 5854.sol-Proxy-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Proxy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_135(bool) = msg.sender == owner
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Proxy-onlyTarget()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxyable(msg.sender) == target)

IRs:
TMP_137 = CONVERT msg.sender to Proxyable
TMP_138(bool) = TMP_137 == target
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Proxy-setTarget(Proxyable)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
target = _target

IRs:
target(Proxyable) := _target(Proxyable)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TargetUpdated(_target)

IRs:
Emit TargetUpdated(_target)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Proxy-setUseDELEGATECALL(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
useDELEGATECALL = value

IRs:
useDELEGATECALL(bool) := value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 5854.sol-Proxyable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_147(bool) = msg.sender == nominatedOwner
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_150 = CONVERT 0 to address
nominatedOwner(address) := TMP_150(address)"];
}
// Function: 5854.sol-Proxyable-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_140 = CONVERT 0 to address
TMP_141(bool) = _owner != TMP_140
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_143 = CONVERT 0 to address
Emit OwnerChanged(TMP_143,_owner)"];
}
// Function: 5854.sol-Proxyable-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_151 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_151(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 5854.sol-Proxyable-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-Proxyable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_158(bool) = msg.sender == owner
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Proxyable-onlyProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxy(msg.sender) == proxy)

IRs:
TMP_160 = CONVERT msg.sender to Proxy
TMP_161(bool) = TMP_160 == proxy
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-Proxyable-optionalProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_163 = CONVERT msg.sender to Proxy
TMP_164(bool) = TMP_163 != proxy
CONDITION TMP_164"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5854.sol-Proxyable-optionalProxy_onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_165 = CONVERT msg.sender to Proxy
TMP_166(bool) = TMP_165 != proxy
CONDITION TMP_166"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(messageSender == owner)

IRs:
TMP_167(bool) = messageSender == owner
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 5854.sol-Proxyable-setMessageSender(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
messageSender = sender

IRs:
messageSender(address) := sender(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy()

IRs:
MODIFIER_CALL, Proxyable.onlyProxy()()"];
2->1;
}
// Function: 5854.sol-Proxyable-setProxy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_154 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_154(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-SafeDecimalMath-addIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
x + y >= y

IRs:
TMP_13(uint256) = x + y
TMP_14(bool) = TMP_13 >= y
RETURN TMP_14"];
}
// Function: 5854.sol-SafeDecimalMath-divIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y != 0

IRs:
TMP_34(bool) = y != 0
RETURN TMP_34"];
}
// Function: 5854.sol-SafeDecimalMath-intToDec(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(i,UNIT)

IRs:
TMP_40(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(i,UNIT)
RETURN TMP_40"];
}
// Function: 5854.sol-SafeDecimalMath-mulIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_23(bool) = x == 0
CONDITION TMP_23"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(x * y) / x == y

IRs:
TMP_24(uint256) = x * y
TMP_25(uint256) = TMP_24 / x
TMP_26(bool) = TMP_25 == y
RETURN TMP_26"];
}
// Function: 5854.sol-SafeDecimalMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x + y >= y)

IRs:
TMP_15(uint256) = x + y
TMP_16(bool) = TMP_15 >= y
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_18(uint256) = x + y
RETURN TMP_18"];
}
// Function: 5854.sol-SafeDecimalMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y != 0)

IRs:
TMP_35(bool) = y != 0
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x / y

IRs:
TMP_37(uint256) = x / y
RETURN TMP_37"];
}
// Function: 5854.sol-SafeDecimalMath-safeDiv_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeDiv(safeMul(x,UNIT),y)

IRs:
TMP_38(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,UNIT)
TMP_39(uint256) = INTERNAL_CALL, SafeDecimalMath.safeDiv(uint256,uint256)(TMP_38,y)
RETURN TMP_39"];
}
// Function: 5854.sol-SafeDecimalMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_27(bool) = x == 0
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
p = x * y

IRs:
TMP_28(uint256) = x * y
p(uint256) := TMP_28(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(p / x == y)

IRs:
TMP_29(uint256) = p / x
TMP_30(bool) = TMP_29 == y
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
p

IRs:
RETURN p"];
}
// Function: 5854.sol-SafeDecimalMath-safeMul_dec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
safeMul(x,y) / UNIT

IRs:
TMP_32(uint256) = INTERNAL_CALL, SafeDecimalMath.safeMul(uint256,uint256)(x,y)
TMP_33(uint256) = TMP_32 / UNIT
RETURN TMP_33"];
}
// Function: 5854.sol-SafeDecimalMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y <= x)

IRs:
TMP_20(bool) = y <= x
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_22(uint256) = x - y
RETURN TMP_22"];
}
// Function: 5854.sol-SafeDecimalMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
UNIT = 10 ** uint256(decimals)

IRs:
TMP_41 = CONVERT decimals to uint256
TMP_42(uint256) = 10 ** TMP_41
UNIT(uint256) := TMP_42(uint256)"];
}
// Function: 5854.sol-SafeDecimalMath-subIsSafe(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
y <= x

IRs:
TMP_19(bool) = y <= x
RETURN TMP_19"];
}
// Function: 5854.sol-SelfDestructible-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_50(bool) = msg.sender == nominatedOwner
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_53 = CONVERT 0 to address
nominatedOwner(address) := TMP_53(address)"];
}
// Function: 5854.sol-SelfDestructible-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _owner != TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _owner

IRs:
selfDestructBeneficiary(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_owner)

IRs:
Emit SelfDestructBeneficiaryUpdated(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
4->1;
}
// Function: 5854.sol-SelfDestructible-initiateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = now

IRs:
initiationTime(uint256) := now(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = true

IRs:
selfDestructInitiated(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructInitiated(SELFDESTRUCT_DELAY)

IRs:
Emit SelfDestructInitiated(SELFDESTRUCT_DELAY)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-SelfDestructible-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-SelfDestructible-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_75(bool) = msg.sender == owner
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-SelfDestructible-selfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(selfDestructInitiated && initiationTime + SELFDESTRUCT_DELAY < now)

IRs:
TMP_68(uint256) = initiationTime + SELFDESTRUCT_DELAY
TMP_69(bool) = TMP_68 < now
TMP_70(bool) = selfDestructInitiated && TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
beneficiary = selfDestructBeneficiary

IRs:
beneficiary(address) := selfDestructBeneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructed(beneficiary)

IRs:
Emit SelfDestructed(beneficiary)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
selfdestruct(address)(beneficiary)

IRs:
TMP_73(None) = SOLIDITY_CALL selfdestruct(address)(beneficiary)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 5854.sol-SelfDestructible-setSelfDestructBeneficiary(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_59 = CONVERT 0 to address
TMP_60(bool) = _beneficiary != TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructBeneficiary = _beneficiary

IRs:
selfDestructBeneficiary(address) := _beneficiary(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructBeneficiaryUpdated(_beneficiary)

IRs:
Emit SelfDestructBeneficiaryUpdated(_beneficiary)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-SelfDestructible-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
SELFDESTRUCT_DELAY = 2419200

IRs:
SELFDESTRUCT_DELAY(uint256) := 2419200(uint256)"];
}
// Function: 5854.sol-SelfDestructible-terminateSelfDestruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initiationTime = 0

IRs:
initiationTime(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfDestructInitiated = false

IRs:
selfDestructInitiated(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SelfDestructTerminated()

IRs:
Emit SelfDestructTerminated()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 5854.sol-State-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_84(bool) = msg.sender == nominatedOwner
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_87 = CONVERT 0 to address
nominatedOwner(address) := TMP_87(address)"];
}
// Function: 5854.sol-State-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_77 = CONVERT 0 to address
TMP_78(bool) = _owner != TMP_77
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_80 = CONVERT 0 to address
Emit OwnerChanged(TMP_80,_owner)"];
}
// Function: 5854.sol-State-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
associatedContract = _associatedContract

IRs:
associatedContract(address) := _associatedContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AssociatedContractUpdated(_associatedContract)

IRs:
Emit AssociatedContractUpdated(_associatedContract)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 5854.sol-State-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-State-onlyAssociatedContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == associatedContract)

IRs:
TMP_94(bool) = msg.sender == associatedContract
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-State-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_92(bool) = msg.sender == owner
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-State-setAssociatedContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
associatedContract = _associatedContract

IRs:
associatedContract(address) := _associatedContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AssociatedContractUpdated(_associatedContract)

IRs:
Emit AssociatedContractUpdated(_associatedContract)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-TokenState-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_107(bool) = msg.sender == nominatedOwner
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_110 = CONVERT 0 to address
nominatedOwner(address) := TMP_110(address)"];
}
// Function: 5854.sol-TokenState-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_100 = CONVERT 0 to address
TMP_101(bool) = _owner != TMP_100
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_103 = CONVERT 0 to address
Emit OwnerChanged(TMP_103,_owner)"];
}
// Function: 5854.sol-TokenState-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
State(_owner,_associatedContract)

IRs:
INTERNAL_CALL, State.constructor(address,address)(_owner,_associatedContract)"];
}
// Function: 5854.sol-TokenState-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-TokenState-onlyAssociatedContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == associatedContract)

IRs:
TMP_114(bool) = msg.sender == associatedContract
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-TokenState-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_116(bool) = msg.sender == owner
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5854.sol-TokenState-setAllowance(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[tokenOwner][spender] = value

IRs:
REF_0(mapping(address => uint256)) -> allowance[tokenOwner]
REF_1(uint256) -> REF_0[spender]
REF_1(uint256) (->allowance) := value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAssociatedContract()

IRs:
MODIFIER_CALL, State.onlyAssociatedContract()()"];
2->1;
}
// Function: 5854.sol-TokenState-setAssociatedContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
associatedContract = _associatedContract

IRs:
associatedContract(address) := _associatedContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AssociatedContractUpdated(_associatedContract)

IRs:
Emit AssociatedContractUpdated(_associatedContract)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 5854.sol-TokenState-setBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[account] = value

IRs:
REF_2(uint256) -> balanceOf[account]
REF_2(uint256) (->balanceOf) := value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAssociatedContract()

IRs:
MODIFIER_CALL, State.onlyAssociatedContract()()"];
2->1;
}
}
