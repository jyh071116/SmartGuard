digraph G {
// Function: 6043.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_2 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_3 = CONVERT REF_4 to uint32
TMP_4(uint32) = TMP_3 << 8
TMP_5(uint32) = TMP_2 + TMP_4
REF_5(None) -> _data[1]
TMP_6 = CONVERT REF_5 to uint32
TMP_7(uint32) = TMP_6 << 16
TMP_8(uint32) = TMP_5 + TMP_7
REF_6(None) -> _data[0]
TMP_9 = CONVERT REF_6 to uint32
TMP_10(uint32) = TMP_9 << 24
TMP_11(uint32) = TMP_8 + TMP_10
u(uint32) := TMP_11(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_12 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_12(bytes4)"];
}
// Function: 6043.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 6043.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 6043.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 6043.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 6043.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 6043.sol-ERC20Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_10(mapping(address => uint256)) -> allowed[_owner]
REF_11(uint256) -> REF_10[_spender]
RETURN REF_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 6043.sol-ERC20Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[msg.sender]
REF_9(uint256) -> REF_8[_spender]
REF_9(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6043.sol-ERC20Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_12(uint256) -> balances[_owner]
RETURN REF_12"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6043.sol-ERC20Token-checkTransferRequirements(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = _to != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(released == true)

IRs:
TMP_41(bool) = released == True
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > globalTimeVault)

IRs:
TMP_43(bool) = now > globalTimeVault
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timevault[msg.sender] != 0

IRs:
REF_14(uint256) -> timevault[msg.sender]
TMP_45(bool) = REF_14 != 0
CONDITION TMP_45"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now > timevault[msg.sender])

IRs:
REF_15(uint256) -> timevault[msg.sender]
TMP_46(bool) = now > REF_15
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= _value)

IRs:
TMP_48(uint256) = INTERNAL_CALL, ERC20Token.balanceOf(address)(msg.sender)
TMP_49(bool) = TMP_48 >= _value
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
}
// Function: 6043.sol-ERC20Token-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_31(bool) = length > 0
RETURN TMP_31"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 6043.sol-ERC20Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
transfer(_to,_value,empty)

IRs:
TMP_26(bool) = INTERNAL_CALL, ERC20Token.transfer(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_26"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-ERC20Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_27(bool) = INTERNAL_CALL, ERC20Token.isContract(address)(_to)
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data,false)

IRs:
TMP_28(bool) = INTERNAL_CALL, ERC20Token.transferToContract(address,uint256,bytes,bool)(_to,_value,_data,False)
RETURN TMP_28"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,false)

IRs:
TMP_29(bool) = INTERNAL_CALL, ERC20Token.transferToAddress(address,uint256,bool)(_to,_value,False)
RETURN TMP_29"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(to)

IRs:
TMP_56(bool) = INTERNAL_CALL, ERC20Token.isContract(address)(to)
CONDITION TMP_56"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(to,value,empty,true)

IRs:
TMP_57(bool) = INTERNAL_CALL, ERC20Token.transferToContract(address,uint256,bytes,bool)(to,value,empty,True)
RETURN TMP_57"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(to,value,true)

IRs:
TMP_58(bool) = INTERNAL_CALL, ERC20Token.transferToAddress(address,uint256,bool)(to,value,True)
RETURN TMP_58"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(value)

IRs:
REF_24(mapping(address => uint256)) -> allowed[from]
REF_25(uint256) -> REF_24[msg.sender]
REF_26(mapping(address => uint256)) -> allowed[from]
REF_27(uint256) -> REF_26[msg.sender]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_27', 'value'] 
REF_25(uint256) (->allowed) := TMP_59(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6043.sol-ERC20Token-transferIfRequirementsMet(address,address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkTransferRequirements(_to,_value)

IRs:
INTERNAL_CALL, ERC20Token.checkTransferRequirements(address,uint256)(_to,_value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withAllowances

IRs:
CONDITION withAllowances"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
TMP_52(bool) = _value <= REF_17
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[msg.sender].sub(_value)

IRs:
REF_18(uint256) -> balances[_from]
REF_19(uint256) -> balances[msg.sender]
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_19', '_value'] 
REF_18(uint256) (->balances) := TMP_54(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_21(uint256) -> balances[_to]
REF_22(uint256) -> balances[_to]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_22', '_value'] 
REF_21(uint256) (->balances) := TMP_55(uint256)"];
}
// Function: 6043.sol-ERC20Token-transferToAddress(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-ERC20Token-transferToContract(address,uint256,bytes,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_35 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_35(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-ERC223Interface-transfer(address,uint256,bytes)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-allowance(address,address)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-approve(address,uint256)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-balanceOf(address)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-checkTransferRequirements(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_198 = CONVERT 0 to address
TMP_199(bool) = _to != TMP_198
TMP_200(None) = SOLIDITY_CALL require(bool)(TMP_199)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(released == true)

IRs:
TMP_201(bool) = released == True
TMP_202(None) = SOLIDITY_CALL require(bool)(TMP_201)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > globalTimeVault)

IRs:
TMP_203(bool) = now > globalTimeVault
TMP_204(None) = SOLIDITY_CALL require(bool)(TMP_203)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timevault[msg.sender] != 0

IRs:
REF_138(uint256) -> timevault[msg.sender]
TMP_205(bool) = REF_138 != 0
CONDITION TMP_205"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now > timevault[msg.sender])

IRs:
REF_139(uint256) -> timevault[msg.sender]
TMP_206(bool) = now > REF_139
TMP_207(None) = SOLIDITY_CALL require(bool)(TMP_206)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= _value)

IRs:
TMP_208(uint256) = INTERNAL_CALL, ERC20Token.balanceOf(address)(msg.sender)
TMP_209(bool) = TMP_208 >= _value
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
}
// Function: 6043.sol-OwnershipTransferrable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-OwnershipTransferrable-getNow()
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_191(bool) = length > 0
RETURN TMP_191"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 6043.sol-OwnershipTransferrable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_224(bool) = msg.sender == owner
TMP_225(None) = SOLIDITY_CALL require(bool)(TMP_224)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6043.sol-OwnershipTransferrable-timeVault(address)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-transfer(address,uint256)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-transfer(address,uint256,bytes)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-transferByOwner(address,uint256,uint256)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-transferFrom(address,address,uint256)
digraph{
}
// Function: 6043.sol-OwnershipTransferrable-transferIfRequirementsMet(address,address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkTransferRequirements(_to,_value)

IRs:
INTERNAL_CALL, ERC20Token.checkTransferRequirements(address,uint256)(_to,_value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withAllowances

IRs:
CONDITION withAllowances"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_140(mapping(address => uint256)) -> allowed[_from]
REF_141(uint256) -> REF_140[msg.sender]
TMP_212(bool) = _value <= REF_141
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[msg.sender].sub(_value)

IRs:
REF_142(uint256) -> balances[_from]
REF_143(uint256) -> balances[msg.sender]
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_143', '_value'] 
REF_142(uint256) (->balances) := TMP_214(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_145(uint256) -> balances[_to]
REF_146(uint256) -> balances[_to]
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', '_value'] 
REF_145(uint256) (->balances) := TMP_215(uint256)"];
}
// Function: 6043.sol-OwnershipTransferrable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferByOwner(newOwner,balanceOf(owner),0)

IRs:
TMP_220(uint256) = INTERNAL_CALL, ERC20Token.balanceOf(address)(owner)
TMP_221(bool) = INTERNAL_CALL, TimeVaultToken.transferByOwner(address,uint256,uint256)(newOwner,TMP_220,0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipTransferred(msg.sender,newOwner)

IRs:
Emit OwnershipTransferred(msg.sender,newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
4->1;
}
// Function: 6043.sol-OwnershipTransferrable-transferToAddress(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-OwnershipTransferrable-transferToContract(address,uint256,bytes,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_195 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_195(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-SPFCToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-SPFCToken-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradableContractAddress = initialImplementation

IRs:
upgradableContractAddress(address) := initialImplementation(address)"];
}
// Function: 6043.sol-SPFCToken-constructor(address,string,string,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = _totalSupply * 10 ** uint256(decimals)

IRs:
TMP_230 = CONVERT decimals to uint256
TMP_231(uint256) = 10 ** TMP_230
TMP_232(uint256) = _totalSupply * TMP_231
totalSupply(uint256) := TMP_232(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_tokenOwner] = totalSupply

IRs:
REF_153(uint256) -> balances[_tokenOwner]
REF_153(uint256) (->balances) := totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),owner,totalSupply)

IRs:
TMP_233 = CONVERT 0 to address
Emit Transfer(TMP_233,owner,totalSupply)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
globalTimeVault = _globalTimeVaultOpeningTime

IRs:
globalTimeVault(uint256) := _globalTimeVaultOpeningTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
VersionedToken(_initialImplementation)

IRs:
INTERNAL_CALL, VersionedToken.constructor(address)(_initialImplementation)"];
9->1;
}
// Function: 6043.sol-SPFCToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
upgradableContractMem = upgradableContractAddress

IRs:
upgradableContractMem(address) := upgradableContractAddress(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
functionCall = msg.data

IRs:
functionCall(bytes) := msg.data(bytes)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
}
// Function: 6043.sol-SPFCToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_236(bool) = msg.sender == owner
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6043.sol-SPFCToken-upgradeToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradableContractAddress = newImplementation

IRs:
upgradableContractAddress(address) := newImplementation(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 6043.sol-SPFCTokenImpl-allowance(address,address)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-approve(address,uint256)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-balanceOf(address)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-checkTransferRequirements(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_257 = CONVERT 0 to address
TMP_258(bool) = _to != TMP_257
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(released == true)

IRs:
TMP_260(bool) = released == True
TMP_261(None) = SOLIDITY_CALL require(bool)(TMP_260)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > globalTimeVault)

IRs:
TMP_262(bool) = now > globalTimeVault
TMP_263(None) = SOLIDITY_CALL require(bool)(TMP_262)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timevault[msg.sender] != 0

IRs:
REF_178(uint256) -> timevault[msg.sender]
TMP_264(bool) = REF_178 != 0
CONDITION TMP_264"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now > timevault[msg.sender])

IRs:
REF_179(uint256) -> timevault[msg.sender]
TMP_265(bool) = now > REF_179
TMP_266(None) = SOLIDITY_CALL require(bool)(TMP_265)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= _value)

IRs:
TMP_267(uint256) = INTERNAL_CALL, ERC20Token.balanceOf(address)(msg.sender)
TMP_268(bool) = TMP_267 >= _value
TMP_269(None) = SOLIDITY_CALL require(bool)(TMP_268)"];
}
// Function: 6043.sol-SPFCTokenImpl-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-SPFCTokenImpl-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_161(mapping(address => uint256)) -> allowed[msg.sender]
REF_162(uint256) -> REF_161[_spender]
oldValue(uint256) := REF_162(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_240(bool) = _subtractedValue > oldValue
CONDITION TMP_240"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_163(mapping(address => uint256)) -> allowed[msg.sender]
REF_164(uint256) -> REF_163[_spender]
REF_164(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_165(mapping(address => uint256)) -> allowed[msg.sender]
REF_166(uint256) -> REF_165[_spender]
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_166(uint256) (->allowed) := TMP_241(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_168(mapping(address => uint256)) -> allowed[msg.sender]
REF_169(uint256) -> REF_168[_spender]
Emit Approval(msg.sender,_spender,REF_169)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-SPFCTokenImpl-getNow()
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_154(mapping(address => uint256)) -> allowed[msg.sender]
REF_155(uint256) -> REF_154[_spender]
REF_156(mapping(address => uint256)) -> allowed[msg.sender]
REF_157(uint256) -> REF_156[_spender]
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_157', '_addedValue'] 
REF_155(uint256) (->allowed) := TMP_238(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_159(mapping(address => uint256)) -> allowed[msg.sender]
REF_160(uint256) -> REF_159[_spender]
Emit Approval(msg.sender,_spender,REF_160)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-SPFCTokenImpl-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_250(bool) = length > 0
RETURN TMP_250"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 6043.sol-SPFCTokenImpl-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 6043.sol-SPFCTokenImpl-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_283(bool) = msg.sender == owner
TMP_284(None) = SOLIDITY_CALL require(bool)(TMP_283)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6043.sol-SPFCTokenImpl-releaseTokenTransfer(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = _value

IRs:
released(bool) := _value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 6043.sol-SPFCTokenImpl-setGlobalTimeVault(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
globalTimeVault = _globalTimeVaultOpeningTime

IRs:
globalTimeVault(uint256) := _globalTimeVaultOpeningTime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 6043.sol-SPFCTokenImpl-setTokenInformation(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UpdatedTokenInformation(name,symbol)

IRs:
Emit UpdatedTokenInformation(name,symbol)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
4->1;
}
// Function: 6043.sol-SPFCTokenImpl-timeVault(address)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-transfer(address,uint256)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-transfer(address,uint256,bytes)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-transferByOwner(address,uint256,uint256)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-transferFrom(address,address,uint256)
digraph{
}
// Function: 6043.sol-SPFCTokenImpl-transferIfRequirementsMet(address,address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkTransferRequirements(_to,_value)

IRs:
INTERNAL_CALL, ERC20Token.checkTransferRequirements(address,uint256)(_to,_value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withAllowances

IRs:
CONDITION withAllowances"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_180(mapping(address => uint256)) -> allowed[_from]
REF_181(uint256) -> REF_180[msg.sender]
TMP_271(bool) = _value <= REF_181
TMP_272(None) = SOLIDITY_CALL require(bool)(TMP_271)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[msg.sender].sub(_value)

IRs:
REF_182(uint256) -> balances[_from]
REF_183(uint256) -> balances[msg.sender]
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_183', '_value'] 
REF_182(uint256) (->balances) := TMP_273(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_185(uint256) -> balances[_to]
REF_186(uint256) -> balances[_to]
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_186', '_value'] 
REF_185(uint256) (->balances) := TMP_274(uint256)"];
}
// Function: 6043.sol-SPFCTokenImpl-transferToAddress(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-SPFCTokenImpl-transferToContract(address,uint256,bytes,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_254 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_254(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_23(uint256) = a + b
c(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_24(bool) = c >= a
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6043.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_19(uint256) = a / b
c(uint256) := TMP_19(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6043.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_13(uint256) = a * b
c(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_14(bool) = a == 0
TMP_15(uint256) = c / a
TMP_16(bool) = TMP_15 == b
TMP_17(bool) = TMP_14 || TMP_16
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6043.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_20(bool) = b <= a
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_22(uint256) = a - b
RETURN TMP_22"];
}
// Function: 6043.sol-StandardToken-allowance(address,address)
digraph{
}
// Function: 6043.sol-StandardToken-approve(address,uint256)
digraph{
}
// Function: 6043.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 6043.sol-StandardToken-checkTransferRequirements(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_112 = CONVERT 0 to address
TMP_113(bool) = _to != TMP_112
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(released == true)

IRs:
TMP_115(bool) = released == True
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > globalTimeVault)

IRs:
TMP_117(bool) = now > globalTimeVault
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timevault[msg.sender] != 0

IRs:
REF_60(uint256) -> timevault[msg.sender]
TMP_119(bool) = REF_60 != 0
CONDITION TMP_119"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now > timevault[msg.sender])

IRs:
REF_61(uint256) -> timevault[msg.sender]
TMP_120(bool) = now > REF_61
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= _value)

IRs:
TMP_122(uint256) = INTERNAL_CALL, ERC20Token.balanceOf(address)(msg.sender)
TMP_123(bool) = TMP_122 >= _value
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
}
// Function: 6043.sol-StandardToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
oldValue(uint256) := REF_83(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_136(bool) = _subtractedValue > oldValue
CONDITION TMP_136"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_84(mapping(address => uint256)) -> allowed[msg.sender]
REF_85(uint256) -> REF_84[_spender]
REF_85(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_86(mapping(address => uint256)) -> allowed[msg.sender]
REF_87(uint256) -> REF_86[_spender]
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_87(uint256) (->allowed) := TMP_137(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_89(mapping(address => uint256)) -> allowed[msg.sender]
REF_90(uint256) -> REF_89[_spender]
Emit Approval(msg.sender,_spender,REF_90)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-StandardToken-getNow()
digraph{
}
// Function: 6043.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_78', '_addedValue'] 
REF_76(uint256) (->allowed) := TMP_134(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_80(mapping(address => uint256)) -> allowed[msg.sender]
REF_81(uint256) -> REF_80[_spender]
Emit Approval(msg.sender,_spender,REF_81)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-StandardToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_105(bool) = length > 0
RETURN TMP_105"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 6043.sol-StandardToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_139(bool) = msg.sender == owner
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6043.sol-StandardToken-timeVault(address)
digraph{
}
// Function: 6043.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 6043.sol-StandardToken-transfer(address,uint256,bytes)
digraph{
}
// Function: 6043.sol-StandardToken-transferByOwner(address,uint256,uint256)
digraph{
}
// Function: 6043.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 6043.sol-StandardToken-transferIfRequirementsMet(address,address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkTransferRequirements(_to,_value)

IRs:
INTERNAL_CALL, ERC20Token.checkTransferRequirements(address,uint256)(_to,_value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withAllowances

IRs:
CONDITION withAllowances"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_62(mapping(address => uint256)) -> allowed[_from]
REF_63(uint256) -> REF_62[msg.sender]
TMP_126(bool) = _value <= REF_63
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[msg.sender].sub(_value)

IRs:
REF_64(uint256) -> balances[_from]
REF_65(uint256) -> balances[msg.sender]
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_65', '_value'] 
REF_64(uint256) (->balances) := TMP_128(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_67(uint256) -> balances[_to]
REF_68(uint256) -> balances[_to]
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_68', '_value'] 
REF_67(uint256) (->balances) := TMP_129(uint256)"];
}
// Function: 6043.sol-StandardToken-transferToAddress(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-StandardToken-transferToContract(address,uint256,bytes,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_109 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_109(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-StandardTokenExt-allowance(address,address)
digraph{
}
// Function: 6043.sol-StandardTokenExt-approve(address,uint256)
digraph{
}
// Function: 6043.sol-StandardTokenExt-balanceOf(address)
digraph{
}
// Function: 6043.sol-StandardTokenExt-checkTransferRequirements(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_160 = CONVERT 0 to address
TMP_161(bool) = _to != TMP_160
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(released == true)

IRs:
TMP_163(bool) = released == True
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > globalTimeVault)

IRs:
TMP_165(bool) = now > globalTimeVault
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timevault[msg.sender] != 0

IRs:
REF_115(uint256) -> timevault[msg.sender]
TMP_167(bool) = REF_115 != 0
CONDITION TMP_167"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now > timevault[msg.sender])

IRs:
REF_116(uint256) -> timevault[msg.sender]
TMP_168(bool) = now > REF_116
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= _value)

IRs:
TMP_170(uint256) = INTERNAL_CALL, ERC20Token.balanceOf(address)(msg.sender)
TMP_171(bool) = TMP_170 >= _value
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
}
// Function: 6043.sol-StandardTokenExt-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-StandardTokenExt-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_98(mapping(address => uint256)) -> allowed[msg.sender]
REF_99(uint256) -> REF_98[_spender]
oldValue(uint256) := REF_99(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_143(bool) = _subtractedValue > oldValue
CONDITION TMP_143"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_100(mapping(address => uint256)) -> allowed[msg.sender]
REF_101(uint256) -> REF_100[_spender]
REF_101(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_102(mapping(address => uint256)) -> allowed[msg.sender]
REF_103(uint256) -> REF_102[_spender]
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_103(uint256) (->allowed) := TMP_144(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_105(mapping(address => uint256)) -> allowed[msg.sender]
REF_106(uint256) -> REF_105[_spender]
Emit Approval(msg.sender,_spender,REF_106)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-StandardTokenExt-getNow()
digraph{
}
// Function: 6043.sol-StandardTokenExt-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_91(mapping(address => uint256)) -> allowed[msg.sender]
REF_92(uint256) -> REF_91[_spender]
REF_93(mapping(address => uint256)) -> allowed[msg.sender]
REF_94(uint256) -> REF_93[_spender]
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_94', '_addedValue'] 
REF_92(uint256) (->allowed) := TMP_141(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_96(mapping(address => uint256)) -> allowed[msg.sender]
REF_97(uint256) -> REF_96[_spender]
Emit Approval(msg.sender,_spender,REF_97)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-StandardTokenExt-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_153(bool) = length > 0
RETURN TMP_153"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 6043.sol-StandardTokenExt-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 6043.sol-StandardTokenExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_182(bool) = msg.sender == owner
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6043.sol-StandardTokenExt-timeVault(address)
digraph{
}
// Function: 6043.sol-StandardTokenExt-transfer(address,uint256)
digraph{
}
// Function: 6043.sol-StandardTokenExt-transfer(address,uint256,bytes)
digraph{
}
// Function: 6043.sol-StandardTokenExt-transferByOwner(address,uint256,uint256)
digraph{
}
// Function: 6043.sol-StandardTokenExt-transferFrom(address,address,uint256)
digraph{
}
// Function: 6043.sol-StandardTokenExt-transferIfRequirementsMet(address,address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkTransferRequirements(_to,_value)

IRs:
INTERNAL_CALL, ERC20Token.checkTransferRequirements(address,uint256)(_to,_value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withAllowances

IRs:
CONDITION withAllowances"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_117(mapping(address => uint256)) -> allowed[_from]
REF_118(uint256) -> REF_117[msg.sender]
TMP_174(bool) = _value <= REF_118
TMP_175(None) = SOLIDITY_CALL require(bool)(TMP_174)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[msg.sender].sub(_value)

IRs:
REF_119(uint256) -> balances[_from]
REF_120(uint256) -> balances[msg.sender]
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_120', '_value'] 
REF_119(uint256) (->balances) := TMP_176(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_122(uint256) -> balances[_to]
REF_123(uint256) -> balances[_to]
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_123', '_value'] 
REF_122(uint256) (->balances) := TMP_177(uint256)"];
}
// Function: 6043.sol-StandardTokenExt-transferToAddress(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-StandardTokenExt-transferToContract(address,uint256,bytes,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_157 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_157(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-TimeVaultInterface-allowance(address,address)
digraph{
}
// Function: 6043.sol-TimeVaultInterface-approve(address,uint256)
digraph{
}
// Function: 6043.sol-TimeVaultInterface-balanceOf(address)
digraph{
}
// Function: 6043.sol-TimeVaultInterface-getNow()
digraph{
}
// Function: 6043.sol-TimeVaultInterface-timeVault(address)
digraph{
}
// Function: 6043.sol-TimeVaultInterface-transfer(address,uint256)
digraph{
}
// Function: 6043.sol-TimeVaultInterface-transfer(address,uint256,bytes)
digraph{
}
// Function: 6043.sol-TimeVaultInterface-transferByOwner(address,uint256,uint256)
digraph{
}
// Function: 6043.sol-TimeVaultInterface-transferFrom(address,address,uint256)
digraph{
}
// Function: 6043.sol-TimeVaultToken-allowance(address,address)
digraph{
}
// Function: 6043.sol-TimeVaultToken-approve(address,uint256)
digraph{
}
// Function: 6043.sol-TimeVaultToken-balanceOf(address)
digraph{
}
// Function: 6043.sol-TimeVaultToken-checkTransferRequirements(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _to != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(released == true)

IRs:
TMP_75(bool) = released == True
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > globalTimeVault)

IRs:
TMP_77(bool) = now > globalTimeVault
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timevault[msg.sender] != 0

IRs:
REF_35(uint256) -> timevault[msg.sender]
TMP_79(bool) = REF_35 != 0
CONDITION TMP_79"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now > timevault[msg.sender])

IRs:
REF_36(uint256) -> timevault[msg.sender]
TMP_80(bool) = now > REF_36
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= _value)

IRs:
TMP_82(uint256) = INTERNAL_CALL, ERC20Token.balanceOf(address)(msg.sender)
TMP_83(bool) = TMP_82 >= _value
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
}
// Function: 6043.sol-TimeVaultToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-TimeVaultToken-getNow()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now

IRs:
RETURN now"];
2[label="Node Type: RETURN 2

EXPRESSION:
blockchainTimeNow

IRs:
RETURN blockchainTimeNow"];
}
// Function: 6043.sol-TimeVaultToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_65(bool) = length > 0
RETURN TMP_65"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 6043.sol-TimeVaultToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_96(bool) = msg.sender == owner
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6043.sol-TimeVaultToken-timeVault(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
timevault[owner]

IRs:
REF_51(uint256) -> timevault[owner]
RETURN REF_51"];
2[label="Node Type: RETURN 2

EXPRESSION:
earliestTransferTime

IRs:
RETURN earliestTransferTime"];
}
// Function: 6043.sol-TimeVaultToken-transfer(address,uint256)
digraph{
}
// Function: 6043.sol-TimeVaultToken-transfer(address,uint256,bytes)
digraph{
}
// Function: 6043.sol-TimeVaultToken-transferByOwner(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfer(to,value)

IRs:
TMP_94(bool) = INTERNAL_CALL, ERC20Token.transfer(address,uint256)(to,value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
timevault[to] = earliestReTransferTime

IRs:
REF_50(uint256) -> timevault[to]
REF_50(uint256) (->timevault) := earliestReTransferTime(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
4->1;
}
// Function: 6043.sol-TimeVaultToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 6043.sol-TimeVaultToken-transferIfRequirementsMet(address,address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkTransferRequirements(_to,_value)

IRs:
INTERNAL_CALL, ERC20Token.checkTransferRequirements(address,uint256)(_to,_value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withAllowances

IRs:
CONDITION withAllowances"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_37(mapping(address => uint256)) -> allowed[_from]
REF_38(uint256) -> REF_37[msg.sender]
TMP_86(bool) = _value <= REF_38
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[msg.sender].sub(_value)

IRs:
REF_39(uint256) -> balances[_from]
REF_40(uint256) -> balances[msg.sender]
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_40', '_value'] 
REF_39(uint256) (->balances) := TMP_88(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_42(uint256) -> balances[_to]
REF_43(uint256) -> balances[_to]
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_43', '_value'] 
REF_42(uint256) (->balances) := TMP_89(uint256)"];
}
// Function: 6043.sol-TimeVaultToken-transferToAddress(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-TimeVaultToken-transferToContract(address,uint256,bytes,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferIfRequirementsMet(msg.sender,_to,_value,withAllowance)

IRs:
INTERNAL_CALL, ERC20Token.transferIfRequirementsMet(address,address,uint256,bool)(msg.sender,_to,_value,withAllowance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_69 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_69(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6043.sol-VersionedToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-VersionedToken-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradableContractAddress = initialImplementation

IRs:
upgradableContractAddress(address) := initialImplementation(address)"];
}
// Function: 6043.sol-VersionedToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
upgradableContractMem = upgradableContractAddress

IRs:
upgradableContractMem(address) := upgradableContractAddress(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
functionCall = msg.data

IRs:
functionCall(bytes) := msg.data(bytes)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
}
// Function: 6043.sol-VersionedToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_227(bool) = msg.sender == owner
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6043.sol-VersionedToken-upgradeToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradableContractAddress = newImplementation

IRs:
upgradableContractAddress(address) := newImplementation(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 6043.sol-owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6043.sol-owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_0(bool) = msg.sender == owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
