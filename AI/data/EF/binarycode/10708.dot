digraph G {
// Function: 10708.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_7(bool) = msg.sender == nominatedOwner
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_10 = CONVERT 0 to address
nominatedOwner(address) := TMP_10(address)"];
}
// Function: 10708.sol-Owned-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _owner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_3 = CONVERT 0 to address
Emit OwnerChanged(TMP_3,_owner)"];
}
// Function: 10708.sol-Owned-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 10708.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_11(bool) = msg.sender == owner
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10708.sol-Proxy-_emit(bytes,uint256,bytes32,bytes32,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
size = callData.length

IRs:
REF_0 -> LENGTH callData
size(uint256) := REF_0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_callData = callData

IRs:
_callData(bytes) := callData(bytes)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyTarget()

IRs:
MODIFIER_CALL, Proxy.onlyTarget()()"];
5->1;
}
// Function: 10708.sol-Proxy-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_49(bool) = msg.sender == nominatedOwner
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_52 = CONVERT 0 to address
nominatedOwner(address) := TMP_52(address)"];
}
// Function: 10708.sol-Proxy-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
}
// Function: 10708.sol-Proxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
useDELEGATECALL

IRs:
CONDITION useDELEGATECALL"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->7;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
target.setMessageSender(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:target(Proxyable), function:setMessageSender, arguments:['msg.sender']  "];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 10708.sol-Proxy-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 10708.sol-Proxy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_59(bool) = msg.sender == owner
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10708.sol-Proxy-onlyTarget()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxyable(msg.sender) == target)

IRs:
TMP_61 = CONVERT msg.sender to Proxyable
TMP_62(bool) = TMP_61 == target
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10708.sol-Proxy-setTarget(Proxyable)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
target = _target

IRs:
target(Proxyable) := _target(Proxyable)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TargetUpdated(_target)

IRs:
Emit TargetUpdated(_target)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 10708.sol-Proxy-setUseDELEGATECALL(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
useDELEGATECALL = value

IRs:
useDELEGATECALL(bool) := value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 10708.sol-Proxyable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nominatedOwner)

IRs:
TMP_20(bool) = msg.sender == nominatedOwner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,nominatedOwner)

IRs:
Emit OwnerChanged(owner,nominatedOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = nominatedOwner

IRs:
owner(address) := nominatedOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nominatedOwner = address(0)

IRs:
TMP_23 = CONVERT 0 to address
nominatedOwner(address) := TMP_23(address)"];
}
// Function: 10708.sol-Proxyable-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = _owner != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(address(0),_owner)

IRs:
TMP_16 = CONVERT 0 to address
Emit OwnerChanged(TMP_16,_owner)"];
}
// Function: 10708.sol-Proxyable-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_24 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_24(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Owned(_owner)

IRs:
INTERNAL_CALL, Owned.constructor(address)(_owner)"];
3->1;
}
// Function: 10708.sol-Proxyable-nominateNewOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nominatedOwner = _owner

IRs:
nominatedOwner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerNominated(_owner)

IRs:
Emit OwnerNominated(_owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 10708.sol-Proxyable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_31(bool) = msg.sender == owner
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10708.sol-Proxyable-onlyProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Proxy(msg.sender) == proxy)

IRs:
TMP_33 = CONVERT msg.sender to Proxy
TMP_34(bool) = TMP_33 == proxy
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10708.sol-Proxyable-optionalProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_36 = CONVERT msg.sender to Proxy
TMP_37(bool) = TMP_36 != proxy
CONDITION TMP_37"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 10708.sol-Proxyable-optionalProxy_onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Proxy(msg.sender) != proxy

IRs:
TMP_38 = CONVERT msg.sender to Proxy
TMP_39(bool) = TMP_38 != proxy
CONDITION TMP_39"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
messageSender = msg.sender

IRs:
messageSender(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(messageSender == owner)

IRs:
TMP_40(bool) = messageSender == owner
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 10708.sol-Proxyable-setMessageSender(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
messageSender = sender

IRs:
messageSender(address) := sender(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy()

IRs:
MODIFIER_CALL, Proxyable.onlyProxy()()"];
2->1;
}
// Function: 10708.sol-Proxyable-setProxy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = Proxy(_proxy)

IRs:
TMP_27 = CONVERT _proxy to Proxy
proxy(Proxy) := TMP_27(Proxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyUpdated(_proxy)

IRs:
Emit ProxyUpdated(_proxy)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
}
