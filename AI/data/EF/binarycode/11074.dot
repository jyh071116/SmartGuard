digraph G {
// Function: 11074.sol-ATxPlatform-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 11074.sol-ATxPlatform-_address(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
holders[_holderId].addr

IRs:
REF_60(ATxPlatform.Holder) -> holders[_holderId]
REF_61(address) -> REF_60.addr
RETURN REF_61"];
}
// Function: 11074.sol-ATxPlatform-_allowance(uint256,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].wallets[_fromId].allowance[_toId]

IRs:
REF_172(ATxPlatform.Asset) -> assets[_symbol]
REF_173(mapping(uint256 => ATxPlatform.Wallet)) -> REF_172.wallets
REF_174(ATxPlatform.Wallet) -> REF_173[_fromId]
REF_175(mapping(uint256 => uint256)) -> REF_174.allowance
REF_176(uint256) -> REF_175[_toId]
RETURN REF_176"];
}
// Function: 11074.sol-ATxPlatform-_approve(uint256,uint256,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isCreated(_symbol)

IRs:
TMP_224(bool) = INTERNAL_CALL, ATxPlatform.isCreated(bytes32)(_symbol)
TMP_225 = UnaryType.BANG TMP_224 
CONDITION TMP_225"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_error(ATX_PLATFORM_ASSET_IS_NOT_ISSUED)

IRs:
TMP_226(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_ASSET_IS_NOT_ISSUED)
RETURN TMP_226"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_senderId == _spenderId

IRs:
TMP_227(bool) = _senderId == _spenderId
CONDITION TMP_227"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
_error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)

IRs:
TMP_228(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)
RETURN TMP_228"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
assets[_symbol].wallets[_senderId].allowance[_spenderId] != 0 && _value != 0

IRs:
REF_158(ATxPlatform.Asset) -> assets[_symbol]
REF_159(mapping(uint256 => ATxPlatform.Wallet)) -> REF_158.wallets
REF_160(ATxPlatform.Wallet) -> REF_159[_senderId]
REF_161(mapping(uint256 => uint256)) -> REF_160.allowance
REF_162(uint256) -> REF_161[_spenderId]
TMP_229(bool) = REF_162 != 0
TMP_230(bool) = _value != 0
TMP_231(bool) = TMP_229 && TMP_230
CONDITION TMP_231"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
_error(ATX_PLATFORM_INVALID_INVOCATION)

IRs:
TMP_232(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INVALID_INVOCATION)
RETURN TMP_232"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
assets[_symbol].wallets[_senderId].allowance[_spenderId] = _value

IRs:
REF_163(ATxPlatform.Asset) -> assets[_symbol]
REF_164(mapping(uint256 => ATxPlatform.Wallet)) -> REF_163.wallets
REF_165(ATxPlatform.Wallet) -> REF_164[_senderId]
REF_166(mapping(uint256 => uint256)) -> REF_165.allowance
REF_167(uint256) -> REF_166[_spenderId]
REF_167(uint256) (->assets) := _value(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Emitter(eventsHistory).emitApprove(_address(_senderId),_address(_spenderId),_symbol,_value)

IRs:
TMP_233 = CONVERT eventsHistory to Emitter
TMP_234(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_senderId)
TMP_235(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_spenderId)
HIGH_LEVEL_CALL, dest:TMP_233(Emitter), function:emitApprove, arguments:['TMP_234', 'TMP_235', '_symbol', '_value']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
proxies[_symbol] != 0x0

IRs:
REF_169(address) -> proxies[_symbol]
TMP_237(bool) = REF_169 != 0
CONDITION TMP_237"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ProxyEventsEmitter(proxies[_symbol]).emitApprove(_address(_senderId),_address(_spenderId),_value)

IRs:
REF_170(address) -> proxies[_symbol]
TMP_238 = CONVERT REF_170 to ProxyEventsEmitter
TMP_239(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_senderId)
TMP_240(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_spenderId)
HIGH_LEVEL_CALL, dest:TMP_238(ProxyEventsEmitter), function:emitApprove, arguments:['TMP_239', 'TMP_240', '_value']  "];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
OK

IRs:
RETURN OK"];
}
// Function: 11074.sol-ATxPlatform-_balanceOf(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].wallets[_holderId].balance

IRs:
REF_56(ATxPlatform.Asset) -> assets[_symbol]
REF_57(mapping(uint256 => ATxPlatform.Wallet)) -> REF_56.wallets
REF_58(ATxPlatform.Wallet) -> REF_57[_holderId]
REF_59(uint256) -> REF_58.balance
RETURN REF_59"];
}
// Function: 11074.sol-ATxPlatform-_createHolderId(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
holderId = holderIndex[_holder]

IRs:
REF_154(uint256) -> holderIndex[_holder]
holderId(uint256) := REF_154(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
holderId == 0

IRs:
TMP_223(bool) = holderId == 0
CONDITION TMP_223"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
holderId = ++ holdersCount

IRs:
holdersCount(uint256) = holdersCount + 1
holderId(uint256) := holdersCount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
holders[holderId].addr = _holder

IRs:
REF_155(ATxPlatform.Holder) -> holders[holderId]
REF_156(address) -> REF_155.addr
REF_156(address) (->holders) := _holder(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
holderIndex[_holder] = holderId

IRs:
REF_157(uint256) -> holderIndex[_holder]
REF_157(uint256) (->holderIndex) := holderId(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
holderId

IRs:
RETURN holderId"];
}
// Function: 11074.sol-ATxPlatform-_error(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Emitter(eventsHistory).emitError(_errorCode)

IRs:
TMP_242 = CONVERT eventsHistory to Emitter
HIGH_LEVEL_CALL, dest:TMP_242(Emitter), function:emitError, arguments:['_errorCode']  "];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_errorCode

IRs:
RETURN _errorCode"];
}
// Function: 11074.sol-ATxPlatform-_proxyTransferEvent(uint256,uint256,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
proxies[_symbol] != 0x0

IRs:
REF_151(address) -> proxies[_symbol]
TMP_218(bool) = REF_151 != 0
CONDITION TMP_218"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ProxyEventsEmitter(proxies[_symbol]).emitTransfer(_address(_fromId),_address(_toId),_value)

IRs:
REF_152(address) -> proxies[_symbol]
TMP_219 = CONVERT REF_152 to ProxyEventsEmitter
TMP_220(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_fromId)
TMP_221(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_toId)
HIGH_LEVEL_CALL, dest:TMP_219(ProxyEventsEmitter), function:emitTransfer, arguments:['TMP_220', 'TMP_221', '_value']  "];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ATxPlatform-_self()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 11074.sol-ATxPlatform-_transfer(uint256,uint256,uint256,bytes32,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_fromId == _toId

IRs:
TMP_198(bool) = _fromId == _toId
CONDITION TMP_198"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)

IRs:
TMP_199(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)
RETURN TMP_199"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value == 0

IRs:
TMP_200(bool) = _value == 0
CONDITION TMP_200"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
_error(ATX_PLATFORM_INVALID_VALUE)

IRs:
TMP_201(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INVALID_VALUE)
RETURN TMP_201"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_balanceOf(_fromId,_symbol) < _value

IRs:
TMP_202(uint256) = INTERNAL_CALL, ATxPlatform._balanceOf(uint256,bytes32)(_fromId,_symbol)
TMP_203(bool) = TMP_202 < _value
CONDITION TMP_203"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
_error(ATX_PLATFORM_INSUFFICIENT_BALANCE)

IRs:
TMP_204(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INSUFFICIENT_BALANCE)
RETURN TMP_204"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_fromId != _senderId && _allowance(_fromId,_senderId,_symbol) < _value

IRs:
TMP_205(bool) = _fromId != _senderId
TMP_206(uint256) = INTERNAL_CALL, ATxPlatform._allowance(uint256,uint256,bytes32)(_fromId,_senderId,_symbol)
TMP_207(bool) = TMP_206 < _value
TMP_208(bool) = TMP_205 && TMP_207
CONDITION TMP_208"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
_error(ATX_PLATFORM_NOT_ENOUGH_ALLOWANCE)

IRs:
TMP_209(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_NOT_ENOUGH_ALLOWANCE)
RETURN TMP_209"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_transferDirect(_fromId,_toId,_value,_symbol)

IRs:
INTERNAL_CALL, ATxPlatform._transferDirect(uint256,uint256,uint256,bytes32)(_fromId,_toId,_value,_symbol)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_fromId != _senderId

IRs:
TMP_211(bool) = _fromId != _senderId
CONDITION TMP_211"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
assets[_symbol].wallets[_fromId].allowance[_senderId] = assets[_symbol].wallets[_fromId].allowance[_senderId].sub(_value)

IRs:
REF_139(ATxPlatform.Asset) -> assets[_symbol]
REF_140(mapping(uint256 => ATxPlatform.Wallet)) -> REF_139.wallets
REF_141(ATxPlatform.Wallet) -> REF_140[_fromId]
REF_142(mapping(uint256 => uint256)) -> REF_141.allowance
REF_143(uint256) -> REF_142[_senderId]
REF_144(ATxPlatform.Asset) -> assets[_symbol]
REF_145(mapping(uint256 => ATxPlatform.Wallet)) -> REF_144.wallets
REF_146(ATxPlatform.Wallet) -> REF_145[_fromId]
REF_147(mapping(uint256 => uint256)) -> REF_146.allowance
REF_148(uint256) -> REF_147[_senderId]
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_148', '_value'] 
REF_143(uint256) (->assets) := TMP_212(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Emitter(eventsHistory).emitTransfer(_address(_fromId),_address(_toId),_symbol,_value,_reference)

IRs:
TMP_213 = CONVERT eventsHistory to Emitter
TMP_214(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_fromId)
TMP_215(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(_toId)
HIGH_LEVEL_CALL, dest:TMP_213(Emitter), function:emitTransfer, arguments:['TMP_214', 'TMP_215', '_symbol', '_value', '_reference']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_proxyTransferEvent(_fromId,_toId,_value,_symbol)

IRs:
INTERNAL_CALL, ATxPlatform._proxyTransferEvent(uint256,uint256,uint256,bytes32)(_fromId,_toId,_value,_symbol)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
OK

IRs:
RETURN OK"];
}
// Function: 11074.sol-ATxPlatform-_transferDirect(uint256,uint256,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assets[_symbol].wallets[_fromId].balance = assets[_symbol].wallets[_fromId].balance.sub(_value)

IRs:
REF_121(ATxPlatform.Asset) -> assets[_symbol]
REF_122(mapping(uint256 => ATxPlatform.Wallet)) -> REF_121.wallets
REF_123(ATxPlatform.Wallet) -> REF_122[_fromId]
REF_124(uint256) -> REF_123.balance
REF_125(ATxPlatform.Asset) -> assets[_symbol]
REF_126(mapping(uint256 => ATxPlatform.Wallet)) -> REF_125.wallets
REF_127(ATxPlatform.Wallet) -> REF_126[_fromId]
REF_128(uint256) -> REF_127.balance
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_128', '_value'] 
REF_124(uint256) (->assets) := TMP_196(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assets[_symbol].wallets[_toId].balance = assets[_symbol].wallets[_toId].balance.add(_value)

IRs:
REF_130(ATxPlatform.Asset) -> assets[_symbol]
REF_131(mapping(uint256 => ATxPlatform.Wallet)) -> REF_130.wallets
REF_132(ATxPlatform.Wallet) -> REF_131[_toId]
REF_133(uint256) -> REF_132.balance
REF_134(ATxPlatform.Asset) -> assets[_symbol]
REF_135(mapping(uint256 => ATxPlatform.Wallet)) -> REF_134.wallets
REF_136(ATxPlatform.Wallet) -> REF_135[_toId]
REF_137(uint256) -> REF_136.balance
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_137', '_value'] 
REF_133(uint256) (->assets) := TMP_197(uint256)"];
}
// Function: 11074.sol-ATxPlatform-addAssetPartOwner(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
holderId = _createHolderId(_partowner)

IRs:
TMP_73(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(_partowner)
holderId(uint256) := TMP_73(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assets[_symbol].partowners[holderId] = true

IRs:
REF_16(ATxPlatform.Asset) -> assets[_symbol]
REF_17(mapping(uint256 => bool)) -> REF_16.partowners
REF_18(bool) -> REF_17[holderId]
REF_18(bool) (->assets) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Emitter(eventsHistory).emitOwnershipChange(0x0,_partowner,_symbol)

IRs:
TMP_74 = CONVERT eventsHistory to Emitter
HIGH_LEVEL_CALL, dest:TMP_74(Emitter), function:emitOwnershipChange, arguments:['0', '_partowner', '_symbol']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
OK

IRs:
RETURN OK"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOneOfOwners(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyOneOfOwners(bytes32)(_symbol)"];
5->1;
}
// Function: 11074.sol-ATxPlatform-addPartOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
partowners[_partowner] = true

IRs:
REF_14(bool) -> partowners[_partowner]
REF_14(bool) (->partowners) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
OK

IRs:
RETURN OK"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
3->1;
}
// Function: 11074.sol-ATxPlatform-allowance(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_allowance(getHolderId(_from),getHolderId(_spender),_symbol)

IRs:
TMP_188(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_from)
TMP_189(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_spender)
TMP_190(uint256) = INTERNAL_CALL, ATxPlatform._allowance(uint256,uint256,bytes32)(TMP_188,TMP_189,_symbol)
RETURN TMP_190"];
}
// Function: 11074.sol-ATxPlatform-balanceOf(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balanceOf(getHolderId(_holder),_symbol)

IRs:
TMP_111(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_holder)
TMP_112(uint256) = INTERNAL_CALL, ATxPlatform._balanceOf(uint256,bytes32)(TMP_111,_symbol)
RETURN TMP_112"];
}
// Function: 11074.sol-ATxPlatform-baseUnit(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].baseUnit

IRs:
REF_35(ATxPlatform.Asset) -> assets[_symbol]
REF_36(uint8) -> REF_35.baseUnit
RETURN REF_36"];
}
// Function: 11074.sol-ATxPlatform-changeContractOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
_to == 0x0

IRs:
TMP_59(bool) = _to == 0
CONDITION TMP_59"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pendingContractOwner = _to

IRs:
pendingContractOwner(address) := _to(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
6->1;
}
// Function: 11074.sol-ATxPlatform-changeOwnership(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner == 0x0

IRs:
TMP_167(bool) = _newOwner == 0
CONDITION TMP_167"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_error(ATX_PLATFORM_INVALID_NEW_OWNER)

IRs:
TMP_168(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INVALID_NEW_OWNER)
RETURN TMP_168"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
asset = assets[_symbol]

IRs:
REF_107(ATxPlatform.Asset) -> assets[_symbol]
asset(ATxPlatform.Asset) := REF_107(ATxPlatform.Asset)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
newOwnerId = _createHolderId(_newOwner)

IRs:
TMP_169(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(_newOwner)
newOwnerId(uint256) := TMP_169(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
asset.owner == newOwnerId

IRs:
REF_108(uint256) -> asset.owner
TMP_170(bool) = REF_108 == newOwnerId
CONDITION TMP_170"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
_error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)

IRs:
TMP_171(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)
RETURN TMP_171"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
oldOwner = _address(asset.owner)

IRs:
REF_109(uint256) -> asset.owner
TMP_172(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(REF_109)
oldOwner(address) := TMP_172(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
asset.owner = newOwnerId

IRs:
REF_110(uint256) -> asset.owner
REF_110(uint256) (->asset) := newOwnerId(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Emitter(eventsHistory).emitOwnershipChange(oldOwner,_newOwner,_symbol)

IRs:
TMP_173 = CONVERT eventsHistory to Emitter
HIGH_LEVEL_CALL, dest:TMP_173(Emitter), function:emitOwnershipChange, arguments:['oldOwner', '_newOwner', '_symbol']  "];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
OK

IRs:
RETURN OK"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyOwner(bytes32)(_symbol)"];
13->1;
}
// Function: 11074.sol-ATxPlatform-checkIsAssetPartOwner(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_partowner != 0x0)

IRs:
TMP_113(bool) = _partowner != 0
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
holderId = getHolderId(_partowner)

IRs:
TMP_115(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_partowner)
holderId(uint256) := TMP_115(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
assets[_symbol].partowners[holderId]

IRs:
REF_62(ATxPlatform.Asset) -> assets[_symbol]
REF_63(mapping(uint256 => bool)) -> REF_62.partowners
REF_64(bool) -> REF_63[holderId]
RETURN REF_64"];
}
// Function: 11074.sol-ATxPlatform-checkOnlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender

IRs:
TMP_56(bool) = contractOwner == msg.sender
CONDITION TMP_56"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
OK

IRs:
RETURN OK"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER

IRs:
RETURN OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER"];
}
// Function: 11074.sol-ATxPlatform-checkTrust(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isTrusted(_from,_to)

IRs:
TMP_265(bool) = INTERNAL_CALL, ATxPlatform.isTrusted(address,address)(_from,_to)
CONDITION TMP_265"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ATxPlatform-claimContractOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pendingContractOwner != msg.sender

IRs:
TMP_61(bool) = pendingContractOwner != msg.sender
CONDITION TMP_61"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
contractOwner = pendingContractOwner

IRs:
contractOwner(address) := pendingContractOwner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete pendingContractOwner

IRs:
pendingContractOwner = delete pendingContractOwner "];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 11074.sol-ATxPlatform-description(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].description

IRs:
REF_39(ATxPlatform.Asset) -> assets[_symbol]
REF_40(string) -> REF_39.description
RETURN REF_40"];
}
// Function: 11074.sol-ATxPlatform-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_57(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
2->1;
}
// Function: 11074.sol-ATxPlatform-distrust()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holders[getHolderId(msg.sender)].trust[contractOwner] = false

IRs:
TMP_68(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(msg.sender)
REF_11(ATxPlatform.Holder) -> holders[TMP_68]
REF_12(mapping(address => bool)) -> REF_11.trust
REF_13(bool) -> REF_12[contractOwner]
REF_13(bool) (->holders) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
OK

IRs:
RETURN OK"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
checkTrust(msg.sender,contractOwner)

IRs:
MODIFIER_CALL, ATxPlatform.checkTrust(address,address)(msg.sender,contractOwner)"];
3->1;
}
// Function: 11074.sol-ATxPlatform-emitApprove(address,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Approve(_from,_spender,_symbol,_value)

IRs:
Emit Approve(_from,_spender,_symbol,_value)"];
}
// Function: 11074.sol-ATxPlatform-emitError(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Error(_errorCode)

IRs:
Emit Error(_errorCode)"];
}
// Function: 11074.sol-ATxPlatform-emitIssue(bytes32,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Issue(_symbol,_value,_by)

IRs:
Emit Issue(_symbol,_value,_by)"];
}
// Function: 11074.sol-ATxPlatform-emitOwnershipChange(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipChange(_from,_to,_symbol)

IRs:
Emit OwnershipChange(_from,_to,_symbol)"];
}
// Function: 11074.sol-ATxPlatform-emitRecovery(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Recovery(_from,_to,_by)

IRs:
Emit Recovery(_from,_to,_by)"];
}
// Function: 11074.sol-ATxPlatform-emitRevoke(bytes32,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Revoke(_symbol,_value,_by)

IRs:
Emit Revoke(_symbol,_value,_by)"];
}
// Function: 11074.sol-ATxPlatform-emitTransfer(address,address,bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_symbol,_value,_reference)

IRs:
Emit Transfer(_from,_to,_symbol,_value,_reference)"];
}
// Function: 11074.sol-ATxPlatform-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_62(None) = SOLIDITY_CALL revert()()"];
}
// Function: 11074.sol-ATxPlatform-getHolderId(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
holderIndex[_holder]

IRs:
REF_67(uint256) -> holderIndex[_holder]
RETURN REF_67"];
}
// Function: 11074.sol-ATxPlatform-hasAssetRights(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
holderId = getHolderId(_owner)

IRs:
TMP_106(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_owner)
holderId(uint256) := TMP_106(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
isCreated(_symbol) && (assets[_symbol].owner == holderId || assets[_symbol].partowners[holderId])

IRs:
TMP_107(bool) = INTERNAL_CALL, ATxPlatform.isCreated(bytes32)(_symbol)
REF_49(ATxPlatform.Asset) -> assets[_symbol]
REF_50(uint256) -> REF_49.owner
TMP_108(bool) = REF_50 == holderId
REF_51(ATxPlatform.Asset) -> assets[_symbol]
REF_52(mapping(uint256 => bool)) -> REF_51.partowners
REF_53(bool) -> REF_52[holderId]
TMP_109(bool) = TMP_108 || REF_53
TMP_110(bool) = TMP_107 && TMP_109
RETURN TMP_110"];
}
// Function: 11074.sol-ATxPlatform-isCreated(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].owner != 0

IRs:
REF_33(ATxPlatform.Asset) -> assets[_symbol]
REF_34(uint256) -> REF_33.owner
TMP_101(bool) = REF_34 != 0
RETURN TMP_101"];
}
// Function: 11074.sol-ATxPlatform-isOwner(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
isCreated(_symbol) && (assets[_symbol].owner == getHolderId(_owner))

IRs:
TMP_102(bool) = INTERNAL_CALL, ATxPlatform.isCreated(bytes32)(_symbol)
REF_47(ATxPlatform.Asset) -> assets[_symbol]
REF_48(uint256) -> REF_47.owner
TMP_103(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_owner)
TMP_104(bool) = REF_48 == TMP_103
TMP_105(bool) = TMP_102 && TMP_104
RETURN TMP_105"];
}
// Function: 11074.sol-ATxPlatform-isReissuable(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].isReissuable

IRs:
REF_41(ATxPlatform.Asset) -> assets[_symbol]
REF_42(bool) -> REF_41.isReissuable
RETURN REF_42"];
}
// Function: 11074.sol-ATxPlatform-isTrusted(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
holders[getHolderId(_from)].trust[_to]

IRs:
TMP_176(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_from)
REF_112(ATxPlatform.Holder) -> holders[TMP_176]
REF_113(mapping(address => bool)) -> REF_112.trust
REF_114(bool) -> REF_113[_to]
RETURN REF_114"];
}
// Function: 11074.sol-ATxPlatform-issueAsset(bytes32,uint256,string,string,uint8,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
issueAssetToAddress(_symbol,_value,_name,_description,_baseUnit,_isReissuable,msg.sender)

IRs:
TMP_123(uint256) = INTERNAL_CALL, ATxPlatform.issueAssetToAddress(bytes32,uint256,string,string,uint8,bool,address)(_symbol,_value,_name,_description,_baseUnit,_isReissuable,msg.sender)
RETURN TMP_123"];
}
// Function: 11074.sol-ATxPlatform-issueAssetToAddress(bytes32,uint256,string,string,uint8,bool,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
_value == 0 && ! _isReissuable

IRs:
TMP_124(bool) = _value == 0
TMP_125 = UnaryType.BANG _isReissuable 
TMP_126(bool) = TMP_124 && TMP_125
CONDITION TMP_126"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_error(ATX_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE)

IRs:
TMP_127(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE)
RETURN TMP_127"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isCreated(_symbol)

IRs:
TMP_128(bool) = INTERNAL_CALL, ATxPlatform.isCreated(bytes32)(_symbol)
CONDITION TMP_128"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
_error(ATX_PLATFORM_ASSET_ALREADY_ISSUED)

IRs:
TMP_129(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_ASSET_ALREADY_ISSUED)
RETURN TMP_129"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
holderId = _createHolderId(_account)

IRs:
TMP_130(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(_account)
holderId(uint256) := TMP_130(uint256)"];
7->15;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
symbols.push(_symbol)

IRs:
REF_69 -> LENGTH symbols
TMP_132(uint256) := REF_69(uint256)
TMP_133(uint256) = TMP_132 + 1
REF_69(uint256) (->symbols) := TMP_133(uint256)
REF_70(bytes32) -> symbols[TMP_132]
REF_70(bytes32) (->symbols) := _symbol(bytes32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
assets[_symbol] = Asset(creatorId,_value,_name,_description,_isReissuable,_baseUnit)

IRs:
REF_71(ATxPlatform.Asset) -> assets[_symbol]
TMP_134(ATxPlatform.Asset) = new Asset(creatorId,_value,_name,_description,_isReissuable,_baseUnit)
REF_71(ATxPlatform.Asset) (->assets) := TMP_134(ATxPlatform.Asset)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
assets[_symbol].wallets[holderId].balance = _value

IRs:
REF_72(ATxPlatform.Asset) -> assets[_symbol]
REF_73(mapping(uint256 => ATxPlatform.Wallet)) -> REF_72.wallets
REF_74(ATxPlatform.Wallet) -> REF_73[holderId]
REF_75(uint256) -> REF_74.balance
REF_75(uint256) (->assets) := _value(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Emitter(eventsHistory).emitIssue(_symbol,_value,_address(holderId))

IRs:
TMP_135 = CONVERT eventsHistory to Emitter
TMP_136(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(holderId)
HIGH_LEVEL_CALL, dest:TMP_135(Emitter), function:emitIssue, arguments:['_symbol', '_value', 'TMP_136']  "];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
OK

IRs:
RETURN OK"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOneOfContractOwners()

IRs:
MODIFIER_CALL, ATxPlatform.onlyOneOfContractOwners()()"];
14->1;
15[label="Node Type: IF 15

EXPRESSION:
_account == msg.sender

IRs:
TMP_139(bool) = _account == msg.sender
CONDITION TMP_139"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
creatorId = holderId

IRs:
creatorId(uint256) := holderId(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
creatorId = _createHolderId(msg.sender)

IRs:
TMP_140(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(msg.sender)
creatorId(uint256) := TMP_140(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->9;
}
// Function: 11074.sol-ATxPlatform-massTransfer(address[],uint256[],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->28;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length == values.length)

IRs:
REF_24 -> LENGTH addresses
REF_25 -> LENGTH values
TMP_81(bool) = REF_24 == REF_25
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_symbol != 0x0)

IRs:
TMP_83(bool) = _symbol != 0
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
senderId = _createHolderId(msg.sender)

IRs:
TMP_85(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(msg.sender)
senderId(uint256) := TMP_85(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
success = 0

IRs:
success(uint256) := 0(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->27;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
idx < addresses.length && msg.gas > 110000

IRs:
REF_26 -> LENGTH addresses
TMP_86(bool) = idx < REF_26
TMP_87(bool) = msg.gas > 110000
TMP_88(bool) = TMP_86 && TMP_87
CONDITION TMP_88"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
value = values[idx]

IRs:
REF_27(uint256) -> values[idx]
value(uint256) := REF_27(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
value == 0

IRs:
TMP_89(bool) = value == 0
CONDITION TMP_89"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_error(ATX_PLATFORM_INVALID_VALUE)

IRs:
TMP_90(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INVALID_VALUE)"];
11->12;
12[label="Node Type: CONTINUE 12
"];
12->26;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_balanceOf(senderId,_symbol) < value

IRs:
TMP_91(uint256) = INTERNAL_CALL, ATxPlatform._balanceOf(uint256,bytes32)(senderId,_symbol)
TMP_92(bool) = TMP_91 < value
CONDITION TMP_92"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_error(ATX_PLATFORM_INSUFFICIENT_BALANCE)

IRs:
TMP_93(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INSUFFICIENT_BALANCE)"];
15->16;
16[label="Node Type: CONTINUE 16
"];
16->26;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
msg.sender == addresses[idx]

IRs:
REF_28(address) -> addresses[idx]
TMP_94(bool) = msg.sender == REF_28
CONDITION TMP_94"];
18->19[label="True"];
18->21[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)

IRs:
TMP_95(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)"];
19->20;
20[label="Node Type: CONTINUE 20
"];
20->26;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
holderId = _createHolderId(addresses[idx])

IRs:
REF_29(address) -> addresses[idx]
TMP_96(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(REF_29)
holderId(uint256) := TMP_96(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_transferDirect(senderId,holderId,value,_symbol)

IRs:
INTERNAL_CALL, ATxPlatform._transferDirect(uint256,uint256,uint256,bytes32)(senderId,holderId,value,_symbol)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
Emitter(eventsHistory).emitTransfer(msg.sender,addresses[idx],_symbol,value,)

IRs:
TMP_98 = CONVERT eventsHistory to Emitter
REF_31(address) -> addresses[idx]
HIGH_LEVEL_CALL, dest:TMP_98(Emitter), function:emitTransfer, arguments:['msg.sender', 'REF_31', '_symbol', 'value', '']  "];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
++ success

IRs:
success(uint256) = success + 1"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
++ idx

IRs:
idx(uint256) = idx + 1"];
26->8;
27[label="Node Type: RETURN 27

EXPRESSION:
(OK,success)

IRs:
RETURN OK,success"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
onlyOneOfOwners(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyOneOfOwners(bytes32)(_symbol)"];
28->1;
29[label="Node Type: RETURN 29

EXPRESSION:
(errorCode,count)

IRs:
RETURN errorCode,count"];
}
// Function: 11074.sol-ATxPlatform-name(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].name

IRs:
REF_37(ATxPlatform.Asset) -> assets[_symbol]
REF_38(string) -> REF_37.name
RETURN REF_38"];
}
// Function: 11074.sol-ATxPlatform-onlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender

IRs:
TMP_259(bool) = contractOwner == msg.sender
CONDITION TMP_259"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ATxPlatform-onlyOneOfContractOwners()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender || partowners[msg.sender]

IRs:
TMP_262(bool) = contractOwner == msg.sender
REF_178(bool) -> partowners[msg.sender]
TMP_263(bool) = TMP_262 || REF_178
CONDITION TMP_263"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ATxPlatform-onlyOneOfOwners(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
hasAssetRights(msg.sender,_symbol)

IRs:
TMP_261(bool) = INTERNAL_CALL, ATxPlatform.hasAssetRights(address,bytes32)(msg.sender,_symbol)
CONDITION TMP_261"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ATxPlatform-onlyOwner(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner(msg.sender,_symbol)

IRs:
TMP_260(bool) = INTERNAL_CALL, ATxPlatform.isOwner(address,bytes32)(msg.sender,_symbol)
CONDITION TMP_260"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ATxPlatform-onlyProxy(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
proxies[_symbol] == msg.sender

IRs:
REF_179(address) -> proxies[_symbol]
TMP_264(bool) = REF_179 == msg.sender
CONDITION TMP_264"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ATxPlatform-owner(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
holders[assets[_symbol].owner].addr

IRs:
REF_43(ATxPlatform.Asset) -> assets[_symbol]
REF_44(uint256) -> REF_43.owner
REF_45(ATxPlatform.Holder) -> holders[REF_44]
REF_46(address) -> REF_45.addr
RETURN REF_46"];
}
// Function: 11074.sol-ATxPlatform-proxyApprove(address,uint256,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_approve(_createHolderId(_spender),_value,_symbol,_createHolderId(_sender))

IRs:
TMP_184(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(_spender)
TMP_185(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(_sender)
TMP_186(uint256) = INTERNAL_CALL, ATxPlatform._approve(uint256,uint256,bytes32,uint256)(TMP_184,_value,_symbol,TMP_185)
RETURN TMP_186"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyProxy(bytes32)(_symbol)"];
2->1;
}
// Function: 11074.sol-ATxPlatform-proxyTransferFromWithReference(address,address,uint256,bytes32,string,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_transfer(getHolderId(_from),_createHolderId(_to),_value,_symbol,_reference,getHolderId(_sender))

IRs:
TMP_191(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_from)
TMP_192(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(_to)
TMP_193(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_sender)
TMP_194(uint256) = INTERNAL_CALL, ATxPlatform._transfer(uint256,uint256,uint256,bytes32,string,uint256)(TMP_191,TMP_192,_value,_symbol,_reference,TMP_193)
RETURN TMP_194"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyProxy(bytes32)(_symbol)"];
2->1;
}
// Function: 11074.sol-ATxPlatform-proxyTransferWithReference(address,uint256,bytes32,string,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_transfer(getHolderId(_sender),_createHolderId(_to),_value,_symbol,_reference,getHolderId(_sender))

IRs:
TMP_118(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_sender)
TMP_119(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(_to)
TMP_120(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_sender)
TMP_121(uint256) = INTERNAL_CALL, ATxPlatform._transfer(uint256,uint256,uint256,bytes32,string,uint256)(TMP_118,TMP_119,_value,_symbol,_reference,TMP_120)
RETURN TMP_121"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyProxy(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyProxy(bytes32)(_symbol)"];
2->1;
}
// Function: 11074.sol-ATxPlatform-recover(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
from = holders[getHolderId(_from)].addr

IRs:
TMP_177(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_from)
REF_115(ATxPlatform.Holder) -> holders[TMP_177]
REF_116(address) -> REF_115.addr
from(address) := REF_116(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
holders[getHolderId(_from)].addr = _to

IRs:
TMP_178(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_from)
REF_117(ATxPlatform.Holder) -> holders[TMP_178]
REF_118(address) -> REF_117.addr
REF_118(address) (->holders) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
holderIndex[_to] = getHolderId(_from)

IRs:
REF_119(uint256) -> holderIndex[_to]
TMP_179(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_from)
REF_119(uint256) (->holderIndex) := TMP_179(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Emitter(eventsHistory).emitRecovery(from,_to,msg.sender)

IRs:
TMP_180 = CONVERT eventsHistory to Emitter
HIGH_LEVEL_CALL, dest:TMP_180(Emitter), function:emitRecovery, arguments:['from', '_to', 'msg.sender']  "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
OK

IRs:
RETURN OK"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
checkTrust(_from,msg.sender)

IRs:
MODIFIER_CALL, ATxPlatform.checkTrust(address,address)(_from,msg.sender)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
errorCode

IRs:
RETURN errorCode"];
}
// Function: 11074.sol-ATxPlatform-reissueAsset(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: IF 1

EXPRESSION:
_value == 0

IRs:
TMP_141(bool) = _value == 0
CONDITION TMP_141"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_error(ATX_PLATFORM_INVALID_VALUE)

IRs:
TMP_142(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INVALID_VALUE)
RETURN TMP_142"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
asset = assets[_symbol]

IRs:
REF_77(ATxPlatform.Asset) -> assets[_symbol]
asset(ATxPlatform.Asset) := REF_77(ATxPlatform.Asset)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! asset.isReissuable

IRs:
REF_78(bool) -> asset.isReissuable
TMP_143 = UnaryType.BANG REF_78 
CONDITION TMP_143"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
_error(ATX_PLATFORM_CANNOT_REISSUE_FIXED_ASSET)

IRs:
TMP_144(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_CANNOT_REISSUE_FIXED_ASSET)
RETURN TMP_144"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
asset.totalSupply + _value < asset.totalSupply

IRs:
REF_79(uint256) -> asset.totalSupply
TMP_145(uint256) = REF_79 + _value
REF_80(uint256) -> asset.totalSupply
TMP_146(bool) = TMP_145 < REF_80
CONDITION TMP_146"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
_error(ATX_PLATFORM_SUPPLY_OVERFLOW)

IRs:
TMP_147(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_SUPPLY_OVERFLOW)
RETURN TMP_147"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
holderId = getHolderId(msg.sender)

IRs:
TMP_148(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(msg.sender)
holderId(uint256) := TMP_148(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
asset.wallets[holderId].balance = asset.wallets[holderId].balance.add(_value)

IRs:
REF_81(mapping(uint256 => ATxPlatform.Wallet)) -> asset.wallets
REF_82(ATxPlatform.Wallet) -> REF_81[holderId]
REF_83(uint256) -> REF_82.balance
REF_84(mapping(uint256 => ATxPlatform.Wallet)) -> asset.wallets
REF_85(ATxPlatform.Wallet) -> REF_84[holderId]
REF_86(uint256) -> REF_85.balance
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_86', '_value'] 
REF_83(uint256) (->asset) := TMP_149(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
asset.totalSupply = asset.totalSupply.add(_value)

IRs:
REF_88(uint256) -> asset.totalSupply
REF_89(uint256) -> asset.totalSupply
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_89', '_value'] 
REF_88(uint256) (->asset) := TMP_150(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Emitter(eventsHistory).emitIssue(_symbol,_value,_address(holderId))

IRs:
TMP_151 = CONVERT eventsHistory to Emitter
TMP_152(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(holderId)
HIGH_LEVEL_CALL, dest:TMP_151(Emitter), function:emitIssue, arguments:['_symbol', '_value', 'TMP_152']  "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_proxyTransferEvent(0,holderId,_value,_symbol)

IRs:
INTERNAL_CALL, ATxPlatform._proxyTransferEvent(uint256,uint256,uint256,bytes32)(0,holderId,_value,_symbol)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
OK

IRs:
RETURN OK"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyOneOfOwners(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyOneOfOwners(bytes32)(_symbol)"];
17->1;
}
// Function: 11074.sol-ATxPlatform-removeAssetPartOwner(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
holderId = getHolderId(_partowner)

IRs:
TMP_77(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(_partowner)
holderId(uint256) := TMP_77(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete assets[_symbol].partowners[holderId]

IRs:
REF_20(ATxPlatform.Asset) -> assets[_symbol]
REF_21(mapping(uint256 => bool)) -> REF_20.partowners
REF_22(bool) -> REF_21[holderId]
REF_21 = delete REF_22 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Emitter(eventsHistory).emitOwnershipChange(_partowner,0x0,_symbol)

IRs:
TMP_78 = CONVERT eventsHistory to Emitter
HIGH_LEVEL_CALL, dest:TMP_78(Emitter), function:emitOwnershipChange, arguments:['_partowner', '0', '_symbol']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
OK

IRs:
RETURN OK"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOneOfOwners(_symbol)

IRs:
MODIFIER_CALL, ATxPlatform.onlyOneOfOwners(bytes32)(_symbol)"];
5->1;
}
// Function: 11074.sol-ATxPlatform-removePartOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete partowners[_partowner]

IRs:
REF_15(bool) -> partowners[_partowner]
partowners = delete REF_15 "];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
OK

IRs:
RETURN OK"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
3->1;
}
// Function: 11074.sol-ATxPlatform-revokeAsset(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_value == 0

IRs:
TMP_156(bool) = _value == 0
CONDITION TMP_156"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_error(ATX_PLATFORM_INVALID_VALUE)

IRs:
TMP_157(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_INVALID_VALUE)
RETURN TMP_157"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
asset = assets[_symbol]

IRs:
REF_92(ATxPlatform.Asset) -> assets[_symbol]
asset(ATxPlatform.Asset) := REF_92(ATxPlatform.Asset)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
holderId = getHolderId(msg.sender)

IRs:
TMP_158(uint256) = INTERNAL_CALL, ATxPlatform.getHolderId(address)(msg.sender)
holderId(uint256) := TMP_158(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
asset.wallets[holderId].balance < _value

IRs:
REF_93(mapping(uint256 => ATxPlatform.Wallet)) -> asset.wallets
REF_94(ATxPlatform.Wallet) -> REF_93[holderId]
REF_95(uint256) -> REF_94.balance
TMP_159(bool) = REF_95 < _value
CONDITION TMP_159"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
_error(ATX_PLATFORM_NOT_ENOUGH_TOKENS)

IRs:
TMP_160(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_NOT_ENOUGH_TOKENS)
RETURN TMP_160"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
asset.wallets[holderId].balance = asset.wallets[holderId].balance.sub(_value)

IRs:
REF_96(mapping(uint256 => ATxPlatform.Wallet)) -> asset.wallets
REF_97(ATxPlatform.Wallet) -> REF_96[holderId]
REF_98(uint256) -> REF_97.balance
REF_99(mapping(uint256 => ATxPlatform.Wallet)) -> asset.wallets
REF_100(ATxPlatform.Wallet) -> REF_99[holderId]
REF_101(uint256) -> REF_100.balance
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_101', '_value'] 
REF_98(uint256) (->asset) := TMP_161(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
asset.totalSupply = asset.totalSupply.sub(_value)

IRs:
REF_103(uint256) -> asset.totalSupply
REF_104(uint256) -> asset.totalSupply
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_104', '_value'] 
REF_103(uint256) (->asset) := TMP_162(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Emitter(eventsHistory).emitRevoke(_symbol,_value,_address(holderId))

IRs:
TMP_163 = CONVERT eventsHistory to Emitter
TMP_164(address) = INTERNAL_CALL, ATxPlatform._address(uint256)(holderId)
HIGH_LEVEL_CALL, dest:TMP_163(Emitter), function:emitRevoke, arguments:['_symbol', '_value', 'TMP_164']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_proxyTransferEvent(holderId,0,_value,_symbol)

IRs:
INTERNAL_CALL, ATxPlatform._proxyTransferEvent(uint256,uint256,uint256,bytes32)(holderId,0,_value,_symbol)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
OK

IRs:
RETURN OK"];
}
// Function: 11074.sol-ATxPlatform-setProxy(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
proxies[_symbol] != 0x0

IRs:
REF_65(address) -> proxies[_symbol]
TMP_116(bool) = REF_65 != 0
CONDITION TMP_116"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
ATX_PLATFORM_PROXY_ALREADY_EXISTS

IRs:
RETURN ATX_PLATFORM_PROXY_ALREADY_EXISTS"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proxies[_symbol] = _proxyAddress

IRs:
REF_66(address) -> proxies[_symbol]
REF_66(address) (->proxies) := _proxyAddress(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
OK

IRs:
RETURN OK"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOneOfContractOwners()

IRs:
MODIFIER_CALL, ATxPlatform.onlyOneOfContractOwners()()"];
6->1;
}
// Function: 11074.sol-ATxPlatform-setupEventsHistory(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
eventsHistory = _eventsHistory

IRs:
eventsHistory(address) := _eventsHistory(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
OK

IRs:
RETURN OK"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
errorCode

IRs:
RETURN errorCode"];
}
// Function: 11074.sol-ATxPlatform-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
OK = 1

IRs:
OK(uint256) := 1(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8

IRs:
OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER(uint256) := 8(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ATX_PLATFORM_SCOPE = 80000

IRs:
ATX_PLATFORM_SCOPE(uint256) := 80000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
ATX_PLATFORM_PROXY_ALREADY_EXISTS = ATX_PLATFORM_SCOPE + 1

IRs:
TMP_244(uint256) = ATX_PLATFORM_SCOPE + 1
ATX_PLATFORM_PROXY_ALREADY_EXISTS(uint256) := TMP_244(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF = ATX_PLATFORM_SCOPE + 2

IRs:
TMP_245(uint256) = ATX_PLATFORM_SCOPE + 2
ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF(uint256) := TMP_245(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ATX_PLATFORM_INVALID_VALUE = ATX_PLATFORM_SCOPE + 3

IRs:
TMP_246(uint256) = ATX_PLATFORM_SCOPE + 3
ATX_PLATFORM_INVALID_VALUE(uint256) := TMP_246(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
ATX_PLATFORM_INSUFFICIENT_BALANCE = ATX_PLATFORM_SCOPE + 4

IRs:
TMP_247(uint256) = ATX_PLATFORM_SCOPE + 4
ATX_PLATFORM_INSUFFICIENT_BALANCE(uint256) := TMP_247(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
ATX_PLATFORM_NOT_ENOUGH_ALLOWANCE = ATX_PLATFORM_SCOPE + 5

IRs:
TMP_248(uint256) = ATX_PLATFORM_SCOPE + 5
ATX_PLATFORM_NOT_ENOUGH_ALLOWANCE(uint256) := TMP_248(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
ATX_PLATFORM_ASSET_ALREADY_ISSUED = ATX_PLATFORM_SCOPE + 6

IRs:
TMP_249(uint256) = ATX_PLATFORM_SCOPE + 6
ATX_PLATFORM_ASSET_ALREADY_ISSUED(uint256) := TMP_249(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
ATX_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE = ATX_PLATFORM_SCOPE + 7

IRs:
TMP_250(uint256) = ATX_PLATFORM_SCOPE + 7
ATX_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE(uint256) := TMP_250(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
ATX_PLATFORM_CANNOT_REISSUE_FIXED_ASSET = ATX_PLATFORM_SCOPE + 8

IRs:
TMP_251(uint256) = ATX_PLATFORM_SCOPE + 8
ATX_PLATFORM_CANNOT_REISSUE_FIXED_ASSET(uint256) := TMP_251(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
ATX_PLATFORM_SUPPLY_OVERFLOW = ATX_PLATFORM_SCOPE + 9

IRs:
TMP_252(uint256) = ATX_PLATFORM_SCOPE + 9
ATX_PLATFORM_SUPPLY_OVERFLOW(uint256) := TMP_252(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
ATX_PLATFORM_NOT_ENOUGH_TOKENS = ATX_PLATFORM_SCOPE + 10

IRs:
TMP_253(uint256) = ATX_PLATFORM_SCOPE + 10
ATX_PLATFORM_NOT_ENOUGH_TOKENS(uint256) := TMP_253(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
ATX_PLATFORM_INVALID_NEW_OWNER = ATX_PLATFORM_SCOPE + 11

IRs:
TMP_254(uint256) = ATX_PLATFORM_SCOPE + 11
ATX_PLATFORM_INVALID_NEW_OWNER(uint256) := TMP_254(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ATX_PLATFORM_ALREADY_TRUSTED = ATX_PLATFORM_SCOPE + 12

IRs:
TMP_255(uint256) = ATX_PLATFORM_SCOPE + 12
ATX_PLATFORM_ALREADY_TRUSTED(uint256) := TMP_255(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ATX_PLATFORM_SHOULD_RECOVER_TO_NEW_ADDRESS = ATX_PLATFORM_SCOPE + 13

IRs:
TMP_256(uint256) = ATX_PLATFORM_SCOPE + 13
ATX_PLATFORM_SHOULD_RECOVER_TO_NEW_ADDRESS(uint256) := TMP_256(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ATX_PLATFORM_ASSET_IS_NOT_ISSUED = ATX_PLATFORM_SCOPE + 14

IRs:
TMP_257(uint256) = ATX_PLATFORM_SCOPE + 14
ATX_PLATFORM_ASSET_IS_NOT_ISSUED(uint256) := TMP_257(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
ATX_PLATFORM_INVALID_INVOCATION = ATX_PLATFORM_SCOPE + 15

IRs:
TMP_258(uint256) = ATX_PLATFORM_SCOPE + 15
ATX_PLATFORM_INVALID_INVOCATION(uint256) := TMP_258(uint256)"];
}
// Function: 11074.sol-ATxPlatform-symbolsCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbols.length

IRs:
REF_32 -> LENGTH symbols
RETURN REF_32"];
}
// Function: 11074.sol-ATxPlatform-totalSupply(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
assets[_symbol].totalSupply

IRs:
REF_54(ATxPlatform.Asset) -> assets[_symbol]
REF_55(uint256) -> REF_54.totalSupply
RETURN REF_55"];
}
// Function: 11074.sol-ATxPlatform-trust()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fromId = _createHolderId(msg.sender)

IRs:
TMP_63(uint256) = INTERNAL_CALL, ATxPlatform._createHolderId(address)(msg.sender)
fromId(uint256) := TMP_63(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
msg.sender == contractOwner

IRs:
TMP_64(bool) = msg.sender == contractOwner
CONDITION TMP_64"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
_error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)

IRs:
TMP_65(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF)
RETURN TMP_65"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
isTrusted(msg.sender,contractOwner)

IRs:
TMP_66(bool) = INTERNAL_CALL, ATxPlatform.isTrusted(address,address)(msg.sender,contractOwner)
CONDITION TMP_66"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
_error(ATX_PLATFORM_ALREADY_TRUSTED)

IRs:
TMP_67(uint256) = INTERNAL_CALL, ATxPlatform._error(uint256)(ATX_PLATFORM_ALREADY_TRUSTED)
RETURN TMP_67"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
holders[fromId].trust[contractOwner] = true

IRs:
REF_8(ATxPlatform.Holder) -> holders[fromId]
REF_9(mapping(address => bool)) -> REF_8.trust
REF_10(bool) -> REF_9[contractOwner]
REF_10(bool) (->holders) := True(bool)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
OK

IRs:
RETURN OK"];
}
// Function: 11074.sol-ATxPlatform-withdrawnTokens(address[],address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->11;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < tokens.length

IRs:
REF_4 -> LENGTH tokens
TMP_48(bool) = i < REF_4
CONDITION TMP_48"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = tokens[i]

IRs:
REF_5(address) -> tokens[i]
token(address) := REF_5(address)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = ERC20Interface(token).balanceOf(this)

IRs:
TMP_49 = CONVERT token to ERC20Interface
TMP_50(uint256) = HIGH_LEVEL_CALL, dest:TMP_49(ERC20Interface), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_50(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balance != 0

IRs:
TMP_51(bool) = balance != 0
CONDITION TMP_51"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ERC20Interface(token).transfer(_to,balance)

IRs:
TMP_52 = CONVERT token to ERC20Interface
TMP_53(bool) = HIGH_LEVEL_CALL, dest:TMP_52(ERC20Interface), function:transfer, arguments:['_to', 'balance']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_54(uint256) := i(uint256)
i(uint256) = i + 1"];
10->4;
11[label="Node Type: RETURN 11

EXPRESSION:
OK

IRs:
RETURN OK"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
12->3;
}
// Function: 11074.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 11074.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 11074.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 11074.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 11074.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 11074.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 11074.sol-Emitter-_self()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 11074.sol-Emitter-emitApprove(address,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Approve(_from,_spender,_symbol,_value)

IRs:
Emit Approve(_from,_spender,_symbol,_value)"];
}
// Function: 11074.sol-Emitter-emitError(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Error(_errorCode)

IRs:
Emit Error(_errorCode)"];
}
// Function: 11074.sol-Emitter-emitIssue(bytes32,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Issue(_symbol,_value,_by)

IRs:
Emit Issue(_symbol,_value,_by)"];
}
// Function: 11074.sol-Emitter-emitOwnershipChange(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipChange(_from,_to,_symbol)

IRs:
Emit OwnershipChange(_from,_to,_symbol)"];
}
// Function: 11074.sol-Emitter-emitRecovery(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Recovery(_from,_to,_by)

IRs:
Emit Recovery(_from,_to,_by)"];
}
// Function: 11074.sol-Emitter-emitRevoke(bytes32,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Revoke(_symbol,_value,_by)

IRs:
Emit Revoke(_symbol,_value,_by)"];
}
// Function: 11074.sol-Emitter-emitTransfer(address,address,bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_symbol,_value,_reference)

IRs:
Emit Transfer(_from,_to,_symbol,_value,_reference)"];
}
// Function: 11074.sol-MultiEventsHistoryAdapter-_self()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 11074.sol-Object-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 11074.sol-Object-changeContractOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
_to == 0x0

IRs:
TMP_15(bool) = _to == 0
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pendingContractOwner = _to

IRs:
pendingContractOwner(address) := _to(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
6->1;
}
// Function: 11074.sol-Object-checkOnlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender

IRs:
TMP_26(bool) = contractOwner == msg.sender
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
OK

IRs:
RETURN OK"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER

IRs:
RETURN OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER"];
}
// Function: 11074.sol-Object-claimContractOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pendingContractOwner != msg.sender

IRs:
TMP_17(bool) = pendingContractOwner != msg.sender
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
contractOwner = pendingContractOwner

IRs:
contractOwner(address) := pendingContractOwner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete pendingContractOwner

IRs:
pendingContractOwner = delete pendingContractOwner "];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 11074.sol-Object-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_13(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
2->1;
}
// Function: 11074.sol-Object-onlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender

IRs:
TMP_27(bool) = contractOwner == msg.sender
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-Object-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
OK = 1

IRs:
OK(uint256) := 1(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8

IRs:
OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER(uint256) := 8(uint256)"];
}
// Function: 11074.sol-Object-withdrawnTokens(address[],address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->11;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < tokens.length

IRs:
REF_0 -> LENGTH tokens
TMP_18(bool) = i < REF_0
CONDITION TMP_18"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = tokens[i]

IRs:
REF_1(address) -> tokens[i]
token(address) := REF_1(address)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = ERC20Interface(token).balanceOf(this)

IRs:
TMP_19 = CONVERT token to ERC20Interface
TMP_20(uint256) = HIGH_LEVEL_CALL, dest:TMP_19(ERC20Interface), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_20(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balance != 0

IRs:
TMP_21(bool) = balance != 0
CONDITION TMP_21"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ERC20Interface(token).transfer(_to,balance)

IRs:
TMP_22 = CONVERT token to ERC20Interface
TMP_23(bool) = HIGH_LEVEL_CALL, dest:TMP_22(ERC20Interface), function:transfer, arguments:['_to', 'balance']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_24(uint256) := i(uint256)
i(uint256) = i + 1"];
10->4;
11[label="Node Type: RETURN 11

EXPRESSION:
OK

IRs:
RETURN OK"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
12->3;
}
// Function: 11074.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 11074.sol-Owned-changeContractOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
_to == 0x0

IRs:
TMP_9(bool) = _to == 0
CONDITION TMP_9"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pendingContractOwner = _to

IRs:
pendingContractOwner(address) := _to(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
6->1;
}
// Function: 11074.sol-Owned-claimContractOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pendingContractOwner != msg.sender

IRs:
TMP_11(bool) = pendingContractOwner != msg.sender
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
contractOwner = pendingContractOwner

IRs:
contractOwner(address) := pendingContractOwner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete pendingContractOwner

IRs:
pendingContractOwner = delete pendingContractOwner "];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 11074.sol-Owned-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_7(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
2->1;
}
// Function: 11074.sol-Owned-onlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender

IRs:
TMP_12(bool) = contractOwner == msg.sender
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 11074.sol-ProxyEventsEmitter-emitApprove(address,address,uint256)
digraph{
}
// Function: 11074.sol-ProxyEventsEmitter-emitTransfer(address,address,uint256)
digraph{
}
// Function: 11074.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_38(uint256) = a + b
c(uint256) := TMP_38(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_39(bool) = c >= a
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 11074.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_34(uint256) = a / b
c(uint256) := TMP_34(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 11074.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_28(uint256) = a * b
c(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_29(bool) = a == 0
TMP_30(uint256) = c / a
TMP_31(bool) = TMP_30 == b
TMP_32(bool) = TMP_29 || TMP_31
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 11074.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_35(bool) = b <= a
TMP_36(None) = SOLIDITY_CALL assert(bool)(TMP_35)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_37(uint256) = a - b
RETURN TMP_37"];
}
}
