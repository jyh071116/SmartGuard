digraph G {
// Function: 11772.sol-AbstractSweeper-AbstractSweeper(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = Controller(_controller)

IRs:
TMP_0 = CONVERT _controller to Controller
controller(Controller) := TMP_0(Controller)"];
}
// Function: 11772.sol-AbstractSweeper-canSweep()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != controller.authorizedCaller() && msg.sender != controller.owner()

IRs:
TMP_1(address) = HIGH_LEVEL_CALL, dest:controller(Controller), function:authorizedCaller, arguments:[]  
TMP_2(bool) = msg.sender != TMP_1
TMP_3(address) = HIGH_LEVEL_CALL, dest:controller(Controller), function:owner, arguments:[]  
TMP_4(bool) = msg.sender != TMP_3
TMP_5(bool) = TMP_2 && TMP_4
CONDITION TMP_5"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
controller.halted()

IRs:
TMP_6(bool) = HIGH_LEVEL_CALL, dest:controller(Controller), function:halted, arguments:[]  
CONDITION TMP_6"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 11772.sol-AbstractSweeper-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 11772.sol-AbstractSweeper-sweep(address,uint256)
digraph{
}
// Function: 11772.sol-AbstractSweeperList-sweeperOf(address)
digraph{
}
// Function: 11772.sol-Controller-Controller()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
destination = msg.sender

IRs:
destination(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
authorizedCaller = msg.sender

IRs:
authorizedCaller(address) := msg.sender(address)"];
}
// Function: 11772.sol-Controller-addSweeper(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sweepers[_token] = _sweeper

IRs:
REF_14(address) -> sweepers[_token]
REF_14(address) (->sweepers) := _sweeper(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 11772.sol-Controller-changeAuthorizedCaller(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authorizedCaller = _newCaller

IRs:
authorizedCaller(address) := _newCaller(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 11772.sol-Controller-changeDestination(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
destination = _dest

IRs:
destination(address) := _dest(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 11772.sol-Controller-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 11772.sol-Controller-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Controller.onlyAdmins()()"];
2->1;
}
// Function: 11772.sol-Controller-logSweep(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
LogSweep(from,to,token,amount)

IRs:
Emit LogSweep(from,to,token,amount)"];
}
// Function: 11772.sol-Controller-makeWallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet = address(new UserWallet(this))

IRs:
TMP_33(UserWallet) = new UserWallet(this) 
TMP_34 = CONVERT TMP_33 to address
wallet(address) := TMP_34(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogNewWallet(wallet)

IRs:
Emit LogNewWallet(wallet)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Controller.onlyAdmins()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
wallet

IRs:
RETURN wallet"];
}
// Function: 11772.sol-Controller-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != authorizedCaller && msg.sender != owner

IRs:
TMP_47(bool) = msg.sender != authorizedCaller
TMP_48(bool) = msg.sender != owner
TMP_49(bool) = TMP_47 && TMP_48
CONDITION TMP_49"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 11772.sol-Controller-onlyAuthorizedCaller()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != authorizedCaller

IRs:
TMP_46(bool) = msg.sender != authorizedCaller
CONDITION TMP_46"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 11772.sol-Controller-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_45(bool) = msg.sender != owner
CONDITION TMP_45"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 11772.sol-Controller-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
defaultSweeper = address(new DefaultSweeper(this))

IRs:
TMP_43(DefaultSweeper) = new DefaultSweeper(this) 
TMP_44 = CONVERT TMP_43 to address
defaultSweeper(address) := TMP_44(address)"];
}
// Function: 11772.sol-Controller-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 11772.sol-Controller-sweeperOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sweeper = sweepers[_token]

IRs:
REF_15(address) -> sweepers[_token]
sweeper(address) := REF_15(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
sweeper == 0

IRs:
TMP_40(bool) = sweeper == 0
CONDITION TMP_40"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sweeper = defaultSweeper

IRs:
sweeper(address) := defaultSweeper(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
sweeper

IRs:
RETURN sweeper"];
}
// Function: 11772.sol-DefaultSweeper-AbstractSweeper(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = Controller(_controller)

IRs:
TMP_7 = CONVERT _controller to Controller
controller(Controller) := TMP_7(Controller)"];
}
// Function: 11772.sol-DefaultSweeper-DefaultSweeper(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
AbstractSweeper(controller)

IRs:
INTERNAL_CALL, AbstractSweeper.AbstractSweeper(address)(controller)"];
}
// Function: 11772.sol-DefaultSweeper-canSweep()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != controller.authorizedCaller() && msg.sender != controller.owner()

IRs:
TMP_20(address) = HIGH_LEVEL_CALL, dest:controller(Controller), function:authorizedCaller, arguments:[]  
TMP_21(bool) = msg.sender != TMP_20
TMP_22(address) = HIGH_LEVEL_CALL, dest:controller(Controller), function:owner, arguments:[]  
TMP_23(bool) = msg.sender != TMP_22
TMP_24(bool) = TMP_21 && TMP_23
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
controller.halted()

IRs:
TMP_25(bool) = HIGH_LEVEL_CALL, dest:controller(Controller), function:halted, arguments:[]  
CONDITION TMP_25"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 11772.sol-DefaultSweeper-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 11772.sol-DefaultSweeper-sweep(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
success = false

IRs:
success(bool) := False(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
destination = controller.destination()

IRs:
TMP_9(address) = HIGH_LEVEL_CALL, dest:controller(Controller), function:destination, arguments:[]  
destination(address) := TMP_9(address)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_token != address(0)

IRs:
TMP_10 = CONVERT 0 to address
TMP_11(bool) = _token != TMP_10
CONDITION TMP_11"];
3->4[label="True"];
3->10[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
token = Token(_token)

IRs:
TMP_12 = CONVERT _token to Token
token(Token) := TMP_12(Token)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amount = _amount

IRs:
amount(uint256) := _amount(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
amount > token.balanceOf(this)

IRs:
TMP_13(uint256) = HIGH_LEVEL_CALL, dest:token(Token), function:balanceOf, arguments:['this']  
TMP_14(bool) = amount > TMP_13
CONDITION TMP_14"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
success = token.transfer(destination,amount)

IRs:
TMP_15(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['destination', 'amount']  
success(bool) := TMP_15(bool)"];
9->15;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
amountInWei = _amount

IRs:
amountInWei(uint256) := _amount(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
amountInWei > this.balance

IRs:
REF_6(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_16(bool) = amountInWei > REF_6
CONDITION TMP_16"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
false

IRs:
RETURN False"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
success = destination.send(amountInWei)

IRs:
TMP_17 = SEND dest:destination value:amountInWei
success(bool) := TMP_17(bool)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
success

IRs:
CONDITION success"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
controller.logSweep(this,destination,_token,_amount)

IRs:
HIGH_LEVEL_CALL, dest:controller(Controller), function:logSweep, arguments:['this', 'destination', '_token', '_amount']  "];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
success

IRs:
RETURN success"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
canSweep()

IRs:
MODIFIER_CALL, AbstractSweeper.canSweep()()"];
20->1;
}
// Function: 11772.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
(a)
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 11772.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
(a)
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(val)
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 11772.sol-UserWallet-UserWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sweeperList = AbstractSweeperList(_sweeperlist)

IRs:
TMP_26 = CONVERT _sweeperlist to AbstractSweeperList
sweeperList(AbstractSweeperList) := TMP_26(AbstractSweeperList)"];
}
// Function: 11772.sol-UserWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 11772.sol-UserWallet-sweep(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
(_amount)
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
sweeperList.sweeperOf(_token).delegatecall(msg.data)

IRs:
TMP_27(address) = HIGH_LEVEL_CALL, dest:sweeperList(AbstractSweeperList), function:sweeperOf, arguments:['_token']  
TMP_28(bool) = LOW_LEVEL_CALL, dest:TMP_27, function:delegatecall, arguments:['msg.data']  
RETURN TMP_28"];
}
// Function: 11772.sol-UserWallet-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
(_from)
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(_value)
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(_data)
"];
}
}
