digraph G {
// Function: 12692.sol-Authorized-Authorized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authorized[msg.sender][PRESIDENT] = true

IRs:
REF_0(mapping(bytes32 => bool)) -> authorized[msg.sender]
REF_1(bool) -> REF_0[PRESIDENT]
REF_1(bool) (->authorized) := True(bool)"];
}
// Function: 12692.sol-Authorized-ifAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(authorized[_address][_authorization] || authorized[_address][PRESIDENT],Not authorized to access!)

IRs:
REF_12(mapping(bytes32 => bool)) -> authorized[_address]
REF_13(bool) -> REF_12[_authorization]
REF_14(mapping(bytes32 => bool)) -> authorized[_address]
REF_15(bool) -> REF_14[PRESIDENT]
TMP_15(bool) = REF_13 || REF_15
TMP_16(None) = SOLIDITY_CALL require(bool,string)(TMP_15,Not authorized to access!)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 12692.sol-Authorized-isAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
authorized[_address][_authorization]

IRs:
REF_2(mapping(bytes32 => bool)) -> authorized[_address]
REF_3(bool) -> REF_2[_authorization]
RETURN REF_3"];
}
// Function: 12692.sol-Authorized-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRESIDENT = keccak256()(Republics President!)

IRs:
TMP_11(bytes32) = SOLIDITY_CALL keccak256()(Republics President!)
PRESIDENT(bytes32) := TMP_11(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STAFF_MEMBER = keccak256()(Staff Member.)

IRs:
TMP_12(bytes32) = SOLIDITY_CALL keccak256()(Staff Member.)
STAFF_MEMBER(bytes32) := TMP_12(bytes32)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
AIR_DROP = keccak256()(Airdrop Permission.)

IRs:
TMP_13(bytes32) = SOLIDITY_CALL keccak256()(Airdrop Permission.)
AIR_DROP(bytes32) := TMP_13(bytes32)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INTERNAL = keccak256()(Internal Authorization.)

IRs:
TMP_14(bytes32) = SOLIDITY_CALL keccak256()(Internal Authorization.)
INTERNAL(bytes32) := TMP_14(bytes32)"];
}
// Function: 12692.sol-Authorized-toggleAuthorization(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_address != msg.sender,Cannot change own permissions.)

IRs:
TMP_4(bool) = _address != msg.sender
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Cannot change own permissions.)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_authorization == PRESIDENT && ! authorized[_address][PRESIDENT]

IRs:
TMP_6(bool) = _authorization == PRESIDENT
REF_4(mapping(bytes32 => bool)) -> authorized[_address]
REF_5(bool) -> REF_4[PRESIDENT]
TMP_7 = UnaryType.BANG REF_5 
TMP_8(bool) = TMP_6 && TMP_7
CONDITION TMP_8"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
authorized[_address][STAFF_MEMBER] = false

IRs:
REF_6(mapping(bytes32 => bool)) -> authorized[_address]
REF_7(bool) -> REF_6[STAFF_MEMBER]
REF_7(bool) (->authorized) := False(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
authorized[_address][_authorization] = ! authorized[_address][_authorization]

IRs:
REF_8(mapping(bytes32 => bool)) -> authorized[_address]
REF_9(bool) -> REF_8[_authorization]
REF_10(mapping(bytes32 => bool)) -> authorized[_address]
REF_11(bool) -> REF_10[_authorization]
TMP_9 = UnaryType.BANG REF_11 
REF_9(bool) (->authorized) := TMP_9(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ifAuthorized(msg.sender,PRESIDENT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,PRESIDENT)"];
6->1;
}
// Function: 12692.sol-AuthorizedList-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRESIDENT = keccak256()(Republics President!)

IRs:
TMP_0(bytes32) = SOLIDITY_CALL keccak256()(Republics President!)
PRESIDENT(bytes32) := TMP_0(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STAFF_MEMBER = keccak256()(Staff Member.)

IRs:
TMP_1(bytes32) = SOLIDITY_CALL keccak256()(Staff Member.)
STAFF_MEMBER(bytes32) := TMP_1(bytes32)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
AIR_DROP = keccak256()(Airdrop Permission.)

IRs:
TMP_2(bytes32) = SOLIDITY_CALL keccak256()(Airdrop Permission.)
AIR_DROP(bytes32) := TMP_2(bytes32)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INTERNAL = keccak256()(Internal Authorization.)

IRs:
TMP_3(bytes32) = SOLIDITY_CALL keccak256()(Internal Authorization.)
INTERNAL(bytes32) := TMP_3(bytes32)"];
}
// Function: 12692.sol-main-Authorized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authorized[msg.sender][PRESIDENT] = true

IRs:
REF_16(mapping(bytes32 => bool)) -> authorized[msg.sender]
REF_17(bool) -> REF_16[PRESIDENT]
REF_17(bool) (->authorized) := True(bool)"];
}
// Function: 12692.sol-main-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_target = references[bytes32(0)]

IRs:
TMP_45 = CONVERT 0 to bytes32
REF_36(address) -> references[TMP_45]
_target(address) := REF_36(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 12692.sol-main-getReference(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
references[_key]

IRs:
REF_35(address) -> references[_key]
RETURN REF_35"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ifAuthorized(msg.sender,PRESIDENT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,PRESIDENT)"];
2->1;
}
// Function: 12692.sol-main-ifAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(authorized[_address][_authorization] || authorized[_address][PRESIDENT],Not authorized to access!)

IRs:
REF_37(mapping(bytes32 => bool)) -> authorized[_address]
REF_38(bool) -> REF_37[_authorization]
REF_39(mapping(bytes32 => bool)) -> authorized[_address]
REF_40(bool) -> REF_39[PRESIDENT]
TMP_50(bool) = REF_38 || REF_40
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,Not authorized to access!)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 12692.sol-main-isAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
authorized[_address][_authorization]

IRs:
REF_18(mapping(bytes32 => bool)) -> authorized[_address]
REF_19(bool) -> REF_18[_authorization]
RETURN REF_19"];
}
// Function: 12692.sol-main-main(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_logic != address(0),main: Unexpectedly logic address is 0x0.)

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _logic != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,main: Unexpectedly logic address is 0x0.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_storage != address(0),main: Unexpectedly storage address is 0x0.)

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = _storage != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,main: Unexpectedly storage address is 0x0.)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
references[bytes32(0)] = _logic

IRs:
TMP_30 = CONVERT 0 to bytes32
REF_28(address) -> references[TMP_30]
REF_28(address) (->references) := _logic(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
references[bytes32(1)] = _storage

IRs:
TMP_31 = CONVERT 1 to bytes32
REF_29(address) -> references[TMP_31]
REF_29(address) (->references) := _storage(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Authorized()

IRs:
INTERNAL_CALL, Authorized.Authorized()()"];
5->1;
}
// Function: 12692.sol-main-setReference(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_address != address(0),setReference: Unexpectedly _address is 0x0)

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = _address != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,setReference: Unexpectedly _address is 0x0)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_key == bytes32(0)

IRs:
TMP_36 = CONVERT 0 to bytes32
TMP_37(bool) = _key == TMP_36
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogicUpgrade(references[bytes32(0)],_address)

IRs:
TMP_38 = CONVERT 0 to bytes32
REF_30(address) -> references[TMP_38]
Emit LogicUpgrade(REF_30,_address)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
StorageUpgrade(references[_key],_address)

IRs:
REF_31(address) -> references[_key]
Emit StorageUpgrade(REF_31,_address)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
references[_key] != address(0)

IRs:
REF_32(address) -> references[_key]
TMP_41 = CONVERT 0 to address
TMP_42(bool) = REF_32 != TMP_41
CONDITION TMP_42"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete references[_key]

IRs:
REF_33(address) -> references[_key]
references = delete REF_33 "];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
references[_key] = _address

IRs:
REF_34(address) -> references[_key]
REF_34(address) (->references) := _address(address)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ifAuthorized(msg.sender,PRESIDENT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,PRESIDENT)"];
10->1;
}
// Function: 12692.sol-main-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRESIDENT = keccak256()(Republics President!)

IRs:
TMP_46(bytes32) = SOLIDITY_CALL keccak256()(Republics President!)
PRESIDENT(bytes32) := TMP_46(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STAFF_MEMBER = keccak256()(Staff Member.)

IRs:
TMP_47(bytes32) = SOLIDITY_CALL keccak256()(Staff Member.)
STAFF_MEMBER(bytes32) := TMP_47(bytes32)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
AIR_DROP = keccak256()(Airdrop Permission.)

IRs:
TMP_48(bytes32) = SOLIDITY_CALL keccak256()(Airdrop Permission.)
AIR_DROP(bytes32) := TMP_48(bytes32)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INTERNAL = keccak256()(Internal Authorization.)

IRs:
TMP_49(bytes32) = SOLIDITY_CALL keccak256()(Internal Authorization.)
INTERNAL(bytes32) := TMP_49(bytes32)"];
}
// Function: 12692.sol-main-toggleAuthorization(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_address != msg.sender,Cannot change own permissions.)

IRs:
TMP_17(bool) = _address != msg.sender
TMP_18(None) = SOLIDITY_CALL require(bool,string)(TMP_17,Cannot change own permissions.)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_authorization == PRESIDENT && ! authorized[_address][PRESIDENT]

IRs:
TMP_19(bool) = _authorization == PRESIDENT
REF_20(mapping(bytes32 => bool)) -> authorized[_address]
REF_21(bool) -> REF_20[PRESIDENT]
TMP_20 = UnaryType.BANG REF_21 
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
authorized[_address][STAFF_MEMBER] = false

IRs:
REF_22(mapping(bytes32 => bool)) -> authorized[_address]
REF_23(bool) -> REF_22[STAFF_MEMBER]
REF_23(bool) (->authorized) := False(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
authorized[_address][_authorization] = ! authorized[_address][_authorization]

IRs:
REF_24(mapping(bytes32 => bool)) -> authorized[_address]
REF_25(bool) -> REF_24[_authorization]
REF_26(mapping(bytes32 => bool)) -> authorized[_address]
REF_27(bool) -> REF_26[_authorization]
TMP_22 = UnaryType.BANG REF_27 
REF_25(bool) (->authorized) := TMP_22(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ifAuthorized(msg.sender,PRESIDENT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,PRESIDENT)"];
6->1;
}
}
