digraph G {
// Function: 2004.sol-CentralizedBugOracle-_setOutcome(int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isSet = true

IRs:
isSet(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
outcome = _outcome

IRs:
outcome(int256) := _outcome(int256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OutcomeAssignment(_outcome)

IRs:
Emit OutcomeAssignment(_outcome)"];
}
// Function: 2004.sol-CentralizedBugOracle-getOutcome()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
outcome

IRs:
RETURN outcome"];
}
// Function: 2004.sol-CentralizedBugOracle-isOutcomeSet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
isSet

IRs:
RETURN isSet"];
}
// Function: 2004.sol-CentralizedBugOracle-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_16(bool) = msg.sender == owner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2004.sol-CentralizedBugOracle-setOutcome(int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isSet)

IRs:
TMP_11 = UnaryType.BANG isSet 
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setOutcome(_outcome)

IRs:
INTERNAL_CALL, CentralizedBugOracle._setOutcome(int256)(_outcome)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, CentralizedBugOracleData.isOwner()()"];
3->1;
}
// Function: 2004.sol-CentralizedBugOracleData-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_2(bool) = msg.sender == owner
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2004.sol-CentralizedBugOracleProxy-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_masterCopy != 0)

IRs:
TMP_4(bool) = _masterCopy != 0
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
masterCopy = _masterCopy

IRs:
masterCopy(address) := _masterCopy(address)"];
}
// Function: 2004.sol-CentralizedBugOracleProxy-constructor(address,address,bytes,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_ipfsHash.length == 46)

IRs:
REF_0 -> LENGTH _ipfsHash
TMP_6(bool) = REF_0 == 46
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ipfsHash = _ipfsHash

IRs:
ipfsHash(bytes) := _ipfsHash(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
maker = _maker

IRs:
maker(address) := _maker(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
taker = _taker

IRs:
taker(address) := _taker(address)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Proxy(proxied)

IRs:
INTERNAL_CALL, Proxy.constructor(address)(proxied)"];
6->1;
}
// Function: 2004.sol-CentralizedBugOracleProxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_masterCopy = masterCopy

IRs:
_masterCopy(address) := masterCopy(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 2004.sol-CentralizedBugOracleProxy-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2004.sol-Oracle-getOutcome()
digraph{
}
// Function: 2004.sol-Oracle-isOutcomeSet()
digraph{
}
// Function: 2004.sol-Proxy-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_masterCopy != 0)

IRs:
TMP_0(bool) = _masterCopy != 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
masterCopy = _masterCopy

IRs:
masterCopy(address) := _masterCopy(address)"];
}
// Function: 2004.sol-Proxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_masterCopy = masterCopy

IRs:
_masterCopy(address) := masterCopy(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
}
