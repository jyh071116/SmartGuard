digraph G {
// Function: 20869.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_74(uint256) -> balances[_owner]
RETURN REF_74"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 20869.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 20869.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_233 = CONVERT 0 to address
TMP_234(bool) = _to != TMP_233
TMP_235(None) = SOLIDITY_CALL require(bool)(TMP_234)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_67(uint256) -> balances[msg.sender]
TMP_236(bool) = _value <= REF_67
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_68(uint256) -> balances[msg.sender]
REF_69(uint256) -> balances[msg.sender]
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_69', '_value'] 
REF_68(uint256) (->balances) := TMP_238(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_71(uint256) -> balances[_to]
REF_72(uint256) -> balances[_to]
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_72', '_value'] 
REF_71(uint256) (->balances) := TMP_239(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-Crowdsale-Crowdsale(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != 0x0)

IRs:
TMP_110(bool) = _token != 0
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_multisigWallet != 0x0)

IRs:
TMP_112(bool) = _multisigWallet != 0
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token = CrowdsaleToken(_token)

IRs:
TMP_114 = CONVERT _token to CrowdsaleToken
token(CrowdsaleToken) := TMP_114(CrowdsaleToken)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
multisigWallet = _multisigWallet

IRs:
multisigWallet(address) := _multisigWallet(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whitelist_enable = _whitelist_enable

IRs:
whitelist_enable(bool) := _whitelist_enable(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
CrowdsaleLimit(_start,_end,_token_max,_presale_token_in_wei,_crowdsale_token_in_wei,_presale_eth_inwei_fund_max,_crowdsale_eth_inwei_fund_min,_crowdsale_eth_inwei_fund_max,_crowdsale_eth_inwei_accepted_min,_crowdsale_gasprice_inwei_max,_team_token_percentage_max)

IRs:
INTERNAL_CALL, CrowdsaleLimit.CrowdsaleLimit(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)(_start,_end,_token_max,_presale_token_in_wei,_crowdsale_token_in_wei,_presale_eth_inwei_fund_max,_crowdsale_eth_inwei_fund_min,_crowdsale_eth_inwei_fund_max,_crowdsale_eth_inwei_accepted_min,_crowdsale_gasprice_inwei_max,_team_token_percentage_max)"];
6->1;
}
// Function: 20869.sol-Crowdsale-CrowdsaleLimit(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_start != 0)

IRs:
TMP_73(bool) = _start != 0
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_end != 0)

IRs:
TMP_75(bool) = _end != 0
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_start < _end)

IRs:
TMP_77(bool) = _start < _end
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(_presale_token_in_wei == 0) || (_crowdsale_token_in_wei == 0) || (_crowdsale_eth_inwei_fund_min == 0) || (_crowdsale_eth_inwei_fund_max == 0) || (_crowdsale_eth_inwei_accepted_min == 0) || (_team_token_percentage_max >= 100)

IRs:
TMP_79(bool) = _presale_token_in_wei == 0
TMP_80(bool) = _crowdsale_token_in_wei == 0
TMP_81(bool) = TMP_79 || TMP_80
TMP_82(bool) = _crowdsale_eth_inwei_fund_min == 0
TMP_83(bool) = TMP_81 || TMP_82
TMP_84(bool) = _crowdsale_eth_inwei_fund_max == 0
TMP_85(bool) = TMP_83 || TMP_84
TMP_86(bool) = _crowdsale_eth_inwei_accepted_min == 0
TMP_87(bool) = TMP_85 || TMP_86
TMP_88(bool) = _team_token_percentage_max >= 100
TMP_89(bool) = TMP_87 || TMP_88
CONDITION TMP_89"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_90(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startsAt = _start

IRs:
startsAt(uint256) := _start(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
endsAt = _end

IRs:
endsAt(uint256) := _end(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
TOKEN_MAX = _token_max

IRs:
TOKEN_MAX(uint256) := _token_max(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
PRESALE_TOKEN_IN_WEI = _presale_token_in_wei

IRs:
PRESALE_TOKEN_IN_WEI(uint256) := _presale_token_in_wei(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
CROWDSALE_TOKEN_IN_WEI = _crowdsale_token_in_wei

IRs:
CROWDSALE_TOKEN_IN_WEI(uint256) := _crowdsale_token_in_wei(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
PRESALE_ETH_IN_WEI_FUND_MAX = _presale_eth_inwei_fund_max

IRs:
PRESALE_ETH_IN_WEI_FUND_MAX(uint256) := _presale_eth_inwei_fund_max(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MIN = _crowdsale_eth_inwei_fund_min

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MIN(uint256) := _crowdsale_eth_inwei_fund_min(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MAX = _crowdsale_eth_inwei_fund_max

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MAX(uint256) := _crowdsale_eth_inwei_fund_max(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN = _crowdsale_eth_inwei_accepted_min

IRs:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := _crowdsale_eth_inwei_accepted_min(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
CROWDSALE_GASPRICE_IN_WEI_MAX = _crowdsale_gasprice_inwei_max

IRs:
CROWDSALE_GASPRICE_IN_WEI_MAX(uint256) := _crowdsale_gasprice_inwei_max(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
team_token_percentage_max = _team_token_percentage_max

IRs:
team_token_percentage_max(uint256) := _team_token_percentage_max(uint256)"];
}
// Function: 20869.sol-Crowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20869.sol-Crowdsale-addTeamAddress(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTeamAddressInternal(addr,release_time,token_percentage)

IRs:
INTERNAL_CALL, CrowdsaleLimit.addTeamAddressInternal(address,uint256,uint256)(addr,release_time,token_percentage)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.addLockAddress(addr,release_time)

IRs:
HIGH_LEVEL_CALL, dest:token(CrowdsaleToken), function:addLockAddress, arguments:['addr', 'release_time']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
inState(State.PreFunding)

IRs:
REF_30(Crowdsale.State) -> State.PreFunding
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_30)"];
4->1;
}
// Function: 20869.sol-Crowdsale-addTeamAddressInternal(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > team_token_percentage_max

IRs:
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_99(bool) = TMP_98 > team_token_percentage_max
CONDITION TMP_99"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_100(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > 100

IRs:
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_102(bool) = TMP_101 > 100
CONDITION TMP_102"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_103(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
team_addresses_token_percentage[addr] != 0

IRs:
REF_17(uint256) -> team_addresses_token_percentage[addr]
TMP_104(bool) = REF_17 != 0
CONDITION TMP_104"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_105(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
team_addresses_token_percentage[addr] = token_percentage

IRs:
REF_18(uint256) -> team_addresses_token_percentage[addr]
REF_18(uint256) (->team_addresses_token_percentage) := token_percentage(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
team_addresses_idx[team_address_count] = addr

IRs:
REF_19(address) -> team_addresses_idx[team_address_count]
REF_19(address) (->team_addresses_idx) := addr(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
team_address_count ++

IRs:
TMP_106(uint256) := team_address_count(uint256)
team_address_count(uint256) = team_address_count + 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
team_token_percentage_total = team_token_percentage_total.add(token_percentage)

IRs:
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
team_token_percentage_total(uint256) := TMP_107(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
AddTeamAddress(addr,release_time,token_percentage)

IRs:
Emit AddTeamAddress(addr,release_time,token_percentage)"];
}
// Function: 20869.sol-Crowdsale-allowCrowdsaleAmountLimit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_219(bool) = msg.value == 0
CONDITION TMP_219"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_220(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.value < CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN

IRs:
TMP_221(bool) = msg.value < CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN
CONDITION TMP_221"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_222(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
(crowdsale_eth_fund.add(msg.value)) > CROWDSALE_ETH_IN_WEI_FUND_MAX

IRs:
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_fund', 'msg.value'] 
TMP_224(bool) = TMP_223 > CROWDSALE_ETH_IN_WEI_FUND_MAX
CONDITION TMP_224"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_225(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
(CROWDSALE_GASPRICE_IN_WEI_MAX > 0) && (tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX)

IRs:
TMP_226(bool) = CROWDSALE_GASPRICE_IN_WEI_MAX > 0
TMP_227(bool) = tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX
TMP_228(bool) = TMP_226 && TMP_227
CONDITION TMP_228"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_229(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: _ 13
"];
}
// Function: 20869.sol-Crowdsale-buyTokensCrowdsale(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenAmount = 0

IRs:
tokenAmount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
getState() == State.PreFunding

IRs:
TMP_153(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
REF_38(Crowdsale.State) -> State.PreFunding
TMP_154(bool) = TMP_153 == REF_38
CONDITION TMP_154"];
3->4[label="True"];
3->14[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
whitelist_enable == true

IRs:
TMP_155(bool) = whitelist_enable == True
CONDITION TMP_155"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! presaleWhitelist[receiver]

IRs:
REF_39(bool) -> presaleWhitelist[receiver]
TMP_156 = UnaryType.BANG REF_39 
CONDITION TMP_156"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_157(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
(PRESALE_ETH_IN_WEI_FUND_MAX > 0) && ((presale_eth_fund.add(weiAmount)) > PRESALE_ETH_IN_WEI_FUND_MAX)

IRs:
TMP_158(bool) = PRESALE_ETH_IN_WEI_FUND_MAX > 0
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['presale_eth_fund', 'weiAmount'] 
TMP_160(bool) = TMP_159 > PRESALE_ETH_IN_WEI_FUND_MAX
TMP_161(bool) = TMP_158 && TMP_160
CONDITION TMP_161"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert()()

IRs:
TMP_162(None) = SOLIDITY_CALL revert()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokenAmount = calculateTokenPresale(weiAmount,token.decimals())

IRs:
TMP_163(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleToken), function:decimals, arguments:[]  
TMP_164(uint256) = INTERNAL_CALL, CrowdsaleLimit.calculateTokenPresale(uint256,uint256)(weiAmount,TMP_163)
tokenAmount(uint256) := TMP_164(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
presale_eth_fund = presale_eth_fund.add(weiAmount)

IRs:
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['presale_eth_fund', 'weiAmount'] 
presale_eth_fund(uint256) := TMP_165(uint256)"];
13->18;
14[label="Node Type: IF 14

EXPRESSION:
(getState() == State.Funding) || (getState() == State.Success)

IRs:
TMP_166(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
REF_43(Crowdsale.State) -> State.Funding
TMP_167(bool) = TMP_166 == REF_43
TMP_168(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
REF_44(Crowdsale.State) -> State.Success
TMP_169(bool) = TMP_168 == REF_44
TMP_170(bool) = TMP_167 || TMP_169
CONDITION TMP_170"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokenAmount = calculateTokenCrowsale(weiAmount,token.decimals())

IRs:
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleToken), function:decimals, arguments:[]  
TMP_172(uint256) = INTERNAL_CALL, CrowdsaleLimit.calculateTokenCrowsale(uint256,uint256)(weiAmount,TMP_171)
tokenAmount(uint256) := TMP_172(uint256)"];
15->17;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
revert()()

IRs:
TMP_173(None) = SOLIDITY_CALL revert()()"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
tokenAmount == 0

IRs:
TMP_174(bool) = tokenAmount == 0
CONDITION TMP_174"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
revert()()

IRs:
TMP_175(None) = SOLIDITY_CALL revert()()"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
investedAmountOf[receiver] == 0

IRs:
REF_46(uint256) -> investedAmountOf[receiver]
TMP_176(bool) = REF_46 == 0
CONDITION TMP_176"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
investorCount ++

IRs:
TMP_177(uint256) := investorCount(uint256)
investorCount(uint256) = investorCount + 1"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount)

IRs:
REF_47(uint256) -> investedAmountOf[receiver]
REF_48(uint256) -> investedAmountOf[receiver]
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_48', 'weiAmount'] 
REF_47(uint256) (->investedAmountOf) := TMP_178(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount)

IRs:
REF_50(uint256) -> tokenAmountOf[receiver]
REF_51(uint256) -> tokenAmountOf[receiver]
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_51', 'tokenAmount'] 
REF_50(uint256) (->tokenAmountOf) := TMP_179(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
crowdsale_eth_fund = crowdsale_eth_fund.add(weiAmount)

IRs:
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_fund', 'weiAmount'] 
crowdsale_eth_fund(uint256) := TMP_180(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
tokensSold = tokensSold.add(tokenAmount)

IRs:
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensSold', 'tokenAmount'] 
tokensSold(uint256) := TMP_181(uint256)"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
(TOKEN_MAX > 0) && (tokensSold > TOKEN_MAX)

IRs:
TMP_182(bool) = TOKEN_MAX > 0
TMP_183(bool) = tokensSold > TOKEN_MAX
TMP_184(bool) = TMP_182 && TMP_183
CONDITION TMP_184"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
revert()()

IRs:
TMP_185(None) = SOLIDITY_CALL revert()()"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
token.mint(receiver,tokenAmount)

IRs:
TMP_186(bool) = HIGH_LEVEL_CALL, dest:token(CrowdsaleToken), function:mint, arguments:['receiver', 'tokenAmount']  "];
32->33;
33[label="Node Type: IF 33

EXPRESSION:
! multisigWallet.send(weiAmount)

IRs:
TMP_187 = SEND dest:multisigWallet value:weiAmount
TMP_188 = UnaryType.BANG TMP_187 
CONDITION TMP_188"];
33->34[label="True"];
33->35[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
revert()()

IRs:
TMP_189(None) = SOLIDITY_CALL revert()()"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
Invested(receiver,weiAmount,tokenAmount)

IRs:
Emit Invested(receiver,weiAmount,tokenAmount)"];
}
// Function: 20869.sol-Crowdsale-calculateTokenCrowsale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_94(uint256) = 10 ** decimals
multiplier(uint256) := TMP_94(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(CROWDSALE_TOKEN_IN_WEI)

IRs:
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_95', 'CROWDSALE_TOKEN_IN_WEI'] 
RETURN TMP_96"];
}
// Function: 20869.sol-Crowdsale-calculateTokenPresale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_91(uint256) = 10 ** decimals
multiplier(uint256) := TMP_91(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(PRESALE_TOKEN_IN_WEI)

IRs:
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_92', 'PRESALE_TOKEN_IN_WEI'] 
RETURN TMP_93"];
}
// Function: 20869.sol-Crowdsale-createTeamTokenByPercentage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
total = tokensSold

IRs:
total(uint256) := tokensSold(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokens = total.mul(team_token_percentage_total).div(100 - team_token_percentage_total)

IRs:
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['total', 'team_token_percentage_total'] 
TMP_138(uint256) = 100 - team_token_percentage_total
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_137', 'TMP_138'] 
tokens(uint256) := TMP_139(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < team_address_count

IRs:
TMP_140(bool) = i < team_address_count
CONDITION TMP_140"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
addr = team_addresses_idx[i]

IRs:
REF_33(address) -> team_addresses_idx[i]
addr(address) := REF_33(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
addr == 0x0

IRs:
TMP_141(bool) = addr == 0
CONDITION TMP_141"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: CONTINUE 9
"];
9->14;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ntoken = tokens.mul(team_addresses_token_percentage[addr]).div(team_token_percentage_total)

IRs:
REF_35(uint256) -> team_addresses_token_percentage[addr]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokens', 'REF_35'] 
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_142', 'team_token_percentage_total'] 
ntoken(uint256) := TMP_143(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token.mint(addr,ntoken)

IRs:
TMP_144(bool) = HIGH_LEVEL_CALL, dest:token(CrowdsaleToken), function:mint, arguments:['addr', 'ntoken']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
createTeamTokenEvent(addr,ntoken)

IRs:
Emit createTeamTokenEvent(addr,ntoken)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_146(uint256) := i(uint256)
i(uint256) = i + 1"];
14->6;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 20869.sol-Crowdsale-doFinalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_207(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
createTeamTokenByPercentage()

IRs:
INTERNAL_CALL, Crowdsale.createTeamTokenByPercentage()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token.finishMinting()

IRs:
TMP_209(bool) = HIGH_LEVEL_CALL, dest:token(CrowdsaleToken), function:finishMinting, arguments:[]  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
inState(State.Success)

IRs:
REF_65(Crowdsale.State) -> State.Success
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_65)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
10->1;
}
// Function: 20869.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != 0x0)

IRs:
TMP_148(bool) = msg.sender != 0
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buyTokensCrowdsale(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokensCrowdsale(address)(msg.sender)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowCrowdsaleAmountLimit()

IRs:
MODIFIER_CALL, CrowdsaleLimit.allowCrowdsaleAmountLimit()()"];
4->1;
}
// Function: 20869.sol-Crowdsale-getState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
State.Finalized

IRs:
REF_21(Crowdsale.State) -> State.Finalized
RETURN REF_21"];
3[label="Node Type: IF 3

EXPRESSION:
now < startsAt

IRs:
TMP_116(bool) = now < startsAt
CONDITION TMP_116"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
State.PreFunding

IRs:
REF_22(Crowdsale.State) -> State.PreFunding
RETURN REF_22"];
5[label="Node Type: IF 5

EXPRESSION:
now <= endsAt && ! isMinimumGoalReached()

IRs:
TMP_117(bool) = now <= endsAt
TMP_118(bool) = INTERNAL_CALL, CrowdsaleLimit.isMinimumGoalReached()()
TMP_119 = UnaryType.BANG TMP_118 
TMP_120(bool) = TMP_117 && TMP_119
CONDITION TMP_120"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
State.Funding

IRs:
REF_23(Crowdsale.State) -> State.Funding
RETURN REF_23"];
7[label="Node Type: IF 7

EXPRESSION:
isMinimumGoalReached()

IRs:
TMP_121(bool) = INTERNAL_CALL, CrowdsaleLimit.isMinimumGoalReached()()
CONDITION TMP_121"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
State.Success

IRs:
REF_24(Crowdsale.State) -> State.Success
RETURN REF_24"];
9[label="Node Type: IF 9

EXPRESSION:
! isMinimumGoalReached() && crowdsale_eth_fund > 0 && loadedRefund >= crowdsale_eth_fund

IRs:
TMP_122(bool) = INTERNAL_CALL, CrowdsaleLimit.isMinimumGoalReached()()
TMP_123 = UnaryType.BANG TMP_122 
TMP_124(bool) = crowdsale_eth_fund > 0
TMP_125(bool) = TMP_123 && TMP_124
TMP_126(bool) = loadedRefund >= crowdsale_eth_fund
TMP_127(bool) = TMP_125 && TMP_126
CONDITION TMP_127"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
State.Refunding

IRs:
REF_25(Crowdsale.State) -> State.Refunding
RETURN REF_25"];
11[label="Node Type: RETURN 11

EXPRESSION:
State.Failure

IRs:
REF_26(Crowdsale.State) -> State.Failure
RETURN REF_26"];
}
// Function: 20869.sol-Crowdsale-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 20869.sol-Crowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endsAt

IRs:
TMP_109(bool) = now > endsAt
RETURN TMP_109"];
}
// Function: 20869.sol-Crowdsale-inState(Crowdsale.State)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getState() != state

IRs:
TMP_230(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
TMP_231(bool) = TMP_230 != state
CONDITION TMP_231"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_232(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-Crowdsale-isMinimumGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN

IRs:
TMP_97(bool) = crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN
RETURN TMP_97"];
}
// Function: 20869.sol-Crowdsale-loadRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_191(bool) = msg.value == 0
CONDITION TMP_191"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_192(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loadedRefund = loadedRefund.add(msg.value)

IRs:
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['loadedRefund', 'msg.value'] 
loadedRefund(uint256) := TMP_193(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
inState(State.Failure)

IRs:
REF_58(Crowdsale.State) -> State.Failure
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_58)"];
5->1;
}
// Function: 20869.sol-Crowdsale-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_215 = UnaryType.BANG halted 
CONDITION TMP_215"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_216(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_217(bool) = msg.sender == owner
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-Crowdsale-refund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiValue = investedAmountOf[msg.sender]

IRs:
REF_59(uint256) -> investedAmountOf[msg.sender]
weiValue(uint256) := REF_59(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
weiValue == 0

IRs:
TMP_195(bool) = weiValue == 0
CONDITION TMP_195"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_196(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
investedAmountOf[msg.sender] = 0

IRs:
REF_60(uint256) -> investedAmountOf[msg.sender]
REF_60(uint256) (->investedAmountOf) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
crowdsale_eth_refund = crowdsale_eth_refund.add(weiValue)

IRs:
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_refund', 'weiValue'] 
crowdsale_eth_refund(uint256) := TMP_197(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Refund(msg.sender,weiValue)

IRs:
Emit Refund(msg.sender,weiValue)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! msg.sender.send(weiValue)

IRs:
TMP_199 = SEND dest:msg.sender value:weiValue
TMP_200 = UnaryType.BANG TMP_199 
CONDITION TMP_200"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert()()

IRs:
TMP_201(None) = SOLIDITY_CALL revert()()"];
9->10;
10[label="Node Type: END_IF 10
"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
inState(State.Refunding)

IRs:
REF_63(Crowdsale.State) -> State.Refunding
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_63)"];
11->1;
}
// Function: 20869.sol-Crowdsale-setEndsAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
now > time

IRs:
TMP_203(bool) = now > time
CONDITION TMP_203"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_204(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
endsAt = time

IRs:
endsAt(uint256) := time(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
EndsAtChanged(endsAt)

IRs:
Emit EndsAtChanged(endsAt)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 20869.sol-Crowdsale-setPresaleWhitelist(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(whitelist_enable == true)

IRs:
TMP_128(bool) = whitelist_enable == True
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
presaleWhitelist[addr] = status

IRs:
REF_27(bool) -> presaleWhitelist[addr]
REF_27(bool) (->presaleWhitelist) := status(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Whitelisted(addr,status)

IRs:
Emit Whitelisted(addr,status)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
inState(State.PreFunding)

IRs:
REF_28(Crowdsale.State) -> State.PreFunding
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_28)"];
5->1;
}
// Function: 20869.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRESALE_TOKEN_IN_WEI = 9000000000000000

IRs:
PRESALE_TOKEN_IN_WEI(uint256) := 9000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
presale_eth_fund = 0

IRs:
presale_eth_fund(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
CROWDSALE_TOKEN_IN_WEI = 10000000000000000

IRs:
CROWDSALE_TOKEN_IN_WEI(uint256) := 10000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PRESALE_ETH_IN_WEI_FUND_MAX = 0

IRs:
PRESALE_ETH_IN_WEI_FUND_MAX(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MIN = 100000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MIN(uint256) := 100000000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MAX = 1000000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MAX(uint256) := 1000000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN = 100000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := 100000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CROWDSALE_GASPRICE_IN_WEI_MAX = 0

IRs:
CROWDSALE_GASPRICE_IN_WEI_MAX(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
crowdsale_eth_fund = 0

IRs:
crowdsale_eth_fund(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
crowdsale_eth_refund = 0

IRs:
crowdsale_eth_refund(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
team_address_count = 0

IRs:
team_address_count(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
team_token_percentage_total = 0

IRs:
team_token_percentage_total(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
team_token_percentage_max = 0

IRs:
team_token_percentage_max(uint256) := 0(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
whitelist_enable = true

IRs:
whitelist_enable(bool) := True(bool)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
tokensSold = 0

IRs:
tokensSold(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
investorCount = 0

IRs:
investorCount(uint256) := 0(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
loadedRefund = 0

IRs:
loadedRefund(uint256) := 0(uint256)"];
}
// Function: 20869.sol-Crowdsale-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_214(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-Crowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = newOwner != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20869.sol-Crowdsale-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 20869.sol-CrowdsaleLimit-CrowdsaleLimit(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_start != 0)

IRs:
TMP_0(bool) = _start != 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_end != 0)

IRs:
TMP_2(bool) = _end != 0
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_start < _end)

IRs:
TMP_4(bool) = _start < _end
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(_presale_token_in_wei == 0) || (_crowdsale_token_in_wei == 0) || (_crowdsale_eth_inwei_fund_min == 0) || (_crowdsale_eth_inwei_fund_max == 0) || (_crowdsale_eth_inwei_accepted_min == 0) || (_team_token_percentage_max >= 100)

IRs:
TMP_6(bool) = _presale_token_in_wei == 0
TMP_7(bool) = _crowdsale_token_in_wei == 0
TMP_8(bool) = TMP_6 || TMP_7
TMP_9(bool) = _crowdsale_eth_inwei_fund_min == 0
TMP_10(bool) = TMP_8 || TMP_9
TMP_11(bool) = _crowdsale_eth_inwei_fund_max == 0
TMP_12(bool) = TMP_10 || TMP_11
TMP_13(bool) = _crowdsale_eth_inwei_accepted_min == 0
TMP_14(bool) = TMP_12 || TMP_13
TMP_15(bool) = _team_token_percentage_max >= 100
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_17(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startsAt = _start

IRs:
startsAt(uint256) := _start(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
endsAt = _end

IRs:
endsAt(uint256) := _end(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
TOKEN_MAX = _token_max

IRs:
TOKEN_MAX(uint256) := _token_max(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
PRESALE_TOKEN_IN_WEI = _presale_token_in_wei

IRs:
PRESALE_TOKEN_IN_WEI(uint256) := _presale_token_in_wei(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
CROWDSALE_TOKEN_IN_WEI = _crowdsale_token_in_wei

IRs:
CROWDSALE_TOKEN_IN_WEI(uint256) := _crowdsale_token_in_wei(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
PRESALE_ETH_IN_WEI_FUND_MAX = _presale_eth_inwei_fund_max

IRs:
PRESALE_ETH_IN_WEI_FUND_MAX(uint256) := _presale_eth_inwei_fund_max(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MIN = _crowdsale_eth_inwei_fund_min

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MIN(uint256) := _crowdsale_eth_inwei_fund_min(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MAX = _crowdsale_eth_inwei_fund_max

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MAX(uint256) := _crowdsale_eth_inwei_fund_max(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN = _crowdsale_eth_inwei_accepted_min

IRs:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := _crowdsale_eth_inwei_accepted_min(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
CROWDSALE_GASPRICE_IN_WEI_MAX = _crowdsale_gasprice_inwei_max

IRs:
CROWDSALE_GASPRICE_IN_WEI_MAX(uint256) := _crowdsale_gasprice_inwei_max(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
team_token_percentage_max = _team_token_percentage_max

IRs:
team_token_percentage_max(uint256) := _team_token_percentage_max(uint256)"];
}
// Function: 20869.sol-CrowdsaleLimit-addTeamAddressInternal(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > team_token_percentage_max

IRs:
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_26(bool) = TMP_25 > team_token_percentage_max
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_27(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > 100

IRs:
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_29(bool) = TMP_28 > 100
CONDITION TMP_29"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_30(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
team_addresses_token_percentage[addr] != 0

IRs:
REF_6(uint256) -> team_addresses_token_percentage[addr]
TMP_31(bool) = REF_6 != 0
CONDITION TMP_31"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_32(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
team_addresses_token_percentage[addr] = token_percentage

IRs:
REF_7(uint256) -> team_addresses_token_percentage[addr]
REF_7(uint256) (->team_addresses_token_percentage) := token_percentage(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
team_addresses_idx[team_address_count] = addr

IRs:
REF_8(address) -> team_addresses_idx[team_address_count]
REF_8(address) (->team_addresses_idx) := addr(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
team_address_count ++

IRs:
TMP_33(uint256) := team_address_count(uint256)
team_address_count(uint256) = team_address_count + 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
team_token_percentage_total = team_token_percentage_total.add(token_percentage)

IRs:
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
team_token_percentage_total(uint256) := TMP_34(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
AddTeamAddress(addr,release_time,token_percentage)

IRs:
Emit AddTeamAddress(addr,release_time,token_percentage)"];
}
// Function: 20869.sol-CrowdsaleLimit-allowCrowdsaleAmountLimit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_37(bool) = msg.value == 0
CONDITION TMP_37"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_38(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.value < CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN

IRs:
TMP_39(bool) = msg.value < CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN
CONDITION TMP_39"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_40(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
(crowdsale_eth_fund.add(msg.value)) > CROWDSALE_ETH_IN_WEI_FUND_MAX

IRs:
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_fund', 'msg.value'] 
TMP_42(bool) = TMP_41 > CROWDSALE_ETH_IN_WEI_FUND_MAX
CONDITION TMP_42"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_43(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
(CROWDSALE_GASPRICE_IN_WEI_MAX > 0) && (tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX)

IRs:
TMP_44(bool) = CROWDSALE_GASPRICE_IN_WEI_MAX > 0
TMP_45(bool) = tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX
TMP_46(bool) = TMP_44 && TMP_45
CONDITION TMP_46"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_47(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: _ 13
"];
}
// Function: 20869.sol-CrowdsaleLimit-calculateTokenCrowsale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_21(uint256) = 10 ** decimals
multiplier(uint256) := TMP_21(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(CROWDSALE_TOKEN_IN_WEI)

IRs:
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_22', 'CROWDSALE_TOKEN_IN_WEI'] 
RETURN TMP_23"];
}
// Function: 20869.sol-CrowdsaleLimit-calculateTokenPresale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_18(uint256) = 10 ** decimals
multiplier(uint256) := TMP_18(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(PRESALE_TOKEN_IN_WEI)

IRs:
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_19', 'PRESALE_TOKEN_IN_WEI'] 
RETURN TMP_20"];
}
// Function: 20869.sol-CrowdsaleLimit-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endsAt

IRs:
TMP_36(bool) = now > endsAt
RETURN TMP_36"];
}
// Function: 20869.sol-CrowdsaleLimit-isMinimumGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN

IRs:
TMP_24(bool) = crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN
RETURN TMP_24"];
}
// Function: 20869.sol-CrowdsaleLimit-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRESALE_TOKEN_IN_WEI = 9000000000000000

IRs:
PRESALE_TOKEN_IN_WEI(uint256) := 9000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
presale_eth_fund = 0

IRs:
presale_eth_fund(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
CROWDSALE_TOKEN_IN_WEI = 10000000000000000

IRs:
CROWDSALE_TOKEN_IN_WEI(uint256) := 10000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PRESALE_ETH_IN_WEI_FUND_MAX = 0

IRs:
PRESALE_ETH_IN_WEI_FUND_MAX(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MIN = 100000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MIN(uint256) := 100000000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MAX = 1000000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MAX(uint256) := 1000000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN = 100000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := 100000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CROWDSALE_GASPRICE_IN_WEI_MAX = 0

IRs:
CROWDSALE_GASPRICE_IN_WEI_MAX(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
crowdsale_eth_fund = 0

IRs:
crowdsale_eth_fund(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
crowdsale_eth_refund = 0

IRs:
crowdsale_eth_refund(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
team_address_count = 0

IRs:
team_address_count(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
team_token_percentage_total = 0

IRs:
team_token_percentage_total(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
team_token_percentage_max = 0

IRs:
team_token_percentage_max(uint256) := 0(uint256)"];
}
// Function: 20869.sol-CrowdsaleToken-CrowdsaleToken(string,string,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = _initialSupply

IRs:
totalSupply_(uint256) := _initialSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = totalSupply_

IRs:
REF_218(uint256) -> balances[owner]
REF_218(uint256) (->balances) := totalSupply_(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
totalSupply_ > 0

IRs:
TMP_395(bool) = totalSupply_ > 0
CONDITION TMP_395"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Mint(owner,totalSupply_)

IRs:
Emit Mint(owner,totalSupply_)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! _mintable

IRs:
TMP_397 = UnaryType.BANG _mintable 
CONDITION TMP_397"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
totalSupply_ == 0

IRs:
TMP_398(bool) = totalSupply_ == 0
CONDITION TMP_398"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert()()

IRs:
TMP_399(None) = SOLIDITY_CALL revert()()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
}
// Function: 20869.sol-CrowdsaleToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20869.sol-CrowdsaleToken-ReleasableToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = msg.sender

IRs:
releaseAgent(address) := msg.sender(address)"];
}
// Function: 20869.sol-CrowdsaleToken-addLockAddress(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addLockAddressInternal(addr,lock_time)

IRs:
INTERNAL_CALL, ReleasableToken.addLockAddressInternal(address,uint256)(addr,lock_time)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 20869.sol-CrowdsaleToken-addLockAddressInternal(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
addr == 0x0

IRs:
TMP_382(bool) = addr == 0
CONDITION TMP_382"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_383(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lock_addresses[addr] = lock_time

IRs:
REF_216(uint256) -> lock_addresses[addr]
REF_216(uint256) (->lock_addresses) := lock_time(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
AddLockAddress(addr,lock_time)

IRs:
Emit AddLockAddress(addr,lock_time)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
6->1;
}
// Function: 20869.sol-CrowdsaleToken-allowance(address,address)
digraph{
}
// Function: 20869.sol-CrowdsaleToken-approve(address,uint256)
digraph{
}
// Function: 20869.sol-CrowdsaleToken-balanceOf(address)
digraph{
}
// Function: 20869.sol-CrowdsaleToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_407 = UnaryType.BANG mintingFinished 
TMP_408(None) = SOLIDITY_CALL require(bool)(TMP_407)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-CrowdsaleToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! released

IRs:
TMP_411 = UnaryType.BANG released 
CONDITION TMP_411"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_220(bool) -> transferAgents[_sender]
TMP_412 = UnaryType.BANG REF_220 
CONDITION TMP_412"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_413(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
now < lock_addresses[_sender]

IRs:
REF_221(uint256) -> lock_addresses[_sender]
TMP_414(bool) = now < REF_221
CONDITION TMP_414"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_415(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: _ 9
"];
}
// Function: 20869.sol-CrowdsaleToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_199(mapping(address => uint256)) -> allowed[msg.sender]
REF_200(uint256) -> REF_199[_spender]
oldValue(uint256) := REF_200(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_371(bool) = _subtractedValue > oldValue
CONDITION TMP_371"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_201(mapping(address => uint256)) -> allowed[msg.sender]
REF_202(uint256) -> REF_201[_spender]
REF_202(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_203(mapping(address => uint256)) -> allowed[msg.sender]
REF_204(uint256) -> REF_203[_spender]
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_204(uint256) (->allowed) := TMP_372(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_206(mapping(address => uint256)) -> allowed[msg.sender]
REF_207(uint256) -> REF_206[_spender]
Emit Approval(msg.sender,_spender,REF_207)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-CrowdsaleToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
4->1;
}
// Function: 20869.sol-CrowdsaleToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_418(bool) = releaseState != released
CONDITION TMP_418"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_419(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-CrowdsaleToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_192(mapping(address => uint256)) -> allowed[msg.sender]
REF_193(uint256) -> REF_192[_spender]
REF_194(mapping(address => uint256)) -> allowed[msg.sender]
REF_195(uint256) -> REF_194[_spender]
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_195', '_addedValue'] 
REF_193(uint256) (->allowed) := TMP_369(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_197(mapping(address => uint256)) -> allowed[msg.sender]
REF_198(uint256) -> REF_197[_spender]
Emit Approval(msg.sender,_spender,REF_198)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-CrowdsaleToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_344(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_171(uint256) -> balances[_to]
REF_172(uint256) -> balances[_to]
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_172', '_amount'] 
REF_171(uint256) (->balances) := TMP_345(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_347 = CONVERT 0 to address
Emit Transfer(TMP_347,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 20869.sol-CrowdsaleToken-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_219(bool) -> mintAgents[msg.sender]
TMP_405 = UnaryType.BANG REF_219 
CONDITION TMP_405"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_406(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-CrowdsaleToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_409(bool) = msg.sender == owner
TMP_410(None) = SOLIDITY_CALL require(bool)(TMP_409)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-CrowdsaleToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_416(bool) = msg.sender != releaseAgent
CONDITION TMP_416"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_417(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-CrowdsaleToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
super.releaseTokenTransfer()

IRs:
INTERNAL_CALL, ReleasableToken.releaseTokenTransfer()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
3->1;
}
// Function: 20869.sol-CrowdsaleToken-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_169(bool) -> mintAgents[addr]
REF_169(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
4->1;
}
// Function: 20869.sol-CrowdsaleToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 20869.sol-CrowdsaleToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_217(bool) -> transferAgents[addr]
REF_217(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 20869.sol-CrowdsaleToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 20869.sol-CrowdsaleToken-totalSupply()
digraph{
}
// Function: 20869.sol-CrowdsaleToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_391(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_391"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20869.sol-CrowdsaleToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_393(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_393"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20869.sol-CrowdsaleToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_353 = CONVERT 0 to address
TMP_354(bool) = newOwner != TMP_353
TMP_355(None) = SOLIDITY_CALL require(bool)(TMP_354)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20869.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 20869.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 20869.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 20869.sol-ERC20-totalSupply()
digraph{
}
// Function: 20869.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 20869.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 20869.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 20869.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 20869.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 20869.sol-Haltable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20869.sol-Haltable-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 20869.sol-Haltable-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_64 = UnaryType.BANG halted 
CONDITION TMP_64"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_65(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-Haltable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_61(bool) = msg.sender == owner
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-Haltable-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_63(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-Haltable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = newOwner != TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20869.sol-Haltable-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 20869.sol-MintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20869.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 20869.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 20869.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 20869.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_311 = UnaryType.BANG mintingFinished 
TMP_312(None) = SOLIDITY_CALL require(bool)(TMP_311)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_142(mapping(address => uint256)) -> allowed[msg.sender]
REF_143(uint256) -> REF_142[_spender]
oldValue(uint256) := REF_143(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_284(bool) = _subtractedValue > oldValue
CONDITION TMP_284"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_144(mapping(address => uint256)) -> allowed[msg.sender]
REF_145(uint256) -> REF_144[_spender]
REF_145(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_146(mapping(address => uint256)) -> allowed[msg.sender]
REF_147(uint256) -> REF_146[_spender]
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_147(uint256) (->allowed) := TMP_285(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_149(mapping(address => uint256)) -> allowed[msg.sender]
REF_150(uint256) -> REF_149[_spender]
Emit Approval(msg.sender,_spender,REF_150)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
4->1;
}
// Function: 20869.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_135(mapping(address => uint256)) -> allowed[msg.sender]
REF_136(uint256) -> REF_135[_spender]
REF_137(mapping(address => uint256)) -> allowed[msg.sender]
REF_138(uint256) -> REF_137[_spender]
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_138', '_addedValue'] 
REF_136(uint256) (->allowed) := TMP_282(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_140(mapping(address => uint256)) -> allowed[msg.sender]
REF_141(uint256) -> REF_140[_spender]
Emit Approval(msg.sender,_spender,REF_141)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_298(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_161(uint256) -> balances[_to]
REF_162(uint256) -> balances[_to]
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_162', '_amount'] 
REF_161(uint256) (->balances) := TMP_299(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_301 = CONVERT 0 to address
Emit Transfer(TMP_301,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 20869.sol-MintableToken-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_164(bool) -> mintAgents[msg.sender]
TMP_309 = UnaryType.BANG REF_164 
CONDITION TMP_309"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_310(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_307(bool) = msg.sender == owner
TMP_308(None) = SOLIDITY_CALL require(bool)(TMP_307)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-MintableToken-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_159(bool) -> mintAgents[addr]
REF_159(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
4->1;
}
// Function: 20869.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 20869.sol-MintableToken-totalSupply()
digraph{
}
// Function: 20869.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 20869.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 20869.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_266 = CONVERT 0 to address
TMP_267(bool) = newOwner != TMP_266
TMP_268(None) = SOLIDITY_CALL require(bool)(TMP_267)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20869.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20869.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_52(bool) = msg.sender == owner
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = newOwner != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20869.sol-ReleasableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20869.sol-ReleasableToken-ReleasableToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = msg.sender

IRs:
releaseAgent(address) := msg.sender(address)"];
}
// Function: 20869.sol-ReleasableToken-addLockAddressInternal(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
addr == 0x0

IRs:
TMP_317(bool) = addr == 0
CONDITION TMP_317"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_318(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lock_addresses[addr] = lock_time

IRs:
REF_165(uint256) -> lock_addresses[addr]
REF_165(uint256) (->lock_addresses) := lock_time(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
AddLockAddress(addr,lock_time)

IRs:
Emit AddLockAddress(addr,lock_time)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
6->1;
}
// Function: 20869.sol-ReleasableToken-allowance(address,address)
digraph{
}
// Function: 20869.sol-ReleasableToken-approve(address,uint256)
digraph{
}
// Function: 20869.sol-ReleasableToken-balanceOf(address)
digraph{
}
// Function: 20869.sol-ReleasableToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! released

IRs:
TMP_332 = UnaryType.BANG released 
CONDITION TMP_332"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_167(bool) -> transferAgents[_sender]
TMP_333 = UnaryType.BANG REF_167 
CONDITION TMP_333"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_334(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
now < lock_addresses[_sender]

IRs:
REF_168(uint256) -> lock_addresses[_sender]
TMP_335(bool) = now < REF_168
CONDITION TMP_335"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_336(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: _ 9
"];
}
// Function: 20869.sol-ReleasableToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_339(bool) = releaseState != released
CONDITION TMP_339"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_340(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-ReleasableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_330(bool) = msg.sender == owner
TMP_331(None) = SOLIDITY_CALL require(bool)(TMP_330)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20869.sol-ReleasableToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_337(bool) = msg.sender != releaseAgent
CONDITION TMP_337"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_338(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20869.sol-ReleasableToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = true

IRs:
released(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
2->1;
}
// Function: 20869.sol-ReleasableToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 20869.sol-ReleasableToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_166(bool) -> transferAgents[addr]
REF_166(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 20869.sol-ReleasableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
}
// Function: 20869.sol-ReleasableToken-totalSupply()
digraph{
}
// Function: 20869.sol-ReleasableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_326(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_326"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20869.sol-ReleasableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_328(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_328"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20869.sol-ReleasableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_313 = CONVERT 0 to address
TMP_314(bool) = newOwner != TMP_313
TMP_315(None) = SOLIDITY_CALL require(bool)(TMP_314)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20869.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_430(uint256) = a + b
c(uint256) := TMP_430(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_431(bool) = c >= a
TMP_432(None) = SOLIDITY_CALL assert(bool)(TMP_431)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20869.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_426(uint256) = a / b
c(uint256) := TMP_426(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20869.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_420(uint256) = a * b
c(uint256) := TMP_420(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_421(bool) = a == 0
TMP_422(uint256) = c / a
TMP_423(bool) = TMP_422 == b
TMP_424(bool) = TMP_421 || TMP_423
TMP_425(None) = SOLIDITY_CALL assert(bool)(TMP_424)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20869.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_427(bool) = b <= a
TMP_428(None) = SOLIDITY_CALL assert(bool)(TMP_427)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_429(uint256) = a - b
RETURN TMP_429"];
}
// Function: 20869.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_99(mapping(address => uint256)) -> allowed[_owner]
REF_100(uint256) -> REF_99[_spender]
RETURN REF_100"];
}
// Function: 20869.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_97(mapping(address => uint256)) -> allowed[msg.sender]
REF_98(uint256) -> REF_97[_spender]
REF_98(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 20869.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_108(mapping(address => uint256)) -> allowed[msg.sender]
REF_109(uint256) -> REF_108[_spender]
oldValue(uint256) := REF_109(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_263(bool) = _subtractedValue > oldValue
CONDITION TMP_263"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
REF_111(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_112(mapping(address => uint256)) -> allowed[msg.sender]
REF_113(uint256) -> REF_112[_spender]
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_113(uint256) (->allowed) := TMP_264(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_115(mapping(address => uint256)) -> allowed[msg.sender]
REF_116(uint256) -> REF_115[_spender]
Emit Approval(msg.sender,_spender,REF_116)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_101(mapping(address => uint256)) -> allowed[msg.sender]
REF_102(uint256) -> REF_101[_spender]
REF_103(mapping(address => uint256)) -> allowed[msg.sender]
REF_104(uint256) -> REF_103[_spender]
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_104', '_addedValue'] 
REF_102(uint256) (->allowed) := TMP_261(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_106(mapping(address => uint256)) -> allowed[msg.sender]
REF_107(uint256) -> REF_106[_spender]
Emit Approval(msg.sender,_spender,REF_107)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20869.sol-StandardToken-totalSupply()
digraph{
}
// Function: 20869.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 20869.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_249 = CONVERT 0 to address
TMP_250(bool) = _to != TMP_249
TMP_251(None) = SOLIDITY_CALL require(bool)(TMP_250)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_83(uint256) -> balances[_from]
TMP_252(bool) = _value <= REF_83
TMP_253(None) = SOLIDITY_CALL require(bool)(TMP_252)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_84(mapping(address => uint256)) -> allowed[_from]
REF_85(uint256) -> REF_84[msg.sender]
TMP_254(bool) = _value <= REF_85
TMP_255(None) = SOLIDITY_CALL require(bool)(TMP_254)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_86(uint256) -> balances[_from]
REF_87(uint256) -> balances[_from]
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_87', '_value'] 
REF_86(uint256) (->balances) := TMP_256(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_89(uint256) -> balances[_to]
REF_90(uint256) -> balances[_to]
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_90', '_value'] 
REF_89(uint256) (->balances) := TMP_257(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_92(mapping(address => uint256)) -> allowed[_from]
REF_93(uint256) -> REF_92[msg.sender]
REF_94(mapping(address => uint256)) -> allowed[_from]
REF_95(uint256) -> REF_94[msg.sender]
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_95', '_value'] 
REF_93(uint256) (->allowed) := TMP_258(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
