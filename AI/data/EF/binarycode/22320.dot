digraph G {
// Function: 22320.sol-DSAuth-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 22320.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_11(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22320.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_5 = CONVERT this to address
TMP_6(bool) = src == TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_7(bool) = src == owner
CONDITION TMP_7"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_8 = CONVERT 0 to DSAuthority
TMP_9(bool) = authority == TMP_8
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_10"];
}
// Function: 22320.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 22320.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 22320.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 22320.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_13(uint256) = x + y
z(uint256) := TMP_13(uint256)
TMP_14(bool) = z >= x
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_28(bool) = x >= y
CONDITION TMP_28"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_27(bool) = x <= y
CONDITION TMP_27"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_26(bool) = x >= y
CONDITION TMP_26"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_25(bool) = x <= y
CONDITION TMP_25"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_19(bool) = y == 0
TMP_20(uint256) = x * y
z(uint256) := TMP_20(uint256)
TMP_21(uint256) = z / y
TMP_22(bool) = TMP_21 == x
TMP_23(bool) = TMP_19 || TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_41(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_42(uint256) = y / 2
TMP_43(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_41,TMP_42)
TMP_44(uint256) = TMP_43 / y
z(uint256) := TMP_44(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_33(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_34(uint256) = RAY / 2
TMP_35(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_33,TMP_34)
TMP_36(uint256) = TMP_35 / RAY
z(uint256) := TMP_36(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_45(bool) = n != 0
CONDITION TMP_45"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_46(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_46(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_47(uint256) = n % 2
TMP_48(bool) = TMP_47 != 0
CONDITION TMP_48"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_49(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_49(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_50(uint256) = n % 2
TMP_51(bool) = TMP_50 != 0
CONDITION TMP_51"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_52(uint256) = 10 ** 18
WAD(uint256) := TMP_52(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_53(uint256) = 10 ** 27
RAY(uint256) := TMP_53(uint256)"];
}
// Function: 22320.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_16(uint256) = x - y
z(uint256) := TMP_16(uint256)
TMP_17(bool) = z <= x
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_37(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_38(uint256) = y / 2
TMP_39(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_37,TMP_38)
TMP_40(uint256) = TMP_39 / y
z(uint256) := TMP_40(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSMath-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_29(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_30(uint256) = WAD / 2
TMP_31(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_29,TMP_30)
TMP_32(uint256) = TMP_31 / WAD
z(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 22320.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 22320.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 22320.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 22320.sol-ERC20-totalSupply()
digraph{
}
// Function: 22320.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 22320.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 22320.sol-TxManager-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 22320.sol-TxManager-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_55(uint256) = x + y
z(uint256) := TMP_55(uint256)
TMP_56(bool) = z >= x
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-addressAt(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
word = uint256At(data,location)

IRs:
TMP_134(uint256) = INTERNAL_CALL, TxManager.uint256At(bytes,uint256)(data,location)
word(uint256) := TMP_134(uint256)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 22320.sol-TxManager-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_138(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22320.sol-TxManager-execute(address[],bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->8;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < tokens.length

IRs:
REF_2 -> LENGTH tokens
TMP_105(bool) = i < REF_2
CONDITION TMP_105"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amount = min(ERC20(tokens[i]).balanceOf(msg.sender),ERC20(tokens[i]).allowance(msg.sender,this))

IRs:
REF_3(address) -> tokens[i]
TMP_106 = CONVERT REF_3 to ERC20
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(ERC20), function:balanceOf, arguments:['msg.sender']  
REF_5(address) -> tokens[i]
TMP_108 = CONVERT REF_5 to ERC20
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(ERC20), function:allowance, arguments:['msg.sender', 'this']  
TMP_110(uint256) = INTERNAL_CALL, DSMath.min(uint256,uint256)(TMP_107,TMP_109)
amount(uint256) := TMP_110(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(ERC20(tokens[i]).transferFrom(msg.sender,this,amount))

IRs:
REF_7(address) -> tokens[i]
TMP_111 = CONVERT REF_7 to ERC20
TMP_112(bool) = HIGH_LEVEL_CALL, dest:TMP_111(ERC20), function:transferFrom, arguments:['msg.sender', 'this', 'amount']  
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_114(uint256) := i(uint256)
i(uint256) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
invokeContracts(script)

IRs:
INTERNAL_CALL, TxManager.invokeContracts(bytes)(script)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
j < tokens.length

IRs:
REF_9 -> LENGTH tokens
TMP_116(bool) = j < REF_9
CONDITION TMP_116"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(ERC20(tokens[j]).transfer(msg.sender,ERC20(tokens[j]).balanceOf(this)))

IRs:
REF_10(address) -> tokens[j]
TMP_117 = CONVERT REF_10 to ERC20
REF_12(address) -> tokens[j]
TMP_118 = CONVERT REF_12 to ERC20
TMP_119(uint256) = HIGH_LEVEL_CALL, dest:TMP_118(ERC20), function:balanceOf, arguments:['this']  
TMP_120(bool) = HIGH_LEVEL_CALL, dest:TMP_117(ERC20), function:transfer, arguments:['msg.sender', 'TMP_119']  
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
j ++

IRs:
TMP_122(uint256) := j(uint256)
j(uint256) = j + 1"];
14->12;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
16->3;
}
// Function: 22320.sol-TxManager-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_70(bool) = x >= y
CONDITION TMP_70"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_69(bool) = x <= y
CONDITION TMP_69"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-invokeContracts(bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
location = 0

IRs:
location(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
location < script.length

IRs:
REF_14 -> LENGTH script
TMP_125(bool) = location < REF_14
CONDITION TMP_125"];
3->4[label="True"];
3->10[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
contractAddress = addressAt(script,location)

IRs:
TMP_126(address) = INTERNAL_CALL, TxManager.addressAt(bytes,uint256)(script,location)
contractAddress(address) := TMP_126(address)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
calldataLength = uint256At(script,location + 0x14)

IRs:
TMP_127(uint256) = location + 20
TMP_128(uint256) = INTERNAL_CALL, TxManager.uint256At(bytes,uint256)(script,TMP_127)
calldataLength(uint256) := TMP_128(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
calldataStart = locationOf(script,location + 0x14 + 0x20)

IRs:
TMP_129(uint256) = location + 20
TMP_130(uint256) = TMP_129 + 32
TMP_131(uint256) = INTERNAL_CALL, TxManager.locationOf(bytes,uint256)(script,TMP_130)
calldataStart(uint256) := TMP_131(uint256)"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
location += (0x14 + 0x20 + calldataLength)

IRs:
TMP_132(uint256) = 20 + 32
TMP_133(uint256) = TMP_132 + calldataLength
location(uint256) = location + TMP_133"];
9->3;
10[label="Node Type: END_LOOP 10
"];
}
// Function: 22320.sol-TxManager-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_99 = CONVERT this to address
TMP_100(bool) = src == TMP_99
CONDITION TMP_100"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_101(bool) = src == owner
CONDITION TMP_101"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_102 = CONVERT 0 to DSAuthority
TMP_103(bool) = authority == TMP_102
CONDITION TMP_103"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_104(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_104"];
}
// Function: 22320.sol-TxManager-locationOf(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 22320.sol-TxManager-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_68(bool) = x >= y
CONDITION TMP_68"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_67(bool) = x <= y
CONDITION TMP_67"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_61(bool) = y == 0
TMP_62(uint256) = x * y
z(uint256) := TMP_62(uint256)
TMP_63(uint256) = z / y
TMP_64(bool) = TMP_63 == x
TMP_65(bool) = TMP_61 || TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 22320.sol-TxManager-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_83(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_84(uint256) = y / 2
TMP_85(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_83,TMP_84)
TMP_86(uint256) = TMP_85 / y
z(uint256) := TMP_86(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_75(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_76(uint256) = RAY / 2
TMP_77(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_75,TMP_76)
TMP_78(uint256) = TMP_77 / RAY
z(uint256) := TMP_78(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_87(bool) = n != 0
CONDITION TMP_87"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_88(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_88(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_89(uint256) = n % 2
TMP_90(bool) = TMP_89 != 0
CONDITION TMP_90"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_91(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_91(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_92(uint256) = n % 2
TMP_93(bool) = TMP_92 != 0
CONDITION TMP_93"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 22320.sol-TxManager-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 22320.sol-TxManager-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_135(uint256) = 10 ** 18
WAD(uint256) := TMP_135(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_136(uint256) = 10 ** 27
RAY(uint256) := TMP_136(uint256)"];
}
// Function: 22320.sol-TxManager-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_58(uint256) = x - y
z(uint256) := TMP_58(uint256)
TMP_59(bool) = z <= x
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-uint256At(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 22320.sol-TxManager-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_79(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_80(uint256) = y / 2
TMP_81(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_79,TMP_80)
TMP_82(uint256) = TMP_81 / y
z(uint256) := TMP_82(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22320.sol-TxManager-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_71(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_72(uint256) = WAD / 2
TMP_73(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_71,TMP_72)
TMP_74(uint256) = TMP_73 / WAD
z(uint256) := TMP_74(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
}
