digraph G {
// Function: 25456.sol-Authorized-Authorized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authorized[msg.sender][I_AM_ROOT] = true

IRs:
REF_0(mapping(bytes32 => bool)) -> authorized[msg.sender]
REF_1(bool) -> REF_0[I_AM_ROOT]
REF_1(bool) (->authorized) := True(bool)"];
}
// Function: 25456.sol-Authorized-ifAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(authorized[_address][_authorization] || authorized[_address][I_AM_ROOT])

IRs:
REF_12(mapping(bytes32 => bool)) -> authorized[_address]
REF_13(bool) -> REF_12[_authorization]
REF_14(mapping(bytes32 => bool)) -> authorized[_address]
REF_15(bool) -> REF_14[I_AM_ROOT]
TMP_15(bool) = REF_13 || REF_15
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 25456.sol-Authorized-isAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
authorized[_address][_authorization]

IRs:
REF_2(mapping(bytes32 => bool)) -> authorized[_address]
REF_3(bool) -> REF_2[_authorization]
RETURN REF_3"];
}
// Function: 25456.sol-Authorized-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
I_AM_ROOT = keccak256()(I am root!)

IRs:
TMP_12(bytes32) = SOLIDITY_CALL keccak256()(I am root!)
I_AM_ROOT(bytes32) := TMP_12(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STAFF_MEMBER = keccak256()(Staff Member.)

IRs:
TMP_13(bytes32) = SOLIDITY_CALL keccak256()(Staff Member.)
STAFF_MEMBER(bytes32) := TMP_13(bytes32)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ROUTER = keccak256()(Router Contract.)

IRs:
TMP_14(bytes32) = SOLIDITY_CALL keccak256()(Router Contract.)
ROUTER(bytes32) := TMP_14(bytes32)"];
}
// Function: 25456.sol-Authorized-toggleAuthorization(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != msg.sender)

IRs:
TMP_5(bool) = _address != msg.sender
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_authorization == I_AM_ROOT && ! authorized[_address][I_AM_ROOT]

IRs:
TMP_7(bool) = _authorization == I_AM_ROOT
REF_4(mapping(bytes32 => bool)) -> authorized[_address]
REF_5(bool) -> REF_4[I_AM_ROOT]
TMP_8 = UnaryType.BANG REF_5 
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
authorized[_address][STAFF_MEMBER] = false

IRs:
REF_6(mapping(bytes32 => bool)) -> authorized[_address]
REF_7(bool) -> REF_6[STAFF_MEMBER]
REF_7(bool) (->authorized) := False(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
authorized[_address][_authorization] = ! authorized[_address][_authorization]

IRs:
REF_8(mapping(bytes32 => bool)) -> authorized[_address]
REF_9(bool) -> REF_8[_authorization]
REF_10(mapping(bytes32 => bool)) -> authorized[_address]
REF_11(bool) -> REF_10[_authorization]
TMP_10 = UnaryType.BANG REF_11 
REF_9(bool) (->authorized) := TMP_10(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ifAuthorized(msg.sender,I_AM_ROOT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,I_AM_ROOT)"];
6->1;
}
// Function: 25456.sol-AuthorizedList-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
I_AM_ROOT = keccak256()(I am root!)

IRs:
TMP_0(bytes32) = SOLIDITY_CALL keccak256()(I am root!)
I_AM_ROOT(bytes32) := TMP_0(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STAFF_MEMBER = keccak256()(Staff Member.)

IRs:
TMP_1(bytes32) = SOLIDITY_CALL keccak256()(Staff Member.)
STAFF_MEMBER(bytes32) := TMP_1(bytes32)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ROUTER = keccak256()(Router Contract.)

IRs:
TMP_2(bytes32) = SOLIDITY_CALL keccak256()(Router Contract.)
ROUTER(bytes32) := TMP_2(bytes32)"];
}
// Function: 25456.sol-CodeTricks-getCode(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
code

IRs:
RETURN code"];
}
// Function: 25456.sol-CodeTricks-getCodeHash(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(getCode(_addr))

IRs:
TMP_3(bytes) = INTERNAL_CALL, CodeTricks.getCode(address)(_addr)
TMP_4(bytes32) = SOLIDITY_CALL keccak256()(TMP_3)
RETURN TMP_4"];
}
// Function: 25456.sol-Router-Authorized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authorized[msg.sender][I_AM_ROOT] = true

IRs:
REF_16(mapping(bytes32 => bool)) -> authorized[msg.sender]
REF_17(bool) -> REF_16[I_AM_ROOT]
REF_17(bool) (->authorized) := True(bool)"];
}
// Function: 25456.sol-Router-Router(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token_address != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = _token_address != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_storage_address != address(0))

IRs:
TMP_29 = CONVERT 0 to address
TMP_30(bool) = _storage_address != TMP_29
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token_address = _token_address

IRs:
token_address(address) := _token_address(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bts_address1 = _storage_address

IRs:
bts_address1(address) := _storage_address(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Authorized()

IRs:
INTERNAL_CALL, Authorized.Authorized()()"];
5->1;
}
// Function: 25456.sol-Router-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = token_address

IRs:
target(address) := token_address(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 25456.sol-Router-getCode(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
code

IRs:
RETURN code"];
}
// Function: 25456.sol-Router-getCodeHash(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(getCode(_addr))

IRs:
TMP_24(bytes) = INTERNAL_CALL, CodeTricks.getCode(address)(_addr)
TMP_25(bytes32) = SOLIDITY_CALL keccak256()(TMP_24)
RETURN TMP_25"];
}
// Function: 25456.sol-Router-ifAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(authorized[_address][_authorization] || authorized[_address][I_AM_ROOT])

IRs:
REF_28(mapping(bytes32 => bool)) -> authorized[_address]
REF_29(bool) -> REF_28[_authorization]
REF_30(mapping(bytes32 => bool)) -> authorized[_address]
REF_31(bool) -> REF_30[I_AM_ROOT]
TMP_49(bool) = REF_29 || REF_31
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 25456.sol-Router-isAuthorized(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
authorized[_address][_authorization]

IRs:
REF_18(mapping(bytes32 => bool)) -> authorized[_address]
REF_19(bool) -> REF_18[_authorization]
RETURN REF_19"];
}
// Function: 25456.sol-Router-nameSuccessor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token_address != address(0))

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = _token_address != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token_address = _token_address

IRs:
token_address(address) := _token_address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ifAuthorized(msg.sender,I_AM_ROOT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,I_AM_ROOT)"];
3->1;
}
// Function: 25456.sol-Router-setSecondaryStorage(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_storage_address != address(0))

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _storage_address != TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bts_address2 = _storage_address

IRs:
bts_address2(address) := _storage_address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ifAuthorized(msg.sender,I_AM_ROOT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,I_AM_ROOT)"];
3->1;
}
// Function: 25456.sol-Router-setStorage(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_storage_address != address(0))

IRs:
TMP_37 = CONVERT 0 to address
TMP_38(bool) = _storage_address != TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bts_address1 = _storage_address

IRs:
bts_address1(address) := _storage_address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ifAuthorized(msg.sender,I_AM_ROOT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,I_AM_ROOT)"];
3->1;
}
// Function: 25456.sol-Router-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
I_AM_ROOT = keccak256()(I am root!)

IRs:
TMP_46(bytes32) = SOLIDITY_CALL keccak256()(I am root!)
I_AM_ROOT(bytes32) := TMP_46(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STAFF_MEMBER = keccak256()(Staff Member.)

IRs:
TMP_47(bytes32) = SOLIDITY_CALL keccak256()(Staff Member.)
STAFF_MEMBER(bytes32) := TMP_47(bytes32)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ROUTER = keccak256()(Router Contract.)

IRs:
TMP_48(bytes32) = SOLIDITY_CALL keccak256()(Router Contract.)
ROUTER(bytes32) := TMP_48(bytes32)"];
}
// Function: 25456.sol-Router-swapStorage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
temp = bts_address1

IRs:
temp(address) := bts_address1(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bts_address1 = bts_address2

IRs:
bts_address1(address) := bts_address2(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bts_address2 = temp

IRs:
bts_address2(address) := temp(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ifAuthorized(msg.sender,I_AM_ROOT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,I_AM_ROOT)"];
4->1;
}
// Function: 25456.sol-Router-toggleAuthorization(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != msg.sender)

IRs:
TMP_17(bool) = _address != msg.sender
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_authorization == I_AM_ROOT && ! authorized[_address][I_AM_ROOT]

IRs:
TMP_19(bool) = _authorization == I_AM_ROOT
REF_20(mapping(bytes32 => bool)) -> authorized[_address]
REF_21(bool) -> REF_20[I_AM_ROOT]
TMP_20 = UnaryType.BANG REF_21 
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
authorized[_address][STAFF_MEMBER] = false

IRs:
REF_22(mapping(bytes32 => bool)) -> authorized[_address]
REF_23(bool) -> REF_22[STAFF_MEMBER]
REF_23(bool) (->authorized) := False(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
authorized[_address][_authorization] = ! authorized[_address][_authorization]

IRs:
REF_24(mapping(bytes32 => bool)) -> authorized[_address]
REF_25(bool) -> REF_24[_authorization]
REF_26(mapping(bytes32 => bool)) -> authorized[_address]
REF_27(bool) -> REF_26[_authorization]
TMP_22 = UnaryType.BANG REF_27 
REF_25(bool) (->authorized) := TMP_22(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ifAuthorized(msg.sender,I_AM_ROOT)

IRs:
MODIFIER_CALL, Authorized.ifAuthorized(address,bytes32)(msg.sender,I_AM_ROOT)"];
6->1;
}
}
