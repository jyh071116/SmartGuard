digraph G {
// Function: 26284.sol-Delegatable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_10(bool) = msg.sender == owner
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 26284.sol-Delegatable-transferDelegation(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newDelegation != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newDelegation != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DelegationTransferred(delegation,newDelegation)

IRs:
Emit DelegationTransferred(delegation,newDelegation)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delegation = newDelegation

IRs:
delegation(address) := newDelegation(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Delegatable.onlyOwner()()"];
4->1;
}
// Function: 26284.sol-Delegatable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Delegatable.onlyOwner()()"];
4->1;
}
// Function: 26284.sol-DelegateProxy-delegatedFwd(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 26284.sol-Parsec-delegatedFwd(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 26284.sol-Parsec-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delegatedFwd(delegation,msg.data)

IRs:
INTERNAL_CALL, DelegateProxy.delegatedFwd(address,bytes)(delegation,msg.data)"];
}
// Function: 26284.sol-Parsec-initialize(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == 0)

IRs:
TMP_23(bool) = owner == 0
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delegation = _controller

IRs:
delegation(address) := _controller(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delegatedFwd(_controller,msg.data)

IRs:
INTERNAL_CALL, DelegateProxy.delegatedFwd(address,bytes)(_controller,msg.data)"];
}
// Function: 26284.sol-Parsec-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_26(bool) = msg.sender == owner
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 26284.sol-Parsec-transferDelegation(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newDelegation != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newDelegation != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DelegationTransferred(delegation,newDelegation)

IRs:
Emit DelegationTransferred(delegation,newDelegation)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delegation = newDelegation

IRs:
delegation(address) := newDelegation(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Delegatable.onlyOwner()()"];
4->1;
}
// Function: 26284.sol-Parsec-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = newOwner != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Delegatable.onlyOwner()()"];
4->1;
}
}
