digraph G {
// Function: 30358.sol-debugContract-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 30358.sol-debugContract-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == Owner)

IRs:
TMP_5(bool) = msg.sender == Owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(msg.sender)

IRs:
TMP_7(None) = SOLIDITY_CALL selfdestruct(address)(msg.sender)"];
}
// Function: 30358.sol-debugContract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
Limit = 1000000000000000000

IRs:
Limit(uint256) := 1000000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
loglib = 0xBC3A2d9D5Cf09013FB6ED85d97B180EaF76000Bd

IRs:
loglib(address) := 1074587681737133191604871356123639339305660317885(address)"];
}
// Function: 30358.sol-debugContract-withdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value >= Limit

IRs:
TMP_0(bool) = msg.value >= Limit
CONDITION TMP_0"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
loglib.delegatecall(bytes4(sha3()(logSendEvent())))

IRs:
TMP_1(bytes32) = SOLIDITY_CALL sha3()(logSendEvent())
TMP_2 = CONVERT TMP_1 to bytes4
TMP_3(bool) = LOW_LEVEL_CALL, dest:loglib, function:delegatecall, arguments:['TMP_2']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.send(this.balance)

IRs:
REF_3(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_4 = SEND dest:msg.sender value:REF_3"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 30358.sol-loglibs-logSendEvent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sendList[msg.sender] = 1000000000000000000

IRs:
REF_0(uint256) -> sendList[msg.sender]
REF_0(uint256) (->sendList) := 1000000000000000000(uint256)"];
}
}
