digraph G {
// Function: 30692.sol-firstTest-Set(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == Owner)

IRs:
TMP_0(bool) = msg.sender == Owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Limit = limit

IRs:
Limit(uint256) := limit(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emails = dataBase

IRs:
emails(address) := dataBase(address)"];
}
// Function: 30692.sol-firstTest-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 30692.sol-firstTest-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawal()

IRs:
INTERNAL_CALL, firstTest.withdrawal()()"];
}
// Function: 30692.sol-firstTest-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == Owner)

IRs:
TMP_3(bool) = msg.sender == Owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(msg.sender)

IRs:
TMP_5(None) = SOLIDITY_CALL selfdestruct(address)(msg.sender)"];
}
// Function: 30692.sol-firstTest-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Owner = 0x46Feeb381e90f7e30635B4F33CE3F6fA8EA6ed9b

IRs:
Owner(address) := 405314233721731614567849376158975379573823696283(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
emails = 0x25df6e3da49f41ef5b99e139c87abc12c3583d13

IRs:
emails(address) := 216215328027251570991303672707549707894655565075(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
Limit = 1000000000000000000

IRs:
Limit(uint256) := 1000000000000000000(uint256)"];
}
// Function: 30692.sol-firstTest-withdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adr = msg.sender

IRs:
adr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
msg.value > Limit

IRs:
TMP_6(bool) = msg.value > Limit
CONDITION TMP_6"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emails.delegatecall(bytes4(sha3()(logEvent())))

IRs:
TMP_7(bytes32) = SOLIDITY_CALL sha3()(logEvent())
TMP_8 = CONVERT TMP_7 to bytes4
TMP_9(bool) = LOW_LEVEL_CALL, dest:emails, function:delegatecall, arguments:['TMP_8']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
adr.send(this.balance)

IRs:
REF_2(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_10 = SEND dest:adr value:REF_2"];
4->5;
5[label="Node Type: END_IF 5
"];
}
}
