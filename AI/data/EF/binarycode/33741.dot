digraph G {
// Function: 33741.sol-EDProxy-EDProxy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33741.sol-EDProxy-dtrade(address,uint8,uint8,uint256[],address[],bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_callee.delegatecall(bytes4(keccak256()(trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256))),addresses[0],uints[0],addresses[2],uints[2],uints[4],uints[6],addresses[4],v1,b[0],b[2],uints[8])

IRs:
TMP_0(bytes32) = SOLIDITY_CALL keccak256()(trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256))
TMP_1 = CONVERT TMP_0 to bytes4
REF_1(address) -> addresses[0]
REF_2(uint256) -> uints[0]
REF_3(address) -> addresses[2]
REF_4(uint256) -> uints[2]
REF_5(uint256) -> uints[4]
REF_6(uint256) -> uints[6]
REF_7(address) -> addresses[4]
REF_8(bytes32) -> b[0]
REF_9(bytes32) -> b[2]
REF_10(uint256) -> uints[8]
TMP_2(bool) = LOW_LEVEL_CALL, dest:_callee, function:delegatecall, arguments:['TMP_1', 'REF_1', 'REF_2', 'REF_3', 'REF_4', 'REF_5', 'REF_6', 'REF_7', 'v1', 'REF_8', 'REF_9', 'REF_10']  
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(_callee.delegatecall(bytes4(keccak256()(trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256))),addresses[1],uints[1],addresses[3],uints[3],uints[5],uints[7],addresses[5],v2,b[1],b[3],uints[9]))

IRs:
TMP_3(bytes32) = SOLIDITY_CALL keccak256()(trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256))
TMP_4 = CONVERT TMP_3 to bytes4
REF_12(address) -> addresses[1]
REF_13(uint256) -> uints[1]
REF_14(address) -> addresses[3]
REF_15(uint256) -> uints[3]
REF_16(uint256) -> uints[5]
REF_17(uint256) -> uints[7]
REF_18(address) -> addresses[5]
REF_19(bytes32) -> b[1]
REF_20(bytes32) -> b[3]
REF_21(uint256) -> uints[9]
TMP_5(bool) = LOW_LEVEL_CALL, dest:_callee, function:delegatecall, arguments:['TMP_4', 'REF_12', 'REF_13', 'REF_14', 'REF_15', 'REF_16', 'REF_17', 'REF_18', 'v2', 'REF_19', 'REF_20', 'REF_21']  "];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33741.sol-EDProxy-testcall(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
b = new bytes32[](4)

IRs:
TMP_7(bytes32[])  = new bytes32[](4)
b(bytes32[]) = ['TMP_7(bytes32[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
addrs = new address[](6)

IRs:
TMP_9(address[])  = new address[](6)
addrs(address[]) = ['TMP_9(address[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
ints = new uint256[](12)

IRs:
TMP_11(uint256[])  = new uint256[](12)
ints(uint256[]) = ['TMP_11(uint256[])']"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ints[0] = 1

IRs:
REF_22(uint256) -> ints[0]
REF_22(uint256) (->ints) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ints[1] = 2

IRs:
REF_23(uint256) -> ints[1]
REF_23(uint256) (->ints) := 2(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ints[2] = 3

IRs:
REF_24(uint256) -> ints[2]
REF_24(uint256) (->ints) := 3(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ints[3] = 4

IRs:
REF_25(uint256) -> ints[3]
REF_25(uint256) (->ints) := 4(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ints[4] = 5

IRs:
REF_26(uint256) -> ints[4]
REF_26(uint256) (->ints) := 5(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ints[5] = 6

IRs:
REF_27(uint256) -> ints[5]
REF_27(uint256) (->ints) := 6(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ints[6] = 7

IRs:
REF_28(uint256) -> ints[6]
REF_28(uint256) (->ints) := 7(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ints[7] = 8

IRs:
REF_29(uint256) -> ints[7]
REF_29(uint256) (->ints) := 8(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ints[8] = 9

IRs:
REF_30(uint256) -> ints[8]
REF_30(uint256) (->ints) := 9(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ints[9] = 10

IRs:
REF_31(uint256) -> ints[9]
REF_31(uint256) (->ints) := 10(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
v1 = 11

IRs:
v1(uint8) := 11(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
v2 = 12

IRs:
v2(uint8) := 12(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
b[0] = somebytes

IRs:
REF_32(bytes32) -> b[0]
REF_32(bytes32) (->b) := somebytes(bytes32)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
b[1] = somebytes

IRs:
REF_33(bytes32) -> b[1]
REF_33(bytes32) (->b) := somebytes(bytes32)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
b[2] = somebytes

IRs:
REF_34(bytes32) -> b[2]
REF_34(bytes32) (->b) := somebytes(bytes32)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b[3] = somebytes

IRs:
REF_35(bytes32) -> b[3]
REF_35(bytes32) (->b) := somebytes(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
addrs[0] = 0xdc04977a2078c8ffdf086d618d1f961b6c54111

IRs:
REF_36(address) -> addrs[0]
REF_36(address) (->addrs) := 78505023004676607888616436411448521918207312145(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
addrs[1] = 0xdc04977a2078c8ffdf086d618d1f961b6c54222

IRs:
REF_37(address) -> addrs[1]
REF_37(address) (->addrs) := 78505023004676607888616436411448521918207312418(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
addrs[2] = 0xdc04977a2078c8ffdf086d618d1f961b6c54333

IRs:
REF_38(address) -> addrs[2]
REF_38(address) (->addrs) := 78505023004676607888616436411448521918207312691(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
addrs[3] = 0xdc04977a2078c8ffdf086d618d1f961b6c54444

IRs:
REF_39(address) -> addrs[3]
REF_39(address) (->addrs) := 78505023004676607888616436411448521918207312964(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
addrs[4] = 0xdc04977a2078c8ffdf086d618d1f961b6c54555

IRs:
REF_40(address) -> addrs[4]
REF_40(address) (->addrs) := 78505023004676607888616436411448521918207313237(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
addrs[5] = 0xdc04977a2078c8ffdf086d618d1f961b6c54666

IRs:
REF_41(address) -> addrs[5]
REF_41(address) (->addrs) := 78505023004676607888616436411448521918207313510(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
dtrade(_callee,v1,v2,ints,addrs,b)

IRs:
INTERNAL_CALL, EDProxy.dtrade(address,uint8,uint8,uint256[],address[],bytes32[])(_callee,v1,v2,ints,addrs,b)"];
}
}
