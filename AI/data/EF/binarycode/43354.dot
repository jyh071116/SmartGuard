digraph G {
// Function: 43354.sol-UserAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isAuth(msg.sender),permission-denied)

IRs:
TMP_8(bool) = INTERNAL_CALL, UserAuth.isAuth(address)(msg.sender)
TMP_9(None) = SOLIDITY_CALL require(bool,string)(TMP_8,permission-denied)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 43354.sol-UserAuth-isAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == owner

IRs:
TMP_5(bool) = src == owner
CONDITION TMP_5"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == address(this)

IRs:
TMP_6 = CONVERT this to address
TMP_7(bool) = src == TMP_6
CONDITION TMP_7"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 43354.sol-UserAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(nextOwner != address(0x0),invalid-address)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = nextOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,invalid-address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = nextOwner

IRs:
owner(address) := nextOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogSetOwner(nextOwner)

IRs:
Emit LogSetOwner(nextOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, UserAuth.auth()()"];
4->1;
}
// Function: 43354.sol-UserWallet-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isAuth(msg.sender),permission-denied)

IRs:
TMP_20(bool) = INTERNAL_CALL, UserAuth.isAuth(address)(msg.sender)
TMP_21(None) = SOLIDITY_CALL require(bool,string)(TMP_20,permission-denied)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 43354.sol-UserWallet-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 43354.sol-UserWallet-execute(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
LogExecute(_target,_session)

IRs:
Emit LogExecute(_target,_session)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, UserAuth.auth()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
response

IRs:
RETURN response"];
}
// Function: 43354.sol-UserWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 43354.sol-UserWallet-isAuth(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == owner

IRs:
TMP_15(bool) = src == owner
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == address(this)

IRs:
TMP_16 = CONVERT this to address
TMP_17(bool) = src == TMP_16
CONDITION TMP_17"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 43354.sol-UserWallet-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(nextOwner != address(0x0),invalid-address)

IRs:
TMP_10 = CONVERT 0 to address
TMP_11(bool) = nextOwner != TMP_10
TMP_12(None) = SOLIDITY_CALL require(bool,string)(TMP_11,invalid-address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = nextOwner

IRs:
owner(address) := nextOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogSetOwner(nextOwner)

IRs:
Emit LogSetOwner(nextOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, UserAuth.auth()()"];
4->1;
}
}
