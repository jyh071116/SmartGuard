digraph G {
// Function: 5332.sol-Crowdsale-Crowdsale(address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != 0x0)

IRs:
TMP_86(bool) = _token != 0
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_multisigWallet != 0x0)

IRs:
TMP_88(bool) = _multisigWallet != 0
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token = CrowdsaleTokenInterface(_token)

IRs:
TMP_90 = CONVERT _token to CrowdsaleTokenInterface
token(CrowdsaleTokenInterface) := TMP_90(CrowdsaleTokenInterface)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
token_decimals != token.decimals()

IRs:
TMP_91(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenInterface), function:decimals, arguments:[]  
TMP_92(bool) = token_decimals != TMP_91
CONDITION TMP_92"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_93(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
multisigWallet = _multisigWallet

IRs:
multisigWallet(address) := _multisigWallet(address)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
CrowdsaleLimit(_start,_end)

IRs:
INTERNAL_CALL, CrowdsaleLimit.CrowdsaleLimit(uint256,uint256)(_start,_end)"];
8->1;
}
// Function: 5332.sol-Crowdsale-CrowdsaleLimit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_start != 0)

IRs:
TMP_61(bool) = _start != 0
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_end != 0)

IRs:
TMP_63(bool) = _end != 0
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_start < _end)

IRs:
TMP_65(bool) = _start < _end
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startsAt = _start

IRs:
startsAt(uint256) := _start(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
endsAt = _end

IRs:
endsAt(uint256) := _end(uint256)"];
}
// Function: 5332.sol-Crowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 5332.sol-Crowdsale-addTeamAddress(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTeamAddressInternal(addr,release_time,token_percentage)

IRs:
INTERNAL_CALL, CrowdsaleLimit.addTeamAddressInternal(address,uint256,uint256)(addr,release_time,token_percentage)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.addLockAddress(addr,release_time)

IRs:
HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenInterface), function:addLockAddress, arguments:['addr', 'release_time']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
inState(State.PreFunding)

IRs:
REF_29(Crowdsale.State) -> State.PreFunding
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_29)"];
4->1;
}
// Function: 5332.sol-Crowdsale-addTeamAddressInternal(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > team_token_percentage_max

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_75(bool) = TMP_74 > team_token_percentage_max
CONDITION TMP_75"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_76(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > 100

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_78(bool) = TMP_77 > 100
CONDITION TMP_78"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_79(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
team_addresses_token_percentage[addr] != 0

IRs:
REF_17(uint256) -> team_addresses_token_percentage[addr]
TMP_80(bool) = REF_17 != 0
CONDITION TMP_80"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_81(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
team_addresses_token_percentage[addr] = token_percentage

IRs:
REF_18(uint256) -> team_addresses_token_percentage[addr]
REF_18(uint256) (->team_addresses_token_percentage) := token_percentage(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
team_addresses_idx[team_address_count] = addr

IRs:
REF_19(address) -> team_addresses_idx[team_address_count]
REF_19(address) (->team_addresses_idx) := addr(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
team_address_count ++

IRs:
TMP_82(uint256) := team_address_count(uint256)
team_address_count(uint256) = team_address_count + 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
team_token_percentage_total = team_token_percentage_total.add(token_percentage)

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
team_token_percentage_total(uint256) := TMP_83(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
AddTeamAddress(addr,release_time,token_percentage)

IRs:
Emit AddTeamAddress(addr,release_time,token_percentage)"];
}
// Function: 5332.sol-Crowdsale-allowCrowdsaleAmountLimit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_190(bool) = msg.value == 0
CONDITION TMP_190"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_191(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(crowdsale_eth_fund.add(msg.value)) > CROWDSALE_ETH_IN_WEI_FUND_MAX

IRs:
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_fund', 'msg.value'] 
TMP_193(bool) = TMP_192 > CROWDSALE_ETH_IN_WEI_FUND_MAX
CONDITION TMP_193"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_194(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
(CROWDSALE_GASPRICE_IN_WEI_MAX > 0) && (tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX)

IRs:
TMP_195(bool) = CROWDSALE_GASPRICE_IN_WEI_MAX > 0
TMP_196(bool) = tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX
TMP_197(bool) = TMP_195 && TMP_196
CONDITION TMP_197"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_198(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: _ 10
"];
}
// Function: 5332.sol-Crowdsale-buyTokensCrowdsale(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenAmount = 0

IRs:
tokenAmount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
getState() == State.PreFunding

IRs:
TMP_127(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
REF_37(Crowdsale.State) -> State.PreFunding
TMP_128(bool) = TMP_127 == REF_37
CONDITION TMP_128"];
3->4[label="True"];
3->12[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
weiAmount < PRESALE_ETH_IN_WEI_ACCEPTED_MIN

IRs:
TMP_129(bool) = weiAmount < PRESALE_ETH_IN_WEI_ACCEPTED_MIN
CONDITION TMP_129"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_130(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
(PRESALE_ETH_IN_WEI_FUND_MAX > 0) && ((presale_eth_fund.add(weiAmount)) > PRESALE_ETH_IN_WEI_FUND_MAX)

IRs:
TMP_131(bool) = PRESALE_ETH_IN_WEI_FUND_MAX > 0
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['presale_eth_fund', 'weiAmount'] 
TMP_133(bool) = TMP_132 > PRESALE_ETH_IN_WEI_FUND_MAX
TMP_134(bool) = TMP_131 && TMP_133
CONDITION TMP_134"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_135(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenAmount = calculateTokenPresale(weiAmount,token_decimals)

IRs:
TMP_136(uint256) = INTERNAL_CALL, CrowdsaleLimit.calculateTokenPresale(uint256,uint256)(weiAmount,token_decimals)
tokenAmount(uint256) := TMP_136(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
presale_eth_fund = presale_eth_fund.add(weiAmount)

IRs:
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['presale_eth_fund', 'weiAmount'] 
presale_eth_fund(uint256) := TMP_137(uint256)"];
11->19;
12[label="Node Type: IF 12

EXPRESSION:
(getState() == State.Funding) || (getState() == State.Success)

IRs:
TMP_138(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
REF_40(Crowdsale.State) -> State.Funding
TMP_139(bool) = TMP_138 == REF_40
TMP_140(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
REF_41(Crowdsale.State) -> State.Success
TMP_141(bool) = TMP_140 == REF_41
TMP_142(bool) = TMP_139 || TMP_141
CONDITION TMP_142"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
weiAmount < CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN

IRs:
TMP_143(bool) = weiAmount < CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN
CONDITION TMP_143"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
revert()()

IRs:
TMP_144(None) = SOLIDITY_CALL revert()()"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokenAmount = calculateTokenCrowsale(weiAmount,token_decimals)

IRs:
TMP_145(uint256) = INTERNAL_CALL, CrowdsaleLimit.calculateTokenCrowsale(uint256,uint256)(weiAmount,token_decimals)
tokenAmount(uint256) := TMP_145(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
revert()()

IRs:
TMP_146(None) = SOLIDITY_CALL revert()()"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
tokenAmount == 0

IRs:
TMP_147(bool) = tokenAmount == 0
CONDITION TMP_147"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
revert()()

IRs:
TMP_148(None) = SOLIDITY_CALL revert()()"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
investedAmountOf[receiver] == 0

IRs:
REF_42(uint256) -> investedAmountOf[receiver]
TMP_149(bool) = REF_42 == 0
CONDITION TMP_149"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
investorCount ++

IRs:
TMP_150(uint256) := investorCount(uint256)
investorCount(uint256) = investorCount + 1"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount)

IRs:
REF_43(uint256) -> investedAmountOf[receiver]
REF_44(uint256) -> investedAmountOf[receiver]
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_44', 'weiAmount'] 
REF_43(uint256) (->investedAmountOf) := TMP_151(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount)

IRs:
REF_46(uint256) -> tokenAmountOf[receiver]
REF_47(uint256) -> tokenAmountOf[receiver]
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_47', 'tokenAmount'] 
REF_46(uint256) (->tokenAmountOf) := TMP_152(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
crowdsale_eth_fund = crowdsale_eth_fund.add(weiAmount)

IRs:
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_fund', 'weiAmount'] 
crowdsale_eth_fund(uint256) := TMP_153(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
tokensSold = tokensSold.add(tokenAmount)

IRs:
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensSold', 'tokenAmount'] 
tokensSold(uint256) := TMP_154(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
token.mint(receiver,tokenAmount)

IRs:
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenInterface), function:mint, arguments:['receiver', 'tokenAmount']  "];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
! multisigWallet.send(weiAmount)

IRs:
TMP_156 = SEND dest:multisigWallet value:weiAmount
TMP_157 = UnaryType.BANG TMP_156 
CONDITION TMP_157"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
revert()()

IRs:
TMP_158(None) = SOLIDITY_CALL revert()()"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
Invested(receiver,weiAmount,tokenAmount)

IRs:
Emit Invested(receiver,weiAmount,tokenAmount)"];
}
// Function: 5332.sol-Crowdsale-calculateTokenCrowsale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_70(uint256) = 10 ** decimals
multiplier(uint256) := TMP_70(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(CROWDSALE_TOKEN_IN_WEI)

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_71', 'CROWDSALE_TOKEN_IN_WEI'] 
RETURN TMP_72"];
}
// Function: 5332.sol-Crowdsale-calculateTokenPresale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_67(uint256) = 10 ** decimals
multiplier(uint256) := TMP_67(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(PRESALE_TOKEN_IN_WEI)

IRs:
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'PRESALE_TOKEN_IN_WEI'] 
RETURN TMP_69"];
}
// Function: 5332.sol-Crowdsale-createTeamTokenByPercentage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
total = tokensSold

IRs:
total(uint256) := tokensSold(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokens = total.mul(team_token_percentage_total).div(100 - team_token_percentage_total)

IRs:
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['total', 'team_token_percentage_total'] 
TMP_112(uint256) = 100 - team_token_percentage_total
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_111', 'TMP_112'] 
tokens(uint256) := TMP_113(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < team_address_count

IRs:
TMP_114(bool) = i < team_address_count
CONDITION TMP_114"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
addr = team_addresses_idx[i]

IRs:
REF_32(address) -> team_addresses_idx[i]
addr(address) := REF_32(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
addr == 0x0

IRs:
TMP_115(bool) = addr == 0
CONDITION TMP_115"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: CONTINUE 9
"];
9->14;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ntoken = tokens.mul(team_addresses_token_percentage[addr]).div(team_token_percentage_total)

IRs:
REF_34(uint256) -> team_addresses_token_percentage[addr]
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokens', 'REF_34'] 
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_116', 'team_token_percentage_total'] 
ntoken(uint256) := TMP_117(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token.mint(addr,ntoken)

IRs:
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenInterface), function:mint, arguments:['addr', 'ntoken']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
createTeamTokenEvent(addr,ntoken)

IRs:
Emit createTeamTokenEvent(addr,ntoken)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_120(uint256) := i(uint256)
i(uint256) = i + 1"];
14->6;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 5332.sol-Crowdsale-doFinalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_176(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
createTeamTokenByPercentage()

IRs:
INTERNAL_CALL, Crowdsale.createTeamTokenByPercentage()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token.finishMinting()

IRs:
TMP_178(bool) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenInterface), function:finishMinting, arguments:[]  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
inState(State.Success)

IRs:
REF_61(Crowdsale.State) -> State.Success
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_61)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
10->1;
}
// Function: 5332.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != 0x0)

IRs:
TMP_122(bool) = msg.sender != 0
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buyTokensCrowdsale(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokensCrowdsale(address)(msg.sender)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowCrowdsaleAmountLimit()

IRs:
MODIFIER_CALL, CrowdsaleLimit.allowCrowdsaleAmountLimit()()"];
4->1;
}
// Function: 5332.sol-Crowdsale-getState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
State.Finalized

IRs:
REF_22(Crowdsale.State) -> State.Finalized
RETURN REF_22"];
3[label="Node Type: IF 3

EXPRESSION:
now < startsAt

IRs:
TMP_95(bool) = now < startsAt
CONDITION TMP_95"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
State.PreFunding

IRs:
REF_23(Crowdsale.State) -> State.PreFunding
RETURN REF_23"];
5[label="Node Type: IF 5

EXPRESSION:
now <= endsAt && ! isMinimumGoalReached()

IRs:
TMP_96(bool) = now <= endsAt
TMP_97(bool) = INTERNAL_CALL, CrowdsaleLimit.isMinimumGoalReached()()
TMP_98 = UnaryType.BANG TMP_97 
TMP_99(bool) = TMP_96 && TMP_98
CONDITION TMP_99"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
State.Funding

IRs:
REF_24(Crowdsale.State) -> State.Funding
RETURN REF_24"];
7[label="Node Type: IF 7

EXPRESSION:
isMinimumGoalReached()

IRs:
TMP_100(bool) = INTERNAL_CALL, CrowdsaleLimit.isMinimumGoalReached()()
CONDITION TMP_100"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
State.Success

IRs:
REF_25(Crowdsale.State) -> State.Success
RETURN REF_25"];
9[label="Node Type: IF 9

EXPRESSION:
! isMinimumGoalReached() && crowdsale_eth_fund > 0 && loadedRefund >= crowdsale_eth_fund

IRs:
TMP_101(bool) = INTERNAL_CALL, CrowdsaleLimit.isMinimumGoalReached()()
TMP_102 = UnaryType.BANG TMP_101 
TMP_103(bool) = crowdsale_eth_fund > 0
TMP_104(bool) = TMP_102 && TMP_103
TMP_105(bool) = loadedRefund >= crowdsale_eth_fund
TMP_106(bool) = TMP_104 && TMP_105
CONDITION TMP_106"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
State.Refunding

IRs:
REF_26(Crowdsale.State) -> State.Refunding
RETURN REF_26"];
11[label="Node Type: RETURN 11

EXPRESSION:
State.Failure

IRs:
REF_27(Crowdsale.State) -> State.Failure
RETURN REF_27"];
}
// Function: 5332.sol-Crowdsale-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 5332.sol-Crowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endsAt

IRs:
TMP_85(bool) = now > endsAt
RETURN TMP_85"];
}
// Function: 5332.sol-Crowdsale-inState(Crowdsale.State)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getState() != state

IRs:
TMP_199(Crowdsale.State) = INTERNAL_CALL, Crowdsale.getState()()
TMP_200(bool) = TMP_199 != state
CONDITION TMP_200"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_201(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5332.sol-Crowdsale-isMinimumGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN

IRs:
TMP_73(bool) = crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN
RETURN TMP_73"];
}
// Function: 5332.sol-Crowdsale-loadRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_160(bool) = msg.value == 0
CONDITION TMP_160"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_161(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loadedRefund = loadedRefund.add(msg.value)

IRs:
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['loadedRefund', 'msg.value'] 
loadedRefund(uint256) := TMP_162(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
inState(State.Failure)

IRs:
REF_54(Crowdsale.State) -> State.Failure
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_54)"];
5->1;
}
// Function: 5332.sol-Crowdsale-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_186 = UnaryType.BANG halted 
CONDITION TMP_186"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_187(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5332.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_188(bool) = msg.sender == owner
TMP_189(None) = SOLIDITY_CALL require(bool)(TMP_188)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5332.sol-Crowdsale-refund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiValue = investedAmountOf[msg.sender]

IRs:
REF_55(uint256) -> investedAmountOf[msg.sender]
weiValue(uint256) := REF_55(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
weiValue == 0

IRs:
TMP_164(bool) = weiValue == 0
CONDITION TMP_164"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_165(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
investedAmountOf[msg.sender] = 0

IRs:
REF_56(uint256) -> investedAmountOf[msg.sender]
REF_56(uint256) (->investedAmountOf) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
crowdsale_eth_refund = crowdsale_eth_refund.add(weiValue)

IRs:
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_refund', 'weiValue'] 
crowdsale_eth_refund(uint256) := TMP_166(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Refund(msg.sender,weiValue)

IRs:
Emit Refund(msg.sender,weiValue)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! msg.sender.send(weiValue)

IRs:
TMP_168 = SEND dest:msg.sender value:weiValue
TMP_169 = UnaryType.BANG TMP_168 
CONDITION TMP_169"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert()()

IRs:
TMP_170(None) = SOLIDITY_CALL revert()()"];
9->10;
10[label="Node Type: END_IF 10
"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
inState(State.Refunding)

IRs:
REF_59(Crowdsale.State) -> State.Refunding
MODIFIER_CALL, Crowdsale.inState(Crowdsale.State)(REF_59)"];
11->1;
}
// Function: 5332.sol-Crowdsale-setEndsAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
now > time

IRs:
TMP_172(bool) = now > time
CONDITION TMP_172"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_173(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
endsAt = time

IRs:
endsAt(uint256) := time(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
EndsAtChanged(endsAt)

IRs:
Emit EndsAtChanged(endsAt)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 5332.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
token_decimals = 8

IRs:
token_decimals(uint256) := 8(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_RATE_PRESALE = 7200

IRs:
TOKEN_RATE_PRESALE(uint256) := 7200(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_RATE_CROWDSALE = 6000

IRs:
TOKEN_RATE_CROWDSALE(uint256) := 6000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PRESALE_TOKEN_IN_WEI = 1000000000000000000 / TOKEN_RATE_PRESALE

IRs:
TMP_183(uint256) = 1000000000000000000 / TOKEN_RATE_PRESALE
PRESALE_TOKEN_IN_WEI(uint256) := TMP_183(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
CROWDSALE_TOKEN_IN_WEI = 1000000000000000000 / TOKEN_RATE_CROWDSALE

IRs:
TMP_184(uint256) = 1000000000000000000 / TOKEN_RATE_CROWDSALE
CROWDSALE_TOKEN_IN_WEI(uint256) := TMP_184(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
PRESALE_ETH_IN_WEI_FUND_MAX = 40000000000000000000000

IRs:
PRESALE_ETH_IN_WEI_FUND_MAX(uint256) := 40000000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MIN = 22000000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MIN(uint256) := 22000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MAX = 90000000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MAX(uint256) := 90000000000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_ETH_IN_WEI_ACCEPTED_MIN = 1000000000000000000

IRs:
PRESALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := 1000000000000000000(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN = 100000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := 100000000000000000(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
CROWDSALE_GASPRICE_IN_WEI_MAX = 0

IRs:
CROWDSALE_GASPRICE_IN_WEI_MAX(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
presale_eth_fund = 0

IRs:
presale_eth_fund(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
crowdsale_eth_fund = 0

IRs:
crowdsale_eth_fund(uint256) := 0(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
crowdsale_eth_refund = 0

IRs:
crowdsale_eth_refund(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
team_address_count = 0

IRs:
team_address_count(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
team_token_percentage_total = 0

IRs:
team_token_percentage_total(uint256) := 0(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
team_token_percentage_max = 40

IRs:
team_token_percentage_max(uint256) := 40(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
tokensSold = 0

IRs:
tokensSold(uint256) := 0(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
investorCount = 0

IRs:
investorCount(uint256) := 0(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
loadedRefund = 0

IRs:
loadedRefund(uint256) := 0(uint256)"];
}
// Function: 5332.sol-Crowdsale-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_185(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5332.sol-Crowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_57 = CONVERT 0 to address
TMP_58(bool) = newOwner != TMP_57
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 5332.sol-Crowdsale-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 5332.sol-CrowdsaleLimit-CrowdsaleLimit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_start != 0)

IRs:
TMP_0(bool) = _start != 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_end != 0)

IRs:
TMP_2(bool) = _end != 0
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_start < _end)

IRs:
TMP_4(bool) = _start < _end
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startsAt = _start

IRs:
startsAt(uint256) := _start(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
endsAt = _end

IRs:
endsAt(uint256) := _end(uint256)"];
}
// Function: 5332.sol-CrowdsaleLimit-addTeamAddressInternal(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > team_token_percentage_max

IRs:
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_14(bool) = TMP_13 > team_token_percentage_max
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_15(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(team_token_percentage_total.add(token_percentage)) > 100

IRs:
TMP_16(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
TMP_17(bool) = TMP_16 > 100
CONDITION TMP_17"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_18(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
team_addresses_token_percentage[addr] != 0

IRs:
REF_6(uint256) -> team_addresses_token_percentage[addr]
TMP_19(bool) = REF_6 != 0
CONDITION TMP_19"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_20(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
team_addresses_token_percentage[addr] = token_percentage

IRs:
REF_7(uint256) -> team_addresses_token_percentage[addr]
REF_7(uint256) (->team_addresses_token_percentage) := token_percentage(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
team_addresses_idx[team_address_count] = addr

IRs:
REF_8(address) -> team_addresses_idx[team_address_count]
REF_8(address) (->team_addresses_idx) := addr(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
team_address_count ++

IRs:
TMP_21(uint256) := team_address_count(uint256)
team_address_count(uint256) = team_address_count + 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
team_token_percentage_total = team_token_percentage_total.add(token_percentage)

IRs:
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['team_token_percentage_total', 'token_percentage'] 
team_token_percentage_total(uint256) := TMP_22(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
AddTeamAddress(addr,release_time,token_percentage)

IRs:
Emit AddTeamAddress(addr,release_time,token_percentage)"];
}
// Function: 5332.sol-CrowdsaleLimit-allowCrowdsaleAmountLimit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_27(bool) = msg.value == 0
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_28(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(crowdsale_eth_fund.add(msg.value)) > CROWDSALE_ETH_IN_WEI_FUND_MAX

IRs:
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['crowdsale_eth_fund', 'msg.value'] 
TMP_30(bool) = TMP_29 > CROWDSALE_ETH_IN_WEI_FUND_MAX
CONDITION TMP_30"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_31(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
(CROWDSALE_GASPRICE_IN_WEI_MAX > 0) && (tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX)

IRs:
TMP_32(bool) = CROWDSALE_GASPRICE_IN_WEI_MAX > 0
TMP_33(bool) = tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX
TMP_34(bool) = TMP_32 && TMP_33
CONDITION TMP_34"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_35(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: _ 10
"];
}
// Function: 5332.sol-CrowdsaleLimit-calculateTokenCrowsale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_9(uint256) = 10 ** decimals
multiplier(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(CROWDSALE_TOKEN_IN_WEI)

IRs:
TMP_10(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_11(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_10', 'CROWDSALE_TOKEN_IN_WEI'] 
RETURN TMP_11"];
}
// Function: 5332.sol-CrowdsaleLimit-calculateTokenPresale(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_6(uint256) = 10 ** decimals
multiplier(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.mul(multiplier).div(PRESALE_TOKEN_IN_WEI)

IRs:
TMP_7(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_8(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_7', 'PRESALE_TOKEN_IN_WEI'] 
RETURN TMP_8"];
}
// Function: 5332.sol-CrowdsaleLimit-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endsAt

IRs:
TMP_24(bool) = now > endsAt
RETURN TMP_24"];
}
// Function: 5332.sol-CrowdsaleLimit-isMinimumGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN

IRs:
TMP_12(bool) = crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN
RETURN TMP_12"];
}
// Function: 5332.sol-CrowdsaleLimit-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
token_decimals = 8

IRs:
token_decimals(uint256) := 8(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_RATE_PRESALE = 7200

IRs:
TOKEN_RATE_PRESALE(uint256) := 7200(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_RATE_CROWDSALE = 6000

IRs:
TOKEN_RATE_CROWDSALE(uint256) := 6000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PRESALE_TOKEN_IN_WEI = 1000000000000000000 / TOKEN_RATE_PRESALE

IRs:
TMP_25(uint256) = 1000000000000000000 / TOKEN_RATE_PRESALE
PRESALE_TOKEN_IN_WEI(uint256) := TMP_25(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
CROWDSALE_TOKEN_IN_WEI = 1000000000000000000 / TOKEN_RATE_CROWDSALE

IRs:
TMP_26(uint256) = 1000000000000000000 / TOKEN_RATE_CROWDSALE
CROWDSALE_TOKEN_IN_WEI(uint256) := TMP_26(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
PRESALE_ETH_IN_WEI_FUND_MAX = 40000000000000000000000

IRs:
PRESALE_ETH_IN_WEI_FUND_MAX(uint256) := 40000000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MIN = 22000000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MIN(uint256) := 22000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CROWDSALE_ETH_IN_WEI_FUND_MAX = 90000000000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_FUND_MAX(uint256) := 90000000000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
PRESALE_ETH_IN_WEI_ACCEPTED_MIN = 1000000000000000000

IRs:
PRESALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := 1000000000000000000(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN = 100000000000000000

IRs:
CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN(uint256) := 100000000000000000(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
CROWDSALE_GASPRICE_IN_WEI_MAX = 0

IRs:
CROWDSALE_GASPRICE_IN_WEI_MAX(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
presale_eth_fund = 0

IRs:
presale_eth_fund(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
crowdsale_eth_fund = 0

IRs:
crowdsale_eth_fund(uint256) := 0(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
crowdsale_eth_refund = 0

IRs:
crowdsale_eth_refund(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
team_address_count = 0

IRs:
team_address_count(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
team_token_percentage_total = 0

IRs:
team_token_percentage_total(uint256) := 0(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
team_token_percentage_max = 40

IRs:
team_token_percentage_max(uint256) := 40(uint256)"];
}
// Function: 5332.sol-CrowdsaleTokenInterface-addLockAddress(address,uint256)
digraph{
}
// Function: 5332.sol-CrowdsaleTokenInterface-finishMinting()
digraph{
}
// Function: 5332.sol-CrowdsaleTokenInterface-mint(address,uint256)
digraph{
}
// Function: 5332.sol-Haltable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 5332.sol-Haltable-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 5332.sol-Haltable-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_52 = UnaryType.BANG halted 
CONDITION TMP_52"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_53(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5332.sol-Haltable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_49(bool) = msg.sender == owner
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5332.sol-Haltable-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_51(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 5332.sol-Haltable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = newOwner != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 5332.sol-Haltable-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 5332.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 5332.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_40(bool) = msg.sender == owner
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 5332.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_36 = CONVERT 0 to address
TMP_37(bool) = newOwner != TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 5332.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_212(uint256) = a + b
c(uint256) := TMP_212(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_213(bool) = c >= a
TMP_214(None) = SOLIDITY_CALL assert(bool)(TMP_213)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 5332.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_208(uint256) = a / b
c(uint256) := TMP_208(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 5332.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_202(uint256) = a * b
c(uint256) := TMP_202(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_203(bool) = a == 0
TMP_204(uint256) = c / a
TMP_205(bool) = TMP_204 == b
TMP_206(bool) = TMP_203 || TMP_205
TMP_207(None) = SOLIDITY_CALL assert(bool)(TMP_206)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 5332.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_209(bool) = b <= a
TMP_210(None) = SOLIDITY_CALL assert(bool)(TMP_209)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_211(uint256) = a - b
RETURN TMP_211"];
}
}
