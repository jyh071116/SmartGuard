digraph G {
// Function: 7493.sol-Math-add(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToAdd(a,b))

IRs:
TMP_269(bool) = INTERNAL_CALL, Math.safeToAdd(int256,int256)(a,b)
TMP_270(None) = SOLIDITY_CALL require(bool)(TMP_269)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a + b

IRs:
TMP_271(int256) = a + b
RETURN TMP_271"];
}
// Function: 7493.sol-Math-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToAdd(a,b))

IRs:
TMP_237(bool) = INTERNAL_CALL, Math.safeToAdd(uint256,uint256)(a,b)
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a + b

IRs:
TMP_239(uint256) = a + b
RETURN TMP_239"];
}
// Function: 7493.sol-Math-exp(int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x <= 2454971259878909886679)

IRs:
TMP_0(bool) = x <= 2454971259878909886679
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
x < - 818323753292969962227

IRs:
TMP_2(uint256) = 0 - 818323753292969962227
TMP_3(bool) = x < TMP_2
CONDITION TMP_3"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
x = x * int256(ONE) / int256(LN2)

IRs:
TMP_4 = CONVERT ONE to int256
TMP_5(int256) = x * TMP_4
TMP_6 = CONVERT LN2 to int256
TMP_7(int256) = TMP_5 / TMP_6
x(int256) := TMP_7(int256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
x >= 0

IRs:
TMP_8(bool) = x >= 0
CONDITION TMP_8"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
shift = x / int256(ONE)

IRs:
TMP_9 = CONVERT ONE to int256
TMP_10(int256) = x / TMP_9
shift(int256) := TMP_10(int256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = uint256(x % int256(ONE))

IRs:
TMP_11 = CONVERT ONE to int256
TMP_12(int256) = x % TMP_11
TMP_13 = CONVERT TMP_12 to uint256
z(uint256) := TMP_13(uint256)"];
10->13;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
shift = x / int256(ONE) - 1

IRs:
TMP_14 = CONVERT ONE to int256
TMP_15(int256) = x / TMP_14
TMP_16(int256) = TMP_15 - 1
shift(int256) := TMP_16(int256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = ONE - uint256(- x % int256(ONE))

IRs:
TMP_17(int256) = 0 - x
TMP_18 = CONVERT ONE to int256
TMP_19(int256) = TMP_17 % TMP_18
TMP_20 = CONVERT TMP_19 to uint256
TMP_21(uint256) = ONE - TMP_20
z(uint256) := TMP_21(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
zpow = z

IRs:
zpow(uint256) := z(uint256)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
result = ONE

IRs:
result(uint256) := ONE(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
result += 0xb17217f7d1cf79ab * zpow / ONE

IRs:
TMP_22(uint256) = 12786308645202655659 * zpow
TMP_23(uint256) = TMP_22 / ONE
result(uint256) = result + TMP_23"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_24(uint256) = zpow * z
TMP_25(uint256) = TMP_24 / ONE
zpow(uint256) := TMP_25(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
result += 0x3d7f7bff058b1d50 * zpow / ONE

IRs:
TMP_26(uint256) = 4431396893595737424 * zpow
TMP_27(uint256) = TMP_26 / ONE
result(uint256) = result + TMP_27"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_28(uint256) = zpow * z
TMP_29(uint256) = TMP_28 / ONE
zpow(uint256) := TMP_29(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
result += 0xe35846b82505fc5 * zpow / ONE

IRs:
TMP_30(uint256) = 1023870087579328453 * zpow
TMP_31(uint256) = TMP_30 / ONE
result(uint256) = result + TMP_31"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_32(uint256) = zpow * z
TMP_33(uint256) = TMP_32 / ONE
zpow(uint256) := TMP_33(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
result += 0x276556df749cee5 * zpow / ONE

IRs:
TMP_34(uint256) = 177423166116318949 * zpow
TMP_35(uint256) = TMP_34 / ONE
result(uint256) = result + TMP_35"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_36(uint256) = zpow * z
TMP_37(uint256) = TMP_36 / ONE
zpow(uint256) := TMP_37(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
result += 0x5761ff9e299cc4 * zpow / ONE

IRs:
TMP_38(uint256) = 24596073471909060 * zpow
TMP_39(uint256) = TMP_38 / ONE
result(uint256) = result + TMP_39"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_40(uint256) = zpow * z
TMP_41(uint256) = TMP_40 / ONE
zpow(uint256) := TMP_41(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
result += 0xa184897c363c3 * zpow / ONE

IRs:
TMP_42(uint256) = 2841449829983171 * zpow
TMP_43(uint256) = TMP_42 / ONE
result(uint256) = result + TMP_43"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_44(uint256) = zpow * z
TMP_45(uint256) = TMP_44 / ONE
zpow(uint256) := TMP_45(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
result += 0xffe5fe2c4586 * zpow / ONE

IRs:
TMP_46(uint256) = 281363276907910 * zpow
TMP_47(uint256) = TMP_46 / ONE
result(uint256) = result + TMP_47"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_48(uint256) = zpow * z
TMP_49(uint256) = TMP_48 / ONE
zpow(uint256) := TMP_49(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
result += 0x162c0223a5c8 * zpow / ONE

IRs:
TMP_50(uint256) = 24378270262728 * zpow
TMP_51(uint256) = TMP_50 / ONE
result(uint256) = result + TMP_51"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_52(uint256) = zpow * z
TMP_53(uint256) = TMP_52 / ONE
zpow(uint256) := TMP_53(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
result += 0x1b5253d395e * zpow / ONE

IRs:
TMP_54(uint256) = 1877525477726 * zpow
TMP_55(uint256) = TMP_54 / ONE
result(uint256) = result + TMP_55"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_56(uint256) = zpow * z
TMP_57(uint256) = TMP_56 / ONE
zpow(uint256) := TMP_57(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
result += 0x1e4cf5158b * zpow / ONE

IRs:
TMP_58(uint256) = 130140149131 * zpow
TMP_59(uint256) = TMP_58 / ONE
result(uint256) = result + TMP_59"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_60(uint256) = zpow * z
TMP_61(uint256) = TMP_60 / ONE
zpow(uint256) := TMP_61(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
result += 0x1e8cac735 * zpow / ONE

IRs:
TMP_62(uint256) = 8200570677 * zpow
TMP_63(uint256) = TMP_62 / ONE
result(uint256) = result + TMP_63"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_64(uint256) = zpow * z
TMP_65(uint256) = TMP_64 / ONE
zpow(uint256) := TMP_65(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
result += 0x1c3bd650 * zpow / ONE

IRs:
TMP_66(uint256) = 473683536 * zpow
TMP_67(uint256) = TMP_66 / ONE
result(uint256) = result + TMP_67"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_68(uint256) = zpow * z
TMP_69(uint256) = TMP_68 / ONE
zpow(uint256) := TMP_69(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
result += 0x1816193 * zpow / ONE

IRs:
TMP_70(uint256) = 25256339 * zpow
TMP_71(uint256) = TMP_70 / ONE
result(uint256) = result + TMP_71"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_72(uint256) = zpow * z
TMP_73(uint256) = TMP_72 / ONE
zpow(uint256) := TMP_73(uint256)"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
result += 0x131496 * zpow / ONE

IRs:
TMP_74(uint256) = 1250454 * zpow
TMP_75(uint256) = TMP_74 / ONE
result(uint256) = result + TMP_75"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_76(uint256) = zpow * z
TMP_77(uint256) = TMP_76 / ONE
zpow(uint256) := TMP_77(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
result += 0xe1b7 * zpow / ONE

IRs:
TMP_78(uint256) = 57783 * zpow
TMP_79(uint256) = TMP_78 / ONE
result(uint256) = result + TMP_79"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
zpow = zpow * z / ONE

IRs:
TMP_80(uint256) = zpow * z
TMP_81(uint256) = TMP_80 / ONE
zpow(uint256) := TMP_81(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
result += 0x9c7 * zpow / ONE

IRs:
TMP_82(uint256) = 2503 * zpow
TMP_83(uint256) = TMP_82 / ONE
result(uint256) = result + TMP_83"];
46->47;
47[label="Node Type: IF 47

EXPRESSION:
shift >= 0

IRs:
TMP_84(bool) = shift >= 0
CONDITION TMP_84"];
47->48[label="True"];
47->52[label="False"];
48[label="Node Type: IF 48

EXPRESSION:
result >> (256 - shift) > 0

IRs:
TMP_85(uint256) = 256 - shift
TMP_86(uint256) = result >> TMP_85
TMP_87(bool) = TMP_86 > 0
CONDITION TMP_87"];
48->49[label="True"];
48->50[label="False"];
49[label="Node Type: RETURN 49

EXPRESSION:
(2 ** 256 - 1)

IRs:
TMP_88(uint256) = 2 ** 256
TMP_89(uint256) = TMP_88 - 1
RETURN TMP_89"];
50[label="Node Type: END_IF 50
"];
50->51;
51[label="Node Type: RETURN 51

EXPRESSION:
result << shift

IRs:
TMP_90(uint256) = result << shift
RETURN TMP_90"];
52[label="Node Type: RETURN 52

EXPRESSION:
result >> (- shift)

IRs:
TMP_91(int256) = 0 - shift
TMP_92(uint256) = result >> TMP_91
RETURN TMP_92"];
}
// Function: 7493.sol-Math-floorLog2(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lo = - 64

IRs:
TMP_203(uint256) = 0 - 64
lo(int256) := TMP_203(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hi = 193

IRs:
hi(int256) := 193(int256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
mid = (hi + lo) >> 1

IRs:
TMP_204(int256) = hi + lo
TMP_205(int256) = TMP_204 >> 1
mid(int256) := TMP_205(int256)"];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
(lo + 1) < hi

IRs:
TMP_206(int256) = lo + 1
TMP_207(bool) = TMP_206 < hi
CONDITION TMP_207"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
mid < 0 && x << uint256(- mid) < ONE || mid >= 0 && x >> uint256(mid) < ONE

IRs:
TMP_208(bool) = mid < 0
TMP_209(int256) = 0 - mid
TMP_210 = CONVERT TMP_209 to uint256
TMP_211(uint256) = x << TMP_210
TMP_212(bool) = TMP_211 < ONE
TMP_213(bool) = TMP_208 && TMP_212
TMP_214(bool) = mid >= 0
TMP_215 = CONVERT mid to uint256
TMP_216(uint256) = x >> TMP_215
TMP_217(bool) = TMP_216 < ONE
TMP_218(bool) = TMP_214 && TMP_217
TMP_219(bool) = TMP_213 || TMP_218
CONDITION TMP_219"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
hi = mid

IRs:
hi(int256) := mid(int256)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lo = mid

IRs:
lo(int256) := mid(int256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
mid = (hi + lo) >> 1

IRs:
TMP_220(int256) = hi + lo
TMP_221(int256) = TMP_220 >> 1
mid(int256) := TMP_221(int256)"];
10->5;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
lo

IRs:
RETURN lo"];
}
// Function: 7493.sol-Math-ln(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x > 0)

IRs:
TMP_93(bool) = x > 0
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ilog2 = floorLog2(x)

IRs:
TMP_95(int256) = INTERNAL_CALL, Math.floorLog2(uint256)(x)
ilog2(int256) := TMP_95(int256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
ilog2 < 0

IRs:
TMP_96(bool) = ilog2 < 0
CONDITION TMP_96"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
z = int256(x << uint256(- ilog2))

IRs:
TMP_97(int256) = 0 - ilog2
TMP_98 = CONVERT TMP_97 to uint256
TMP_99(uint256) = x << TMP_98
TMP_100 = CONVERT TMP_99 to int256
z(int256) := TMP_100(int256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = int256(x >> uint256(ilog2))

IRs:
TMP_101 = CONVERT ilog2 to uint256
TMP_102(uint256) = x >> TMP_101
TMP_103 = CONVERT TMP_102 to int256
z(int256) := TMP_103(int256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
term = (z - int256(ONE)) * int256(ONE) / (z + int256(ONE))

IRs:
TMP_104 = CONVERT ONE to int256
TMP_105(int256) = z - TMP_104
TMP_106 = CONVERT ONE to int256
TMP_107(int256) = TMP_105 * TMP_106
TMP_108 = CONVERT ONE to int256
TMP_109(int256) = z + TMP_108
TMP_110(int256) = TMP_107 / TMP_109
term(int256) := TMP_110(int256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
halflnz = term

IRs:
halflnz(int256) := term(int256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
termpow = term * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_111(int256) = term * term
TMP_112 = CONVERT ONE to int256
TMP_113(int256) = TMP_111 / TMP_112
TMP_114(int256) = TMP_113 * term
TMP_115 = CONVERT ONE to int256
TMP_116(int256) = TMP_114 / TMP_115
termpow(int256) := TMP_116(int256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
halflnz += termpow / 3

IRs:
TMP_117(int256) = termpow / 3
halflnz(int256) = halflnz + TMP_117"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_118(int256) = termpow * term
TMP_119 = CONVERT ONE to int256
TMP_120(int256) = TMP_118 / TMP_119
TMP_121(int256) = TMP_120 * term
TMP_122 = CONVERT ONE to int256
TMP_123(int256) = TMP_121 / TMP_122
termpow(int256) := TMP_123(int256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
halflnz += termpow / 5

IRs:
TMP_124(int256) = termpow / 5
halflnz(int256) = halflnz + TMP_124"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_125(int256) = termpow * term
TMP_126 = CONVERT ONE to int256
TMP_127(int256) = TMP_125 / TMP_126
TMP_128(int256) = TMP_127 * term
TMP_129 = CONVERT ONE to int256
TMP_130(int256) = TMP_128 / TMP_129
termpow(int256) := TMP_130(int256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
halflnz += termpow / 7

IRs:
TMP_131(int256) = termpow / 7
halflnz(int256) = halflnz + TMP_131"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_132(int256) = termpow * term
TMP_133 = CONVERT ONE to int256
TMP_134(int256) = TMP_132 / TMP_133
TMP_135(int256) = TMP_134 * term
TMP_136 = CONVERT ONE to int256
TMP_137(int256) = TMP_135 / TMP_136
termpow(int256) := TMP_137(int256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
halflnz += termpow / 9

IRs:
TMP_138(int256) = termpow / 9
halflnz(int256) = halflnz + TMP_138"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_139(int256) = termpow * term
TMP_140 = CONVERT ONE to int256
TMP_141(int256) = TMP_139 / TMP_140
TMP_142(int256) = TMP_141 * term
TMP_143 = CONVERT ONE to int256
TMP_144(int256) = TMP_142 / TMP_143
termpow(int256) := TMP_144(int256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
halflnz += termpow / 11

IRs:
TMP_145(int256) = termpow / 11
halflnz(int256) = halflnz + TMP_145"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_146(int256) = termpow * term
TMP_147 = CONVERT ONE to int256
TMP_148(int256) = TMP_146 / TMP_147
TMP_149(int256) = TMP_148 * term
TMP_150 = CONVERT ONE to int256
TMP_151(int256) = TMP_149 / TMP_150
termpow(int256) := TMP_151(int256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
halflnz += termpow / 13

IRs:
TMP_152(int256) = termpow / 13
halflnz(int256) = halflnz + TMP_152"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_153(int256) = termpow * term
TMP_154 = CONVERT ONE to int256
TMP_155(int256) = TMP_153 / TMP_154
TMP_156(int256) = TMP_155 * term
TMP_157 = CONVERT ONE to int256
TMP_158(int256) = TMP_156 / TMP_157
termpow(int256) := TMP_158(int256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
halflnz += termpow / 15

IRs:
TMP_159(int256) = termpow / 15
halflnz(int256) = halflnz + TMP_159"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_160(int256) = termpow * term
TMP_161 = CONVERT ONE to int256
TMP_162(int256) = TMP_160 / TMP_161
TMP_163(int256) = TMP_162 * term
TMP_164 = CONVERT ONE to int256
TMP_165(int256) = TMP_163 / TMP_164
termpow(int256) := TMP_165(int256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
halflnz += termpow / 17

IRs:
TMP_166(int256) = termpow / 17
halflnz(int256) = halflnz + TMP_166"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_167(int256) = termpow * term
TMP_168 = CONVERT ONE to int256
TMP_169(int256) = TMP_167 / TMP_168
TMP_170(int256) = TMP_169 * term
TMP_171 = CONVERT ONE to int256
TMP_172(int256) = TMP_170 / TMP_171
termpow(int256) := TMP_172(int256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
halflnz += termpow / 19

IRs:
TMP_173(int256) = termpow / 19
halflnz(int256) = halflnz + TMP_173"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_174(int256) = termpow * term
TMP_175 = CONVERT ONE to int256
TMP_176(int256) = TMP_174 / TMP_175
TMP_177(int256) = TMP_176 * term
TMP_178 = CONVERT ONE to int256
TMP_179(int256) = TMP_177 / TMP_178
termpow(int256) := TMP_179(int256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
halflnz += termpow / 21

IRs:
TMP_180(int256) = termpow / 21
halflnz(int256) = halflnz + TMP_180"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_181(int256) = termpow * term
TMP_182 = CONVERT ONE to int256
TMP_183(int256) = TMP_181 / TMP_182
TMP_184(int256) = TMP_183 * term
TMP_185 = CONVERT ONE to int256
TMP_186(int256) = TMP_184 / TMP_185
termpow(int256) := TMP_186(int256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
halflnz += termpow / 23

IRs:
TMP_187(int256) = termpow / 23
halflnz(int256) = halflnz + TMP_187"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
termpow = termpow * term / int256(ONE) * term / int256(ONE)

IRs:
TMP_188(int256) = termpow * term
TMP_189 = CONVERT ONE to int256
TMP_190(int256) = TMP_188 / TMP_189
TMP_191(int256) = TMP_190 * term
TMP_192 = CONVERT ONE to int256
TMP_193(int256) = TMP_191 / TMP_192
termpow(int256) := TMP_193(int256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
halflnz += termpow / 25

IRs:
TMP_194(int256) = termpow / 25
halflnz(int256) = halflnz + TMP_194"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(ilog2 * int256(ONE)) * int256(ONE) / int256(LOG2_E) + 2 * halflnz

IRs:
TMP_195 = CONVERT ONE to int256
TMP_196(int256) = ilog2 * TMP_195
TMP_197 = CONVERT ONE to int256
TMP_198(int256) = TMP_196 * TMP_197
TMP_199 = CONVERT LOG2_E to int256
TMP_200(int256) = TMP_198 / TMP_199
TMP_201(uint256) = 2 * halflnz
TMP_202(int256) = TMP_200 + TMP_201
RETURN TMP_202"];
}
// Function: 7493.sol-Math-max(int256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nums.length > 0)

IRs:
REF_0 -> LENGTH nums
TMP_222(bool) = REF_0 > 0
TMP_223(None) = SOLIDITY_CALL require(bool)(TMP_222)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxNum = - 2 ** 255

IRs:
TMP_224(uint256) = 0 - 2
TMP_225(uint256) = TMP_224 ** 255
maxNum(int256) := TMP_225(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < nums.length

IRs:
REF_1 -> LENGTH nums
TMP_226(bool) = i < REF_1
CONDITION TMP_226"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
nums[i] > maxNum

IRs:
REF_2(int256) -> nums[i]
TMP_227(bool) = REF_2 > maxNum
CONDITION TMP_227"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
maxNum = nums[i]

IRs:
REF_3(int256) -> nums[i]
maxNum(int256) := REF_3(int256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_228(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
maxNum

IRs:
RETURN maxNum"];
}
// Function: 7493.sol-Math-mul(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToMul(a,b))

IRs:
TMP_275(bool) = INTERNAL_CALL, Math.safeToMul(int256,int256)(a,b)
TMP_276(None) = SOLIDITY_CALL require(bool)(TMP_275)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a * b

IRs:
TMP_277(int256) = a * b
RETURN TMP_277"];
}
// Function: 7493.sol-Math-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToMul(a,b))

IRs:
TMP_243(bool) = INTERNAL_CALL, Math.safeToMul(uint256,uint256)(a,b)
TMP_244(None) = SOLIDITY_CALL require(bool)(TMP_243)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a * b

IRs:
TMP_245(uint256) = a * b
RETURN TMP_245"];
}
// Function: 7493.sol-Math-safeToAdd(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b >= 0 && a + b >= a) || (b < 0 && a + b < a)

IRs:
TMP_246(bool) = b >= 0
TMP_247(int256) = a + b
TMP_248(bool) = TMP_247 >= a
TMP_249(bool) = TMP_246 && TMP_248
TMP_250(bool) = b < 0
TMP_251(int256) = a + b
TMP_252(bool) = TMP_251 < a
TMP_253(bool) = TMP_250 && TMP_252
TMP_254(bool) = TMP_249 || TMP_253
RETURN TMP_254"];
}
// Function: 7493.sol-Math-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a + b >= a

IRs:
TMP_229(uint256) = a + b
TMP_230(bool) = TMP_229 >= a
RETURN TMP_230"];
}
// Function: 7493.sol-Math-safeToMul(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b == 0) || (a * b / b == a)

IRs:
TMP_264(bool) = b == 0
TMP_265(int256) = a * b
TMP_266(int256) = TMP_265 / b
TMP_267(bool) = TMP_266 == a
TMP_268(bool) = TMP_264 || TMP_267
RETURN TMP_268"];
}
// Function: 7493.sol-Math-safeToMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
b == 0 || a * b / b == a

IRs:
TMP_232(bool) = b == 0
TMP_233(uint256) = a * b
TMP_234(uint256) = TMP_233 / b
TMP_235(bool) = TMP_234 == a
TMP_236(bool) = TMP_232 || TMP_235
RETURN TMP_236"];
}
// Function: 7493.sol-Math-safeToSub(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b >= 0 && a - b <= a) || (b < 0 && a - b > a)

IRs:
TMP_255(bool) = b >= 0
TMP_256(int256) = a - b
TMP_257(bool) = TMP_256 <= a
TMP_258(bool) = TMP_255 && TMP_257
TMP_259(bool) = b < 0
TMP_260(int256) = a - b
TMP_261(bool) = TMP_260 > a
TMP_262(bool) = TMP_259 && TMP_261
TMP_263(bool) = TMP_258 || TMP_262
RETURN TMP_263"];
}
// Function: 7493.sol-Math-safeToSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a >= b

IRs:
TMP_231(bool) = a >= b
RETURN TMP_231"];
}
// Function: 7493.sol-Math-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ONE = 0x10000000000000000

IRs:
ONE(uint256) := 18446744073709551616(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
LN2 = 0xb17217f7d1cf79ac

IRs:
LN2(uint256) := 12786308645202655660(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
LOG2_E = 0x171547652b82fe177

IRs:
LOG2_E(uint256) := 26613026195688644983(uint256)"];
}
// Function: 7493.sol-Math-sub(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToSub(a,b))

IRs:
TMP_272(bool) = INTERNAL_CALL, Math.safeToSub(int256,int256)(a,b)
TMP_273(None) = SOLIDITY_CALL require(bool)(TMP_272)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_274(int256) = a - b
RETURN TMP_274"];
}
// Function: 7493.sol-Math-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToSub(a,b))

IRs:
TMP_240(bool) = INTERNAL_CALL, Math.safeToSub(uint256,uint256)(a,b)
TMP_241(None) = SOLIDITY_CALL require(bool)(TMP_240)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_242(uint256) = a - b
RETURN TMP_242"];
}
// Function: 7493.sol-Proxy-Proxy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_masterCopy != 0)

IRs:
TMP_278(bool) = _masterCopy != 0
TMP_279(None) = SOLIDITY_CALL require(bool)(TMP_278)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
masterCopy = _masterCopy

IRs:
masterCopy(address) := _masterCopy(address)"];
}
// Function: 7493.sol-Proxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_masterCopy = masterCopy

IRs:
_masterCopy(address) := masterCopy(address)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
}
// Function: 7493.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances[owner][spender]

IRs:
REF_23(mapping(address => uint256)) -> allowances[owner]
REF_24(uint256) -> REF_23[spender]
RETURN REF_24"];
}
// Function: 7493.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowances[msg.sender][spender] = value

IRs:
REF_21(mapping(address => uint256)) -> allowances[msg.sender]
REF_22(uint256) -> REF_21[spender]
REF_22(uint256) (->allowances) := value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender,spender,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 7493.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[owner]

IRs:
REF_25(uint256) -> balances[owner]
RETURN REF_25"];
}
// Function: 7493.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalTokens

IRs:
RETURN totalTokens"];
}
// Function: 7493.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! balances[msg.sender].safeToSub(value) || ! balances[to].safeToAdd(value)

IRs:
REF_4(uint256) -> balances[msg.sender]
TMP_280(bool) = LIBRARY_CALL, dest:Math, function:Math.safeToSub(uint256,uint256), arguments:['REF_4', 'value'] 
TMP_281 = UnaryType.BANG TMP_280 
REF_6(uint256) -> balances[to]
TMP_282(bool) = LIBRARY_CALL, dest:Math, function:Math.safeToAdd(uint256,uint256), arguments:['REF_6', 'value'] 
TMP_283 = UnaryType.BANG TMP_282 
TMP_284(bool) = TMP_281 || TMP_283
CONDITION TMP_284"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] -= value

IRs:
REF_8(uint256) -> balances[msg.sender]
REF_8(-> balances) = REF_8 - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[to] += value

IRs:
REF_9(uint256) -> balances[to]
REF_9(-> balances) = REF_9 + value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,to,value)

IRs:
Emit Transfer(msg.sender,to,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 7493.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! balances[from].safeToSub(value) || ! allowances[from][msg.sender].safeToSub(value) || ! balances[to].safeToAdd(value)

IRs:
REF_10(uint256) -> balances[from]
TMP_286(bool) = LIBRARY_CALL, dest:Math, function:Math.safeToSub(uint256,uint256), arguments:['REF_10', 'value'] 
TMP_287 = UnaryType.BANG TMP_286 
REF_12(mapping(address => uint256)) -> allowances[from]
REF_13(uint256) -> REF_12[msg.sender]
TMP_288(bool) = LIBRARY_CALL, dest:Math, function:Math.safeToSub(uint256,uint256), arguments:['REF_13', 'value'] 
TMP_289 = UnaryType.BANG TMP_288 
TMP_290(bool) = TMP_287 || TMP_289
REF_15(uint256) -> balances[to]
TMP_291(bool) = LIBRARY_CALL, dest:Math, function:Math.safeToAdd(uint256,uint256), arguments:['REF_15', 'value'] 
TMP_292 = UnaryType.BANG TMP_291 
TMP_293(bool) = TMP_290 || TMP_292
CONDITION TMP_293"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[from] -= value

IRs:
REF_17(uint256) -> balances[from]
REF_17(-> balances) = REF_17 - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowances[from][msg.sender] -= value

IRs:
REF_18(mapping(address => uint256)) -> allowances[from]
REF_19(uint256) -> REF_18[msg.sender]
REF_19(-> allowances) = REF_19 - value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[to] += value

IRs:
REF_20(uint256) -> balances[to]
REF_20(-> balances) = REF_20 + value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from,to,value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 7493.sol-Token-allowance(address,address)
digraph{
}
// Function: 7493.sol-Token-approve(address,uint256)
digraph{
}
// Function: 7493.sol-Token-balanceOf(address)
digraph{
}
// Function: 7493.sol-Token-totalSupply()
digraph{
}
// Function: 7493.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 7493.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 7493.sol-TokenFRT-TokenFRT(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_312 = CONVERT 0 to address
TMP_313(bool) = _owner != TMP_312
TMP_314(None) = SOLIDITY_CALL require(bool)(TMP_313)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 7493.sol-TokenFRT-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToAdd(a,b))

IRs:
TMP_344(bool) = INTERNAL_CALL, TokenFRT.safeToAdd(uint256,uint256)(a,b)
TMP_345(None) = SOLIDITY_CALL require(bool)(TMP_344)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a + b

IRs:
TMP_346(uint256) = a + b
RETURN TMP_346"];
}
// Function: 7493.sol-TokenFRT-allowance(address,address)
digraph{
}
// Function: 7493.sol-TokenFRT-approve(address,uint256)
digraph{
}
// Function: 7493.sol-TokenFRT-balanceOf(address)
digraph{
}
// Function: 7493.sol-TokenFRT-lockTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
amount = min(amount,balances[msg.sender])

IRs:
REF_50(uint256) -> balances[msg.sender]
TMP_329(uint256) = INTERNAL_CALL, TokenFRT.min(uint256,uint256)(amount,REF_50)
amount(uint256) := TMP_329(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = sub(balances[msg.sender],amount)

IRs:
REF_51(uint256) -> balances[msg.sender]
REF_52(uint256) -> balances[msg.sender]
TMP_330(uint256) = INTERNAL_CALL, TokenFRT.sub(uint256,uint256)(REF_52,amount)
REF_51(uint256) (->balances) := TMP_330(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lockedTokenBalances[msg.sender] = add(lockedTokenBalances[msg.sender],amount)

IRs:
REF_53(uint256) -> lockedTokenBalances[msg.sender]
REF_54(uint256) -> lockedTokenBalances[msg.sender]
TMP_331(uint256) = INTERNAL_CALL, TokenFRT.add(uint256,uint256)(REF_54,amount)
REF_53(uint256) (->lockedTokenBalances) := TMP_331(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalAmountLocked = lockedTokenBalances[msg.sender]

IRs:
REF_55(uint256) -> lockedTokenBalances[msg.sender]
totalAmountLocked(uint256) := REF_55(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
totalAmountLocked

IRs:
RETURN totalAmountLocked"];
}
// Function: 7493.sol-TokenFRT-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a < b

IRs:
TMP_340(bool) = a < b
CONDITION TMP_340"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
a

IRs:
RETURN a"];
3[label="Node Type: RETURN 3

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 7493.sol-TokenFRT-mintTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == minter)

IRs:
TMP_325(bool) = msg.sender == minter
TMP_326(None) = SOLIDITY_CALL require(bool)(TMP_325)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lockedTokenBalances[user] = add(lockedTokenBalances[user],amount)

IRs:
REF_48(uint256) -> lockedTokenBalances[user]
REF_49(uint256) -> lockedTokenBalances[user]
TMP_327(uint256) = INTERNAL_CALL, TokenFRT.add(uint256,uint256)(REF_49,amount)
REF_48(uint256) (->lockedTokenBalances) := TMP_327(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalTokens = add(totalTokens,amount)

IRs:
TMP_328(uint256) = INTERNAL_CALL, TokenFRT.add(uint256,uint256)(totalTokens,amount)
totalTokens(uint256) := TMP_328(uint256)"];
}
// Function: 7493.sol-TokenFRT-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a + b >= a

IRs:
TMP_341(uint256) = a + b
TMP_342(bool) = TMP_341 >= a
RETURN TMP_342"];
}
// Function: 7493.sol-TokenFRT-safeToSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a >= b

IRs:
TMP_343(bool) = a >= b
RETURN TMP_343"];
}
// Function: 7493.sol-TokenFRT-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = MGN

IRs:
symbol(string) := MGN(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Magnolia Token

IRs:
name(string) := Magnolia Token(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 7493.sol-TokenFRT-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToSub(a,b))

IRs:
TMP_347(bool) = INTERNAL_CALL, TokenFRT.safeToSub(uint256,uint256)(a,b)
TMP_348(None) = SOLIDITY_CALL require(bool)(TMP_347)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_349(uint256) = a - b
RETURN TMP_349"];
}
// Function: 7493.sol-TokenFRT-totalSupply()
digraph{
}
// Function: 7493.sol-TokenFRT-transfer(address,uint256)
digraph{
}
// Function: 7493.sol-TokenFRT-transferFrom(address,address,uint256)
digraph{
}
// Function: 7493.sol-TokenFRT-unlockTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
amount = min(amount,lockedTokenBalances[msg.sender])

IRs:
REF_56(uint256) -> lockedTokenBalances[msg.sender]
TMP_332(uint256) = INTERNAL_CALL, TokenFRT.min(uint256,uint256)(amount,REF_56)
amount(uint256) := TMP_332(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
amount > 0

IRs:
TMP_333(bool) = amount > 0
CONDITION TMP_333"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lockedTokenBalances[msg.sender] = sub(lockedTokenBalances[msg.sender],amount)

IRs:
REF_57(uint256) -> lockedTokenBalances[msg.sender]
REF_58(uint256) -> lockedTokenBalances[msg.sender]
TMP_334(uint256) = INTERNAL_CALL, TokenFRT.sub(uint256,uint256)(REF_58,amount)
REF_57(uint256) (->lockedTokenBalances) := TMP_334(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unlockedTokens[msg.sender].amountUnlocked = add(unlockedTokens[msg.sender].amountUnlocked,amount)

IRs:
REF_59(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_60(uint256) -> REF_59.amountUnlocked
REF_61(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_62(uint256) -> REF_61.amountUnlocked
TMP_335(uint256) = INTERNAL_CALL, TokenFRT.add(uint256,uint256)(REF_62,amount)
REF_60(uint256) (->unlockedTokens) := TMP_335(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unlockedTokens[msg.sender].withdrawalTime = now + 86400

IRs:
REF_63(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_64(uint256) -> REF_63.withdrawalTime
TMP_336(uint256) = now + 86400
REF_64(uint256) (->unlockedTokens) := TMP_336(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalAmountUnlocked = unlockedTokens[msg.sender].amountUnlocked

IRs:
REF_65(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_66(uint256) -> REF_65.amountUnlocked
totalAmountUnlocked(uint256) := REF_66(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
withdrawalTime = unlockedTokens[msg.sender].withdrawalTime

IRs:
REF_67(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_68(uint256) -> REF_67.withdrawalTime
withdrawalTime(uint256) := REF_68(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(totalAmountUnlocked,withdrawalTime)

IRs:
RETURN totalAmountUnlocked,withdrawalTime"];
}
// Function: 7493.sol-TokenFRT-updateMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_315(bool) = msg.sender == owner
TMP_316(None) = SOLIDITY_CALL require(bool)(TMP_315)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_minter != address(0))

IRs:
TMP_317 = CONVERT 0 to address
TMP_318(bool) = _minter != TMP_317
TMP_319(None) = SOLIDITY_CALL require(bool)(TMP_318)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
minter = _minter

IRs:
minter(address) := _minter(address)"];
}
// Function: 7493.sol-TokenFRT-updateOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_320(bool) = msg.sender == owner
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_322 = CONVERT 0 to address
TMP_323(bool) = _owner != TMP_322
TMP_324(None) = SOLIDITY_CALL require(bool)(TMP_323)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 7493.sol-TokenFRT-withdrawUnlockedTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(unlockedTokens[msg.sender].withdrawalTime < now)

IRs:
REF_69(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_70(uint256) -> REF_69.withdrawalTime
TMP_337(bool) = REF_70 < now
TMP_338(None) = SOLIDITY_CALL require(bool)(TMP_337)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = add(balances[msg.sender],unlockedTokens[msg.sender].amountUnlocked)

IRs:
REF_71(uint256) -> balances[msg.sender]
REF_72(uint256) -> balances[msg.sender]
REF_73(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_74(uint256) -> REF_73.amountUnlocked
TMP_339(uint256) = INTERNAL_CALL, TokenFRT.add(uint256,uint256)(REF_72,REF_74)
REF_71(uint256) (->balances) := TMP_339(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unlockedTokens[msg.sender].amountUnlocked = 0

IRs:
REF_75(TokenFRT.unlockedToken) -> unlockedTokens[msg.sender]
REF_76(uint256) -> REF_75.amountUnlocked
REF_76(uint256) (->unlockedTokens) := 0(uint256)"];
}
}
