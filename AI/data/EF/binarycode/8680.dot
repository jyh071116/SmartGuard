digraph G {
// Function: 8680.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_11(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8680.sol-DSAuth-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 8680.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_5 = CONVERT this to address
TMP_6(bool) = src == TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_7(bool) = src == owner
CONDITION TMP_7"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_8 = CONVERT 0 to DSAuthority
TMP_9(bool) = authority == TMP_8
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_10"];
}
// Function: 8680.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 8680.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 8680.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 8680.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 8680.sol-DSProxy-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_41(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8680.sol-DSProxy-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 8680.sol-DSProxy-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(setCache(_cacheAddr))

IRs:
TMP_25(bool) = INTERNAL_CALL, DSProxy.setCache(address)(_cacheAddr)
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
}
// Function: 8680.sol-DSProxy-execute(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_target != 0x0)

IRs:
TMP_31(bool) = _target != 0
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->6;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
response

IRs:
RETURN response"];
}
// Function: 8680.sol-DSProxy-execute(bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
target = cache.read(_code)

IRs:
TMP_27(address) = HIGH_LEVEL_CALL, dest:cache(DSProxyCache), function:read, arguments:['_code']  
target(address) := TMP_27(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
target == 0x0

IRs:
TMP_28(bool) = target == 0
CONDITION TMP_28"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
target = cache.write(_code)

IRs:
TMP_29(address) = HIGH_LEVEL_CALL, dest:cache(DSProxyCache), function:write, arguments:['_code']  
target(address) := TMP_29(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
response = execute(target,_data)

IRs:
TMP_30(bytes32) = INTERNAL_CALL, DSProxy.execute(address,bytes)(target,_data)
response(bytes32) := TMP_30(bytes32)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(target,response)

IRs:
RETURN target,response"];
}
// Function: 8680.sol-DSProxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 8680.sol-DSProxy-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_19 = CONVERT this to address
TMP_20(bool) = src == TMP_19
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_21(bool) = src == owner
CONDITION TMP_21"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_22 = CONVERT 0 to DSAuthority
TMP_23(bool) = authority == TMP_22
CONDITION TMP_23"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_24(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_24"];
}
// Function: 8680.sol-DSProxy-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 8680.sol-DSProxy-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 8680.sol-DSProxy-setCache(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cacheAddr != 0x0)

IRs:
TMP_35(bool) = _cacheAddr != 0
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cache = DSProxyCache(_cacheAddr)

IRs:
TMP_37 = CONVERT _cacheAddr to DSProxyCache
cache(DSProxyCache) := TMP_37(DSProxyCache)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 8680.sol-DSProxy-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 8680.sol-DSProxyCache-read(bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
hash = keccak256()(_code)

IRs:
TMP_52(bytes32) = SOLIDITY_CALL keccak256()(_code)
hash(bytes32) := TMP_52(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
cache[hash]

IRs:
REF_6(address) -> cache[hash]
RETURN REF_6"];
}
// Function: 8680.sol-DSProxyCache-write(bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
hash = keccak256()(_code)

IRs:
TMP_53(bytes32) = SOLIDITY_CALL keccak256()(_code)
hash(bytes32) := TMP_53(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cache[hash] = target

IRs:
REF_7(address) -> cache[hash]
REF_7(address) (->cache) := target(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
target

IRs:
RETURN target"];
}
// Function: 8680.sol-DSProxyFactory-build()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = build(msg.sender)

IRs:
TMP_43(DSProxy) = INTERNAL_CALL, DSProxyFactory.build(address)(msg.sender)
proxy(DSProxy) := TMP_43(DSProxy)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
proxy

IRs:
RETURN proxy"];
}
// Function: 8680.sol-DSProxyFactory-build(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = new DSProxy(cache)

IRs:
TMP_45(DSProxy) = new DSProxy(cache) 
proxy(DSProxy) := TMP_45(DSProxy)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Created(msg.sender,owner,address(proxy),address(cache))

IRs:
TMP_46 = CONVERT proxy to address
TMP_47 = CONVERT cache to address
Emit Created(msg.sender,owner,TMP_46,TMP_47)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proxy.setOwner(owner)

IRs:
HIGH_LEVEL_CALL, dest:proxy(DSProxy), function:setOwner, arguments:['owner']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isProxy[proxy] = true

IRs:
REF_5(bool) -> isProxy[proxy]
REF_5(bool) (->isProxy) := True(bool)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
proxy

IRs:
RETURN proxy"];
}
// Function: 8680.sol-DSProxyFactory-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
cache = new DSProxyCache()

IRs:
TMP_51(DSProxyCache) = new DSProxyCache() 
cache(DSProxyCache) := TMP_51(DSProxyCache)"];
}
// Function: 8680.sol-ProxyRegistry-build()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proxy = build(msg.sender)

IRs:
TMP_54(DSProxy) = INTERNAL_CALL, ProxyRegistry.build(address)(msg.sender)
proxy(DSProxy) := TMP_54(DSProxy)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
proxy

IRs:
RETURN proxy"];
}
// Function: 8680.sol-ProxyRegistry-build(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(proxies[owner] == DSProxy(0) || proxies[owner].owner() != owner)

IRs:
REF_8(DSProxy) -> proxies[owner]
TMP_55 = CONVERT 0 to DSProxy
TMP_56(bool) = REF_8 == TMP_55
REF_9(DSProxy) -> proxies[owner]
TMP_57(address) = HIGH_LEVEL_CALL, dest:REF_9(DSProxy), function:owner, arguments:[]  
TMP_58(bool) = TMP_57 != owner
TMP_59(bool) = TMP_56 || TMP_58
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
proxy = factory.build(owner)

IRs:
TMP_61(DSProxy) = HIGH_LEVEL_CALL, dest:factory(DSProxyFactory), function:build, arguments:['owner']  
proxy(DSProxy) := TMP_61(DSProxy)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proxies[owner] = proxy

IRs:
REF_12(DSProxy) -> proxies[owner]
REF_12(DSProxy) (->proxies) := proxy(DSProxy)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
proxy

IRs:
RETURN proxy"];
}
// Function: 8680.sol-ProxyRegistry-constructor(DSProxyFactory)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
factory = factory_

IRs:
factory(DSProxyFactory) := factory_(DSProxyFactory)"];
}
}
