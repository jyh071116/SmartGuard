digraph G {
// Function: 1010.sol-DSWP-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][spender] = qty

IRs:
REF_26(mapping(address => uint256)) -> allowance[msg.sender]
REF_27(uint256) -> REF_26[spender]
REF_27(uint256) (->allowance) := qty(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,qty)

IRs:
Emit Approval(msg.sender,spender,qty)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1010.sol-DSWP-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
}
// Function: 1010.sol-DSWP-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
codeLength > 0

IRs:
TMP_6(bool) = codeLength > 0
RETURN TMP_6"];
}
// Function: 1010.sol-DSWP-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Darkswap

IRs:
name(string) := Darkswap(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = DSWP

IRs:
symbol(string) := DSWP(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 1e22

IRs:
totalSupply(uint256) := 10000000000000000000000(uint256)"];
}
// Function: 1010.sol-DSWP-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(qty)

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
REF_2(uint256) -> balanceOf[msg.sender]
TMP_7(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', 'qty'] 
REF_1(uint256) (->balanceOf) := TMP_7(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[target] = balanceOf[target].add(qty)

IRs:
REF_4(uint256) -> balanceOf[target]
REF_5(uint256) -> balanceOf[target]
TMP_8(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', 'qty'] 
REF_4(uint256) (->balanceOf) := TMP_8(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isContract(target)

IRs:
TMP_9(bool) = INTERNAL_CALL, DSWP.isContract(address)(target)
CONDITION TMP_9"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
TokenReceiver(target).tokenFallback(target,qty,)

IRs:
TMP_10 = CONVERT target to TokenReceiver
HIGH_LEVEL_CALL, dest:TMP_10(TokenReceiver), function:tokenFallback, arguments:['target', 'qty', '']  "];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,target,qty)

IRs:
Emit Transfer(msg.sender,target,qty)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1010.sol-DSWP-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(qty)

IRs:
REF_8(uint256) -> balanceOf[msg.sender]
REF_9(uint256) -> balanceOf[msg.sender]
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_9', 'qty'] 
REF_8(uint256) (->balanceOf) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[target] = balanceOf[target].add(qty)

IRs:
REF_11(uint256) -> balanceOf[target]
REF_12(uint256) -> balanceOf[target]
TMP_14(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', 'qty'] 
REF_11(uint256) (->balanceOf) := TMP_14(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isContract(target)

IRs:
TMP_15(bool) = INTERNAL_CALL, DSWP.isContract(address)(target)
CONDITION TMP_15"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
TokenReceiver(target).tokenFallback(target,qty,data)

IRs:
TMP_16 = CONVERT target to TokenReceiver
HIGH_LEVEL_CALL, dest:TMP_16(TokenReceiver), function:tokenFallback, arguments:['target', 'qty', 'data']  "];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,target,qty)

IRs:
Emit Transfer(msg.sender,target,qty)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1010.sol-DSWP-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[from][msg.sender] = allowance[from][msg.sender].sub(qty)

IRs:
REF_15(mapping(address => uint256)) -> allowance[from]
REF_16(uint256) -> REF_15[msg.sender]
REF_17(mapping(address => uint256)) -> allowance[from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', 'qty'] 
REF_16(uint256) (->allowance) := TMP_19(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[from] = balanceOf[from].sub(qty)

IRs:
REF_20(uint256) -> balanceOf[from]
REF_21(uint256) -> balanceOf[from]
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', 'qty'] 
REF_20(uint256) (->balanceOf) := TMP_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[to] = balanceOf[to].add(qty)

IRs:
REF_23(uint256) -> balanceOf[to]
REF_24(uint256) -> balanceOf[to]
TMP_21(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_24', 'qty'] 
REF_23(uint256) (->balanceOf) := TMP_21(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,qty)

IRs:
Emit Transfer(from,to,qty)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1010.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_3(uint256) = a + b
c(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_4(bool) = c >= a
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1010.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_0(bool) = b <= a
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_2(uint256) = a - b
RETURN TMP_2"];
}
// Function: 1010.sol-TokenReceiver-tokenFallback(address,uint256,bytes)
digraph{
}
}
