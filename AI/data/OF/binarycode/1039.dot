digraph G {
// Function: 1039.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1039.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1039.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1039.sol-ERC20-totalSupply()
digraph{
}
// Function: 1039.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1039.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1039.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1039.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1039.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1039.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1039.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1039.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1039.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1039.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1039.sol-RivetzRegistrar-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _newOwner != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1039.sol-RivetzRegistrar-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1039.sol-RivetzRegistrar-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rvt = ERC20(paymentTokenAddress)

IRs:
TMP_32 = CONVERT paymentTokenAddress to ERC20
rvt(ERC20) := TMP_32(ERC20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
paymentWalletAddress = paymentDestAddress

IRs:
paymentWalletAddress(address) := paymentDestAddress(address)"];
}
// Function: 1039.sol-RivetzRegistrar-feeToSeconds(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
feeAmount / feePerSec

IRs:
TMP_88(uint256) = feeAmount / feePerSec
RETURN TMP_88"];
2[label="Node Type: RETURN 2

EXPRESSION:
seconds_

IRs:
RETURN seconds_"];
}
// Function: 1039.sol-RivetzRegistrar-getAnnualFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
feePerSec.mul(secPerYear)

IRs:
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['feePerSec', 'secPerYear'] 
RETURN TMP_87"];
}
// Function: 1039.sol-RivetzRegistrar-isSubscribed(RivetzRegistrar.SPEntry)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now < spEntry.expiration

IRs:
REF_51(uint256) -> spEntry.expiration
TMP_89(bool) = now < REF_51
RETURN TMP_89"];
2[label="Node Type: RETURN 2

EXPRESSION:
subscribed

IRs:
RETURN subscribed"];
}
// Function: 1039.sol-RivetzRegistrar-newEntry(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_11(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_11(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(spEntry.registrant == 0)

IRs:
REF_12(address) -> spEntry.registrant
TMP_38(bool) = REF_12 == 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.expiration = now + secPerYear

IRs:
REF_13(uint256) -> spEntry.expiration
TMP_40(uint256) = now + secPerYear
REF_13(uint256) (->spEntry) := TMP_40(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SPCreated(spid)

IRs:
Emit SPCreated(spid)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
spEntry

IRs:
RETURN spEntry"];
}
// Function: 1039.sol-RivetzRegistrar-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_91(bool) = msg.sender == owner
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1039.sol-RivetzRegistrar-register(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(rvt.transferFrom(msg.sender,paymentWalletAddress,registrationFee))

IRs:
TMP_33(bool) = HIGH_LEVEL_CALL, dest:rvt(ERC20), function:transferFrom, arguments:['msg.sender', 'paymentWalletAddress', 'registrationFee']  
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
spEntry = newEntry(spid)

IRs:
TMP_35(RivetzRegistrar.SPEntry) = INTERNAL_CALL, RivetzRegistrar.newEntry(uint256)(spid)
spEntry(RivetzRegistrar.SPEntry) := TMP_35(RivetzRegistrar.SPEntry)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.registrant = msg.sender

IRs:
REF_1(address) -> spEntry.registrant
REF_1(address) (->spEntry) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
spEntry.admin = msg.sender

IRs:
REF_2(address) -> spEntry.admin
REF_2(address) (->spEntry) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
spEntry.pubKeyHash = pubKeyHash

IRs:
REF_3(uint256) -> spEntry.pubKeyHash
REF_3(uint256) (->spEntry) := pubKeyHash(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
spEntry.infoHash = infoHash

IRs:
REF_4(uint256) -> spEntry.infoHash
REF_4(uint256) (->spEntry) := infoHash(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
spEntry.valid = false

IRs:
REF_5(bool) -> spEntry.valid
REF_5(bool) (->spEntry) := False(bool)"];
}
// Function: 1039.sol-RivetzRegistrar-release(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_35(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_35(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
requireRegistrantOrGreater(spEntry)

IRs:
INTERNAL_CALL, RivetzRegistrar.requireRegistrantOrGreater(RivetzRegistrar.SPEntry)(spEntry)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.expiration = 0

IRs:
REF_36(uint256) -> spEntry.expiration
REF_36(uint256) (->spEntry) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
spEntry.registrant = address(0x1)

IRs:
REF_37(address) -> spEntry.registrant
TMP_59 = CONVERT 1 to address
REF_37(address) (->spEntry) := TMP_59(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
spEntry.admin = address(0x1)

IRs:
REF_38(address) -> spEntry.admin
TMP_60 = CONVERT 1 to address
REF_38(address) (->spEntry) := TMP_60(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
spEntry.valid = false

IRs:
REF_39(bool) -> spEntry.valid
REF_39(bool) (->spEntry) := False(bool)"];
}
// Function: 1039.sol-RivetzRegistrar-renew(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_26(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_26(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(rvt.transferFrom(msg.sender,paymentWalletAddress,payment))

IRs:
TMP_52(bool) = HIGH_LEVEL_CALL, dest:rvt(ERC20), function:transferFrom, arguments:['msg.sender', 'paymentWalletAddress', 'payment']  
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->6;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
spEntry.expiration = periodStart.add(feeToSeconds(payment))

IRs:
REF_28(uint256) -> spEntry.expiration
TMP_54(uint256) = INTERNAL_CALL, RivetzRegistrar.feeToSeconds(uint256)(payment)
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['periodStart', 'TMP_54'] 
REF_28(uint256) (->spEntry) := TMP_55(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
spEntry.expiration

IRs:
REF_30(uint256) -> spEntry.expiration
RETURN REF_30"];
6[label="Node Type: IF 6

EXPRESSION:
(spEntry.expiration > now)

IRs:
REF_31(uint256) -> spEntry.expiration
TMP_56(bool) = REF_31 > now
CONDITION TMP_56"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
periodStart = spEntry.expiration

IRs:
REF_32(uint256) -> spEntry.expiration
periodStart(uint256) := REF_32(uint256)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
periodStart = now

IRs:
periodStart(uint256) := now(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
expiration

IRs:
RETURN expiration"];
}
// Function: 1039.sol-RivetzRegistrar-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_24 = CONVERT 0 to address
owner(address) := TMP_24(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1039.sol-RivetzRegistrar-requireAdminOrGreater(RivetzRegistrar.SPEntry)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == spEntry.admin || msg.sender == spEntry.registrant || msg.sender == owner)

IRs:
REF_47(address) -> spEntry.admin
TMP_69(bool) = msg.sender == REF_47
REF_48(address) -> spEntry.registrant
TMP_70(bool) = msg.sender == REF_48
TMP_71(bool) = TMP_69 || TMP_70
TMP_72(bool) = msg.sender == owner
TMP_73(bool) = TMP_71 || TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(isSubscribed(spEntry) || msg.sender == owner)

IRs:
TMP_75(bool) = INTERNAL_CALL, RivetzRegistrar.isSubscribed(RivetzRegistrar.SPEntry)(spEntry)
TMP_76(bool) = msg.sender == owner
TMP_77(bool) = TMP_75 || TMP_76
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
}
// Function: 1039.sol-RivetzRegistrar-requireRegistrantOrGreater(RivetzRegistrar.SPEntry)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == spEntry.registrant || msg.sender == owner)

IRs:
REF_49(address) -> spEntry.registrant
TMP_79(bool) = msg.sender == REF_49
TMP_80(bool) = msg.sender == owner
TMP_81(bool) = TMP_79 || TMP_80
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(isSubscribed(spEntry) || msg.sender == owner)

IRs:
TMP_83(bool) = INTERNAL_CALL, RivetzRegistrar.isSubscribed(RivetzRegistrar.SPEntry)(spEntry)
TMP_84(bool) = msg.sender == owner
TMP_85(bool) = TMP_83 || TMP_84
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
}
// Function: 1039.sol-RivetzRegistrar-rivetzRegister(uint256,uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = newEntry(spid)

IRs:
TMP_36(RivetzRegistrar.SPEntry) = INTERNAL_CALL, RivetzRegistrar.newEntry(uint256)(spid)
spEntry(RivetzRegistrar.SPEntry) := TMP_36(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
spEntry.registrant = spidRegistrant

IRs:
REF_6(address) -> spEntry.registrant
REF_6(address) (->spEntry) := spidRegistrant(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.admin = spidAdmin

IRs:
REF_7(address) -> spEntry.admin
REF_7(address) (->spEntry) := spidAdmin(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
spEntry.pubKeyHash = pubKeyHash

IRs:
REF_8(uint256) -> spEntry.pubKeyHash
REF_8(uint256) (->spEntry) := pubKeyHash(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
spEntry.infoHash = infoHash

IRs:
REF_9(uint256) -> spEntry.infoHash
REF_9(uint256) (->spEntry) := infoHash(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
spEntry.valid = true

IRs:
REF_10(bool) -> spEntry.valid
REF_10(bool) (->spEntry) := True(bool)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 1039.sol-RivetzRegistrar-rivetzRelease(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_40(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_40(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
spEntry.registrant = address(0x1)

IRs:
REF_41(address) -> spEntry.registrant
TMP_61 = CONVERT 1 to address
REF_41(address) (->spEntry) := TMP_61(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.admin = address(0x1)

IRs:
REF_42(address) -> spEntry.admin
TMP_62 = CONVERT 1 to address
REF_42(address) (->spEntry) := TMP_62(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
spEntry.pubKeyHash = 0

IRs:
REF_43(uint256) -> spEntry.pubKeyHash
REF_43(uint256) (->spEntry) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
spEntry.infoHash = 0

IRs:
REF_44(uint256) -> spEntry.infoHash
REF_44(uint256) (->spEntry) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
spEntry.expiration = 0

IRs:
REF_45(uint256) -> spEntry.expiration
REF_45(uint256) (->spEntry) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
spEntry.valid = false

IRs:
REF_46(bool) -> spEntry.valid
REF_46(bool) (->spEntry) := False(bool)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 1039.sol-RivetzRegistrar-setAdmin(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_18(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_18(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
requireRegistrantOrGreater(spEntry)

IRs:
INTERNAL_CALL, RivetzRegistrar.requireRegistrantOrGreater(RivetzRegistrar.SPEntry)(spEntry)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.admin = admin

IRs:
REF_19(address) -> spEntry.admin
REF_19(address) (->spEntry) := admin(address)"];
}
// Function: 1039.sol-RivetzRegistrar-setExpiration(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
spEntries[spid].expiration = expiration

IRs:
REF_33(RivetzRegistrar.SPEntry) -> spEntries[spid]
REF_34(uint256) -> REF_33.expiration
REF_34(uint256) (->spEntries) := expiration(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1039.sol-RivetzRegistrar-setFees(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee = newRegistrationFee

IRs:
registrationFee(uint256) := newRegistrationFee(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
feePerSec = newAnnualFee / secPerYear

IRs:
TMP_64(uint256) = newAnnualFee / secPerYear
feePerSec(uint256) := TMP_64(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1039.sol-RivetzRegistrar-setInfo(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_22(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_22(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
requireAdminOrGreater(spEntry)

IRs:
INTERNAL_CALL, RivetzRegistrar.requireAdminOrGreater(RivetzRegistrar.SPEntry)(spEntry)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.infoHash = infoHash

IRs:
REF_23(uint256) -> spEntry.infoHash
REF_23(uint256) (->spEntry) := infoHash(uint256)"];
}
// Function: 1039.sol-RivetzRegistrar-setPaymentAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paymentWalletAddress = paymentAddress

IRs:
paymentWalletAddress(address) := paymentAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1039.sol-RivetzRegistrar-setPubKey(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_20(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_20(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
requireRegistrantOrGreater(spEntry)

IRs:
INTERNAL_CALL, RivetzRegistrar.requireRegistrantOrGreater(RivetzRegistrar.SPEntry)(spEntry)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spEntry.pubKeyHash = pubKeyHash

IRs:
REF_21(uint256) -> spEntry.pubKeyHash
REF_21(uint256) (->spEntry) := pubKeyHash(uint256)"];
}
// Function: 1039.sol-RivetzRegistrar-setRegistrant(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spEntry = spEntries[spid]

IRs:
REF_14(RivetzRegistrar.SPEntry) -> spEntries[spid]
spEntry(RivetzRegistrar.SPEntry) := REF_14(RivetzRegistrar.SPEntry)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(spEntry.registrant != 0 && spEntry.registrant != address(0x1))

IRs:
REF_15(address) -> spEntry.registrant
TMP_42(bool) = REF_15 != 0
REF_16(address) -> spEntry.registrant
TMP_43 = CONVERT 1 to address
TMP_44(bool) = REF_16 != TMP_43
TMP_45(bool) = TMP_42 && TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
requireRegistrantOrGreater(spEntry)

IRs:
INTERNAL_CALL, RivetzRegistrar.requireRegistrantOrGreater(RivetzRegistrar.SPEntry)(spEntry)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
spEntry.registrant = registrant

IRs:
REF_17(address) -> spEntry.registrant
REF_17(address) (->spEntry) := registrant(address)"];
}
// Function: 1039.sol-RivetzRegistrar-setToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rvt = ERC20(erc20Address)

IRs:
TMP_66 = CONVERT erc20Address to ERC20
rvt(ERC20) := TMP_66(ERC20)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1039.sol-RivetzRegistrar-setValid(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
spEntries[spid].valid = valid

IRs:
REF_24(RivetzRegistrar.SPEntry) -> spEntries[spid]
REF_25(bool) -> REF_24.valid
REF_25(bool) (->spEntries) := valid(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1039.sol-RivetzRegistrar-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
secPerYear = 31536000

IRs:
secPerYear(uint64) := 31536000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
defaultAnnualFee = 1000000000000000000000

IRs:
defaultAnnualFee(uint256) := 1000000000000000000000(uint256)"];
}
// Function: 1039.sol-RivetzRegistrar-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
registrationFee = 1000000000000000000000

IRs:
registrationFee(uint256) := 1000000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
feePerSec = defaultAnnualFee / secPerYear

IRs:
TMP_90(uint256) = defaultAnnualFee / secPerYear
feePerSec(uint256) := TMP_90(uint256)"];
}
// Function: 1039.sol-RivetzRegistrar-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1039.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_20(uint256) = a + b
c(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_21(bool) = c >= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1039.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_16(uint256) = a / b
RETURN TMP_16"];
}
// Function: 1039.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_11(bool) = a == 0
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_12(uint256) = a * b
c(uint256) := TMP_12(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_13(uint256) = c / a
TMP_14(bool) = TMP_13 == b
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1039.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_17(bool) = b <= a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_19(uint256) = a - b
RETURN TMP_19"];
}
}
