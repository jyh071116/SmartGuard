digraph G {
// Function: 1073.sol-AbstractToken-AbstractToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1073.sol-AbstractToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances[_owner][_spender]

IRs:
REF_19(mapping(address => uint256)) -> allowances[_owner]
REF_20(uint256) -> REF_19[_spender]
RETURN REF_20"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1073.sol-AbstractToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowances[msg.sender][_spender] = _value

IRs:
REF_17(mapping(address => uint256)) -> allowances[msg.sender]
REF_18(uint256) -> REF_17[_spender]
REF_18(uint256) (->allowances) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1073.sol-AbstractToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
accounts[_owner]

IRs:
REF_0(uint256) -> accounts[_owner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1073.sol-AbstractToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_12(bool) = a == 0
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_13(uint256) = a * b
c(uint256) := TMP_13(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_14(uint256) = c / a
TMP_15(bool) = TMP_14 == b
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-AbstractToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_21(uint256) = a + b
c(uint256) := TMP_21(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_22(bool) = c >= a
TMP_23(None) = SOLIDITY_CALL assert(bool)(TMP_22)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-AbstractToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_17(uint256) = a / b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-AbstractToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_18(bool) = b <= a
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_20(uint256) = a - b
RETURN TMP_20"];
}
// Function: 1073.sol-AbstractToken-totalSupply()
digraph{
}
// Function: 1073.sol-AbstractToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _to != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
accounts[msg.sender] < _value

IRs:
REF_1(uint256) -> accounts[msg.sender]
TMP_27(bool) = REF_1 < _value
CONDITION TMP_27"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_value > 0 && msg.sender != _to

IRs:
TMP_28(bool) = _value > 0
TMP_29(bool) = msg.sender != _to
TMP_30(bool) = TMP_28 && TMP_29
CONDITION TMP_30"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
accounts[msg.sender] = safeSub(accounts[msg.sender],_value)

IRs:
REF_2(uint256) -> accounts[msg.sender]
REF_3(uint256) -> accounts[msg.sender]
TMP_31(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_3,_value)
REF_2(uint256) (->accounts) := TMP_31(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
accounts[_to] = safeAdd(accounts[_to],_value)

IRs:
REF_4(uint256) -> accounts[_to]
REF_5(uint256) -> accounts[_to]
TMP_32(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_5,_value)
REF_4(uint256) (->accounts) := TMP_32(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1073.sol-AbstractToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = _to != TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
allowances[_from][msg.sender] < _value

IRs:
REF_6(mapping(address => uint256)) -> allowances[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_37(bool) = REF_7 < _value
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
accounts[_from] < _value

IRs:
REF_8(uint256) -> accounts[_from]
TMP_38(bool) = REF_8 < _value
CONDITION TMP_38"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_value > 0 && _from != _to

IRs:
TMP_39(bool) = _value > 0
TMP_40(bool) = _from != _to
TMP_41(bool) = TMP_39 && TMP_40
CONDITION TMP_41"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender],_value)

IRs:
REF_9(mapping(address => uint256)) -> allowances[_from]
REF_10(uint256) -> REF_9[msg.sender]
REF_11(mapping(address => uint256)) -> allowances[_from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_42(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_12,_value)
REF_10(uint256) (->allowances) := TMP_42(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
accounts[_from] = safeSub(accounts[_from],_value)

IRs:
REF_13(uint256) -> accounts[_from]
REF_14(uint256) -> accounts[_from]
TMP_43(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_14,_value)
REF_13(uint256) (->accounts) := TMP_43(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
accounts[_to] = safeAdd(accounts[_to],_value)

IRs:
REF_15(uint256) -> accounts[_to]
REF_16(uint256) -> accounts[_to]
TMP_44(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_16,_value)
REF_15(uint256) (->accounts) := TMP_44(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: RETURN 15

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1073.sol-RGLSToken-AbstractToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1073.sol-RGLSToken-RGLSToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1073.sol-RGLSToken-allowance(address,address)
digraph{
}
// Function: 1073.sol-RGLSToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowance(msg.sender,_spender) == 0 || _value == 0)

IRs:
TMP_88(uint256) = INTERNAL_CALL, AbstractToken.allowance(address,address)(msg.sender,_spender)
TMP_89(bool) = TMP_88 == 0
TMP_90(bool) = _value == 0
TMP_91(bool) = TMP_89 || TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
AbstractToken.approve(_spender,_value)

IRs:
TMP_93(bool) = INTERNAL_CALL, AbstractToken.approve(address,uint256)(_spender,_value)
RETURN TMP_93"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1073.sol-RGLSToken-balanceOf(address)
digraph{
}
// Function: 1073.sol-RGLSToken-createTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_94(bool) = msg.sender == owner
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_value > 0

IRs:
TMP_96(bool) = _value > 0
CONDITION TMP_96"];
2->3[label="True"];
2->10[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
_value > safeSub(MAX_TOKEN_COUNT,tokenCount)

IRs:
TMP_97(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(MAX_TOKEN_COUNT,tokenCount)
TMP_98(bool) = _value > TMP_97
CONDITION TMP_98"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
accounts[msg.sender] = safeAdd(accounts[msg.sender],_value)

IRs:
REF_47(uint256) -> accounts[msg.sender]
REF_48(uint256) -> accounts[msg.sender]
TMP_99(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_48,_value)
REF_47(uint256) (->accounts) := TMP_99(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenCount = safeAdd(tokenCount,_value)

IRs:
TMP_100(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tokenCount,_value)
tokenCount(uint256) := TMP_100(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(0x0,msg.sender,_value)

IRs:
Emit Transfer(0,msg.sender,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1073.sol-RGLSToken-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_119(bool) = msg.sender == owner
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender != _target)

IRs:
TMP_121(bool) = msg.sender != _target
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenAccount[_target] = freeze

IRs:
REF_50(bool) -> frozenAccount[_target]
REF_50(bool) (->frozenAccount) := freeze(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
FrozenFunds(_target,freeze)

IRs:
Emit FrozenFunds(_target,freeze)"];
}
// Function: 1073.sol-RGLSToken-freezeTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_104(bool) = msg.sender == owner
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! frozen

IRs:
TMP_106 = UnaryType.BANG frozen 
CONDITION TMP_106"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozen = true

IRs:
frozen(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Freeze()

IRs:
Emit Freeze()"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1073.sol-RGLSToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_70(bool) = a == 0
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_71(uint256) = a * b
c(uint256) := TMP_71(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_72(uint256) = c / a
TMP_73(bool) = TMP_72 == b
TMP_74(None) = SOLIDITY_CALL assert(bool)(TMP_73)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-RGLSToken-refundTokens(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_111(bool) = msg.sender == owner
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_token != address(this))

IRs:
TMP_113 = CONVERT this to address
TMP_114(bool) = _token != TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
token = AbstractToken(_token)

IRs:
TMP_116 = CONVERT _token to AbstractToken
token(AbstractToken) := TMP_116(AbstractToken)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.transfer(_refund,_value)

IRs:
TMP_117(bool) = HIGH_LEVEL_CALL, dest:token(AbstractToken), function:transfer, arguments:['_refund', '_value']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
RefundTokens(_token,_refund,_value)

IRs:
Emit RefundTokens(_token,_refund,_value)"];
}
// Function: 1073.sol-RGLSToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_79(uint256) = a + b
c(uint256) := TMP_79(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_80(bool) = c >= a
TMP_81(None) = SOLIDITY_CALL assert(bool)(TMP_80)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-RGLSToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_75(uint256) = a / b
c(uint256) := TMP_75(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-RGLSToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_76(bool) = b <= a
TMP_77(None) = SOLIDITY_CALL assert(bool)(TMP_76)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_78(uint256) = a - b
RETURN TMP_78"];
}
// Function: 1073.sol-RGLSToken-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_102(bool) = msg.sender == owner
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1073.sol-RGLSToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_TOKEN_COUNT = 60000000 * (10 ** 18)

IRs:
TMP_124(uint256) = 10 ** 18
TMP_125(uint256) = 60000000 * TMP_124
MAX_TOKEN_COUNT(uint256) := TMP_125(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Regulus Token

IRs:
name(string) := Regulus Token(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = RGLS

IRs:
symbol(string) := RGLS(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 1073.sol-RGLSToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
tokenCount = 0

IRs:
tokenCount(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
frozen = false

IRs:
frozen(bool) := False(bool)"];
}
// Function: 1073.sol-RGLSToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenCount

IRs:
RETURN tokenCount"];
2[label="Node Type: RETURN 2

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 1073.sol-RGLSToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_42(bool) -> frozenAccount[msg.sender]
TMP_82 = UnaryType.BANG REF_42 
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
frozen

IRs:
CONDITION frozen"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: RETURN 4

EXPRESSION:
AbstractToken.transfer(_to,_value)

IRs:
TMP_84(bool) = INTERNAL_CALL, AbstractToken.transfer(address,uint256)(_to,_value)
RETURN TMP_84"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1073.sol-RGLSToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_44(bool) -> frozenAccount[_from]
TMP_85 = UnaryType.BANG REF_44 
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
frozen

IRs:
CONDITION frozen"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: RETURN 4

EXPRESSION:
AbstractToken.transferFrom(_from,_to,_value)

IRs:
TMP_87(bool) = INTERNAL_CALL, AbstractToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_87"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1073.sol-RGLSToken-unfreezeTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_108(bool) = msg.sender == owner
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
frozen

IRs:
CONDITION frozen"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozen = false

IRs:
frozen(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Unfreeze()

IRs:
Emit Unfreeze()"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1073.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1073.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1073.sol-Token-allowance(address,address)
digraph{
}
// Function: 1073.sol-Token-approve(address,uint256)
digraph{
}
// Function: 1073.sol-Token-balanceOf(address)
digraph{
}
// Function: 1073.sol-Token-totalSupply()
digraph{
}
// Function: 1073.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 1073.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
