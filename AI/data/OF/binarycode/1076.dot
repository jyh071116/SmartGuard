digraph G {
// Function: 1076.sol-BaseERC20-_transfer(address,address,uint256)
digraph{
}
// Function: 1076.sol-BaseERC20-approve(address,uint256)
digraph{
}
// Function: 1076.sol-BaseERC20-approveAndCall(address,uint256,bytes)
digraph{
}
// Function: 1076.sol-BaseERC20-transfer(address,uint256)
digraph{
}
// Function: 1076.sol-BaseERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1076.sol-BaseSafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL assert(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_12(uint256) = a / b
c(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-madd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_15(uint128) = a + b
c(uint128) := TMP_15(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_16(bool) = c >= a
TMP_17(None) = SOLIDITY_CALL assert(bool)(TMP_16)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_14(bool) = x >= y
CONDITION TMP_14"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-BaseSafeMath-mdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_27(uint128) = a / b
c(uint128) := TMP_27(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-miadd(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_30(uint64) = a + b
c(uint64) := TMP_30(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_31(bool) = c >= a
TMP_32(None) = SOLIDITY_CALL assert(bool)(TMP_31)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-midiv(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_42(uint64) = a / b
c(uint64) := TMP_42(uint64)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-mimax(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_44(bool) = x >= y
CONDITION TMP_44"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-BaseSafeMath-mimin(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_43(bool) = x <= y
CONDITION TMP_43"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-BaseSafeMath-mimul(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_36(uint64) = a * b
c(uint64) := TMP_36(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_37(bool) = a == 0
TMP_38(uint64) = c / a
TMP_39(bool) = TMP_38 == b
TMP_40(bool) = TMP_37 || TMP_39
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_13(bool) = x <= y
CONDITION TMP_13"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-BaseSafeMath-misub(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_33(bool) = b <= a
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_35(uint64) = a - b
RETURN TMP_35"];
}
// Function: 1076.sol-BaseSafeMath-mmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_29(bool) = x >= y
CONDITION TMP_29"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-BaseSafeMath-mmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_28(bool) = x <= y
CONDITION TMP_28"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-BaseSafeMath-mmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_21(uint128) = a * b
c(uint128) := TMP_21(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_22(bool) = a == 0
TMP_23(uint128) = c / a
TMP_24(bool) = TMP_23 == b
TMP_25(bool) = TMP_22 || TMP_24
TMP_26(None) = SOLIDITY_CALL assert(bool)(TMP_25)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-msub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_18(bool) = b <= a
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_20(uint128) = a - b
RETURN TMP_20"];
}
// Function: 1076.sol-BaseSafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-BaseSafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_5(uint256) = a - b
RETURN TMP_5"];
}
// Function: 1076.sol-LockUtils-getLockBalance(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tempLock = 0

IRs:
tempLock(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
account == advance_mining

IRs:
TMP_45(bool) = account == advance_mining
CONDITION TMP_45"];
2->3[label="True"];
2->12[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_46(bool) = now < unlock_time_0910
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tempLock = 735000000 * 10 ** uint256(decimals)

IRs:
TMP_47 = CONVERT decimals to uint256
TMP_48(uint256) = 10 ** TMP_47
TMP_49(uint256) = 735000000 * TMP_48
tempLock(uint256) := TMP_49(uint256)"];
4->11;
5[label="Node Type: IF 5

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1210

IRs:
TMP_50(bool) = now >= unlock_time_0910
TMP_51(bool) = now < unlock_time_1210
TMP_52(bool) = TMP_50 && TMP_51
CONDITION TMP_52"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tempLock = 367500000 * 10 ** uint256(decimals)

IRs:
TMP_53 = CONVERT decimals to uint256
TMP_54(uint256) = 10 ** TMP_53
TMP_55(uint256) = 367500000 * TMP_54
tempLock(uint256) := TMP_55(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0310

IRs:
TMP_56(bool) = now >= unlock_time_1210
TMP_57(bool) = now < unlock_time_0310
TMP_58(bool) = TMP_56 && TMP_57
CONDITION TMP_58"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tempLock = 183750000 * 10 ** uint256(decimals)

IRs:
TMP_59 = CONVERT decimals to uint256
TMP_60(uint256) = 10 ** TMP_59
TMP_61(uint256) = 183750000 * TMP_60
tempLock(uint256) := TMP_61(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->113;
12[label="Node Type: IF 12

EXPRESSION:
account == community

IRs:
TMP_62(bool) = account == community
CONDITION TMP_62"];
12->13[label="True"];
12->31[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_63(bool) = now < unlock_time_0910
CONDITION TMP_63"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
tempLock = 18375000 * 6 * 10 ** uint256(decimals)

IRs:
TMP_64(uint256) = 18375000 * 6
TMP_65 = CONVERT decimals to uint256
TMP_66(uint256) = 10 ** TMP_65
TMP_67(uint256) = TMP_64 * TMP_66
tempLock(uint256) := TMP_67(uint256)"];
14->30;
15[label="Node Type: IF 15

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1010

IRs:
TMP_68(bool) = now >= unlock_time_0910
TMP_69(bool) = now < unlock_time_1010
TMP_70(bool) = TMP_68 && TMP_69
CONDITION TMP_70"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tempLock = 18375000 * 5 * 10 ** uint256(decimals)

IRs:
TMP_71(uint256) = 18375000 * 5
TMP_72 = CONVERT decimals to uint256
TMP_73(uint256) = 10 ** TMP_72
TMP_74(uint256) = TMP_71 * TMP_73
tempLock(uint256) := TMP_74(uint256)"];
16->29;
17[label="Node Type: IF 17

EXPRESSION:
now >= unlock_time_1010 && now < unlock_time_1110

IRs:
TMP_75(bool) = now >= unlock_time_1010
TMP_76(bool) = now < unlock_time_1110
TMP_77(bool) = TMP_75 && TMP_76
CONDITION TMP_77"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
tempLock = 18375000 * 4 * 10 ** uint256(decimals)

IRs:
TMP_78(uint256) = 18375000 * 4
TMP_79 = CONVERT decimals to uint256
TMP_80(uint256) = 10 ** TMP_79
TMP_81(uint256) = TMP_78 * TMP_80
tempLock(uint256) := TMP_81(uint256)"];
18->28;
19[label="Node Type: IF 19

EXPRESSION:
now >= unlock_time_1110 && now < unlock_time_1210

IRs:
TMP_82(bool) = now >= unlock_time_1110
TMP_83(bool) = now < unlock_time_1210
TMP_84(bool) = TMP_82 && TMP_83
CONDITION TMP_84"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
tempLock = 18375000 * 3 * 10 ** uint256(decimals)

IRs:
TMP_85(uint256) = 18375000 * 3
TMP_86 = CONVERT decimals to uint256
TMP_87(uint256) = 10 ** TMP_86
TMP_88(uint256) = TMP_85 * TMP_87
tempLock(uint256) := TMP_88(uint256)"];
20->27;
21[label="Node Type: IF 21

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0110

IRs:
TMP_89(bool) = now >= unlock_time_1210
TMP_90(bool) = now < unlock_time_0110
TMP_91(bool) = TMP_89 && TMP_90
CONDITION TMP_91"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
tempLock = 18375000 * 2 * 10 ** uint256(decimals)

IRs:
TMP_92(uint256) = 18375000 * 2
TMP_93 = CONVERT decimals to uint256
TMP_94(uint256) = 10 ** TMP_93
TMP_95(uint256) = TMP_92 * TMP_94
tempLock(uint256) := TMP_95(uint256)"];
22->26;
23[label="Node Type: IF 23

EXPRESSION:
now >= unlock_time_0110 && now < unlock_time_0210

IRs:
TMP_96(bool) = now >= unlock_time_0110
TMP_97(bool) = now < unlock_time_0210
TMP_98(bool) = TMP_96 && TMP_97
CONDITION TMP_98"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
tempLock = 18375000 * 1 * 10 ** uint256(decimals)

IRs:
TMP_99(uint256) = 18375000 * 1
TMP_100 = CONVERT decimals to uint256
TMP_101(uint256) = 10 ** TMP_100
TMP_102(uint256) = TMP_99 * TMP_101
tempLock(uint256) := TMP_102(uint256)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: END_IF 30
"];
30->112;
31[label="Node Type: IF 31

EXPRESSION:
account == foundation_investment

IRs:
TMP_103(bool) = account == foundation_investment
CONDITION TMP_103"];
31->32[label="True"];
31->68[label="False"];
32[label="Node Type: IF 32

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_104(bool) = now < unlock_time_0910
CONDITION TMP_104"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
tempLock = 18812500 * 12 * 10 ** uint256(decimals)

IRs:
TMP_105(uint256) = 18812500 * 12
TMP_106 = CONVERT decimals to uint256
TMP_107(uint256) = 10 ** TMP_106
TMP_108(uint256) = TMP_105 * TMP_107
tempLock(uint256) := TMP_108(uint256)"];
33->67;
34[label="Node Type: IF 34

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1010

IRs:
TMP_109(bool) = now >= unlock_time_0910
TMP_110(bool) = now < unlock_time_1010
TMP_111(bool) = TMP_109 && TMP_110
CONDITION TMP_111"];
34->35[label="True"];
34->36[label="False"];
35[label="Node Type: EXPRESSION 35

EXPRESSION:
tempLock = 18812500 * 11 * 10 ** uint256(decimals)

IRs:
TMP_112(uint256) = 18812500 * 11
TMP_113 = CONVERT decimals to uint256
TMP_114(uint256) = 10 ** TMP_113
TMP_115(uint256) = TMP_112 * TMP_114
tempLock(uint256) := TMP_115(uint256)"];
35->66;
36[label="Node Type: IF 36

EXPRESSION:
now >= unlock_time_1010 && now < unlock_time_1110

IRs:
TMP_116(bool) = now >= unlock_time_1010
TMP_117(bool) = now < unlock_time_1110
TMP_118(bool) = TMP_116 && TMP_117
CONDITION TMP_118"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
tempLock = 18812500 * 10 * 10 ** uint256(decimals)

IRs:
TMP_119(uint256) = 18812500 * 10
TMP_120 = CONVERT decimals to uint256
TMP_121(uint256) = 10 ** TMP_120
TMP_122(uint256) = TMP_119 * TMP_121
tempLock(uint256) := TMP_122(uint256)"];
37->65;
38[label="Node Type: IF 38

EXPRESSION:
now >= unlock_time_1110 && now < unlock_time_1210

IRs:
TMP_123(bool) = now >= unlock_time_1110
TMP_124(bool) = now < unlock_time_1210
TMP_125(bool) = TMP_123 && TMP_124
CONDITION TMP_125"];
38->39[label="True"];
38->40[label="False"];
39[label="Node Type: EXPRESSION 39

EXPRESSION:
tempLock = 18812500 * 9 * 10 ** uint256(decimals)

IRs:
TMP_126(uint256) = 18812500 * 9
TMP_127 = CONVERT decimals to uint256
TMP_128(uint256) = 10 ** TMP_127
TMP_129(uint256) = TMP_126 * TMP_128
tempLock(uint256) := TMP_129(uint256)"];
39->64;
40[label="Node Type: IF 40

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0110

IRs:
TMP_130(bool) = now >= unlock_time_1210
TMP_131(bool) = now < unlock_time_0110
TMP_132(bool) = TMP_130 && TMP_131
CONDITION TMP_132"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: EXPRESSION 41

EXPRESSION:
tempLock = 18812500 * 8 * 10 ** uint256(decimals)

IRs:
TMP_133(uint256) = 18812500 * 8
TMP_134 = CONVERT decimals to uint256
TMP_135(uint256) = 10 ** TMP_134
TMP_136(uint256) = TMP_133 * TMP_135
tempLock(uint256) := TMP_136(uint256)"];
41->63;
42[label="Node Type: IF 42

EXPRESSION:
now >= unlock_time_0110 && now < unlock_time_0210

IRs:
TMP_137(bool) = now >= unlock_time_0110
TMP_138(bool) = now < unlock_time_0210
TMP_139(bool) = TMP_137 && TMP_138
CONDITION TMP_139"];
42->43[label="True"];
42->44[label="False"];
43[label="Node Type: EXPRESSION 43

EXPRESSION:
tempLock = 18812500 * 7 * 10 ** uint256(decimals)

IRs:
TMP_140(uint256) = 18812500 * 7
TMP_141 = CONVERT decimals to uint256
TMP_142(uint256) = 10 ** TMP_141
TMP_143(uint256) = TMP_140 * TMP_142
tempLock(uint256) := TMP_143(uint256)"];
43->62;
44[label="Node Type: IF 44

EXPRESSION:
now >= unlock_time_0210 && now < unlock_time_0310

IRs:
TMP_144(bool) = now >= unlock_time_0210
TMP_145(bool) = now < unlock_time_0310
TMP_146(bool) = TMP_144 && TMP_145
CONDITION TMP_146"];
44->45[label="True"];
44->46[label="False"];
45[label="Node Type: EXPRESSION 45

EXPRESSION:
tempLock = 18812500 * 6 * 10 ** uint256(decimals)

IRs:
TMP_147(uint256) = 18812500 * 6
TMP_148 = CONVERT decimals to uint256
TMP_149(uint256) = 10 ** TMP_148
TMP_150(uint256) = TMP_147 * TMP_149
tempLock(uint256) := TMP_150(uint256)"];
45->61;
46[label="Node Type: IF 46

EXPRESSION:
now >= unlock_time_0310 && now < unlock_time_0410

IRs:
TMP_151(bool) = now >= unlock_time_0310
TMP_152(bool) = now < unlock_time_0410
TMP_153(bool) = TMP_151 && TMP_152
CONDITION TMP_153"];
46->47[label="True"];
46->48[label="False"];
47[label="Node Type: EXPRESSION 47

EXPRESSION:
tempLock = 18812500 * 5 * 10 ** uint256(decimals)

IRs:
TMP_154(uint256) = 18812500 * 5
TMP_155 = CONVERT decimals to uint256
TMP_156(uint256) = 10 ** TMP_155
TMP_157(uint256) = TMP_154 * TMP_156
tempLock(uint256) := TMP_157(uint256)"];
47->60;
48[label="Node Type: IF 48

EXPRESSION:
now >= unlock_time_0410 && now < unlock_time_0510

IRs:
TMP_158(bool) = now >= unlock_time_0410
TMP_159(bool) = now < unlock_time_0510
TMP_160(bool) = TMP_158 && TMP_159
CONDITION TMP_160"];
48->49[label="True"];
48->50[label="False"];
49[label="Node Type: EXPRESSION 49

EXPRESSION:
tempLock = 18812500 * 4 * 10 ** uint256(decimals)

IRs:
TMP_161(uint256) = 18812500 * 4
TMP_162 = CONVERT decimals to uint256
TMP_163(uint256) = 10 ** TMP_162
TMP_164(uint256) = TMP_161 * TMP_163
tempLock(uint256) := TMP_164(uint256)"];
49->59;
50[label="Node Type: IF 50

EXPRESSION:
now >= unlock_time_0510 && now < unlock_time_0610

IRs:
TMP_165(bool) = now >= unlock_time_0510
TMP_166(bool) = now < unlock_time_0610
TMP_167(bool) = TMP_165 && TMP_166
CONDITION TMP_167"];
50->51[label="True"];
50->52[label="False"];
51[label="Node Type: EXPRESSION 51

EXPRESSION:
tempLock = 18812500 * 3 * 10 ** uint256(decimals)

IRs:
TMP_168(uint256) = 18812500 * 3
TMP_169 = CONVERT decimals to uint256
TMP_170(uint256) = 10 ** TMP_169
TMP_171(uint256) = TMP_168 * TMP_170
tempLock(uint256) := TMP_171(uint256)"];
51->58;
52[label="Node Type: IF 52

EXPRESSION:
now >= unlock_time_0610 && now < unlock_time_0710

IRs:
TMP_172(bool) = now >= unlock_time_0610
TMP_173(bool) = now < unlock_time_0710
TMP_174(bool) = TMP_172 && TMP_173
CONDITION TMP_174"];
52->53[label="True"];
52->54[label="False"];
53[label="Node Type: EXPRESSION 53

EXPRESSION:
tempLock = 18812500 * 2 * 10 ** uint256(decimals)

IRs:
TMP_175(uint256) = 18812500 * 2
TMP_176 = CONVERT decimals to uint256
TMP_177(uint256) = 10 ** TMP_176
TMP_178(uint256) = TMP_175 * TMP_177
tempLock(uint256) := TMP_178(uint256)"];
53->57;
54[label="Node Type: IF 54

EXPRESSION:
now >= unlock_time_0710 && now < unlock_time_0810

IRs:
TMP_179(bool) = now >= unlock_time_0710
TMP_180(bool) = now < unlock_time_0810
TMP_181(bool) = TMP_179 && TMP_180
CONDITION TMP_181"];
54->55[label="True"];
54->56[label="False"];
55[label="Node Type: EXPRESSION 55

EXPRESSION:
tempLock = 18812500 * 1 * 10 ** uint256(decimals)

IRs:
TMP_182(uint256) = 18812500 * 1
TMP_183 = CONVERT decimals to uint256
TMP_184(uint256) = 10 ** TMP_183
TMP_185(uint256) = TMP_182 * TMP_184
tempLock(uint256) := TMP_185(uint256)"];
55->56;
56[label="Node Type: END_IF 56
"];
56->57;
57[label="Node Type: END_IF 57
"];
57->58;
58[label="Node Type: END_IF 58
"];
58->59;
59[label="Node Type: END_IF 59
"];
59->60;
60[label="Node Type: END_IF 60
"];
60->61;
61[label="Node Type: END_IF 61
"];
61->62;
62[label="Node Type: END_IF 62
"];
62->63;
63[label="Node Type: END_IF 63
"];
63->64;
64[label="Node Type: END_IF 64
"];
64->65;
65[label="Node Type: END_IF 65
"];
65->66;
66[label="Node Type: END_IF 66
"];
66->67;
67[label="Node Type: END_IF 67
"];
67->111;
68[label="Node Type: IF 68

EXPRESSION:
account == mining

IRs:
TMP_186(bool) = account == mining
CONDITION TMP_186"];
68->69[label="True"];
68->72[label="False"];
69[label="Node Type: IF 69

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_187(bool) = now < unlock_time_0910
CONDITION TMP_187"];
69->70[label="True"];
69->71[label="False"];
70[label="Node Type: EXPRESSION 70

EXPRESSION:
tempLock = 840000000 * 10 ** uint256(decimals)

IRs:
TMP_188 = CONVERT decimals to uint256
TMP_189(uint256) = 10 ** TMP_188
TMP_190(uint256) = 840000000 * TMP_189
tempLock(uint256) := TMP_190(uint256)"];
70->71;
71[label="Node Type: END_IF 71
"];
71->110;
72[label="Node Type: IF 72

EXPRESSION:
account == adviser

IRs:
TMP_191(bool) = account == adviser
CONDITION TMP_191"];
72->73[label="True"];
72->109[label="False"];
73[label="Node Type: IF 73

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_192(bool) = now < unlock_time_0910
CONDITION TMP_192"];
73->74[label="True"];
73->75[label="False"];
74[label="Node Type: EXPRESSION 74

EXPRESSION:
tempLock = 15750000 * 12 * 10 ** uint256(decimals)

IRs:
TMP_193(uint256) = 15750000 * 12
TMP_194 = CONVERT decimals to uint256
TMP_195(uint256) = 10 ** TMP_194
TMP_196(uint256) = TMP_193 * TMP_195
tempLock(uint256) := TMP_196(uint256)"];
74->108;
75[label="Node Type: IF 75

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1010

IRs:
TMP_197(bool) = now >= unlock_time_0910
TMP_198(bool) = now < unlock_time_1010
TMP_199(bool) = TMP_197 && TMP_198
CONDITION TMP_199"];
75->76[label="True"];
75->77[label="False"];
76[label="Node Type: EXPRESSION 76

EXPRESSION:
tempLock = 15750000 * 11 * 10 ** uint256(decimals)

IRs:
TMP_200(uint256) = 15750000 * 11
TMP_201 = CONVERT decimals to uint256
TMP_202(uint256) = 10 ** TMP_201
TMP_203(uint256) = TMP_200 * TMP_202
tempLock(uint256) := TMP_203(uint256)"];
76->107;
77[label="Node Type: IF 77

EXPRESSION:
now >= unlock_time_1010 && now < unlock_time_1110

IRs:
TMP_204(bool) = now >= unlock_time_1010
TMP_205(bool) = now < unlock_time_1110
TMP_206(bool) = TMP_204 && TMP_205
CONDITION TMP_206"];
77->78[label="True"];
77->79[label="False"];
78[label="Node Type: EXPRESSION 78

EXPRESSION:
tempLock = 15750000 * 10 * 10 ** uint256(decimals)

IRs:
TMP_207(uint256) = 15750000 * 10
TMP_208 = CONVERT decimals to uint256
TMP_209(uint256) = 10 ** TMP_208
TMP_210(uint256) = TMP_207 * TMP_209
tempLock(uint256) := TMP_210(uint256)"];
78->106;
79[label="Node Type: IF 79

EXPRESSION:
now >= unlock_time_1110 && now < unlock_time_1210

IRs:
TMP_211(bool) = now >= unlock_time_1110
TMP_212(bool) = now < unlock_time_1210
TMP_213(bool) = TMP_211 && TMP_212
CONDITION TMP_213"];
79->80[label="True"];
79->81[label="False"];
80[label="Node Type: EXPRESSION 80

EXPRESSION:
tempLock = 15750000 * 9 * 10 ** uint256(decimals)

IRs:
TMP_214(uint256) = 15750000 * 9
TMP_215 = CONVERT decimals to uint256
TMP_216(uint256) = 10 ** TMP_215
TMP_217(uint256) = TMP_214 * TMP_216
tempLock(uint256) := TMP_217(uint256)"];
80->105;
81[label="Node Type: IF 81

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0110

IRs:
TMP_218(bool) = now >= unlock_time_1210
TMP_219(bool) = now < unlock_time_0110
TMP_220(bool) = TMP_218 && TMP_219
CONDITION TMP_220"];
81->82[label="True"];
81->83[label="False"];
82[label="Node Type: EXPRESSION 82

EXPRESSION:
tempLock = 15750000 * 8 * 10 ** uint256(decimals)

IRs:
TMP_221(uint256) = 15750000 * 8
TMP_222 = CONVERT decimals to uint256
TMP_223(uint256) = 10 ** TMP_222
TMP_224(uint256) = TMP_221 * TMP_223
tempLock(uint256) := TMP_224(uint256)"];
82->104;
83[label="Node Type: IF 83

EXPRESSION:
now >= unlock_time_0110 && now < unlock_time_0210

IRs:
TMP_225(bool) = now >= unlock_time_0110
TMP_226(bool) = now < unlock_time_0210
TMP_227(bool) = TMP_225 && TMP_226
CONDITION TMP_227"];
83->84[label="True"];
83->85[label="False"];
84[label="Node Type: EXPRESSION 84

EXPRESSION:
tempLock = 15750000 * 7 * 10 ** uint256(decimals)

IRs:
TMP_228(uint256) = 15750000 * 7
TMP_229 = CONVERT decimals to uint256
TMP_230(uint256) = 10 ** TMP_229
TMP_231(uint256) = TMP_228 * TMP_230
tempLock(uint256) := TMP_231(uint256)"];
84->103;
85[label="Node Type: IF 85

EXPRESSION:
now >= unlock_time_0210 && now < unlock_time_0310

IRs:
TMP_232(bool) = now >= unlock_time_0210
TMP_233(bool) = now < unlock_time_0310
TMP_234(bool) = TMP_232 && TMP_233
CONDITION TMP_234"];
85->86[label="True"];
85->87[label="False"];
86[label="Node Type: EXPRESSION 86

EXPRESSION:
tempLock = 15750000 * 6 * 10 ** uint256(decimals)

IRs:
TMP_235(uint256) = 15750000 * 6
TMP_236 = CONVERT decimals to uint256
TMP_237(uint256) = 10 ** TMP_236
TMP_238(uint256) = TMP_235 * TMP_237
tempLock(uint256) := TMP_238(uint256)"];
86->102;
87[label="Node Type: IF 87

EXPRESSION:
now >= unlock_time_0310 && now < unlock_time_0410

IRs:
TMP_239(bool) = now >= unlock_time_0310
TMP_240(bool) = now < unlock_time_0410
TMP_241(bool) = TMP_239 && TMP_240
CONDITION TMP_241"];
87->88[label="True"];
87->89[label="False"];
88[label="Node Type: EXPRESSION 88

EXPRESSION:
tempLock = 15750000 * 5 * 10 ** uint256(decimals)

IRs:
TMP_242(uint256) = 15750000 * 5
TMP_243 = CONVERT decimals to uint256
TMP_244(uint256) = 10 ** TMP_243
TMP_245(uint256) = TMP_242 * TMP_244
tempLock(uint256) := TMP_245(uint256)"];
88->101;
89[label="Node Type: IF 89

EXPRESSION:
now >= unlock_time_0410 && now < unlock_time_0510

IRs:
TMP_246(bool) = now >= unlock_time_0410
TMP_247(bool) = now < unlock_time_0510
TMP_248(bool) = TMP_246 && TMP_247
CONDITION TMP_248"];
89->90[label="True"];
89->91[label="False"];
90[label="Node Type: EXPRESSION 90

EXPRESSION:
tempLock = 15750000 * 4 * 10 ** uint256(decimals)

IRs:
TMP_249(uint256) = 15750000 * 4
TMP_250 = CONVERT decimals to uint256
TMP_251(uint256) = 10 ** TMP_250
TMP_252(uint256) = TMP_249 * TMP_251
tempLock(uint256) := TMP_252(uint256)"];
90->100;
91[label="Node Type: IF 91

EXPRESSION:
now >= unlock_time_0510 && now < unlock_time_0610

IRs:
TMP_253(bool) = now >= unlock_time_0510
TMP_254(bool) = now < unlock_time_0610
TMP_255(bool) = TMP_253 && TMP_254
CONDITION TMP_255"];
91->92[label="True"];
91->93[label="False"];
92[label="Node Type: EXPRESSION 92

EXPRESSION:
tempLock = 15750000 * 3 * 10 ** uint256(decimals)

IRs:
TMP_256(uint256) = 15750000 * 3
TMP_257 = CONVERT decimals to uint256
TMP_258(uint256) = 10 ** TMP_257
TMP_259(uint256) = TMP_256 * TMP_258
tempLock(uint256) := TMP_259(uint256)"];
92->99;
93[label="Node Type: IF 93

EXPRESSION:
now >= unlock_time_0610 && now < unlock_time_0710

IRs:
TMP_260(bool) = now >= unlock_time_0610
TMP_261(bool) = now < unlock_time_0710
TMP_262(bool) = TMP_260 && TMP_261
CONDITION TMP_262"];
93->94[label="True"];
93->95[label="False"];
94[label="Node Type: EXPRESSION 94

EXPRESSION:
tempLock = 15750000 * 2 * 10 ** uint256(decimals)

IRs:
TMP_263(uint256) = 15750000 * 2
TMP_264 = CONVERT decimals to uint256
TMP_265(uint256) = 10 ** TMP_264
TMP_266(uint256) = TMP_263 * TMP_265
tempLock(uint256) := TMP_266(uint256)"];
94->98;
95[label="Node Type: IF 95

EXPRESSION:
now >= unlock_time_0710 && now < unlock_time_0810

IRs:
TMP_267(bool) = now >= unlock_time_0710
TMP_268(bool) = now < unlock_time_0810
TMP_269(bool) = TMP_267 && TMP_268
CONDITION TMP_269"];
95->96[label="True"];
95->97[label="False"];
96[label="Node Type: EXPRESSION 96

EXPRESSION:
tempLock = 15750000 * 1 * 10 ** uint256(decimals)

IRs:
TMP_270(uint256) = 15750000 * 1
TMP_271 = CONVERT decimals to uint256
TMP_272(uint256) = 10 ** TMP_271
TMP_273(uint256) = TMP_270 * TMP_272
tempLock(uint256) := TMP_273(uint256)"];
96->97;
97[label="Node Type: END_IF 97
"];
97->98;
98[label="Node Type: END_IF 98
"];
98->99;
99[label="Node Type: END_IF 99
"];
99->100;
100[label="Node Type: END_IF 100
"];
100->101;
101[label="Node Type: END_IF 101
"];
101->102;
102[label="Node Type: END_IF 102
"];
102->103;
103[label="Node Type: END_IF 103
"];
103->104;
104[label="Node Type: END_IF 104
"];
104->105;
105[label="Node Type: END_IF 105
"];
105->106;
106[label="Node Type: END_IF 106
"];
106->107;
107[label="Node Type: END_IF 107
"];
107->108;
108[label="Node Type: END_IF 108
"];
108->109;
109[label="Node Type: END_IF 109
"];
109->110;
110[label="Node Type: END_IF 110
"];
110->111;
111[label="Node Type: END_IF 111
"];
111->112;
112[label="Node Type: END_IF 112
"];
112->113;
113[label="Node Type: END_IF 113
"];
113->114;
114[label="Node Type: RETURN 114

EXPRESSION:
tempLock

IRs:
RETURN tempLock"];
}
// Function: 1076.sol-LockUtils-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
advance_mining = 0x5EDBe36c4c4a816f150959B445d5Ae1F33054a82

IRs:
advance_mining(address) := 541548806996729441662115267373079401763071937154(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
community = 0xacF2e917E296547C0C476fDACf957111ca0307ce

IRs:
community(address) := 987363498210047433414075965829143633752022517710(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
foundation_investment = 0x9746079BEbcFfFf177818e23AedeC834ad0fb5f9

IRs:
foundation_investment(address) := 863619321401513882450893964415852745179742057977(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
mining = 0xBB7d6f428E77f98069AE1E01964A9Ed6db3c5Fe5

IRs:
mining(address) := 1070378559405622280315132464123903836042093682661(address)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
adviser = 0x0aE269Ae5F511786Fce5938c141DbF42e8A71E12

IRs:
adviser(address) := 62139082248958707976879802367378807969834016274(address)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
unlock_time_0910 = 1536508800

IRs:
unlock_time_0910(uint256) := 1536508800(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
unlock_time_1010 = 1539100800

IRs:
unlock_time_1010(uint256) := 1539100800(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
unlock_time_1110 = 1541779200

IRs:
unlock_time_1110(uint256) := 1541779200(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
unlock_time_1210 = 1544371200

IRs:
unlock_time_1210(uint256) := 1544371200(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
unlock_time_0110 = 1547049600

IRs:
unlock_time_0110(uint256) := 1547049600(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
unlock_time_0210 = 1549728000

IRs:
unlock_time_0210(uint256) := 1549728000(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
unlock_time_0310 = 1552147200

IRs:
unlock_time_0310(uint256) := 1552147200(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
unlock_time_0410 = 1554825600

IRs:
unlock_time_0410(uint256) := 1554825600(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
unlock_time_0510 = 1557417600

IRs:
unlock_time_0510(uint256) := 1557417600(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
unlock_time_0610 = 1560096000

IRs:
unlock_time_0610(uint256) := 1560096000(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
unlock_time_0710 = 1562688000

IRs:
unlock_time_0710(uint256) := 1562688000(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
unlock_time_0810 = 1565366400

IRs:
unlock_time_0810(uint256) := 1565366400(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
unlock_time_end = 1568044800

IRs:
unlock_time_end(uint256) := 1568044800(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
time_months = 2678400

IRs:
time_months(uint256) := 2678400(uint256)"];
}
// Function: 1076.sol-PDTToken-PDTToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = Matrix World

IRs:
name(string) := Matrix World(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = PDT

IRs:
symbol(string) := PDT(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = 2100000000 * 10 ** uint256(decimals)

IRs:
TMP_548 = CONVERT decimals to uint256
TMP_549(uint256) = 10 ** TMP_548
TMP_550(uint256) = 2100000000 * TMP_549
totalSupply(uint256) := TMP_550(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
}
// Function: 1076.sol-PDTToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_551(bool) = _to != 0
TMP_552(None) = SOLIDITY_CALL require(bool)(TMP_551)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)((balanceOf[_from] - getLockBalance(_from,decimals)) >= _value)

IRs:
REF_1(uint256) -> balanceOf[_from]
TMP_553(uint256) = INTERNAL_CALL, LockUtils.getLockBalance(address,uint8)(_from,decimals)
TMP_554(uint256) = REF_1 - TMP_553
TMP_555(bool) = TMP_554 >= _value
TMP_556(None) = SOLIDITY_CALL require(bool)(TMP_555)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_2(uint256) -> balanceOf[_from]
TMP_557(bool) = REF_2 >= _value
TMP_558(None) = SOLIDITY_CALL require(bool)(TMP_557)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)((balanceOf[_to] + _value) > balanceOf[_to])

IRs:
REF_3(uint256) -> balanceOf[_to]
TMP_559(uint256) = REF_3 + _value
REF_4(uint256) -> balanceOf[_to]
TMP_560(bool) = TMP_559 > REF_4
TMP_561(None) = SOLIDITY_CALL require(bool)(TMP_560)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_5(uint256) -> balanceOf[_from]
REF_6(uint256) -> balanceOf[_to]
TMP_562(uint256) = REF_5 + REF_6
previousBalances(uint256) := TMP_562(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_7(uint256) -> balanceOf[_from]
REF_7(-> balanceOf) = REF_7 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_8(uint256) -> balanceOf[_to]
REF_8(-> balanceOf) = REF_8 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_9(uint256) -> balanceOf[_from]
REF_10(uint256) -> balanceOf[_to]
TMP_564(uint256) = REF_9 + REF_10
TMP_565(bool) = TMP_564 == previousBalances
TMP_566(None) = SOLIDITY_CALL assert(bool)(TMP_565)"];
}
// Function: 1076.sol-PDTToken-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_503(uint256) = a + b
c(uint256) := TMP_503(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_504(bool) = c >= a
TMP_505(None) = SOLIDITY_CALL assert(bool)(TMP_504)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowance[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1076.sol-PDTToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_572 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_572(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_573(bool) = INTERNAL_CALL, PDTToken.approve(address,uint256)(_spender,_value)
CONDITION TMP_573"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1076.sol-PDTToken-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_515(uint256) = a / b
c(uint256) := TMP_515(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-getLockBalance(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tempLock = 0

IRs:
tempLock(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
account == advance_mining

IRs:
TMP_274(bool) = account == advance_mining
CONDITION TMP_274"];
2->3[label="True"];
2->12[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_275(bool) = now < unlock_time_0910
CONDITION TMP_275"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tempLock = 735000000 * 10 ** uint256(decimals)

IRs:
TMP_276 = CONVERT decimals to uint256
TMP_277(uint256) = 10 ** TMP_276
TMP_278(uint256) = 735000000 * TMP_277
tempLock(uint256) := TMP_278(uint256)"];
4->11;
5[label="Node Type: IF 5

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1210

IRs:
TMP_279(bool) = now >= unlock_time_0910
TMP_280(bool) = now < unlock_time_1210
TMP_281(bool) = TMP_279 && TMP_280
CONDITION TMP_281"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tempLock = 367500000 * 10 ** uint256(decimals)

IRs:
TMP_282 = CONVERT decimals to uint256
TMP_283(uint256) = 10 ** TMP_282
TMP_284(uint256) = 367500000 * TMP_283
tempLock(uint256) := TMP_284(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0310

IRs:
TMP_285(bool) = now >= unlock_time_1210
TMP_286(bool) = now < unlock_time_0310
TMP_287(bool) = TMP_285 && TMP_286
CONDITION TMP_287"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tempLock = 183750000 * 10 ** uint256(decimals)

IRs:
TMP_288 = CONVERT decimals to uint256
TMP_289(uint256) = 10 ** TMP_288
TMP_290(uint256) = 183750000 * TMP_289
tempLock(uint256) := TMP_290(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->113;
12[label="Node Type: IF 12

EXPRESSION:
account == community

IRs:
TMP_291(bool) = account == community
CONDITION TMP_291"];
12->13[label="True"];
12->31[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_292(bool) = now < unlock_time_0910
CONDITION TMP_292"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
tempLock = 18375000 * 6 * 10 ** uint256(decimals)

IRs:
TMP_293(uint256) = 18375000 * 6
TMP_294 = CONVERT decimals to uint256
TMP_295(uint256) = 10 ** TMP_294
TMP_296(uint256) = TMP_293 * TMP_295
tempLock(uint256) := TMP_296(uint256)"];
14->30;
15[label="Node Type: IF 15

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1010

IRs:
TMP_297(bool) = now >= unlock_time_0910
TMP_298(bool) = now < unlock_time_1010
TMP_299(bool) = TMP_297 && TMP_298
CONDITION TMP_299"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tempLock = 18375000 * 5 * 10 ** uint256(decimals)

IRs:
TMP_300(uint256) = 18375000 * 5
TMP_301 = CONVERT decimals to uint256
TMP_302(uint256) = 10 ** TMP_301
TMP_303(uint256) = TMP_300 * TMP_302
tempLock(uint256) := TMP_303(uint256)"];
16->29;
17[label="Node Type: IF 17

EXPRESSION:
now >= unlock_time_1010 && now < unlock_time_1110

IRs:
TMP_304(bool) = now >= unlock_time_1010
TMP_305(bool) = now < unlock_time_1110
TMP_306(bool) = TMP_304 && TMP_305
CONDITION TMP_306"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
tempLock = 18375000 * 4 * 10 ** uint256(decimals)

IRs:
TMP_307(uint256) = 18375000 * 4
TMP_308 = CONVERT decimals to uint256
TMP_309(uint256) = 10 ** TMP_308
TMP_310(uint256) = TMP_307 * TMP_309
tempLock(uint256) := TMP_310(uint256)"];
18->28;
19[label="Node Type: IF 19

EXPRESSION:
now >= unlock_time_1110 && now < unlock_time_1210

IRs:
TMP_311(bool) = now >= unlock_time_1110
TMP_312(bool) = now < unlock_time_1210
TMP_313(bool) = TMP_311 && TMP_312
CONDITION TMP_313"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
tempLock = 18375000 * 3 * 10 ** uint256(decimals)

IRs:
TMP_314(uint256) = 18375000 * 3
TMP_315 = CONVERT decimals to uint256
TMP_316(uint256) = 10 ** TMP_315
TMP_317(uint256) = TMP_314 * TMP_316
tempLock(uint256) := TMP_317(uint256)"];
20->27;
21[label="Node Type: IF 21

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0110

IRs:
TMP_318(bool) = now >= unlock_time_1210
TMP_319(bool) = now < unlock_time_0110
TMP_320(bool) = TMP_318 && TMP_319
CONDITION TMP_320"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
tempLock = 18375000 * 2 * 10 ** uint256(decimals)

IRs:
TMP_321(uint256) = 18375000 * 2
TMP_322 = CONVERT decimals to uint256
TMP_323(uint256) = 10 ** TMP_322
TMP_324(uint256) = TMP_321 * TMP_323
tempLock(uint256) := TMP_324(uint256)"];
22->26;
23[label="Node Type: IF 23

EXPRESSION:
now >= unlock_time_0110 && now < unlock_time_0210

IRs:
TMP_325(bool) = now >= unlock_time_0110
TMP_326(bool) = now < unlock_time_0210
TMP_327(bool) = TMP_325 && TMP_326
CONDITION TMP_327"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
tempLock = 18375000 * 1 * 10 ** uint256(decimals)

IRs:
TMP_328(uint256) = 18375000 * 1
TMP_329 = CONVERT decimals to uint256
TMP_330(uint256) = 10 ** TMP_329
TMP_331(uint256) = TMP_328 * TMP_330
tempLock(uint256) := TMP_331(uint256)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: END_IF 30
"];
30->112;
31[label="Node Type: IF 31

EXPRESSION:
account == foundation_investment

IRs:
TMP_332(bool) = account == foundation_investment
CONDITION TMP_332"];
31->32[label="True"];
31->68[label="False"];
32[label="Node Type: IF 32

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_333(bool) = now < unlock_time_0910
CONDITION TMP_333"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
tempLock = 18812500 * 12 * 10 ** uint256(decimals)

IRs:
TMP_334(uint256) = 18812500 * 12
TMP_335 = CONVERT decimals to uint256
TMP_336(uint256) = 10 ** TMP_335
TMP_337(uint256) = TMP_334 * TMP_336
tempLock(uint256) := TMP_337(uint256)"];
33->67;
34[label="Node Type: IF 34

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1010

IRs:
TMP_338(bool) = now >= unlock_time_0910
TMP_339(bool) = now < unlock_time_1010
TMP_340(bool) = TMP_338 && TMP_339
CONDITION TMP_340"];
34->35[label="True"];
34->36[label="False"];
35[label="Node Type: EXPRESSION 35

EXPRESSION:
tempLock = 18812500 * 11 * 10 ** uint256(decimals)

IRs:
TMP_341(uint256) = 18812500 * 11
TMP_342 = CONVERT decimals to uint256
TMP_343(uint256) = 10 ** TMP_342
TMP_344(uint256) = TMP_341 * TMP_343
tempLock(uint256) := TMP_344(uint256)"];
35->66;
36[label="Node Type: IF 36

EXPRESSION:
now >= unlock_time_1010 && now < unlock_time_1110

IRs:
TMP_345(bool) = now >= unlock_time_1010
TMP_346(bool) = now < unlock_time_1110
TMP_347(bool) = TMP_345 && TMP_346
CONDITION TMP_347"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
tempLock = 18812500 * 10 * 10 ** uint256(decimals)

IRs:
TMP_348(uint256) = 18812500 * 10
TMP_349 = CONVERT decimals to uint256
TMP_350(uint256) = 10 ** TMP_349
TMP_351(uint256) = TMP_348 * TMP_350
tempLock(uint256) := TMP_351(uint256)"];
37->65;
38[label="Node Type: IF 38

EXPRESSION:
now >= unlock_time_1110 && now < unlock_time_1210

IRs:
TMP_352(bool) = now >= unlock_time_1110
TMP_353(bool) = now < unlock_time_1210
TMP_354(bool) = TMP_352 && TMP_353
CONDITION TMP_354"];
38->39[label="True"];
38->40[label="False"];
39[label="Node Type: EXPRESSION 39

EXPRESSION:
tempLock = 18812500 * 9 * 10 ** uint256(decimals)

IRs:
TMP_355(uint256) = 18812500 * 9
TMP_356 = CONVERT decimals to uint256
TMP_357(uint256) = 10 ** TMP_356
TMP_358(uint256) = TMP_355 * TMP_357
tempLock(uint256) := TMP_358(uint256)"];
39->64;
40[label="Node Type: IF 40

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0110

IRs:
TMP_359(bool) = now >= unlock_time_1210
TMP_360(bool) = now < unlock_time_0110
TMP_361(bool) = TMP_359 && TMP_360
CONDITION TMP_361"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: EXPRESSION 41

EXPRESSION:
tempLock = 18812500 * 8 * 10 ** uint256(decimals)

IRs:
TMP_362(uint256) = 18812500 * 8
TMP_363 = CONVERT decimals to uint256
TMP_364(uint256) = 10 ** TMP_363
TMP_365(uint256) = TMP_362 * TMP_364
tempLock(uint256) := TMP_365(uint256)"];
41->63;
42[label="Node Type: IF 42

EXPRESSION:
now >= unlock_time_0110 && now < unlock_time_0210

IRs:
TMP_366(bool) = now >= unlock_time_0110
TMP_367(bool) = now < unlock_time_0210
TMP_368(bool) = TMP_366 && TMP_367
CONDITION TMP_368"];
42->43[label="True"];
42->44[label="False"];
43[label="Node Type: EXPRESSION 43

EXPRESSION:
tempLock = 18812500 * 7 * 10 ** uint256(decimals)

IRs:
TMP_369(uint256) = 18812500 * 7
TMP_370 = CONVERT decimals to uint256
TMP_371(uint256) = 10 ** TMP_370
TMP_372(uint256) = TMP_369 * TMP_371
tempLock(uint256) := TMP_372(uint256)"];
43->62;
44[label="Node Type: IF 44

EXPRESSION:
now >= unlock_time_0210 && now < unlock_time_0310

IRs:
TMP_373(bool) = now >= unlock_time_0210
TMP_374(bool) = now < unlock_time_0310
TMP_375(bool) = TMP_373 && TMP_374
CONDITION TMP_375"];
44->45[label="True"];
44->46[label="False"];
45[label="Node Type: EXPRESSION 45

EXPRESSION:
tempLock = 18812500 * 6 * 10 ** uint256(decimals)

IRs:
TMP_376(uint256) = 18812500 * 6
TMP_377 = CONVERT decimals to uint256
TMP_378(uint256) = 10 ** TMP_377
TMP_379(uint256) = TMP_376 * TMP_378
tempLock(uint256) := TMP_379(uint256)"];
45->61;
46[label="Node Type: IF 46

EXPRESSION:
now >= unlock_time_0310 && now < unlock_time_0410

IRs:
TMP_380(bool) = now >= unlock_time_0310
TMP_381(bool) = now < unlock_time_0410
TMP_382(bool) = TMP_380 && TMP_381
CONDITION TMP_382"];
46->47[label="True"];
46->48[label="False"];
47[label="Node Type: EXPRESSION 47

EXPRESSION:
tempLock = 18812500 * 5 * 10 ** uint256(decimals)

IRs:
TMP_383(uint256) = 18812500 * 5
TMP_384 = CONVERT decimals to uint256
TMP_385(uint256) = 10 ** TMP_384
TMP_386(uint256) = TMP_383 * TMP_385
tempLock(uint256) := TMP_386(uint256)"];
47->60;
48[label="Node Type: IF 48

EXPRESSION:
now >= unlock_time_0410 && now < unlock_time_0510

IRs:
TMP_387(bool) = now >= unlock_time_0410
TMP_388(bool) = now < unlock_time_0510
TMP_389(bool) = TMP_387 && TMP_388
CONDITION TMP_389"];
48->49[label="True"];
48->50[label="False"];
49[label="Node Type: EXPRESSION 49

EXPRESSION:
tempLock = 18812500 * 4 * 10 ** uint256(decimals)

IRs:
TMP_390(uint256) = 18812500 * 4
TMP_391 = CONVERT decimals to uint256
TMP_392(uint256) = 10 ** TMP_391
TMP_393(uint256) = TMP_390 * TMP_392
tempLock(uint256) := TMP_393(uint256)"];
49->59;
50[label="Node Type: IF 50

EXPRESSION:
now >= unlock_time_0510 && now < unlock_time_0610

IRs:
TMP_394(bool) = now >= unlock_time_0510
TMP_395(bool) = now < unlock_time_0610
TMP_396(bool) = TMP_394 && TMP_395
CONDITION TMP_396"];
50->51[label="True"];
50->52[label="False"];
51[label="Node Type: EXPRESSION 51

EXPRESSION:
tempLock = 18812500 * 3 * 10 ** uint256(decimals)

IRs:
TMP_397(uint256) = 18812500 * 3
TMP_398 = CONVERT decimals to uint256
TMP_399(uint256) = 10 ** TMP_398
TMP_400(uint256) = TMP_397 * TMP_399
tempLock(uint256) := TMP_400(uint256)"];
51->58;
52[label="Node Type: IF 52

EXPRESSION:
now >= unlock_time_0610 && now < unlock_time_0710

IRs:
TMP_401(bool) = now >= unlock_time_0610
TMP_402(bool) = now < unlock_time_0710
TMP_403(bool) = TMP_401 && TMP_402
CONDITION TMP_403"];
52->53[label="True"];
52->54[label="False"];
53[label="Node Type: EXPRESSION 53

EXPRESSION:
tempLock = 18812500 * 2 * 10 ** uint256(decimals)

IRs:
TMP_404(uint256) = 18812500 * 2
TMP_405 = CONVERT decimals to uint256
TMP_406(uint256) = 10 ** TMP_405
TMP_407(uint256) = TMP_404 * TMP_406
tempLock(uint256) := TMP_407(uint256)"];
53->57;
54[label="Node Type: IF 54

EXPRESSION:
now >= unlock_time_0710 && now < unlock_time_0810

IRs:
TMP_408(bool) = now >= unlock_time_0710
TMP_409(bool) = now < unlock_time_0810
TMP_410(bool) = TMP_408 && TMP_409
CONDITION TMP_410"];
54->55[label="True"];
54->56[label="False"];
55[label="Node Type: EXPRESSION 55

EXPRESSION:
tempLock = 18812500 * 1 * 10 ** uint256(decimals)

IRs:
TMP_411(uint256) = 18812500 * 1
TMP_412 = CONVERT decimals to uint256
TMP_413(uint256) = 10 ** TMP_412
TMP_414(uint256) = TMP_411 * TMP_413
tempLock(uint256) := TMP_414(uint256)"];
55->56;
56[label="Node Type: END_IF 56
"];
56->57;
57[label="Node Type: END_IF 57
"];
57->58;
58[label="Node Type: END_IF 58
"];
58->59;
59[label="Node Type: END_IF 59
"];
59->60;
60[label="Node Type: END_IF 60
"];
60->61;
61[label="Node Type: END_IF 61
"];
61->62;
62[label="Node Type: END_IF 62
"];
62->63;
63[label="Node Type: END_IF 63
"];
63->64;
64[label="Node Type: END_IF 64
"];
64->65;
65[label="Node Type: END_IF 65
"];
65->66;
66[label="Node Type: END_IF 66
"];
66->67;
67[label="Node Type: END_IF 67
"];
67->111;
68[label="Node Type: IF 68

EXPRESSION:
account == mining

IRs:
TMP_415(bool) = account == mining
CONDITION TMP_415"];
68->69[label="True"];
68->72[label="False"];
69[label="Node Type: IF 69

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_416(bool) = now < unlock_time_0910
CONDITION TMP_416"];
69->70[label="True"];
69->71[label="False"];
70[label="Node Type: EXPRESSION 70

EXPRESSION:
tempLock = 840000000 * 10 ** uint256(decimals)

IRs:
TMP_417 = CONVERT decimals to uint256
TMP_418(uint256) = 10 ** TMP_417
TMP_419(uint256) = 840000000 * TMP_418
tempLock(uint256) := TMP_419(uint256)"];
70->71;
71[label="Node Type: END_IF 71
"];
71->110;
72[label="Node Type: IF 72

EXPRESSION:
account == adviser

IRs:
TMP_420(bool) = account == adviser
CONDITION TMP_420"];
72->73[label="True"];
72->109[label="False"];
73[label="Node Type: IF 73

EXPRESSION:
now < unlock_time_0910

IRs:
TMP_421(bool) = now < unlock_time_0910
CONDITION TMP_421"];
73->74[label="True"];
73->75[label="False"];
74[label="Node Type: EXPRESSION 74

EXPRESSION:
tempLock = 15750000 * 12 * 10 ** uint256(decimals)

IRs:
TMP_422(uint256) = 15750000 * 12
TMP_423 = CONVERT decimals to uint256
TMP_424(uint256) = 10 ** TMP_423
TMP_425(uint256) = TMP_422 * TMP_424
tempLock(uint256) := TMP_425(uint256)"];
74->108;
75[label="Node Type: IF 75

EXPRESSION:
now >= unlock_time_0910 && now < unlock_time_1010

IRs:
TMP_426(bool) = now >= unlock_time_0910
TMP_427(bool) = now < unlock_time_1010
TMP_428(bool) = TMP_426 && TMP_427
CONDITION TMP_428"];
75->76[label="True"];
75->77[label="False"];
76[label="Node Type: EXPRESSION 76

EXPRESSION:
tempLock = 15750000 * 11 * 10 ** uint256(decimals)

IRs:
TMP_429(uint256) = 15750000 * 11
TMP_430 = CONVERT decimals to uint256
TMP_431(uint256) = 10 ** TMP_430
TMP_432(uint256) = TMP_429 * TMP_431
tempLock(uint256) := TMP_432(uint256)"];
76->107;
77[label="Node Type: IF 77

EXPRESSION:
now >= unlock_time_1010 && now < unlock_time_1110

IRs:
TMP_433(bool) = now >= unlock_time_1010
TMP_434(bool) = now < unlock_time_1110
TMP_435(bool) = TMP_433 && TMP_434
CONDITION TMP_435"];
77->78[label="True"];
77->79[label="False"];
78[label="Node Type: EXPRESSION 78

EXPRESSION:
tempLock = 15750000 * 10 * 10 ** uint256(decimals)

IRs:
TMP_436(uint256) = 15750000 * 10
TMP_437 = CONVERT decimals to uint256
TMP_438(uint256) = 10 ** TMP_437
TMP_439(uint256) = TMP_436 * TMP_438
tempLock(uint256) := TMP_439(uint256)"];
78->106;
79[label="Node Type: IF 79

EXPRESSION:
now >= unlock_time_1110 && now < unlock_time_1210

IRs:
TMP_440(bool) = now >= unlock_time_1110
TMP_441(bool) = now < unlock_time_1210
TMP_442(bool) = TMP_440 && TMP_441
CONDITION TMP_442"];
79->80[label="True"];
79->81[label="False"];
80[label="Node Type: EXPRESSION 80

EXPRESSION:
tempLock = 15750000 * 9 * 10 ** uint256(decimals)

IRs:
TMP_443(uint256) = 15750000 * 9
TMP_444 = CONVERT decimals to uint256
TMP_445(uint256) = 10 ** TMP_444
TMP_446(uint256) = TMP_443 * TMP_445
tempLock(uint256) := TMP_446(uint256)"];
80->105;
81[label="Node Type: IF 81

EXPRESSION:
now >= unlock_time_1210 && now < unlock_time_0110

IRs:
TMP_447(bool) = now >= unlock_time_1210
TMP_448(bool) = now < unlock_time_0110
TMP_449(bool) = TMP_447 && TMP_448
CONDITION TMP_449"];
81->82[label="True"];
81->83[label="False"];
82[label="Node Type: EXPRESSION 82

EXPRESSION:
tempLock = 15750000 * 8 * 10 ** uint256(decimals)

IRs:
TMP_450(uint256) = 15750000 * 8
TMP_451 = CONVERT decimals to uint256
TMP_452(uint256) = 10 ** TMP_451
TMP_453(uint256) = TMP_450 * TMP_452
tempLock(uint256) := TMP_453(uint256)"];
82->104;
83[label="Node Type: IF 83

EXPRESSION:
now >= unlock_time_0110 && now < unlock_time_0210

IRs:
TMP_454(bool) = now >= unlock_time_0110
TMP_455(bool) = now < unlock_time_0210
TMP_456(bool) = TMP_454 && TMP_455
CONDITION TMP_456"];
83->84[label="True"];
83->85[label="False"];
84[label="Node Type: EXPRESSION 84

EXPRESSION:
tempLock = 15750000 * 7 * 10 ** uint256(decimals)

IRs:
TMP_457(uint256) = 15750000 * 7
TMP_458 = CONVERT decimals to uint256
TMP_459(uint256) = 10 ** TMP_458
TMP_460(uint256) = TMP_457 * TMP_459
tempLock(uint256) := TMP_460(uint256)"];
84->103;
85[label="Node Type: IF 85

EXPRESSION:
now >= unlock_time_0210 && now < unlock_time_0310

IRs:
TMP_461(bool) = now >= unlock_time_0210
TMP_462(bool) = now < unlock_time_0310
TMP_463(bool) = TMP_461 && TMP_462
CONDITION TMP_463"];
85->86[label="True"];
85->87[label="False"];
86[label="Node Type: EXPRESSION 86

EXPRESSION:
tempLock = 15750000 * 6 * 10 ** uint256(decimals)

IRs:
TMP_464(uint256) = 15750000 * 6
TMP_465 = CONVERT decimals to uint256
TMP_466(uint256) = 10 ** TMP_465
TMP_467(uint256) = TMP_464 * TMP_466
tempLock(uint256) := TMP_467(uint256)"];
86->102;
87[label="Node Type: IF 87

EXPRESSION:
now >= unlock_time_0310 && now < unlock_time_0410

IRs:
TMP_468(bool) = now >= unlock_time_0310
TMP_469(bool) = now < unlock_time_0410
TMP_470(bool) = TMP_468 && TMP_469
CONDITION TMP_470"];
87->88[label="True"];
87->89[label="False"];
88[label="Node Type: EXPRESSION 88

EXPRESSION:
tempLock = 15750000 * 5 * 10 ** uint256(decimals)

IRs:
TMP_471(uint256) = 15750000 * 5
TMP_472 = CONVERT decimals to uint256
TMP_473(uint256) = 10 ** TMP_472
TMP_474(uint256) = TMP_471 * TMP_473
tempLock(uint256) := TMP_474(uint256)"];
88->101;
89[label="Node Type: IF 89

EXPRESSION:
now >= unlock_time_0410 && now < unlock_time_0510

IRs:
TMP_475(bool) = now >= unlock_time_0410
TMP_476(bool) = now < unlock_time_0510
TMP_477(bool) = TMP_475 && TMP_476
CONDITION TMP_477"];
89->90[label="True"];
89->91[label="False"];
90[label="Node Type: EXPRESSION 90

EXPRESSION:
tempLock = 15750000 * 4 * 10 ** uint256(decimals)

IRs:
TMP_478(uint256) = 15750000 * 4
TMP_479 = CONVERT decimals to uint256
TMP_480(uint256) = 10 ** TMP_479
TMP_481(uint256) = TMP_478 * TMP_480
tempLock(uint256) := TMP_481(uint256)"];
90->100;
91[label="Node Type: IF 91

EXPRESSION:
now >= unlock_time_0510 && now < unlock_time_0610

IRs:
TMP_482(bool) = now >= unlock_time_0510
TMP_483(bool) = now < unlock_time_0610
TMP_484(bool) = TMP_482 && TMP_483
CONDITION TMP_484"];
91->92[label="True"];
91->93[label="False"];
92[label="Node Type: EXPRESSION 92

EXPRESSION:
tempLock = 15750000 * 3 * 10 ** uint256(decimals)

IRs:
TMP_485(uint256) = 15750000 * 3
TMP_486 = CONVERT decimals to uint256
TMP_487(uint256) = 10 ** TMP_486
TMP_488(uint256) = TMP_485 * TMP_487
tempLock(uint256) := TMP_488(uint256)"];
92->99;
93[label="Node Type: IF 93

EXPRESSION:
now >= unlock_time_0610 && now < unlock_time_0710

IRs:
TMP_489(bool) = now >= unlock_time_0610
TMP_490(bool) = now < unlock_time_0710
TMP_491(bool) = TMP_489 && TMP_490
CONDITION TMP_491"];
93->94[label="True"];
93->95[label="False"];
94[label="Node Type: EXPRESSION 94

EXPRESSION:
tempLock = 15750000 * 2 * 10 ** uint256(decimals)

IRs:
TMP_492(uint256) = 15750000 * 2
TMP_493 = CONVERT decimals to uint256
TMP_494(uint256) = 10 ** TMP_493
TMP_495(uint256) = TMP_492 * TMP_494
tempLock(uint256) := TMP_495(uint256)"];
94->98;
95[label="Node Type: IF 95

EXPRESSION:
now >= unlock_time_0710 && now < unlock_time_0810

IRs:
TMP_496(bool) = now >= unlock_time_0710
TMP_497(bool) = now < unlock_time_0810
TMP_498(bool) = TMP_496 && TMP_497
CONDITION TMP_498"];
95->96[label="True"];
95->97[label="False"];
96[label="Node Type: EXPRESSION 96

EXPRESSION:
tempLock = 15750000 * 1 * 10 ** uint256(decimals)

IRs:
TMP_499(uint256) = 15750000 * 1
TMP_500 = CONVERT decimals to uint256
TMP_501(uint256) = 10 ** TMP_500
TMP_502(uint256) = TMP_499 * TMP_501
tempLock(uint256) := TMP_502(uint256)"];
96->97;
97[label="Node Type: END_IF 97
"];
97->98;
98[label="Node Type: END_IF 98
"];
98->99;
99[label="Node Type: END_IF 99
"];
99->100;
100[label="Node Type: END_IF 100
"];
100->101;
101[label="Node Type: END_IF 101
"];
101->102;
102[label="Node Type: END_IF 102
"];
102->103;
103[label="Node Type: END_IF 103
"];
103->104;
104[label="Node Type: END_IF 104
"];
104->105;
105[label="Node Type: END_IF 105
"];
105->106;
106[label="Node Type: END_IF 106
"];
106->107;
107[label="Node Type: END_IF 107
"];
107->108;
108[label="Node Type: END_IF 108
"];
108->109;
109[label="Node Type: END_IF 109
"];
109->110;
110[label="Node Type: END_IF 110
"];
110->111;
111[label="Node Type: END_IF 111
"];
111->112;
112[label="Node Type: END_IF 112
"];
112->113;
113[label="Node Type: END_IF 113
"];
113->114;
114[label="Node Type: RETURN 114

EXPRESSION:
tempLock

IRs:
RETURN tempLock"];
}
// Function: 1076.sol-PDTToken-lockBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getLockBalance(_owner,decimals)

IRs:
TMP_567(uint256) = INTERNAL_CALL, LockUtils.getLockBalance(address,uint8)(_owner,decimals)
RETURN TMP_567"];
}
// Function: 1076.sol-PDTToken-madd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_518(uint128) = a + b
c(uint128) := TMP_518(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_519(bool) = c >= a
TMP_520(None) = SOLIDITY_CALL assert(bool)(TMP_519)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_517(bool) = x >= y
CONDITION TMP_517"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-PDTToken-mdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_530(uint128) = a / b
c(uint128) := TMP_530(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-miadd(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_533(uint64) = a + b
c(uint64) := TMP_533(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_534(bool) = c >= a
TMP_535(None) = SOLIDITY_CALL assert(bool)(TMP_534)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-midiv(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_545(uint64) = a / b
c(uint64) := TMP_545(uint64)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-mimax(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_547(bool) = x >= y
CONDITION TMP_547"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-PDTToken-mimin(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_546(bool) = x <= y
CONDITION TMP_546"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-PDTToken-mimul(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_539(uint64) = a * b
c(uint64) := TMP_539(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_540(bool) = a == 0
TMP_541(uint64) = c / a
TMP_542(bool) = TMP_541 == b
TMP_543(bool) = TMP_540 || TMP_542
TMP_544(None) = SOLIDITY_CALL assert(bool)(TMP_543)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_516(bool) = x <= y
CONDITION TMP_516"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-PDTToken-misub(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_536(bool) = b <= a
TMP_537(None) = SOLIDITY_CALL assert(bool)(TMP_536)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_538(uint64) = a - b
RETURN TMP_538"];
}
// Function: 1076.sol-PDTToken-mmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_532(bool) = x >= y
CONDITION TMP_532"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-PDTToken-mmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_531(bool) = x <= y
CONDITION TMP_531"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1076.sol-PDTToken-mmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_524(uint128) = a * b
c(uint128) := TMP_524(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_525(bool) = a == 0
TMP_526(uint128) = c / a
TMP_527(bool) = TMP_526 == b
TMP_528(bool) = TMP_525 || TMP_527
TMP_529(None) = SOLIDITY_CALL assert(bool)(TMP_528)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-msub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_521(bool) = b <= a
TMP_522(None) = SOLIDITY_CALL assert(bool)(TMP_521)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_523(uint128) = a - b
RETURN TMP_523"];
}
// Function: 1076.sol-PDTToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_509(uint256) = a * b
c(uint256) := TMP_509(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_510(bool) = a == 0
TMP_511(uint256) = c / a
TMP_512(bool) = TMP_511 == b
TMP_513(bool) = TMP_510 || TMP_512
TMP_514(None) = SOLIDITY_CALL assert(bool)(TMP_513)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1076.sol-PDTToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
advance_mining = 0x5EDBe36c4c4a816f150959B445d5Ae1F33054a82

IRs:
advance_mining(address) := 541548806996729441662115267373079401763071937154(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
community = 0xacF2e917E296547C0C476fDACf957111ca0307ce

IRs:
community(address) := 987363498210047433414075965829143633752022517710(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
foundation_investment = 0x9746079BEbcFfFf177818e23AedeC834ad0fb5f9

IRs:
foundation_investment(address) := 863619321401513882450893964415852745179742057977(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
mining = 0xBB7d6f428E77f98069AE1E01964A9Ed6db3c5Fe5

IRs:
mining(address) := 1070378559405622280315132464123903836042093682661(address)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
adviser = 0x0aE269Ae5F511786Fce5938c141DbF42e8A71E12

IRs:
adviser(address) := 62139082248958707976879802367378807969834016274(address)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
unlock_time_0910 = 1536508800

IRs:
unlock_time_0910(uint256) := 1536508800(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
unlock_time_1010 = 1539100800

IRs:
unlock_time_1010(uint256) := 1539100800(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
unlock_time_1110 = 1541779200

IRs:
unlock_time_1110(uint256) := 1541779200(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
unlock_time_1210 = 1544371200

IRs:
unlock_time_1210(uint256) := 1544371200(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
unlock_time_0110 = 1547049600

IRs:
unlock_time_0110(uint256) := 1547049600(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
unlock_time_0210 = 1549728000

IRs:
unlock_time_0210(uint256) := 1549728000(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
unlock_time_0310 = 1552147200

IRs:
unlock_time_0310(uint256) := 1552147200(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
unlock_time_0410 = 1554825600

IRs:
unlock_time_0410(uint256) := 1554825600(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
unlock_time_0510 = 1557417600

IRs:
unlock_time_0510(uint256) := 1557417600(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
unlock_time_0610 = 1560096000

IRs:
unlock_time_0610(uint256) := 1560096000(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
unlock_time_0710 = 1562688000

IRs:
unlock_time_0710(uint256) := 1562688000(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
unlock_time_0810 = 1565366400

IRs:
unlock_time_0810(uint256) := 1565366400(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
unlock_time_end = 1568044800

IRs:
unlock_time_end(uint256) := 1568044800(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
time_months = 2678400

IRs:
time_months(uint256) := 2678400(uint256)"];
}
// Function: 1076.sol-PDTToken-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_506(bool) = b <= a
TMP_507(None) = SOLIDITY_CALL assert(bool)(TMP_506)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_508(uint256) = a - b
RETURN TMP_508"];
}
// Function: 1076.sol-PDTToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, PDTToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
}
// Function: 1076.sol-PDTToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_11(mapping(address => uint256)) -> allowance[_from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_569(bool) = _value <= REF_12
TMP_570(None) = SOLIDITY_CALL require(bool)(TMP_569)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_13(mapping(address => uint256)) -> allowance[_from]
REF_14(uint256) -> REF_13[msg.sender]
REF_14(-> allowance) = REF_14 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, PDTToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1076.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
