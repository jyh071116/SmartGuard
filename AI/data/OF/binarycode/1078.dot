digraph G {
// Function: 1078.sol-HashChain-constructor(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hash = keccak256()(abi.encodePacked(counter,msg.sender,_msg))

IRs:
TMP_0(bytes) = SOLIDITY_CALL abi.encodePacked()(counter,msg.sender,_msg)
TMP_1(bytes32) = SOLIDITY_CALL keccak256()(TMP_0)
hash(bytes32) := TMP_1(bytes32)"];
}
// Function: 1078.sol-HashChain-getCounter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
counter

IRs:
RETURN counter"];
}
// Function: 1078.sol-HashChain-getHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hash

IRs:
RETURN hash"];
}
// Function: 1078.sol-HashChain-getState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(getCounter(),getHash())

IRs:
TMP_5(uint256) = INTERNAL_CALL, HashChain.getCounter()()
TMP_6(bytes32) = INTERNAL_CALL, HashChain.getHash()()
RETURN TMP_5,TMP_6"];
}
// Function: 1078.sol-HashChain-iterate(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
counter = ++ counter

IRs:
counter(uint256) = counter + 1
counter(uint256) := counter(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hash = keccak256()(abi.encodePacked(hash,counter,msg.sender,_msg))

IRs:
TMP_2(bytes) = SOLIDITY_CALL abi.encodePacked()(hash,counter,msg.sender,_msg)
TMP_3(bytes32) = SOLIDITY_CALL keccak256()(TMP_2)
hash(bytes32) := TMP_3(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Iteration(msg.sender,counter,hash,_msg)

IRs:
Emit Iteration(msg.sender,counter,hash,_msg)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(counter,hash)

IRs:
RETURN counter,hash"];
}
}
