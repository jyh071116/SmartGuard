digraph G {
// Function: 1087.sol-BAFCToken-BAFCToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 1.9 * 10 ** 26

IRs:
TMP_107(uint256) = 10 ** 26
TMP_108(uint256) = 1 * TMP_107
totalSupply(uint256) := TMP_108(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_72(uint256) -> balances[owner]
REF_72(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 1087.sol-BAFCToken-accountFrozenStatus(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
frozenAccount[target]

IRs:
REF_71(bool) -> frozenAccount[target]
RETURN REF_71"];
2[label="Node Type: RETURN 2

EXPRESSION:
frozen

IRs:
RETURN frozen"];
}
// Function: 1087.sol-BAFCToken-allowance(address,address)
digraph{
}
// Function: 1087.sol-BAFCToken-approve(address,uint256)
digraph{
}
// Function: 1087.sol-BAFCToken-balanceOf(address)
digraph{
}
// Function: 1087.sol-BAFCToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_109(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1087.sol-BAFCToken-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_70(bool) -> frozenAccount[target]
REF_70(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
3->1;
}
// Function: 1087.sol-BAFCToken-liquidityStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferable

IRs:
RETURN transferable"];
2[label="Node Type: RETURN 2

EXPRESSION:
_transferable

IRs:
RETURN _transferable"];
}
// Function: 1087.sol-BAFCToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_114(bool) = owner == msg.sender
CONDITION TMP_114"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
InvalidCaller(msg.sender)

IRs:
Emit InvalidCaller(msg.sender)"];
3->4;
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
}
// Function: 1087.sol-BAFCToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length < size + 4

IRs:
REF_73 -> LENGTH msg.data
TMP_110(uint256) = size + 4
TMP_111(bool) = REF_73 < TMP_110
CONDITION TMP_111"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1087.sol-BAFCToken-onlyTransferable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transferable

IRs:
CONDITION transferable"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LiquidityAlarm(The liquidity is switched off)

IRs:
Emit LiquidityAlarm(The liquidity is switched off)"];
3->4;
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
}
// Function: 1087.sol-BAFCToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
transferable = true

IRs:
transferable(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Business Alliance Financial Circle

IRs:
name(string) := Business Alliance Financial Circle(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = BAFC

IRs:
symbol(string) := BAFC(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 1087.sol-BAFCToken-switchLiquidity(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferable = _transferable

IRs:
transferable(bool) := _transferable(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1087.sol-BAFCToken-transfer(address,uint256)
digraph{
}
// Function: 1087.sol-BAFCToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1087.sol-BAFCToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_102 = CONVERT 0 to address
TMP_103(bool) = newOwner != TMP_102
CONDITION TMP_103"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldOwner = owner

IRs:
oldOwner(address) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipTransferred(oldOwner,owner)

IRs:
Emit OwnershipTransferred(oldOwner,owner)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
6->1;
}
// Function: 1087.sol-BAFCToken-unFrozenAccount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_74(bool) -> frozenAccount[msg.sender]
TMP_112 = UnaryType.BANG REF_74 
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1087.sol-BasicToken-accountFrozenStatus(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
frozenAccount[target]

IRs:
REF_9(bool) -> frozenAccount[target]
RETURN REF_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
frozen

IRs:
RETURN frozen"];
}
// Function: 1087.sol-BasicToken-allowance(address,address)
digraph{
}
// Function: 1087.sol-BasicToken-approve(address,uint256)
digraph{
}
// Function: 1087.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1087.sol-BasicToken-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_8(bool) -> frozenAccount[target]
REF_8(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
3->1;
}
// Function: 1087.sol-BasicToken-liquidityStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferable

IRs:
RETURN transferable"];
2[label="Node Type: RETURN 2

EXPRESSION:
_transferable

IRs:
RETURN _transferable"];
}
// Function: 1087.sol-BasicToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_33(bool) = owner == msg.sender
CONDITION TMP_33"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
InvalidCaller(msg.sender)

IRs:
Emit InvalidCaller(msg.sender)"];
3->4;
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
}
// Function: 1087.sol-BasicToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length < size + 4

IRs:
REF_10 -> LENGTH msg.data
TMP_29(uint256) = size + 4
TMP_30(bool) = REF_10 < TMP_29
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1087.sol-BasicToken-onlyTransferable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transferable

IRs:
CONDITION transferable"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LiquidityAlarm(The liquidity is switched off)

IRs:
Emit LiquidityAlarm(The liquidity is switched off)"];
3->4;
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
}
// Function: 1087.sol-BasicToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
transferable = true

IRs:
transferable(bool) := True(bool)"];
}
// Function: 1087.sol-BasicToken-switchLiquidity(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferable = _transferable

IRs:
transferable(bool) := _transferable(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1087.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
frozenAccount[_to]

IRs:
REF_0(bool) -> frozenAccount[_to]
CONDITION REF_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
InvalidAccount(_to,The receiver account is frozen)

IRs:
Emit InvalidAccount(_to,The receiver account is frozen)"];
2->6;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_15(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_15(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_16(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_16(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_18(uint256) = 2 * 32
MODIFIER_CALL, BasicToken.onlyPayloadSize(uint256)(TMP_18)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
unFrozenAccount()

IRs:
MODIFIER_CALL, BasicToken.unFrozenAccount()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyTransferable()

IRs:
MODIFIER_CALL, BasicToken.onlyTransferable()()"];
9->1;
}
// Function: 1087.sol-BasicToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1087.sol-BasicToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = newOwner != TMP_24
CONDITION TMP_25"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldOwner = owner

IRs:
oldOwner(address) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipTransferred(oldOwner,owner)

IRs:
Emit OwnershipTransferred(oldOwner,owner)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
6->1;
}
// Function: 1087.sol-BasicToken-unFrozenAccount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_11(bool) -> frozenAccount[msg.sender]
TMP_31 = UnaryType.BANG REF_11 
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1087.sol-ERC20Basic-allowance(address,address)
digraph{
}
// Function: 1087.sol-ERC20Basic-approve(address,uint256)
digraph{
}
// Function: 1087.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1087.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1087.sol-ERC20Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 1087.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a)

IRs:
TMP_11(bool) = c >= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1087.sol-SafeMath-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_13 = UnaryType.BANG assertion 
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 1087.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1087.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
INTERNAL_CALL, SafeMath.assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1087.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_7(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 1087.sol-StandardToken-accountFrozenStatus(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
frozenAccount[target]

IRs:
REF_21(bool) -> frozenAccount[target]
RETURN REF_21"];
2[label="Node Type: RETURN 2

EXPRESSION:
frozen

IRs:
RETURN frozen"];
}
// Function: 1087.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_39(mapping(address => uint256)) -> allowed[_owner]
REF_40(uint256) -> REF_39[_spender]
RETURN REF_40"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1087.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
(_value != 0) && (allowed[msg.sender][_spender] != 0)

IRs:
TMP_63(bool) = _value != 0
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[_spender]
TMP_64(bool) = REF_36 != 0
TMP_65(bool) = TMP_63 && TMP_64
CONDITION TMP_65"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_37(mapping(address => uint256)) -> allowed[msg.sender]
REF_38(uint256) -> REF_37[_spender]
REF_38(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unFrozenAccount()

IRs:
MODIFIER_CALL, BasicToken.unFrozenAccount()()"];
6->1;
}
// Function: 1087.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1087.sol-StandardToken-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_20(bool) -> frozenAccount[target]
REF_20(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
3->1;
}
// Function: 1087.sol-StandardToken-liquidityStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferable

IRs:
RETURN transferable"];
2[label="Node Type: RETURN 2

EXPRESSION:
_transferable

IRs:
RETURN _transferable"];
}
// Function: 1087.sol-StandardToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_72(bool) = owner == msg.sender
CONDITION TMP_72"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
InvalidCaller(msg.sender)

IRs:
Emit InvalidCaller(msg.sender)"];
3->4;
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
}
// Function: 1087.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length < size + 4

IRs:
REF_41 -> LENGTH msg.data
TMP_68(uint256) = size + 4
TMP_69(bool) = REF_41 < TMP_68
CONDITION TMP_69"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1087.sol-StandardToken-onlyTransferable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transferable

IRs:
CONDITION transferable"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LiquidityAlarm(The liquidity is switched off)

IRs:
Emit LiquidityAlarm(The liquidity is switched off)"];
3->4;
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
}
// Function: 1087.sol-StandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
transferable = true

IRs:
transferable(bool) := True(bool)"];
}
// Function: 1087.sol-StandardToken-switchLiquidity(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferable = _transferable

IRs:
transferable(bool) := _transferable(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1087.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1087.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
_allowance(uint256) := REF_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[_from] && ! frozenAccount[_to])

IRs:
REF_24(bool) -> frozenAccount[_from]
TMP_51 = UnaryType.BANG REF_24 
REF_25(bool) -> frozenAccount[_to]
TMP_52 = UnaryType.BANG REF_25 
TMP_53(bool) = TMP_51 && TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_26(uint256) -> balances[_to]
REF_27(uint256) -> balances[_to]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_27', '_value'] 
REF_26(uint256) (->balances) := TMP_55(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_29(uint256) -> balances[_from]
REF_30(uint256) -> balances[_from]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', '_value'] 
REF_29(uint256) (->balances) := TMP_56(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_32(mapping(address => uint256)) -> allowed[_from]
REF_33(uint256) -> REF_32[msg.sender]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_33(uint256) (->allowed) := TMP_57(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_59(uint256) = 3 * 32
MODIFIER_CALL, BasicToken.onlyPayloadSize(uint256)(TMP_59)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
unFrozenAccount()

IRs:
MODIFIER_CALL, BasicToken.unFrozenAccount()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyTransferable()

IRs:
MODIFIER_CALL, BasicToken.onlyTransferable()()"];
9->1;
}
// Function: 1087.sol-StandardToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = newOwner != TMP_46
CONDITION TMP_47"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldOwner = owner

IRs:
oldOwner(address) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipTransferred(oldOwner,owner)

IRs:
Emit OwnershipTransferred(oldOwner,owner)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicToken.onlyOwner()()"];
6->1;
}
// Function: 1087.sol-StandardToken-unFrozenAccount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_42(bool) -> frozenAccount[msg.sender]
TMP_70 = UnaryType.BANG REF_42 
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
