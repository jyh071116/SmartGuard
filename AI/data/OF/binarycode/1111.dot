digraph G {
// Function: 1111.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 1111.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 1111.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 1111.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 1111.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 1111.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 1111.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 1111.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 1111.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 1111.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 1111.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 1111.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 1111.sol-oraclizeLib-OAR()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_0(OraclizeAddrResolverI) = INTERNAL_CALL, oraclizeLib.oraclize_setNetwork()()
RETURN TMP_0"];
}
// Function: 1111.sol-oraclizeLib-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 1111.sol-oraclizeLib-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_124 = CONVERT _haystack to bytes
h(bytes) := TMP_124(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_125 = CONVERT _needle to bytes
n(bytes) := TMP_125(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_37 -> LENGTH h
TMP_126(bool) = REF_37 < 1
REF_38 -> LENGTH n
TMP_127(bool) = REF_38 < 1
TMP_128(bool) = TMP_126 || TMP_127
REF_39 -> LENGTH n
REF_40 -> LENGTH h
TMP_129(bool) = REF_39 > REF_40
TMP_130(bool) = TMP_128 || TMP_129
CONDITION TMP_130"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_131(uint256) = 0 - 1
RETURN TMP_131"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_41 -> LENGTH h
TMP_132(uint256) = 2 ** 128
TMP_133(uint256) = TMP_132 - 1
TMP_134(bool) = REF_41 > TMP_133
CONDITION TMP_134"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_135(uint256) = 0 - 1
RETURN TMP_135"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_42 -> LENGTH h
TMP_136(bool) = i < REF_42
CONDITION TMP_136"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_43(None) -> h[i]
REF_44(None) -> n[0]
TMP_137(bool) = REF_43 == REF_44
CONDITION TMP_137"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_45 -> LENGTH n
TMP_138(bool) = subindex < REF_45
TMP_139(uint256) = i + subindex
REF_46 -> LENGTH h
TMP_140(bool) = TMP_139 < REF_46
TMP_141(bool) = TMP_138 && TMP_140
TMP_142(uint256) = i + subindex
REF_47(None) -> h[TMP_142]
REF_48(None) -> n[subindex]
TMP_143(bool) = REF_47 == REF_48
TMP_144(bool) = TMP_141 && TMP_143
CONDITION TMP_144"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_145(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_49 -> LENGTH n
TMP_146(bool) = subindex == REF_49
CONDITION TMP_146"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_147 = CONVERT i to int256
RETURN TMP_147"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_148(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_149(uint256) = 0 - 1
RETURN TMP_149"];
}
// Function: 1111.sol-oraclizeLib-oraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
OraclizeI(OAR().getAddress())

IRs:
TMP_1(OraclizeAddrResolverI) = INTERNAL_CALL, oraclizeLib.OAR()()
TMP_2(address) = HIGH_LEVEL_CALL, dest:TMP_1(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_3 = CONVERT TMP_2 to OraclizeI
RETURN TMP_3"];
}
// Function: 1111.sol-oraclizeLib-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize().cbAddress()

IRs:
TMP_79(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
TMP_80(address) = HIGH_LEVEL_CALL, dest:TMP_79(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_80"];
}
// Function: 1111.sol-oraclizeLib-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize().getPrice(datasource)

IRs:
TMP_25(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
TMP_26(uint256) = HIGH_LEVEL_CALL, dest:TMP_25(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_26"];
}
// Function: 1111.sol-oraclizeLib-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize().getPrice(datasource,gaslimit)

IRs:
TMP_27(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
TMP_28(uint256) = HIGH_LEVEL_CALL, dest:TMP_27(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_28"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_query(0,datasource,arg)

IRs:
TMP_29(bytes32) = INTERNAL_CALL, oraclizeLib.oraclize_query(uint256,string,string)(0,datasource,arg)
RETURN TMP_29"];
2[label="Node Type: RETURN 2

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_query(0,datasource,arg1,arg2)

IRs:
TMP_45(bytes32) = INTERNAL_CALL, oraclizeLib.oraclize_query(uint256,string,string,string)(0,datasource,arg1,arg2)
RETURN TMP_45"];
2[label="Node Type: RETURN 2

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_query(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_53(bytes32) = INTERNAL_CALL, oraclizeLib.oraclize_query(uint256,string,string,string,uint256)(0,datasource,arg1,arg2,gaslimit)
RETURN TMP_53"];
2[label="Node Type: RETURN 2

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_query(0,datasource,arg,gaslimit)

IRs:
TMP_37(bytes32) = INTERNAL_CALL, oraclizeLib.oraclize_query(uint256,string,string,uint256)(0,datasource,arg,gaslimit)
RETURN TMP_37"];
2[label="Node Type: RETURN 2

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_query(0,datasource,argN)

IRs:
TMP_61(bytes32) = INTERNAL_CALL, oraclizeLib.oraclize_query(uint256,string,string[])(0,datasource,argN)
RETURN TMP_61"];
2[label="Node Type: RETURN 2

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_query(0,datasource,argN,gaslimit)

IRs:
TMP_70(bytes32) = INTERNAL_CALL, oraclizeLib.oraclize_query(uint256,string,string[],uint256)(0,datasource,argN,gaslimit)
RETURN TMP_70"];
2[label="Node Type: RETURN 2

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oracle = oraclize()

IRs:
TMP_30(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
oracle(OraclizeI) := TMP_30(OraclizeI)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = oracle.getPrice(datasource)

IRs:
TMP_31(uint256) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_31(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_32(uint256) = tx.gasprice * 200000
TMP_33(uint256) = 1000000000000000000 + TMP_32
TMP_34(bool) = price > TMP_33
CONDITION TMP_34"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oracle.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_36(bytes32) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_36"];
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oracle = oraclize()

IRs:
TMP_46(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
oracle(OraclizeI) := TMP_46(OraclizeI)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = oracle.getPrice(datasource)

IRs:
TMP_47(uint256) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_47(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_48(uint256) = tx.gasprice * 200000
TMP_49(uint256) = 1000000000000000000 + TMP_48
TMP_50(bool) = price > TMP_49
CONDITION TMP_50"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oracle.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_52(bytes32) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_52"];
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oracle = oraclize()

IRs:
TMP_54(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
oracle(OraclizeI) := TMP_54(OraclizeI)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = oracle.getPrice(datasource,gaslimit)

IRs:
TMP_55(uint256) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_55(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_56(uint256) = tx.gasprice * gaslimit
TMP_57(uint256) = 1000000000000000000 + TMP_56
TMP_58(bool) = price > TMP_57
CONDITION TMP_58"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oracle.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_60(bytes32) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_60"];
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oracle = oraclize()

IRs:
TMP_38(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
oracle(OraclizeI) := TMP_38(OraclizeI)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = oracle.getPrice(datasource,gaslimit)

IRs:
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_39(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_40(uint256) = tx.gasprice * gaslimit
TMP_41(uint256) = 1000000000000000000 + TMP_40
TMP_42(bool) = price > TMP_41
CONDITION TMP_42"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oracle.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_44(bytes32) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_44"];
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oracle = oraclize()

IRs:
TMP_62(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
oracle(OraclizeI) := TMP_62(OraclizeI)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = oracle.getPrice(datasource)

IRs:
TMP_63(uint256) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_63(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_64(uint256) = tx.gasprice * 200000
TMP_65(uint256) = 1000000000000000000 + TMP_64
TMP_66(bool) = price > TMP_65
CONDITION TMP_66"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_67(bytes) = INTERNAL_CALL, oraclizeLib.stra2cbor(string[])(argN)
args(bytes) := TMP_67(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oracle.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_69(bytes32) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_69"];
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oracle = oraclize()

IRs:
TMP_71(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
oracle(OraclizeI) := TMP_71(OraclizeI)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = oracle.getPrice(datasource,gaslimit)

IRs:
TMP_72(uint256) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_72(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_73(uint256) = tx.gasprice * gaslimit
TMP_74(uint256) = 1000000000000000000 + TMP_73
TMP_75(bool) = price > TMP_74
CONDITION TMP_75"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_76(bytes) = INTERNAL_CALL, oraclizeLib.stra2cbor(string[])(argN)
args(bytes) := TMP_76(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oracle.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_78(bytes32) = HIGH_LEVEL_CALL, dest:oracle(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_78"];
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 1111.sol-oraclizeLib-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize().setCustomGasPrice(gasPrice)

IRs:
TMP_83(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
HIGH_LEVEL_CALL, dest:TMP_83(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_84"];
}
// Function: 1111.sol-oraclizeLib-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_4(uint256) = INTERNAL_CALL, oraclizeLib.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_5(bool) = TMP_4 > 0
CONDITION TMP_5"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_6 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
RETURN TMP_6"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_7(uint256) = INTERNAL_CALL, oraclizeLib.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_8(bool) = TMP_7 > 0
CONDITION TMP_8"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_9 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
RETURN TMP_9"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_10(uint256) = INTERNAL_CALL, oraclizeLib.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_11(bool) = TMP_10 > 0
CONDITION TMP_11"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_12 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
RETURN TMP_12"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_13(uint256) = INTERNAL_CALL, oraclizeLib.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_14(bool) = TMP_13 > 0
CONDITION TMP_14"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_15 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
RETURN TMP_15"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_16(uint256) = INTERNAL_CALL, oraclizeLib.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_17(bool) = TMP_16 > 0
CONDITION TMP_17"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_18 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
RETURN TMP_18"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_19(uint256) = INTERNAL_CALL, oraclizeLib.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_20(bool) = TMP_19 > 0
CONDITION TMP_20"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_21 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
RETURN TMP_21"];
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_22(uint256) = INTERNAL_CALL, oraclizeLib.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_23(bool) = TMP_22 > 0
CONDITION TMP_23"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_24 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
RETURN TMP_24"];
21[label="Node Type: END_IF 21
"];
}
// Function: 1111.sol-oraclizeLib-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize().setProofType(proofP)

IRs:
TMP_81(OraclizeI) = INTERNAL_CALL, oraclizeLib.oraclize()()
HIGH_LEVEL_CALL, dest:TMP_81(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_82"];
}
// Function: 1111.sol-oraclizeLib-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_85 = CONVERT _a to bytes
tmp(bytes) := TMP_85(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_86(uint256) = 2 * 20
TMP_87(uint256) = 2 + TMP_86
TMP_88(bool) = i < TMP_87
CONDITION TMP_88"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_24(None) -> tmp[i]
TMP_89 = CONVERT REF_24 to uint160
b1(uint160) := TMP_89(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_90(uint256) = i + 1
REF_25(None) -> tmp[TMP_90]
TMP_91 = CONVERT REF_25 to uint160
b2(uint160) := TMP_91(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_92(bool) = b1 >= 97
TMP_93(bool) = b1 <= 102
TMP_94(bool) = TMP_92 && TMP_93
CONDITION TMP_94"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_95(bool) = b1 >= 65
TMP_96(bool) = b1 <= 70
TMP_97(bool) = TMP_95 && TMP_96
CONDITION TMP_97"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_98(bool) = b1 >= 48
TMP_99(bool) = b1 <= 57
TMP_100(bool) = TMP_98 && TMP_99
CONDITION TMP_100"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_101(bool) = b2 >= 97
TMP_102(bool) = b2 <= 102
TMP_103(bool) = TMP_101 && TMP_102
CONDITION TMP_103"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_104(bool) = b2 >= 65
TMP_105(bool) = b2 <= 70
TMP_106(bool) = TMP_104 && TMP_105
CONDITION TMP_106"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_107(bool) = b2 >= 48
TMP_108(bool) = b2 <= 57
TMP_109(bool) = TMP_107 && TMP_108
CONDITION TMP_109"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_110(uint160) = b1 * 16
TMP_111(uint160) = TMP_110 + b2
iaddr(uint160) = iaddr + TMP_111"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_112 = CONVERT iaddr to address
RETURN TMP_112"];
}
// Function: 1111.sol-oraclizeLib-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_181(uint256) = INTERNAL_CALL, oraclizeLib.parseInt(string,uint256)(_a,0)
RETURN TMP_181"];
}
// Function: 1111.sol-oraclizeLib-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_182 = CONVERT _a to bytes
bresult(bytes) := TMP_182(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_70 -> LENGTH bresult
TMP_183(bool) = i < REF_70
CONDITION TMP_183"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_71(None) -> bresult[i]
TMP_184(bool) = REF_71 >= 48
REF_72(None) -> bresult[i]
TMP_185(bool) = REF_72 <= 57
TMP_186(bool) = TMP_184 && TMP_185
CONDITION TMP_186"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_187(bool) = _b == 0
CONDITION TMP_187"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_188(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_73(None) -> bresult[i]
TMP_189 = CONVERT REF_73 to uint256
TMP_190(uint256) = TMP_189 - 48
mint(uint256) = mint + TMP_190"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_74(None) -> bresult[i]
TMP_191(bool) = REF_74 == 46
CONDITION TMP_191"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_192(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_193(bool) = _b > 0
CONDITION TMP_193"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_194(uint256) = 10 ** _b
mint(uint256) = mint * TMP_194"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 1111.sol-oraclizeLib-proofStorage_IPFS()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
0x01

IRs:
RETURN 1"];
}
// Function: 1111.sol-oraclizeLib-proofType_Android()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
0x20

IRs:
RETURN 32"];
}
// Function: 1111.sol-oraclizeLib-proofType_Ledger()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
0x30

IRs:
RETURN 48"];
}
// Function: 1111.sol-oraclizeLib-proofType_NONE()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
0x00

IRs:
RETURN 0"];
}
// Function: 1111.sol-oraclizeLib-proofType_Native()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
0xF0

IRs:
RETURN 240"];
}
// Function: 1111.sol-oraclizeLib-proofType_TLSNotary()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
0x10

IRs:
RETURN 16"];
}
// Function: 1111.sol-oraclizeLib-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_113 = CONVERT _a to bytes
a(bytes) := TMP_113(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_114 = CONVERT _b to bytes
b(bytes) := TMP_114(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_26 -> LENGTH a
minLength(uint256) := REF_26(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_27 -> LENGTH b
TMP_115(bool) = REF_27 < minLength
CONDITION TMP_115"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_28 -> LENGTH b
minLength(uint256) := REF_28(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_116(bool) = i < minLength
CONDITION TMP_116"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_29(None) -> a[i]
REF_30(None) -> b[i]
TMP_117(bool) = REF_29 < REF_30
CONDITION TMP_117"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_118(uint256) = 0 - 1
RETURN TMP_118"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_31(None) -> a[i]
REF_32(None) -> b[i]
TMP_119(bool) = REF_31 > REF_32
CONDITION TMP_119"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_120(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_33 -> LENGTH a
REF_34 -> LENGTH b
TMP_121(bool) = REF_33 < REF_34
CONDITION TMP_121"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_122(uint256) = 0 - 1
RETURN TMP_122"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_35 -> LENGTH a
REF_36 -> LENGTH b
TMP_123(bool) = REF_35 > REF_36
CONDITION TMP_123"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 1111.sol-oraclizeLib-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_180(string) = INTERNAL_CALL, oraclizeLib.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_180"];
}
// Function: 1111.sol-oraclizeLib-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_179(string) = INTERNAL_CALL, oraclizeLib.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_179"];
}
// Function: 1111.sol-oraclizeLib-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_178(string) = INTERNAL_CALL, oraclizeLib.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_178"];
}
// Function: 1111.sol-oraclizeLib-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_150 = CONVERT _a to bytes
_ba(bytes) := TMP_150(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_151 = CONVERT _b to bytes
_bb(bytes) := TMP_151(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_152 = CONVERT _c to bytes
_bc(bytes) := TMP_152(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_153 = CONVERT _d to bytes
_bd(bytes) := TMP_153(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_154 = CONVERT _e to bytes
_be(bytes) := TMP_154(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_50 -> LENGTH _ba
REF_51 -> LENGTH _bb
TMP_156(uint256) = REF_50 + REF_51
REF_52 -> LENGTH _bc
TMP_157(uint256) = TMP_156 + REF_52
REF_53 -> LENGTH _bd
TMP_158(uint256) = TMP_157 + REF_53
REF_54 -> LENGTH _be
TMP_159(uint256) = TMP_158 + REF_54
TMP_160 = new string(TMP_159)
abcde(string) := TMP_160(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_161 = CONVERT abcde to bytes
babcde(bytes) := TMP_161(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_55 -> LENGTH _ba
TMP_162(bool) = i < REF_55
CONDITION TMP_162"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_163(uint256) := k(uint256)
k(uint256) = k + 1
REF_56(None) -> babcde[TMP_163]
REF_57(None) -> _ba[i]
REF_56(None) (->babcde) := REF_57(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_164(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_58 -> LENGTH _bb
TMP_165(bool) = i < REF_58
CONDITION TMP_165"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_166(uint256) := k(uint256)
k(uint256) = k + 1
REF_59(None) -> babcde[TMP_166]
REF_60(None) -> _bb[i]
REF_59(None) (->babcde) := REF_60(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_167(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_61 -> LENGTH _bc
TMP_168(bool) = i < REF_61
CONDITION TMP_168"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_169(uint256) := k(uint256)
k(uint256) = k + 1
REF_62(None) -> babcde[TMP_169]
REF_63(None) -> _bc[i]
REF_62(None) (->babcde) := REF_63(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_170(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_64 -> LENGTH _bd
TMP_171(bool) = i < REF_64
CONDITION TMP_171"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_172(uint256) := k(uint256)
k(uint256) = k + 1
REF_65(None) -> babcde[TMP_172]
REF_66(None) -> _bd[i]
REF_65(None) (->babcde) := REF_66(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_173(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_67 -> LENGTH _be
TMP_174(bool) = i < REF_67
CONDITION TMP_174"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_175(uint256) := k(uint256)
k(uint256) = k + 1
REF_68(None) -> babcde[TMP_175]
REF_69(None) -> _be[i]
REF_68(None) (->babcde) := REF_69(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_176(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_177 = CONVERT babcde to string
RETURN TMP_177"];
}
// Function: 1111.sol-oraclizeLib-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_76 -> LENGTH arr
arrlen(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_208(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_208(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_209(bool) = i < arrlen
CONDITION TMP_209"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_77(bytes) -> elemArray[i]
REF_78(string) -> arr[i]
TMP_210 = CONVERT REF_78 to bytes
REF_77(bytes) (->elemArray) := TMP_210(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_79(bytes) -> elemArray[i]
REF_80 -> LENGTH REF_79
REF_81(bytes) -> elemArray[i]
REF_82 -> LENGTH REF_81
TMP_211(uint256) = REF_82 - 1
TMP_212(uint256) = TMP_211 / 23
TMP_213(uint256) = REF_80 + TMP_212
TMP_214(uint256) = TMP_213 + 3
outputlen(uint256) = outputlen + TMP_214"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_215(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_216(uint256) = arrlen + 128
cborlen(uint256) := TMP_216(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_217 = CONVERT cborlen to bytes1
REF_83 -> LENGTH TMP_217
outputlen(uint256) = outputlen + REF_83"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_219 = new bytes(outputlen)
res(bytes) := TMP_219(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_220 = CONVERT cborlen to bytes1
REF_84 -> LENGTH TMP_220
TMP_221(bool) = REF_84 > ctr
CONDITION TMP_221"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_85(None) -> res[ctr]
TMP_222 = CONVERT cborlen to bytes1
REF_86(None) -> TMP_222[ctr]
REF_85(None) (->res) := REF_86(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_223(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_224(bool) = i < arrlen
CONDITION TMP_224"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_87(uint256) -> res[ctr]
REF_87(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_225(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_88(bytes) -> elemArray[i]
REF_89 -> LENGTH REF_88
TMP_226(bool) = x < REF_89
CONDITION TMP_226"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_227(uint256) = x % 23
TMP_228(bool) = TMP_227 == 0
CONDITION TMP_228"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_229 = CONVERT elemcborlen to bytes1
REF_90 -> LENGTH TMP_229
TMP_230(uint256) = ctr - lctr
TMP_231(bool) = REF_90 > TMP_230
CONDITION TMP_231"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_91(None) -> res[ctr]
TMP_232 = CONVERT elemcborlen to bytes1
TMP_233(uint256) = ctr - lctr
REF_92(None) -> TMP_232[TMP_233]
REF_91(None) (->res) := REF_92(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_234(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_93(None) -> res[ctr]
REF_94(bytes) -> elemArray[i]
REF_95(None) -> REF_94[x]
REF_93(None) (->res) := REF_95(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_235(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_236(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_96(uint256) -> res[ctr]
REF_96(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_237(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_238(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_97(bytes) -> elemArray[i]
REF_98 -> LENGTH REF_97
TMP_239(uint256) = REF_98 - x
TMP_240(bool) = TMP_239 >= 24
CONDITION TMP_240"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_99(bytes) -> elemArray[i]
REF_100 -> LENGTH REF_99
TMP_241(uint256) = REF_100 - x
elemcborlen(uint256) := TMP_241(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 1111.sol-oraclizeLib-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_195(bool) = i == 0
CONDITION TMP_195"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_196(bool) = j != 0
CONDITION TMP_196"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_197(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_199 = new bytes(len)
bstr(bytes) := TMP_199(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_200(uint256) = len - 1
k(uint256) := TMP_200(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_201(bool) = i != 0
CONDITION TMP_201"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_202(uint256) := k(uint256)
k(uint256) = k - 1
REF_75(bytes1) -> bstr[TMP_202]
TMP_203(uint256) = i % 10
TMP_204(uint256) = 48 + TMP_203
TMP_205 = CONVERT TMP_204 to bytes1
REF_75(bytes1) (->bstr) := TMP_205(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_206 = CONVERT bstr to string
RETURN TMP_206"];
}
}
