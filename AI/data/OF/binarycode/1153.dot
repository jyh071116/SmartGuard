digraph G {
// Function: 1153.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_109(bool) = size > 0
RETURN TMP_109"];
}
// Function: 1153.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 1153.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 1153.sol-ERC721-implementsERC721()
digraph{
}
// Function: 1153.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 1153.sol-ERC721-takeOwnership(uint256)
digraph{
}
// Function: 1153.sol-ERC721-totalSupply()
digraph{
}
// Function: 1153.sol-ERC721-transfer(address,uint256)
digraph{
}
// Function: 1153.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 1153.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_106(uint256) = a + b
c(uint256) := TMP_106(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_107(bool) = c >= a
TMP_108(None) = SOLIDITY_CALL assert(bool)(TMP_107)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1153.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_102(uint256) = a / b
c(uint256) := TMP_102(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1153.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_97(bool) = a == 0
CONDITION TMP_97"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_98(uint256) = a * b
c(uint256) := TMP_98(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_99(uint256) = c / a
TMP_100(bool) = TMP_99 == b
TMP_101(None) = SOLIDITY_CALL assert(bool)(TMP_100)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1153.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_103(bool) = b <= a
TMP_104(None) = SOLIDITY_CALL assert(bool)(TMP_103)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_105(uint256) = a - b
RETURN TMP_105"];
}
// Function: 1153.sol-ZethrDividendCards-_addressNotNull(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_to != address(0)

IRs:
TMP_70 = CONVERT 0 to address
TMP_71(bool) = _to != TMP_70
RETURN TMP_71"];
}
// Function: 1153.sol-ZethrDividendCards-_approved(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
divCardIndexToApproved[_divCardId] == _to

IRs:
REF_46(address) -> divCardIndexToApproved[_divCardId]
TMP_72(bool) = REF_46 == _to
RETURN TMP_72"];
}
// Function: 1153.sol-ZethrDividendCards-_createDivCard(string,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_divcard = Card({name:_name,percentIncrease:_percentIncrease})

IRs:
TMP_73(ZethrDividendCards.Card) = new Card(_name,_percentIncrease)
_divcard(ZethrDividendCards.Card) := TMP_73(ZethrDividendCards.Card)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newCardId = divCards.push(_divcard) - 1

IRs:
REF_48 -> LENGTH divCards
TMP_76(uint256) := REF_48(uint256)
TMP_77(uint256) = TMP_76 + 1
REF_48(uint256) (->divCards) := TMP_77(uint256)
REF_49(ZethrDividendCards.Card) -> divCards[TMP_76]
REF_49(ZethrDividendCards.Card) (->divCards) := _divcard(ZethrDividendCards.Card)
TMP_75(None) = TMP_74 - 1
newCardId(uint256) := TMP_75(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(newCardId == uint256(uint32(newCardId)))

IRs:
TMP_78 = CONVERT newCardId to uint32
TMP_79 = CONVERT TMP_78 to uint256
TMP_80(bool) = newCardId == TMP_79
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Birth(newCardId,_name,_owner)

IRs:
Emit Birth(newCardId,_name,_owner)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
divCardIndexToPrice[newCardId] = _price

IRs:
REF_50(uint256) -> divCardIndexToPrice[newCardId]
REF_50(uint256) (->divCardIndexToPrice) := _price(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(BANKROLL,_owner,newCardId)

IRs:
INTERNAL_CALL, ZethrDividendCards._transfer(address,address,uint256)(BANKROLL,_owner,newCardId)"];
}
// Function: 1153.sol-ZethrDividendCards-_owns(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
claimant == divCardIndexToOwner[_divCardId]

IRs:
REF_51(address) -> divCardIndexToOwner[_divCardId]
TMP_84(bool) = claimant == REF_51
RETURN TMP_84"];
}
// Function: 1153.sol-ZethrDividendCards-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownershipDivCardCount[_to] ++

IRs:
REF_52(uint256) -> ownershipDivCardCount[_to]
TMP_85(uint256) := REF_52(uint256)
REF_52(-> ownershipDivCardCount) = REF_52 + 1"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
divCardIndexToOwner[_divCardId] = _to

IRs:
REF_53(address) -> divCardIndexToOwner[_divCardId]
REF_53(address) (->divCardIndexToOwner) := _to(address)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_from != address(0)

IRs:
TMP_86 = CONVERT 0 to address
TMP_87(bool) = _from != TMP_86
CONDITION TMP_87"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownershipDivCardCount[_from] --

IRs:
REF_54(uint256) -> ownershipDivCardCount[_from]
TMP_88(uint256) := REF_54(uint256)
REF_54(-> ownershipDivCardCount) = REF_54 - 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete divCardIndexToApproved[_divCardId]

IRs:
REF_55(address) -> divCardIndexToApproved[_divCardId]
divCardIndexToApproved = delete REF_55 "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_divCardId)

IRs:
Emit Transfer(_from,_to,_divCardId)"];
}
// Function: 1153.sol-ZethrDividendCards-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owns(msg.sender,_tokenId))

IRs:
TMP_9(bool) = INTERNAL_CALL, ZethrDividendCards._owns(address,uint256)(msg.sender,_tokenId)
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
divCardIndexToApproved[_tokenId] = _to

IRs:
REF_12(address) -> divCardIndexToApproved[_tokenId]
REF_12(address) (->divCardIndexToApproved) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_to,_tokenId)

IRs:
Emit Approval(msg.sender,_to,_tokenId)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isNotContract()

IRs:
MODIFIER_CALL, ZethrDividendCards.isNotContract()()"];
4->1;
}
// Function: 1153.sol-ZethrDividendCards-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownershipDivCardCount[_owner]

IRs:
REF_13(uint256) -> ownershipDivCardCount[_owner]
RETURN REF_13"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1153.sol-ZethrDividendCards-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
BANKROLL = _bankroll

IRs:
BANKROLL(address) := _bankroll(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
createDivCard(2%,1000000000000000000,2)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(2%,1000000000000000000,2)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
divCardRateToIndex[2] = 0

IRs:
REF_0(uint256) -> divCardRateToIndex[2]
REF_0(uint256) (->divCardRateToIndex) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
createDivCard(5%,1000000000000000000,5)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(5%,1000000000000000000,5)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
divCardRateToIndex[5] = 1

IRs:
REF_1(uint256) -> divCardRateToIndex[5]
REF_1(uint256) (->divCardRateToIndex) := 1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
createDivCard(10%,1000000000000000000,10)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(10%,1000000000000000000,10)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
divCardRateToIndex[10] = 2

IRs:
REF_2(uint256) -> divCardRateToIndex[10]
REF_2(uint256) (->divCardRateToIndex) := 2(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
createDivCard(15%,1000000000000000000,15)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(15%,1000000000000000000,15)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
divCardRateToIndex[15] = 3

IRs:
REF_3(uint256) -> divCardRateToIndex[15]
REF_3(uint256) (->divCardRateToIndex) := 3(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
createDivCard(20%,1000000000000000000,20)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(20%,1000000000000000000,20)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
divCardRateToIndex[20] = 4

IRs:
REF_4(uint256) -> divCardRateToIndex[20]
REF_4(uint256) (->divCardRateToIndex) := 4(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
createDivCard(25%,1000000000000000000,25)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(25%,1000000000000000000,25)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
divCardRateToIndex[25] = 5

IRs:
REF_5(uint256) -> divCardRateToIndex[25]
REF_5(uint256) (->divCardRateToIndex) := 5(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
createDivCard(33%,1000000000000000000,33)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(33%,1000000000000000000,33)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
divCardRateToIndex[33] = 6

IRs:
REF_6(uint256) -> divCardRateToIndex[33]
REF_6(uint256) (->divCardRateToIndex) := 6(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
createDivCard(MASTER,5000000000000000000,10)

IRs:
INTERNAL_CALL, ZethrDividendCards.createDivCard(string,uint256,uint256)(MASTER,5000000000000000000,10)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
divCardRateToIndex[999] = 7

IRs:
REF_7(uint256) -> divCardRateToIndex[999]
REF_7(uint256) (->divCardRateToIndex) := 7(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onSale = false

IRs:
onSale(bool) := False(bool)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
administrators[0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae] = true

IRs:
REF_8(bool) -> administrators[452766396536057077178306851167341941448351481006]
REF_8(bool) (->administrators) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
administrators[0x11e52c75998fe2E7928B191bfc5B25937Ca16741] = true

IRs:
REF_9(bool) -> administrators[102163586712205695789519347749400606854535538497]
REF_9(bool) (->administrators) := True(bool)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
administrators[0x20C945800de43394F70D789874a4daC9cFA57451] = true

IRs:
REF_10(bool) -> administrators[187176208773604631198117992174536503321195541585]
REF_10(bool) (->administrators) := True(bool)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
administrators[0xef764BAC8a438E7E498c2E5fcCf0f174c3E3F8dB] = true

IRs:
REF_11(bool) -> administrators[1367086874294120489657851107616899385891777411291]
REF_11(bool) (->administrators) := True(bool)"];
}
// Function: 1153.sol-ZethrDividendCards-createDivCard(string,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_createDivCard(_name,BANKROLL,_price,_percentIncrease)

IRs:
INTERNAL_CALL, ZethrDividendCards._createDivCard(string,address,uint256,uint256)(_name,BANKROLL,_price,_percentIncrease)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, ZethrDividendCards.onlyCreator()()"];
2->1;
}
// Function: 1153.sol-ZethrDividendCards-getDivCard(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
divCard = divCards[_divCardId]

IRs:
REF_14(ZethrDividendCards.Card) -> divCards[_divCardId]
divCard(ZethrDividendCards.Card) := REF_14(ZethrDividendCards.Card)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
divCardName = divCard.name

IRs:
REF_15(string) -> divCard.name
divCardName(string) := REF_15(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sellingPrice = divCardIndexToPrice[_divCardId]

IRs:
REF_16(uint256) -> divCardIndexToPrice[_divCardId]
sellingPrice(uint256) := REF_16(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = divCardIndexToOwner[_divCardId]

IRs:
REF_17(address) -> divCardIndexToOwner[_divCardId]
owner(address) := REF_17(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(divCardName,sellingPrice,owner)

IRs:
RETURN divCardName,sellingPrice,owner"];
}
// Function: 1153.sol-ZethrDividendCards-hasStarted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(onSale == true)

IRs:
TMP_94(bool) = onSale == True
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1153.sol-ZethrDividendCards-implementsERC721()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1153.sol-ZethrDividendCards-isAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(administrators[msg.sender])

IRs:
REF_56(bool) -> administrators[msg.sender]
TMP_96(None) = SOLIDITY_CALL require(bool)(REF_56)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1153.sol-ZethrDividendCards-isNotContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == tx.origin)

IRs:
TMP_92(bool) = msg.sender == tx.origin
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1153.sol-ZethrDividendCards-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
NAME

IRs:
RETURN NAME"];
}
// Function: 1153.sol-ZethrDividendCards-onlyCreator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_90(bool) = msg.sender == creator
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1153.sol-ZethrDividendCards-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = divCardIndexToOwner[_divCardId]

IRs:
REF_18(address) -> divCardIndexToOwner[_divCardId]
owner(address) := REF_18(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = owner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
4[label="Node Type: RETURN 4

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 1153.sol-ZethrDividendCards-priceOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
divCardIndexToPrice[_divCardId]

IRs:
REF_36(uint256) -> divCardIndexToPrice[_divCardId]
RETURN REF_36"];
2[label="Node Type: RETURN 2

EXPRESSION:
price

IRs:
RETURN price"];
}
// Function: 1153.sol-ZethrDividendCards-purchase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldOwner = divCardIndexToOwner[_divCardId]

IRs:
REF_19(address) -> divCardIndexToOwner[_divCardId]
oldOwner(address) := REF_19(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newOwner = msg.sender

IRs:
newOwner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
currentPrice = divCardIndexToPrice[_divCardId]

IRs:
REF_20(uint256) -> divCardIndexToPrice[_divCardId]
currentPrice(uint256) := REF_20(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(oldOwner != newOwner)

IRs:
TMP_19(bool) = oldOwner != newOwner
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_addressNotNull(newOwner))

IRs:
TMP_21(bool) = INTERNAL_CALL, ZethrDividendCards._addressNotNull(address)(newOwner)
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(msg.value >= currentPrice)

IRs:
TMP_23(bool) = msg.value >= currentPrice
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
percentIncrease = divCards[_divCardId].percentIncrease

IRs:
REF_21(ZethrDividendCards.Card) -> divCards[_divCardId]
REF_22(uint256) -> REF_21.percentIncrease
percentIncrease(uint256) := REF_22(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
previousPrice = SafeMath.mul(currentPrice,100).div(100 + percentIncrease)

IRs:
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['currentPrice', '100'] 
TMP_26(uint256) = 100 + percentIncrease
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_25', 'TMP_26'] 
previousPrice(uint256) := TMP_27(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
totalProfit = SafeMath.sub(currentPrice,previousPrice)

IRs:
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['currentPrice', 'previousPrice'] 
totalProfit(uint256) := TMP_28(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
oldOwnerProfit = SafeMath.div(totalProfit,2)

IRs:
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['totalProfit', '2'] 
oldOwnerProfit(uint256) := TMP_29(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bankrollProfit = SafeMath.sub(totalProfit,oldOwnerProfit)

IRs:
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalProfit', 'oldOwnerProfit'] 
bankrollProfit(uint256) := TMP_30(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
oldOwnerProfit = SafeMath.add(oldOwnerProfit,previousPrice)

IRs:
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oldOwnerProfit', 'previousPrice'] 
oldOwnerProfit(uint256) := TMP_31(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
purchaseExcess = SafeMath.sub(msg.value,currentPrice)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['msg.value', 'currentPrice'] 
purchaseExcess(uint256) := TMP_32(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
divCardIndexToPrice[_divCardId] = SafeMath.div(SafeMath.mul(currentPrice,(100 + percentIncrease)),100)

IRs:
REF_30(uint256) -> divCardIndexToPrice[_divCardId]
TMP_33(uint256) = 100 + percentIncrease
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['currentPrice', 'TMP_33'] 
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_34', '100'] 
REF_30(uint256) (->divCardIndexToPrice) := TMP_35(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_transfer(oldOwner,newOwner,_divCardId)

IRs:
INTERNAL_CALL, ZethrDividendCards._transfer(address,address,uint256)(oldOwner,newOwner,_divCardId)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
BANKROLL.send(bankrollProfit)

IRs:
TMP_37 = SEND dest:BANKROLL value:bankrollProfit"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
oldOwner.send(oldOwnerProfit)

IRs:
TMP_38 = SEND dest:oldOwner value:oldOwnerProfit"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
msg.sender.transfer(purchaseExcess)

IRs:
Transfer dest:msg.sender value:purchaseExcess"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
hasStarted()

IRs:
MODIFIER_CALL, ZethrDividendCards.hasStarted()()"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
isNotContract()

IRs:
MODIFIER_CALL, ZethrDividendCards.isNotContract()()"];
20->1;
}
// Function: 1153.sol-ZethrDividendCards-receiveDividends(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_divCardId = divCardRateToIndex[_divCardRate]

IRs:
REF_39(uint256) -> divCardRateToIndex[_divCardRate]
_divCardId(uint256) := REF_39(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_regularAddress = divCardIndexToOwner[_divCardId]

IRs:
REF_40(address) -> divCardIndexToOwner[_divCardId]
_regularAddress(address) := REF_40(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_masterAddress = divCardIndexToOwner[7]

IRs:
REF_41(address) -> divCardIndexToOwner[7]
_masterAddress(address) := REF_41(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
toMaster = msg.value.div(2)

IRs:
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '2'] 
toMaster(uint256) := TMP_66(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
toRegular = msg.value.sub(toMaster)

IRs:
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['msg.value', 'toMaster'] 
toRegular(uint256) := TMP_67(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_masterAddress.send(toMaster)

IRs:
TMP_68 = SEND dest:_masterAddress value:toMaster"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_regularAddress.send(toRegular)

IRs:
TMP_69 = SEND dest:_regularAddress value:toRegular"];
}
// Function: 1153.sol-ZethrDividendCards-setBankroll(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
BANKROLL = where

IRs:
BANKROLL(address) := where(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, ZethrDividendCards.isAdmin()()"];
2->1;
}
// Function: 1153.sol-ZethrDividendCards-setCreator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_creator != address(0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = _creator != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
creator = _creator

IRs:
creator(address) := _creator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, ZethrDividendCards.onlyCreator()()"];
3->1;
}
// Function: 1153.sol-ZethrDividendCards-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
NAME = ZethrDividendCard

IRs:
NAME(string) := ZethrDividendCard(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
SYMBOL = ZDC

IRs:
SYMBOL(string) := ZDC(string)"];
}
// Function: 1153.sol-ZethrDividendCards-startCardSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
onSale = true

IRs:
onSale(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, ZethrDividendCards.onlyCreator()()"];
2->1;
}
// Function: 1153.sol-ZethrDividendCards-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SYMBOL

IRs:
RETURN SYMBOL"];
}
// Function: 1153.sol-ZethrDividendCards-takeOwnership(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
newOwner = msg.sender

IRs:
newOwner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldOwner = divCardIndexToOwner[_divCardId]

IRs:
REF_37(address) -> divCardIndexToOwner[_divCardId]
oldOwner(address) := REF_37(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_addressNotNull(newOwner))

IRs:
TMP_46(bool) = INTERNAL_CALL, ZethrDividendCards._addressNotNull(address)(newOwner)
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_approved(newOwner,_divCardId))

IRs:
TMP_48(bool) = INTERNAL_CALL, ZethrDividendCards._approved(address,uint256)(newOwner,_divCardId)
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(oldOwner,newOwner,_divCardId)

IRs:
INTERNAL_CALL, ZethrDividendCards._transfer(address,address,uint256)(oldOwner,newOwner,_divCardId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isNotContract()

IRs:
MODIFIER_CALL, ZethrDividendCards.isNotContract()()"];
6->1;
}
// Function: 1153.sol-ZethrDividendCards-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
divCards.length

IRs:
REF_38 -> LENGTH divCards
RETURN REF_38"];
2[label="Node Type: RETURN 2

EXPRESSION:
total

IRs:
RETURN total"];
}
// Function: 1153.sol-ZethrDividendCards-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owns(msg.sender,_divCardId))

IRs:
TMP_52(bool) = INTERNAL_CALL, ZethrDividendCards._owns(address,uint256)(msg.sender,_divCardId)
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addressNotNull(_to))

IRs:
TMP_54(bool) = INTERNAL_CALL, ZethrDividendCards._addressNotNull(address)(_to)
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(msg.sender,_to,_divCardId)

IRs:
INTERNAL_CALL, ZethrDividendCards._transfer(address,address,uint256)(msg.sender,_to,_divCardId)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isNotContract()

IRs:
MODIFIER_CALL, ZethrDividendCards.isNotContract()()"];
4->1;
}
// Function: 1153.sol-ZethrDividendCards-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owns(_from,_divCardId))

IRs:
TMP_58(bool) = INTERNAL_CALL, ZethrDividendCards._owns(address,uint256)(_from,_divCardId)
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_approved(_to,_divCardId))

IRs:
TMP_60(bool) = INTERNAL_CALL, ZethrDividendCards._approved(address,uint256)(_to,_divCardId)
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_addressNotNull(_to))

IRs:
TMP_62(bool) = INTERNAL_CALL, ZethrDividendCards._addressNotNull(address)(_to)
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(_from,_to,_divCardId)

IRs:
INTERNAL_CALL, ZethrDividendCards._transfer(address,address,uint256)(_from,_to,_divCardId)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isNotContract()

IRs:
MODIFIER_CALL, ZethrDividendCards.isNotContract()()"];
5->1;
}
}
