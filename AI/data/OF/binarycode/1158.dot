digraph G {
// Function: 1158.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_21(uint256) -> balances[_owner]
RETURN REF_21"];
}
// Function: 1158.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1158.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _to != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_14(uint256) -> balances[msg.sender]
TMP_35(bool) = _value <= REF_14
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_15(uint256) -> balances[msg.sender]
REF_16(uint256) -> balances[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_16', '_value'] 
REF_15(uint256) (->balances) := TMP_37(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_18(uint256) -> balances[_to]
REF_19(uint256) -> balances[_to]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_19', '_value'] 
REF_18(uint256) (->balances) := TMP_38(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-DetailedERC20-allowance(address,address)
digraph{
}
// Function: 1158.sol-DetailedERC20-approve(address,uint256)
digraph{
}
// Function: 1158.sol-DetailedERC20-balanceOf(address)
digraph{
}
// Function: 1158.sol-DetailedERC20-constructor(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
}
// Function: 1158.sol-DetailedERC20-totalSupply()
digraph{
}
// Function: 1158.sol-DetailedERC20-transfer(address,uint256)
digraph{
}
// Function: 1158.sol-DetailedERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1158.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1158.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1158.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1158.sol-ERC20-totalSupply()
digraph{
}
// Function: 1158.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1158.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1158.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1158.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1158.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1158.sol-Level01Token-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_180 = CONVERT 0 to address
TMP_181(bool) = _newOwner != TMP_180
TMP_182(None) = SOLIDITY_CALL require(bool)(TMP_181)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1158.sol-Level01Token-addAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isAdministrator(_administrator)

IRs:
TMP_152(bool) = INTERNAL_CALL, PausableToken.isAdministrator(address)(_administrator)
CONDITION TMP_152"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addRole(_administrator,ROLE_ADMINISTRATOR)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_administrator,ROLE_ADMINISTRATOR)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1158.sol-Level01Token-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].add(addr)

IRs:
REF_118(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_118', 'addr'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(addr,roleName)

IRs:
Emit RoleAdded(addr,roleName)"];
}
// Function: 1158.sol-Level01Token-allowance(address,address)
digraph{
}
// Function: 1158.sol-Level01Token-approve(address,uint256)
digraph{
}
// Function: 1158.sol-Level01Token-balanceOf(address)
digraph{
}
// Function: 1158.sol-Level01Token-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].check(addr)

IRs:
REF_114(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_114', 'addr'] "];
}
// Function: 1158.sol-Level01Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initialTotalSupply = INITIAL_WHOLE_TOKENS * uint256(10) ** decimals

IRs:
TMP_209 = CONVERT 10 to uint256
TMP_210(uint256) = TMP_209 ** decimals
TMP_211(uint256) = INITIAL_WHOLE_TOKENS * TMP_210
initialTotalSupply(uint256) := TMP_211(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = initialTotalSupply

IRs:
totalSupply_(uint256) := initialTotalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = initialTotalSupply

IRs:
REF_164(uint256) -> balances[msg.sender]
REF_164(uint256) (->balances) := initialTotalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),msg.sender,initialTotalSupply)

IRs:
TMP_212 = CONVERT 0 to address
Emit Transfer(TMP_212,msg.sender,initialTotalSupply)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
DetailedERC20(Level01 Token,LVX,18)

IRs:
INTERNAL_CALL, DetailedERC20.constructor(string,string,uint8)(Level01 Token,LVX,18)"];
5->1;
}
// Function: 1158.sol-Level01Token-constructor(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
}
// Function: 1158.sol-Level01Token-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_147(mapping(address => uint256)) -> allowed[msg.sender]
REF_148(uint256) -> REF_147[_spender]
oldValue(uint256) := REF_148(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_198(bool) = _subtractedValue > oldValue
CONDITION TMP_198"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_149(mapping(address => uint256)) -> allowed[msg.sender]
REF_150(uint256) -> REF_149[_spender]
REF_150(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_151(mapping(address => uint256)) -> allowed[msg.sender]
REF_152(uint256) -> REF_151[_spender]
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_152(uint256) (->allowed) := TMP_199(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_154(mapping(address => uint256)) -> allowed[msg.sender]
REF_155(uint256) -> REF_154[_spender]
Emit Approval(msg.sender,_spender,REF_155)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-Level01Token-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[roleName].has(addr)

IRs:
REF_116(Roles.Role) -> roles[roleName]
TMP_164(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_116', 'addr'] 
RETURN TMP_164"];
}
// Function: 1158.sol-Level01Token-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_140(mapping(address => uint256)) -> allowed[msg.sender]
REF_141(uint256) -> REF_140[_spender]
REF_142(mapping(address => uint256)) -> allowed[msg.sender]
REF_143(uint256) -> REF_142[_spender]
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_143', '_addedValue'] 
REF_141(uint256) (->allowed) := TMP_196(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_145(mapping(address => uint256)) -> allowed[msg.sender]
REF_146(uint256) -> REF_145[_spender]
Emit Approval(msg.sender,_spender,REF_146)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-Level01Token-isAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_administrator,ROLE_ADMINISTRATOR)

IRs:
TMP_158(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_administrator,ROLE_ADMINISTRATOR)
RETURN TMP_158"];
}
// Function: 1158.sol-Level01Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_224(bool) = msg.sender == owner
TMP_225(None) = SOLIDITY_CALL require(bool)(TMP_224)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Level01Token-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,roleName)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,roleName)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Level01Token-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1158.sol-Level01Token-removeAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isAdministrator(_administrator)

IRs:
TMP_155(bool) = INTERNAL_CALL, PausableToken.isAdministrator(address)(_administrator)
CONDITION TMP_155"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeRole(_administrator,ROLE_ADMINISTRATOR)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_administrator,ROLE_ADMINISTRATOR)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1158.sol-Level01Token-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].remove(addr)

IRs:
REF_120(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_120', 'addr'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(addr,roleName)

IRs:
Emit RoleRemoved(addr,roleName)"];
}
// Function: 1158.sol-Level01Token-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_176 = CONVERT 0 to address
owner(address) := TMP_176(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1158.sol-Level01Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_ADMINISTRATOR = administrator

IRs:
ROLE_ADMINISTRATOR(string) := administrator(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
INITIAL_WHOLE_TOKENS = 12 * 10e7

IRs:
TMP_215(uint256) = 12 * 100000000
INITIAL_WHOLE_TOKENS(uint256) := TMP_215(uint256)"];
}
// Function: 1158.sol-Level01Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1158.sol-Level01Token-totalSupply()
digraph{
}
// Function: 1158.sol-Level01Token-transfer(address,uint256)
digraph{
}
// Function: 1158.sol-Level01Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1158.sol-Level01Token-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1158.sol-Level01Token-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1158.sol-Level01Token-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_221 = UnaryType.BANG paused 
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Level01Token-whenNotPausedOrAuthorized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused || hasRole(msg.sender,ROLE_ADMINISTRATOR))

IRs:
TMP_216 = UnaryType.BANG paused 
TMP_217(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(msg.sender,ROLE_ADMINISTRATOR)
TMP_218(bool) = TMP_216 || TMP_217
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Level01Token-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_223(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1158.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1158.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1158.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1158.sol-Pausable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_70 = CONVERT 0 to address
TMP_71(bool) = _newOwner != TMP_70
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1158.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1158.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_80(bool) = msg.sender == owner
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1158.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_66 = CONVERT 0 to address
owner(address) := TMP_66(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1158.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1158.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1158.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1158.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_82 = UnaryType.BANG paused 
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_84(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-PausableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_102 = CONVERT 0 to address
TMP_103(bool) = _newOwner != TMP_102
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1158.sol-PausableToken-addAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isAdministrator(_administrator)

IRs:
TMP_131(bool) = INTERNAL_CALL, PausableToken.isAdministrator(address)(_administrator)
CONDITION TMP_131"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addRole(_administrator,ROLE_ADMINISTRATOR)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_administrator,ROLE_ADMINISTRATOR)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1158.sol-PausableToken-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].add(addr)

IRs:
REF_68(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_68', 'addr'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(addr,roleName)

IRs:
Emit RoleAdded(addr,roleName)"];
}
// Function: 1158.sol-PausableToken-allowance(address,address)
digraph{
}
// Function: 1158.sol-PausableToken-approve(address,uint256)
digraph{
}
// Function: 1158.sol-PausableToken-balanceOf(address)
digraph{
}
// Function: 1158.sol-PausableToken-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].check(addr)

IRs:
REF_64(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_64', 'addr'] "];
}
// Function: 1158.sol-PausableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1158.sol-PausableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_97(mapping(address => uint256)) -> allowed[msg.sender]
REF_98(uint256) -> REF_97[_spender]
oldValue(uint256) := REF_98(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_120(bool) = _subtractedValue > oldValue
CONDITION TMP_120"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_99(mapping(address => uint256)) -> allowed[msg.sender]
REF_100(uint256) -> REF_99[_spender]
REF_100(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_101(mapping(address => uint256)) -> allowed[msg.sender]
REF_102(uint256) -> REF_101[_spender]
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_102(uint256) (->allowed) := TMP_121(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_104(mapping(address => uint256)) -> allowed[msg.sender]
REF_105(uint256) -> REF_104[_spender]
Emit Approval(msg.sender,_spender,REF_105)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-PausableToken-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[roleName].has(addr)

IRs:
REF_66(Roles.Role) -> roles[roleName]
TMP_86(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_66', 'addr'] 
RETURN TMP_86"];
}
// Function: 1158.sol-PausableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_90(mapping(address => uint256)) -> allowed[msg.sender]
REF_91(uint256) -> REF_90[_spender]
REF_92(mapping(address => uint256)) -> allowed[msg.sender]
REF_93(uint256) -> REF_92[_spender]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_93', '_addedValue'] 
REF_91(uint256) (->allowed) := TMP_118(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_95(mapping(address => uint256)) -> allowed[msg.sender]
REF_96(uint256) -> REF_95[_spender]
Emit Approval(msg.sender,_spender,REF_96)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-PausableToken-isAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_administrator,ROLE_ADMINISTRATOR)

IRs:
TMP_137(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_administrator,ROLE_ADMINISTRATOR)
RETURN TMP_137"];
}
// Function: 1158.sol-PausableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_146(bool) = msg.sender == owner
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-PausableToken-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,roleName)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,roleName)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-PausableToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1158.sol-PausableToken-removeAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isAdministrator(_administrator)

IRs:
TMP_134(bool) = INTERNAL_CALL, PausableToken.isAdministrator(address)(_administrator)
CONDITION TMP_134"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeRole(_administrator,ROLE_ADMINISTRATOR)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_administrator,ROLE_ADMINISTRATOR)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1158.sol-PausableToken-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].remove(addr)

IRs:
REF_70(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_70', 'addr'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(addr,roleName)

IRs:
Emit RoleRemoved(addr,roleName)"];
}
// Function: 1158.sol-PausableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_98 = CONVERT 0 to address
owner(address) := TMP_98(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1158.sol-PausableToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_ADMINISTRATOR = administrator

IRs:
ROLE_ADMINISTRATOR(string) := administrator(string)"];
}
// Function: 1158.sol-PausableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1158.sol-PausableToken-totalSupply()
digraph{
}
// Function: 1158.sol-PausableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_138(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_138"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPausedOrAuthorized()

IRs:
MODIFIER_CALL, PausableToken.whenNotPausedOrAuthorized()()"];
2->1;
}
// Function: 1158.sol-PausableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_140(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_140"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPausedOrAuthorized()

IRs:
MODIFIER_CALL, PausableToken.whenNotPausedOrAuthorized()()"];
2->1;
}
// Function: 1158.sol-PausableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1158.sol-PausableToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1158.sol-PausableToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_143 = UnaryType.BANG paused 
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-PausableToken-whenNotPausedOrAuthorized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused || hasRole(msg.sender,ROLE_ADMINISTRATOR))

IRs:
TMP_148 = UnaryType.BANG paused 
TMP_149(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(msg.sender,ROLE_ADMINISTRATOR)
TMP_150(bool) = TMP_148 || TMP_149
TMP_151(None) = SOLIDITY_CALL require(bool)(TMP_150)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-PausableToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_145(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-RBAC-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].add(addr)

IRs:
REF_10(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_10', 'addr'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(addr,roleName)

IRs:
Emit RoleAdded(addr,roleName)"];
}
// Function: 1158.sol-RBAC-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].check(addr)

IRs:
REF_6(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_6', 'addr'] "];
}
// Function: 1158.sol-RBAC-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[roleName].has(addr)

IRs:
REF_8(Roles.Role) -> roles[roleName]
TMP_14(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_8', 'addr'] 
RETURN TMP_14"];
}
// Function: 1158.sol-RBAC-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,roleName)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,roleName)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1158.sol-RBAC-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[roleName].remove(addr)

IRs:
REF_12(Roles.Role) -> roles[roleName]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_12', 'addr'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(addr,roleName)

IRs:
Emit RoleRemoved(addr,roleName)"];
}
// Function: 1158.sol-Roles-add(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
role.bearer[addr] = true

IRs:
REF_0(mapping(address => bool)) -> role.bearer
REF_1(bool) -> REF_0[addr]
REF_1(bool) (->role) := True(bool)"];
}
// Function: 1158.sol-Roles-check(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(has(role,addr))

IRs:
TMP_11(bool) = INTERNAL_CALL, Roles.has(Roles.Role,address)(role,addr)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
}
// Function: 1158.sol-Roles-has(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
role.bearer[addr]

IRs:
REF_4(mapping(address => bool)) -> role.bearer
REF_5(bool) -> REF_4[addr]
RETURN REF_5"];
}
// Function: 1158.sol-Roles-remove(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
role.bearer[addr] = false

IRs:
REF_2(mapping(address => bool)) -> role.bearer
REF_3(bool) -> REF_2[addr]
REF_3(bool) (->role) := False(bool)"];
}
// Function: 1158.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_29(uint256) = a + b
c(uint256) := TMP_29(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_30(bool) = c >= a
TMP_31(None) = SOLIDITY_CALL assert(bool)(TMP_30)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1158.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_25(uint256) = a / b
RETURN TMP_25"];
}
// Function: 1158.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_20(bool) = a == 0
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_21(uint256) = a * b
c(uint256) := TMP_21(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_22(uint256) = c / a
TMP_23(bool) = TMP_22 == b
TMP_24(None) = SOLIDITY_CALL assert(bool)(TMP_23)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1158.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_26(bool) = b <= a
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_28(uint256) = a - b
RETURN TMP_28"];
}
// Function: 1158.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_46(mapping(address => uint256)) -> allowed[_owner]
REF_47(uint256) -> REF_46[_spender]
RETURN REF_47"];
}
// Function: 1158.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_44(mapping(address => uint256)) -> allowed[msg.sender]
REF_45(uint256) -> REF_44[_spender]
REF_45(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1158.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_55(mapping(address => uint256)) -> allowed[msg.sender]
REF_56(uint256) -> REF_55[_spender]
oldValue(uint256) := REF_56(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_62(bool) = _subtractedValue > oldValue
CONDITION TMP_62"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_57(mapping(address => uint256)) -> allowed[msg.sender]
REF_58(uint256) -> REF_57[_spender]
REF_58(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_59(mapping(address => uint256)) -> allowed[msg.sender]
REF_60(uint256) -> REF_59[_spender]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_60(uint256) (->allowed) := TMP_63(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_62(mapping(address => uint256)) -> allowed[msg.sender]
REF_63(uint256) -> REF_62[_spender]
Emit Approval(msg.sender,_spender,REF_63)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
REF_50(mapping(address => uint256)) -> allowed[msg.sender]
REF_51(uint256) -> REF_50[_spender]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_51', '_addedValue'] 
REF_49(uint256) (->allowed) := TMP_60(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_53(mapping(address => uint256)) -> allowed[msg.sender]
REF_54(uint256) -> REF_53[_spender]
Emit Approval(msg.sender,_spender,REF_54)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1158.sol-StandardToken-totalSupply()
digraph{
}
// Function: 1158.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1158.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _to != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_30(uint256) -> balances[_from]
TMP_51(bool) = _value <= REF_30
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_31(mapping(address => uint256)) -> allowed[_from]
REF_32(uint256) -> REF_31[msg.sender]
TMP_53(bool) = _value <= REF_32
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_33(uint256) -> balances[_from]
REF_34(uint256) -> balances[_from]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_34', '_value'] 
REF_33(uint256) (->balances) := TMP_55(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_36(uint256) -> balances[_to]
REF_37(uint256) -> balances[_to]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_value'] 
REF_36(uint256) (->balances) := TMP_56(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_39(mapping(address => uint256)) -> allowed[_from]
REF_40(uint256) -> REF_39[msg.sender]
REF_41(mapping(address => uint256)) -> allowed[_from]
REF_42(uint256) -> REF_41[msg.sender]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_42', '_value'] 
REF_40(uint256) (->allowed) := TMP_57(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
