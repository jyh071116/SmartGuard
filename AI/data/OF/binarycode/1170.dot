digraph G {
// Function: 1170.sol-CrowdSaleTeleToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
signer = msg.sender

IRs:
signer(address) := msg.sender(address)"];
}
// Function: 1170.sol-CrowdSaleTeleToken-constructor(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
price = _price

IRs:
price(uint256) := _price(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
crowdSaleToken = ERC20Token(_tokenAddress)

IRs:
TMP_50 = CONVERT _tokenAddress to ERC20Token
crowdSaleToken(ERC20Token) := TMP_50(ERC20Token)"];
}
// Function: 1170.sol-CrowdSaleTeleToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount = msg.value / price

IRs:
TMP_51(uint256) = msg.value / price
amount(uint256) := TMP_51(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount != 0)

IRs:
TMP_52(bool) = amount != 0
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
crowdSaleToken.transfer(msg.sender,amount.mul(10 ** 18))

IRs:
TMP_54(uint256) = 10 ** 18
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', 'TMP_54'] 
TMP_56(bool) = HIGH_LEVEL_CALL, dest:crowdSaleToken(ERC20Token), function:transfer, arguments:['msg.sender', 'TMP_55']  "];
}
// Function: 1170.sol-CrowdSaleTeleToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_64(bool) = msg.sender == owner
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1170.sol-CrowdSaleTeleToken-onlySigner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == signer)

IRs:
TMP_66(bool) = msg.sender == signer
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1170.sol-CrowdSaleTeleToken-setPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_price != 0)

IRs:
TMP_61(bool) = _price != 0
TMP_62(None) = SOLIDITY_CALL assert(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
price = _price

IRs:
price(uint256) := _price(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 1170.sol-CrowdSaleTeleToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1170.sol-CrowdSaleTeleToken-transferSignership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
signer = newSigner

IRs:
signer(address) := newSigner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1170.sol-CrowdSaleTeleToken-withdrawalEth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.transfer(_amount)

IRs:
Transfer dest:msg.sender value:_amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1170.sol-CrowdSaleTeleToken-withdrawalToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crowdSaleToken.transfer(msg.sender,_amount)

IRs:
TMP_59(bool) = HIGH_LEVEL_CALL, dest:crowdSaleToken(ERC20Token), function:transfer, arguments:['msg.sender', '_amount']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1170.sol-ERC20Token-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_to != address(0)) && (_to != address(this)) && (_to != _from))

IRs:
TMP_15 = CONVERT 0 to address
TMP_16(bool) = _to != TMP_15
TMP_17 = CONVERT this to address
TMP_18(bool) = _to != TMP_17
TMP_19(bool) = TMP_16 && TMP_18
TMP_20(bool) = _to != _from
TMP_21(bool) = TMP_19 && TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)((_value > 0) && (balances[_from] >= _value))

IRs:
TMP_23(bool) = _value > 0
REF_8(uint256) -> balances[_from]
TMP_24(bool) = REF_8 >= _value
TMP_25(bool) = TMP_23 && TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[_to] + _value > balances[_to])

IRs:
REF_9(uint256) -> balances[_to]
TMP_27(uint256) = REF_9 + _value
REF_10(uint256) -> balances[_to]
TMP_28(bool) = TMP_27 > REF_10
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] -= _value

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] += _value

IRs:
REF_12(uint256) -> balances[_to]
REF_12(-> balances) = REF_12 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1170.sol-ERC20Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_6(mapping(address => uint256)) -> allowed[_owner]
REF_7(uint256) -> REF_6[_spender]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1170.sol-ERC20Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_10(bool) = _value == 0
REF_2(mapping(address => uint256)) -> allowed[msg.sender]
REF_3(uint256) -> REF_2[_spender]
TMP_11(bool) = REF_3 == 0
TMP_12(bool) = TMP_10 || TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_4(mapping(address => uint256)) -> allowed[msg.sender]
REF_5(uint256) -> REF_4[_spender]
REF_5(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1170.sol-ERC20Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1170.sol-ERC20Token-constructor(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = _supply * 10 ** uint256(decimals)

IRs:
TMP_6 = CONVERT decimals to uint256
TMP_7(uint256) = 10 ** TMP_6
TMP_8(uint256) = _supply * TMP_7
totalSupply(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(0x0,msg.sender,totalSupply)

IRs:
Emit Transfer(0,msg.sender,totalSupply)"];
}
// Function: 1170.sol-ERC20Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 1170.sol-ERC20Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 1170.sol-ERC20Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
TMP_31(bool) = INTERNAL_CALL, ERC20Token._transfer(address,address,uint256)(msg.sender,_to,_value)
RETURN TMP_31"];
2[label="Node Type: RETURN 2

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1170.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_32(bool) = _value <= REF_14
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[_from]
REF_16(uint256) -> REF_15[msg.sender]
REF_16(-> allowed) = REF_16 - _value"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
TMP_34(bool) = INTERNAL_CALL, ERC20Token._transfer(address,address,uint256)(_from,_to,_value)
RETURN TMP_34"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1170.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
signer = msg.sender

IRs:
signer(address) := msg.sender(address)"];
}
// Function: 1170.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_2(bool) = msg.sender == owner
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1170.sol-Owned-onlySigner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == signer)

IRs:
TMP_4(bool) = msg.sender == signer
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1170.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1170.sol-Owned-transferSignership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
signer = newSigner

IRs:
signer(address) := newSigner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1170.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_45(uint256) = a + b
c(uint256) := TMP_45(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_46(bool) = c >= a
TMP_47(None) = SOLIDITY_CALL assert(bool)(TMP_46)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1170.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_41(uint256) = a / b
c(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1170.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_35(uint256) = a * b
c(uint256) := TMP_35(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_36(bool) = a == 0
TMP_37(uint256) = c / a
TMP_38(bool) = TMP_37 == b
TMP_39(bool) = TMP_36 || TMP_38
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1170.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_42(bool) = b <= a
TMP_43(None) = SOLIDITY_CALL assert(bool)(TMP_42)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_44(uint256) = a - b
RETURN TMP_44"];
}
}
