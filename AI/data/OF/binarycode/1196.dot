digraph G {
// Function: 1196.sol-RegularToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
}
// Function: 1196.sol-RegularToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1196.sol-RegularToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_14(uint256) -> balances[_owner]
RETURN REF_14"];
}
// Function: 1196.sol-RegularToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 1196.sol-RegularToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
REF_1(uint256) -> balances[_to]
TMP_1(uint256) = REF_1 + _value
REF_2(uint256) -> balances[_to]
TMP_2(bool) = TMP_1 >= REF_2
TMP_3(bool) = TMP_0 && TMP_2
CONDITION TMP_3"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1196.sol-RegularToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]

IRs:
REF_5(uint256) -> balances[_from]
TMP_5(bool) = REF_5 >= _value
REF_6(mapping(address => uint256)) -> allowed[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_6(bool) = REF_7 >= _value
TMP_7(bool) = TMP_5 && TMP_6
REF_8(uint256) -> balances[_to]
TMP_8(uint256) = REF_8 + _value
REF_9(uint256) -> balances[_to]
TMP_9(bool) = TMP_8 >= REF_9
TMP_10(bool) = TMP_7 && TMP_9
CONDITION TMP_10"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_10(uint256) -> balances[_to]
REF_10(-> balances) = REF_10 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
REF_13(-> allowed) = REF_13 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1196.sol-SECToken-SECToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_75(uint256) -> balances[msg.sender]
REF_75(uint256) (->balances) := totalSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(address(0),msg.sender,totalSupply)

IRs:
TMP_57 = CONVERT 0 to address
Emit Transfer(TMP_57,msg.sender,totalSupply)"];
}
// Function: 1196.sol-SECToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1196.sol-SECToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-SECToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1196.sol-SECToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT = 2 ** 256 - 1

IRs:
TMP_61(uint256) = 2 ** 256
TMP_62(uint256) = TMP_61 - 1
MAX_UINT(uint256) := TMP_62(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = SECToken

IRs:
name(string) := SECToken(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = SEC

IRs:
symbol(string) := SEC(string)"];
}
// Function: 1196.sol-SECToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 10 * 10 ** 26

IRs:
TMP_59(uint256) = 10 ** 26
TMP_60(uint256) = 10 * TMP_59
totalSupply(uint256) := TMP_60(uint256)"];
}
// Function: 1196.sol-SECToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 1196.sol-SECToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-SECToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1196.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1196.sol-Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 1196.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-UnboundedRegularToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1196.sol-UnboundedRegularToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-UnboundedRegularToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1196.sol-UnboundedRegularToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT = 2 ** 256 - 1

IRs:
TMP_34(uint256) = 2 ** 256
TMP_35(uint256) = TMP_34 - 1
MAX_UINT(uint256) := TMP_35(uint256)"];
}
// Function: 1196.sol-UnboundedRegularToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 1196.sol-UnboundedRegularToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1196.sol-UnboundedRegularToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_38(mapping(address => uint256)) -> allowed[_from]
REF_39(uint256) -> REF_38[msg.sender]
allowance(uint256) := REF_39(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
balances[_from] >= _value && allowance >= _value && balances[_to] + _value >= balances[_to]

IRs:
REF_40(uint256) -> balances[_from]
TMP_26(bool) = REF_40 >= _value
TMP_27(bool) = allowance >= _value
TMP_28(bool) = TMP_26 && TMP_27
REF_41(uint256) -> balances[_to]
TMP_29(uint256) = REF_41 + _value
REF_42(uint256) -> balances[_to]
TMP_30(bool) = TMP_29 >= REF_42
TMP_31(bool) = TMP_28 && TMP_30
CONDITION TMP_31"];
2->3[label="True"];
2->10[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_43(uint256) -> balances[_to]
REF_43(-> balances) = REF_43 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] -= _value

IRs:
REF_44(uint256) -> balances[_from]
REF_44(-> balances) = REF_44 - _value"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
allowance < MAX_UINT

IRs:
TMP_32(bool) = allowance < MAX_UINT
CONDITION TMP_32"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_45(mapping(address => uint256)) -> allowed[_from]
REF_46(uint256) -> REF_45[msg.sender]
REF_46(-> allowed) = REF_46 - _value"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
}
}
