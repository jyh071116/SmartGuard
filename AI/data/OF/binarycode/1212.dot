digraph G {
// Function: 1212.sol-EIP20-EIP20()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = TECHTRADECOIN

IRs:
name(string) := TECHTRADECOIN(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = TEC

IRs:
symbol(string) := TEC(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = 63000000 * 10 ** uint256(decimals)

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0 = CONVERT decimals to uint256
TMP_1(uint256) = 10 ** TMP_0
TMP_2(uint256) = 63000000 * TMP_1
REF_0(uint256) (->balances) := TMP_2(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = 63000000 * 10 ** uint256(decimals)

IRs:
TMP_3 = CONVERT decimals to uint256
TMP_4(uint256) = 10 ** TMP_3
TMP_5(uint256) = 63000000 * TMP_4
totalSupply(uint256) := TMP_5(uint256)"];
}
// Function: 1212.sol-EIP20-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[_owner]
REF_15(uint256) -> REF_14[_spender]
RETURN REF_15"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1212.sol-EIP20-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[msg.sender]
REF_13(uint256) -> REF_12[_spender]
REF_13(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1212.sol-EIP20-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_11(uint256) -> balances[_owner]
RETURN REF_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1212.sol-EIP20-pending(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pender_balances = balances[_pender]

IRs:
REF_16(uint256) -> balances[_pender]
pender_balances(uint256) := REF_16(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
owner != msg.sender

IRs:
TMP_16(bool) = owner != msg.sender
CONDITION TMP_16"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: IF 4

EXPRESSION:
pender_balances > 0

IRs:
TMP_17(bool) = pender_balances > 0
CONDITION TMP_17"];
4->5[label="True"];
4->10[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_pender] = 0

IRs:
REF_17(uint256) -> balances[_pender]
REF_17(uint256) (->balances) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hold_balances[_pender] = hold_balances[_pender] + pender_balances

IRs:
REF_18(uint256) -> hold_balances[_pender]
REF_19(uint256) -> hold_balances[_pender]
TMP_18(uint256) = REF_19 + pender_balances
REF_18(uint256) (->hold_balances) := TMP_18(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Pending(_pender,pender_balances,true)

IRs:
Emit Pending(_pender,pender_balances,True)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
pender_balances = 0

IRs:
pender_balances(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: IF 10

EXPRESSION:
pender_balances <= 0

IRs:
TMP_20(bool) = pender_balances <= 0
CONDITION TMP_20"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
false

IRs:
RETURN False"];
16[label="Node Type: RETURN 16

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1212.sol-EIP20-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_6(bool) = owner == msg.sender
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1212.sol-EIP20-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_7(bool) = REF_1 >= _value
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(-> balances) = REF_2 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_3(uint256) -> balances[_to]
REF_3(-> balances) = REF_3 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1212.sol-EIP20-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
allowance(uint256) := REF_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value && allowance >= _value)

IRs:
REF_6(uint256) -> balances[_from]
TMP_10(bool) = REF_6 >= _value
TMP_11(bool) = allowance >= _value
TMP_12(bool) = TMP_10 && TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_7(uint256) -> balances[_to]
REF_7(-> balances) = REF_7 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] -= _value

IRs:
REF_8(uint256) -> balances[_from]
REF_8(-> balances) = REF_8 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_9(mapping(address => uint256)) -> allowed[_from]
REF_10(uint256) -> REF_9[msg.sender]
REF_10(-> allowed) = REF_10 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1212.sol-EIP20-undoPending(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pender_balances = hold_balances[_pender]

IRs:
REF_20(uint256) -> hold_balances[_pender]
pender_balances(uint256) := REF_20(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
owner != msg.sender

IRs:
TMP_21(bool) = owner != msg.sender
CONDITION TMP_21"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: IF 4

EXPRESSION:
pender_balances > 0

IRs:
TMP_22(bool) = pender_balances > 0
CONDITION TMP_22"];
4->5[label="True"];
4->10[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
hold_balances[_pender] = 0

IRs:
REF_21(uint256) -> hold_balances[_pender]
REF_21(uint256) (->hold_balances) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_pender] = balances[_pender] + pender_balances

IRs:
REF_22(uint256) -> balances[_pender]
REF_23(uint256) -> balances[_pender]
TMP_23(uint256) = REF_23 + pender_balances
REF_22(uint256) (->balances) := TMP_23(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Pending(_pender,pender_balances,false)

IRs:
Emit Pending(_pender,pender_balances,False)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
pender_balances = 0

IRs:
pender_balances(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: IF 10

EXPRESSION:
pender_balances <= 0

IRs:
TMP_25(bool) = pender_balances <= 0
CONDITION TMP_25"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
false

IRs:
RETURN False"];
16[label="Node Type: RETURN 16

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1212.sol-EIP20Interface-allowance(address,address)
digraph{
}
// Function: 1212.sol-EIP20Interface-approve(address,uint256)
digraph{
}
// Function: 1212.sol-EIP20Interface-balanceOf(address)
digraph{
}
// Function: 1212.sol-EIP20Interface-pending(address)
digraph{
}
// Function: 1212.sol-EIP20Interface-transfer(address,uint256)
digraph{
}
// Function: 1212.sol-EIP20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 1212.sol-EIP20Interface-undoPending(address)
digraph{
}
}
