digraph G {
// Function: 1231.sol-ColorCoin-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_26(mapping(address => uint256)) -> allowed[_owner]
REF_27(uint256) -> REF_26[_spender]
RETURN REF_27"];
}
// Function: 1231.sol-ColorCoin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_24(mapping(address => uint256)) -> allowed[msg.sender]
REF_25(uint256) -> REF_24[_spender]
REF_25(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transferable()

IRs:
MODIFIER_CALL, ColorCoin.transferable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notLocked()

IRs:
MODIFIER_CALL, ColorCoin.notLocked()()"];
5->1;
}
// Function: 1231.sol-ColorCoin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
}
// Function: 1231.sol-ColorCoin-claimToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenContract != address(0))

IRs:
TMP_49 = CONVERT 0 to address
TMP_50(bool) = tokenContract != TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = _to != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_55(bool) = _value > 0
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
token = ERC20(tokenContract)

IRs:
TMP_57 = CONVERT tokenContract to ERC20
token(ERC20) := TMP_57(ERC20)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
token.transfer(_to,_value)

IRs:
TMP_58(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_to', '_value']  
RETURN TMP_58"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ColorCoin.onlyAdmin()()"];
6->1;
}
// Function: 1231.sol-ColorCoin-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = Color Coin

IRs:
name(string) := Color Coin(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = COL

IRs:
symbol(string) := COL(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = 350000000000000000000000000

IRs:
totalSupply(uint256) := 350000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
admin = _admin

IRs:
admin(address) := _admin(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
founder = _founder

IRs:
founder(address) := _founder(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[founder] = totalSupply

IRs:
REF_0(uint256) -> balances[founder]
REF_0(uint256) (->balances) := totalSupply(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(0x0,founder,totalSupply)

IRs:
Emit Transfer(0,founder,totalSupply)"];
}
// Function: 1231.sol-ColorCoin-disableTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isTransferable = false

IRs:
isTransferable(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ColorCoin.onlyAdmin()()"];
2->1;
}
// Function: 1231.sol-ColorCoin-distribute(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_40 = CONVERT 0 to address
TMP_41(bool) = _to != TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_28(uint256) -> balances[msg.sender]
TMP_43(bool) = _value <= REF_28
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_29(uint256) -> balances[msg.sender]
REF_30(uint256) -> balances[msg.sender]
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', '_value'] 
REF_29(uint256) (->balances) := TMP_45(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_32(uint256) -> balances[_to]
REF_33(uint256) -> balances[_to]
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_46(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyFounder()

IRs:
MODIFIER_CALL, ColorCoin.onlyFounder()()"];
7->1;
}
// Function: 1231.sol-ColorCoin-enableTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isTransferable = true

IRs:
isTransferable(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ColorCoin.onlyAdmin()()"];
2->1;
}
// Function: 1231.sol-ColorCoin-isLocked(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lockedAddresses[who]

IRs:
REF_38(bool) -> lockedAddresses[who]
RETURN REF_38"];
}
// Function: 1231.sol-ColorCoin-lock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockedAddresses[who] = true

IRs:
REF_36(bool) -> lockedAddresses[who]
REF_36(bool) (->lockedAddresses) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ColorCoin.onlyAdmin()()"];
2->1;
}
// Function: 1231.sol-ColorCoin-notLocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! lockedAddresses[msg.sender])

IRs:
REF_39(bool) -> lockedAddresses[msg.sender]
TMP_69 = UnaryType.BANG REF_39 
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1231.sol-ColorCoin-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(admin == msg.sender)

IRs:
TMP_64(bool) = admin == msg.sender
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1231.sol-ColorCoin-onlyFounder()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(founder == msg.sender)

IRs:
TMP_66(bool) = founder == msg.sender
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1231.sol-ColorCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isTransferable = false

IRs:
isTransferable(bool) := False(bool)"];
}
// Function: 1231.sol-ColorCoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = _to != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_16(bool) = _value <= REF_2
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_4(uint256) -> balances[msg.sender]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_4', '_value'] 
REF_3(uint256) (->balances) := TMP_18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_6(uint256) -> balances[_to]
REF_7(uint256) -> balances[_to]
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_7', '_value'] 
REF_6(uint256) (->balances) := TMP_19(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transferable()

IRs:
MODIFIER_CALL, ColorCoin.transferable()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
notLocked()

IRs:
MODIFIER_CALL, ColorCoin.notLocked()()"];
8->1;
}
// Function: 1231.sol-ColorCoin-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! lockedAddresses[_from])

IRs:
REF_9(bool) -> lockedAddresses[_from]
TMP_23 = UnaryType.BANG REF_9 
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = _to != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_10(uint256) -> balances[_from]
TMP_28(bool) = _value <= REF_10
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_11(mapping(address => uint256)) -> allowed[_from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_30(bool) = _value <= REF_12
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_13(uint256) -> balances[_from]
REF_14(uint256) -> balances[_from]
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_14', '_value'] 
REF_13(uint256) (->balances) := TMP_32(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_16(uint256) -> balances[_to]
REF_17(uint256) -> balances[_to]
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_17', '_value'] 
REF_16(uint256) (->balances) := TMP_33(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_19(mapping(address => uint256)) -> allowed[_from]
REF_20(uint256) -> REF_19[msg.sender]
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_22', '_value'] 
REF_20(uint256) (->allowed) := TMP_34(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
transferable()

IRs:
MODIFIER_CALL, ColorCoin.transferable()()"];
10->1;
}
// Function: 1231.sol-ColorCoin-transferable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isTransferable)

IRs:
TMP_68(None) = SOLIDITY_CALL require(bool)(isTransferable)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1231.sol-ColorCoin-unlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockedAddresses[who] = false

IRs:
REF_37(bool) -> lockedAddresses[who]
REF_37(bool) (->lockedAddresses) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ColorCoin.onlyAdmin()()"];
2->1;
}
// Function: 1231.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1231.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1231.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1231.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1231.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1231.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1231.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1231.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1231.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
