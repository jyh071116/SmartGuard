digraph G {
// Function: 1247.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1247.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1247.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_15(bool) = _value <= REF_0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1247.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1247.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1247.sol-ERC20-totalSupply()
digraph{
}
// Function: 1247.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1247.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1247.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1247.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1247.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1247.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1247.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1247.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1247.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1247.sol-StandardToken-StandardToken(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = initialSupply

IRs:
REF_16(uint256) -> balances[msg.sender]
REF_16(uint256) (->balances) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = tokenName

IRs:
name(string) := tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = tokenSymbol

IRs:
symbol(string) := tokenSymbol(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = decimalUnits

IRs:
decimals(uint8) := decimalUnits(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1247.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_42(mapping(address => uint256)) -> allowed[_owner]
REF_43(uint256) -> REF_42[_spender]
RETURN REF_43"];
}
// Function: 1247.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-StandardToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_63 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_63(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_64(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(_spender,_value)
CONDITION TMP_64"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1247.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1247.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_66(mapping(address => uint256)) -> allowed[msg.sender]
REF_67(uint256) -> REF_66[_spender]
oldValue(uint256) := REF_67(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_53(bool) = _subtractedValue > oldValue
CONDITION TMP_53"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_69(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_71(uint256) (->allowed) := TMP_54(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_44(mapping(address => uint256)) -> allowed[msg.sender]
REF_45(uint256) -> REF_44[_spender]
REF_46(mapping(address => uint256)) -> allowed[msg.sender]
REF_47(uint256) -> REF_46[_spender]
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_47', '_addedValue'] 
REF_45(uint256) (->allowed) := TMP_45(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_49(mapping(address => uint256)) -> allowed[msg.sender]
REF_50(uint256) -> REF_49[_spender]
Emit Approval(msg.sender,_spender,REF_50)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-StandardToken-multiApprove(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender.length == _value.length)

IRs:
REF_33 -> LENGTH _spender
REF_34 -> LENGTH _value
TMP_40(bool) = REF_33 == REF_34
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->9;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= _spender.length

IRs:
REF_35 -> LENGTH _spender
TMP_42(bool) = i <= REF_35
CONDITION TMP_42"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[msg.sender][_spender[i]] = _value[i]

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(address) -> _spender[i]
REF_38(uint256) -> REF_36[REF_37]
REF_39(uint256) -> _value[i]
REF_38(uint256) (->allowed) := REF_39(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(msg.sender,_spender[i],_value[i])

IRs:
REF_40(address) -> _spender[i]
REF_41(uint256) -> _value[i]
Emit Approval(msg.sender,REF_40,REF_41)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_44(uint256) := i(uint256)
i(uint256) = i + 1"];
8->5;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-StandardToken-multiDecreaseApproval(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender.length == _subtractedValue.length)

IRs:
REF_75 -> LENGTH _spender
REF_76 -> LENGTH _subtractedValue
TMP_56(bool) = REF_75 == REF_76
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->13;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= _spender.length

IRs:
REF_77 -> LENGTH _spender
TMP_58(bool) = i <= REF_77
CONDITION TMP_58"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
oldValue = allowed[msg.sender][_spender[i]]

IRs:
REF_78(mapping(address => uint256)) -> allowed[msg.sender]
REF_79(address) -> _spender[i]
REF_80(uint256) -> REF_78[REF_79]
oldValue(uint256) := REF_80(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_subtractedValue[i] > oldValue

IRs:
REF_81(uint256) -> _subtractedValue[i]
TMP_59(bool) = REF_81 > oldValue
CONDITION TMP_59"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[msg.sender][_spender[i]] = 0

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(address) -> _spender[i]
REF_84(uint256) -> REF_82[REF_83]
REF_84(uint256) (->allowed) := 0(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allowed[msg.sender][_spender[i]] = oldValue.sub(_subtractedValue[i])

IRs:
REF_85(mapping(address => uint256)) -> allowed[msg.sender]
REF_86(address) -> _spender[i]
REF_87(uint256) -> REF_85[REF_86]
REF_89(uint256) -> _subtractedValue[i]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', 'REF_89'] 
REF_87(uint256) (->allowed) := TMP_60(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Approval(msg.sender,_spender[i],allowed[msg.sender][_spender[i]])

IRs:
REF_90(address) -> _spender[i]
REF_91(mapping(address => uint256)) -> allowed[msg.sender]
REF_92(address) -> _spender[i]
REF_93(uint256) -> REF_91[REF_92]
Emit Approval(msg.sender,REF_90,REF_93)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_62(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
13[label="Node Type: RETURN 13

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-StandardToken-multiIncreaseApproval(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender.length == _addedValue.length)

IRs:
REF_51 -> LENGTH _spender
REF_52 -> LENGTH _addedValue
TMP_47(bool) = REF_51 == REF_52
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->9;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= _spender.length

IRs:
REF_53 -> LENGTH _spender
TMP_49(bool) = i <= REF_53
CONDITION TMP_49"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[msg.sender][_spender[i]] = allowed[msg.sender][_spender[i]].add(_addedValue[i])

IRs:
REF_54(mapping(address => uint256)) -> allowed[msg.sender]
REF_55(address) -> _spender[i]
REF_56(uint256) -> REF_54[REF_55]
REF_57(mapping(address => uint256)) -> allowed[msg.sender]
REF_58(address) -> _spender[i]
REF_59(uint256) -> REF_57[REF_58]
REF_61(uint256) -> _addedValue[i]
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_59', 'REF_61'] 
REF_56(uint256) (->allowed) := TMP_50(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(msg.sender,_spender[i],allowed[msg.sender][_spender[i]])

IRs:
REF_62(address) -> _spender[i]
REF_63(mapping(address => uint256)) -> allowed[msg.sender]
REF_64(address) -> _spender[i]
REF_65(uint256) -> REF_63[REF_64]
Emit Approval(msg.sender,REF_62,REF_65)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_52(uint256) := i(uint256)
i(uint256) = i + 1"];
8->5;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-StandardToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_66(bool) = msg.sender != owner
CONDITION TMP_66"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1247.sol-StandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
standard = ERC20

IRs:
standard(string) := ERC20(string)"];
}
// Function: 1247.sol-StandardToken-totalSupply()
digraph{
}
// Function: 1247.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1247.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _to != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_17(uint256) -> balances[_from]
TMP_31(bool) = _value <= REF_17
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_18(mapping(address => uint256)) -> allowed[_from]
REF_19(uint256) -> REF_18[msg.sender]
TMP_33(bool) = _value <= REF_19
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_20(uint256) -> balances[_from]
REF_21(uint256) -> balances[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balances) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_23(uint256) -> balances[_to]
REF_24(uint256) -> balances[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_24', '_value'] 
REF_23(uint256) (->balances) := TMP_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_26(mapping(address => uint256)) -> allowed[_from]
REF_27(uint256) -> REF_26[msg.sender]
REF_28(mapping(address => uint256)) -> allowed[_from]
REF_29(uint256) -> REF_28[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_29', '_value'] 
REF_27(uint256) (->allowed) := TMP_37(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1247.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
