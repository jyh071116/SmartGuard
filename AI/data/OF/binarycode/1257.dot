digraph G {
// Function: 1257.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_31(bool) = size > 0
RETURN TMP_31"];
}
// Function: 1257.sol-DecentralandInvite-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_340 = CONVERT 0 to address
Emit Transfer(_owner,TMP_340,_tokenId)"];
}
// Function: 1257.sol-DecentralandInvite-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_332 = CONVERT 0 to address
TMP_333(bool) = _to != TMP_332
TMP_334(None) = SOLIDITY_CALL require(bool)(TMP_333)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_336 = CONVERT 0 to address
Emit Transfer(TMP_336,_to,_tokenId)"];
}
// Function: 1257.sol-DecentralandInvite-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_265(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_266(None) = SOLIDITY_CALL require(bool)(TMP_265)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_93(string) -> tokenURIs[_tokenId]
REF_93(string) (->tokenURIs) := _uri(string)"];
}
// Function: 1257.sol-DecentralandInvite-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_253 = CONVERT 0 to address
TMP_254(bool) = _newOwner != TMP_253
TMP_255(None) = SOLIDITY_CALL require(bool)(TMP_254)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1257.sol-DecentralandInvite-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_143(address) -> tokenOwner[_tokenId]
TMP_350 = CONVERT 0 to address
TMP_351(bool) = REF_143 == TMP_350
TMP_352(None) = SOLIDITY_CALL require(bool)(TMP_351)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_144(address) -> tokenOwner[_tokenId]
REF_144(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_145(uint256) -> ownedTokensCount[_to]
REF_146(uint256) -> ownedTokensCount[_to]
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', '1'] 
REF_145(uint256) (->ownedTokensCount) := TMP_353(uint256)"];
}
// Function: 1257.sol-DecentralandInvite-allow(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balance[target] = amount

IRs:
REF_154(uint256) -> balance[target]
REF_154(uint256) (->balance) := amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
UpdateInvites(target,amount)

IRs:
Emit UpdateInvites(target,amount)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1257.sol-DecentralandInvite-approve(address,uint256)
digraph{
}
// Function: 1257.sol-DecentralandInvite-balanceOf(address)
digraph{
}
// Function: 1257.sol-DecentralandInvite-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_402(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-DecentralandInvite-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_359(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_360 = UnaryType.BANG TMP_359 
CONDITION TMP_360"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_361 = CONVERT _to to ERC721Receiver
TMP_362(bytes4) = HIGH_LEVEL_CALL, dest:TMP_361(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_362(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_363(bool) = retval == ERC721_RECEIVED
RETURN TMP_363"];
}
// Function: 1257.sol-DecentralandInvite-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_342(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_343(bool) = TMP_342 == _owner
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_141(address) -> tokenApprovals[_tokenId]
TMP_345 = CONVERT 0 to address
TMP_346(bool) = REF_141 != TMP_345
CONDITION TMP_346"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_142(address) -> tokenApprovals[_tokenId]
TMP_347 = CONVERT 0 to address
REF_142(address) (->tokenApprovals) := TMP_347(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_348 = CONVERT 0 to address
Emit Approval(_owner,TMP_348,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1257.sol-DecentralandInvite-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ERC721Token(Decentraland Invite,DCLI)

IRs:
INTERNAL_CALL, ERC721Token.constructor(string,string)(Decentraland Invite,DCLI)"];
}
// Function: 1257.sol-DecentralandInvite-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
}
// Function: 1257.sol-DecentralandInvite-exists(uint256)
digraph{
}
// Function: 1257.sol-DecentralandInvite-getApproved(uint256)
digraph{
}
// Function: 1257.sol-DecentralandInvite-invite(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balance[msg.sender] > 0)

IRs:
REF_155(uint256) -> balance[msg.sender]
TMP_367(bool) = REF_155 > 0
TMP_368(None) = SOLIDITY_CALL require(bool)(TMP_367)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balance[msg.sender] -= 1

IRs:
REF_156(uint256) -> balance[msg.sender]
REF_156(-> balance) = REF_156 - 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
id = totalSupply()

IRs:
TMP_369(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
id(uint256) := TMP_369(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(target,id)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(target,id)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
metadata[id] = note

IRs:
REF_157(bytes) -> metadata[id]
REF_157(bytes) (->metadata) := note(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Invited(msg.sender,target,id,note)

IRs:
Emit Invited(msg.sender,target,id,note)"];
}
// Function: 1257.sol-DecentralandInvite-isApprovedForAll(address,address)
digraph{
}
// Function: 1257.sol-DecentralandInvite-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_325(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_325(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_326(bool) = _spender == owner
TMP_327(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_328(bool) = TMP_327 == _spender
TMP_329(bool) = TMP_326 || TMP_328
TMP_330(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_331(bool) = TMP_329 || TMP_330
RETURN TMP_331"];
}
// Function: 1257.sol-DecentralandInvite-name()
digraph{
}
// Function: 1257.sol-DecentralandInvite-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_397(bool) = msg.sender == owner
TMP_398(None) = SOLIDITY_CALL require(bool)(TMP_397)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-DecentralandInvite-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_399(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_400(bool) = TMP_399 == msg.sender
TMP_401(None) = SOLIDITY_CALL require(bool)(TMP_400)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-DecentralandInvite-ownerOf(uint256)
digraph{
}
// Function: 1257.sol-DecentralandInvite-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1257.sol-DecentralandInvite-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_354(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_355(bool) = TMP_354 == _from
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_148(uint256) -> ownedTokensCount[_from]
REF_149(uint256) -> ownedTokensCount[_from]
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_149', '1'] 
REF_148(uint256) (->ownedTokensCount) := TMP_357(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_151(address) -> tokenOwner[_tokenId]
TMP_358 = CONVERT 0 to address
REF_151(address) (->tokenOwner) := TMP_358(address)"];
}
// Function: 1257.sol-DecentralandInvite-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_249 = CONVERT 0 to address
owner(address) := TMP_249(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1257.sol-DecentralandInvite-revoke(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownedTokensCount[target] > 0)

IRs:
REF_158(uint256) -> ownedTokensCount[target]
TMP_372(bool) = REF_158 > 0
TMP_373(None) = SOLIDITY_CALL require(bool)(TMP_372)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
addressTokensCount = ownedTokensCount[target]

IRs:
REF_159(uint256) -> ownedTokensCount[target]
addressTokensCount(uint256) := REF_159(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burnTokenIds = new uint256[](addressTokensCount)

IRs:
TMP_375(uint256[])  = new uint256[](addressTokensCount)
burnTokenIds(uint256[]) = ['TMP_375(uint256[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->12;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < addressTokensCount

IRs:
TMP_376(bool) = i < addressTokensCount
CONDITION TMP_376"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
burnTokenIds[i] = tokenOfOwnerByIndex(target,i)

IRs:
REF_160(uint256) -> burnTokenIds[i]
TMP_377(uint256) = INTERNAL_CALL, ERC721Token.tokenOfOwnerByIndex(address,uint256)(target,i)
REF_160(uint256) (->burnTokenIds) := TMP_377(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_378(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < addressTokensCount

IRs:
TMP_379(bool) = i < addressTokensCount
CONDITION TMP_379"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_burn(target,burnTokenIds[i])

IRs:
REF_161(uint256) -> burnTokenIds[i]
INTERNAL_CALL, ERC721Token._burn(address,uint256)(target,REF_161)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_381(uint256) := i(uint256)
i(uint256) = i + 1"];
15->13;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
16->1;
}
// Function: 1257.sol-DecentralandInvite-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.safeTransferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256)(_from,_to,_tokenId)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1257.sol-DecentralandInvite-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.safeTransferFrom(_from,_to,_tokenId,_data)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,_data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1257.sol-DecentralandInvite-setApprovalForAll(address,bool)
digraph{
}
// Function: 1257.sol-DecentralandInvite-setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerOf(id))

IRs:
TMP_383(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(id)
TMP_384(bool) = msg.sender == TMP_383
TMP_385(None) = SOLIDITY_CALL require(bool)(TMP_384)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setTokenURI(id,uri)

IRs:
INTERNAL_CALL, ERC721Token._setTokenURI(uint256,string)(id,uri)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
URIUpdated(id,uri)

IRs:
Emit URIUpdated(id,uri)"];
}
// Function: 1257.sol-DecentralandInvite-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 1257.sol-DecentralandInvite-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1257.sol-DecentralandInvite-symbol()
digraph{
}
// Function: 1257.sol-DecentralandInvite-tokenByIndex(uint256)
digraph{
}
// Function: 1257.sol-DecentralandInvite-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 1257.sol-DecentralandInvite-tokenURI(uint256)
digraph{
}
// Function: 1257.sol-DecentralandInvite-totalSupply()
digraph{
}
// Function: 1257.sol-DecentralandInvite-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1257.sol-DecentralandInvite-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1257.sol-DecentralandInvite-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1257.sol-DecentralandInvite-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_394 = UnaryType.BANG paused 
TMP_395(None) = SOLIDITY_CALL require(bool)(TMP_394)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-DecentralandInvite-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_396(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 1257.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 1257.sol-ERC721-exists(uint256)
digraph{
}
// Function: 1257.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 1257.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 1257.sol-ERC721-name()
digraph{
}
// Function: 1257.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 1257.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1257.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 1257.sol-ERC721-symbol()
digraph{
}
// Function: 1257.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 1257.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 1257.sol-ERC721-tokenURI(uint256)
digraph{
}
// Function: 1257.sol-ERC721-totalSupply()
digraph{
}
// Function: 1257.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 1257.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 1257.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 1257.sol-ERC721Basic-isApprovedForAll(address,address)
digraph{
}
// Function: 1257.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 1257.sol-ERC721Basic-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Basic-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1257.sol-ERC721Basic-setApprovalForAll(address,bool)
digraph{
}
// Function: 1257.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721BasicToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_101 = CONVERT 0 to address
Emit Transfer(_owner,TMP_101,_tokenId)"];
}
// Function: 1257.sol-ERC721BasicToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_93 = CONVERT 0 to address
TMP_94(bool) = _to != TMP_93
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_97 = CONVERT 0 to address
Emit Transfer(TMP_97,_to,_tokenId)"];
}
// Function: 1257.sol-ERC721BasicToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_11(address) -> tokenOwner[_tokenId]
TMP_111 = CONVERT 0 to address
TMP_112(bool) = REF_11 == TMP_111
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_12(address) -> tokenOwner[_tokenId]
REF_12(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_13(uint256) -> ownedTokensCount[_to]
REF_14(uint256) -> ownedTokensCount[_to]
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', '1'] 
REF_13(uint256) (->ownedTokensCount) := TMP_114(uint256)"];
}
// Function: 1257.sol-ERC721BasicToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_52(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_52(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_53(bool) = _to != owner
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_55(bool) = msg.sender == owner
TMP_56(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_57(bool) = TMP_55 || TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
getApproved(_tokenId) != address(0) || _to != address(0)

IRs:
TMP_59(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_60 = CONVERT 0 to address
TMP_61(bool) = TMP_59 != TMP_60
TMP_62 = CONVERT 0 to address
TMP_63(bool) = _to != TMP_62
TMP_64(bool) = TMP_61 || TMP_63
CONDITION TMP_64"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_3(address) -> tokenApprovals[_tokenId]
REF_3(address) (->tokenApprovals) := _to(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 1257.sol-ERC721BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(bool) = _owner != TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_0(uint256) -> ownedTokensCount[_owner]
RETURN REF_0"];
}
// Function: 1257.sol-ERC721BasicToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_128(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-ERC721BasicToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_120(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_121 = UnaryType.BANG TMP_120 
CONDITION TMP_121"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_122 = CONVERT _to to ERC721Receiver
TMP_123(bytes4) = HIGH_LEVEL_CALL, dest:TMP_122(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_123(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_124(bool) = retval == ERC721_RECEIVED
RETURN TMP_124"];
}
// Function: 1257.sol-ERC721BasicToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_103(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_104(bool) = TMP_103 == _owner
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_9(address) -> tokenApprovals[_tokenId]
TMP_106 = CONVERT 0 to address
TMP_107(bool) = REF_9 != TMP_106
CONDITION TMP_107"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_10(address) -> tokenApprovals[_tokenId]
TMP_108 = CONVERT 0 to address
REF_10(address) (->tokenApprovals) := TMP_108(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_109 = CONVERT 0 to address
Emit Approval(_owner,TMP_109,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1257.sol-ERC721BasicToken-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_2(address) -> tokenOwner[_tokenId]
owner(address) := REF_2(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_50 = CONVERT 0 to address
TMP_51(bool) = owner != TMP_50
RETURN TMP_51"];
}
// Function: 1257.sol-ERC721BasicToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_4(address) -> tokenApprovals[_tokenId]
RETURN REF_4"];
}
// Function: 1257.sol-ERC721BasicToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_7(mapping(address => bool)) -> operatorApprovals[_owner]
REF_8(bool) -> REF_7[_operator]
RETURN REF_8"];
}
// Function: 1257.sol-ERC721BasicToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_86(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_86(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_87(bool) = _spender == owner
TMP_88(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_89(bool) = TMP_88 == _spender
TMP_90(bool) = TMP_87 || TMP_89
TMP_91(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_92(bool) = TMP_90 || TMP_91
RETURN TMP_92"];
}
// Function: 1257.sol-ERC721BasicToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_125(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_126(bool) = TMP_125 == msg.sender
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-ERC721BasicToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_1(address) -> tokenOwner[_tokenId]
owner(address) := REF_1(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = owner != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 1257.sol-ERC721BasicToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_115(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_116(bool) = TMP_115 == _from
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_16(uint256) -> ownedTokensCount[_from]
REF_17(uint256) -> ownedTokensCount[_from]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_17', '1'] 
REF_16(uint256) (->ownedTokensCount) := TMP_118(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_19(address) -> tokenOwner[_tokenId]
TMP_119 = CONVERT 0 to address
REF_19(address) (->tokenOwner) := TMP_119(address)"];
}
// Function: 1257.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
2->1;
}
// Function: 1257.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_83(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
3->1;
}
// Function: 1257.sol-ERC721BasicToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_66(bool) = _to != msg.sender
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_5(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_6(bool) -> REF_5[_to]
REF_6(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 1257.sol-ERC721BasicToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 1257.sol-ERC721BasicToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = _from != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _to != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
7->1;
}
// Function: 1257.sol-ERC721Enumerable-approve(address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-getApproved(uint256)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-isApprovedForAll(address,address)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-setApprovalForAll(address,bool)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 1257.sol-ERC721Enumerable-transferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Metadata-approve(address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 1257.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 1257.sol-ERC721Metadata-getApproved(uint256)
digraph{
}
// Function: 1257.sol-ERC721Metadata-isApprovedForAll(address,address)
digraph{
}
// Function: 1257.sol-ERC721Metadata-name()
digraph{
}
// Function: 1257.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 1257.sol-ERC721Metadata-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Metadata-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1257.sol-ERC721Metadata-setApprovalForAll(address,bool)
digraph{
}
// Function: 1257.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 1257.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 1257.sol-ERC721Metadata-transferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Receiver-onERC721Received(address,uint256,bytes)
digraph{
}
// Function: 1257.sol-ERC721Receiver-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 1257.sol-ERC721Token-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._burn(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._burn(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
bytes(tokenURIs[_tokenId]).length != 0

IRs:
REF_76(string) -> tokenURIs[_tokenId]
TMP_233 = CONVERT REF_76 to bytes
REF_77 -> LENGTH TMP_233
TMP_234(bool) = REF_77 != 0
CONDITION TMP_234"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete tokenURIs[_tokenId]

IRs:
REF_78(string) -> tokenURIs[_tokenId]
tokenURIs = delete REF_78 "];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokenIndex = allTokensIndex[_tokenId]

IRs:
REF_79(uint256) -> allTokensIndex[_tokenId]
tokenIndex(uint256) := REF_79(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTokenIndex = allTokens.length.sub(1)

IRs:
REF_80 -> LENGTH allTokens
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_80', '1'] 
lastTokenIndex(uint256) := TMP_235(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastToken = allTokens[lastTokenIndex]

IRs:
REF_82(uint256) -> allTokens[lastTokenIndex]
lastToken(uint256) := REF_82(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allTokens[tokenIndex] = lastToken

IRs:
REF_83(uint256) -> allTokens[tokenIndex]
REF_83(uint256) (->allTokens) := lastToken(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allTokens[lastTokenIndex] = 0

IRs:
REF_84(uint256) -> allTokens[lastTokenIndex]
REF_84(uint256) (->allTokens) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
allTokens.length --

IRs:
REF_85 -> LENGTH allTokens
TMP_236(uint256) := REF_85(uint256)
REF_85(-> allTokens) = REF_85 - 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
allTokensIndex[_tokenId] = 0

IRs:
REF_86(uint256) -> allTokensIndex[_tokenId]
REF_86(uint256) (->allTokensIndex) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allTokensIndex[lastToken] = tokenIndex

IRs:
REF_87(uint256) -> allTokensIndex[lastToken]
REF_87(uint256) (->allTokensIndex) := tokenIndex(uint256)"];
}
// Function: 1257.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._mint(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._mint(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allTokensIndex[_tokenId] = allTokens.length

IRs:
REF_71(uint256) -> allTokensIndex[_tokenId]
REF_72 -> LENGTH allTokens
REF_71(uint256) (->allTokensIndex) := REF_72(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allTokens.push(_tokenId)

IRs:
REF_74 -> LENGTH allTokens
TMP_230(uint256) := REF_74(uint256)
TMP_231(uint256) = TMP_230 + 1
REF_74(uint256) (->allTokens) := TMP_231(uint256)
REF_75(uint256) -> allTokens[TMP_230]
REF_75(uint256) (->allTokens) := _tokenId(uint256)"];
}
// Function: 1257.sol-ERC721Token-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_219(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_49(string) -> tokenURIs[_tokenId]
REF_49(string) (->tokenURIs) := _uri(string)"];
}
// Function: 1257.sol-ERC721Token-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = ownedTokens[_to].length

IRs:
REF_50(uint256[]) -> ownedTokens[_to]
REF_51 -> LENGTH REF_50
length(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_52(uint256[]) -> ownedTokens[_to]
REF_54 -> LENGTH REF_52
TMP_223(uint256) := REF_54(uint256)
TMP_224(uint256) = TMP_223 + 1
REF_54(uint256) (->ownedTokens) := TMP_224(uint256)
REF_55(uint256) -> REF_52[TMP_223]
REF_55(uint256) (->ownedTokens) := _tokenId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_56(uint256) -> ownedTokensIndex[_tokenId]
REF_56(uint256) (->ownedTokensIndex) := length(uint256)"];
}
// Function: 1257.sol-ERC721Token-approve(address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Token-balanceOf(address)
digraph{
}
// Function: 1257.sol-ERC721Token-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_240(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_241(None) = SOLIDITY_CALL require(bool)(TMP_240)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-ERC721Token-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_206(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_207 = UnaryType.BANG TMP_206 
CONDITION TMP_207"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_208 = CONVERT _to to ERC721Receiver
TMP_209(bytes4) = HIGH_LEVEL_CALL, dest:TMP_208(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_209(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_210(bool) = retval == ERC721_RECEIVED
RETURN TMP_210"];
}
// Function: 1257.sol-ERC721Token-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_189(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_190(bool) = TMP_189 == _owner
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_31(address) -> tokenApprovals[_tokenId]
TMP_192 = CONVERT 0 to address
TMP_193(bool) = REF_31 != TMP_192
CONDITION TMP_193"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_32(address) -> tokenApprovals[_tokenId]
TMP_194 = CONVERT 0 to address
REF_32(address) (->tokenApprovals) := TMP_194(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_195 = CONVERT 0 to address
Emit Approval(_owner,TMP_195,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1257.sol-ERC721Token-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
}
// Function: 1257.sol-ERC721Token-exists(uint256)
digraph{
}
// Function: 1257.sol-ERC721Token-getApproved(uint256)
digraph{
}
// Function: 1257.sol-ERC721Token-isApprovedForAll(address,address)
digraph{
}
// Function: 1257.sol-ERC721Token-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_172(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_172(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_173(bool) = _spender == owner
TMP_174(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_175(bool) = TMP_174 == _spender
TMP_176(bool) = TMP_173 || TMP_175
TMP_177(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_178(bool) = TMP_176 || TMP_177
RETURN TMP_178"];
}
// Function: 1257.sol-ERC721Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name_

IRs:
RETURN name_"];
}
// Function: 1257.sol-ERC721Token-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_237(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_238(bool) = TMP_237 == msg.sender
TMP_239(None) = SOLIDITY_CALL require(bool)(TMP_238)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-ERC721Token-ownerOf(uint256)
digraph{
}
// Function: 1257.sol-ERC721Token-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_57(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_57(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = ownedTokens[_from].length.sub(1)

IRs:
REF_58(uint256[]) -> ownedTokens[_from]
REF_59 -> LENGTH REF_58
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', '1'] 
lastTokenIndex(uint256) := TMP_226(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_61(uint256[]) -> ownedTokens[_from]
REF_62(uint256) -> REF_61[lastTokenIndex]
lastToken(uint256) := REF_62(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_63(uint256[]) -> ownedTokens[_from]
REF_64(uint256) -> REF_63[tokenIndex]
REF_64(uint256) (->ownedTokens) := lastToken(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_65(uint256[]) -> ownedTokens[_from]
REF_66(uint256) -> REF_65[lastTokenIndex]
REF_66(uint256) (->ownedTokens) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_67(uint256[]) -> ownedTokens[_from]
REF_68 -> LENGTH REF_67
TMP_227(uint256) := REF_68(uint256)
REF_68(-> ownedTokens) = REF_68 - 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_69(uint256) -> ownedTokensIndex[_tokenId]
REF_69(uint256) (->ownedTokensIndex) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_70(uint256) -> ownedTokensIndex[lastToken]
REF_70(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
}
// Function: 1257.sol-ERC721Token-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-ERC721Token-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1257.sol-ERC721Token-setApprovalForAll(address,bool)
digraph{
}
// Function: 1257.sol-ERC721Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 1257.sol-ERC721Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol_

IRs:
RETURN symbol_"];
}
// Function: 1257.sol-ERC721Token-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < totalSupply())

IRs:
TMP_216(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
TMP_217(bool) = _index < TMP_216
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allTokens[_index]

IRs:
REF_48(uint256) -> allTokens[_index]
RETURN REF_48"];
}
// Function: 1257.sol-ERC721Token-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < balanceOf(_owner))

IRs:
TMP_213(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
TMP_214(bool) = _index < TMP_213
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokens[_owner][_index]

IRs:
REF_45(uint256[]) -> ownedTokens[_owner]
REF_46(uint256) -> REF_45[_index]
RETURN REF_46"];
}
// Function: 1257.sol-ERC721Token-tokenURI(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_211(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenURIs[_tokenId]

IRs:
REF_44(string) -> tokenURIs[_tokenId]
RETURN REF_44"];
}
// Function: 1257.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allTokens.length

IRs:
REF_47 -> LENGTH allTokens
RETURN REF_47"];
}
// Function: 1257.sol-ERC721Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1257.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1257.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1257.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1257.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1257.sol-Pausable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _newOwner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1257.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1257.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_26(bool) = msg.sender == owner
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1257.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_12 = CONVERT 0 to address
owner(address) := TMP_12(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1257.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1257.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1257.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1257.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_28 = UnaryType.BANG paused 
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_30(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1257.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_41(uint256) = a + b
c(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_42(bool) = c >= a
TMP_43(None) = SOLIDITY_CALL assert(bool)(TMP_42)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1257.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_37(uint256) = a / b
RETURN TMP_37"];
}
// Function: 1257.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_32(bool) = a == 0
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_33(uint256) = a * b
c(uint256) := TMP_33(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_34(uint256) = c / a
TMP_35(bool) = TMP_34 == b
TMP_36(None) = SOLIDITY_CALL assert(bool)(TMP_35)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1257.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_38(bool) = b <= a
TMP_39(None) = SOLIDITY_CALL assert(bool)(TMP_38)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_40(uint256) = a - b
RETURN TMP_40"];
}
}
