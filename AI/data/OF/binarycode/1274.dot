digraph G {
// Function: 1274.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1274.sol-BasicToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_8 -> LENGTH msg.data
TMP_12(uint256) = size + 4
TMP_13(bool) = REF_8 >= TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1274.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _to != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_3(bool) = _value > 0
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_5(bool) = REF_0 >= _value
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_7(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_7(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_8(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_8(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_10(uint256) = 2 * 32
MODIFIER_CALL, BasicToken.onlyPayloadSize(uint256)(TMP_10)"];
8->1;
}
// Function: 1274.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1274.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1274.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1274.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1274.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1274.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1274.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1274.sol-MagnaChain-MagnaChain()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = INITIAL_SUPPLY

IRs:
REF_66(uint256) -> balances[msg.sender]
REF_66(uint256) (->balances) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = INITIAL_SUPPLY

IRs:
totalSupply(uint256) := INITIAL_SUPPLY(uint256)"];
}
// Function: 1274.sol-MagnaChain-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1274.sol-MagnaChain-allowance(address,address)
digraph{
}
// Function: 1274.sol-MagnaChain-approve(address,uint256)
digraph{
}
// Function: 1274.sol-MagnaChain-balanceOf(address)
digraph{
}
// Function: 1274.sol-MagnaChain-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_138(bool) = _value > 0
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_93(uint256) -> balances[msg.sender]
TMP_140(bool) = _value <= REF_93
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_94(uint256) -> balances[burner]
REF_95(uint256) -> balances[burner]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_95', '_value'] 
REF_94(uint256) (->balances) := TMP_142(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_143(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1274.sol-MagnaChain-lockedOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lockedBalance[_owner]

IRs:
REF_67(uint256) -> lockedBalance[_owner]
RETURN REF_67"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1274.sol-MagnaChain-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_154(bool) = msg.sender == owner
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1274.sol-MagnaChain-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_98 -> LENGTH msg.data
TMP_156(uint256) = size + 4
TMP_157(bool) = REF_98 >= TMP_156
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1274.sol-MagnaChain-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INITIAL_SUPPLY = 20 * 100 * (10 ** 6) * (10 ** 18)

IRs:
TMP_145(uint256) = 20 * 100
TMP_146(uint256) = 10 ** 6
TMP_147(uint256) = TMP_145 * TMP_146
TMP_148(uint256) = 10 ** 18
TMP_149(uint256) = TMP_147 * TMP_148
INITIAL_SUPPLY(uint256) := TMP_149(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MAX_TIME = 60 * 60 * 24 * 365 * 5

IRs:
TMP_150(uint256) = 60 * 60
TMP_151(uint256) = TMP_150 * 24
TMP_152(uint256) = TMP_151 * 365
TMP_153(uint256) = TMP_152 * 5
MAX_TIME(uint256) := TMP_153(uint256)"];
}
// Function: 1274.sol-MagnaChain-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = MagnaChain

IRs:
name(string) := MagnaChain(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = MGC

IRs:
symbol(string) := MGC(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 1274.sol-MagnaChain-transfer(address,uint256)
digraph{
}
// Function: 1274.sol-MagnaChain-transferAndLock(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_107 = CONVERT 0 to address
TMP_108(bool) = _to != TMP_107
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_69(uint256) -> balances[msg.sender]
TMP_110(bool) = _value <= REF_69
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_112(bool) = _value > 0
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_releaseTime > now && _releaseTime <= now + MAX_TIME)

IRs:
TMP_114(bool) = _releaseTime > now
TMP_115(uint256) = now + MAX_TIME
TMP_116(bool) = _releaseTime <= TMP_115
TMP_117(bool) = TMP_114 && TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_70(uint256) -> balances[msg.sender]
REF_71(uint256) -> balances[msg.sender]
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_71', '_value'] 
REF_70(uint256) (->balances) := TMP_119(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
preRelease = timeRelease[_to]

IRs:
REF_73(uint256) -> timeRelease[_to]
preRelease(uint256) := REF_73(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
preRelease <= now && preRelease != 0x0

IRs:
TMP_120(bool) = preRelease <= now
TMP_121(bool) = preRelease != 0
TMP_122(bool) = TMP_120 && TMP_121
CONDITION TMP_122"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_to] = balances[_to].add(lockedBalance[_to])

IRs:
REF_74(uint256) -> balances[_to]
REF_75(uint256) -> balances[_to]
REF_77(uint256) -> lockedBalance[_to]
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_75', 'REF_77'] 
REF_74(uint256) (->balances) := TMP_123(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
lockedBalance[_to] = 0

IRs:
REF_78(uint256) -> lockedBalance[_to]
REF_78(uint256) (->lockedBalance) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lockedBalance[_to] = lockedBalance[_to].add(_value)

IRs:
REF_79(uint256) -> lockedBalance[_to]
REF_80(uint256) -> lockedBalance[_to]
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_80', '_value'] 
REF_79(uint256) (->lockedBalance) := TMP_124(uint256)"];
11->17;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Lock(_to,_value,_releaseTime)

IRs:
Emit Lock(_to,_value,_releaseTime)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_127(uint256) = 3 * 32
MODIFIER_CALL, BasicToken.onlyPayloadSize(uint256)(TMP_127)"];
16->1;
17[label="Node Type: IF 17

EXPRESSION:
_releaseTime >= timeRelease[_to]

IRs:
REF_82(uint256) -> timeRelease[_to]
TMP_129(bool) = _releaseTime >= REF_82
CONDITION TMP_129"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
timeRelease[_to] = _releaseTime

IRs:
REF_83(uint256) -> timeRelease[_to]
REF_83(uint256) (->timeRelease) := _releaseTime(uint256)"];
18->20;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
timeRelease[_to] = timeRelease[_to]

IRs:
REF_84(uint256) -> timeRelease[_to]
REF_85(uint256) -> timeRelease[_to]
REF_84(uint256) (->timeRelease) := REF_85(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->13;
21[label="Node Type: RETURN 21

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1274.sol-MagnaChain-transferFrom(address,address,uint256)
digraph{
}
// Function: 1274.sol-MagnaChain-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_70 = CONVERT 0 to address
TMP_71(bool) = newOwner != TMP_70
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1274.sol-MagnaChain-unlock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount = lockedBalance[msg.sender]

IRs:
REF_86(uint256) -> lockedBalance[msg.sender]
amount(uint256) := REF_86(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_130(bool) = amount > 0
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now >= timeRelease[msg.sender])

IRs:
REF_87(uint256) -> timeRelease[msg.sender]
TMP_132(bool) = now >= REF_87
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_88(uint256) -> balances[msg.sender]
REF_89(uint256) -> balances[msg.sender]
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_89', 'amount'] 
REF_88(uint256) (->balances) := TMP_134(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lockedBalance[msg.sender] = 0

IRs:
REF_91(uint256) -> lockedBalance[msg.sender]
REF_91(uint256) (->lockedBalance) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
timeRelease[msg.sender] = 0

IRs:
REF_92(uint256) -> timeRelease[msg.sender]
REF_92(uint256) (->timeRelease) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(address(0),msg.sender,amount)

IRs:
TMP_135 = CONVERT 0 to address
Emit Transfer(TMP_135,msg.sender,amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
UnLock(msg.sender,amount)

IRs:
Emit UnLock(msg.sender,amount)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1274.sol-MagnaChain-unlockTimeOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
timeRelease[_owner]

IRs:
REF_68(uint256) -> timeRelease[_owner]
RETURN REF_68"];
2[label="Node Type: RETURN 2

EXPRESSION:
timelimit

IRs:
RETURN timelimit"];
}
// Function: 1274.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1274.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_55(bool) = msg.sender == owner
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1274.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_50 = CONVERT 0 to address
TMP_51(bool) = newOwner != TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1274.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_67(uint256) = a + b
c(uint256) := TMP_67(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_68(bool) = c >= a
TMP_69(None) = SOLIDITY_CALL assert(bool)(TMP_68)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1274.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_63(uint256) = a / b
c(uint256) := TMP_63(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1274.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_57(uint256) = a * b
c(uint256) := TMP_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_58(bool) = a == 0
TMP_59(uint256) = c / a
TMP_60(bool) = TMP_59 == b
TMP_61(bool) = TMP_58 || TMP_60
TMP_62(None) = SOLIDITY_CALL assert(bool)(TMP_61)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1274.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_64(bool) = b <= a
TMP_65(None) = SOLIDITY_CALL assert(bool)(TMP_64)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_66(uint256) = a - b
RETURN TMP_66"];
}
// Function: 1274.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_35(mapping(address => uint256)) -> allowed[_owner]
REF_36(uint256) -> REF_35[_spender]
RETURN REF_36"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1274.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_42(bool) = _value == 0
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
TMP_43(bool) = REF_32 == 0
TMP_44(bool) = TMP_42 || TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
REF_34(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1274.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1274.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_37 -> LENGTH msg.data
TMP_47(uint256) = size + 4
TMP_48(bool) = REF_37 >= TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1274.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1274.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = _to != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_30(bool) = _value > 0
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[_from] >= _value)

IRs:
REF_17(uint256) -> balances[_from]
TMP_32(bool) = REF_17 >= _value
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_18(mapping(address => uint256)) -> allowed[_from]
REF_19(uint256) -> REF_18[msg.sender]
TMP_34(bool) = _value <= REF_19
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
_allowance(uint256) := REF_21(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_22(uint256) -> balances[_from]
REF_23(uint256) -> balances[_from]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_36(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_25(uint256) -> balances[_to]
REF_26(uint256) -> balances[_to]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_26', '_value'] 
REF_25(uint256) (->balances) := TMP_37(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_28(mapping(address => uint256)) -> allowed[_from]
REF_29(uint256) -> REF_28[msg.sender]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_29(uint256) (->allowed) := TMP_38(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_40(uint256) = 3 * 32
MODIFIER_CALL, BasicToken.onlyPayloadSize(uint256)(TMP_40)"];
11->1;
}
}
