digraph G {
// Function: 1301.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender))

IRs:
TMP_3(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address)(msg.sender)
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1301.sol-DSAuth-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 1301.sol-DSAuth-isAuthorized(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == owner

IRs:
TMP_2(bool) = src == owner
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1301.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 1301.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_16(uint256) = x + y
z(uint256) := TMP_16(uint256)
TMP_17(bool) = z >= x
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_22(bool) = y == 0
TMP_23(uint256) = x * y
z(uint256) := TMP_23(uint256)
TMP_24(uint256) = z / y
TMP_25(bool) = TMP_24 == x
TMP_26(bool) = TMP_22 || TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_19(uint256) = x - y
z(uint256) := TMP_19(uint256)
TMP_20(bool) = z <= x
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1301.sol-DSStop-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender))

IRs:
TMP_11(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address)(msg.sender)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1301.sol-DSStop-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 1301.sol-DSStop-isAuthorized(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == owner

IRs:
TMP_6(bool) = src == owner
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1301.sol-DSStop-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1301.sol-DSStop-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 1301.sol-DSStop-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 1301.sol-DSStop-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stopped)

IRs:
TMP_14 = UnaryType.BANG stopped 
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1301.sol-DSToken-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_60(uint256) = x + y
z(uint256) := TMP_60(uint256)
TMP_61(bool) = z >= x
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSToken-allowance(address,address)
digraph{
}
// Function: 1301.sol-DSToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(guy,wad)

IRs:
TMP_72(bool) = INTERNAL_CALL, DSTokenBase.approve(address,uint256)(guy,wad)
RETURN TMP_72"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->1;
}
// Function: 1301.sol-DSToken-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender))

IRs:
TMP_96(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address)(msg.sender)
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1301.sol-DSToken-balanceOf(address)
digraph{
}
// Function: 1301.sol-DSToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 1301.sol-DSToken-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_15(uint256) -> _balances[msg.sender]
REF_15(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 1301.sol-DSToken-freezeAccount(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_balances[guy] >= wad)

IRs:
REF_42(uint256) -> _balances[guy]
TMP_87(bool) = REF_42 >= wad
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_frozens[guy] = add(0,wad)

IRs:
REF_43(uint256) -> _frozens[guy]
TMP_89(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(0,wad)
REF_43(uint256) (->_frozens) := TMP_89(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Freeze(guy,wad)

IRs:
Emit Freeze(guy,wad)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->1;
}
// Function: 1301.sol-DSToken-frozenFunds(address)
digraph{
}
// Function: 1301.sol-DSToken-isAuthorized(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == owner

IRs:
TMP_52(bool) = src == owner
CONDITION TMP_52"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1301.sol-DSToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_66(bool) = y == 0
TMP_67(uint256) = x * y
z(uint256) := TMP_67(uint256)
TMP_68(uint256) = z / y
TMP_69(bool) = TMP_68 == x
TMP_70(bool) = TMP_66 || TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSToken-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1301.sol-DSToken-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = name_

IRs:
name(string) := name_(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->1;
}
// Function: 1301.sol-DSToken-setSymbol(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = symbol_

IRs:
symbol(string) := symbol_(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->1;
}
// Function: 1301.sol-DSToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = HER

IRs:
symbol(string) := HER(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = Herdius

IRs:
name(string) := Herdius(string)"];
}
// Function: 1301.sol-DSToken-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 1301.sol-DSToken-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 1301.sol-DSToken-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stopped)

IRs:
TMP_94 = UnaryType.BANG stopped 
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1301.sol-DSToken-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_63(uint256) = x - y
z(uint256) := TMP_63(uint256)
TMP_64(bool) = z <= x
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSToken-totalSupply()
digraph{
}
// Function: 1301.sol-DSToken-transfer(address,uint256)
digraph{
}
// Function: 1301.sol-DSToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_balances[src] - _frozens[src] >= wad)

IRs:
REF_30(uint256) -> _balances[src]
REF_31(uint256) -> _frozens[src]
TMP_74(uint256) = REF_30 - REF_31
TMP_75(bool) = TMP_74 >= wad
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
src != msg.sender && _approvals[src][msg.sender] != uint256(- 1)

IRs:
TMP_77(bool) = src != msg.sender
REF_32(mapping(address => uint256)) -> _approvals[src]
REF_33(uint256) -> REF_32[msg.sender]
TMP_78(uint256) = 0 - 1
TMP_79 = CONVERT TMP_78 to uint256
TMP_80(bool) = REF_33 != TMP_79
TMP_81(bool) = TMP_77 && TMP_80
CONDITION TMP_81"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_approvals[src][msg.sender] = sub(_approvals[src][msg.sender],wad)

IRs:
REF_34(mapping(address => uint256)) -> _approvals[src]
REF_35(uint256) -> REF_34[msg.sender]
REF_36(mapping(address => uint256)) -> _approvals[src]
REF_37(uint256) -> REF_36[msg.sender]
TMP_82(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_37,wad)
REF_35(uint256) (->_approvals) := TMP_82(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[src] = sub(_balances[src],wad)

IRs:
REF_38(uint256) -> _balances[src]
REF_39(uint256) -> _balances[src]
TMP_83(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_39,wad)
REF_38(uint256) (->_balances) := TMP_83(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_40(uint256) -> _balances[dst]
REF_41(uint256) -> _balances[dst]
TMP_84(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_41,wad)
REF_40(uint256) (->_balances) := TMP_84(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(src,dst,wad)

IRs:
Emit Transfer(src,dst,wad)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
9->1;
}
// Function: 1301.sol-DSTokenBase-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_28(uint256) = x + y
z(uint256) := TMP_28(uint256)
TMP_29(bool) = z >= x
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSTokenBase-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_approvals[src][guy]

IRs:
REF_3(mapping(address => uint256)) -> _approvals[src]
REF_4(uint256) -> REF_3[guy]
RETURN REF_4"];
}
// Function: 1301.sol-DSTokenBase-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_approvals[msg.sender][guy] = wad

IRs:
REF_13(mapping(address => uint256)) -> _approvals[msg.sender]
REF_14(uint256) -> REF_13[guy]
REF_14(uint256) (->_approvals) := wad(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,guy,wad)

IRs:
Emit Approval(msg.sender,guy,wad)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1301.sol-DSTokenBase-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balances[src]

IRs:
REF_1(uint256) -> _balances[src]
RETURN REF_1"];
}
// Function: 1301.sol-DSTokenBase-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_0(uint256) -> _balances[msg.sender]
REF_0(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 1301.sol-DSTokenBase-frozenFunds(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_frozens[src]

IRs:
REF_2(uint256) -> _frozens[src]
RETURN REF_2"];
}
// Function: 1301.sol-DSTokenBase-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_34(bool) = y == 0
TMP_35(uint256) = x * y
z(uint256) := TMP_35(uint256)
TMP_36(uint256) = z / y
TMP_37(bool) = TMP_36 == x
TMP_38(bool) = TMP_34 || TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSTokenBase-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_31(uint256) = x - y
z(uint256) := TMP_31(uint256)
TMP_32(bool) = z <= x
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1301.sol-DSTokenBase-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_supply

IRs:
RETURN _supply"];
}
// Function: 1301.sol-DSTokenBase-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferFrom(msg.sender,dst,wad)

IRs:
TMP_40(bool) = INTERNAL_CALL, DSTokenBase.transferFrom(address,address,uint256)(msg.sender,dst,wad)
RETURN TMP_40"];
}
// Function: 1301.sol-DSTokenBase-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src != msg.sender

IRs:
TMP_41(bool) = src != msg.sender
CONDITION TMP_41"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_approvals[src][msg.sender] = sub(_approvals[src][msg.sender],wad)

IRs:
REF_5(mapping(address => uint256)) -> _approvals[src]
REF_6(uint256) -> REF_5[msg.sender]
REF_7(mapping(address => uint256)) -> _approvals[src]
REF_8(uint256) -> REF_7[msg.sender]
TMP_42(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_8,wad)
REF_6(uint256) (->_approvals) := TMP_42(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[src] = sub(_balances[src],wad)

IRs:
REF_9(uint256) -> _balances[src]
REF_10(uint256) -> _balances[src]
TMP_43(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_10,wad)
REF_9(uint256) (->_balances) := TMP_43(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_11(uint256) -> _balances[dst]
REF_12(uint256) -> _balances[dst]
TMP_44(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_12,wad)
REF_11(uint256) (->_balances) := TMP_44(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(src,dst,wad)

IRs:
Emit Transfer(src,dst,wad)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1301.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1301.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1301.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1301.sol-ERC20-frozenFunds(address)
digraph{
}
// Function: 1301.sol-ERC20-totalSupply()
digraph{
}
// Function: 1301.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1301.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
}
