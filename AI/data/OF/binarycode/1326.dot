digraph G {
// Function: 1326.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 1326.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1326.sol-BasicToken-transfer(address,uint256)
digraph{
}
// Function: 1326.sol-DHCToken-allowance(address,address)
digraph{
}
// Function: 1326.sol-DHCToken-approve(address,uint256)
digraph{
}
// Function: 1326.sol-DHCToken-balanceOf(address)
digraph{
}
// Function: 1326.sol-DHCToken-batchTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _to.length

IRs:
REF_86 -> LENGTH _to
TMP_101(bool) = i < REF_86
CONDITION TMP_101"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transfer(_to[i],_amount[i])

IRs:
REF_87(address) -> _to[i]
REF_88(uint256) -> _amount[i]
TMP_102(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(REF_87,REF_88)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_103(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
8->3;
}
// Function: 1326.sol-DHCToken-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_master != address(0))

IRs:
TMP_96 = CONVERT 0 to address
TMP_97(bool) = _master != TMP_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = INITIAL_SUPPLY

IRs:
totalSupply_(uint256) := INITIAL_SUPPLY(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
master = _master

IRs:
master(address) := _master(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[coinbase_address] = INITIAL_SUPPLY * coinbase_percent / 100

IRs:
REF_85(uint256) -> balances[coinbase_address]
TMP_99(uint256) = INITIAL_SUPPLY * coinbase_percent
TMP_100(uint256) = TMP_99 / 100
REF_85(uint256) (->balances) := TMP_100(uint256)"];
}
// Function: 1326.sol-DHCToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_89 = CONVERT 0 to address
TMP_90(bool) = _spender != TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_92(bool) = _subtractedValue > oldValue
CONDITION TMP_92"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_93(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
9->1;
}
// Function: 1326.sol-DHCToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_83 = CONVERT 0 to address
TMP_84(bool) = _spender != TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_86(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
5->1;
}
// Function: 1326.sol-DHCToken-isMaster()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == master)

IRs:
TMP_113(bool) = msg.sender == master
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1326.sol-DHCToken-isNotPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused == false)

IRs:
TMP_117(bool) = paused == False
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1326.sol-DHCToken-isPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused == true)

IRs:
TMP_115(bool) = paused == True
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1326.sol-DHCToken-pauseStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
paused

IRs:
RETURN paused"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isMaster()

IRs:
MODIFIER_CALL, StandardToken.isMaster()()"];
2->1;
}
// Function: 1326.sol-DHCToken-setPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isMaster()

IRs:
MODIFIER_CALL, StandardToken.isMaster()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
3->1;
}
// Function: 1326.sol-DHCToken-setResume()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isMaster()

IRs:
MODIFIER_CALL, StandardToken.isMaster()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isPause()

IRs:
MODIFIER_CALL, StandardToken.isPause()()"];
3->1;
}
// Function: 1326.sol-DHCToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = DigItal Homo Sapiens Coin

IRs:
name(string) := DigItal Homo Sapiens Coin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = DHC

IRs:
symbol(string) := DHC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals))

IRs:
TMP_110 = CONVERT decimals to uint256
TMP_111(uint256) = 10 ** TMP_110
TMP_112(uint256) = 1000000000 * TMP_111
INITIAL_SUPPLY(uint256) := TMP_112(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
coinbase_address = 0x66b37a85019E149Cc7882695F4E824DE2b237d55

IRs:
coinbase_address(address) := 586319564973157117217993054829670808731571682645(address)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
coinbase_percent = 100

IRs:
coinbase_percent(uint8) := 100(uint256)"];
}
// Function: 1326.sol-DHCToken-totalSupply()
digraph{
}
// Function: 1326.sol-DHCToken-transfer(address,uint256)
digraph{
}
// Function: 1326.sol-DHCToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1326.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1326.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1326.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1326.sol-ERC20-totalSupply()
digraph{
}
// Function: 1326.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1326.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1326.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1326.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1326.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1326.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1326.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1326.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1326.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1326.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_25(mapping(address => uint256)) -> allowed[_owner]
REF_26(uint256) -> REF_25[_spender]
RETURN REF_26"];
}
// Function: 1326.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = _spender != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_23(mapping(address => uint256)) -> allowed[msg.sender]
REF_24(uint256) -> REF_23[_spender]
REF_24(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
5->1;
}
// Function: 1326.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1326.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(bool) = _spender != TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
oldValue(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_47(bool) = _subtractedValue > oldValue
CONDITION TMP_47"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
REF_37(uint256) (->allowed) := 0(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_39(uint256) (->allowed) := TMP_48(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
Emit Approval(msg.sender,_spender,REF_42)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
9->1;
}
// Function: 1326.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = _spender != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
REF_29(mapping(address => uint256)) -> allowed[msg.sender]
REF_30(uint256) -> REF_29[_spender]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_30', '_addedValue'] 
REF_28(uint256) (->allowed) := TMP_41(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_32(mapping(address => uint256)) -> allowed[msg.sender]
REF_33(uint256) -> REF_32[_spender]
Emit Approval(msg.sender,_spender,REF_33)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
5->1;
}
// Function: 1326.sol-StandardToken-isMaster()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == master)

IRs:
TMP_51(bool) = msg.sender == master
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1326.sol-StandardToken-isNotPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused == false)

IRs:
TMP_55(bool) = paused == False
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1326.sol-StandardToken-isPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused == true)

IRs:
TMP_53(bool) = paused == True
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1326.sol-StandardToken-totalSupply()
digraph{
}
// Function: 1326.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_15(bool) = _value <= REF_2
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_4(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_4', '_value'] 
REF_3(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_6(uint256) -> balances[_to]
REF_7(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_7', '_value'] 
REF_6(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
7->1;
}
// Function: 1326.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _to != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_9(uint256) -> balances[_from]
TMP_24(bool) = _value <= REF_9
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
TMP_26(bool) = _value <= REF_11
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_12(uint256) -> balances[_from]
REF_13(uint256) -> balances[_from]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_13', '_value'] 
REF_12(uint256) (->balances) := TMP_28(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_15(uint256) -> balances[_to]
REF_16(uint256) -> balances[_to]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_16', '_value'] 
REF_15(uint256) (->balances) := TMP_29(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_18(mapping(address => uint256)) -> allowed[_from]
REF_19(uint256) -> REF_18[msg.sender]
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '_value'] 
REF_19(uint256) (->allowed) := TMP_30(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isNotPause()

IRs:
MODIFIER_CALL, StandardToken.isNotPause()()"];
9->1;
}
}
