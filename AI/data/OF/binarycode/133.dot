digraph G {
// Function: 133.sol-AccessAdmin-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addrAdmin = msg.sender

IRs:
addrAdmin(address) := msg.sender(address)"];
}
// Function: 133.sol-AccessAdmin-doPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = true

IRs:
isPaused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 133.sol-AccessAdmin-doUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenPaused()()"];
3->1;
}
// Function: 133.sol-AccessAdmin-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrAdmin)

IRs:
TMP_9(bool) = msg.sender == addrAdmin
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 133.sol-AccessAdmin-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _newAdmin != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(addrAdmin,_newAdmin)

IRs:
Emit AdminTransferred(addrAdmin,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrAdmin = _newAdmin

IRs:
addrAdmin(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
4->1;
}
// Function: 133.sol-AccessAdmin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
}
// Function: 133.sol-AccessAdmin-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isPaused)

IRs:
TMP_11 = UnaryType.BANG isPaused 
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 133.sol-AccessAdmin-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPaused)

IRs:
TMP_13(None) = SOLIDITY_CALL require(bool)(isPaused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 133.sol-ERC165-supportsInterface(bytes4)
digraph{
}
// Function: 133.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 133.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 133.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 133.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 133.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 133.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 133.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 133.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 133.sol-ERC721-supportsInterface(bytes4)
digraph{
}
// Function: 133.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 133.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 133.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 133.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 133.sol-ERC721Metadata-name()
digraph{
}
// Function: 133.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 133.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 133.sol-ERC721MetadataProvider-tokenURI(uint256)
digraph{
}
// Function: 133.sol-ERC721TokenReceiver-onERC721Received(address,uint256,bytes)
digraph{
}
// Function: 133.sol-ManagerToken-_safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenIdToOwner[_tokenId]

IRs:
REF_40(address) -> tokenIdToOwner[_tokenId]
owner(address) := REF_40(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_89 = CONVERT 0 to address
TMP_90(bool) = owner != TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_92 = CONVERT 0 to address
TMP_93(bool) = _to != TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(owner == _from)

IRs:
TMP_95(bool) = owner == _from
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ManagerToken._transfer(address,address,uint256)(_from,_to,_tokenId)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
codeSize == 0

IRs:
TMP_98(bool) = codeSize == 0
CONDITION TMP_98"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
retval = ERC721TokenReceiver(_to).onERC721Received(_from,_tokenId,data)

IRs:
TMP_99 = CONVERT _to to ERC721TokenReceiver
TMP_100(bytes4) = HIGH_LEVEL_CALL, dest:TMP_99(ERC721TokenReceiver), function:onERC721Received, arguments:['_from', '_tokenId', 'data']  
retval(bytes4) := TMP_100(bytes4)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(retval == 0xf0b9e5ba)

IRs:
TMP_101(bool) = retval == 4038714810
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ManagerToken.isValidToken(uint256)(_tokenId)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ManagerToken.canTransfer(uint256)(_tokenId)"];
15->1;
}
// Function: 133.sol-ManagerToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_from != address(0)

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _from != TMP_72
CONDITION TMP_73"];
1->2[label="True"];
1->14[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
indexFrom = tokenIdToOwnerIndex[_tokenId]

IRs:
REF_21(uint256) -> tokenIdToOwnerIndex[_tokenId]
indexFrom(uint256) := REF_21(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
ttmArray = ownerToManagerArray[_from]

IRs:
REF_22(uint256[]) -> ownerToManagerArray[_from]
ttmArray(uint256[]) = ['REF_22(uint256[])']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(ttmArray[indexFrom] == _tokenId)

IRs:
REF_23(uint256) -> ttmArray[indexFrom]
TMP_74(bool) = REF_23 == _tokenId
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
indexFrom != ttmArray.length - 1

IRs:
REF_24 -> LENGTH ttmArray
TMP_76(uint256) = REF_24 - 1
TMP_77(bool) = indexFrom != TMP_76
CONDITION TMP_77"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTokenId = ttmArray[ttmArray.length - 1]

IRs:
REF_25 -> LENGTH ttmArray
TMP_78(uint256) = REF_25 - 1
REF_26(uint256) -> ttmArray[TMP_78]
lastTokenId(uint256) := REF_26(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ttmArray[indexFrom] = lastTokenId

IRs:
REF_27(uint256) -> ttmArray[indexFrom]
REF_27(uint256) (->ttmArray) := lastTokenId(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenIdToOwnerIndex[lastTokenId] = indexFrom

IRs:
REF_28(uint256) -> tokenIdToOwnerIndex[lastTokenId]
REF_28(uint256) (->tokenIdToOwnerIndex) := indexFrom(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ttmArray.length -= 1

IRs:
REF_29 -> LENGTH ttmArray
REF_29(-> ttmArray) = REF_29 - 1"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
tokenIdToApprovals[_tokenId] != address(0)

IRs:
REF_30(address) -> tokenIdToApprovals[_tokenId]
TMP_79 = CONVERT 0 to address
TMP_80(bool) = REF_30 != TMP_79
CONDITION TMP_80"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete tokenIdToApprovals[_tokenId]

IRs:
REF_31(address) -> tokenIdToApprovals[_tokenId]
tokenIdToApprovals = delete REF_31 "];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokenIdToOwner[_tokenId] = _to

IRs:
REF_32(address) -> tokenIdToOwner[_tokenId]
REF_32(address) (->tokenIdToOwner) := _to(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ownerToManagerArray[_to].push(_tokenId)

IRs:
REF_33(uint256[]) -> ownerToManagerArray[_to]
REF_35 -> LENGTH REF_33
TMP_82(uint256) := REF_35(uint256)
TMP_83(uint256) = TMP_82 + 1
REF_35(uint256) (->ownerToManagerArray) := TMP_83(uint256)
REF_36(uint256) -> REF_33[TMP_82]
REF_36(uint256) (->ownerToManagerArray) := _tokenId(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tokenIdToOwnerIndex[_tokenId] = ownerToManagerArray[_to].length - 1

IRs:
REF_37(uint256) -> tokenIdToOwnerIndex[_tokenId]
REF_38(uint256[]) -> ownerToManagerArray[_to]
REF_39 -> LENGTH REF_38
TMP_84(uint256) = REF_39 - 1
REF_37(uint256) (->tokenIdToOwnerIndex) := TMP_84(uint256)"];
17->19;
19[label="Node Type: IF 19

EXPRESSION:
_from != address(0)

IRs:
TMP_85 = CONVERT 0 to address
TMP_86(bool) = _from != TMP_85
CONDITION TMP_86"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
20->22;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Transfer(this,_to,_tokenId)

IRs:
Emit Transfer(this,_to,_tokenId)"];
21->22;
22[label="Node Type: END_IF 22
"];
}
// Function: 133.sol-ManagerToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenIdToOwner[_tokenId]

IRs:
REF_6(address) -> tokenIdToOwner[_tokenId]
owner(address) := REF_6(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = owner != TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || operatorToApprovals[owner][msg.sender])

IRs:
TMP_56(bool) = msg.sender == owner
REF_7(mapping(address => bool)) -> operatorToApprovals[owner]
REF_8(bool) -> REF_7[msg.sender]
TMP_57(bool) = TMP_56 || REF_8
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenIdToApprovals[_tokenId] = _approved

IRs:
REF_9(address) -> tokenIdToApprovals[_tokenId]
REF_9(address) (->tokenIdToApprovals) := _approved(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_approved,_tokenId)

IRs:
Emit Approval(owner,_approved,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
6->1;
}
// Function: 133.sol-ManagerToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = TokenRecipient(_spender)

IRs:
TMP_154 = CONVERT _spender to TokenRecipient
spender(TokenRecipient) := TMP_154(TokenRecipient)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
approve(_spender,_tokenId)

IRs:
INTERNAL_CALL, ManagerToken.approve(address,uint256)(_spender,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_tokenId,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(TokenRecipient), function:receiveApproval, arguments:['msg.sender', '_tokenId', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 133.sol-ManagerToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_owner != address(0),Owner is 0)

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = _owner != TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,Owner is 0)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownerToManagerArray[_owner].length

IRs:
REF_2(uint256[]) -> ownerToManagerArray[_owner]
REF_3 -> LENGTH REF_2
RETURN REF_3"];
}
// Function: 133.sol-ManagerToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenIdToOwner[_tokenId]

IRs:
REF_74(address) -> tokenIdToOwner[_tokenId]
owner(address) := REF_74(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(msg.sender == owner || msg.sender == tokenIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender],Can not transfer)

IRs:
TMP_178(bool) = msg.sender == owner
REF_75(address) -> tokenIdToApprovals[_tokenId]
TMP_179(bool) = msg.sender == REF_75
TMP_180(bool) = TMP_178 || TMP_179
REF_76(mapping(address => bool)) -> operatorToApprovals[owner]
REF_77(bool) -> REF_76[msg.sender]
TMP_181(bool) = TMP_180 || REF_77
TMP_182(None) = SOLIDITY_CALL require(bool,string)(TMP_181,Can not transfer)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 133.sol-ManagerToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addrAdmin = msg.sender

IRs:
addrAdmin(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
managerArray.length += 1

IRs:
REF_0 -> LENGTH managerArray
REF_0(-> managerArray) = REF_0 + 1"];
}
// Function: 133.sol-ManagerToken-doPause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = true

IRs:
isPaused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 133.sol-ManagerToken-doUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenPaused()()"];
3->1;
}
// Function: 133.sol-ManagerToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToApprovals[_tokenId]

IRs:
REF_12(address) -> tokenIdToApprovals[_tokenId]
RETURN REF_12"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ManagerToken.isValidToken(uint256)(_tokenId)"];
2->1;
}
// Function: 133.sol-ManagerToken-getOwnTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_109 = CONVERT 0 to address
TMP_110(bool) = _owner != TMP_109
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownerToManagerArray[_owner]

IRs:
REF_44(uint256[]) -> ownerToManagerArray[_owner]
RETURN REF_44"];
}
// Function: 133.sol-ManagerToken-getOwnerTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ownTokens = ownerToManagerArray[_owner]

IRs:
REF_65(uint256[]) -> ownerToManagerArray[_owner]
ownTokens(uint256[]) = ['REF_65(uint256[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = ownTokens.length

IRs:
REF_66 -> LENGTH ownTokens
count(uint256) := REF_66(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenIdArray = new uint256[](count)

IRs:
TMP_162(uint256[])  = new uint256[](count)
tokenIdArray(uint256[]) = ['TMP_162(uint256[])']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
protoIdArray = new uint256[](count)

IRs:
TMP_164(uint256[])  = new uint256[](count)
protoIdArray(uint256[]) = ['TMP_164(uint256[])']"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->12;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < count

IRs:
TMP_165(bool) = i < count
CONDITION TMP_165"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenIdArray[i] = ownTokens[i]

IRs:
REF_67(uint256) -> tokenIdArray[i]
REF_68(uint256) -> ownTokens[i]
REF_67(uint256) (->tokenIdArray) := REF_68(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
protoIdArray[i] = managerArray[tokenIdArray[i]]

IRs:
REF_69(uint256) -> protoIdArray[i]
REF_70(uint256) -> tokenIdArray[i]
REF_71(uint256) -> managerArray[REF_70]
REF_69(uint256) (->protoIdArray) := REF_71(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
11->8;
12[label="Node Type: RETURN 12

EXPRESSION:
(tokenIdArray,protoIdArray)

IRs:
RETURN tokenIdArray,protoIdArray"];
}
// Function: 133.sol-ManagerToken-getProtoIdByTokenId(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_tokenId > 0 && _tokenId < managerArray.length

IRs:
TMP_158(bool) = _tokenId > 0
REF_63 -> LENGTH managerArray
TMP_159(bool) = _tokenId < REF_63
TMP_160(bool) = TMP_158 && TMP_159
CONDITION TMP_160"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
managerArray[_tokenId]

IRs:
REF_64(uint256) -> managerArray[_tokenId]
RETURN REF_64"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
protoId

IRs:
RETURN protoId"];
}
// Function: 133.sol-ManagerToken-getSafeContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
safeContracts[_actionAddr]

IRs:
REF_43(bool) -> safeContracts[_actionAddr]
RETURN REF_43"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 133.sol-ManagerToken-initManager(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeContracts[msg.sender] || msg.sender == addrAdmin)

IRs:
REF_50(bool) -> safeContracts[msg.sender]
TMP_137(bool) = msg.sender == addrAdmin
TMP_138(bool) = REF_50 || TMP_137
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_gene > 0 && _count <= 128)

IRs:
TMP_140(bool) = _gene > 0
TMP_141(bool) = _count <= 128
TMP_142(bool) = TMP_140 && TMP_141
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
owner = address(this)

IRs:
TMP_144 = CONVERT this to address
owner(address) := TMP_144(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
ttmArray = ownerToManagerArray[owner]

IRs:
REF_51(uint256[]) -> ownerToManagerArray[owner]
ttmArray(uint256[]) = ['REF_51(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _count

IRs:
TMP_145(bool) = i < _count
CONDITION TMP_145"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
newTokenId = managerArray.length

IRs:
REF_52 -> LENGTH managerArray
newTokenId(uint256) := REF_52(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
managerArray.push(_gene)

IRs:
REF_54 -> LENGTH managerArray
TMP_147(uint256) := REF_54(uint256)
TMP_148(uint256) = TMP_147 + 1
REF_54(uint256) (->managerArray) := TMP_148(uint256)
REF_55(uint256) -> managerArray[TMP_147]
REF_55(uint256) (->managerArray) := _gene(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokenIdToOwner[newTokenId] = owner

IRs:
REF_56(address) -> tokenIdToOwner[newTokenId]
REF_56(address) (->tokenIdToOwner) := owner(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tokenIdToOwnerIndex[newTokenId] = ttmArray.length

IRs:
REF_57(uint256) -> tokenIdToOwnerIndex[newTokenId]
REF_58 -> LENGTH ttmArray
REF_57(uint256) (->tokenIdToOwnerIndex) := REF_58(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ttmArray.push(newTokenId)

IRs:
REF_60 -> LENGTH ttmArray
TMP_150(uint256) := REF_60(uint256)
TMP_151(uint256) = TMP_150 + 1
REF_60(uint256) (->ttmArray) := TMP_151(uint256)
REF_61(uint256) -> ttmArray[TMP_150]
REF_61(uint256) (->ttmArray) := newTokenId(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(address(0),owner,newTokenId)

IRs:
TMP_152 = CONVERT 0 to address
Emit Transfer(TMP_152,owner,newTokenId)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
16->9;
}
// Function: 133.sol-ManagerToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorToApprovals[_owner][_operator]

IRs:
REF_13(mapping(address => bool)) -> operatorToApprovals[_owner]
REF_14(bool) -> REF_13[_operator]
RETURN REF_14"];
}
// Function: 133.sol-ManagerToken-isValidToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_tokenId >= 1 && _tokenId <= managerArray.length,TokenId out of range)

IRs:
TMP_171(bool) = _tokenId >= 1
REF_72 -> LENGTH managerArray
TMP_172(bool) = _tokenId <= REF_72
TMP_173(bool) = TMP_171 && TMP_172
TMP_174(None) = SOLIDITY_CALL require(bool,string)(TMP_173,TokenId out of range)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(tokenIdToOwner[_tokenId] != address(0),Token have no owner)

IRs:
REF_73(address) -> tokenIdToOwner[_tokenId]
TMP_175 = CONVERT 0 to address
TMP_176(bool) = REF_73 != TMP_175
TMP_177(None) = SOLIDITY_CALL require(bool,string)(TMP_176,Token have no owner)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 133.sol-ManagerToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Token Tycoon Managers

IRs:
RETURN Token Tycoon Managers"];
}
// Function: 133.sol-ManagerToken-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == addrAdmin)

IRs:
TMP_166(bool) = msg.sender == addrAdmin
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 133.sol-ManagerToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenIdToOwner[_tokenId]

IRs:
REF_4(address) -> tokenIdToOwner[_tokenId]
RETURN REF_4"];
2[label="Node Type: RETURN 2

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 133.sol-ManagerToken-safeGiveByContract(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeContracts[msg.sender])

IRs:
REF_45(bool) -> safeContracts[msg.sender]
TMP_112(None) = SOLIDITY_CALL require(bool)(REF_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokenIdToOwner[_tokenId] == address(this))

IRs:
REF_46(address) -> tokenIdToOwner[_tokenId]
TMP_113 = CONVERT this to address
TMP_114(bool) = REF_46 == TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_116 = CONVERT 0 to address
TMP_117(bool) = _to != TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(address(this),_to,_tokenId)

IRs:
TMP_119 = CONVERT this to address
INTERNAL_CALL, ManagerToken._transfer(address,address,uint256)(TMP_119,_to,_tokenId)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
5->1;
}
// Function: 133.sol-ManagerToken-safeTransferByContract(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeContracts[msg.sender])

IRs:
REF_47(bool) -> safeContracts[msg.sender]
TMP_122(None) = SOLIDITY_CALL require(bool)(REF_47)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_tokenId >= 1 && _tokenId <= managerArray.length)

IRs:
TMP_123(bool) = _tokenId >= 1
REF_48 -> LENGTH managerArray
TMP_124(bool) = _tokenId <= REF_48
TMP_125(bool) = TMP_123 && TMP_124
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
owner = tokenIdToOwner[_tokenId]

IRs:
REF_49(address) -> tokenIdToOwner[_tokenId]
owner(address) := REF_49(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_127 = CONVERT 0 to address
TMP_128(bool) = owner != TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_130 = CONVERT 0 to address
TMP_131(bool) = _to != TMP_130
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(owner != _to)

IRs:
TMP_133(bool) = owner != _to
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_transfer(owner,_to,_tokenId)

IRs:
INTERNAL_CALL, ManagerToken._transfer(address,address,uint256)(owner,_to,_tokenId)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
8->1;
}
// Function: 133.sol-ManagerToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ManagerToken._safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
2->1;
}
// Function: 133.sol-ManagerToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_safeTransferFrom(_from,_to,_tokenId,data)

IRs:
INTERNAL_CALL, ManagerToken._safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
2->1;
}
// Function: 133.sol-ManagerToken-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _newAdmin != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(addrAdmin,_newAdmin)

IRs:
Emit AdminTransferred(addrAdmin,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addrAdmin = _newAdmin

IRs:
addrAdmin(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
4->1;
}
// Function: 133.sol-ManagerToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operatorToApprovals[msg.sender][_operator] = _approved

IRs:
REF_10(mapping(address => bool)) -> operatorToApprovals[msg.sender]
REF_11(bool) -> REF_10[_operator]
REF_11(bool) (->operatorToApprovals) := _approved(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ApprovalForAll(msg.sender,_operator,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_operator,_approved)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
3->1;
}
// Function: 133.sol-ManagerToken-setMetadataProvider(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
providerContract = ERC721MetadataProvider(_provider)

IRs:
TMP_107 = CONVERT _provider to ERC721MetadataProvider
providerContract(ERC721MetadataProvider) := TMP_107(ERC721MetadataProvider)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 133.sol-ManagerToken-setSafeContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeContracts[_actionAddr] = _useful

IRs:
REF_42(bool) -> safeContracts[_actionAddr]
REF_42(bool) (->safeContracts) := _useful(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 133.sol-ManagerToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isPaused = false

IRs:
isPaused(bool) := False(bool)"];
}
// Function: 133.sol-ManagerToken-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff)

IRs:
TMP_23(bool) = _interfaceId == 33540519
TMP_24(bool) = _interfaceId == 2158778573
TMP_25(bool) = TMP_23 || TMP_24
TMP_26(bool) = _interfaceId == 2169737578
TMP_27(bool) = TMP_25 || TMP_26
TMP_28(bool) = _interfaceId != 4294967295
TMP_29(bool) = TMP_27 && TMP_28
RETURN TMP_29"];
}
// Function: 133.sol-ManagerToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TTM

IRs:
RETURN TTM"];
}
// Function: 133.sol-ManagerToken-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < managerArray.length)

IRs:
REF_16 -> LENGTH managerArray
TMP_65(bool) = _index < REF_16
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_index

IRs:
RETURN _index"];
}
// Function: 133.sol-ManagerToken-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_67 = CONVERT 0 to address
TMP_68(bool) = _owner != TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_index < ownerToManagerArray[_owner].length)

IRs:
REF_17(uint256[]) -> ownerToManagerArray[_owner]
REF_18 -> LENGTH REF_17
TMP_70(bool) = _index < REF_18
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
ownerToManagerArray[_owner][_index]

IRs:
REF_19(uint256[]) -> ownerToManagerArray[_owner]
REF_20(uint256) -> REF_19[_index]
RETURN REF_20"];
}
// Function: 133.sol-ManagerToken-tokenURI(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
address(providerContract) == address(0)

IRs:
TMP_30 = CONVERT providerContract to address
TMP_31 = CONVERT 0 to address
TMP_32(bool) = TMP_30 == TMP_31
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:


IRs:
RETURN "];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
providerContract.tokenURI(_tokenId)

IRs:
TMP_33(string) = HIGH_LEVEL_CALL, dest:providerContract(ERC721MetadataProvider), function:tokenURI, arguments:['_tokenId']  
RETURN TMP_33"];
}
// Function: 133.sol-ManagerToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
managerArray.length - 1

IRs:
REF_15 -> LENGTH managerArray
TMP_64(uint256) = REF_15 - 1
RETURN TMP_64"];
}
// Function: 133.sol-ManagerToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenIdToOwner[_tokenId]

IRs:
REF_5(address) -> tokenIdToOwner[_tokenId]
owner(address) := REF_5(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(owner != address(0),Owner is 0)

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = owner != TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool,string)(TMP_42,Owner is 0)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_to != address(0),Transfer target address is 0)

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(bool) = _to != TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,Transfer target address is 0)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(owner == _from,Transfer to self)

IRs:
TMP_47(bool) = owner == _from
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,Transfer to self)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ManagerToken._transfer(address,address,uint256)(_from,_to,_tokenId)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessAdmin.whenNotPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isValidToken(_tokenId)

IRs:
MODIFIER_CALL, ManagerToken.isValidToken(uint256)(_tokenId)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ManagerToken.canTransfer(uint256)(_tokenId)"];
8->1;
}
// Function: 133.sol-ManagerToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isPaused)

IRs:
TMP_168 = UnaryType.BANG isPaused 
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 133.sol-ManagerToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isPaused)

IRs:
TMP_170(None) = SOLIDITY_CALL require(bool)(isPaused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 133.sol-TokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
