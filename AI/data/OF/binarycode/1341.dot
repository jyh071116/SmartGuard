digraph G {
// Function: 1341.sol-ZEROxBTCHate-IHate0xBTC(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
hash = uint256(keccak256()(bytes(reason)))

IRs:
TMP_0 = CONVERT reason to bytes
TMP_1(bytes32) = SOLIDITY_CALL keccak256()(TMP_0)
TMP_2 = CONVERT TMP_1 to uint256
hash(uint256) := TMP_2(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! ZEROxBTCHaters[hash]

IRs:
REF_0(bool) -> ZEROxBTCHaters[hash]
TMP_3 = UnaryType.BANG REF_0 
CONDITION TMP_3"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ZEROxBTCHaters[hash] = true

IRs:
REF_1(bool) -> ZEROxBTCHaters[hash]
REF_1(bool) (->ZEROxBTCHaters) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[msg.sender] += (10 ** 18)

IRs:
REF_2(uint256) -> balanceOf[msg.sender]
TMP_4(uint256) = 10 ** 18
REF_2(-> balanceOf) = REF_2 + TMP_4"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 100

IRs:
TMP_5(bool) = i < 100
CONDITION TMP_5"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(0xB6eD7644C69416d67B522e20bC294A9a9B405B31,msg.sender,10 ** 18)

IRs:
TMP_6(uint256) = 10 ** 18
Emit Transfer(1044331899554887515734376529790704924017018559281,msg.sender,TMP_6)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_8(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
New0xBTCHate(msg.sender,reason)

IRs:
Emit New0xBTCHate(msg.sender,reason)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
totalSupply += (10 ** 18)

IRs:
TMP_10(uint256) = 10 ** 18
totalSupply(uint256) = totalSupply + TMP_10"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1341.sol-ZEROxBTCHate-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value == 0 || allowance[msg.sender][_spender] == 0)

IRs:
TMP_27(bool) = _value == 0
REF_17(mapping(address => uint256)) -> allowance[msg.sender]
REF_18(uint256) -> REF_17[_spender]
TMP_28(bool) = REF_18 == 0
TMP_29(bool) = TMP_27 || TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_19(mapping(address => uint256)) -> allowance[msg.sender]
REF_20(uint256) -> REF_19[_spender]
REF_20(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
validAddress()

IRs:
MODIFIER_CALL, ZEROxBTCHate.validAddress()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1341.sol-ZEROxBTCHate-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = 0xBTCHate

IRs:
name(string) := 0xBTCHate(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = 0xBTCHate

IRs:
symbol(string) := 0xBTCHate(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
}
// Function: 1341.sol-ZEROxBTCHate-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_3(uint256) -> balanceOf[msg.sender]
TMP_11(bool) = REF_3 >= _value
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_4(uint256) -> balanceOf[_to]
TMP_13(uint256) = REF_4 + _value
REF_5(uint256) -> balanceOf[_to]
TMP_14(bool) = TMP_13 >= REF_5
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_6(uint256) -> balanceOf[msg.sender]
REF_6(-> balanceOf) = REF_6 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_7(uint256) -> balanceOf[_to]
REF_7(-> balanceOf) = REF_7 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
validAddress()

IRs:
MODIFIER_CALL, ZEROxBTCHate.validAddress()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1341.sol-ZEROxBTCHate-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_8(uint256) -> balanceOf[_from]
TMP_18(bool) = REF_8 >= _value
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_9(uint256) -> balanceOf[_to]
TMP_20(uint256) = REF_9 + _value
REF_10(uint256) -> balanceOf[_to]
TMP_21(bool) = TMP_20 >= REF_10
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(allowance[_from][msg.sender] >= _value)

IRs:
REF_11(mapping(address => uint256)) -> allowance[_from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_23(bool) = REF_12 >= _value
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_13(uint256) -> balanceOf[_to]
REF_13(-> balanceOf) = REF_13 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_14(uint256) -> balanceOf[_from]
REF_14(-> balanceOf) = REF_14 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_15(mapping(address => uint256)) -> allowance[_from]
REF_16(uint256) -> REF_15[msg.sender]
REF_16(-> allowance) = REF_16 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validAddress()

IRs:
MODIFIER_CALL, ZEROxBTCHate.validAddress()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1341.sol-ZEROxBTCHate-validAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(0x0 != msg.sender)

IRs:
TMP_33(bool) = 0 != msg.sender
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
