digraph G {
// Function: 1357.sol-BitBoscoin-BitBoscoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initialSupply = 30000000000000000000000000

IRs:
initialSupply(uint256) := 30000000000000000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = BitBoscoin

IRs:
name(string) := BitBoscoin(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = BOSS

IRs:
symbol(string) := BOSS(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[msg.sender] = initialSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := initialSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
}
// Function: 1357.sol-BitBoscoin-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 1357.sol-BitBoscoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
standard = BOSS Token

IRs:
standard(string) := BOSS Token(string)"];
}
// Function: 1357.sol-BitBoscoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf[msg.sender] < _value

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_0(bool) = REF_1 < _value
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
balanceOf[_to] + _value < balanceOf[_to]

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_1(uint256) = REF_2 + _value
REF_3(uint256) -> balanceOf[_to]
TMP_2(bool) = TMP_1 < REF_3
CONDITION TMP_2"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_4(uint256) -> balanceOf[msg.sender]
REF_4(-> balanceOf) = REF_4 - _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_5(uint256) -> balanceOf[_to]
REF_5(-> balanceOf) = REF_5 + _value"];
}
}
