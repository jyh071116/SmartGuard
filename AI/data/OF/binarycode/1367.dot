digraph G {
// Function: 1367.sol-BondkickToken-BondkickToken(string,string,uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minter = msg.sender

IRs:
minter(address) := msg.sender(address)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_initialMint > 0

IRs:
TMP_0(bool) = _initialMint > 0
CONDITION TMP_0"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalSupply += _initialMint

IRs:
totalSupply(uint256) = totalSupply + _initialMint"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balanceOf[msg.sender] += _initialMint

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(-> balanceOf) = REF_0 + _initialMint"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(address(0),msg.sender,_initialMint)

IRs:
TMP_1 = CONVERT 0 to address
Emit Transfer(TMP_1,msg.sender,_initialMint)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1367.sol-BondkickToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_13(uint256) -> balanceOf[_from]
REF_13(-> balanceOf) = REF_13 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_14(uint256) -> balanceOf[_to]
REF_14(-> balanceOf) = REF_14 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 1367.sol-BondkickToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = _spender != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_7(mapping(address => uint256)) -> allowance[msg.sender]
REF_8(uint256) -> REF_7[_spender]
REF_8(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-BondkickToken-changeMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newMinter != address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = _newMinter != TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minter = _newMinter

IRs:
minter(address) := _newMinter(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BondkickToken.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-BondkickToken-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = _newOwner != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BondkickToken.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-BondkickToken-mint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && (totalSupply + _value) >= totalSupply)

IRs:
TMP_21(bool) = _value > 0
TMP_22(uint256) = totalSupply + _value
TMP_23(bool) = TMP_22 >= totalSupply
TMP_24(bool) = TMP_21 && TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply += _value

IRs:
totalSupply(uint256) = totalSupply + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] += _value

IRs:
REF_9(uint256) -> balanceOf[msg.sender]
REF_9(-> balanceOf) = REF_9 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),msg.sender,_value)

IRs:
TMP_26 = CONVERT 0 to address
Emit Transfer(TMP_26,msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notPaused()

IRs:
MODIFIER_CALL, BondkickToken.notPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, BondkickToken.onlyMinter()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-BondkickToken-mintTo(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && (totalSupply + _value) >= totalSupply)

IRs:
TMP_30(bool) = _value > 0
TMP_31(uint256) = totalSupply + _value
TMP_32(bool) = TMP_31 >= totalSupply
TMP_33(bool) = TMP_30 && TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply += _value

IRs:
totalSupply(uint256) = totalSupply + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_10(uint256) -> balanceOf[_to]
REF_10(-> balanceOf) = REF_10 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_value)

IRs:
TMP_35 = CONVERT 0 to address
Emit Transfer(TMP_35,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notPaused()

IRs:
MODIFIER_CALL, BondkickToken.notPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, BondkickToken.onlyMinter()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-BondkickToken-notPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_60 = UnaryType.BANG paused 
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1367.sol-BondkickToken-onlyMinter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == minter)

IRs:
TMP_58(bool) = msg.sender == minter
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1367.sol-BondkickToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_56(bool) = msg.sender == owner
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1367.sol-BondkickToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_3 = CONVERT 0 to address
TMP_4(bool) = _to != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_6(bool) = REF_1 >= _value
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BondkickToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-BondkickToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_9 = CONVERT 0 to address
TMP_10(bool) = _to != TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_2(uint256) -> balanceOf[_from]
TMP_12(bool) = REF_2 >= _value
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(allowance[_from][msg.sender] >= _value)

IRs:
REF_3(mapping(address => uint256)) -> allowance[_from]
REF_4(uint256) -> REF_3[msg.sender]
TMP_14(bool) = REF_4 >= _value
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_5(mapping(address => uint256)) -> allowance[_from]
REF_6(uint256) -> REF_5[msg.sender]
REF_6(-> allowance) = REF_6 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BondkickToken._transfer(address,address,uint256)(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-BondkickToken-unmint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && balanceOf[msg.sender] >= _value)

IRs:
TMP_39(bool) = _value > 0
REF_11(uint256) -> balanceOf[msg.sender]
TMP_40(bool) = REF_11 >= _value
TMP_41(bool) = TMP_39 && TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_12(uint256) -> balanceOf[msg.sender]
REF_12(-> balanceOf) = REF_12 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,address(0),_value)

IRs:
TMP_43 = CONVERT 0 to address
Emit Transfer(msg.sender,TMP_43,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notPaused()

IRs:
MODIFIER_CALL, BondkickToken.notPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, BondkickToken.onlyMinter()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1367.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1367.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1367.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
}
