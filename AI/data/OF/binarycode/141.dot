digraph G {
// Function: 141.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 141.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 141.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 141.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 141.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 141.sol-Ooredoo-Ooredoo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = 1000000000 * 1000000000000000000

IRs:
TMP_22(uint256) = 1000000000 * 1000000000000000000
totalSupply(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(uint256) (->balances) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,msg.sender,totalSupply)

IRs:
Emit Transfer(0,msg.sender,totalSupply)"];
}
// Function: 141.sol-Ooredoo-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 141.sol-Ooredoo-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = _spender != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_25(uint256) -> balances[msg.sender]
TMP_46(bool) = REF_25 >= _value
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
REF_27(uint256) (->allowed) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 141.sol-Ooredoo-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_who]

IRs:
REF_0(uint256) -> balances[_who]
RETURN REF_0"];
}
// Function: 141.sol-Ooredoo-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
candidate = _owner

IRs:
candidate(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 141.sol-Ooredoo-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(candidate != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = candidate != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(candidate == msg.sender)

IRs:
TMP_20(bool) = candidate == msg.sender
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = candidate

IRs:
owner(address) := candidate(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete candidate

IRs:
candidate = delete candidate "];
}
// Function: 141.sol-Ooredoo-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_55(bool) = owner == msg.sender
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 141.sol-Ooredoo-owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 141.sol-Ooredoo-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Ooredoo

IRs:
name(string) := Ooredoo(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ORE

IRs:
symbol(string) := ORE(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 141.sol-Ooredoo-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _to != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_4(uint256) -> balances[msg.sender]
TMP_27(bool) = REF_4 >= _value
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_6(uint256) -> balances[msg.sender]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_6', '_value'] 
REF_5(uint256) (->balances) := TMP_29(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_8(uint256) -> balances[_to]
REF_9(uint256) -> balances[_to]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8(uint256) (->balances) := TMP_30(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 141.sol-Ooredoo-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _to != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_11(uint256) -> balances[_from]
TMP_35(bool) = REF_11 >= _value
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
TMP_36(bool) = REF_13 >= _value
TMP_37(bool) = TMP_35 && TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_17', '_value'] 
REF_15(uint256) (->allowed) := TMP_39(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_40(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_41(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 141.sol-Ooredoo-withdrawTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[this] >= _value)

IRs:
REF_28(uint256) -> balances[this]
TMP_49(bool) = REF_28 >= _value
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[this] = balances[this].sub(_value)

IRs:
REF_29(uint256) -> balances[this]
REF_30(uint256) -> balances[this]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', '_value'] 
REF_29(uint256) (->balances) := TMP_51(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(_value)

IRs:
REF_32(uint256) -> balances[msg.sender]
REF_33(uint256) -> balances[msg.sender]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_52(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(this,msg.sender,_value)

IRs:
Emit Transfer(this,msg.sender,_value)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
5->1;
}
// Function: 141.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_11(uint256) = a + b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_12(bool) = c >= a
TMP_13(bool) = c >= b
TMP_14(bool) = TMP_12 && TMP_13
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 141.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(a >= b)

IRs:
TMP_8(bool) = a >= b
TMP_9(None) = SOLIDITY_CALL assert(bool)(TMP_8)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_10(uint256) = a - b
RETURN TMP_10"];
}
// Function: 141.sol-owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
candidate = _owner

IRs:
candidate(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 141.sol-owned-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(candidate != address(0))

IRs:
TMP_1 = CONVERT 0 to address
TMP_2(bool) = candidate != TMP_1
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(candidate == msg.sender)

IRs:
TMP_4(bool) = candidate == msg.sender
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = candidate

IRs:
owner(address) := candidate(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete candidate

IRs:
candidate = delete candidate "];
}
// Function: 141.sol-owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_6(bool) = owner == msg.sender
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 141.sol-owned-owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
}
