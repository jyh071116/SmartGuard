digraph G {
// Function: 1440.sol-DeepToken-DeepToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = 100 * (10 ** 8) * (10 ** 18)

IRs:
TMP_46(uint256) = 10 ** 8
TMP_47(uint256) = 100 * TMP_46
TMP_48(uint256) = 10 ** 18
TMP_49(uint256) = TMP_47 * TMP_48
totalSupply(uint256) := TMP_49(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = 100 * (10 ** 8) * (10 ** 18)

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
TMP_50(uint256) = 10 ** 8
TMP_51(uint256) = 100 * TMP_50
TMP_52(uint256) = 10 ** 18
TMP_53(uint256) = TMP_51 * TMP_52
REF_0(uint256) (->balanceOf) := TMP_53(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = DeepToken

IRs:
name(string) := DeepToken(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = DPT

IRs:
symbol(string) := DPT(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1440.sol-DeepToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_value <= 0

IRs:
TMP_62(bool) = _value <= 0
CONDITION TMP_62"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_10(mapping(address => uint256)) -> allowance[msg.sender]
REF_11(uint256) -> REF_10[_spender]
REF_11(uint256) (->allowance) := _value(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1440.sol-DeepToken-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_45 = UnaryType.BANG assertion 
CONDITION TMP_45"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 1440.sol-DeepToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf[msg.sender] < _value

IRs:
REF_28(uint256) -> balanceOf[msg.sender]
TMP_73(bool) = REF_28 < _value
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_74(bool) = _value <= 0
CONDITION TMP_74"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_29(uint256) -> balanceOf[msg.sender]
REF_31(uint256) -> balanceOf[msg.sender]
TMP_75(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_31,_value)
REF_29(uint256) (->balanceOf) := TMP_75(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply = SafeMath.safeSub(totalSupply,_value)

IRs:
TMP_76(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,_value)
totalSupply(uint256) := TMP_76(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1440.sol-DeepToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1440.sol-DeepToken-freeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf[msg.sender] < _value

IRs:
REF_33(uint256) -> balanceOf[msg.sender]
TMP_78(bool) = REF_33 < _value
CONDITION TMP_78"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_79(bool) = _value <= 0
CONDITION TMP_79"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_34(uint256) -> balanceOf[msg.sender]
REF_36(uint256) -> balanceOf[msg.sender]
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_36,_value)
REF_34(uint256) (->balanceOf) := TMP_80(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender],_value)

IRs:
REF_37(uint256) -> freezeOf[msg.sender]
REF_39(uint256) -> freezeOf[msg.sender]
TMP_81(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_39,_value)
REF_37(uint256) (->freezeOf) := TMP_81(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freeze(msg.sender,_value)

IRs:
Emit Freeze(msg.sender,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1440.sol-DeepToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_40(uint256) = a + b
c(uint256) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_41(bool) = c >= a
TMP_42(bool) = c >= b
TMP_43(bool) = TMP_41 && TMP_42
INTERNAL_CALL, SafeMath.assert(bool)(TMP_43)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1440.sol-DeepToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b > 0)

IRs:
TMP_29(bool) = b > 0
INTERNAL_CALL, SafeMath.assert(bool)(TMP_29)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_31(uint256) = a / b
c(uint256) := TMP_31(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(a == b * c + a % b)

IRs:
TMP_32(uint256) = b * c
TMP_33(uint256) = a % b
TMP_34(uint256) = TMP_32 + TMP_33
TMP_35(bool) = a == TMP_34
INTERNAL_CALL, SafeMath.assert(bool)(TMP_35)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1440.sol-DeepToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_23(uint256) = a * b
c(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_24(bool) = a == 0
TMP_25(uint256) = c / a
TMP_26(bool) = TMP_25 == b
TMP_27(bool) = TMP_24 || TMP_26
INTERNAL_CALL, SafeMath.assert(bool)(TMP_27)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1440.sol-DeepToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_37(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_37)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_39(uint256) = a - b
RETURN TMP_39"];
}
// Function: 1440.sol-DeepToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_to == 0x0

IRs:
TMP_54(bool) = _to == 0
CONDITION TMP_54"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_55(bool) = _value <= 0
CONDITION TMP_55"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balanceOf[msg.sender] < _value

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_56(bool) = REF_1 < _value
CONDITION TMP_56"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
balanceOf[_to] + _value < balanceOf[_to]

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_57(uint256) = REF_2 + _value
REF_3(uint256) -> balanceOf[_to]
TMP_58(bool) = TMP_57 < REF_3
CONDITION TMP_58"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_4(uint256) -> balanceOf[msg.sender]
REF_6(uint256) -> balanceOf[msg.sender]
TMP_59(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_6,_value)
REF_4(uint256) (->balanceOf) := TMP_59(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value)

IRs:
REF_7(uint256) -> balanceOf[_to]
REF_9(uint256) -> balanceOf[_to]
TMP_60(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_9,_value)
REF_7(uint256) (->balanceOf) := TMP_60(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
}
// Function: 1440.sol-DeepToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_to == 0x0

IRs:
TMP_63(bool) = _to == 0
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_64(bool) = _value <= 0
CONDITION TMP_64"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balanceOf[_from] < _value

IRs:
REF_12(uint256) -> balanceOf[_from]
TMP_65(bool) = REF_12 < _value
CONDITION TMP_65"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
balanceOf[_to] + _value < balanceOf[_to]

IRs:
REF_13(uint256) -> balanceOf[_to]
TMP_66(uint256) = REF_13 + _value
REF_14(uint256) -> balanceOf[_to]
TMP_67(bool) = TMP_66 < REF_14
CONDITION TMP_67"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_value > allowance[_from][msg.sender]

IRs:
REF_15(mapping(address => uint256)) -> allowance[_from]
REF_16(uint256) -> REF_15[msg.sender]
TMP_68(bool) = _value > REF_16
CONDITION TMP_68"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balanceOf[_from] = SafeMath.safeSub(balanceOf[_from],_value)

IRs:
REF_17(uint256) -> balanceOf[_from]
REF_19(uint256) -> balanceOf[_from]
TMP_69(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_19,_value)
REF_17(uint256) (->balanceOf) := TMP_69(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value)

IRs:
REF_20(uint256) -> balanceOf[_to]
REF_22(uint256) -> balanceOf[_to]
TMP_70(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_22,_value)
REF_20(uint256) (->balanceOf) := TMP_70(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender],_value)

IRs:
REF_23(mapping(address => uint256)) -> allowance[_from]
REF_24(uint256) -> REF_23[msg.sender]
REF_26(mapping(address => uint256)) -> allowance[_from]
REF_27(uint256) -> REF_26[msg.sender]
TMP_71(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_27,_value)
REF_24(uint256) (->allowance) := TMP_71(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
true

IRs:
RETURN True"];
21[label="Node Type: RETURN 21

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1440.sol-DeepToken-unfreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
freezeOf[msg.sender] < _value

IRs:
REF_40(uint256) -> freezeOf[msg.sender]
TMP_83(bool) = REF_40 < _value
CONDITION TMP_83"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_84(bool) = _value <= 0
CONDITION TMP_84"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender],_value)

IRs:
REF_41(uint256) -> freezeOf[msg.sender]
REF_43(uint256) -> freezeOf[msg.sender]
TMP_85(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_43,_value)
REF_41(uint256) (->freezeOf) := TMP_85(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],_value)

IRs:
REF_44(uint256) -> balanceOf[msg.sender]
REF_46(uint256) -> balanceOf[msg.sender]
TMP_86(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_46,_value)
REF_44(uint256) (->balanceOf) := TMP_86(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Unfreeze(msg.sender,_value)

IRs:
Emit Unfreeze(msg.sender,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1440.sol-DeepToken-withdrawEther(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_88(bool) = msg.sender != owner
CONDITION TMP_88"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner.transfer(amount)

IRs:
Transfer dest:owner value:amount"];
}
// Function: 1440.sol-SafeMath-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_22 = UnaryType.BANG assertion 
CONDITION TMP_22"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 1440.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
INTERNAL_CALL, SafeMath.assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1440.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b > 0)

IRs:
TMP_6(bool) = b > 0
INTERNAL_CALL, SafeMath.assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_8(uint256) = a / b
c(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(a == b * c + a % b)

IRs:
TMP_9(uint256) = b * c
TMP_10(uint256) = a % b
TMP_11(uint256) = TMP_9 + TMP_10
TMP_12(bool) = a == TMP_11
INTERNAL_CALL, SafeMath.assert(bool)(TMP_12)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1440.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
INTERNAL_CALL, SafeMath.assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1440.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_14(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
}
