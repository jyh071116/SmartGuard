digraph G {
// Function: 1495.sol-ERC20-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances[walletAddress][spender]

IRs:
REF_12(mapping(address => uint256)) -> allowances[walletAddress]
REF_13(uint256) -> REF_12[spender]
RETURN REF_13"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1495.sol-ERC20-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((amountInWei == 0) || (allowances[msg.sender][spender] == 0))

IRs:
TMP_39(bool) = amountInWei == 0
REF_28(mapping(address => uint256)) -> allowances[msg.sender]
REF_29(uint256) -> REF_28[spender]
TMP_40(bool) = REF_29 == 0
TMP_41(bool) = TMP_39 || TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowances[msg.sender][spender] = amountInWei

IRs:
REF_30(mapping(address => uint256)) -> allowances[msg.sender]
REF_31(uint256) -> REF_30[spender]
REF_31(uint256) (->allowances) := amountInWei(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,amountInWei)

IRs:
Emit Approval(msg.sender,spender,amountInWei)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1495.sol-ERC20-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[walletAddress]

IRs:
REF_3(uint256) -> balances[walletAddress]
RETURN REF_3"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1495.sol-ERC20-changeAdminUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdminAddress != 0x0)

IRs:
TMP_51(bool) = newAdminAddress != 0
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_AdminUserChange(admin,newAdminAddress)

IRs:
Emit EventOn_AdminUserChange(admin,newAdminAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
admin = newAdminAddress

IRs:
admin(address) := newAdminAddress(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, ERC20.onlyOwner()()"];
4->1;
}
// Function: 1495.sol-ERC20-changeHardCap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newHardCap != 0)

IRs:
TMP_59(bool) = newHardCap != 0
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_HardcapChanged(hardCap,newHardCap)

IRs:
Emit EventOn_HardcapChanged(hardCap,newHardCap)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hardCap = newHardCap

IRs:
hardCap(uint256) := newHardCap(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
4->1;
}
// Function: 1495.sol-ERC20-changeIcoDeadLine(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newIcoDeadline != 0)

IRs:
TMP_55(bool) = newIcoDeadline != 0
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_IcoDeadlineChanged(icoDeadLine,newIcoDeadline)

IRs:
Emit EventOn_IcoDeadlineChanged(icoDeadLine,newIcoDeadline)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
icoDeadLine = newIcoDeadline

IRs:
icoDeadLine(uint256) := newIcoDeadline(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
4->1;
}
// Function: 1495.sol-ERC20-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = owner

IRs:
admin(address) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isIcoPaused = false

IRs:
isIcoPaused(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[owner] = initSupply

IRs:
REF_0(uint256) -> balances[owner]
REF_0(uint256) (->balances) := initSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = initSupply

IRs:
totalSupply(uint256) := initSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
icoSalesSupply = totalSupply

IRs:
icoSalesSupply(uint256) := totalSupply(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
icoSalesSupply = totalSupply.sub(supplyReserveVal)

IRs:
TMP_12(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'supplyReserveVal'] 
icoSalesSupply(uint256) := TMP_12(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
icoReserveSupply = totalSupply.sub(icoSalesSupply)

IRs:
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'icoSalesSupply'] 
icoReserveSupply(uint256) := TMP_13(uint256)"];
}
// Function: 1495.sol-ERC20-destroyRemainingTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner && now > icoDeadLine)

IRs:
TMP_70(bool) = msg.sender == owner
TMP_71(bool) = now > icoDeadLine
TMP_72(bool) = TMP_70 && TMP_71
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
toAddr = 0x0000000000000000000000000000000000000000

IRs:
toAddr(address) := 0(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToBurn = balances[owner]

IRs:
REF_33(uint256) -> balances[owner]
amountToBurn(uint256) := REF_33(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
amountToBurn > icoReserveSupply

IRs:
TMP_74(bool) = amountToBurn > icoReserveSupply
CONDITION TMP_74"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
amountToBurn = amountToBurn.sub(icoReserveSupply)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amountToBurn', 'icoReserveSupply'] 
amountToBurn(uint256) := TMP_75(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[owner] = balances[owner].sub(amountToBurn)

IRs:
REF_35(uint256) -> balances[owner]
REF_36(uint256) -> balances[owner]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_36', 'amountToBurn'] 
REF_35(uint256) (->balances) := TMP_76(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[toAddr] = balances[toAddr].add(amountToBurn)

IRs:
REF_38(uint256) -> balances[toAddr]
REF_39(uint256) -> balances[toAddr]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_39', 'amountToBurn'] 
REF_38(uint256) (->balances) := TMP_77(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,toAddr,amountToBurn)

IRs:
Emit Transfer(msg.sender,toAddr,amountToBurn)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
1

IRs:
RETURN 1"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
icoFinished()

IRs:
MODIFIER_CALL, ERC20.icoFinished()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
icoNotPaused()

IRs:
MODIFIER_CALL, ERC20.icoNotPaused()()"];
13->1;
}
// Function: 1495.sol-ERC20-duringIcoOnlyTheOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > icoDeadLine || msg.sender == owner)

IRs:
TMP_90(bool) = now > icoDeadLine
TMP_91(bool) = msg.sender == owner
TMP_92(bool) = TMP_90 || TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-ERC20-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(true == false)

IRs:
TMP_44(bool) = True == False
TMP_45(None) = SOLIDITY_CALL assert(bool)(TMP_44)"];
}
// Function: 1495.sol-ERC20-icoFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > icoDeadLine)

IRs:
TMP_94(bool) = now > icoDeadLine
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-ERC20-icoNotFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now <= icoDeadLine)

IRs:
TMP_96(bool) = now <= icoDeadLine
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-ERC20-icoNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isIcoPaused == false)

IRs:
TMP_98(bool) = isIcoPaused == False
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-ERC20-icoPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isIcoPaused == true)

IRs:
TMP_100(bool) = isIcoPaused == True
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-ERC20-isHardcapReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(isStoppingIcoOnHardCap && initSupply - balances[owner] > hardCap)

IRs:
REF_32(uint256) -> balances[owner]
TMP_63(uint256) = initSupply - REF_32
TMP_64(bool) = TMP_63 > hardCap
TMP_65(bool) = isStoppingIcoOnHardCap && TMP_64
RETURN TMP_65"];
}
// Function: 1495.sol-ERC20-isPausedICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
(isIcoPaused)
"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1495.sol-ERC20-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_104(bool) = msg.sender == admin
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-ERC20-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_102(bool) = msg.sender == owner
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-ERC20-pauseICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isIcoPaused = true

IRs:
isIcoPaused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_IcoIsNowPaused(1)

IRs:
Emit EventOn_IcoIsNowPaused(1)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
3->1;
}
// Function: 1495.sol-ERC20-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = IOU Loyalty Exchange Token

IRs:
name(string) := IOU Loyalty Exchange Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = IOUX

IRs:
symbol(string) := IOUX(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
initSupply = 800000000 * 10 ** decimals

IRs:
TMP_86(uint256) = 10 ** decimals
TMP_87(uint256) = 800000000 * TMP_86
initSupply(uint256) := TMP_87(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
supplyReserveVal = 600000000 * 10 ** decimals

IRs:
TMP_88(uint256) = 10 ** decimals
TMP_89(uint256) = 600000000 * TMP_88
supplyReserveVal(uint256) := TMP_89(uint256)"];
}
// Function: 1495.sol-ERC20-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
icoSalesSupply = 0

IRs:
icoSalesSupply(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
icoReserveSupply = 0

IRs:
icoReserveSupply(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
softCap = 10000000 * 10 ** decimals

IRs:
TMP_82(uint256) = 10 ** decimals
TMP_83(uint256) = 10000000 * TMP_82
softCap(uint256) := TMP_83(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
hardCap = 500000000 * 10 ** decimals

IRs:
TMP_84(uint256) = 10 ** decimals
TMP_85(uint256) = 500000000 * TMP_84
hardCap(uint256) := TMP_85(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
icoDeadLine = 1545177600

IRs:
icoDeadLine(uint256) := 1545177600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
isIcoPaused = false

IRs:
isIcoPaused(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
isStoppingIcoOnHardCap = false

IRs:
isStoppingIcoOnHardCap(bool) := False(bool)"];
}
// Function: 1495.sol-ERC20-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(toAddr != 0x0 && toAddr != msg.sender && amountInWei > 0)

IRs:
TMP_14(bool) = toAddr != 0
TMP_15(bool) = toAddr != msg.sender
TMP_16(bool) = TMP_14 && TMP_15
TMP_17(bool) = amountInWei > 0
TMP_18(bool) = TMP_16 && TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
availableTokens = balances[msg.sender]

IRs:
REF_4(uint256) -> balances[msg.sender]
availableTokens(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
msg.sender == owner && now <= icoDeadLine

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(bool) = now <= icoDeadLine
TMP_22(bool) = TMP_20 && TMP_21
CONDITION TMP_22"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(amountInWei <= availableTokens)

IRs:
TMP_23(bool) = amountInWei <= availableTokens
TMP_24(None) = SOLIDITY_CALL assert(bool)(TMP_23)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
balanceAfterTransfer = availableTokens.sub(amountInWei)

IRs:
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['availableTokens', 'amountInWei'] 
balanceAfterTransfer(uint256) := TMP_25(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(balanceAfterTransfer >= icoReserveSupply)

IRs:
TMP_26(bool) = balanceAfterTransfer >= icoReserveSupply
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(amountInWei)

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_7(uint256) -> balances[msg.sender]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_7', 'amountInWei'] 
REF_6(uint256) (->balances) := TMP_28(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[toAddr] = balances[toAddr].add(amountInWei)

IRs:
REF_9(uint256) -> balances[toAddr]
REF_10(uint256) -> balances[toAddr]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_10', 'amountInWei'] 
REF_9(uint256) (->balances) := TMP_29(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,toAddr,amountInWei)

IRs:
Emit Transfer(msg.sender,toAddr,amountInWei)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
duringIcoOnlyTheOwner()

IRs:
MODIFIER_CALL, ERC20.duringIcoOnlyTheOwner()()"];
12->1;
}
// Function: 1495.sol-ERC20-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
amountInWei <= 0

IRs:
TMP_32(bool) = amountInWei <= 0
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
allowances[fromAddr][msg.sender] < amountInWei

IRs:
REF_14(mapping(address => uint256)) -> allowances[fromAddr]
REF_15(uint256) -> REF_14[msg.sender]
TMP_33(bool) = REF_15 < amountInWei
CONDITION TMP_33"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balances[fromAddr] < amountInWei

IRs:
REF_16(uint256) -> balances[fromAddr]
TMP_34(bool) = REF_16 < amountInWei
CONDITION TMP_34"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[fromAddr] = balances[fromAddr].sub(amountInWei)

IRs:
REF_17(uint256) -> balances[fromAddr]
REF_18(uint256) -> balances[fromAddr]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', 'amountInWei'] 
REF_17(uint256) (->balances) := TMP_35(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[toAddr] = balances[toAddr].add(amountInWei)

IRs:
REF_20(uint256) -> balances[toAddr]
REF_21(uint256) -> balances[toAddr]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', 'amountInWei'] 
REF_20(uint256) (->balances) := TMP_36(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei)

IRs:
REF_23(mapping(address => uint256)) -> allowances[fromAddr]
REF_24(uint256) -> REF_23[msg.sender]
REF_25(mapping(address => uint256)) -> allowances[fromAddr]
REF_26(uint256) -> REF_25[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_26', 'amountInWei'] 
REF_24(uint256) (->allowances) := TMP_37(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(fromAddr,toAddr,amountInWei)

IRs:
Emit Transfer(fromAddr,toAddr,amountInWei)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1495.sol-ERC20-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = newOwner != TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_OwnershipTransfered(owner,newOwner)

IRs:
Emit EventOn_OwnershipTransfered(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, ERC20.onlyOwner()()"];
4->1;
}
// Function: 1495.sol-ERC20-unpauseICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isIcoPaused = false

IRs:
isIcoPaused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_IcoHasRestarted(0)

IRs:
Emit EventOn_IcoHasRestarted(0)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
3->1;
}
// Function: 1495.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1495.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1495.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1495.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1495.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances[walletAddress][spender]

IRs:
REF_53(mapping(address => uint256)) -> allowances[walletAddress]
REF_54(uint256) -> REF_53[spender]
RETURN REF_54"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1495.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((amountInWei == 0) || (allowances[msg.sender][spender] == 0))

IRs:
TMP_133(bool) = amountInWei == 0
REF_69(mapping(address => uint256)) -> allowances[msg.sender]
REF_70(uint256) -> REF_69[spender]
TMP_134(bool) = REF_70 == 0
TMP_135(bool) = TMP_133 || TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowances[msg.sender][spender] = amountInWei

IRs:
REF_71(mapping(address => uint256)) -> allowances[msg.sender]
REF_72(uint256) -> REF_71[spender]
REF_72(uint256) (->allowances) := amountInWei(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,amountInWei)

IRs:
Emit Approval(msg.sender,spender,amountInWei)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1495.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[walletAddress]

IRs:
REF_44(uint256) -> balances[walletAddress]
RETURN REF_44"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1495.sol-Token-changeAdminUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdminAddress != 0x0)

IRs:
TMP_145(bool) = newAdminAddress != 0
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_AdminUserChange(admin,newAdminAddress)

IRs:
Emit EventOn_AdminUserChange(admin,newAdminAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
admin = newAdminAddress

IRs:
admin(address) := newAdminAddress(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, ERC20.onlyOwner()()"];
4->1;
}
// Function: 1495.sol-Token-changeHardCap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newHardCap != 0)

IRs:
TMP_153(bool) = newHardCap != 0
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_HardcapChanged(hardCap,newHardCap)

IRs:
Emit EventOn_HardcapChanged(hardCap,newHardCap)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hardCap = newHardCap

IRs:
hardCap(uint256) := newHardCap(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
4->1;
}
// Function: 1495.sol-Token-changeIcoDeadLine(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newIcoDeadline != 0)

IRs:
TMP_149(bool) = newIcoDeadline != 0
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_IcoDeadlineChanged(icoDeadLine,newIcoDeadline)

IRs:
Emit EventOn_IcoDeadlineChanged(icoDeadLine,newIcoDeadline)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
icoDeadLine = newIcoDeadline

IRs:
icoDeadLine(uint256) := newIcoDeadline(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
4->1;
}
// Function: 1495.sol-Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1495.sol-Token-destroyRemainingTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner && now > icoDeadLine)

IRs:
TMP_164(bool) = msg.sender == owner
TMP_165(bool) = now > icoDeadLine
TMP_166(bool) = TMP_164 && TMP_165
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
toAddr = 0x0000000000000000000000000000000000000000

IRs:
toAddr(address) := 0(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToBurn = balances[owner]

IRs:
REF_74(uint256) -> balances[owner]
amountToBurn(uint256) := REF_74(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
amountToBurn > icoReserveSupply

IRs:
TMP_168(bool) = amountToBurn > icoReserveSupply
CONDITION TMP_168"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
amountToBurn = amountToBurn.sub(icoReserveSupply)

IRs:
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amountToBurn', 'icoReserveSupply'] 
amountToBurn(uint256) := TMP_169(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[owner] = balances[owner].sub(amountToBurn)

IRs:
REF_76(uint256) -> balances[owner]
REF_77(uint256) -> balances[owner]
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_77', 'amountToBurn'] 
REF_76(uint256) (->balances) := TMP_170(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[toAddr] = balances[toAddr].add(amountToBurn)

IRs:
REF_79(uint256) -> balances[toAddr]
REF_80(uint256) -> balances[toAddr]
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_80', 'amountToBurn'] 
REF_79(uint256) (->balances) := TMP_171(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,toAddr,amountToBurn)

IRs:
Emit Transfer(msg.sender,toAddr,amountToBurn)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
1

IRs:
RETURN 1"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
icoFinished()

IRs:
MODIFIER_CALL, ERC20.icoFinished()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
icoNotPaused()

IRs:
MODIFIER_CALL, ERC20.icoNotPaused()()"];
13->1;
}
// Function: 1495.sol-Token-duringIcoOnlyTheOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > icoDeadLine || msg.sender == owner)

IRs:
TMP_184(bool) = now > icoDeadLine
TMP_185(bool) = msg.sender == owner
TMP_186(bool) = TMP_184 || TMP_185
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-Token-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(true == false)

IRs:
TMP_138(bool) = True == False
TMP_139(None) = SOLIDITY_CALL assert(bool)(TMP_138)"];
}
// Function: 1495.sol-Token-icoFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > icoDeadLine)

IRs:
TMP_188(bool) = now > icoDeadLine
TMP_189(None) = SOLIDITY_CALL require(bool)(TMP_188)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-Token-icoNotFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now <= icoDeadLine)

IRs:
TMP_190(bool) = now <= icoDeadLine
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-Token-icoNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isIcoPaused == false)

IRs:
TMP_192(bool) = isIcoPaused == False
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-Token-icoPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isIcoPaused == true)

IRs:
TMP_194(bool) = isIcoPaused == True
TMP_195(None) = SOLIDITY_CALL require(bool)(TMP_194)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-Token-isHardcapReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(isStoppingIcoOnHardCap && initSupply - balances[owner] > hardCap)

IRs:
REF_73(uint256) -> balances[owner]
TMP_157(uint256) = initSupply - REF_73
TMP_158(bool) = TMP_157 > hardCap
TMP_159(bool) = isStoppingIcoOnHardCap && TMP_158
RETURN TMP_159"];
}
// Function: 1495.sol-Token-isPausedICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
(isIcoPaused)
"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1495.sol-Token-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_198(bool) = msg.sender == admin
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_196(bool) = msg.sender == owner
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1495.sol-Token-pauseICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isIcoPaused = true

IRs:
isIcoPaused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_IcoIsNowPaused(1)

IRs:
Emit EventOn_IcoIsNowPaused(1)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
3->1;
}
// Function: 1495.sol-Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = IOU Loyalty Exchange Token

IRs:
name(string) := IOU Loyalty Exchange Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = IOUX

IRs:
symbol(string) := IOUX(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
initSupply = 800000000 * 10 ** decimals

IRs:
TMP_180(uint256) = 10 ** decimals
TMP_181(uint256) = 800000000 * TMP_180
initSupply(uint256) := TMP_181(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
supplyReserveVal = 600000000 * 10 ** decimals

IRs:
TMP_182(uint256) = 10 ** decimals
TMP_183(uint256) = 600000000 * TMP_182
supplyReserveVal(uint256) := TMP_183(uint256)"];
}
// Function: 1495.sol-Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
icoSalesSupply = 0

IRs:
icoSalesSupply(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
icoReserveSupply = 0

IRs:
icoReserveSupply(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
softCap = 10000000 * 10 ** decimals

IRs:
TMP_176(uint256) = 10 ** decimals
TMP_177(uint256) = 10000000 * TMP_176
softCap(uint256) := TMP_177(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
hardCap = 500000000 * 10 ** decimals

IRs:
TMP_178(uint256) = 10 ** decimals
TMP_179(uint256) = 500000000 * TMP_178
hardCap(uint256) := TMP_179(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
icoDeadLine = 1545177600

IRs:
icoDeadLine(uint256) := 1545177600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
isIcoPaused = false

IRs:
isIcoPaused(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
isStoppingIcoOnHardCap = false

IRs:
isStoppingIcoOnHardCap(bool) := False(bool)"];
}
// Function: 1495.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(toAddr != 0x0 && toAddr != msg.sender && amountInWei > 0)

IRs:
TMP_108(bool) = toAddr != 0
TMP_109(bool) = toAddr != msg.sender
TMP_110(bool) = TMP_108 && TMP_109
TMP_111(bool) = amountInWei > 0
TMP_112(bool) = TMP_110 && TMP_111
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
availableTokens = balances[msg.sender]

IRs:
REF_45(uint256) -> balances[msg.sender]
availableTokens(uint256) := REF_45(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
msg.sender == owner && now <= icoDeadLine

IRs:
TMP_114(bool) = msg.sender == owner
TMP_115(bool) = now <= icoDeadLine
TMP_116(bool) = TMP_114 && TMP_115
CONDITION TMP_116"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(amountInWei <= availableTokens)

IRs:
TMP_117(bool) = amountInWei <= availableTokens
TMP_118(None) = SOLIDITY_CALL assert(bool)(TMP_117)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
balanceAfterTransfer = availableTokens.sub(amountInWei)

IRs:
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['availableTokens', 'amountInWei'] 
balanceAfterTransfer(uint256) := TMP_119(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(balanceAfterTransfer >= icoReserveSupply)

IRs:
TMP_120(bool) = balanceAfterTransfer >= icoReserveSupply
TMP_121(None) = SOLIDITY_CALL assert(bool)(TMP_120)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(amountInWei)

IRs:
REF_47(uint256) -> balances[msg.sender]
REF_48(uint256) -> balances[msg.sender]
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_48', 'amountInWei'] 
REF_47(uint256) (->balances) := TMP_122(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[toAddr] = balances[toAddr].add(amountInWei)

IRs:
REF_50(uint256) -> balances[toAddr]
REF_51(uint256) -> balances[toAddr]
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_51', 'amountInWei'] 
REF_50(uint256) (->balances) := TMP_123(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,toAddr,amountInWei)

IRs:
Emit Transfer(msg.sender,toAddr,amountInWei)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
duringIcoOnlyTheOwner()

IRs:
MODIFIER_CALL, ERC20.duringIcoOnlyTheOwner()()"];
12->1;
}
// Function: 1495.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
amountInWei <= 0

IRs:
TMP_126(bool) = amountInWei <= 0
CONDITION TMP_126"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
allowances[fromAddr][msg.sender] < amountInWei

IRs:
REF_55(mapping(address => uint256)) -> allowances[fromAddr]
REF_56(uint256) -> REF_55[msg.sender]
TMP_127(bool) = REF_56 < amountInWei
CONDITION TMP_127"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balances[fromAddr] < amountInWei

IRs:
REF_57(uint256) -> balances[fromAddr]
TMP_128(bool) = REF_57 < amountInWei
CONDITION TMP_128"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[fromAddr] = balances[fromAddr].sub(amountInWei)

IRs:
REF_58(uint256) -> balances[fromAddr]
REF_59(uint256) -> balances[fromAddr]
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', 'amountInWei'] 
REF_58(uint256) (->balances) := TMP_129(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[toAddr] = balances[toAddr].add(amountInWei)

IRs:
REF_61(uint256) -> balances[toAddr]
REF_62(uint256) -> balances[toAddr]
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_62', 'amountInWei'] 
REF_61(uint256) (->balances) := TMP_130(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei)

IRs:
REF_64(mapping(address => uint256)) -> allowances[fromAddr]
REF_65(uint256) -> REF_64[msg.sender]
REF_66(mapping(address => uint256)) -> allowances[fromAddr]
REF_67(uint256) -> REF_66[msg.sender]
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_67', 'amountInWei'] 
REF_65(uint256) (->allowances) := TMP_131(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(fromAddr,toAddr,amountInWei)

IRs:
Emit Transfer(fromAddr,toAddr,amountInWei)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1495.sol-Token-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_140 = CONVERT 0 to address
TMP_141(bool) = newOwner != TMP_140
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_OwnershipTransfered(owner,newOwner)

IRs:
Emit EventOn_OwnershipTransfered(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, ERC20.onlyOwner()()"];
4->1;
}
// Function: 1495.sol-Token-unpauseICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isIcoPaused = false

IRs:
isIcoPaused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EventOn_IcoHasRestarted(0)

IRs:
Emit EventOn_IcoHasRestarted(0)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, ERC20.onlyAdmin()()"];
3->1;
}
}
