digraph G {
// Function: 1505.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 1505.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 1505.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 1505.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 1505.sol-ERC20Interface-burnToken(address,uint256)
digraph{
}
// Function: 1505.sol-ERC20Interface-mintToken(address,uint256)
digraph{
}
// Function: 1505.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 1505.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 1505.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 1505.sol-GetherCoin-GetherCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = GTRC

IRs:
symbol(string) := GTRC(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = GetherCoin

IRs:
name(string) := GetherCoin(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bonusEnds = now + 2592000

IRs:
TMP_42(uint256) = now + 2592000
bonusEnds(uint256) := TMP_42(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
bonusEnds1 = now + 2678400

IRs:
TMP_43(uint256) = now + 2678400
bonusEnds1(uint256) := TMP_43(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bonusEnds2 = now + 2592000

IRs:
TMP_44(uint256) = now + 2592000
bonusEnds2(uint256) := TMP_44(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bonusEnds3 = now + 2678400

IRs:
TMP_45(uint256) = now + 2678400
bonusEnds3(uint256) := TMP_45(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
bonusEnds4 = now + 2592000

IRs:
TMP_46(uint256) = now + 2592000
bonusEnds4(uint256) := TMP_46(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
endDate = now + 15811200

IRs:
TMP_47(uint256) = now + 15811200
endDate(uint256) := TMP_47(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
endCrowdsale = 10080000e18

IRs:
endCrowdsale(uint256) := 10080000000000000000000000(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
startCrowdsale = 0

IRs:
startCrowdsale(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokenOwner = address(0x94fACdEF4C276269d972A801B02882AdE73726Bc)

IRs:
TMP_48 = CONVERT 850523759828888433646276093671228779640770733756 to address
tokenOwner(address) := TMP_48(address)"];
}
// Function: 1505.sol-GetherCoin-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1505.sol-GetherCoin-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_38(bool) = msg.sender == newOwner
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_41 = CONVERT 0 to address
newOwner(address) := TMP_41(address)"];
}
// Function: 1505.sol-GetherCoin-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_15(mapping(address => uint256)) -> allowed[tokenOwner]
REF_16(uint256) -> REF_15[spender]
RETURN REF_16"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1505.sol-GetherCoin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_5(mapping(address => uint256)) -> allowed[msg.sender]
REF_6(uint256) -> REF_5[spender]
REF_6(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1505.sol-GetherCoin-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_17(mapping(address => uint256)) -> allowed[msg.sender]
REF_18(uint256) -> REF_17[spender]
REF_18(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_58 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_58(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1505.sol-GetherCoin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_0(uint256) -> balances[tokenOwner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1505.sol-GetherCoin-burnToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[target] -= tokens

IRs:
REF_23(uint256) -> balances[target]
REF_23(-> balances) = REF_23 - tokens"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = safeSub(totalSupply_,tokens)

IRs:
TMP_84(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply_,tokens)
totalSupply_(uint256) := TMP_84(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(owner,target,tokens)

IRs:
Emit Transfer(owner,target,tokens)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.sender == tokenOwner)

IRs:
TMP_86(bool) = msg.sender == tokenOwner
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 1505.sol-GetherCoin-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= startDate && now <= endDate && totalSupply_ >= startCrowdsale && totalSupply_ < endCrowdsale)

IRs:
TMP_60(bool) = now >= startDate
TMP_61(bool) = now <= endDate
TMP_62(bool) = TMP_60 && TMP_61
TMP_63(bool) = totalSupply_ >= startCrowdsale
TMP_64(bool) = TMP_62 && TMP_63
TMP_65(bool) = totalSupply_ < endCrowdsale
TMP_66(bool) = TMP_64 && TMP_65
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
now <= bonusEnds

IRs:
TMP_68(bool) = now <= bonusEnds
CONDITION TMP_68"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokens = msg.value * 357

IRs:
TMP_69(uint256) = msg.value * 357
tokens(uint256) := TMP_69(uint256)"];
4->18;
5[label="Node Type: IF 5

EXPRESSION:
now <= bonusEnds1

IRs:
TMP_70(bool) = now <= bonusEnds1
CONDITION TMP_70"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokens = msg.value * 335

IRs:
TMP_71(uint256) = msg.value * 335
tokens(uint256) := TMP_71(uint256)"];
6->17;
7[label="Node Type: IF 7

EXPRESSION:
now <= bonusEnds2

IRs:
TMP_72(bool) = now <= bonusEnds2
CONDITION TMP_72"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokens = msg.value * 313

IRs:
TMP_73(uint256) = msg.value * 313
tokens(uint256) := TMP_73(uint256)"];
8->16;
9[label="Node Type: IF 9

EXPRESSION:
now <= bonusEnds3

IRs:
TMP_74(bool) = now <= bonusEnds3
CONDITION TMP_74"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokens = msg.value * 291

IRs:
TMP_75(uint256) = msg.value * 291
tokens(uint256) := TMP_75(uint256)"];
10->15;
11[label="Node Type: IF 11

EXPRESSION:
now <= bonusEnds4

IRs:
TMP_76(bool) = now <= bonusEnds4
CONDITION TMP_76"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokens = msg.value * 269

IRs:
TMP_77(uint256) = msg.value * 269
tokens(uint256) := TMP_77(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tokens = msg.value * 247

IRs:
TMP_78(uint256) = msg.value * 247
tokens(uint256) := TMP_78(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[msg.sender] = safeAdd(balances[msg.sender],tokens)

IRs:
REF_20(uint256) -> balances[msg.sender]
REF_21(uint256) -> balances[msg.sender]
TMP_79(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_21,tokens)
REF_20(uint256) (->balances) := TMP_79(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
totalSupply_ = safeAdd(totalSupply_,tokens)

IRs:
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply_,tokens)
totalSupply_(uint256) := TMP_80(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Transfer(address(0),msg.sender,tokens)

IRs:
TMP_81 = CONVERT 0 to address
Emit Transfer(TMP_81,msg.sender,tokens)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
}
// Function: 1505.sol-GetherCoin-mintToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[target] += tokens

IRs:
REF_24(uint256) -> balances[target]
REF_24(-> balances) = REF_24 + tokens"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = safeAdd(totalSupply_,tokens)

IRs:
TMP_88(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalSupply_,tokens)
totalSupply_(uint256) := TMP_88(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(owner,target,tokens)

IRs:
Emit Transfer(owner,target,tokens)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.sender == tokenOwner)

IRs:
TMP_90(bool) = msg.sender == tokenOwner
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 1505.sol-GetherCoin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_95(bool) = msg.sender == owner
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1505.sol-GetherCoin-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_22(uint256) = a + b
c(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_23(bool) = c >= a
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1505.sol-GetherCoin-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_34(bool) = b > 0
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_36(uint256) = a / b
c(uint256) := TMP_36(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1505.sol-GetherCoin-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_28(uint256) = a * b
c(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_29(bool) = a == 0
TMP_30(uint256) = c / a
TMP_31(bool) = TMP_30 == b
TMP_32(bool) = TMP_29 || TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1505.sol-GetherCoin-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_25(bool) = b <= a
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_27(uint256) = a - b
c(uint256) := TMP_27(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1505.sol-GetherCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
initialSupply = 18000000e18

IRs:
initialSupply(uint256) := 18000000000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
HARD_CAP_T = 10800000

IRs:
HARD_CAP_T(uint256) := 10800000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SOFT_CAP_T = 555555

IRs:
SOFT_CAP_T(uint256) := 555555(uint256)"];
}
// Function: 1505.sol-GetherCoin-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1505.sol-GetherCoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],tokens)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_49(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_2,tokens)
REF_1(uint256) (->balances) := TMP_49(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_3(uint256) -> balances[to]
REF_4(uint256) -> balances[to]
TMP_50(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_4,tokens)
REF_3(uint256) (->balances) := TMP_50(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1505.sol-GetherCoin-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_92 = CONVERT tokenAddress to ERC20Interface
TMP_93(bool) = HIGH_LEVEL_CALL, dest:TMP_92(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_93"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1505.sol-GetherCoin-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = safeSub(balances[from],tokens)

IRs:
REF_7(uint256) -> balances[from]
REF_8(uint256) -> balances[from]
TMP_53(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_8,tokens)
REF_7(uint256) (->balances) := TMP_53(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = safeSub(allowed[from][msg.sender],tokens)

IRs:
REF_9(mapping(address => uint256)) -> allowed[from]
REF_10(uint256) -> REF_9[msg.sender]
REF_11(mapping(address => uint256)) -> allowed[from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_54(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_12,tokens)
REF_10(uint256) (->allowed) := TMP_54(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_13(uint256) -> balances[to]
REF_14(uint256) -> balances[to]
TMP_55(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_14,tokens)
REF_13(uint256) (->balances) := TMP_55(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1505.sol-GetherCoin-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1505.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1505.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_16(bool) = msg.sender == newOwner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_19 = CONVERT 0 to address
newOwner(address) := TMP_19(address)"];
}
// Function: 1505.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1505.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1505.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1505.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1505.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1505.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
