digraph G {
// Function: 1510.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_6(uint256) -> balances[_owner]
RETURN REF_6"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1510.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = msg.sender != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_15(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1', '_value'] 
REF_0(uint256) (->balances) := TMP_15(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_3(uint256) -> balances[_to]
REF_4(uint256) -> balances[_to]
TMP_16(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_4', '_value'] 
REF_3(uint256) (->balances) := TMP_16(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1510.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1510.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1510.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1510.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1510.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1510.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1510.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1510.sol-HiGold-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = _newOwner != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1510.sol-HiGold-accounting(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
inVault[msg.sender][_credit] = inVault[msg.sender][_credit].sub(_value)

IRs:
REF_76(mapping(address => uint256)) -> inVault[msg.sender]
REF_77(uint256) -> REF_76[_credit]
REF_78(mapping(address => uint256)) -> inVault[msg.sender]
REF_79(uint256) -> REF_78[_credit]
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_79', '_value'] 
REF_77(uint256) (->inVault) := TMP_84(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
inVault[msg.sender][_debit] = inVault[msg.sender][_debit].add(_value)

IRs:
REF_81(mapping(address => uint256)) -> inVault[msg.sender]
REF_82(uint256) -> REF_81[_debit]
REF_83(mapping(address => uint256)) -> inVault[msg.sender]
REF_84(uint256) -> REF_83[_debit]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_84', '_value'] 
REF_82(uint256) (->inVault) := TMP_85(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1510.sol-HiGold-allowance(address,address)
digraph{
}
// Function: 1510.sol-HiGold-approve(address,uint256)
digraph{
}
// Function: 1510.sol-HiGold-balanceOf(address)
digraph{
}
// Function: 1510.sol-HiGold-balanceOfOwnerInVault(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
inVault[_vault][_owner]

IRs:
REF_56(mapping(address => uint256)) -> inVault[_vault]
REF_57(uint256) -> REF_56[_owner]
RETURN REF_57"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1510.sol-HiGold-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = 105 * (10 ** 26)

IRs:
TMP_74(uint256) = 10 ** 26
TMP_75(uint256) = 105 * TMP_74
totalSupply(uint256) := TMP_75(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_55(uint256) -> balances[msg.sender]
REF_55(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 1510.sol-HiGold-deposit(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_58(uint256) -> balances[msg.sender]
REF_59(uint256) -> balances[msg.sender]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', '_value'] 
REF_58(uint256) (->balances) := TMP_76(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
inVaults = inVaults.add(_value)

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['inVaults', '_value'] 
inVaults(uint256) := TMP_77(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inVault[_vault][msg.sender] = inVault[_vault][msg.sender].add(_value)

IRs:
REF_62(mapping(address => uint256)) -> inVault[_vault]
REF_63(uint256) -> REF_62[msg.sender]
REF_64(mapping(address => uint256)) -> inVault[_vault]
REF_65(uint256) -> REF_64[msg.sender]
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_65', '_value'] 
REF_63(uint256) (->inVault) := TMP_78(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Deposit(_vault,msg.sender,_value)

IRs:
Emit Deposit(_vault,msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1510.sol-HiGold-onlyMiner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == miner)

IRs:
TMP_98(bool) = msg.sender == miner
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1510.sol-HiGold-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_96(bool) = msg.sender == owner
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1510.sol-HiGold-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_48 = CONVERT 0 to address
owner(address) := TMP_48(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1510.sol-HiGold-setNewMiner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
miner = _newMiner

IRs:
miner(address) := _newMiner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMiner()

IRs:
MODIFIER_CALL, HiGold.onlyMiner()()"];
3->1;
}
// Function: 1510.sol-HiGold-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = HiGold Community Token

IRs:
name(string) := HiGold Community Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = HIG

IRs:
symbol(string) := HIG(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 1510.sol-HiGold-startMining(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(miner == address(0))

IRs:
TMP_86 = CONVERT 0 to address
TMP_87(bool) = miner == TMP_86
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
miner = _minerContract

IRs:
miner(address) := _minerContract(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inVault[miner][miner] = 105 * (10 ** 26)

IRs:
REF_86(mapping(address => uint256)) -> inVault[miner]
REF_87(uint256) -> REF_86[miner]
TMP_89(uint256) = 10 ** 26
TMP_90(uint256) = 105 * TMP_89
REF_87(uint256) (->inVault) := TMP_90(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1510.sol-HiGold-totalInVaults()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
inVaults

IRs:
RETURN inVaults"];
2[label="Node Type: RETURN 2

EXPRESSION:
amount

IRs:
RETURN amount"];
}
// Function: 1510.sol-HiGold-transfer(address,uint256)
digraph{
}
// Function: 1510.sol-HiGold-transferFrom(address,address,uint256)
digraph{
}
// Function: 1510.sol-HiGold-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1510.sol-HiGold-updateInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_value)

IRs:
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_92(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
inVaults = inVaults.add(_value)

IRs:
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['inVaults', '_value'] 
inVaults(uint256) := TMP_93(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMiner()

IRs:
MODIFIER_CALL, HiGold.onlyMiner()()"];
4->1;
}
// Function: 1510.sol-HiGold-withdraw(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
inVault[_vault][msg.sender] = inVault[_vault][msg.sender].sub(_value)

IRs:
REF_67(mapping(address => uint256)) -> inVault[_vault]
REF_68(uint256) -> REF_67[msg.sender]
REF_69(mapping(address => uint256)) -> inVault[_vault]
REF_70(uint256) -> REF_69[msg.sender]
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_70', '_value'] 
REF_68(uint256) (->inVault) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
inVaults = inVaults.sub(_value)

IRs:
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['inVaults', '_value'] 
inVaults(uint256) := TMP_81(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(_value)

IRs:
REF_73(uint256) -> balances[msg.sender]
REF_74(uint256) -> balances[msg.sender]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_74', '_value'] 
REF_73(uint256) (->balances) := TMP_82(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Withdrawl(_vault,msg.sender,_value)

IRs:
Emit Withdrawl(_vault,msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1510.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _newOwner != TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1510.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1510.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_45(bool) = msg.sender == owner
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1510.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_37 = CONVERT 0 to address
owner(address) := TMP_37(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1510.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1510.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1510.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1510.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1510.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1510.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_29(mapping(address => uint256)) -> allowed[_owner]
REF_30(uint256) -> REF_29[_spender]
RETURN REF_30"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1510.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_31(bool) = _value == 0
REF_25(mapping(address => uint256)) -> allowed[msg.sender]
REF_26(uint256) -> REF_25[_spender]
TMP_32(bool) = REF_26 == 0
TMP_33(bool) = TMP_31 || TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
REF_28(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1510.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1510.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1510.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _from != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
_allowance(uint256) := REF_15(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_16(uint256) -> balances[_to]
REF_17(uint256) -> balances[_to]
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_17', '_value'] 
REF_16(uint256) (->balances) := TMP_27(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_28(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_23(uint256) (->allowed) := TMP_29(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
}
