digraph G {
// Function: 1521.sol-THATCoin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][spender] = value

IRs:
REF_4(mapping(address => uint256)) -> allowance[msg.sender]
REF_5(uint256) -> REF_4[spender]
REF_5(uint256) (->allowance) := value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender,spender,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1521.sol-THATCoin-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(address(0),msg.sender,totalSupply)

IRs:
TMP_0 = CONVERT 0 to address
Emit Transfer(TMP_0,msg.sender,totalSupply)"];
}
// Function: 1521.sol-THATCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = THATCoin

IRs:
name(string) := THATCoin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = THAT

IRs:
symbol(string) := THAT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 1000 * uint256(10) ** decimals

IRs:
TMP_11 = CONVERT 10 to uint256
TMP_12(uint256) = TMP_11 ** decimals
TMP_13(uint256) = 1000 * TMP_12
totalSupply(uint256) := TMP_13(uint256)"];
}
// Function: 1521.sol-THATCoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= value)

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_2(bool) = REF_1 >= value
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] -= value

IRs:
REF_2(uint256) -> balanceOf[msg.sender]
REF_2(-> balanceOf) = REF_2 - value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[to] += value

IRs:
REF_3(uint256) -> balanceOf[to]
REF_3(-> balanceOf) = REF_3 + value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,to,value)

IRs:
Emit Transfer(msg.sender,to,value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1521.sol-THATCoin-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= balanceOf[from])

IRs:
REF_6(uint256) -> balanceOf[from]
TMP_6(bool) = value <= REF_6
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value <= allowance[from][msg.sender])

IRs:
REF_7(mapping(address => uint256)) -> allowance[from]
REF_8(uint256) -> REF_7[msg.sender]
TMP_8(bool) = value <= REF_8
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[from] -= value

IRs:
REF_9(uint256) -> balanceOf[from]
REF_9(-> balanceOf) = REF_9 - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[to] += value

IRs:
REF_10(uint256) -> balanceOf[to]
REF_10(-> balanceOf) = REF_10 + value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[from][msg.sender] -= value

IRs:
REF_11(mapping(address => uint256)) -> allowance[from]
REF_12(uint256) -> REF_11[msg.sender]
REF_12(-> allowance) = REF_12 - value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from,to,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
}
