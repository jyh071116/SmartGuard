digraph G {
// Function: 1526.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
}
// Function: 1526.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1526.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _to != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_3(bool) = _value <= REF_0
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_5(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_5(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_6(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_6(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1526.sol-CouponToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_64 = CONVERT 0 to address
TMP_65(bool) = _newOwner != TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1526.sol-CouponToken-allowance(address,address)
digraph{
}
// Function: 1526.sol-CouponToken-approve(address,uint256)
digraph{
}
// Function: 1526.sol-CouponToken-balanceOf(address)
digraph{
}
// Function: 1526.sol-CouponToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(couponTokenSaleAddr == msg.sender || couponTokenBountyAddr == msg.sender || couponTokenCampaignAddr == msg.sender)

IRs:
TMP_129(bool) = couponTokenSaleAddr == msg.sender
TMP_130(bool) = couponTokenBountyAddr == msg.sender
TMP_131(bool) = TMP_129 || TMP_130
TMP_132(bool) = couponTokenCampaignAddr == msg.sender
TMP_133(bool) = TMP_131 || TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1526.sol-CouponToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_92(uint256) -> balances[msg.sender]
REF_92(uint256) (->balances) := 0(uint256)"];
}
// Function: 1526.sol-CouponToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_82(bool) = _subtractedValue > oldValue
CONDITION TMP_82"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_83(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1526.sol-CouponToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1526.sol-CouponToken-isTransferAllowed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
retVal = true

IRs:
retVal(bool) := True(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
vestingUsers[_user] == USER_FOUNDER

IRs:
REF_101(uint8) -> vestingUsers[_user]
TMP_112(bool) = REF_101 == USER_FOUNDER
CONDITION TMP_112"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
endSaleTime == 0 || (now < (endSaleTime + 63072000))

IRs:
TMP_113(bool) = endSaleTime == 0
TMP_114(uint256) = endSaleTime + 63072000
TMP_115(bool) = now < TMP_114
TMP_116(bool) = TMP_113 || TMP_115
CONDITION TMP_116"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
retVal = false

IRs:
retVal(bool) := False(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->11;
6[label="Node Type: IF 6

EXPRESSION:
vestingUsers[_user] == USER_BUYER || vestingUsers[_user] == USER_BONUS

IRs:
REF_102(uint8) -> vestingUsers[_user]
TMP_117(bool) = REF_102 == USER_BUYER
REF_103(uint8) -> vestingUsers[_user]
TMP_118(bool) = REF_103 == USER_BONUS
TMP_119(bool) = TMP_117 || TMP_118
CONDITION TMP_119"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
startTimeOfSaleLot4 == 0 || (now < (startTimeOfSaleLot4 + 7776000))

IRs:
TMP_120(bool) = startTimeOfSaleLot4 == 0
TMP_121(uint256) = startTimeOfSaleLot4 + 7776000
TMP_122(bool) = now < TMP_121
TMP_123(bool) = TMP_120 || TMP_122
CONDITION TMP_123"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
retVal = false

IRs:
retVal(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
retVal

IRs:
RETURN retVal"];
}
// Function: 1526.sol-CouponToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(totalSupply_.add(_amount) <= TOTAL_COUPON_SUPPLY)

IRs:
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
TMP_94(bool) = TMP_93 <= TOTAL_COUPON_SUPPLY
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_96(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_95(uint256) -> balances[_to]
REF_96(uint256) -> balances[_to]
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_96', '_amount'] 
REF_95(uint256) (->balances) := TMP_97(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_99 = CONVERT 0 to address
Emit Transfer(TMP_99,_to,_amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, CouponToken.canMint()()"];
6->1;
}
// Function: 1526.sol-CouponToken-onlyCallFromCouponTokenSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == couponTokenSaleAddr)

IRs:
TMP_135(bool) = msg.sender == couponTokenSaleAddr
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1526.sol-CouponToken-onlyCallFromTokenSaleOrBountyOrCampaign()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == couponTokenSaleAddr || msg.sender == couponTokenBountyAddr || msg.sender == couponTokenCampaignAddr)

IRs:
TMP_140(bool) = msg.sender == couponTokenSaleAddr
TMP_141(bool) = msg.sender == couponTokenBountyAddr
TMP_142(bool) = TMP_140 || TMP_141
TMP_143(bool) = msg.sender == couponTokenCampaignAddr
TMP_144(bool) = TMP_142 || TMP_143
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1526.sol-CouponToken-onlyIfValidTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isTransferAllowed(sender) == true)

IRs:
TMP_137(bool) = INTERNAL_CALL, CouponToken.isTransferAllowed(address)(sender)
TMP_138(bool) = TMP_137 == True
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1526.sol-CouponToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_127(bool) = msg.sender == owner
TMP_128(None) = SOLIDITY_CALL require(bool)(TMP_127)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1526.sol-CouponToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_60 = CONVERT 0 to address
owner(address) := TMP_60(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1526.sol-CouponToken-setBonusUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
vestingUsers[_user] = USER_BONUS

IRs:
REF_100(uint8) -> vestingUsers[_user]
REF_100(uint8) (->vestingUsers) := USER_BONUS(uint8)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCallFromTokenSaleOrBountyOrCampaign()

IRs:
MODIFIER_CALL, CouponToken.onlyCallFromTokenSaleOrBountyOrCampaign()()"];
2->1;
}
// Function: 1526.sol-CouponToken-setContractAddresses(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
couponTokenSaleAddr = _couponTokenSaleAddr

IRs:
couponTokenSaleAddr(address) := _couponTokenSaleAddr(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
couponTokenBountyAddr = _couponTokenBountyAddr

IRs:
couponTokenBountyAddr(address) := _couponTokenBountyAddr(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
couponTokenCampaignAddr = _couponTokenCampaignAddr

IRs:
couponTokenCampaignAddr(address) := _couponTokenCampaignAddr(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1526.sol-CouponToken-setFounderUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
vestingUsers[_user] = USER_FOUNDER

IRs:
REF_98(uint8) -> vestingUsers[_user]
REF_98(uint8) (->vestingUsers) := USER_FOUNDER(uint8)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCallFromCouponTokenSale()

IRs:
MODIFIER_CALL, CouponToken.onlyCallFromCouponTokenSale()()"];
2->1;
}
// Function: 1526.sol-CouponToken-setSaleLot4StartTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
startTimeOfSaleLot4 = _startTime

IRs:
startTimeOfSaleLot4(uint256) := _startTime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCallFromCouponTokenSale()

IRs:
MODIFIER_CALL, CouponToken.onlyCallFromCouponTokenSale()()"];
2->1;
}
// Function: 1526.sol-CouponToken-setSalesEndTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
endSaleTime = _endSaleTime

IRs:
endSaleTime(uint256) := _endSaleTime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCallFromCouponTokenSale()

IRs:
MODIFIER_CALL, CouponToken.onlyCallFromCouponTokenSale()()"];
2->1;
}
// Function: 1526.sol-CouponToken-setSalesUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
vestingUsers[_user] = USER_BUYER

IRs:
REF_99(uint8) -> vestingUsers[_user]
REF_99(uint8) (->vestingUsers) := USER_BUYER(uint8)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCallFromCouponTokenSale()

IRs:
MODIFIER_CALL, CouponToken.onlyCallFromCouponTokenSale()()"];
2->1;
}
// Function: 1526.sol-CouponToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Coupon Chain Token

IRs:
name(string) := Coupon Chain Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CCT

IRs:
symbol(string) := CCT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
DECIMALS_FACTOR = 10 ** uint256(decimals)

IRs:
TMP_124 = CONVERT decimals to uint256
TMP_125(uint256) = 10 ** TMP_124
DECIMALS_FACTOR(uint256) := TMP_125(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOTAL_COUPON_SUPPLY = 1000000000 * DECIMALS_FACTOR

IRs:
TMP_126(uint256) = 1000000000 * DECIMALS_FACTOR
TOTAL_COUPON_SUPPLY(uint256) := TMP_126(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
USER_NONE = 0

IRs:
USER_NONE(uint8) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
USER_FOUNDER = 1

IRs:
USER_FOUNDER(uint8) := 1(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
USER_BUYER = 2

IRs:
USER_BUYER(uint8) := 2(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
USER_BONUS = 3

IRs:
USER_BONUS(uint8) := 3(uint256)"];
}
// Function: 1526.sol-CouponToken-totalSupply()
digraph{
}
// Function: 1526.sol-CouponToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(to,value)

IRs:
TMP_102(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(to,value)
RETURN TMP_102"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyIfValidTransfer(msg.sender)

IRs:
MODIFIER_CALL, CouponToken.onlyIfValidTransfer(address)(msg.sender)"];
2->1;
}
// Function: 1526.sol-CouponToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(from,to,value)

IRs:
TMP_104(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(from,to,value)
RETURN TMP_104"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyIfValidTransfer(from)

IRs:
MODIFIER_CALL, CouponToken.onlyIfValidTransfer(address)(from)"];
2->1;
}
// Function: 1526.sol-CouponToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1526.sol-CouponTokenConfig-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Coupon Chain Token

IRs:
name(string) := Coupon Chain Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CCT

IRs:
symbol(string) := CCT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
DECIMALS_FACTOR = 10 ** uint256(decimals)

IRs:
TMP_56 = CONVERT decimals to uint256
TMP_57(uint256) = 10 ** TMP_56
DECIMALS_FACTOR(uint256) := TMP_57(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOTAL_COUPON_SUPPLY = 1000000000 * DECIMALS_FACTOR

IRs:
TMP_58(uint256) = 1000000000 * DECIMALS_FACTOR
TOTAL_COUPON_SUPPLY(uint256) := TMP_58(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
USER_NONE = 0

IRs:
USER_NONE(uint8) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
USER_FOUNDER = 1

IRs:
USER_FOUNDER(uint8) := 1(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
USER_BUYER = 2

IRs:
USER_BUYER(uint8) := 2(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
USER_BONUS = 3

IRs:
USER_BONUS(uint8) := 3(uint256)"];
}
// Function: 1526.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1526.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1526.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1526.sol-ERC20-totalSupply()
digraph{
}
// Function: 1526.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1526.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1526.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1526.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1526.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1526.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = _newOwner != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1526.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1526.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_42(bool) = msg.sender == owner
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1526.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_34 = CONVERT 0 to address
owner(address) := TMP_34(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1526.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1526.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_53(uint256) = a + b
c(uint256) := TMP_53(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_54(bool) = c >= a
TMP_55(None) = SOLIDITY_CALL assert(bool)(TMP_54)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1526.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_49(uint256) = a / b
RETURN TMP_49"];
}
// Function: 1526.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_44(bool) = a == 0
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_45(uint256) = a * b
c(uint256) := TMP_45(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_46(uint256) = c / a
TMP_47(bool) = TMP_46 == b
TMP_48(None) = SOLIDITY_CALL assert(bool)(TMP_47)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1526.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_50(bool) = b <= a
TMP_51(None) = SOLIDITY_CALL assert(bool)(TMP_50)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_52(uint256) = a - b
RETURN TMP_52"];
}
// Function: 1526.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 1526.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1526.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1526.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_30(bool) = _subtractedValue > oldValue
CONDITION TMP_30"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_31(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1526.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1526.sol-StandardToken-totalSupply()
digraph{
}
// Function: 1526.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1526.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _to != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_19(bool) = _value <= REF_16
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_21(bool) = _value <= REF_18
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_23(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_24(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_25(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
