digraph G {
// Function: 1531.sol-BurnToken-_burn(address,uint256)
digraph{
}
// Function: 1531.sol-BurnToken-burn(uint256)
digraph{
}
// Function: 1531.sol-BurnToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 1531.sol-BurnToken-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == contractOwner)

IRs:
TMP_32(bool) = msg.sender == contractOwner
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1531.sol-BurnToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = _newOwner != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractOwner = _newOwner

IRs:
contractOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TransferredOwnership(contractOwner,_newOwner)

IRs:
Emit TransferredOwnership(contractOwner,_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
4->1;
}
// Function: 1531.sol-ERC20Standard-allowance(address,address)
digraph{
}
// Function: 1531.sol-ERC20Standard-approve(address,uint256)
digraph{
}
// Function: 1531.sol-ERC20Standard-balanceOf(address)
digraph{
}
// Function: 1531.sol-ERC20Standard-transfer(address,uint256)
digraph{
}
// Function: 1531.sol-ERC20Standard-transferFrom(address,address,uint256)
digraph{
}
// Function: 1531.sol-ERC223ReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_from
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_value
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_data
"];
}
// Function: 1531.sol-ERC223Standard-transfer(address,uint256,bytes)
digraph{
}
// Function: 1531.sol-NatminToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_user] >= _value)

IRs:
REF_37(uint256) -> balances[_user]
TMP_83(bool) = REF_37 >= _value
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_user] = balances[_user].sub(_value)

IRs:
REF_38(uint256) -> balances[_user]
REF_39(uint256) -> balances[_user]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_39', '_value'] 
REF_38(uint256) (->balances) := TMP_85(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.sub(_value)

IRs:
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', '_value'] 
_totalSupply(uint256) := TMP_86(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_user,_value)

IRs:
Emit Burn(_user,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_user,address(0),_value)

IRs:
TMP_88 = CONVERT 0 to address
Emit Transfer(_user,TMP_88,_value)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_user,address(0),_value,_empty)

IRs:
TMP_90 = CONVERT 0 to address
Emit Transfer(_user,TMP_90,_value,_empty)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
8->1;
}
// Function: 1531.sol-NatminToken-addVesting(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
vestings[_user].amount = _amount

IRs:
REF_42(NatminVesting.Vesting) -> vestings[_user]
REF_43(uint256) -> REF_42.amount
REF_43(uint256) (->vestings) := _amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vestings[_user].endTime = now + 15552000

IRs:
REF_44(NatminVesting.Vesting) -> vestings[_user]
REF_45(uint256) -> REF_44.endTime
TMP_93(uint256) = now + 15552000
REF_45(uint256) (->vestings) := TMP_93(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
3->1;
}
// Function: 1531.sol-NatminToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_35(mapping(address => uint256)) -> allowed[_owner]
REF_36(uint256) -> REF_35[_spender]
RETURN REF_36"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1531.sol-NatminToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
REF_34(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1531.sol-NatminToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_user]

IRs:
REF_1(uint256) -> balances[_user]
RETURN REF_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1531.sol-NatminToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, NatminToken._burn(address,uint256)(msg.sender,_value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
2->1;
}
// Function: 1531.sol-NatminToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 1531.sol-NatminToken-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_supply != 0)

IRs:
TMP_39(bool) = _supply != 0
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalSupply = _supply * (10 ** 18)

IRs:
TMP_41(uint256) = 10 ** 18
TMP_42(uint256) = _supply * TMP_41
_totalSupply(uint256) := TMP_42(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[contractOwner] = _totalSupply

IRs:
REF_0(uint256) -> balances[contractOwner]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 1531.sol-NatminToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 1531.sol-NatminToken-endVesting(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
vestings[_user].endTime = now

IRs:
REF_52(NatminVesting.Vesting) -> vestings[_user]
REF_53(uint256) -> REF_52.endTime
REF_53(uint256) (->vestings) := now(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
2->1;
}
// Function: 1531.sol-NatminToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_80(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1531.sol-NatminToken-getVestedAmount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_amount = vestings[_user].amount

IRs:
REF_46(NatminVesting.Vesting) -> vestings[_user]
REF_47(uint256) -> REF_46.amount
_amount(uint256) := REF_47(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_amount

IRs:
RETURN _amount"];
3[label="Node Type: RETURN 3

EXPRESSION:
_amount

IRs:
RETURN _amount"];
}
// Function: 1531.sol-NatminToken-getVestingEndTime(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_endTime = vestings[_user].endTime

IRs:
REF_48(NatminVesting.Vesting) -> vestings[_user]
REF_49(uint256) -> REF_48.endTime
_endTime(uint256) := REF_49(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_endTime

IRs:
RETURN _endTime"];
3[label="Node Type: RETURN 3

EXPRESSION:
_endTime

IRs:
RETURN _endTime"];
}
// Function: 1531.sol-NatminToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_codeLength > 0

IRs:
TMP_49(bool) = _codeLength > 0
RETURN TMP_49"];
}
// Function: 1531.sol-NatminToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 1531.sol-NatminToken-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == contractOwner)

IRs:
TMP_97(bool) = msg.sender == contractOwner
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1531.sol-NatminToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_name = Natmin

IRs:
_name(string) := Natmin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
_symbol = NAT

IRs:
_symbol(string) := NAT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
_standard = ERC20 / ERC223

IRs:
_standard(string) := ERC20 / ERC223(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
_decimals = 18

IRs:
_decimals(uint256) := 18(uint256)"];
}
// Function: 1531.sol-NatminToken-standard()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_standard

IRs:
RETURN _standard"];
}
// Function: 1531.sol-NatminToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 1531.sol-NatminToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 1531.sol-NatminToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_43(bool) = INTERNAL_CALL, NatminToken.isContract(address)(_to)
CONDITION TMP_43"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,_empty)

IRs:
TMP_44(bool) = INTERNAL_CALL, NatminToken.transferToContract(address,uint256,bytes)(_to,_value,_empty)
RETURN TMP_44"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,_empty)

IRs:
TMP_45(bool) = INTERNAL_CALL, NatminToken.transferToAddress(address,uint256,bytes)(_to,_value,_empty)
RETURN TMP_45"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1531.sol-NatminToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_46(bool) = INTERNAL_CALL, NatminToken.isContract(address)(_to)
CONDITION TMP_46"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_47(bool) = INTERNAL_CALL, NatminToken.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_47"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_48(bool) = INTERNAL_CALL, NatminToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_48"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1531.sol-NatminToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_69(bool) = _value <= REF_18
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_19(uint256) -> balances[_from]
TMP_71(bool) = _value <= REF_19
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(vestingEnded(_from))

IRs:
TMP_73(bool) = INTERNAL_CALL, NatminToken.vestingEnded(address)(_from)
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_20(uint256) -> balances[_from]
REF_21(uint256) -> balances[_from]
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balances) := TMP_75(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_23(uint256) -> balances[_to]
REF_24(uint256) -> balances[_to]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_24', '_value'] 
REF_23(uint256) (->balances) := TMP_76(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_26(mapping(address => uint256)) -> allowed[_from]
REF_27(uint256) -> REF_26[msg.sender]
REF_28(mapping(address => uint256)) -> allowed[_from]
REF_29(uint256) -> REF_28[msg.sender]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_29', '_value'] 
REF_27(uint256) (->allowed) := TMP_77(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1531.sol-NatminToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = _newOwner != TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractOwner = _newOwner

IRs:
contractOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TransferredOwnership(contractOwner,_newOwner)

IRs:
Emit TransferredOwnership(contractOwner,_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
4->1;
}
// Function: 1531.sol-NatminToken-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_10(uint256) -> balances[msg.sender]
TMP_61(bool) = REF_10 >= _value
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(vestingEnded(msg.sender))

IRs:
TMP_63(bool) = INTERNAL_CALL, NatminToken.vestingEnded(address)(msg.sender)
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_11(uint256) -> balances[msg.sender]
REF_12(uint256) -> balances[msg.sender]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11(uint256) (->balances) := TMP_65(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_14(uint256) -> balances[_to]
REF_15(uint256) -> balances[_to]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_15', '_value'] 
REF_14(uint256) (->balances) := TMP_66(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1531.sol-NatminToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_50(bool) = REF_2 >= _value
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(vestingEnded(msg.sender))

IRs:
TMP_52(bool) = INTERNAL_CALL, NatminToken.vestingEnded(address)(msg.sender)
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
msg.sender != contractOwner

IRs:
TMP_54(bool) = msg.sender != contractOwner
CONDITION TMP_54"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_tokenReceiver = ERC223ReceivingContract(_to)

IRs:
TMP_55 = CONVERT _to to ERC223ReceivingContract
_tokenReceiver(ERC223ReceivingContract) := TMP_55(ERC223ReceivingContract)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_tokenReceiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:_tokenReceiver(ERC223ReceivingContract), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_57(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_58(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1531.sol-NatminToken-vestingEnded(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
vestings[_user].endTime <= now

IRs:
REF_50(NatminVesting.Vesting) -> vestings[_user]
REF_51(uint256) -> REF_50.endTime
TMP_95(bool) = REF_51 <= now
CONDITION TMP_95"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 1531.sol-NatminVesting-addVesting(address,uint256)
digraph{
}
// Function: 1531.sol-NatminVesting-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 1531.sol-NatminVesting-endVesting(address)
digraph{
}
// Function: 1531.sol-NatminVesting-getVestedAmount(address)
digraph{
}
// Function: 1531.sol-NatminVesting-getVestingEndTime(address)
digraph{
}
// Function: 1531.sol-NatminVesting-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == contractOwner)

IRs:
TMP_25(bool) = msg.sender == contractOwner
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1531.sol-NatminVesting-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = _newOwner != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractOwner = _newOwner

IRs:
contractOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TransferredOwnership(contractOwner,_newOwner)

IRs:
Emit TransferredOwnership(contractOwner,_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
4->1;
}
// Function: 1531.sol-NatminVesting-vestingEnded(address)
digraph{
}
// Function: 1531.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 1531.sol-Ownable-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == contractOwner)

IRs:
TMP_18(bool) = msg.sender == contractOwner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1531.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = _newOwner != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractOwner = _newOwner

IRs:
contractOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TransferredOwnership(contractOwner,_newOwner)

IRs:
Emit TransferredOwnership(contractOwner,_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
4->1;
}
// Function: 1531.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1531.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1531.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1531.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
}
