digraph G {
// Function: 1545.sol-AENCrowdsale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = 0xF82C31E4df853ff36F2Fc6F61F93B4CAda46E306

IRs:
owner(address) := 1416815290336547579274983095444425297645913170694(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenReward = Token(0xBd11eaE443eF0E96C1CC565Db5c0b51f6c829C0b)

IRs:
TMP_0 = CONVERT 1079398830303667911109870930922040243414588627979 to Token
tokenReward(Token) := TMP_0(Token)"];
}
// Function: 1545.sol-AENCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0 && msg.value < 5100000000000000000)

IRs:
TMP_14(bool) = msg.value > 0
TMP_15(bool) = msg.value < 5100000000000000000
TMP_16(bool) = TMP_14 && TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = msg.value * 5000

IRs:
TMP_18(uint256) = msg.value * 5000
amount(uint256) := TMP_18(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
amount = amount / 20

IRs:
TMP_19(uint256) = amount / 20
amount(uint256) := TMP_19(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
now > 1538089200 && now < 1538694000

IRs:
TMP_20(bool) = now > 1538089200
TMP_21(bool) = now < 1538694000
TMP_22(bool) = TMP_20 && TMP_21
CONDITION TMP_22"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
amount = amount * 26

IRs:
TMP_23(uint256) = amount * 26
amount(uint256) := TMP_23(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
now > 1538694000 && now < 1539298800

IRs:
TMP_24(bool) = now > 1538694000
TMP_25(bool) = now < 1539298800
TMP_26(bool) = TMP_24 && TMP_25
CONDITION TMP_26"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amount = amount * 25

IRs:
TMP_27(uint256) = amount * 25
amount(uint256) := TMP_27(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
now > 1539298800 && now < 1539903600

IRs:
TMP_28(bool) = now > 1539298800
TMP_29(bool) = now < 1539903600
TMP_30(bool) = TMP_28 && TMP_29
CONDITION TMP_30"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
amount = amount * 24

IRs:
TMP_31(uint256) = amount * 24
amount(uint256) := TMP_31(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
now > 1539903600 && now < 1540508400

IRs:
TMP_32(bool) = now > 1539903600
TMP_33(bool) = now < 1540508400
TMP_34(bool) = TMP_32 && TMP_33
CONDITION TMP_34"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
amount = amount * 23

IRs:
TMP_35(uint256) = amount * 23
amount(uint256) := TMP_35(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
now > 1540508400 && now < 1541808000

IRs:
TMP_36(bool) = now > 1540508400
TMP_37(bool) = now < 1541808000
TMP_38(bool) = TMP_36 && TMP_37
CONDITION TMP_38"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
amount = amount * 22

IRs:
TMP_39(uint256) = amount * 22
amount(uint256) := TMP_39(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
now > 1541808000

IRs:
TMP_40(bool) = now > 1541808000
CONDITION TMP_40"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
amount = amount * 20

IRs:
TMP_41(uint256) = amount * 20
amount(uint256) := TMP_41(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
totalSold += amount / 1000000000000000000

IRs:
TMP_42(uint256) = amount / 1000000000000000000
totalSold(uint256) = totalSold + TMP_42"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
tokenReward.transfer(msg.sender,amount)

IRs:
HIGH_LEVEL_CALL, dest:tokenReward(Token), function:transfer, arguments:['msg.sender', 'amount']  "];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
FundTransfer(msg.sender,amount)

IRs:
Emit FundTransfer(msg.sender,amount)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
}
// Function: 1545.sol-AENCrowdsale-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_11(bool) = msg.sender == creator
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_13(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
}
// Function: 1545.sol-AENCrowdsale-sendToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_8(bool) = msg.sender == creator
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenReward.transfer(_to,_value)

IRs:
HIGH_LEVEL_CALL, dest:tokenReward(Token), function:transfer, arguments:['_to', '_value']  "];
}
// Function: 1545.sol-AENCrowdsale-setCreator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_3(bool) = msg.sender == creator
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
creator = _creator

IRs:
creator(address) := _creator(address)"];
}
// Function: 1545.sol-AENCrowdsale-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_1(bool) = msg.sender == creator
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 1545.sol-AENCrowdsale-setToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_5(bool) = msg.sender == creator
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenReward = Token(_token)

IRs:
TMP_7 = CONVERT _token to Token
tokenReward(Token) := TMP_7(Token)"];
}
// Function: 1545.sol-Token-transfer(address,uint256)
digraph{
}
}
