digraph G {
// Function: 1559.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1559.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1559.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1559.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 1559.sol-SmartBondsSale-SmartBondsSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
badgerWallet = 0x5cB7a6547A9408e3C9B09FB5c640d4fB767b8070

IRs:
badgerWallet(address) := 529322676673242289551437166754507944516258594928(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investmentFundWallet = 0x8F2d31E3c259F65222D0748e416A79e51589Ce3b

IRs:
investmentFundWallet(address) := 817393559766188218894755173410438623488031444539(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyoutWallet = 0x336b903eF5e3c911df7f8172EcAaAA651B80CA1D

IRs:
buyoutWallet(address) := 293557274641783103520306701729492266007526427165(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
addressOfTokenUsedAsReward = 0x38dCb83980183f089FC7D147c5bF82E5C9b8F237

IRs:
addressOfTokenUsedAsReward(address) := 324625695336785185887223390248914262546340966967(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenReward = token(addressOfTokenUsedAsReward)

IRs:
TMP_13 = CONVERT addressOfTokenUsedAsReward to token
tokenReward(token) := TMP_13(token)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = 1533583718

IRs:
startTime(uint256) := 1533583718(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = startTime + 182 * 86400

IRs:
TMP_14(uint256) = 182 * 86400
TMP_15(uint256) = startTime + TMP_14
endTime(uint256) := TMP_15(uint256)"];
}
// Function: 1559.sol-SmartBondsSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != 0x0)

IRs:
TMP_17(bool) = beneficiary != 0
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_19(bool) = INTERNAL_CALL, SmartBondsSale.validPurchase()()
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
weiAmount < 2.5 * 10 ** 18

IRs:
TMP_21(uint256) = 10 ** 18
TMP_22(uint256) = 2 * TMP_21
TMP_23(bool) = weiAmount < TMP_22
CONDITION TMP_23"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
weiAmount > 25 * 10 ** 18

IRs:
TMP_24(uint256) = 10 ** 18
TMP_25(uint256) = 25 * TMP_24
TMP_26(bool) = weiAmount > TMP_25
CONDITION TMP_26"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
badgerAmount = (5 * weiAmount) / 100

IRs:
TMP_27(uint256) = 5 * weiAmount
TMP_28(uint256) = TMP_27 / 100
badgerAmount(uint256) := TMP_28(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyoutAmount = (25 * weiAmount) / 100

IRs:
TMP_29(uint256) = 25 * weiAmount
TMP_30(uint256) = TMP_29 / 100
buyoutAmount(uint256) := TMP_30(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investAmount = (70 * weiAmount) / 100

IRs:
TMP_31(uint256) = 70 * weiAmount
TMP_32(uint256) = TMP_31 / 100
investAmount(uint256) := TMP_32(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
tokenPrice = 25000000000000000

IRs:
tokenPrice(uint256) := 25000000000000000(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
tokens = (weiAmount * 10 ** 18) / tokenPrice

IRs:
TMP_33(uint256) = 10 ** 18
TMP_34(uint256) = weiAmount * TMP_33
TMP_35(uint256) = TMP_34 / tokenPrice
tokens(uint256) := TMP_35(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_36(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokenReward.transfer(beneficiary,tokens)

IRs:
HIGH_LEVEL_CALL, dest:tokenReward(token), function:transfer, arguments:['beneficiary', 'tokens']  "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, SmartBondsSale.forwardFunds()()"];
}
// Function: 1559.sol-SmartBondsSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, SmartBondsSale.buyTokens(address)(msg.sender)"];
}
// Function: 1559.sol-SmartBondsSale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! badgerWallet.send(badgerAmount)

IRs:
TMP_40 = SEND dest:badgerWallet value:badgerAmount
TMP_41 = UnaryType.BANG TMP_40 
CONDITION TMP_41"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! investmentFundWallet.send(investAmount)

IRs:
TMP_42 = SEND dest:investmentFundWallet value:investAmount
TMP_43 = UnaryType.BANG TMP_42 
CONDITION TMP_43"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
! buyoutWallet.send(buyoutAmount)

IRs:
TMP_44 = SEND dest:buyoutWallet value:buyoutAmount
TMP_45 = UnaryType.BANG TMP_44 
CONDITION TMP_45"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
}
// Function: 1559.sol-SmartBondsSale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_51(bool) = now > endTime
RETURN TMP_51"];
}
// Function: 1559.sol-SmartBondsSale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_46(bool) = now >= startTime
TMP_47(bool) = now <= endTime
TMP_48(bool) = TMP_46 && TMP_47
withinPeriod(bool) := TMP_48(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_49(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_49(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_50(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_50"];
}
// Function: 1559.sol-SmartBondsSale-withdrawTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != badgerWallet

IRs:
TMP_52(bool) = msg.sender != badgerWallet
CONDITION TMP_52"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenReward.transfer(badgerWallet,_amount)

IRs:
HIGH_LEVEL_CALL, dest:tokenReward(token), function:transfer, arguments:['badgerWallet', '_amount']  "];
}
// Function: 1559.sol-token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
}
