digraph G {
// Function: 1577.sol-Administrable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _newOwner != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-Administrable-addAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Administrable-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].add(_operator)

IRs:
REF_19(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_19', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(_operator,_role)

IRs:
Emit RoleAdded(_operator,_role)"];
}
// Function: 1577.sol-Administrable-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].check(_operator)

IRs:
REF_15(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_15', '_operator'] "];
}
// Function: 1577.sol-Administrable-claimAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRoleAll(_role)

IRs:
INTERNAL_CALL, RBAC.removeRoleAll(string)(_role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,_role)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-Administrable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addRole(msg.sender,ROLE_LOCKUP)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,ROLE_LOCKUP)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addRole(msg.sender,ROLE_MINT)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,ROLE_MINT)"];
}
// Function: 1577.sol-Administrable-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[_role].has(_operator)

IRs:
REF_17(Roles.Role) -> roles[_role]
TMP_37(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_17', '_operator'] 
RETURN TMP_37"];
}
// Function: 1577.sol-Administrable-isAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_addr,_role)

IRs:
TMP_54(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_addr,_role)
RETURN TMP_54"];
}
// Function: 1577.sol-Administrable-onlyAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Administrable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_63(bool) = msg.sender == owner
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Administrable-onlyOwnerOrAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || isAdmin(msg.sender,_role))

IRs:
TMP_66(bool) = msg.sender == owner
TMP_67(bool) = INTERNAL_CALL, Administrable.isAdmin(address,string)(msg.sender,_role)
TMP_68(bool) = TMP_66 || TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Administrable-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Administrable-removeAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Administrable-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].remove(_operator)

IRs:
REF_21(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_21', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(_operator,_role)

IRs:
Emit RoleRemoved(_operator,_role)"];
}
// Function: 1577.sol-Administrable-removeRoleAll(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete roles[_role]

IRs:
REF_23(Roles.Role) -> roles[_role]
roles = delete REF_23 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemovedAll(_role)

IRs:
Emit RoleRemovedAll(_role)"];
}
// Function: 1577.sol-Administrable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_44 = CONVERT 0 to address
owner(address) := TMP_44(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-Administrable-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_LOCKUP = lockup

IRs:
ROLE_LOCKUP(string) := lockup(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ROLE_MINT = mint

IRs:
ROLE_MINT(string) := mint(string)"];
}
// Function: 1577.sol-Administrable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_56(uint256) -> balances[_owner]
RETURN REF_56"];
}
// Function: 1577.sol-BasicToken-msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 1577.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1577.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_146 = CONVERT 0 to address
TMP_147(bool) = _to != TMP_146
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_149(bool) = _to != msg.sender
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_49(uint256) -> balances[msg.sender]
TMP_151(bool) = _value <= REF_49
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_50(uint256) -> balances[msg.sender]
REF_51(uint256) -> balances[msg.sender]
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_51', '_value'] 
REF_50(uint256) (->balances) := TMP_153(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_53(uint256) -> balances[_to]
REF_54(uint256) -> balances[_to]
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_54', '_value'] 
REF_53(uint256) (->balances) := TMP_154(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-BundableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_319(uint256) -> balances[_who]
TMP_563(bool) = _value <= REF_319
TMP_564(None) = SOLIDITY_CALL require(bool)(TMP_563)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_320(uint256) -> balances[_who]
REF_321(uint256) -> balances[_who]
TMP_565(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_321', '_value'] 
REF_320(uint256) (->balances) := TMP_565(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_566(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_566(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_568 = CONVERT 0 to address
Emit Transfer(_who,TMP_568,_value)"];
}
// Function: 1577.sol-BundableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_552 = CONVERT 0 to address
TMP_553(bool) = _newOwner != TMP_552
TMP_554(None) = SOLIDITY_CALL require(bool)(TMP_553)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-BundableToken-addAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-BundableToken-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].add(_operator)

IRs:
REF_314(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_314', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(_operator,_role)

IRs:
Emit RoleAdded(_operator,_role)"];
}
// Function: 1577.sol-BundableToken-allowance(address,address)
digraph{
}
// Function: 1577.sol-BundableToken-approve(address,uint256)
digraph{
}
// Function: 1577.sol-BundableToken-balanceOf(address)
digraph{
}
// Function: 1577.sol-BundableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1577.sol-BundableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_649 = UnaryType.BANG mintingFinished 
TMP_650(None) = SOLIDITY_CALL require(bool)(TMP_649)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BundableToken-cantMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(mintingFinished)

IRs:
TMP_651(None) = SOLIDITY_CALL require(bool)(mintingFinished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BundableToken-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].check(_operator)

IRs:
REF_310(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_310', '_operator'] "];
}
// Function: 1577.sol-BundableToken-claimAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRoleAll(_role)

IRs:
INTERNAL_CALL, RBAC.removeRoleAll(string)(_role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,_role)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-BundableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1577.sol-BundableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_349(mapping(address => uint256)) -> allowed[msg.sender]
REF_350(uint256) -> REF_349[_spender]
oldValue(uint256) := REF_350(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_584(bool) = _subtractedValue > oldValue
CONDITION TMP_584"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_351(mapping(address => uint256)) -> allowed[msg.sender]
REF_352(uint256) -> REF_351[_spender]
REF_352(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_353(mapping(address => uint256)) -> allowed[msg.sender]
REF_354(uint256) -> REF_353[_spender]
TMP_585(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_354(uint256) (->allowed) := TMP_585(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_356(mapping(address => uint256)) -> allowed[msg.sender]
REF_357(uint256) -> REF_356[_spender]
Emit Approval(msg.sender,_spender,REF_357)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-BundableToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_507(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1577.sol-BundableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1577.sol-BundableToken-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[_role].has(_operator)

IRs:
REF_312(Roles.Role) -> roles[_role]
TMP_541(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_312', '_operator'] 
RETURN TMP_541"];
}
// Function: 1577.sol-BundableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_342(mapping(address => uint256)) -> allowed[msg.sender]
REF_343(uint256) -> REF_342[_spender]
REF_344(mapping(address => uint256)) -> allowed[msg.sender]
REF_345(uint256) -> REF_344[_spender]
TMP_582(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_345', '_addedValue'] 
REF_343(uint256) (->allowed) := TMP_582(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_347(mapping(address => uint256)) -> allowed[msg.sender]
REF_348(uint256) -> REF_347[_spender]
Emit Approval(msg.sender,_spender,REF_348)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-BundableToken-isAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_addr,_role)

IRs:
TMP_532(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_addr,_role)
RETURN TMP_532"];
}
// Function: 1577.sol-BundableToken-lock(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_508(bool) = _amount > 0
TMP_509(None) = SOLIDITY_CALL require(bool)(TMP_508)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_expiresAt > now)

IRs:
TMP_510(bool) = _expiresAt > now
TMP_511(None) = SOLIDITY_CALL require(bool)(TMP_510)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
grantedLocks[_granted].push(Lock(_amount,_expiresAt))

IRs:
REF_294(Lockable.Lock[]) -> grantedLocks[_granted]
TMP_512(Lockable.Lock) = new Lock(_amount,_expiresAt)
REF_296 -> LENGTH REF_294
TMP_514(uint256) := REF_296(uint256)
TMP_515(uint256) = TMP_514 + 1
REF_296(uint256) (->grantedLocks) := TMP_515(uint256)
REF_297(Lockable.Lock) -> REF_294[TMP_514]
REF_297(Lockable.Lock) (->grantedLocks) := TMP_512(Lockable.Lock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Locked(_granted,_amount,_expiresAt)

IRs:
Emit Locked(_granted,_amount,_expiresAt)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
5->1;
}
// Function: 1577.sol-BundableToken-lockedAmountOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_granted != address(0))

IRs:
TMP_522 = CONVERT 0 to address
TMP_523(bool) = _granted != TMP_522
TMP_524(None) = SOLIDITY_CALL require(bool)(TMP_523)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockedAmount = 0

IRs:
lockedAmount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lockedCount = grantedLocks[_granted].length

IRs:
REF_301(Lockable.Lock[]) -> grantedLocks[_granted]
REF_302 -> LENGTH REF_301
lockedCount(uint256) := REF_302(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
lockedCount > 0

IRs:
TMP_525(bool) = lockedCount > 0
CONDITION TMP_525"];
4->5[label="True"];
4->14[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
locks = grantedLocks[_granted]

IRs:
REF_303(Lockable.Lock[]) -> grantedLocks[_granted]
locks(Lockable.Lock[]) = ['REF_303(Lockable.Lock[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->14;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < locks.length

IRs:
REF_304 -> LENGTH locks
TMP_526(bool) = i < REF_304
CONDITION TMP_526"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
now < locks[i].expiresAt

IRs:
REF_305(Lockable.Lock) -> locks[i]
REF_306(uint256) -> REF_305.expiresAt
TMP_527(bool) = now < REF_306
CONDITION TMP_527"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lockedAmount = lockedAmount.add(locks[i].amount)

IRs:
REF_308(Lockable.Lock) -> locks[i]
REF_309(uint256) -> REF_308.amount
TMP_528(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockedAmount', 'REF_309'] 
lockedAmount(uint256) := TMP_528(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_529(uint256) := i(uint256)
i(uint256) = i + 1"];
13->9;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
lockedAmount

IRs:
RETURN lockedAmount"];
}
// Function: 1577.sol-BundableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_597(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_597(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_367(uint256) -> balances[_to]
REF_368(uint256) -> balances[_to]
TMP_598(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_368', '_amount'] 
REF_367(uint256) (->balances) := TMP_598(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_600 = CONVERT 0 to address
Emit Transfer(TMP_600,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOrAdmin(ROLE_MINT)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_MINT)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1577.sol-BundableToken-msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 1577.sol-BundableToken-onlyAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BundableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_644(bool) = msg.sender == owner
TMP_645(None) = SOLIDITY_CALL require(bool)(TMP_644)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BundableToken-onlyOwnerOrAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || isAdmin(msg.sender,_role))

IRs:
TMP_639(bool) = msg.sender == owner
TMP_640(bool) = INTERNAL_CALL, Administrable.isAdmin(address,string)(msg.sender,_role)
TMP_641(bool) = TMP_639 || TMP_640
TMP_642(None) = SOLIDITY_CALL require(bool)(TMP_641)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BundableToken-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BundableToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1577.sol-BundableToken-removeAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-BundableToken-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].remove(_operator)

IRs:
REF_316(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_316', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(_operator,_role)

IRs:
Emit RoleRemoved(_operator,_role)"];
}
// Function: 1577.sol-BundableToken-removeRoleAll(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete roles[_role]

IRs:
REF_318(Roles.Role) -> roles[_role]
roles = delete REF_318 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemovedAll(_role)

IRs:
Emit RoleRemovedAll(_role)"];
}
// Function: 1577.sol-BundableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_548 = CONVERT 0 to address
owner(address) := TMP_548(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-BundableToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_LOCKUP = lockup

IRs:
ROLE_LOCKUP(string) := lockup(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ROLE_MINT = mint

IRs:
ROLE_MINT(string) := mint(string)"];
}
// Function: 1577.sol-BundableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1577.sol-BundableToken-startMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintStarted()

IRs:
Emit MintStarted()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cantMint()

IRs:
MODIFIER_CALL, MintableToken.cantMint()()"];
5->1;
}
// Function: 1577.sol-BundableToken-totalSupply()
digraph{
}
// Function: 1577.sol-BundableToken-transfer(address,uint256)
digraph{
}
// Function: 1577.sol-BundableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1577.sol-BundableToken-transferLocked(address,uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value >= _lockAmount)

IRs:
TMP_466(bool) = _value >= _lockAmount
TMP_467(None) = SOLIDITY_CALL require(bool)(TMP_466)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockCount = _expiresAtList.length

IRs:
REF_286 -> LENGTH _expiresAtList
lockCount(uint256) := REF_286(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockCount > 0

IRs:
TMP_468(bool) = lockCount > 0
CONDITION TMP_468"];
3->4[label="True"];
3->18[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(lockAmountEach,remainder) = _lockAmount.divRemain(lockCount)

IRs:
TUPLE_2(uint256,uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divRemain(uint256,uint256), arguments:['_lockAmount', 'lockCount'] 
lockAmountEach(uint256)= UNPACK TUPLE_2 index: 0 
remainder(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lockAmountEach > 0

IRs:
TMP_469(bool) = lockAmountEach > 0
CONDITION TMP_469"];
7->10[label="True"];
7->17[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < lockCount

IRs:
TMP_470(bool) = i < lockCount
CONDITION TMP_470"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
i == (lockCount - 1) && remainder > 0

IRs:
TMP_471(uint256) = lockCount - 1
TMP_472(bool) = i == TMP_471
TMP_473(bool) = remainder > 0
TMP_474(bool) = TMP_472 && TMP_473
CONDITION TMP_474"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockAmountEach = lockAmountEach.add(remainder)

IRs:
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockAmountEach', 'remainder'] 
lockAmountEach(uint256) := TMP_475(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lock(_to,lockAmountEach,_expiresAtList[i])

IRs:
REF_289(uint256) -> _expiresAtList[i]
INTERNAL_CALL, Lockable.lock(address,uint256,uint256)(_to,lockAmountEach,REF_289)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_477(uint256) := i(uint256)
i(uint256) = i + 1"];
16->11;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
transfer(_to,_value)

IRs:
TMP_478(bool) = INTERNAL_CALL, ReliableToken.transfer(address,uint256)(_to,_value)
RETURN TMP_478"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotExceedLock(msg.sender,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(msg.sender,_value)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
22->1;
}
// Function: 1577.sol-BundableToken-transferLockedFrom(address,address,uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value >= _lockAmount)

IRs:
TMP_485(bool) = _value >= _lockAmount
TMP_486(None) = SOLIDITY_CALL require(bool)(TMP_485)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockCount = _expiresAtList.length

IRs:
REF_290 -> LENGTH _expiresAtList
lockCount(uint256) := REF_290(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockCount > 0

IRs:
TMP_487(bool) = lockCount > 0
CONDITION TMP_487"];
3->4[label="True"];
3->18[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(lockAmountEach,remainder) = _lockAmount.divRemain(lockCount)

IRs:
TUPLE_3(uint256,uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divRemain(uint256,uint256), arguments:['_lockAmount', 'lockCount'] 
lockAmountEach(uint256)= UNPACK TUPLE_3 index: 0 
remainder(uint256)= UNPACK TUPLE_3 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lockAmountEach > 0

IRs:
TMP_488(bool) = lockAmountEach > 0
CONDITION TMP_488"];
7->10[label="True"];
7->17[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < lockCount

IRs:
TMP_489(bool) = i < lockCount
CONDITION TMP_489"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
i == (lockCount - 1) && remainder > 0

IRs:
TMP_490(uint256) = lockCount - 1
TMP_491(bool) = i == TMP_490
TMP_492(bool) = remainder > 0
TMP_493(bool) = TMP_491 && TMP_492
CONDITION TMP_493"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockAmountEach = lockAmountEach.add(remainder)

IRs:
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockAmountEach', 'remainder'] 
lockAmountEach(uint256) := TMP_494(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lock(_to,lockAmountEach,_expiresAtList[i])

IRs:
REF_293(uint256) -> _expiresAtList[i]
INTERNAL_CALL, Lockable.lock(address,uint256,uint256)(_to,lockAmountEach,REF_293)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_496(uint256) := i(uint256)
i(uint256) = i + 1"];
16->11;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
transferFrom(_from,_to,_value)

IRs:
TMP_497(bool) = INTERNAL_CALL, ReliableToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_497"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotExceedLock(_from,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(_from,_value)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
22->1;
}
// Function: 1577.sol-BundableToken-transferLockedMultiply(address[],uint256[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = _recipients.length

IRs:
REF_374 -> LENGTH _recipients
length(uint256) := REF_374(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(length > 0)

IRs:
TMP_618(bool) = length > 0
TMP_619(None) = SOLIDITY_CALL require(bool)(TMP_618)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(length == _values.length && length == _lockAmounts.length)

IRs:
REF_375 -> LENGTH _values
TMP_620(bool) = length == REF_375
REF_376 -> LENGTH _lockAmounts
TMP_621(bool) = length == REF_376
TMP_622(bool) = TMP_620 && TMP_621
TMP_623(None) = SOLIDITY_CALL require(bool)(TMP_622)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_defaultExpiresAtList.length > 0)

IRs:
REF_377 -> LENGTH _defaultExpiresAtList
TMP_624(bool) = REF_377 > 0
TMP_625(None) = SOLIDITY_CALL require(bool)(TMP_624)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < length

IRs:
TMP_626(bool) = i < length
CONDITION TMP_626"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(transferLocked(_recipients[i],_values[i],_lockAmounts[i],_defaultExpiresAtList))

IRs:
REF_378(address) -> _recipients[i]
REF_379(uint256) -> _values[i]
REF_380(uint256) -> _lockAmounts[i]
TMP_627(bool) = INTERNAL_CALL, ReliableToken.transferLocked(address,uint256,uint256,uint256[])(REF_378,REF_379,REF_380,_defaultExpiresAtList)
TMP_628(None) = SOLIDITY_CALL require(bool)(TMP_627)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_629(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
12->1;
}
// Function: 1577.sol-BundableToken-transferMultiply(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = _recipients.length

IRs:
REF_370 -> LENGTH _recipients
length(uint256) := REF_370(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(length > 0)

IRs:
TMP_610(bool) = length > 0
TMP_611(None) = SOLIDITY_CALL require(bool)(TMP_610)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(length == _values.length)

IRs:
REF_371 -> LENGTH _values
TMP_612(bool) = length == REF_371
TMP_613(None) = SOLIDITY_CALL require(bool)(TMP_612)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < length

IRs:
TMP_614(bool) = i < length
CONDITION TMP_614"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(transfer(_recipients[i],_values[i]))

IRs:
REF_372(address) -> _recipients[i]
REF_373(uint256) -> _values[i]
TMP_615(bool) = INTERNAL_CALL, ReliableToken.transfer(address,uint256)(REF_372,REF_373)
TMP_616(None) = SOLIDITY_CALL require(bool)(TMP_615)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_617(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-BundableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-BundableToken-unlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(grantedLocks[_granted].length > 0)

IRs:
REF_298(Lockable.Lock[]) -> grantedLocks[_granted]
REF_299 -> LENGTH REF_298
TMP_518(bool) = REF_299 > 0
TMP_519(None) = SOLIDITY_CALL require(bool)(TMP_518)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete grantedLocks[_granted]

IRs:
REF_300(Lockable.Lock[]) -> grantedLocks[_granted]
grantedLocks = delete REF_300 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UnlockedAll(_granted)

IRs:
Emit UnlockedAll(_granted)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
4->1;
}
// Function: 1577.sol-BundableToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1577.sol-BundableToken-whenNotExceedLock(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
lockedAmount = lockedAmountOf(_granted)

IRs:
TMP_631(uint256) = INTERNAL_CALL, Lockable.lockedAmountOf(address)(_granted)
lockedAmount(uint256) := TMP_631(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balance = balanceOf(_granted)

IRs:
TMP_632(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_granted)
balance(uint256) := TMP_632(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balance > lockedAmount && balance.sub(lockedAmount) >= _value)

IRs:
TMP_633(bool) = balance > lockedAmount
TMP_634(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['balance', 'lockedAmount'] 
TMP_635(bool) = TMP_634 >= _value
TMP_636(bool) = TMP_633 && TMP_635
TMP_637(None) = SOLIDITY_CALL require(bool)(TMP_636)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1577.sol-BundableToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_646 = UnaryType.BANG paused 
TMP_647(None) = SOLIDITY_CALL require(bool)(TMP_646)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BundableToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_648(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_141(uint256) -> balances[_who]
TMP_211(bool) = _value <= REF_141
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_142(uint256) -> balances[_who]
REF_143(uint256) -> balances[_who]
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_143', '_value'] 
REF_142(uint256) (->balances) := TMP_213(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_214(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_216 = CONVERT 0 to address
Emit Transfer(_who,TMP_216,_value)"];
}
// Function: 1577.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 1577.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 1577.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 1577.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1577.sol-BurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_124(mapping(address => uint256)) -> allowed[msg.sender]
REF_125(uint256) -> REF_124[_spender]
oldValue(uint256) := REF_125(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_197(bool) = _subtractedValue > oldValue
CONDITION TMP_197"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_126(mapping(address => uint256)) -> allowed[msg.sender]
REF_127(uint256) -> REF_126[_spender]
REF_127(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_128(mapping(address => uint256)) -> allowed[msg.sender]
REF_129(uint256) -> REF_128[_spender]
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_129(uint256) (->allowed) := TMP_198(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_131(mapping(address => uint256)) -> allowed[msg.sender]
REF_132(uint256) -> REF_131[_spender]
Emit Approval(msg.sender,_spender,REF_132)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-BurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_117(mapping(address => uint256)) -> allowed[msg.sender]
REF_118(uint256) -> REF_117[_spender]
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_120', '_addedValue'] 
REF_118(uint256) (->allowed) := TMP_195(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_122(mapping(address => uint256)) -> allowed[msg.sender]
REF_123(uint256) -> REF_122[_spender]
Emit Approval(msg.sender,_spender,REF_123)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-BurnableToken-msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 1577.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 1577.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 1577.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1577.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1577.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1577.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1577.sol-ERC20-totalSupply()
digraph{
}
// Function: 1577.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1577.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1577.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1577.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1577.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1577.sol-IOAtoken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_426(uint256) -> balances[_who]
TMP_773(bool) = _value <= REF_426
TMP_774(None) = SOLIDITY_CALL require(bool)(TMP_773)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_427(uint256) -> balances[_who]
REF_428(uint256) -> balances[_who]
TMP_775(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_428', '_value'] 
REF_427(uint256) (->balances) := TMP_775(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_776(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_776(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_778 = CONVERT 0 to address
Emit Transfer(_who,TMP_778,_value)"];
}
// Function: 1577.sol-IOAtoken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_762 = CONVERT 0 to address
TMP_763(bool) = _newOwner != TMP_762
TMP_764(None) = SOLIDITY_CALL require(bool)(TMP_763)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-IOAtoken-addAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-IOAtoken-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].add(_operator)

IRs:
REF_421(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_421', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(_operator,_role)

IRs:
Emit RoleAdded(_operator,_role)"];
}
// Function: 1577.sol-IOAtoken-allowance(address,address)
digraph{
}
// Function: 1577.sol-IOAtoken-approve(address,uint256)
digraph{
}
// Function: 1577.sol-IOAtoken-balanceOf(address)
digraph{
}
// Function: 1577.sol-IOAtoken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1577.sol-IOAtoken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_842 = UnaryType.BANG mintingFinished 
TMP_843(None) = SOLIDITY_CALL require(bool)(TMP_842)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-IOAtoken-cantMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(mintingFinished)

IRs:
TMP_844(None) = SOLIDITY_CALL require(bool)(mintingFinished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-IOAtoken-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].check(_operator)

IRs:
REF_417(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_417', '_operator'] "];
}
// Function: 1577.sol-IOAtoken-claimAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRoleAll(_role)

IRs:
INTERNAL_CALL, RBAC.removeRoleAll(string)(_role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,_role)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-IOAtoken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = INITIAL_SUPPLY

IRs:
totalSupply_(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = INITIAL_SUPPLY

IRs:
REF_477(uint256) -> balances[msg.sender]
REF_477(uint256) (->balances) := INITIAL_SUPPLY(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0x0,msg.sender,INITIAL_SUPPLY)

IRs:
Emit Transfer(0,msg.sender,INITIAL_SUPPLY)"];
}
// Function: 1577.sol-IOAtoken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_456(mapping(address => uint256)) -> allowed[msg.sender]
REF_457(uint256) -> REF_456[_spender]
oldValue(uint256) := REF_457(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_794(bool) = _subtractedValue > oldValue
CONDITION TMP_794"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_458(mapping(address => uint256)) -> allowed[msg.sender]
REF_459(uint256) -> REF_458[_spender]
REF_459(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_460(mapping(address => uint256)) -> allowed[msg.sender]
REF_461(uint256) -> REF_460[_spender]
TMP_795(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_461(uint256) (->allowed) := TMP_795(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_463(mapping(address => uint256)) -> allowed[msg.sender]
REF_464(uint256) -> REF_463[_spender]
Emit Approval(msg.sender,_spender,REF_464)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-IOAtoken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_717(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1577.sol-IOAtoken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1577.sol-IOAtoken-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[_role].has(_operator)

IRs:
REF_419(Roles.Role) -> roles[_role]
TMP_751(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_419', '_operator'] 
RETURN TMP_751"];
}
// Function: 1577.sol-IOAtoken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_449(mapping(address => uint256)) -> allowed[msg.sender]
REF_450(uint256) -> REF_449[_spender]
REF_451(mapping(address => uint256)) -> allowed[msg.sender]
REF_452(uint256) -> REF_451[_spender]
TMP_792(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_452', '_addedValue'] 
REF_450(uint256) (->allowed) := TMP_792(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_454(mapping(address => uint256)) -> allowed[msg.sender]
REF_455(uint256) -> REF_454[_spender]
Emit Approval(msg.sender,_spender,REF_455)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-IOAtoken-isAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_addr,_role)

IRs:
TMP_742(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_addr,_role)
RETURN TMP_742"];
}
// Function: 1577.sol-IOAtoken-lock(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_718(bool) = _amount > 0
TMP_719(None) = SOLIDITY_CALL require(bool)(TMP_718)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_expiresAt > now)

IRs:
TMP_720(bool) = _expiresAt > now
TMP_721(None) = SOLIDITY_CALL require(bool)(TMP_720)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
grantedLocks[_granted].push(Lock(_amount,_expiresAt))

IRs:
REF_401(Lockable.Lock[]) -> grantedLocks[_granted]
TMP_722(Lockable.Lock) = new Lock(_amount,_expiresAt)
REF_403 -> LENGTH REF_401
TMP_724(uint256) := REF_403(uint256)
TMP_725(uint256) = TMP_724 + 1
REF_403(uint256) (->grantedLocks) := TMP_725(uint256)
REF_404(Lockable.Lock) -> REF_401[TMP_724]
REF_404(Lockable.Lock) (->grantedLocks) := TMP_722(Lockable.Lock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Locked(_granted,_amount,_expiresAt)

IRs:
Emit Locked(_granted,_amount,_expiresAt)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
5->1;
}
// Function: 1577.sol-IOAtoken-lockedAmountOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_granted != address(0))

IRs:
TMP_732 = CONVERT 0 to address
TMP_733(bool) = _granted != TMP_732
TMP_734(None) = SOLIDITY_CALL require(bool)(TMP_733)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockedAmount = 0

IRs:
lockedAmount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lockedCount = grantedLocks[_granted].length

IRs:
REF_408(Lockable.Lock[]) -> grantedLocks[_granted]
REF_409 -> LENGTH REF_408
lockedCount(uint256) := REF_409(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
lockedCount > 0

IRs:
TMP_735(bool) = lockedCount > 0
CONDITION TMP_735"];
4->5[label="True"];
4->14[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
locks = grantedLocks[_granted]

IRs:
REF_410(Lockable.Lock[]) -> grantedLocks[_granted]
locks(Lockable.Lock[]) = ['REF_410(Lockable.Lock[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->14;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < locks.length

IRs:
REF_411 -> LENGTH locks
TMP_736(bool) = i < REF_411
CONDITION TMP_736"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
now < locks[i].expiresAt

IRs:
REF_412(Lockable.Lock) -> locks[i]
REF_413(uint256) -> REF_412.expiresAt
TMP_737(bool) = now < REF_413
CONDITION TMP_737"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lockedAmount = lockedAmount.add(locks[i].amount)

IRs:
REF_415(Lockable.Lock) -> locks[i]
REF_416(uint256) -> REF_415.amount
TMP_738(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockedAmount', 'REF_416'] 
lockedAmount(uint256) := TMP_738(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_739(uint256) := i(uint256)
i(uint256) = i + 1"];
13->9;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
lockedAmount

IRs:
RETURN lockedAmount"];
}
// Function: 1577.sol-IOAtoken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_807(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_807(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_474(uint256) -> balances[_to]
REF_475(uint256) -> balances[_to]
TMP_808(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_475', '_amount'] 
REF_474(uint256) (->balances) := TMP_808(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_810 = CONVERT 0 to address
Emit Transfer(TMP_810,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOrAdmin(ROLE_MINT)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_MINT)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1577.sol-IOAtoken-msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 1577.sol-IOAtoken-onlyAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-IOAtoken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_837(bool) = msg.sender == owner
TMP_838(None) = SOLIDITY_CALL require(bool)(TMP_837)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-IOAtoken-onlyOwnerOrAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || isAdmin(msg.sender,_role))

IRs:
TMP_832(bool) = msg.sender == owner
TMP_833(bool) = INTERNAL_CALL, Administrable.isAdmin(address,string)(msg.sender,_role)
TMP_834(bool) = TMP_832 || TMP_833
TMP_835(None) = SOLIDITY_CALL require(bool)(TMP_834)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-IOAtoken-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-IOAtoken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1577.sol-IOAtoken-removeAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-IOAtoken-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].remove(_operator)

IRs:
REF_423(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_423', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(_operator,_role)

IRs:
Emit RoleRemoved(_operator,_role)"];
}
// Function: 1577.sol-IOAtoken-removeRoleAll(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete roles[_role]

IRs:
REF_425(Roles.Role) -> roles[_role]
roles = delete REF_425 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemovedAll(_role)

IRs:
Emit RoleRemovedAll(_role)"];
}
// Function: 1577.sol-IOAtoken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_758 = CONVERT 0 to address
owner(address) := TMP_758(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-IOAtoken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_LOCKUP = lockup

IRs:
ROLE_LOCKUP(string) := lockup(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ROLE_MINT = mint

IRs:
ROLE_MINT(string) := mint(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = IOcean

IRs:
name(string) := IOcean(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = IOA

IRs:
symbol(string) := IOA(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint32) := 18(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
INITIAL_SUPPLY = 210000000 * (10 ** uint256(decimals))

IRs:
TMP_821 = CONVERT decimals to uint256
TMP_822(uint256) = 10 ** TMP_821
TMP_823(uint256) = 210000000 * TMP_822
INITIAL_SUPPLY(uint256) := TMP_823(uint256)"];
}
// Function: 1577.sol-IOAtoken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1577.sol-IOAtoken-startMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintStarted()

IRs:
Emit MintStarted()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cantMint()

IRs:
MODIFIER_CALL, MintableToken.cantMint()()"];
5->1;
}
// Function: 1577.sol-IOAtoken-totalSupply()
digraph{
}
// Function: 1577.sol-IOAtoken-transfer(address,uint256)
digraph{
}
// Function: 1577.sol-IOAtoken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1577.sol-IOAtoken-transferLocked(address,uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value >= _lockAmount)

IRs:
TMP_676(bool) = _value >= _lockAmount
TMP_677(None) = SOLIDITY_CALL require(bool)(TMP_676)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockCount = _expiresAtList.length

IRs:
REF_393 -> LENGTH _expiresAtList
lockCount(uint256) := REF_393(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockCount > 0

IRs:
TMP_678(bool) = lockCount > 0
CONDITION TMP_678"];
3->4[label="True"];
3->18[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(lockAmountEach,remainder) = _lockAmount.divRemain(lockCount)

IRs:
TUPLE_4(uint256,uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divRemain(uint256,uint256), arguments:['_lockAmount', 'lockCount'] 
lockAmountEach(uint256)= UNPACK TUPLE_4 index: 0 
remainder(uint256)= UNPACK TUPLE_4 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lockAmountEach > 0

IRs:
TMP_679(bool) = lockAmountEach > 0
CONDITION TMP_679"];
7->10[label="True"];
7->17[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < lockCount

IRs:
TMP_680(bool) = i < lockCount
CONDITION TMP_680"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
i == (lockCount - 1) && remainder > 0

IRs:
TMP_681(uint256) = lockCount - 1
TMP_682(bool) = i == TMP_681
TMP_683(bool) = remainder > 0
TMP_684(bool) = TMP_682 && TMP_683
CONDITION TMP_684"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockAmountEach = lockAmountEach.add(remainder)

IRs:
TMP_685(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockAmountEach', 'remainder'] 
lockAmountEach(uint256) := TMP_685(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lock(_to,lockAmountEach,_expiresAtList[i])

IRs:
REF_396(uint256) -> _expiresAtList[i]
INTERNAL_CALL, Lockable.lock(address,uint256,uint256)(_to,lockAmountEach,REF_396)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_687(uint256) := i(uint256)
i(uint256) = i + 1"];
16->11;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
transfer(_to,_value)

IRs:
TMP_688(bool) = INTERNAL_CALL, ReliableToken.transfer(address,uint256)(_to,_value)
RETURN TMP_688"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotExceedLock(msg.sender,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(msg.sender,_value)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
22->1;
}
// Function: 1577.sol-IOAtoken-transferLockedFrom(address,address,uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value >= _lockAmount)

IRs:
TMP_695(bool) = _value >= _lockAmount
TMP_696(None) = SOLIDITY_CALL require(bool)(TMP_695)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockCount = _expiresAtList.length

IRs:
REF_397 -> LENGTH _expiresAtList
lockCount(uint256) := REF_397(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockCount > 0

IRs:
TMP_697(bool) = lockCount > 0
CONDITION TMP_697"];
3->4[label="True"];
3->18[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(lockAmountEach,remainder) = _lockAmount.divRemain(lockCount)

IRs:
TUPLE_5(uint256,uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divRemain(uint256,uint256), arguments:['_lockAmount', 'lockCount'] 
lockAmountEach(uint256)= UNPACK TUPLE_5 index: 0 
remainder(uint256)= UNPACK TUPLE_5 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lockAmountEach > 0

IRs:
TMP_698(bool) = lockAmountEach > 0
CONDITION TMP_698"];
7->10[label="True"];
7->17[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < lockCount

IRs:
TMP_699(bool) = i < lockCount
CONDITION TMP_699"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
i == (lockCount - 1) && remainder > 0

IRs:
TMP_700(uint256) = lockCount - 1
TMP_701(bool) = i == TMP_700
TMP_702(bool) = remainder > 0
TMP_703(bool) = TMP_701 && TMP_702
CONDITION TMP_703"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockAmountEach = lockAmountEach.add(remainder)

IRs:
TMP_704(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockAmountEach', 'remainder'] 
lockAmountEach(uint256) := TMP_704(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lock(_to,lockAmountEach,_expiresAtList[i])

IRs:
REF_400(uint256) -> _expiresAtList[i]
INTERNAL_CALL, Lockable.lock(address,uint256,uint256)(_to,lockAmountEach,REF_400)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_706(uint256) := i(uint256)
i(uint256) = i + 1"];
16->11;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
transferFrom(_from,_to,_value)

IRs:
TMP_707(bool) = INTERNAL_CALL, ReliableToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_707"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotExceedLock(_from,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(_from,_value)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
22->1;
}
// Function: 1577.sol-IOAtoken-transferLockedMultiply(address[],uint256[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = _recipients.length

IRs:
REF_386 -> LENGTH _recipients
length(uint256) := REF_386(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(length > 0)

IRs:
TMP_660(bool) = length > 0
TMP_661(None) = SOLIDITY_CALL require(bool)(TMP_660)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(length == _values.length && length == _lockAmounts.length)

IRs:
REF_387 -> LENGTH _values
TMP_662(bool) = length == REF_387
REF_388 -> LENGTH _lockAmounts
TMP_663(bool) = length == REF_388
TMP_664(bool) = TMP_662 && TMP_663
TMP_665(None) = SOLIDITY_CALL require(bool)(TMP_664)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_defaultExpiresAtList.length > 0)

IRs:
REF_389 -> LENGTH _defaultExpiresAtList
TMP_666(bool) = REF_389 > 0
TMP_667(None) = SOLIDITY_CALL require(bool)(TMP_666)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < length

IRs:
TMP_668(bool) = i < length
CONDITION TMP_668"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(transferLocked(_recipients[i],_values[i],_lockAmounts[i],_defaultExpiresAtList))

IRs:
REF_390(address) -> _recipients[i]
REF_391(uint256) -> _values[i]
REF_392(uint256) -> _lockAmounts[i]
TMP_669(bool) = INTERNAL_CALL, ReliableToken.transferLocked(address,uint256,uint256,uint256[])(REF_390,REF_391,REF_392,_defaultExpiresAtList)
TMP_670(None) = SOLIDITY_CALL require(bool)(TMP_669)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_671(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
12->1;
}
// Function: 1577.sol-IOAtoken-transferMultiply(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = _recipients.length

IRs:
REF_382 -> LENGTH _recipients
length(uint256) := REF_382(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(length > 0)

IRs:
TMP_652(bool) = length > 0
TMP_653(None) = SOLIDITY_CALL require(bool)(TMP_652)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(length == _values.length)

IRs:
REF_383 -> LENGTH _values
TMP_654(bool) = length == REF_383
TMP_655(None) = SOLIDITY_CALL require(bool)(TMP_654)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < length

IRs:
TMP_656(bool) = i < length
CONDITION TMP_656"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(transfer(_recipients[i],_values[i]))

IRs:
REF_384(address) -> _recipients[i]
REF_385(uint256) -> _values[i]
TMP_657(bool) = INTERNAL_CALL, ReliableToken.transfer(address,uint256)(REF_384,REF_385)
TMP_658(None) = SOLIDITY_CALL require(bool)(TMP_657)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_659(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-IOAtoken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-IOAtoken-unlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(grantedLocks[_granted].length > 0)

IRs:
REF_405(Lockable.Lock[]) -> grantedLocks[_granted]
REF_406 -> LENGTH REF_405
TMP_728(bool) = REF_406 > 0
TMP_729(None) = SOLIDITY_CALL require(bool)(TMP_728)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete grantedLocks[_granted]

IRs:
REF_407(Lockable.Lock[]) -> grantedLocks[_granted]
grantedLocks = delete REF_407 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UnlockedAll(_granted)

IRs:
Emit UnlockedAll(_granted)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
4->1;
}
// Function: 1577.sol-IOAtoken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1577.sol-IOAtoken-whenNotExceedLock(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
lockedAmount = lockedAmountOf(_granted)

IRs:
TMP_824(uint256) = INTERNAL_CALL, Lockable.lockedAmountOf(address)(_granted)
lockedAmount(uint256) := TMP_824(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balance = balanceOf(_granted)

IRs:
TMP_825(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_granted)
balance(uint256) := TMP_825(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balance > lockedAmount && balance.sub(lockedAmount) >= _value)

IRs:
TMP_826(bool) = balance > lockedAmount
TMP_827(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['balance', 'lockedAmount'] 
TMP_828(bool) = TMP_827 >= _value
TMP_829(bool) = TMP_826 && TMP_828
TMP_830(None) = SOLIDITY_CALL require(bool)(TMP_829)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1577.sol-IOAtoken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_839 = UnaryType.BANG paused 
TMP_840(None) = SOLIDITY_CALL require(bool)(TMP_839)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-IOAtoken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_841(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Lockable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_92 = CONVERT 0 to address
TMP_93(bool) = _newOwner != TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-Lockable-addAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Lockable-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].add(_operator)

IRs:
REF_28(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_28', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(_operator,_role)

IRs:
Emit RoleAdded(_operator,_role)"];
}
// Function: 1577.sol-Lockable-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].check(_operator)

IRs:
REF_24(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_24', '_operator'] "];
}
// Function: 1577.sol-Lockable-claimAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRoleAll(_role)

IRs:
INTERNAL_CALL, RBAC.removeRoleAll(string)(_role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,_role)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-Lockable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1577.sol-Lockable-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[_role].has(_operator)

IRs:
REF_26(Roles.Role) -> roles[_role]
TMP_81(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_26', '_operator'] 
RETURN TMP_81"];
}
// Function: 1577.sol-Lockable-isAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_addr,_role)

IRs:
TMP_72(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_addr,_role)
RETURN TMP_72"];
}
// Function: 1577.sol-Lockable-lock(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_96(bool) = _amount > 0
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_expiresAt > now)

IRs:
TMP_98(bool) = _expiresAt > now
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
grantedLocks[_granted].push(Lock(_amount,_expiresAt))

IRs:
REF_33(Lockable.Lock[]) -> grantedLocks[_granted]
TMP_100(Lockable.Lock) = new Lock(_amount,_expiresAt)
REF_35 -> LENGTH REF_33
TMP_102(uint256) := REF_35(uint256)
TMP_103(uint256) = TMP_102 + 1
REF_35(uint256) (->grantedLocks) := TMP_103(uint256)
REF_36(Lockable.Lock) -> REF_33[TMP_102]
REF_36(Lockable.Lock) (->grantedLocks) := TMP_100(Lockable.Lock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Locked(_granted,_amount,_expiresAt)

IRs:
Emit Locked(_granted,_amount,_expiresAt)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
5->1;
}
// Function: 1577.sol-Lockable-lockedAmountOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_granted != address(0))

IRs:
TMP_110 = CONVERT 0 to address
TMP_111(bool) = _granted != TMP_110
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockedAmount = 0

IRs:
lockedAmount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lockedCount = grantedLocks[_granted].length

IRs:
REF_40(Lockable.Lock[]) -> grantedLocks[_granted]
REF_41 -> LENGTH REF_40
lockedCount(uint256) := REF_41(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
lockedCount > 0

IRs:
TMP_113(bool) = lockedCount > 0
CONDITION TMP_113"];
4->5[label="True"];
4->14[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
locks = grantedLocks[_granted]

IRs:
REF_42(Lockable.Lock[]) -> grantedLocks[_granted]
locks(Lockable.Lock[]) = ['REF_42(Lockable.Lock[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->14;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < locks.length

IRs:
REF_43 -> LENGTH locks
TMP_114(bool) = i < REF_43
CONDITION TMP_114"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
now < locks[i].expiresAt

IRs:
REF_44(Lockable.Lock) -> locks[i]
REF_45(uint256) -> REF_44.expiresAt
TMP_115(bool) = now < REF_45
CONDITION TMP_115"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lockedAmount = lockedAmount.add(locks[i].amount)

IRs:
REF_47(Lockable.Lock) -> locks[i]
REF_48(uint256) -> REF_47.amount
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockedAmount', 'REF_48'] 
lockedAmount(uint256) := TMP_116(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_117(uint256) := i(uint256)
i(uint256) = i + 1"];
13->9;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
lockedAmount

IRs:
RETURN lockedAmount"];
}
// Function: 1577.sol-Lockable-onlyAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Lockable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_124(bool) = msg.sender == owner
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Lockable-onlyOwnerOrAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || isAdmin(msg.sender,_role))

IRs:
TMP_119(bool) = msg.sender == owner
TMP_120(bool) = INTERNAL_CALL, Administrable.isAdmin(address,string)(msg.sender,_role)
TMP_121(bool) = TMP_119 || TMP_120
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Lockable-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Lockable-removeAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Lockable-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].remove(_operator)

IRs:
REF_30(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_30', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(_operator,_role)

IRs:
Emit RoleRemoved(_operator,_role)"];
}
// Function: 1577.sol-Lockable-removeRoleAll(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete roles[_role]

IRs:
REF_32(Roles.Role) -> roles[_role]
roles = delete REF_32 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemovedAll(_role)

IRs:
Emit RoleRemovedAll(_role)"];
}
// Function: 1577.sol-Lockable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_88 = CONVERT 0 to address
owner(address) := TMP_88(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-Lockable-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_LOCKUP = lockup

IRs:
ROLE_LOCKUP(string) := lockup(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ROLE_MINT = mint

IRs:
ROLE_MINT(string) := mint(string)"];
}
// Function: 1577.sol-Lockable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Lockable-unlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(grantedLocks[_granted].length > 0)

IRs:
REF_37(Lockable.Lock[]) -> grantedLocks[_granted]
REF_38 -> LENGTH REF_37
TMP_106(bool) = REF_38 > 0
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete grantedLocks[_granted]

IRs:
REF_39(Lockable.Lock[]) -> grantedLocks[_granted]
grantedLocks = delete REF_39 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UnlockedAll(_granted)

IRs:
Emit UnlockedAll(_granted)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
4->1;
}
// Function: 1577.sol-MintableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_240 = CONVERT 0 to address
TMP_241(bool) = _newOwner != TMP_240
TMP_242(None) = SOLIDITY_CALL require(bool)(TMP_241)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-MintableToken-addAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-MintableToken-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].add(_operator)

IRs:
REF_150(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_150', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(_operator,_role)

IRs:
Emit RoleAdded(_operator,_role)"];
}
// Function: 1577.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 1577.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 1577.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 1577.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_292 = UnaryType.BANG mintingFinished 
TMP_293(None) = SOLIDITY_CALL require(bool)(TMP_292)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-MintableToken-cantMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(mintingFinished)

IRs:
TMP_294(None) = SOLIDITY_CALL require(bool)(mintingFinished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-MintableToken-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].check(_operator)

IRs:
REF_146(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_146', '_operator'] "];
}
// Function: 1577.sol-MintableToken-claimAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRoleAll(_role)

IRs:
INTERNAL_CALL, RBAC.removeRoleAll(string)(_role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,_role)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-MintableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1577.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_180(mapping(address => uint256)) -> allowed[msg.sender]
REF_181(uint256) -> REF_180[_spender]
oldValue(uint256) := REF_181(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_258(bool) = _subtractedValue > oldValue
CONDITION TMP_258"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_182(mapping(address => uint256)) -> allowed[msg.sender]
REF_183(uint256) -> REF_182[_spender]
REF_183(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_184(mapping(address => uint256)) -> allowed[msg.sender]
REF_185(uint256) -> REF_184[_spender]
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_185(uint256) (->allowed) := TMP_259(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_187(mapping(address => uint256)) -> allowed[msg.sender]
REF_188(uint256) -> REF_187[_spender]
Emit Approval(msg.sender,_spender,REF_188)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1577.sol-MintableToken-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[_role].has(_operator)

IRs:
REF_148(Roles.Role) -> roles[_role]
TMP_229(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_148', '_operator'] 
RETURN TMP_229"];
}
// Function: 1577.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_173(mapping(address => uint256)) -> allowed[msg.sender]
REF_174(uint256) -> REF_173[_spender]
REF_175(mapping(address => uint256)) -> allowed[msg.sender]
REF_176(uint256) -> REF_175[_spender]
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_176', '_addedValue'] 
REF_174(uint256) (->allowed) := TMP_256(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_178(mapping(address => uint256)) -> allowed[msg.sender]
REF_179(uint256) -> REF_178[_spender]
Emit Approval(msg.sender,_spender,REF_179)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-MintableToken-isAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_addr,_role)

IRs:
TMP_220(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_addr,_role)
RETURN TMP_220"];
}
// Function: 1577.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_271(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_198(uint256) -> balances[_to]
REF_199(uint256) -> balances[_to]
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_199', '_amount'] 
REF_198(uint256) (->balances) := TMP_272(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_274 = CONVERT 0 to address
Emit Transfer(TMP_274,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOrAdmin(ROLE_MINT)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_MINT)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1577.sol-MintableToken-msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 1577.sol-MintableToken-onlyAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_290(bool) = msg.sender == owner
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-MintableToken-onlyOwnerOrAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || isAdmin(msg.sender,_role))

IRs:
TMP_285(bool) = msg.sender == owner
TMP_286(bool) = INTERNAL_CALL, Administrable.isAdmin(address,string)(msg.sender,_role)
TMP_287(bool) = TMP_285 || TMP_286
TMP_288(None) = SOLIDITY_CALL require(bool)(TMP_287)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-MintableToken-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-MintableToken-removeAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-MintableToken-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].remove(_operator)

IRs:
REF_152(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_152', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(_operator,_role)

IRs:
Emit RoleRemoved(_operator,_role)"];
}
// Function: 1577.sol-MintableToken-removeRoleAll(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete roles[_role]

IRs:
REF_154(Roles.Role) -> roles[_role]
roles = delete REF_154 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemovedAll(_role)

IRs:
Emit RoleRemovedAll(_role)"];
}
// Function: 1577.sol-MintableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_236 = CONVERT 0 to address
owner(address) := TMP_236(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-MintableToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_LOCKUP = lockup

IRs:
ROLE_LOCKUP(string) := lockup(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ROLE_MINT = mint

IRs:
ROLE_MINT(string) := mint(string)"];
}
// Function: 1577.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 1577.sol-MintableToken-startMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintStarted()

IRs:
Emit MintStarted()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cantMint()

IRs:
MODIFIER_CALL, MintableToken.cantMint()()"];
5->1;
}
// Function: 1577.sol-MintableToken-totalSupply()
digraph{
}
// Function: 1577.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 1577.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1577.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = _newOwner != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1577.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_34(bool) = msg.sender == owner
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
owner(address) := TMP_26(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Pausable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = _newOwner != TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1577.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_141(bool) = msg.sender == owner
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1577.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_127 = CONVERT 0 to address
owner(address) := TMP_127(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1577.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1577.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_143 = UnaryType.BANG paused 
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_145(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-RBAC-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].add(_operator)

IRs:
REF_10(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_10', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(_operator,_role)

IRs:
Emit RoleAdded(_operator,_role)"];
}
// Function: 1577.sol-RBAC-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].check(_operator)

IRs:
REF_6(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_6', '_operator'] "];
}
// Function: 1577.sol-RBAC-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[_role].has(_operator)

IRs:
REF_8(Roles.Role) -> roles[_role]
TMP_18(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_8', '_operator'] 
RETURN TMP_18"];
}
// Function: 1577.sol-RBAC-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-RBAC-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].remove(_operator)

IRs:
REF_12(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_12', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(_operator,_role)

IRs:
Emit RoleRemoved(_operator,_role)"];
}
// Function: 1577.sol-RBAC-removeRoleAll(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete roles[_role]

IRs:
REF_14(Roles.Role) -> roles[_role]
roles = delete REF_14 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemovedAll(_role)

IRs:
Emit RoleRemovedAll(_role)"];
}
// Function: 1577.sol-ReliableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_226(uint256) -> balances[_who]
TMP_350(bool) = _value <= REF_226
TMP_351(None) = SOLIDITY_CALL require(bool)(TMP_350)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_227(uint256) -> balances[_who]
REF_228(uint256) -> balances[_who]
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_228', '_value'] 
REF_227(uint256) (->balances) := TMP_352(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_353(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_355 = CONVERT 0 to address
Emit Transfer(_who,TMP_355,_value)"];
}
// Function: 1577.sol-ReliableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_339 = CONVERT 0 to address
TMP_340(bool) = _newOwner != TMP_339
TMP_341(None) = SOLIDITY_CALL require(bool)(TMP_340)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1577.sol-ReliableToken-addAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-ReliableToken-addRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].add(_operator)

IRs:
REF_221(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.add(Roles.Role,address), arguments:['REF_221', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleAdded(_operator,_role)

IRs:
Emit RoleAdded(_operator,_role)"];
}
// Function: 1577.sol-ReliableToken-allowance(address,address)
digraph{
}
// Function: 1577.sol-ReliableToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(_spender,_value)

IRs:
TMP_435(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(_spender,_value)
RETURN TMP_435"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1577.sol-ReliableToken-balanceOf(address)
digraph{
}
// Function: 1577.sol-ReliableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1577.sol-ReliableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_453 = UnaryType.BANG mintingFinished 
TMP_454(None) = SOLIDITY_CALL require(bool)(TMP_453)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-ReliableToken-cantMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(mintingFinished)

IRs:
TMP_455(None) = SOLIDITY_CALL require(bool)(mintingFinished)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-ReliableToken-checkRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].check(_operator)

IRs:
REF_217(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.check(Roles.Role,address), arguments:['REF_217', '_operator'] "];
}
// Function: 1577.sol-ReliableToken-claimAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRoleAll(_role)

IRs:
INTERNAL_CALL, RBAC.removeRoleAll(string)(_role)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.addRole(address,string)(msg.sender,_role)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-ReliableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1577.sol-ReliableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.decreaseApproval(_spender,_subtractedValue)

IRs:
TMP_439(bool) = INTERNAL_CALL, StandardToken.decreaseApproval(address,uint256)(_spender,_subtractedValue)
RETURN TMP_439"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1577.sol-ReliableToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_441(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1577.sol-ReliableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1577.sol-ReliableToken-hasRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roles[_role].has(_operator)

IRs:
REF_219(Roles.Role) -> roles[_role]
TMP_328(bool) = LIBRARY_CALL, dest:Roles, function:Roles.has(Roles.Role,address), arguments:['REF_219', '_operator'] 
RETURN TMP_328"];
}
// Function: 1577.sol-ReliableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.increaseApproval(_spender,_addedValue)

IRs:
TMP_437(bool) = INTERNAL_CALL, StandardToken.increaseApproval(address,uint256)(_spender,_addedValue)
RETURN TMP_437"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1577.sol-ReliableToken-isAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hasRole(_addr,_role)

IRs:
TMP_319(bool) = INTERNAL_CALL, RBAC.hasRole(address,string)(_addr,_role)
RETURN TMP_319"];
}
// Function: 1577.sol-ReliableToken-lock(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_295(bool) = _amount > 0
TMP_296(None) = SOLIDITY_CALL require(bool)(TMP_295)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_expiresAt > now)

IRs:
TMP_297(bool) = _expiresAt > now
TMP_298(None) = SOLIDITY_CALL require(bool)(TMP_297)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
grantedLocks[_granted].push(Lock(_amount,_expiresAt))

IRs:
REF_201(Lockable.Lock[]) -> grantedLocks[_granted]
TMP_299(Lockable.Lock) = new Lock(_amount,_expiresAt)
REF_203 -> LENGTH REF_201
TMP_301(uint256) := REF_203(uint256)
TMP_302(uint256) = TMP_301 + 1
REF_203(uint256) (->grantedLocks) := TMP_302(uint256)
REF_204(Lockable.Lock) -> REF_201[TMP_301]
REF_204(Lockable.Lock) (->grantedLocks) := TMP_299(Lockable.Lock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Locked(_granted,_amount,_expiresAt)

IRs:
Emit Locked(_granted,_amount,_expiresAt)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
5->1;
}
// Function: 1577.sol-ReliableToken-lockedAmountOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_granted != address(0))

IRs:
TMP_309 = CONVERT 0 to address
TMP_310(bool) = _granted != TMP_309
TMP_311(None) = SOLIDITY_CALL require(bool)(TMP_310)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockedAmount = 0

IRs:
lockedAmount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lockedCount = grantedLocks[_granted].length

IRs:
REF_208(Lockable.Lock[]) -> grantedLocks[_granted]
REF_209 -> LENGTH REF_208
lockedCount(uint256) := REF_209(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
lockedCount > 0

IRs:
TMP_312(bool) = lockedCount > 0
CONDITION TMP_312"];
4->5[label="True"];
4->14[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
locks = grantedLocks[_granted]

IRs:
REF_210(Lockable.Lock[]) -> grantedLocks[_granted]
locks(Lockable.Lock[]) = ['REF_210(Lockable.Lock[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->14;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < locks.length

IRs:
REF_211 -> LENGTH locks
TMP_313(bool) = i < REF_211
CONDITION TMP_313"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
now < locks[i].expiresAt

IRs:
REF_212(Lockable.Lock) -> locks[i]
REF_213(uint256) -> REF_212.expiresAt
TMP_314(bool) = now < REF_213
CONDITION TMP_314"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lockedAmount = lockedAmount.add(locks[i].amount)

IRs:
REF_215(Lockable.Lock) -> locks[i]
REF_216(uint256) -> REF_215.amount
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockedAmount', 'REF_216'] 
lockedAmount(uint256) := TMP_315(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_316(uint256) := i(uint256)
i(uint256) = i + 1"];
13->9;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
lockedAmount

IRs:
RETURN lockedAmount"];
}
// Function: 1577.sol-ReliableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_384(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_274(uint256) -> balances[_to]
REF_275(uint256) -> balances[_to]
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_275', '_amount'] 
REF_274(uint256) (->balances) := TMP_385(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_387 = CONVERT 0 to address
Emit Transfer(TMP_387,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOrAdmin(ROLE_MINT)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_MINT)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1577.sol-ReliableToken-msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 1577.sol-ReliableToken-onlyAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-ReliableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_448(bool) = msg.sender == owner
TMP_449(None) = SOLIDITY_CALL require(bool)(TMP_448)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-ReliableToken-onlyOwnerOrAdmin(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || isAdmin(msg.sender,_role))

IRs:
TMP_443(bool) = msg.sender == owner
TMP_444(bool) = INTERNAL_CALL, Administrable.isAdmin(address,string)(msg.sender,_role)
TMP_445(bool) = TMP_443 || TMP_444
TMP_446(None) = SOLIDITY_CALL require(bool)(TMP_445)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-ReliableToken-onlyRole(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkRole(msg.sender,_role)

IRs:
INTERNAL_CALL, RBAC.checkRole(address,string)(msg.sender,_role)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-ReliableToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1577.sol-ReliableToken-removeAdmin(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
removeRole(_operator,_role)

IRs:
INTERNAL_CALL, RBAC.removeRole(address,string)(_operator,_role)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-ReliableToken-removeRole(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roles[_role].remove(_operator)

IRs:
REF_223(Roles.Role) -> roles[_role]
LIBRARY_CALL, dest:Roles, function:Roles.remove(Roles.Role,address), arguments:['REF_223', '_operator'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemoved(_operator,_role)

IRs:
Emit RoleRemoved(_operator,_role)"];
}
// Function: 1577.sol-ReliableToken-removeRoleAll(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete roles[_role]

IRs:
REF_225(Roles.Role) -> roles[_role]
roles = delete REF_225 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RoleRemovedAll(_role)

IRs:
Emit RoleRemovedAll(_role)"];
}
// Function: 1577.sol-ReliableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_335 = CONVERT 0 to address
owner(address) := TMP_335(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1577.sol-ReliableToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ROLE_LOCKUP = lockup

IRs:
ROLE_LOCKUP(string) := lockup(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ROLE_MINT = mint

IRs:
ROLE_MINT(string) := mint(string)"];
}
// Function: 1577.sol-ReliableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1577.sol-ReliableToken-startMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintStarted()

IRs:
Emit MintStarted()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cantMint()

IRs:
MODIFIER_CALL, MintableToken.cantMint()()"];
5->1;
}
// Function: 1577.sol-ReliableToken-totalSupply()
digraph{
}
// Function: 1577.sol-ReliableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_397(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_397"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotExceedLock(msg.sender,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(msg.sender,_value)"];
3->1;
}
// Function: 1577.sol-ReliableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_416(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_416"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotExceedLock(_from,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(_from,_value)"];
3->1;
}
// Function: 1577.sol-ReliableToken-transferLocked(address,uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value >= _lockAmount)

IRs:
TMP_400(bool) = _value >= _lockAmount
TMP_401(None) = SOLIDITY_CALL require(bool)(TMP_400)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockCount = _expiresAtList.length

IRs:
REF_277 -> LENGTH _expiresAtList
lockCount(uint256) := REF_277(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockCount > 0

IRs:
TMP_402(bool) = lockCount > 0
CONDITION TMP_402"];
3->4[label="True"];
3->18[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(lockAmountEach,remainder) = _lockAmount.divRemain(lockCount)

IRs:
TUPLE_0(uint256,uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divRemain(uint256,uint256), arguments:['_lockAmount', 'lockCount'] 
lockAmountEach(uint256)= UNPACK TUPLE_0 index: 0 
remainder(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lockAmountEach > 0

IRs:
TMP_403(bool) = lockAmountEach > 0
CONDITION TMP_403"];
7->10[label="True"];
7->17[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < lockCount

IRs:
TMP_404(bool) = i < lockCount
CONDITION TMP_404"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
i == (lockCount - 1) && remainder > 0

IRs:
TMP_405(uint256) = lockCount - 1
TMP_406(bool) = i == TMP_405
TMP_407(bool) = remainder > 0
TMP_408(bool) = TMP_406 && TMP_407
CONDITION TMP_408"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockAmountEach = lockAmountEach.add(remainder)

IRs:
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockAmountEach', 'remainder'] 
lockAmountEach(uint256) := TMP_409(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lock(_to,lockAmountEach,_expiresAtList[i])

IRs:
REF_280(uint256) -> _expiresAtList[i]
INTERNAL_CALL, Lockable.lock(address,uint256,uint256)(_to,lockAmountEach,REF_280)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_411(uint256) := i(uint256)
i(uint256) = i + 1"];
16->11;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
transfer(_to,_value)

IRs:
TMP_412(bool) = INTERNAL_CALL, ReliableToken.transfer(address,uint256)(_to,_value)
RETURN TMP_412"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotExceedLock(msg.sender,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(msg.sender,_value)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
22->1;
}
// Function: 1577.sol-ReliableToken-transferLockedFrom(address,address,uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value >= _lockAmount)

IRs:
TMP_419(bool) = _value >= _lockAmount
TMP_420(None) = SOLIDITY_CALL require(bool)(TMP_419)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
lockCount = _expiresAtList.length

IRs:
REF_281 -> LENGTH _expiresAtList
lockCount(uint256) := REF_281(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockCount > 0

IRs:
TMP_421(bool) = lockCount > 0
CONDITION TMP_421"];
3->4[label="True"];
3->18[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(lockAmountEach,remainder) = _lockAmount.divRemain(lockCount)

IRs:
TUPLE_1(uint256,uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divRemain(uint256,uint256), arguments:['_lockAmount', 'lockCount'] 
lockAmountEach(uint256)= UNPACK TUPLE_1 index: 0 
remainder(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lockAmountEach > 0

IRs:
TMP_422(bool) = lockAmountEach > 0
CONDITION TMP_422"];
7->10[label="True"];
7->17[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < lockCount

IRs:
TMP_423(bool) = i < lockCount
CONDITION TMP_423"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
i == (lockCount - 1) && remainder > 0

IRs:
TMP_424(uint256) = lockCount - 1
TMP_425(bool) = i == TMP_424
TMP_426(bool) = remainder > 0
TMP_427(bool) = TMP_425 && TMP_426
CONDITION TMP_427"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockAmountEach = lockAmountEach.add(remainder)

IRs:
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockAmountEach', 'remainder'] 
lockAmountEach(uint256) := TMP_428(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lock(_to,lockAmountEach,_expiresAtList[i])

IRs:
REF_284(uint256) -> _expiresAtList[i]
INTERNAL_CALL, Lockable.lock(address,uint256,uint256)(_to,lockAmountEach,REF_284)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_430(uint256) := i(uint256)
i(uint256) = i + 1"];
16->11;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
transferFrom(_from,_to,_value)

IRs:
TMP_431(bool) = INTERNAL_CALL, ReliableToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_431"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotExceedLock(_from,_value)

IRs:
MODIFIER_CALL, ReliableToken.whenNotExceedLock(address,uint256)(_from,_value)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
22->1;
}
// Function: 1577.sol-ReliableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1577.sol-ReliableToken-unlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(grantedLocks[_granted].length > 0)

IRs:
REF_205(Lockable.Lock[]) -> grantedLocks[_granted]
REF_206 -> LENGTH REF_205
TMP_305(bool) = REF_206 > 0
TMP_306(None) = SOLIDITY_CALL require(bool)(TMP_305)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete grantedLocks[_granted]

IRs:
REF_207(Lockable.Lock[]) -> grantedLocks[_granted]
grantedLocks = delete REF_207 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UnlockedAll(_granted)

IRs:
Emit UnlockedAll(_granted)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwnerOrAdmin(ROLE_LOCKUP)

IRs:
MODIFIER_CALL, Administrable.onlyOwnerOrAdmin(string)(ROLE_LOCKUP)"];
4->1;
}
// Function: 1577.sol-ReliableToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1577.sol-ReliableToken-whenNotExceedLock(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
lockedAmount = lockedAmountOf(_granted)

IRs:
TMP_456(uint256) = INTERNAL_CALL, Lockable.lockedAmountOf(address)(_granted)
lockedAmount(uint256) := TMP_456(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balance = balanceOf(_granted)

IRs:
TMP_457(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_granted)
balance(uint256) := TMP_457(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balance > lockedAmount && balance.sub(lockedAmount) >= _value)

IRs:
TMP_458(bool) = balance > lockedAmount
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['balance', 'lockedAmount'] 
TMP_460(bool) = TMP_459 >= _value
TMP_461(bool) = TMP_458 && TMP_460
TMP_462(None) = SOLIDITY_CALL require(bool)(TMP_461)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1577.sol-ReliableToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_450 = UnaryType.BANG paused 
TMP_451(None) = SOLIDITY_CALL require(bool)(TMP_450)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-ReliableToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_452(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1577.sol-Roles-add(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
role.bearer[addr] = true

IRs:
REF_0(mapping(address => bool)) -> role.bearer
REF_1(bool) -> REF_0[addr]
REF_1(bool) (->role) := True(bool)"];
}
// Function: 1577.sol-Roles-check(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(has(role,addr))

IRs:
TMP_15(bool) = INTERNAL_CALL, Roles.has(Roles.Role,address)(role,addr)
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
}
// Function: 1577.sol-Roles-has(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
role.bearer[addr]

IRs:
REF_4(mapping(address => bool)) -> role.bearer
REF_5(bool) -> REF_4[addr]
RETURN REF_5"];
}
// Function: 1577.sol-Roles-remove(Roles.Role,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
role.bearer[addr] = false

IRs:
REF_2(mapping(address => bool)) -> role.bearer
REF_3(bool) -> REF_2[addr]
REF_3(bool) (->role) := False(bool)"];
}
// Function: 1577.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1577.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1577.sol-SafeMath-divRemain(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
quotient = div(numerator,denominator)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.div(uint256,uint256)(numerator,denominator)
quotient(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
remainder = sub(numerator,mul(denominator,quotient))

IRs:
TMP_13(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(denominator,quotient)
TMP_14(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(numerator,TMP_13)
remainder(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(quotient,remainder)

IRs:
RETURN quotient,remainder"];
}
// Function: 1577.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1577.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1577.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_81(mapping(address => uint256)) -> allowed[_owner]
REF_82(uint256) -> REF_81[_spender]
RETURN REF_82"];
}
// Function: 1577.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
REF_80(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1577.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_90(mapping(address => uint256)) -> allowed[msg.sender]
REF_91(uint256) -> REF_90[_spender]
oldValue(uint256) := REF_91(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_180(bool) = _subtractedValue > oldValue
CONDITION TMP_180"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_92(mapping(address => uint256)) -> allowed[msg.sender]
REF_93(uint256) -> REF_92[_spender]
REF_93(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_94(mapping(address => uint256)) -> allowed[msg.sender]
REF_95(uint256) -> REF_94[_spender]
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_95(uint256) (->allowed) := TMP_181(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_97(mapping(address => uint256)) -> allowed[msg.sender]
REF_98(uint256) -> REF_97[_spender]
Emit Approval(msg.sender,_spender,REF_98)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_83(mapping(address => uint256)) -> allowed[msg.sender]
REF_84(uint256) -> REF_83[_spender]
REF_85(mapping(address => uint256)) -> allowed[msg.sender]
REF_86(uint256) -> REF_85[_spender]
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_86', '_addedValue'] 
REF_84(uint256) (->allowed) := TMP_178(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_88(mapping(address => uint256)) -> allowed[msg.sender]
REF_89(uint256) -> REF_88[_spender]
Emit Approval(msg.sender,_spender,REF_89)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1577.sol-StandardToken-msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 1577.sol-StandardToken-totalSupply()
digraph{
}
// Function: 1577.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1577.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_166 = CONVERT 0 to address
TMP_167(bool) = _to != TMP_166
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_65(uint256) -> balances[_from]
TMP_169(bool) = _value <= REF_65
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_66(mapping(address => uint256)) -> allowed[_from]
REF_67(uint256) -> REF_66[msg.sender]
TMP_171(bool) = _value <= REF_67
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_68(uint256) -> balances[_from]
REF_69(uint256) -> balances[_from]
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_69', '_value'] 
REF_68(uint256) (->balances) := TMP_173(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_71(uint256) -> balances[_to]
REF_72(uint256) -> balances[_to]
TMP_174(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_72', '_value'] 
REF_71(uint256) (->balances) := TMP_174(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_74(mapping(address => uint256)) -> allowed[_from]
REF_75(uint256) -> REF_74[msg.sender]
REF_76(mapping(address => uint256)) -> allowed[_from]
REF_77(uint256) -> REF_76[msg.sender]
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_77', '_value'] 
REF_75(uint256) (->allowed) := TMP_175(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
