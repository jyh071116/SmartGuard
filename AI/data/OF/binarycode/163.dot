digraph G {
// Function: 163.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
}
// Function: 163.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 163.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_12(bool) = _value <= REF_0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _to != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-allowance(address,address)
digraph{
}
// Function: 163.sol-CXYToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_spender])

IRs:
REF_164(uint256) -> balances[_spender]
TMP_168(bool) = _value <= REF_164
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_165(mapping(address => uint256)) -> allowed[msg.sender]
REF_166(uint256) -> REF_165[_spender]
REF_166(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-balanceOf(address)
digraph{
}
// Function: 163.sol-CXYToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_167(uint256) -> balances[msg.sender]
TMP_171(bool) = _value <= REF_167
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_168(uint256) -> balances[msg.sender]
REF_169(uint256) -> balances[msg.sender]
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_169', '_value'] 
REF_168(uint256) (->balances) := TMP_173(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_174(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_174(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
INITIAL_SUPPLY = totalSupply_

IRs:
INITIAL_SUPPLY(uint256) := totalSupply_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-changeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_72(bool) = msg.sender == admin
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_74 = CONVERT 0 to address
TMP_75(bool) = _newAdmin != TMP_74
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_newAdmin] = balances[_newAdmin].add(balances[admin])

IRs:
REF_93(uint256) -> balances[_newAdmin]
REF_94(uint256) -> balances[_newAdmin]
REF_96(uint256) -> balances[admin]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_94', 'REF_96'] 
REF_93(uint256) (->balances) := TMP_77(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[admin] = 0

IRs:
REF_97(uint256) -> balances[admin]
REF_97(uint256) (->balances) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
admin = _newAdmin

IRs:
admin(address) := _newAdmin(address)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = INITIAL_SUPPLY

IRs:
totalSupply_(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = INITIAL_SUPPLY

IRs:
REF_92(uint256) -> balances[msg.sender]
REF_92(uint256) (->balances) := INITIAL_SUPPLY(uint256)"];
}
// Function: 163.sol-CXYToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_59(bool) = _subtractedValue >= oldValue
CONDITION TMP_59"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_60(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_70(bool) = msg.value > 0
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
}
// Function: 163.sol-CXYToken-freeze(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_88(bool) = msg.sender == admin
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_90 = CONVERT 0 to address
TMP_91(bool) = _target != TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenAccount[_target] = _freeze

IRs:
REF_103(bool) -> frozenAccount[_target]
REF_103(bool) (->frozenAccount) := _freeze(bool)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-freezeWithTimestamp(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_93(bool) = msg.sender == admin
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_95 = CONVERT 0 to address
TMP_96(bool) = _target != TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenTimestamp[_target] = _timestamp

IRs:
REF_104(uint256) -> frozenTimestamp[_target]
REF_104(uint256) (->frozenTimestamp) := _timestamp(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-generateToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_78(bool) = msg.sender == admin
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_80 = CONVERT 0 to address
TMP_81(bool) = _target != TMP_80
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_target] = balances[_target].add(_amount)

IRs:
REF_98(uint256) -> balances[_target]
REF_99(uint256) -> balances[_target]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_99', '_amount'] 
REF_98(uint256) (->balances) := TMP_83(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_84(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
INITIAL_SUPPLY = totalSupply_

IRs:
INITIAL_SUPPLY(uint256) := totalSupply_(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-getBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_174(uint256) -> balances[_owner]
RETURN REF_174"];
}
// Function: 163.sol-CXYToken-getFrozenAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_179 = CONVERT 0 to address
TMP_180(bool) = _target != TMP_179
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
frozenAccount[_target]

IRs:
REF_173(bool) -> frozenAccount[_target]
RETURN REF_173"];
}
// Function: 163.sol-CXYToken-getFrozenTimestamp(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_176 = CONVERT 0 to address
TMP_177(bool) = _target != TMP_176
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
frozenTimestamp[_target]

IRs:
REF_172(uint256) -> frozenTimestamp[_target]
RETURN REF_172"];
}
// Function: 163.sol-CXYToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_186(bool) = msg.sender == admin
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(admin)

IRs:
TMP_188(None) = SOLIDITY_CALL selfdestruct(address)(admin)"];
}
// Function: 163.sol-CXYToken-multiFreeze(address[],bool[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_98(bool) = msg.sender == admin
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_targets.length == _freezes.length)

IRs:
REF_105 -> LENGTH _targets
REF_106 -> LENGTH _freezes
TMP_100(bool) = REF_105 == REF_106
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
len = _targets.length

IRs:
REF_107 -> LENGTH _targets
len(uint256) := REF_107(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(len > 0)

IRs:
TMP_102(bool) = len > 0
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < len

IRs:
TMP_104(bool) = i < len
CONDITION TMP_104"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_target = _targets[i]

IRs:
REF_108(address) -> _targets[i]
_target(address) := REF_108(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_105 = CONVERT 0 to address
TMP_106(bool) = _target != TMP_105
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_freeze = _freezes[i]

IRs:
REF_109(bool) -> _freezes[i]
_freeze(bool) := REF_109(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
frozenAccount[_target] = _freeze

IRs:
REF_110(bool) -> frozenAccount[_target]
REF_110(bool) (->frozenAccount) := _freeze(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i = i.add(1)

IRs:
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['i', '1'] 
i(uint256) := TMP_108(uint256)"];
13->8;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-multiFreezeWithTimestamp(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_109(bool) = msg.sender == admin
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_targets.length == _timestamps.length)

IRs:
REF_112 -> LENGTH _targets
REF_113 -> LENGTH _timestamps
TMP_111(bool) = REF_112 == REF_113
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
len = _targets.length

IRs:
REF_114 -> LENGTH _targets
len(uint256) := REF_114(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(len > 0)

IRs:
TMP_113(bool) = len > 0
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < len

IRs:
TMP_115(bool) = i < len
CONDITION TMP_115"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_target = _targets[i]

IRs:
REF_115(address) -> _targets[i]
_target(address) := REF_115(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_116 = CONVERT 0 to address
TMP_117(bool) = _target != TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_timestamp = _timestamps[i]

IRs:
REF_116(uint256) -> _timestamps[i]
_timestamp(uint256) := REF_116(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
frozenTimestamp[_target] = _timestamp

IRs:
REF_117(uint256) -> frozenTimestamp[_target]
REF_117(uint256) (->frozenTimestamp) := _timestamp(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i = i.add(1)

IRs:
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['i', '1'] 
i(uint256) := TMP_119(uint256)"];
13->8;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-multiTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_119(bool) -> frozenAccount[msg.sender]
TMP_120 = UnaryType.BANG REF_119 
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > frozenTimestamp[msg.sender])

IRs:
REF_120(uint256) -> frozenTimestamp[msg.sender]
TMP_122(bool) = now > REF_120
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_tos.length == _values.length)

IRs:
REF_121 -> LENGTH _tos
REF_122 -> LENGTH _values
TMP_124(bool) = REF_121 == REF_122
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
len = _tos.length

IRs:
REF_123 -> LENGTH _tos
len(uint256) := REF_123(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(len > 0)

IRs:
TMP_126(bool) = len > 0
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amount = 0

IRs:
amount(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < len

IRs:
TMP_128(bool) = i < len
CONDITION TMP_128"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
amount = amount.add(_values[i])

IRs:
REF_125(uint256) -> _values[i]
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amount', 'REF_125'] 
amount(uint256) := TMP_129(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i = i.add(1)

IRs:
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['i', '1'] 
i(uint256) := TMP_130(uint256)"];
12->10;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(amount <= balances[msg.sender])

IRs:
REF_127(uint256) -> balances[msg.sender]
TMP_131(bool) = amount <= REF_127
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->24;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < len

IRs:
TMP_133(bool) = j < len
CONDITION TMP_133"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
_to = _tos[j]

IRs:
REF_128(address) -> _tos[j]
_to(address) := REF_128(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_134 = CONVERT 0 to address
TMP_135(bool) = _to != TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balances[_to] = balances[_to].add(_values[j])

IRs:
REF_129(uint256) -> balances[_to]
REF_130(uint256) -> balances[_to]
REF_132(uint256) -> _values[j]
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_130', 'REF_132'] 
REF_129(uint256) (->balances) := TMP_137(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_values[j])

IRs:
REF_133(uint256) -> balances[msg.sender]
REF_134(uint256) -> balances[msg.sender]
REF_136(uint256) -> _values[j]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_134', 'REF_136'] 
REF_133(uint256) (->balances) := TMP_138(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,_to,_values[j])

IRs:
REF_137(uint256) -> _values[j]
Emit Transfer(msg.sender,_to,REF_137)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
j = j.add(1)

IRs:
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['j', '1'] 
j(uint256) := TMP_140(uint256)"];
23->17;
24[label="Node Type: RETURN 24

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_182(bool) = msg.sender == admin
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _value

IRs:
name(string) := _value(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-setSymbol(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_184(bool) = msg.sender == admin
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _value

IRs:
symbol(string) := _value(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CXYToken

IRs:
name(string) := CXYToken(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CXY

IRs:
symbol(string) := CXY(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 100000000000000000

IRs:
INITIAL_SUPPLY(uint256) := 100000000000000000(uint256)"];
}
// Function: 163.sol-CXYToken-totalSupply()
digraph{
}
// Function: 163.sol-CXYToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_139(bool) -> frozenAccount[msg.sender]
TMP_141 = UnaryType.BANG REF_139 
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > frozenTimestamp[msg.sender])

IRs:
REF_140(uint256) -> frozenTimestamp[msg.sender]
TMP_143(bool) = now > REF_140
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_145 = CONVERT 0 to address
TMP_146(bool) = _to != TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_141(uint256) -> balances[msg.sender]
TMP_148(bool) = _value <= REF_141
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_142(uint256) -> balances[msg.sender]
REF_143(uint256) -> balances[msg.sender]
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_143', '_value'] 
REF_142(uint256) (->balances) := TMP_150(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_145(uint256) -> balances[_to]
REF_146(uint256) -> balances[_to]
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', '_value'] 
REF_145(uint256) (->balances) := TMP_151(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_148(bool) -> frozenAccount[_from]
TMP_153 = UnaryType.BANG REF_148 
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > frozenTimestamp[msg.sender])

IRs:
REF_149(uint256) -> frozenTimestamp[msg.sender]
TMP_155(bool) = now > REF_149
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_157 = CONVERT 0 to address
TMP_158(bool) = _to != TMP_157
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_150(uint256) -> balances[_from]
TMP_160(bool) = _value <= REF_150
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_151(mapping(address => uint256)) -> allowed[_from]
REF_152(uint256) -> REF_151[msg.sender]
TMP_162(bool) = _value <= REF_152
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_153(uint256) -> balances[_from]
REF_154(uint256) -> balances[_from]
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_154', '_value'] 
REF_153(uint256) (->balances) := TMP_164(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_156(uint256) -> balances[_to]
REF_157(uint256) -> balances[_to]
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_157', '_value'] 
REF_156(uint256) (->balances) := TMP_165(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_159(mapping(address => uint256)) -> allowed[_from]
REF_160(uint256) -> REF_159[msg.sender]
REF_161(mapping(address => uint256)) -> allowed[_from]
REF_162(uint256) -> REF_161[msg.sender]
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_162', '_value'] 
REF_160(uint256) (->allowed) := TMP_166(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-CXYToken-withdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_85(bool) = msg.sender == admin
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(_amount)

IRs:
Transfer dest:msg.sender value:_amount"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 163.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 163.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 163.sol-ERC20-totalSupply()
digraph{
}
// Function: 163.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 163.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 163.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 163.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 163.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 163.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_9(uint256) = _a + _b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_10(bool) = c >= _a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 163.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_5(uint256) = _a / _b
RETURN TMP_5"];
}
// Function: 163.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 163.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_6(bool) = _b <= _a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_8(uint256) = _a - _b
RETURN TMP_8"];
}
// Function: 163.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 163.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 163.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_42(bool) = _subtractedValue >= oldValue
CONDITION TMP_42"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_43(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 163.sol-StandardToken-totalSupply()
digraph{
}
// Function: 163.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 163.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_28(bool) = _value <= REF_16
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_30(bool) = _value <= REF_18
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _to != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_37(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
