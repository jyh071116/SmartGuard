digraph G {
// Function: 1653.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1653.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1653.sol-Tank-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1653.sol-Tank-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1653.sol-Tank-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_23(bool) = msg.sender == owner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1653.sol-Tank-withdrawEther(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
toAddress.transfer(amount)

IRs:
Transfer dest:toAddress value:amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 1653.sol-Tank-withdrawEtherInBatch(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(toAddressList.length == amountList.length)

IRs:
REF_15 -> LENGTH toAddressList
REF_16 -> LENGTH amountList
TMP_17(bool) = REF_15 == REF_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < toAddressList.length

IRs:
REF_17 -> LENGTH toAddressList
TMP_19(bool) = i < REF_17
CONDITION TMP_19"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
this.withdrawEther(toAddressList[i],amountList[i])

IRs:
REF_19(address) -> toAddressList[i]
REF_20(uint256) -> amountList[i]
HIGH_LEVEL_CALL, dest:this(address), function:withdrawEther, arguments:['REF_19', 'REF_20']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_21(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
8->1;
}
// Function: 1653.sol-Tank-withdrawInBatch(address[],address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenList.length == toAddressList.length)

IRs:
REF_2 -> LENGTH tokenList
REF_3 -> LENGTH toAddressList
TMP_7(bool) = REF_2 == REF_3
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(toAddressList.length == amountList.length)

IRs:
REF_4 -> LENGTH toAddressList
REF_5 -> LENGTH amountList
TMP_9(bool) = REF_4 == REF_5
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < toAddressList.length

IRs:
REF_6 -> LENGTH toAddressList
TMP_11(bool) = i < REF_6
CONDITION TMP_11"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
tokenList[i] == 0

IRs:
REF_7(address) -> tokenList[i]
TMP_12(bool) = REF_7 == 0
CONDITION TMP_12"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
this.withdrawEther(toAddressList[i],amountList[i])

IRs:
REF_9(address) -> toAddressList[i]
REF_10(uint256) -> amountList[i]
HIGH_LEVEL_CALL, dest:this(address), function:withdrawEther, arguments:['REF_9', 'REF_10']  "];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
this.withdrawToken(tokenList[i],toAddressList[i],amountList[i])

IRs:
REF_12(address) -> tokenList[i]
REF_13(address) -> toAddressList[i]
REF_14(uint256) -> amountList[i]
HIGH_LEVEL_CALL, dest:this(address), function:withdrawToken, arguments:['REF_12', 'REF_13', 'REF_14']  "];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_15(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
12->1;
}
// Function: 1653.sol-Tank-withdrawToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ERC20(token).transfer(toAddress,amount)

IRs:
TMP_4 = CONVERT token to ERC20
TMP_5(bool) = HIGH_LEVEL_CALL, dest:TMP_4(ERC20), function:transfer, arguments:['toAddress', 'amount']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 1653.sol-owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1653.sol-owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_0(bool) = msg.sender == owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
