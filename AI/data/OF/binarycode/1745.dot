digraph G {
// Function: 1745.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1745.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1745.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1745.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1745.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1745.sol-Whitelist-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _newOwner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1745.sol-Whitelist-addAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(who != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = who != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(whitelist[who] == 0)

IRs:
REF_0(uint256) -> whitelist[who]
TMP_23(bool) = REF_0 == 0
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelist[who] = nextUserId

IRs:
REF_1(uint256) -> whitelist[who]
REF_1(uint256) (->whitelist) := nextUserId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nextUserId ++

IRs:
TMP_25(uint256) := nextUserId(uint256)
nextUserId(uint256) = nextUserId + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Whitelisted(who)

IRs:
Emit Whitelisted(who)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1745.sol-Whitelist-addAddresses(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length <= 100)

IRs:
REF_2 -> LENGTH addresses
TMP_28(bool) = REF_2 <= 100
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
userId = nextUserId

IRs:
userId(uint256) := nextUserId(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->14;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < addresses.length

IRs:
REF_3 -> LENGTH addresses
TMP_30(bool) = i < REF_3
CONDITION TMP_30"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
who = addresses[i]

IRs:
REF_4(address) -> addresses[i]
who(address) := REF_4(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(whitelist[who] == 0)

IRs:
REF_5(uint256) -> whitelist[who]
TMP_31(bool) = REF_5 == 0
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
whitelist[who] = userId

IRs:
REF_6(uint256) -> whitelist[who]
REF_6(uint256) (->whitelist) := userId(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
userId ++

IRs:
TMP_33(uint256) := userId(uint256)
userId(uint256) = userId + 1"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Whitelisted(who)

IRs:
Emit Whitelisted(who)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_35(uint256) := i(uint256)
i(uint256) = i + 1"];
13->7;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
nextUserId = userId

IRs:
nextUserId(uint256) := userId(uint256)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 1745.sol-Whitelist-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1745.sol-Whitelist-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_37(bool) = msg.sender == owner
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1745.sol-Whitelist-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_12 = CONVERT 0 to address
owner(address) := TMP_12(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1745.sol-Whitelist-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
nextUserId = 1

IRs:
nextUserId(uint256) := 1(uint256)"];
}
// Function: 1745.sol-Whitelist-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
}
