digraph G {
// Function: 1770.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1770.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1770.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1770.sol-ERC20-totalSupply()
digraph{
}
// Function: 1770.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1770.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1770.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1770.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1770.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1770.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1770.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1770.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1770.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1770.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1770.sol-PreSale-_addBonus(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addBonusOfTop(holder,amount)

IRs:
INTERNAL_CALL, PreSale._addBonusOfTop(address,uint256)(holder,amount)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_topBonus()

IRs:
INTERNAL_CALL, PreSale._topBonus()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addBonusOfReferrer(holder,amount)

IRs:
INTERNAL_CALL, PreSale._addBonusOfReferrer(address,uint256)(holder,amount)"];
}
// Function: 1770.sol-PreSale-_addBonusOfReferrer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
holderReferrer[holder] == 0x0

IRs:
REF_46(address) -> holderReferrer[holder]
TMP_83(bool) = REF_46 == 0
CONDITION TMP_83"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
referrer = holderReferrer[holder]

IRs:
REF_47(address) -> holderReferrer[holder]
referrer(address) := REF_47(address)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
bonus = amount.div(2)

IRs:
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['amount', '2'] 
bonus(uint256) := TMP_84(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bonusMap[holder] = bonusMap[holder].add(bonus)

IRs:
REF_49(uint256) -> bonusMap[holder]
REF_50(uint256) -> bonusMap[holder]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_50', 'bonus'] 
REF_49(uint256) (->bonusMap) := TMP_85(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bonusMap[referrer] = bonusMap[referrer].add(bonus)

IRs:
REF_52(uint256) -> bonusMap[referrer]
REF_53(uint256) -> bonusMap[referrer]
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_53', 'bonus'] 
REF_52(uint256) (->bonusMap) := TMP_86(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_55(bool) -> _isConfirmed[holder]
CONDITION REF_55"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
bonusAmount = bonusAmount.add(bonus)

IRs:
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['bonusAmount', 'bonus'] 
bonusAmount(uint256) := TMP_87(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_isConfirmed[referrer]

IRs:
REF_57(bool) -> _isConfirmed[referrer]
CONDITION REF_57"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
bonusAmount = bonusAmount.add(bonus)

IRs:
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['bonusAmount', 'bonus'] 
bonusAmount(uint256) := TMP_88(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1770.sol-PreSale-_addBonusOfTop(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bonusOf = 0

IRs:
bonusOf(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
holdersOrder[holder] <= holdersCount.div(10)

IRs:
REF_15(uint256) -> holdersOrder[holder]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['holdersCount', '10'] 
TMP_61(bool) = REF_15 <= TMP_60
CONDITION TMP_61"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bonusOf = amount.div(10)

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['amount', '10'] 
bonusOf(uint256) := TMP_62(uint256)"];
3->7;
4[label="Node Type: IF 4

EXPRESSION:
holdersOrder[holder] <= holdersCount.mul(15).div(100)

IRs:
REF_18(uint256) -> holdersOrder[holder]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['holdersCount', '15'] 
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_63', '100'] 
TMP_65(bool) = REF_18 <= TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
bonusOf = amount.mul(5).div(100)

IRs:
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', '5'] 
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_66', '100'] 
bonusOf(uint256) := TMP_67(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
bonusOf == 0

IRs:
TMP_68(bool) = bonusOf == 0
CONDITION TMP_68"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
topMap[holder] = topMap[holder].add(bonusOf)

IRs:
REF_23(uint256) -> topMap[holder]
REF_24(uint256) -> topMap[holder]
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_24', 'bonusOf'] 
REF_23(uint256) (->topMap) := TMP_69(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_26(bool) -> _isConfirmed[holder]
CONDITION REF_26"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
bonusAmount = bonusAmount.add(bonusOf)

IRs:
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['bonusAmount', 'bonusOf'] 
bonusAmount(uint256) := TMP_70(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
}
// Function: 1770.sol-PreSale-_buyTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount >= MIN_AMOUNT)

IRs:
TMP_46(bool) = amount >= MIN_AMOUNT
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_1(bool) -> _isConfirmed[holder]
CONDITION REF_1"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
confirmedMap[holder] = confirmedMap[holder].add(amount)

IRs:
REF_2(uint256) -> confirmedMap[holder]
REF_3(uint256) -> confirmedMap[holder]
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_3', 'amount'] 
REF_2(uint256) (->confirmedMap) := TMP_48(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
confirmedAmount = confirmedAmount.add(amount)

IRs:
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['confirmedAmount', 'amount'] 
confirmedAmount(uint256) := TMP_49(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unconfirmedMap[holder] = unconfirmedMap[holder].add(amount)

IRs:
REF_6(uint256) -> unconfirmedMap[holder]
REF_7(uint256) -> unconfirmedMap[holder]
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_7', 'amount'] 
REF_6(uint256) (->unconfirmedMap) := TMP_50(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
holdersOrder[holder] == 0

IRs:
REF_9(uint256) -> holdersOrder[holder]
TMP_51(bool) = REF_9 == 0
CONDITION TMP_51"];
7->8[label="True"];
7->11[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
holders.push(holder)

IRs:
REF_11 -> LENGTH holders
TMP_53(uint256) := REF_11(uint256)
TMP_54(uint256) = TMP_53 + 1
REF_11(uint256) (->holders) := TMP_54(uint256)
REF_12(address) -> holders[TMP_53]
REF_12(address) (->holders) := holder(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
holdersOrder[holder] = holders.length

IRs:
REF_13(uint256) -> holdersOrder[holder]
REF_14 -> LENGTH holders
REF_13(uint256) (->holdersOrder) := REF_14(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
holdersCount ++

IRs:
TMP_55(uint256) := holdersCount(uint256)
holdersCount(uint256) = holdersCount + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_addBonus(holder,amount)

IRs:
INTERNAL_CALL, PreSale._addBonus(address,uint256)(holder,amount)"];
}
// Function: 1770.sol-PreSale-_canSetReferrer(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
holderReferrer[holder] == 0x0 && holder != referrer && referrer != 0x0 && holderReferrer[referrer] != holder

IRs:
REF_59(address) -> holderReferrer[holder]
TMP_89(bool) = REF_59 == 0
TMP_90(bool) = holder != referrer
TMP_91(bool) = TMP_89 && TMP_90
TMP_92(bool) = referrer != 0
TMP_93(bool) = TMP_91 && TMP_92
REF_60(address) -> holderReferrer[referrer]
TMP_94(bool) = REF_60 != holder
TMP_95(bool) = TMP_93 && TMP_94
RETURN TMP_95"];
}
// Function: 1770.sol-PreSale-_confirm(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmedMap[holder] = unconfirmedMap[holder]

IRs:
REF_65(uint256) -> confirmedMap[holder]
REF_66(uint256) -> unconfirmedMap[holder]
REF_65(uint256) (->confirmedMap) := REF_66(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unconfirmedMap[holder] = 0

IRs:
REF_67(uint256) -> unconfirmedMap[holder]
REF_67(uint256) (->unconfirmedMap) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
confirmedAmount = confirmedAmount.add(confirmedMap[holder])

IRs:
REF_69(uint256) -> confirmedMap[holder]
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['confirmedAmount', 'REF_69'] 
confirmedAmount(uint256) := TMP_102(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bonusAmount = bonusAmount.add(bonusMap[holder]).add(topMap[holder])

IRs:
REF_71(uint256) -> bonusMap[holder]
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['bonusAmount', 'REF_71'] 
REF_73(uint256) -> topMap[holder]
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_103', 'REF_73'] 
bonusAmount(uint256) := TMP_104(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_isConfirmed[holder] = true

IRs:
REF_74(bool) -> _isConfirmed[holder]
REF_74(bool) (->_isConfirmed) := True(bool)"];
}
// Function: 1770.sol-PreSale-_setReferrer(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holderReferrer[holder] = referrer

IRs:
REF_61(address) -> holderReferrer[holder]
REF_61(address) (->holderReferrer) := referrer(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_62(bool) -> _isConfirmed[holder]
CONDITION REF_62"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addBonusOfReferrer(holder,confirmedMap[holder])

IRs:
REF_63(uint256) -> confirmedMap[holder]
INTERNAL_CALL, PreSale._addBonusOfReferrer(address,uint256)(holder,REF_63)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_addBonusOfReferrer(holder,unconfirmedMap[holder])

IRs:
REF_64(uint256) -> unconfirmedMap[holder]
INTERNAL_CALL, PreSale._addBonusOfReferrer(address,uint256)(holder,REF_64)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1770.sol-PreSale-_topBonus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bonusFor = 0

IRs:
bonusFor(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
lastOf10 < holdersCount.div(10)

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['holdersCount', '10'] 
TMP_72(bool) = lastOf10 < TMP_71
CONDITION TMP_72"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
holder = holders[lastOf10 ++]

IRs:
TMP_73(uint256) := lastOf10(uint256)
lastOf10(uint256) = lastOf10 + 1
REF_29(address) -> holders[TMP_73]
holder(address) := REF_29(address)"];
5->23;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bonusFor = currentAmount.div(10)

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['currentAmount', '10'] 
bonusFor(uint256) := TMP_74(uint256)"];
7->14;
8[label="Node Type: IF 8

EXPRESSION:
lastOf15 < holdersCount.mul(15).div(100)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['holdersCount', '15'] 
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_75', '100'] 
TMP_77(bool) = lastOf15 < TMP_76
CONDITION TMP_77"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
holder = holders[lastOf15 ++]

IRs:
TMP_78(uint256) := lastOf15(uint256)
lastOf15(uint256) = lastOf15 + 1
REF_33(address) -> holders[TMP_78]
holder(address) := REF_33(address)"];
9->27;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
bonusFor = currentAmount.div(20)

IRs:
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['currentAmount', '20'] 
bonusFor(uint256) := TMP_79(uint256)"];
11->13;
12[label="Node Type: RETURN 12
"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
bonusFor <= topMap[holder]

IRs:
REF_35(uint256) -> topMap[holder]
TMP_80(bool) = bonusFor <= REF_35
CONDITION TMP_80"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: RETURN 16
"];
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_36(bool) -> _isConfirmed[holder]
CONDITION REF_36"];
18->19[label="True"];
18->21[label="False"];
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
diff = bonusFor - topMap[holder]

IRs:
REF_37(uint256) -> topMap[holder]
TMP_81(uint256) = bonusFor - REF_37
diff(uint256) := TMP_81(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
bonusAmount = bonusAmount.add(diff)

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['bonusAmount', 'diff'] 
bonusAmount(uint256) := TMP_82(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
topMap[holder] = bonusFor

IRs:
REF_39(uint256) -> topMap[holder]
REF_39(uint256) (->topMap) := bonusFor(uint256)"];
23[label="Node Type: IF 23

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_40(bool) -> _isConfirmed[holder]
CONDITION REF_40"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
currentAmount = confirmedMap[holder]

IRs:
REF_41(uint256) -> confirmedMap[holder]
currentAmount(uint256) := REF_41(uint256)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
currentAmount = unconfirmedMap[holder]

IRs:
REF_42(uint256) -> unconfirmedMap[holder]
currentAmount(uint256) := REF_42(uint256)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->7;
27[label="Node Type: IF 27

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_43(bool) -> _isConfirmed[holder]
CONDITION REF_43"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
currentAmount = confirmedMap[holder]

IRs:
REF_44(uint256) -> confirmedMap[holder]
currentAmount(uint256) := REF_44(uint256)"];
28->30;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
currentAmount = unconfirmedMap[holder]

IRs:
REF_45(uint256) -> unconfirmedMap[holder]
currentAmount(uint256) := REF_45(uint256)"];
29->30;
30[label="Node Type: END_IF 30
"];
30->11;
}
// Function: 1770.sol-PreSale-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _newOwner != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1770.sol-PreSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_buyTokens(holder,msg.value)

IRs:
INTERNAL_CALL, PreSale._buyTokens(address,uint256)(holder,msg.value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pending()

IRs:
MODIFIER_CALL, PreSale.pending()()"];
2->1;
}
// Function: 1770.sol-PreSale-buyTokensByReferrer(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
_canSetReferrer(holder,referrer)

IRs:
TMP_40(bool) = INTERNAL_CALL, PreSale._canSetReferrer(address,address)(holder,referrer)
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setReferrer(holder,referrer)

IRs:
INTERNAL_CALL, PreSale._setReferrer(address,address)(holder,referrer)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
amount = msg.value - OPERATIONS_FEE

IRs:
TMP_42(uint256) = msg.value - OPERATIONS_FEE
amount(uint256) := TMP_42(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
holder.transfer(OPERATIONS_FEE)

IRs:
Transfer dest:holder value:OPERATIONS_FEE"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_buyTokens(holder,amount)

IRs:
INTERNAL_CALL, PreSale._buyTokens(address,uint256)(holder,amount)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pending()

IRs:
MODIFIER_CALL, PreSale.pending()()"];
7->1;
}
// Function: 1770.sol-PreSale-calculateHolderPiece(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
confirmedMap[holder].add(bonusMap[holder]).add(topMap[holder])

IRs:
REF_90(uint256) -> confirmedMap[holder]
REF_92(uint256) -> bonusMap[holder]
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_90', 'REF_92'] 
REF_94(uint256) -> topMap[holder]
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_128', 'REF_94'] 
RETURN TMP_129"];
}
// Function: 1770.sol-PreSale-calculatePie()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
confirmedAmount.add(bonusAmount)

IRs:
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['confirmedAmount', 'bonusAmount'] 
RETURN TMP_125"];
}
// Function: 1770.sol-PreSale-calculateTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply.mul(calculateHolderPiece(holder)).div(calculatePie())

IRs:
TMP_121(uint256) = INTERNAL_CALL, PreSale.calculateHolderPiece(address)(holder)
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalSupply', 'TMP_121'] 
TMP_123(uint256) = INTERNAL_CALL, PreSale.calculatePie()()
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_122', 'TMP_123'] 
RETURN TMP_124"];
}
// Function: 1770.sol-PreSale-confirm(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! _isConfirmed[holder])

IRs:
REF_95(bool) -> _isConfirmed[holder]
TMP_130 = UnaryType.BANG REF_95 
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_confirm(holder)

IRs:
INTERNAL_CALL, PreSale._confirm(address)(holder)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isAbleConfirmation()

IRs:
MODIFIER_CALL, PreSale.isAbleConfirmation()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1770.sol-PreSale-confirmBatch(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _holders.length

IRs:
REF_96 -> LENGTH _holders
TMP_135(bool) = i < REF_96
CONDITION TMP_135"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! _isConfirmed[_holders[i]]

IRs:
REF_97(address) -> _holders[i]
REF_98(bool) -> _isConfirmed[REF_97]
TMP_136 = UnaryType.BANG REF_98 
CONDITION TMP_136"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_confirm(_holders[i])

IRs:
REF_99(address) -> _holders[i]
INTERNAL_CALL, PreSale._confirm(address)(REF_99)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_138(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isAbleConfirmation()

IRs:
MODIFIER_CALL, PreSale.isAbleConfirmation()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->3;
}
// Function: 1770.sol-PreSale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1770.sol-PreSale-constructor(uint256,uint256,uint256,ERC20)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_32(bool) = _startTime >= now
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_startTime < _endTime)

IRs:
TMP_34(bool) = _startTime < _endTime
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token = _token

IRs:
token(ERC20) := _token(ERC20)"];
}
// Function: 1770.sol-PreSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_buyTokens(msg.sender,msg.value)

IRs:
INTERNAL_CALL, PreSale._buyTokens(address,uint256)(msg.sender,msg.value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pending()

IRs:
MODIFIER_CALL, PreSale.pending()()"];
2->1;
}
// Function: 1770.sol-PreSale-getCurrentPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
calculatePie().div(totalSupply)

IRs:
TMP_126(uint256) = INTERNAL_CALL, PreSale.calculatePie()()
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_126', 'totalSupply'] 
RETURN TMP_127"];
}
// Function: 1770.sol-PreSale-getRaised()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(confirmedAmount)

IRs:
Transfer dest:owner value:confirmedAmount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hasClosed()

IRs:
MODIFIER_CALL, PreSale.hasClosed()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isGoalReached()

IRs:
MODIFIER_CALL, PreSale.isGoalReached()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1770.sol-PreSale-getRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
holder = msg.sender

IRs:
holder(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
funds = 0

IRs:
funds(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_80(bool) -> _isConfirmed[holder]
CONDITION REF_80"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_isGoalReached == false)

IRs:
TMP_113(bool) = _isGoalReached == False
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
funds = confirmedMap[holder]

IRs:
REF_81(uint256) -> confirmedMap[holder]
funds(uint256) := REF_81(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(funds > 0)

IRs:
TMP_115(bool) = funds > 0
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
confirmedMap[holder] = 0

IRs:
REF_82(uint256) -> confirmedMap[holder]
REF_82(uint256) (->confirmedMap) := 0(uint256)"];
7->11;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
funds = unconfirmedMap[holder]

IRs:
REF_83(uint256) -> unconfirmedMap[holder]
funds(uint256) := REF_83(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(funds > 0)

IRs:
TMP_117(bool) = funds > 0
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
unconfirmedMap[holder] = 0

IRs:
REF_84(uint256) -> unconfirmedMap[holder]
REF_84(uint256) (->unconfirmedMap) := 0(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
holder.transfer(funds)

IRs:
Transfer dest:holder value:funds"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
hasClosed()

IRs:
MODIFIER_CALL, PreSale.hasClosed()()"];
13->1;
}
// Function: 1770.sol-PreSale-getTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokens = calculateTokens(msg.sender)

IRs:
TMP_105(uint256) = INTERNAL_CALL, PreSale.calculateTokens(address)(msg.sender)
tokens(uint256) := TMP_105(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokens > 0)

IRs:
TMP_106(bool) = tokens > 0
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
confirmedMap[msg.sender] = 0

IRs:
REF_76(uint256) -> confirmedMap[msg.sender]
REF_76(uint256) (->confirmedMap) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bonusMap[msg.sender] = 0

IRs:
REF_77(uint256) -> bonusMap[msg.sender]
REF_77(uint256) (->bonusMap) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
topMap[msg.sender] = 0

IRs:
REF_78(uint256) -> topMap[msg.sender]
REF_78(uint256) (->topMap) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(token.transfer(msg.sender,tokens))

IRs:
TMP_108(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['msg.sender', 'tokens']  
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
hasClosed()

IRs:
MODIFIER_CALL, PreSale.hasClosed()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isGoalReached()

IRs:
MODIFIER_CALL, PreSale.isGoalReached()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyConfirmed()

IRs:
MODIFIER_CALL, PreSale.onlyConfirmed()()"];
9->1;
}
// Function: 1770.sol-PreSale-hasClosed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= endTime + confirmTime)

IRs:
TMP_162(uint256) = endTime + confirmTime
TMP_163(bool) = now >= TMP_162
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1770.sol-PreSale-isAbleConfirmation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= startTime && now < endTime + confirmTime)

IRs:
TMP_157(bool) = now >= startTime
TMP_158(uint256) = endTime + confirmTime
TMP_159(bool) = now < TMP_158
TMP_160(bool) = TMP_157 && TMP_159
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1770.sol-PreSale-isConfirmed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_isConfirmed[holder]

IRs:
REF_75(bool) -> _isConfirmed[holder]
RETURN REF_75"];
}
// Function: 1770.sol-PreSale-isGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_isGoalReached)

IRs:
TMP_165(None) = SOLIDITY_CALL require(bool)(_isGoalReached)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1770.sol-PreSale-onlyConfirmed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_isConfirmed[msg.sender])

IRs:
REF_102(bool) -> _isConfirmed[msg.sender]
TMP_166(None) = SOLIDITY_CALL require(bool)(REF_102)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1770.sol-PreSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_151(bool) = msg.sender == owner
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1770.sol-PreSale-pending()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= startTime && now < endTime)

IRs:
TMP_153(bool) = now >= startTime
TMP_154(bool) = now < endTime
TMP_155(bool) = TMP_153 && TMP_154
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1770.sol-PreSale-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_24 = CONVERT 0 to address
owner(address) := TMP_24(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1770.sol-PreSale-setReached(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_isGoalReached = _isIt

IRs:
_isGoalReached(bool) := _isIt(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! _isIt

IRs:
TMP_141 = UnaryType.BANG _isIt 
CONDITION TMP_141"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.transfer(owner,totalSupply)

IRs:
TMP_142(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'totalSupply']  "];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isAbleConfirmation()

IRs:
MODIFIER_CALL, PreSale.isAbleConfirmation()()"];
6->1;
}
// Function: 1770.sol-PreSale-setReferrer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_canSetReferrer(msg.sender,referrer))

IRs:
TMP_98(bool) = INTERNAL_CALL, PreSale._canSetReferrer(address,address)(msg.sender,referrer)
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setReferrer(msg.sender,referrer)

IRs:
INTERNAL_CALL, PreSale._setReferrer(address,address)(msg.sender,referrer)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pending()

IRs:
MODIFIER_CALL, PreSale.pending()()"];
3->1;
}
// Function: 1770.sol-PreSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
lastOf10 = 0

IRs:
lastOf10(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
lastOf15 = 0

IRs:
lastOf15(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
REF_BONUS_PERCENT = 50

IRs:
REF_BONUS_PERCENT(uint256) := 50(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MIN_AMOUNT = 9 * 10e15

IRs:
TMP_149(uint256) = 9 * 10000000000000000
MIN_AMOUNT(uint256) := TMP_149(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
OPERATIONS_FEE = 10e15

IRs:
OPERATIONS_FEE(uint256) := 10000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
confirmTime = 48 * 3600

IRs:
TMP_150(uint256) = 48 * 3600
confirmTime(uint256) := TMP_150(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
_isGoalReached = false

IRs:
_isGoalReached(bool) := False(bool)"];
}
// Function: 1770.sol-PreSale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1770.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_20(uint256) = a + b
c(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_21(bool) = c >= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1770.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_16(uint256) = a / b
RETURN TMP_16"];
}
// Function: 1770.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_11(bool) = a == 0
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_12(uint256) = a * b
c(uint256) := TMP_12(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_13(uint256) = c / a
TMP_14(bool) = TMP_13 == b
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1770.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_17(bool) = b <= a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_19(uint256) = a - b
RETURN TMP_19"];
}
}
