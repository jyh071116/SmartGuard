digraph G {
// Function: 1798.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1798.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1798.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1798.sol-FCash-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins[_addr] = true

IRs:
REF_3(bool) -> admins[_addr]
REF_3(bool) (->admins) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Leader.onlyOwner()()"];
2->1;
}
// Function: 1798.sol-FCash-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_24(bool) = _value > 0
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_20(mapping(address => uint256)) -> allowance[msg.sender]
REF_21(uint256) -> REF_20[_spender]
REF_21(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1798.sol-FCash-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[msg.sender] = true

IRs:
REF_5(bool) -> admins[msg.sender]
REF_5(bool) (->admins) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[owner] = totalSupply

IRs:
REF_6(uint256) -> balanceOf[owner]
REF_6(uint256) (->balanceOf) := totalSupply(uint256)"];
}
// Function: 1798.sol-FCash-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(admins[msg.sender])

IRs:
REF_36(bool) -> admins[msg.sender]
TMP_41(None) = SOLIDITY_CALL require(bool)(REF_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1798.sol-FCash-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_39(bool) = owner == msg.sender
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1798.sol-FCash-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete admins[_addr]

IRs:
REF_4(bool) -> admins[_addr]
admins = delete REF_4 "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Leader.onlyOwner()()"];
2->1;
}
// Function: 1798.sol-FCash-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Leader.onlyOwner()()"];
2->1;
}
// Function: 1798.sol-FCash-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = FCash

IRs:
name(string) := FCash(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = FCH

IRs:
symbol(string) := FCH(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 100e16

IRs:
totalSupply(uint256) := 1000000000000000000(uint256)"];
}
// Function: 1798.sol-FCash-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0 && _value > 0)

IRs:
TMP_9(bool) = _to != 0
TMP_10(bool) = _value > 0
TMP_11(bool) = TMP_9 && TMP_10
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
admins[msg.sender] == true && admins[_to] == true

IRs:
REF_7(bool) -> admins[msg.sender]
TMP_13(bool) = REF_7 == True
REF_8(bool) -> admins[_to]
TMP_14(bool) = REF_8 == True
TMP_15(bool) = TMP_13 && TMP_14
CONDITION TMP_15"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_9(uint256) -> balanceOf[_to]
REF_10(uint256) -> balanceOf[_to]
TMP_16(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_10', '_value'] 
REF_9(uint256) (->balanceOf) := TMP_16(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.add(_value)

IRs:
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_17(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_13(uint256) -> balanceOf[msg.sender]
TMP_19(bool) = REF_13 >= _value
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_14(uint256) -> balanceOf[msg.sender]
REF_15(uint256) -> balanceOf[msg.sender]
TMP_21(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_15', '_value'] 
REF_14(uint256) (->balanceOf) := TMP_21(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_17(uint256) -> balanceOf[_to]
REF_18(uint256) -> balanceOf[_to]
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balanceOf) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: RETURN 13

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1798.sol-FCash-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0 && _value > 0)

IRs:
TMP_27(bool) = _to != 0
TMP_28(bool) = _value > 0
TMP_29(bool) = TMP_27 && TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value && _value <= allowance[_from][msg.sender])

IRs:
REF_22(uint256) -> balanceOf[_from]
TMP_31(bool) = REF_22 >= _value
REF_23(mapping(address => uint256)) -> allowance[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_32(bool) = _value <= REF_24
TMP_33(bool) = TMP_31 && TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_25(uint256) -> balanceOf[_from]
REF_26(uint256) -> balanceOf[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_26', '_value'] 
REF_25(uint256) (->balanceOf) := TMP_35(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_28(uint256) -> balanceOf[_to]
REF_29(uint256) -> balanceOf[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_29', '_value'] 
REF_28(uint256) (->balanceOf) := TMP_36(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_31(mapping(address => uint256)) -> allowance[_from]
REF_32(uint256) -> REF_31[msg.sender]
REF_33(mapping(address => uint256)) -> allowance[_from]
REF_34(uint256) -> REF_33[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_34', '_value'] 
REF_32(uint256) (->allowance) := TMP_37(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1798.sol-Leader-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins[_addr] = true

IRs:
REF_0(bool) -> admins[_addr]
REF_0(bool) (->admins) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Leader.onlyOwner()()"];
2->1;
}
// Function: 1798.sol-Leader-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(admins[msg.sender])

IRs:
REF_2(bool) -> admins[msg.sender]
TMP_5(None) = SOLIDITY_CALL require(bool)(REF_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1798.sol-Leader-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_3(bool) = owner == msg.sender
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1798.sol-Leader-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete admins[_addr]

IRs:
REF_1(bool) -> admins[_addr]
admins = delete REF_1 "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Leader.onlyOwner()()"];
2->1;
}
// Function: 1798.sol-Leader-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Leader.onlyOwner()()"];
2->1;
}
// Function: 1798.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_51(uint256) = a + b
c(uint256) := TMP_51(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_52(bool) = c >= a
TMP_53(None) = SOLIDITY_CALL assert(bool)(TMP_52)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1798.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_47(uint256) = a / b
RETURN TMP_47"];
}
// Function: 1798.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_42(bool) = a == 0
CONDITION TMP_42"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_43(uint256) = a * b
c(uint256) := TMP_43(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_44(uint256) = c / a
TMP_45(bool) = TMP_44 == b
TMP_46(None) = SOLIDITY_CALL assert(bool)(TMP_45)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1798.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_48(bool) = b <= a
TMP_49(None) = SOLIDITY_CALL assert(bool)(TMP_48)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_50(uint256) = a - b
RETURN TMP_50"];
}
}
