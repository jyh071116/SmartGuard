digraph G {
// Function: 1862.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1862.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1862.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1862.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1862.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1862.sol-ICWToken-allowance(address,address)
digraph{
}
// Function: 1862.sol-ICWToken-approve(address,uint256)
digraph{
}
// Function: 1862.sol-ICWToken-balanceOf(address)
digraph{
}
// Function: 1862.sol-ICWToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = INITIAL_SUPPLY

IRs:
totalSupply(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
valueContributorsAddress = INITIAL_SUPPLY.mul(CONTRIBUTORS_SHARE).div(100)

IRs:
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['INITIAL_SUPPLY', 'CONTRIBUTORS_SHARE'] 
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_57', '100'] 
valueContributorsAddress(uint256) := TMP_58(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[contributorsAddress] = valueContributorsAddress

IRs:
REF_56(uint256) -> balances[contributorsAddress]
REF_56(uint256) (->balances) := valueContributorsAddress(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),contributorsAddress,valueContributorsAddress)

IRs:
TMP_59 = CONVERT 0 to address
Emit Transfer(TMP_59,contributorsAddress,valueContributorsAddress)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
valueCompanyAddress = INITIAL_SUPPLY.mul(COMPANY_SHARE).div(100)

IRs:
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['INITIAL_SUPPLY', 'COMPANY_SHARE'] 
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_61', '100'] 
valueCompanyAddress(uint256) := TMP_62(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[companyAddress] = valueCompanyAddress

IRs:
REF_59(uint256) -> balances[companyAddress]
REF_59(uint256) (->balances) := valueCompanyAddress(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(address(0),companyAddress,valueCompanyAddress)

IRs:
TMP_63 = CONVERT 0 to address
Emit Transfer(TMP_63,companyAddress,valueCompanyAddress)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
valueMarketAddress = INITIAL_SUPPLY.mul(MARKET_SHARE).div(100)

IRs:
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['INITIAL_SUPPLY', 'MARKET_SHARE'] 
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_65', '100'] 
valueMarketAddress(uint256) := TMP_66(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[marketAddress] = valueMarketAddress

IRs:
REF_62(uint256) -> balances[marketAddress]
REF_62(uint256) (->balances) := valueMarketAddress(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(address(0),marketAddress,valueMarketAddress)

IRs:
TMP_67 = CONVERT 0 to address
Emit Transfer(TMP_67,marketAddress,valueMarketAddress)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
valueIcoAddress = INITIAL_SUPPLY.mul(ICO_SHARE).div(100)

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['INITIAL_SUPPLY', 'ICO_SHARE'] 
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_69', '100'] 
valueIcoAddress(uint256) := TMP_70(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[icoAddress] = valueIcoAddress

IRs:
REF_65(uint256) -> balances[icoAddress]
REF_65(uint256) (->balances) := valueIcoAddress(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(address(0),icoAddress,valueIcoAddress)

IRs:
TMP_71 = CONVERT 0 to address
Emit Transfer(TMP_71,icoAddress,valueIcoAddress)"];
}
// Function: 1862.sol-ICWToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Intelligent Car Washing Token

IRs:
name(string) := Intelligent Car Washing Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ICWT

IRs:
symbol(string) := ICWT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals))

IRs:
TMP_73 = CONVERT decimals to uint256
TMP_74(uint256) = 10 ** TMP_73
TMP_75(uint256) = 20000000000 * TMP_74
INITIAL_SUPPLY(uint256) := TMP_75(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
CONTRIBUTORS_SHARE = 30

IRs:
CONTRIBUTORS_SHARE(uint8) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
COMPANY_SHARE = 20

IRs:
COMPANY_SHARE(uint8) := 20(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MARKET_SHARE = 30

IRs:
MARKET_SHARE(uint8) := 30(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
ICO_SHARE = 20

IRs:
ICO_SHARE(uint8) := 20(uint256)"];
}
// Function: 1862.sol-ICWToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
contributorsAddress = 0x42cd691a49e8FF418528Fe906553B002846dE3cf

IRs:
contributorsAddress(address) := 381374199375679994882669762556426877704747213775(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
companyAddress = 0xf9C722e5c7c3313BBcD80e9A78e055391f75C732

IRs:
companyAddress(address) := 1425979590237557207902101647988279146708194412338(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
marketAddress = 0xbd2F5D1975ccE83dfbf2B5743B1F8409CF211f90

IRs:
marketAddress(address) := 1080055500816271050590012471199200647116832710544(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
icoAddress = 0xe26E3a77cA40b3e04C64E29f6c076Eec25a66E76

IRs:
icoAddress(address) := 1292690089453051817177811617383122276625653591670(address)"];
}
// Function: 1862.sol-ICWToken-transfer(address,uint256)
digraph{
}
// Function: 1862.sol-ICWToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1862.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1862.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1862.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1862.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 1862.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_25(mapping(address => uint256)) -> allowed[_owner]
REF_26(uint256) -> REF_25[_spender]
RETURN REF_26"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1862.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_30(bool) = _value == 0
REF_21(mapping(address => uint256)) -> allowed[msg.sender]
REF_22(uint256) -> REF_21[_spender]
TMP_31(bool) = REF_22 == 0
TMP_32(bool) = TMP_30 || TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_23(mapping(address => uint256)) -> allowed[msg.sender]
REF_24(uint256) -> REF_23[_spender]
REF_24(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1862.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1862.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = _to != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_16(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1862.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_7(uint256) -> balances[_from]
TMP_19(bool) = _value <= REF_7
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
TMP_21(bool) = _value <= REF_9
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = _to != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_10(uint256) -> balances[_from]
REF_11(uint256) -> balances[_from]
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_11', '_value'] 
REF_10(uint256) (->balances) := TMP_26(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_13(uint256) -> balances[_to]
REF_14(uint256) -> balances[_to]
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', '_value'] 
REF_13(uint256) (->balances) := TMP_27(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
REF_18(mapping(address => uint256)) -> allowed[_from]
REF_19(uint256) -> REF_18[msg.sender]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_19', '_value'] 
REF_17(uint256) (->allowed) := TMP_28(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
