digraph G {
// Function: 187.sol-HealthyCoins-HealthyCoins(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_totalSupply = initialSupply * 10 ** uint256(decimals)

IRs:
TMP_33 = CONVERT decimals to uint256
TMP_34(uint256) = 10 ** TMP_33
TMP_35(uint256) = initialSupply * TMP_34
_totalSupply(uint256) := TMP_35(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = _totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := _totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = coinName

IRs:
name(string) := coinName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = coinSymbol

IRs:
symbol(string) := coinSymbol(string)"];
}
// Function: 187.sol-HealthyCoins-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 187.sol-HealthyCoins-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_24(mapping(address => uint256)) -> allowed[_owner]
REF_25(uint256) -> REF_24[_spender]
RETURN REF_25"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 187.sol-HealthyCoins-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _amount

IRs:
REF_22(mapping(address => uint256)) -> allowed[msg.sender]
REF_23(uint256) -> REF_22[_spender]
REF_23(uint256) (->allowed) := _amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_amount)

IRs:
Emit Approval(msg.sender,_spender,_amount)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 187.sol-HealthyCoins-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] -= uint112(_count)

IRs:
REF_34(uint256) -> balanceOf[msg.sender]
TMP_64 = CONVERT _count to uint112
REF_34(-> balanceOf) = REF_34 - TMP_64"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deleteToken = _count.add(deleteToken).toUINT112()

IRs:
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_count', 'deleteToken'] 
TMP_66(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_65'] 
deleteToken(uint256) := TMP_66(uint112)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.sub(_count).toUINT112()

IRs:
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', '_count'] 
TMP_68(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_67'] 
_totalSupply(uint256) := TMP_68(uint112)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_count)

IRs:
Emit Burn(msg.sender,_count)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 187.sol-HealthyCoins-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_36(None) = SOLIDITY_CALL revert()()"];
}
// Function: 187.sol-HealthyCoins-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[_owner] = _amount.add(balanceOf[_owner]).toUINT112()

IRs:
REF_26(uint256) -> balanceOf[_owner]
REF_28(uint256) -> balanceOf[_owner]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amount', 'REF_28'] 
TMP_58(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_57'] 
REF_26(uint256) (->balanceOf) := TMP_58(uint112)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
mintCount = _amount.add(mintCount).toUINT112()

IRs:
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amount', 'mintCount'] 
TMP_60(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_59'] 
mintCount(uint256) := TMP_60(uint112)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.add(_amount).toUINT112()

IRs:
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', '_amount'] 
TMP_62(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_61'] 
_totalSupply(uint256) := TMP_62(uint112)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 187.sol-HealthyCoins-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_70(bool) = msg.sender == owner
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 187.sol-HealthyCoins-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner == 0x0

IRs:
TMP_30(bool) = _newOwner == 0
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_31(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 187.sol-HealthyCoins-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 4

IRs:
decimals(uint8) := 4(uint256)"];
}
// Function: 187.sol-HealthyCoins-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 187.sol-HealthyCoins-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf[msg.sender] >= _amount && _amount > 0

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_37(bool) = REF_1 >= _amount
TMP_38(bool) = _amount > 0
TMP_39(bool) = TMP_37 && TMP_38
CONDITION TMP_39"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] -= uint112(_amount)

IRs:
REF_2(uint256) -> balanceOf[msg.sender]
TMP_40 = CONVERT _amount to uint112
REF_2(-> balanceOf) = REF_2 - TMP_40"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112()

IRs:
REF_3(uint256) -> balanceOf[_to]
REF_5(uint256) -> balanceOf[_to]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amount', 'REF_5'] 
TMP_42(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_41'] 
REF_3(uint256) (->balanceOf) := TMP_42(uint112)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
soldToken = _amount.add(soldToken).toUINT112()

IRs:
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amount', 'soldToken'] 
TMP_44(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_43'] 
soldToken(uint256) := TMP_44(uint112)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 187.sol-HealthyCoins-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0

IRs:
REF_9(uint256) -> balanceOf[_from]
TMP_46(bool) = REF_9 >= _amount
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
TMP_47(bool) = REF_11 >= _amount
TMP_48(bool) = TMP_46 && TMP_47
TMP_49(bool) = _amount > 0
TMP_50(bool) = TMP_48 && TMP_49
CONDITION TMP_50"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_amount).toUINT112()

IRs:
REF_12(uint256) -> balanceOf[_from]
REF_13(uint256) -> balanceOf[_from]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_13', '_amount'] 
TMP_52(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_51'] 
REF_12(uint256) (->balanceOf) := TMP_52(uint112)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] -= _amount

IRs:
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
REF_17(-> allowed) = REF_17 - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112()

IRs:
REF_18(uint256) -> balanceOf[_to]
REF_20(uint256) -> balanceOf[_to]
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amount', 'REF_20'] 
TMP_54(uint112) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.toUINT112(uint256), arguments:['TMP_53'] 
REF_18(uint256) (->balanceOf) := TMP_54(uint112)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 187.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 187.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 187.sol-Owned-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner == 0x0

IRs:
TMP_0(bool) = _newOwner == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_1(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 187.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_15(uint256) = a + b
c(uint256) := TMP_15(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_16(bool) = c >= a
TMP_17(None) = SOLIDITY_CALL assert(bool)(TMP_16)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 187.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_11(uint256) = a / b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 187.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_5(uint256) = a * b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_6(bool) = a == 0
TMP_7(uint256) = c / a
TMP_8(bool) = TMP_7 == b
TMP_9(bool) = TMP_6 || TMP_8
TMP_10(None) = SOLIDITY_CALL assert(bool)(TMP_9)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 187.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_12(bool) = b <= a
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_14(uint256) = a - b
RETURN TMP_14"];
}
// Function: 187.sol-SafeMath-toUINT112(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(uint112(a) == a)

IRs:
TMP_18 = CONVERT a to uint112
TMP_19(bool) = TMP_18 == a
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
uint112(a)

IRs:
TMP_21 = CONVERT a to uint112
RETURN TMP_21"];
}
// Function: 187.sol-SafeMath-toUINT120(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(uint120(a) == a)

IRs:
TMP_22 = CONVERT a to uint120
TMP_23(bool) = TMP_22 == a
TMP_24(None) = SOLIDITY_CALL assert(bool)(TMP_23)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
uint120(a)

IRs:
TMP_25 = CONVERT a to uint120
RETURN TMP_25"];
}
// Function: 187.sol-SafeMath-toUINT128(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(uint128(a) == a)

IRs:
TMP_26 = CONVERT a to uint128
TMP_27(bool) = TMP_26 == a
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
uint128(a)

IRs:
TMP_29 = CONVERT a to uint128
RETURN TMP_29"];
}
// Function: 187.sol-Token-allowance(address,address)
digraph{
}
// Function: 187.sol-Token-approve(address,uint256)
digraph{
}
// Function: 187.sol-Token-burn(uint256)
digraph{
}
// Function: 187.sol-Token-totalSupply()
digraph{
}
// Function: 187.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 187.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
