digraph G {
// Function: 1874.sol-CompanyShare-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
first = 0x70AAbFDcf6b98F571E0bEbC4eb777F7CaaA42429

IRs:
first(address) := 643214806652707490630385324169733931119008818217(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
second = 0x446c67dc80E44588405Dbbfcfd1DE5718797CDe8

IRs:
second(address) := 390628900496360526284434490283113552405006372328(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
third = 0x9a099cF4d575f9152AB98b0F566c4e255D08C7a3

IRs:
third(address) := 879398958242899059479280993244599989529504958371(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
team_[1] = CompanySharedatasets.Player(first,0,50)

IRs:
REF_0(CompanySharedatasets.Player) -> team_[1]
TMP_0(CompanySharedatasets.Player) = new Player(first,0,50)
REF_0(CompanySharedatasets.Player) (->team_) := TMP_0(CompanySharedatasets.Player)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxAddr_[first] = 1

IRs:
REF_2(uint256) -> pIDxAddr_[first]
REF_2(uint256) (->pIDxAddr_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
team_[2] = CompanySharedatasets.Player(second,0,25)

IRs:
REF_3(CompanySharedatasets.Player) -> team_[2]
TMP_1(CompanySharedatasets.Player) = new Player(second,0,25)
REF_3(CompanySharedatasets.Player) (->team_) := TMP_1(CompanySharedatasets.Player)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pIDxAddr_[second] = 2

IRs:
REF_5(uint256) -> pIDxAddr_[second]
REF_5(uint256) (->pIDxAddr_) := 2(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
team_[3] = CompanySharedatasets.Player(third,0,25)

IRs:
REF_6(CompanySharedatasets.Player) -> team_[3]
TMP_2(CompanySharedatasets.Player) = new Player(third,0,25)
REF_6(CompanySharedatasets.Player) (->team_) := TMP_2(CompanySharedatasets.Player)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxAddr_[third] = 3

IRs:
REF_8(uint256) -> pIDxAddr_[third]
REF_8(uint256) (->pIDxAddr_) := 3(uint256)"];
}
// Function: 1874.sol-CompanyShare-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eth = msg.value

IRs:
_eth(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
giveGen(_eth)

IRs:
TMP_4(uint256) = INTERNAL_CALL, CompanyShare.giveGen(uint256)(_eth)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1874.sol-CompanyShare-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eth = msg.value

IRs:
_eth(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
giveGen(_eth)

IRs:
TMP_3(uint256) = INTERNAL_CALL, CompanyShare.giveGen(uint256)(_eth)"];
}
// Function: 1874.sol-CompanyShare-getGen()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_40(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_pID != 0,sorry not team)

IRs:
TMP_20(bool) = _pID != 0
TMP_21(None) = SOLIDITY_CALL require(bool,string)(TMP_20,sorry not team)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_earnings = team_[_pID].gen

IRs:
REF_41(CompanySharedatasets.Player) -> team_[_pID]
REF_42(uint256) -> REF_41.gen
_earnings(uint256) := REF_42(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_earnings

IRs:
RETURN _earnings"];
}
// Function: 1874.sol-CompanyShare-giveGen(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_genFirst = _eth.mul(team_[1].percent) / 100

IRs:
REF_10(CompanySharedatasets.Player) -> team_[1]
REF_11(uint256) -> REF_10.percent
TMP_5(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_11'] 
TMP_6(uint256) = TMP_5 / 100
_genFirst(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_genSecond = _eth.mul(team_[2].percent) / 100

IRs:
REF_13(CompanySharedatasets.Player) -> team_[2]
REF_14(uint256) -> REF_13.percent
TMP_7(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_14'] 
TMP_8(uint256) = TMP_7 / 100
_genSecond(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_genThird = _eth.sub(_genFirst).sub(_genSecond)

IRs:
TMP_9(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_genFirst'] 
TMP_10(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_9', '_genSecond'] 
_genThird(uint256) := TMP_10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
team_[1].gen = _genFirst.add(team_[1].gen)

IRs:
REF_17(CompanySharedatasets.Player) -> team_[1]
REF_18(uint256) -> REF_17.gen
REF_20(CompanySharedatasets.Player) -> team_[1]
REF_21(uint256) -> REF_20.gen
TMP_11(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_genFirst', 'REF_21'] 
REF_18(uint256) (->team_) := TMP_11(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
team_[2].gen = _genSecond.add(team_[2].gen)

IRs:
REF_22(CompanySharedatasets.Player) -> team_[2]
REF_23(uint256) -> REF_22.gen
REF_25(CompanySharedatasets.Player) -> team_[2]
REF_26(uint256) -> REF_25.gen
TMP_12(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_genSecond', 'REF_26'] 
REF_23(uint256) (->team_) := TMP_12(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
team_[3].gen = _genThird.add(team_[3].gen)

IRs:
REF_27(CompanySharedatasets.Player) -> team_[3]
REF_28(uint256) -> REF_27.gen
REF_30(CompanySharedatasets.Player) -> team_[3]
REF_31(uint256) -> REF_30.gen
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_genThird', 'REF_31'] 
REF_28(uint256) (->team_) := TMP_13(uint256)"];
}
// Function: 1874.sol-CompanyShare-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_22(bool) = _codeLength == 0
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1874.sol-CompanyShare-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_32(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_pID != 0,sorry not team)

IRs:
TMP_14(bool) = _pID != 0
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,sorry not team)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_16(uint256) = INTERNAL_CALL, CompanyShare.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_16(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
team_[_pID].addr.transfer(_eth)

IRs:
REF_33(CompanySharedatasets.Player) -> team_[_pID]
REF_34(address) -> REF_33.addr
Transfer dest:REF_34 value:_eth"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, CompanyShare.isHuman()()"];
6->1;
}
// Function: 1874.sol-CompanyShare-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = team_[_pID].gen

IRs:
REF_36(CompanySharedatasets.Player) -> team_[_pID]
REF_37(uint256) -> REF_36.gen
_earnings(uint256) := REF_37(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_19(bool) = _earnings > 0
CONDITION TMP_19"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
team_[_pID].gen = 0

IRs:
REF_38(CompanySharedatasets.Player) -> team_[_pID]
REF_39(uint256) -> REF_38.gen
REF_39(uint256) (->team_) := 0(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1874.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_32(uint256) = a + b
c(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_33(bool) = c >= a
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1874.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_24(bool) = a == 0
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_25(uint256) = a * b
c(uint256) := TMP_25(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_26(uint256) = c / a
TMP_27(bool) = TMP_26 == b
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1874.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_42(bool) = x == 0
CONDITION TMP_42"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_43(bool) = y == 0
CONDITION TMP_43"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_44(bool) = i < y
CONDITION TMP_44"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_45(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_45(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_46(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1874.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_41(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_41"];
}
// Function: 1874.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_35(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_36(uint256) = TMP_35 / 2
z(uint256) := TMP_36(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_37(bool) = z < y
CONDITION TMP_37"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_38(uint256) = x / z
TMP_39(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_38,z)
TMP_40(uint256) = TMP_39 / 2
z(uint256) := TMP_40(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1874.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_29(bool) = b <= a
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_31(uint256) = a - b
RETURN TMP_31"];
}
}
