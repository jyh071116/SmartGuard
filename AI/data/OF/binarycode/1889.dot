digraph G {
// Function: 1889.sol-RelocationToken-recieveRelocation(address,uint256)
digraph{
}
// Function: 1889.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_0(uint256) = x + y
z(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_1(bool) = z >= x
TMP_2(bool) = z >= y
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1889.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_8(uint256) = x * y
z(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_9(bool) = x == 0
TMP_10(uint256) = z / x
TMP_11(bool) = TMP_10 == y
TMP_12(bool) = TMP_9 || TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1889.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_5(bool) = x >= y
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_7(uint256) = x - y
z(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1889.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_28(mapping(address => uint256)) -> allowed[_owner]
REF_29(uint256) -> REF_28[_spender]
RETURN REF_29"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1889.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
REF_27(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1889.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_25(uint256) -> balances[_owner]
RETURN REF_25"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1889.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_14(bool) = REF_0 >= _value
TMP_15(bool) = _value > 0
TMP_16(bool) = TMP_14 && TMP_15
REF_1(uint256) -> balances[_to]
TMP_17(uint256) = REF_1 + _value
REF_2(uint256) -> balances[_to]
TMP_18(bool) = TMP_17 > REF_2
TMP_19(bool) = TMP_16 && TMP_18
CONDITION TMP_19"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balances[msg.sender],_value)

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_3(uint256) (->balances) := TMP_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = SafeMath.add(balances[_to],_value)

IRs:
REF_6(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_21(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_6(uint256) (->balances) := TMP_21(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1889.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]

IRs:
REF_9(uint256) -> balances[_from]
TMP_23(bool) = REF_9 >= _value
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
TMP_24(bool) = REF_11 >= _value
TMP_25(bool) = TMP_23 && TMP_24
TMP_26(bool) = _value > 0
TMP_27(bool) = TMP_25 && TMP_26
REF_12(uint256) -> balances[_to]
TMP_28(uint256) = REF_12 + _value
REF_13(uint256) -> balances[_to]
TMP_29(bool) = TMP_28 > REF_13
TMP_30(bool) = TMP_27 && TMP_29
CONDITION TMP_30"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = SafeMath.add(balances[_to],_value)

IRs:
REF_14(uint256) -> balances[_to]
REF_16(uint256) -> balances[_to]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_16', '_value'] 
REF_14(uint256) (->balances) := TMP_31(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = SafeMath.sub(balances[_from],_value)

IRs:
REF_17(uint256) -> balances[_from]
REF_19(uint256) -> balances[_from]
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_19', '_value'] 
REF_17(uint256) (->balances) := TMP_32(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender],_value)

IRs:
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_value'] 
REF_21(uint256) (->allowed) := TMP_33(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1889.sol-StarambaToken-adjustCap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(supplyAdjustmentCount < 4)

IRs:
TMP_114(bool) = supplyAdjustmentCount < 4
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TOKEN_CREATION_CAP = SafeMath.add(TOKEN_CREATION_CAP,50 * (10 ** 6) * 10 ** decimals)

IRs:
TMP_116(uint256) = 10 ** 6
TMP_117(uint256) = 50 * TMP_116
TMP_118(uint256) = 10 ** decimals
TMP_119(uint256) = TMP_117 * TMP_118
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TOKEN_CREATION_CAP', 'TMP_119'] 
TOKEN_CREATION_CAP(uint256) := TMP_120(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
supplyAdjustmentCount ++

IRs:
TMP_121(uint8) := supplyAdjustmentCount(uint8)
supplyAdjustmentCount(uint8) = supplyAdjustmentCount + 1"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, StarambaToken.onlyOwner()()"];
4->1;
}
// Function: 1889.sol-StarambaToken-allowance(address,address)
digraph{
}
// Function: 1889.sol-StarambaToken-approve(address,uint256)
digraph{
}
// Function: 1889.sol-StarambaToken-balanceOf(address)
digraph{
}
// Function: 1889.sol-StarambaToken-burnWholeBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] > 0)

IRs:
REF_96(uint256) -> balances[msg.sender]
TMP_123(bool) = REF_96 > 0
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = SafeMath.sub(totalSupply,balances[msg.sender])

IRs:
REF_98(uint256) -> balances[msg.sender]
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'REF_98'] 
totalSupply(uint256) := TMP_125(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_99(uint256) -> balances[msg.sender]
REF_99(uint256) (->balances) := 0(uint256)"];
}
// Function: 1889.sol-StarambaToken-constructor(address,address,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_admin1 != 0x0)

IRs:
TMP_58(bool) = _admin1 != 0
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_admin2 != 0x0)

IRs:
TMP_60(bool) = _admin2 != 0
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_admin1 != _admin2)

IRs:
TMP_62(bool) = _admin1 != _admin2
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_vendors.length == 10)

IRs:
REF_60 -> LENGTH _vendors
TMP_64(bool) = REF_60 == 10
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
STTadmin1 = _admin1

IRs:
STTadmin1(address) := _admin1(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
STTadmin2 = _admin2

IRs:
STTadmin2(address) := _admin2(address)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < _vendors.length

IRs:
REF_61 -> LENGTH _vendors
TMP_66(bool) = i < REF_61
CONDITION TMP_66"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
vendors[_vendors[i]] = true

IRs:
REF_62(address) -> _vendors[i]
REF_63(bool) -> vendors[REF_62]
REF_63(bool) (->vendors) := True(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
vendorCount ++

IRs:
TMP_67(uint8) := vendorCount(uint8)
vendorCount(uint8) = vendorCount + 1"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_68(uint8) := i(uint8)
i(uint8) = i + 1"];
14->11;
}
// Function: 1889.sol-StarambaToken-deliverTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount >= TOKEN_MIN)

IRs:
TMP_84(bool) = _amount >= TOKEN_MIN
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
checkedSupply = SafeMath.add(totalSupply,_amount)

IRs:
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
checkedSupply(uint256) := TMP_86(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(checkedSupply <= TOKEN_CREATION_CAP)

IRs:
TMP_87(bool) = checkedSupply <= TOKEN_CREATION_CAP
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
oldBalance = balances[_buyer]

IRs:
REF_76(uint256) -> balances[_buyer]
oldBalance(uint256) := REF_76(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_buyer] = SafeMath.add(oldBalance,_amount)

IRs:
REF_77(uint256) -> balances[_buyer]
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oldBalance', '_amount'] 
REF_77(uint256) (->balances) := TMP_89(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = checkedSupply

IRs:
totalSupply(uint256) := checkedSupply(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
trackHolder(_buyer)

IRs:
TMP_90(bool) = INTERNAL_CALL, StarambaToken.trackHolder(address)(_buyer)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LogDeliverSTT(_buyer,_amount)

IRs:
Emit LogDeliverSTT(_buyer,_amount)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyVendor()

IRs:
MODIFIER_CALL, StarambaToken.onlyVendor()()"];
9->1;
}
// Function: 1889.sol-StarambaToken-deliverTokensBatch(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_buyer.length == _amount.length)

IRs:
REF_79 -> LENGTH _buyer
REF_80 -> LENGTH _amount
TMP_93(bool) = REF_79 == REF_80
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _buyer.length

IRs:
REF_81 -> LENGTH _buyer
TMP_95(bool) = i < REF_81
CONDITION TMP_95"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_amount[i] >= TOKEN_MIN)

IRs:
REF_82(uint256) -> _amount[i]
TMP_96(bool) = REF_82 >= TOKEN_MIN
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(_buyer[i] != 0x0)

IRs:
REF_83(address) -> _buyer[i]
TMP_98(bool) = REF_83 != 0
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
checkedSupply = SafeMath.add(totalSupply,_amount[i])

IRs:
REF_85(uint256) -> _amount[i]
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', 'REF_85'] 
checkedSupply(uint256) := TMP_100(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(checkedSupply <= TOKEN_CREATION_CAP)

IRs:
TMP_101(bool) = checkedSupply <= TOKEN_CREATION_CAP
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
oldBalance = balances[_buyer[i]]

IRs:
REF_86(address) -> _buyer[i]
REF_87(uint256) -> balances[REF_86]
oldBalance(uint256) := REF_87(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[_buyer[i]] = SafeMath.add(oldBalance,_amount[i])

IRs:
REF_88(address) -> _buyer[i]
REF_89(uint256) -> balances[REF_88]
REF_91(uint256) -> _amount[i]
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oldBalance', 'REF_91'] 
REF_89(uint256) (->balances) := TMP_103(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
totalSupply = checkedSupply

IRs:
totalSupply(uint256) := checkedSupply(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
trackHolder(_buyer[i])

IRs:
REF_92(address) -> _buyer[i]
TMP_104(bool) = INTERNAL_CALL, StarambaToken.trackHolder(address)(REF_92)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
LogDeliverSTT(_buyer[i],_amount[i])

IRs:
REF_93(address) -> _buyer[i]
REF_94(uint256) -> _amount[i]
Emit LogDeliverSTT(REF_93,REF_94)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_106(uint8) := i(uint8)
i(uint8) = i + 1"];
15->5;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyVendor()

IRs:
MODIFIER_CALL, StarambaToken.onlyVendor()()"];
16->1;
}
// Function: 1889.sol-StarambaToken-getBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_64(uint256) -> balances[_owner]
RETURN REF_64"];
2[label="Node Type: RETURN 2

EXPRESSION:
_balance

IRs:
RETURN _balance"];
}
// Function: 1889.sol-StarambaToken-getHolder(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
holders[_index]

IRs:
REF_69(address) -> holders[_index]
RETURN REF_69"];
2[label="Node Type: RETURN 2

EXPRESSION:
_holder

IRs:
RETURN _holder"];
}
// Function: 1889.sol-StarambaToken-getHolderCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
holders.length

IRs:
REF_68 -> LENGTH holders
RETURN REF_68"];
2[label="Node Type: RETURN 2

EXPRESSION:
_holderCount

IRs:
RETURN _holderCount"];
}
// Function: 1889.sol-StarambaToken-isTransferable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(transactionsActive == true)

IRs:
TMP_134(bool) = transactionsActive == True
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1889.sol-StarambaToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == STTadmin1 || msg.sender == STTadmin2)

IRs:
TMP_136(bool) = msg.sender == STTadmin1
TMP_137(bool) = msg.sender == STTadmin2
TMP_138(bool) = TMP_136 || TMP_137
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
multiSigHashes[msg.sender] = keccak256()(msg.data)

IRs:
REF_101(bytes32) -> multiSigHashes[msg.sender]
TMP_140(bytes32) = SOLIDITY_CALL keccak256()(msg.data)
REF_101(bytes32) (->multiSigHashes) := TMP_140(bytes32)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
(multiSigHashes[STTadmin1]) == (multiSigHashes[STTadmin2])

IRs:
REF_102(bytes32) -> multiSigHashes[STTadmin1]
REF_103(bytes32) -> multiSigHashes[STTadmin2]
TMP_141(bool) = REF_102 == REF_103
CONDITION TMP_141"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: _ 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
multiSigHashes[STTadmin1] = 0x0

IRs:
REF_104(bytes32) -> multiSigHashes[STTadmin1]
REF_104(bytes32) (->multiSigHashes) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
multiSigHashes[STTadmin2] = 0x0

IRs:
REF_105(bytes32) -> multiSigHashes[STTadmin2]
REF_105(bytes32) (->multiSigHashes) := 0(uint256)"];
6->8;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
}
// Function: 1889.sol-StarambaToken-onlyVendor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(vendors[msg.sender] == true)

IRs:
REF_100(bool) -> vendors[msg.sender]
TMP_132(bool) = REF_100 == True
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1889.sol-StarambaToken-relocate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(relocationActive == true)

IRs:
TMP_75(bool) = relocationActive == True
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newSTT = RelocationToken(newTokenContractAddress)

IRs:
TMP_77 = CONVERT newTokenContractAddress to RelocationToken
newSTT(RelocationToken) := TMP_77(RelocationToken)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balance = balances[msg.sender]

IRs:
REF_65(uint256) -> balances[msg.sender]
balance(uint256) := REF_65(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_66(uint256) -> balances[msg.sender]
REF_66(uint256) (->balances) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(newSTT.recieveRelocation(msg.sender,balance))

IRs:
TMP_78(bool) = HIGH_LEVEL_CALL, dest:newSTT(RelocationToken), function:recieveRelocation, arguments:['msg.sender', 'balance']  
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
}
// Function: 1889.sol-StarambaToken-relocationSwitch(bool,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
_relocationActive

IRs:
CONDITION _relocationActive"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_newTokenContractAddress != 0x0)

IRs:
TMP_109(bool) = _newTokenContractAddress != 0
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_newTokenContractAddress == 0x0)

IRs:
TMP_111(bool) = _newTokenContractAddress == 0
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
relocationActive = _relocationActive

IRs:
relocationActive(bool) := _relocationActive(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
newTokenContractAddress = _newTokenContractAddress

IRs:
newTokenContractAddress(address) := _newTokenContractAddress(address)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, StarambaToken.onlyOwner()()"];
7->1;
}
// Function: 1889.sol-StarambaToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = STARAMBA.Token

IRs:
name(string) := STARAMBA.Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = STT

IRs:
symbol(string) := STT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
version = 1

IRs:
version(string) := 1(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOKEN_MIN = 1 * 10 ** decimals

IRs:
TMP_130(uint256) = 10 ** decimals
TMP_131(uint256) = 1 * TMP_130
TOKEN_MIN(uint256) := TMP_131(uint256)"];
}
// Function: 1889.sol-StarambaToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TOKEN_CREATION_CAP = 1000 * (10 ** 6) * 10 ** decimals

IRs:
TMP_126(uint256) = 10 ** 6
TMP_127(uint256) = 1000 * TMP_126
TMP_128(uint256) = 10 ** decimals
TMP_129(uint256) = TMP_127 * TMP_128
TOKEN_CREATION_CAP(uint256) := TMP_129(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
supplyAdjustmentCount = 0

IRs:
supplyAdjustmentCount(uint8) := 0(uint256)"];
}
// Function: 1889.sol-StarambaToken-trackHolder(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isHolder[_to] == false

IRs:
REF_70(bool) -> isHolder[_to]
TMP_80(bool) = REF_70 == False
CONDITION TMP_80"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
holders.push(_to)

IRs:
REF_72 -> LENGTH holders
TMP_82(uint256) := REF_72(uint256)
TMP_83(uint256) = TMP_82 + 1
REF_72(uint256) (->holders) := TMP_83(uint256)
REF_73(address) -> holders[TMP_82]
REF_73(address) (->holders) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isHolder[_to] = true

IRs:
REF_74(bool) -> isHolder[_to]
REF_74(bool) (->isHolder) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1889.sol-StarambaToken-transactionSwitch(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionsActive = _transactionsActive

IRs:
transactionsActive(bool) := _transactionsActive(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, StarambaToken.onlyOwner()()"];
2->1;
}
// Function: 1889.sol-StarambaToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = super.transfer(_to,_value)

IRs:
TMP_69(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(_to,_value)
result(bool) := TMP_69(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
result

IRs:
CONDITION result"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
trackHolder(_to)

IRs:
TMP_70(bool) = INTERNAL_CALL, StarambaToken.trackHolder(address)(_to)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
result

IRs:
RETURN result"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isTransferable()

IRs:
MODIFIER_CALL, StarambaToken.isTransferable()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1889.sol-StarambaToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = super.transferFrom(_from,_to,_value)

IRs:
TMP_72(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
result(bool) := TMP_72(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
result

IRs:
CONDITION result"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
trackHolder(_to)

IRs:
TMP_73(bool) = INTERNAL_CALL, StarambaToken.trackHolder(address)(_to)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
result

IRs:
RETURN result"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isTransferable()

IRs:
MODIFIER_CALL, StarambaToken.isTransferable()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1889.sol-Token-allowance(address,address)
digraph{
}
// Function: 1889.sol-Token-approve(address,uint256)
digraph{
}
// Function: 1889.sol-Token-balanceOf(address)
digraph{
}
// Function: 1889.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 1889.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
