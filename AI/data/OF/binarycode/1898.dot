digraph G {
// Function: 1898.sol-AbyssBatchTransfer-batchTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(recipients.length == amounts.length)

IRs:
REF_0 -> LENGTH recipients
REF_1 -> LENGTH amounts
TMP_20(bool) = REF_0 == REF_1
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < recipients.length

IRs:
REF_2 -> LENGTH recipients
TMP_22(bool) = i < REF_2
CONDITION TMP_22"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(token.transfer(recipients[i],amounts[i]))

IRs:
REF_4(address) -> recipients[i]
REF_5(uint256) -> amounts[i]
TMP_23(bool) = HIGH_LEVEL_CALL, dest:token(IERC20Token), function:transfer, arguments:['REF_4', 'REF_5']  
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_25(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 1898.sol-AbyssBatchTransfer-confirmOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_15(bool) = msg.sender == newOwner
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 1898.sol-AbyssBatchTransfer-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_owner == address(0)

IRs:
TMP_10 = CONVERT 0 to address
TMP_11(bool) = _owner == TMP_10
CONDITION TMP_11"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1898.sol-AbyssBatchTransfer-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = IERC20Token(tokenAddress)

IRs:
TMP_18 = CONVERT tokenAddress to IERC20Token
token(IERC20Token) := TMP_18(IERC20Token)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Ownable(ownerAddress)

IRs:
INTERNAL_CALL, Ownable.constructor(address)(ownerAddress)"];
2->1;
}
// Function: 1898.sol-AbyssBatchTransfer-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_27(bool) = msg.sender == owner
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1898.sol-AbyssBatchTransfer-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_12(bool) = _newOwner != owner
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1898.sol-IERC20Token-allowance(address,address)
digraph{
}
// Function: 1898.sol-IERC20Token-approve(address,uint256)
digraph{
}
// Function: 1898.sol-IERC20Token-balanceOf(address)
digraph{
}
// Function: 1898.sol-IERC20Token-transfer(address,uint256)
digraph{
}
// Function: 1898.sol-IERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1898.sol-Ownable-confirmOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_5(bool) = msg.sender == newOwner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 1898.sol-Ownable-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_owner == address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _owner == TMP_0
CONDITION TMP_1"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1898.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_8(bool) = msg.sender == owner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1898.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_2(bool) = _newOwner != owner
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
}
