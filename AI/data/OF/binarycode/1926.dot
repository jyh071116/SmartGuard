digraph G {
// Function: 1926.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1926.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1926.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1926.sol-ERC20-totalSupply()
digraph{
}
// Function: 1926.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1926.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1926.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_24(bool) = a >= b
CONDITION TMP_24"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_22(bool) = a >= b
CONDITION TMP_22"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_25(bool) = a < b
CONDITION TMP_25"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_23(bool) = a < b
CONDITION TMP_23"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_6(bool) = b > 0
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_8(uint256) = a / b
c(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_9(uint256) = b * c
TMP_10(uint256) = a % b
TMP_11(uint256) = TMP_9 + TMP_10
TMP_12(bool) = a == TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 1926.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
}
// Function: 1926.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bIsFreezeAll == false)

IRs:
TMP_63(bool) = bIsFreezeAll == False
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1926.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 1926.sol-StandardToken-freezeAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _creator)

IRs:
TMP_66(bool) = msg.sender == _creator
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bIsFreezeAll = ! bIsFreezeAll

IRs:
TMP_68 = UnaryType.BANG bIsFreezeAll 
bIsFreezeAll(bool) := TMP_68(bool)"];
}
// Function: 1926.sol-StandardToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_50(bool) = a >= b
CONDITION TMP_50"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-StandardToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_48(bool) = a >= b
CONDITION TMP_48"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-StandardToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_51(bool) = a < b
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-StandardToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_49(bool) = a < b
CONDITION TMP_49"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-StandardToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_43(uint256) = a + b
c(uint256) := TMP_43(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_44(bool) = c >= a
TMP_45(bool) = c >= b
TMP_46(bool) = TMP_44 && TMP_45
TMP_47(None) = SOLIDITY_CALL assert(bool)(TMP_46)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-StandardToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_32(bool) = b > 0
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_34(uint256) = a / b
c(uint256) := TMP_34(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_35(uint256) = b * c
TMP_36(uint256) = a % b
TMP_37(uint256) = TMP_35 + TMP_36
TMP_38(bool) = a == TMP_37
TMP_39(None) = SOLIDITY_CALL assert(bool)(TMP_38)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-StandardToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_26(uint256) = a * b
c(uint256) := TMP_26(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_27(bool) = a == 0
TMP_28(uint256) = c / a
TMP_29(bool) = TMP_28 == b
TMP_30(bool) = TMP_27 || TMP_29
TMP_31(None) = SOLIDITY_CALL assert(bool)(TMP_30)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-StandardToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_40(bool) = b <= a
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_42(uint256) = a - b
RETURN TMP_42"];
}
// Function: 1926.sol-StandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
bIsFreezeAll = false

IRs:
bIsFreezeAll(bool) := False(bool)"];
}
// Function: 1926.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 1926.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bIsFreezeAll == false)

IRs:
TMP_52(bool) = bIsFreezeAll == False
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_4(uint256) -> balances[msg.sender]
TMP_54(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_4,_value)
REF_3(uint256) (->balances) := TMP_54(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_5(uint256) -> balances[_to]
REF_6(uint256) -> balances[_to]
TMP_55(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_6,_value)
REF_5(uint256) (->balances) := TMP_55(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1926.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bIsFreezeAll == false)

IRs:
TMP_57(bool) = bIsFreezeAll == False
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_7(mapping(address => uint256)) -> allowed[_from]
REF_8(uint256) -> REF_7[msg.sender]
_allowance(uint256) := REF_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_9(uint256) -> balances[_to]
REF_10(uint256) -> balances[_to]
TMP_59(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_10,_value)
REF_9(uint256) (->balances) := TMP_59(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_11(uint256) -> balances[_from]
REF_12(uint256) -> balances[_from]
TMP_60(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_12,_value)
REF_11(uint256) (->balances) := TMP_60(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = safeSub(_allowance,_value)

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_61(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_allowance,_value)
REF_14(uint256) (->allowed) := TMP_61(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1926.sol-TYROS-allowance(address,address)
digraph{
}
// Function: 1926.sol-TYROS-approve(address,uint256)
digraph{
}
// Function: 1926.sol-TYROS-balanceOf(address)
digraph{
}
// Function: 1926.sol-TYROS-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_creator = msg.sender

IRs:
_creator(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalSupply = initial_supply

IRs:
_totalSupply(uint256) := initial_supply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_creator] = initial_supply

IRs:
REF_34(uint256) -> balances[_creator]
REF_34(uint256) (->balances) := initial_supply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bIsFreezeAll = false

IRs:
bIsFreezeAll(bool) := False(bool)"];
}
// Function: 1926.sol-TYROS-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _creator)

IRs:
TMP_112(bool) = msg.sender == _creator
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(_creator)

IRs:
TMP_114(None) = SOLIDITY_CALL selfdestruct(address)(_creator)"];
}
// Function: 1926.sol-TYROS-freezeAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _creator)

IRs:
TMP_83(bool) = msg.sender == _creator
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bIsFreezeAll = ! bIsFreezeAll

IRs:
TMP_85 = UnaryType.BANG bIsFreezeAll 
bIsFreezeAll(bool) := TMP_85(bool)"];
}
// Function: 1926.sol-TYROS-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_110(bool) = a >= b
CONDITION TMP_110"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-TYROS-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_108(bool) = a >= b
CONDITION TMP_108"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-TYROS-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_111(bool) = a < b
CONDITION TMP_111"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-TYROS-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_109(bool) = a < b
CONDITION TMP_109"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1926.sol-TYROS-register(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
keys[msg.sender] = key

IRs:
REF_35(string) -> keys[msg.sender]
REF_35(string) (->keys) := key(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogRegister(msg.sender,key)

IRs:
Emit LogRegister(msg.sender,key)"];
}
// Function: 1926.sol-TYROS-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_103(uint256) = a + b
c(uint256) := TMP_103(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_104(bool) = c >= a
TMP_105(bool) = c >= b
TMP_106(bool) = TMP_104 && TMP_105
TMP_107(None) = SOLIDITY_CALL assert(bool)(TMP_106)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-TYROS-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_92(bool) = b > 0
TMP_93(None) = SOLIDITY_CALL assert(bool)(TMP_92)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_94(uint256) = a / b
c(uint256) := TMP_94(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_95(uint256) = b * c
TMP_96(uint256) = a % b
TMP_97(uint256) = TMP_95 + TMP_96
TMP_98(bool) = a == TMP_97
TMP_99(None) = SOLIDITY_CALL assert(bool)(TMP_98)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-TYROS-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_86(uint256) = a * b
c(uint256) := TMP_86(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_87(bool) = a == 0
TMP_88(uint256) = c / a
TMP_89(bool) = TMP_88 == b
TMP_90(bool) = TMP_87 || TMP_89
TMP_91(None) = SOLIDITY_CALL assert(bool)(TMP_90)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1926.sol-TYROS-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_100(bool) = b <= a
TMP_101(None) = SOLIDITY_CALL assert(bool)(TMP_100)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_102(uint256) = a - b
RETURN TMP_102"];
}
// Function: 1926.sol-TYROS-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
initial_supply = 50 * 10 ** 26

IRs:
TMP_116(uint256) = 10 ** 26
TMP_117(uint256) = 50 * TMP_116
initial_supply(uint256) := TMP_117(uint256)"];
}
// Function: 1926.sol-TYROS-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
bIsFreezeAll = false

IRs:
bIsFreezeAll(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = TYROS Token

IRs:
name(string) := TYROS Token(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = TYROS

IRs:
symbol(string) := TYROS(string)"];
}
// Function: 1926.sol-TYROS-totalSupply()
digraph{
}
// Function: 1926.sol-TYROS-transfer(address,uint256)
digraph{
}
// Function: 1926.sol-TYROS-transferFrom(address,address,uint256)
digraph{
}
}
