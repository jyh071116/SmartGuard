digraph G {
// Function: 1932.sol-Bitcrore-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_27(bool) = _to != 0
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_1(uint256) -> balanceOf[_from]
TMP_29(bool) = REF_1 >= _value
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to].add(_value) > balanceOf[_to])

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_2', '_value'] 
REF_4(uint256) -> balanceOf[_to]
TMP_32(bool) = TMP_31 > REF_4
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from].add(balanceOf[_to])

IRs:
REF_5(uint256) -> balanceOf[_from]
REF_7(uint256) -> balanceOf[_to]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', 'REF_7'] 
previousBalances(uint256) := TMP_34(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_8(uint256) -> balanceOf[_from]
REF_9(uint256) -> balanceOf[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8(uint256) (->balanceOf) := TMP_35(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_11(uint256) -> balanceOf[_to]
REF_12(uint256) -> balanceOf[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11(uint256) (->balanceOf) := TMP_36(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from].add(balanceOf[_to]) == previousBalances)

IRs:
REF_14(uint256) -> balanceOf[_from]
REF_16(uint256) -> balanceOf[_to]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', 'REF_16'] 
TMP_39(bool) = TMP_38 == previousBalances
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
}
// Function: 1932.sol-Bitcrore-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = _newOwner != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1932.sol-Bitcrore-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowance[_owner][_spender]

IRs:
REF_18(mapping(address => uint256)) -> allowance[_owner]
REF_19(uint256) -> REF_18[_spender]
RETURN REF_19"];
}
// Function: 1932.sol-Bitcrore-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[_spender])

IRs:
REF_53(bool) -> frozenAccount[_spender]
TMP_83 = UnaryType.BANG REF_53 
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_54(bool) -> frozenAccount[msg.sender]
TMP_85 = UnaryType.BANG REF_54 
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_55(mapping(address => uint256)) -> allowance[msg.sender]
REF_56(uint256) -> REF_55[_spender]
REF_56(uint256) (->allowance) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1932.sol-Bitcrore-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_34(uint256) -> balanceOf[msg.sender]
TMP_62(bool) = REF_34 >= _value
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_35(uint256) -> balanceOf[msg.sender]
REF_36(uint256) -> balanceOf[msg.sender]
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_36', '_value'] 
REF_35(uint256) (->balanceOf) := TMP_64(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_65(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,0x0,_value)

IRs:
Emit Transfer(msg.sender,0,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1932.sol-Bitcrore-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_39(uint256) -> balanceOf[_from]
TMP_69(bool) = REF_39 >= _value
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_40(bool) -> frozenAccount[_from]
TMP_71 = UnaryType.BANG REF_40 
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_41(mapping(address => uint256)) -> allowance[_from]
REF_42(uint256) -> REF_41[msg.sender]
TMP_73(bool) = _value <= REF_42
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_43(uint256) -> balanceOf[_from]
REF_44(uint256) -> balanceOf[_from]
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_44', '_value'] 
REF_43(uint256) (->balanceOf) := TMP_75(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_46(mapping(address => uint256)) -> allowance[_from]
REF_47(uint256) -> REF_46[msg.sender]
REF_48(mapping(address => uint256)) -> allowance[_from]
REF_49(uint256) -> REF_48[msg.sender]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_49', '_value'] 
REF_47(uint256) (->allowance) := TMP_76(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_77(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,0x0,_value)

IRs:
Emit Transfer(msg.sender,0,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1932.sol-Bitcrore-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1932.sol-Bitcrore-constructor(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = tokenName

IRs:
name(string) := tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = tokenSymbol

IRs:
symbol(string) := tokenSymbol(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseTime = setreleasetime

IRs:
releaseTime(uint256) := setreleasetime(uint256)"];
}
// Function: 1932.sol-Bitcrore-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[_spender])

IRs:
REF_66(bool) -> frozenAccount[_spender]
TMP_94 = UnaryType.BANG REF_66 
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_67(bool) -> frozenAccount[msg.sender]
TMP_96 = UnaryType.BANG REF_67 
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
oldValue = allowance[msg.sender][_spender]

IRs:
REF_68(mapping(address => uint256)) -> allowance[msg.sender]
REF_69(uint256) -> REF_68[_spender]
oldValue(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_98(bool) = _subtractedValue >= oldValue
CONDITION TMP_98"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[msg.sender][_spender] = 0

IRs:
REF_70(mapping(address => uint256)) -> allowance[msg.sender]
REF_71(uint256) -> REF_70[_spender]
REF_71(uint256) (->allowance) := 0(uint256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_72(mapping(address => uint256)) -> allowance[msg.sender]
REF_73(uint256) -> REF_72[_spender]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_73(uint256) (->allowance) := TMP_99(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Approval(msg.sender,_spender,allowance[msg.sender][_spender])

IRs:
REF_75(mapping(address => uint256)) -> allowance[msg.sender]
REF_76(uint256) -> REF_75[_spender]
Emit Approval(msg.sender,_spender,REF_76)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1932.sol-Bitcrore-distributeToken(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addresses.length == _value.length)

IRs:
REF_29 -> LENGTH addresses
REF_30 -> LENGTH _value
TMP_56(bool) = REF_29 == REF_30
TMP_57(None) = SOLIDITY_CALL assert(bool)(TMP_56)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < addresses.length

IRs:
REF_31 -> LENGTH addresses
TMP_58(bool) = i < REF_31
CONDITION TMP_58"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(msg.sender,addresses[i],_value[i])

IRs:
REF_32(address) -> addresses[i]
REF_33(uint256) -> _value[i]
INTERNAL_CALL, Bitcrore._transfer(address,address,uint256)(msg.sender,REF_32,REF_33)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_60(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1932.sol-Bitcrore-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_52(bool) -> frozenAccount[target]
REF_52(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1932.sol-Bitcrore-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[_spender])

IRs:
REF_57(bool) -> frozenAccount[_spender]
TMP_88 = UnaryType.BANG REF_57 
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_58(bool) -> frozenAccount[msg.sender]
TMP_90 = UnaryType.BANG REF_58 
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowance[msg.sender][_spender] = (allowance[msg.sender][_spender].add(_addedValue))

IRs:
REF_59(mapping(address => uint256)) -> allowance[msg.sender]
REF_60(uint256) -> REF_59[_spender]
REF_61(mapping(address => uint256)) -> allowance[msg.sender]
REF_62(uint256) -> REF_61[_spender]
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_62', '_addedValue'] 
REF_60(uint256) (->allowance) := TMP_92(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(msg.sender,_spender,allowance[msg.sender][_spender])

IRs:
REF_64(mapping(address => uint256)) -> allowance[msg.sender]
REF_65(uint256) -> REF_64[_spender]
Emit Approval(msg.sender,_spender,REF_65)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1932.sol-Bitcrore-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_101(bool) = msg.sender == owner
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1932.sol-Bitcrore-releaseTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseTime = newreleaseTime

IRs:
releaseTime(uint256) := newreleaseTime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1932.sol-Bitcrore-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 1932.sol-Bitcrore-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= releaseTime)

IRs:
TMP_41(bool) = now >= releaseTime
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[_to])

IRs:
REF_17(bool) -> frozenAccount[_to]
TMP_43 = UnaryType.BANG REF_17 
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, Bitcrore._transfer(address,address,uint256)(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1932.sol-Bitcrore-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= releaseTime)

IRs:
TMP_46(bool) = now >= releaseTime
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_20(bool) -> frozenAccount[_from]
TMP_48 = UnaryType.BANG REF_20 
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(! frozenAccount[_to])

IRs:
REF_21(bool) -> frozenAccount[_to]
TMP_50 = UnaryType.BANG REF_21 
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_22(mapping(address => uint256)) -> allowance[_from]
REF_23(uint256) -> REF_22[msg.sender]
TMP_52(bool) = _value <= REF_23
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_24(mapping(address => uint256)) -> allowance[_from]
REF_25(uint256) -> REF_24[msg.sender]
REF_26(mapping(address => uint256)) -> allowance[_from]
REF_27(uint256) -> REF_26[msg.sender]
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_27', '_value'] 
REF_25(uint256) (->allowance) := TMP_54(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, Bitcrore._transfer(address,address,uint256)(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1932.sol-Bitcrore-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1932.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _newOwner != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1932.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1932.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1932.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1932.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1932.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1932.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1932.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
