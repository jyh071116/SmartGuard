digraph G {
// Function: 1971.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_12(bool) = size > 0
RETURN TMP_12"];
}
// Function: 1971.sol-CryptoCaps-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_311 = CONVERT 0 to address
Emit Transfer(_owner,TMP_311,_tokenId)"];
}
// Function: 1971.sol-CryptoCaps-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_303 = CONVERT 0 to address
TMP_304(bool) = _to != TMP_303
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_307 = CONVERT 0 to address
Emit Transfer(TMP_307,_to,_tokenId)"];
}
// Function: 1971.sol-CryptoCaps-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_334(bool) = _interfaceId != 4294967295
TMP_335(None) = SOLIDITY_CALL require(bool)(TMP_334)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_161(bool) -> supportedInterfaces[_interfaceId]
REF_161(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 1971.sol-CryptoCaps-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_240(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_241(None) = SOLIDITY_CALL require(bool)(TMP_240)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_99(string) -> tokenURIs[_tokenId]
REF_99(string) (->tokenURIs) := _uri(string)"];
}
// Function: 1971.sol-CryptoCaps-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_226 = CONVERT 0 to address
TMP_227(bool) = _newOwner != TMP_226
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1971.sol-CryptoCaps-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_149(address) -> tokenOwner[_tokenId]
TMP_319 = CONVERT 0 to address
TMP_320(bool) = REF_149 == TMP_319
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_150(address) -> tokenOwner[_tokenId]
REF_150(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_151(uint256) -> ownedTokensCount[_to]
REF_152(uint256) -> ownedTokensCount[_to]
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_152', '1'] 
REF_151(uint256) (->ownedTokensCount) := TMP_322(uint256)"];
}
// Function: 1971.sol-CryptoCaps-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_268(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_268(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_269(bool) = _to != owner
TMP_270(None) = SOLIDITY_CALL require(bool)(TMP_269)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_271(bool) = msg.sender == owner
TMP_272(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_273(bool) = TMP_271 || TMP_272
TMP_274(None) = SOLIDITY_CALL require(bool)(TMP_273)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_141(address) -> tokenApprovals[_tokenId]
REF_141(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
}
// Function: 1971.sol-CryptoCaps-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_260 = CONVERT 0 to address
TMP_261(bool) = _owner != TMP_260
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_138(uint256) -> ownedTokensCount[_owner]
RETURN REF_138"];
}
// Function: 1971.sol-CryptoCaps-buyToken(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_titleBytes = bytes(_title)

IRs:
TMP_337 = CONVERT _title to bytes
_titleBytes(bytes) := TMP_337(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_titleBytes.length >= TITLE_MIN_LENGTH,Title is too short)

IRs:
REF_162 -> LENGTH _titleBytes
TMP_338(bool) = REF_162 >= TITLE_MIN_LENGTH
TMP_339(None) = SOLIDITY_CALL require(bool,string)(TMP_338,Title is too short)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_titleBytes.length <= TITLE_MAX_LENGTH,Title is too long)

IRs:
REF_163 -> LENGTH _titleBytes
TMP_340(bool) = REF_163 <= TITLE_MAX_LENGTH
TMP_341(None) = SOLIDITY_CALL require(bool,string)(TMP_340,Title is too long)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_descriptionBytes = bytes(_description)

IRs:
TMP_342 = CONVERT _description to bytes
_descriptionBytes(bytes) := TMP_342(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_descriptionBytes.length >= DESCRIPTION_MIN_LENGTH,Description is too short)

IRs:
REF_164 -> LENGTH _descriptionBytes
TMP_343(bool) = REF_164 >= DESCRIPTION_MIN_LENGTH
TMP_344(None) = SOLIDITY_CALL require(bool,string)(TMP_343,Description is too short)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_descriptionBytes.length <= DESCRIPTION_MAX_LENGTH,Description is too long)

IRs:
REF_165 -> LENGTH _descriptionBytes
TMP_345(bool) = REF_165 <= DESCRIPTION_MAX_LENGTH
TMP_346(None) = SOLIDITY_CALL require(bool,string)(TMP_345,Description is too long)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(msg.value >= currentPrice,Amount of Ether sent too small)

IRs:
TMP_347(bool) = msg.value >= currentPrice
TMP_348(None) = SOLIDITY_CALL require(bool,string)(TMP_347,Amount of Ether sent too small)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
index = allTokens.length + 1

IRs:
REF_166 -> LENGTH allTokens
TMP_349(uint256) = REF_166 + 1
index(uint256) := TMP_349(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_mint(msg.sender,index)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(msg.sender,index)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenTypes[index] = _type

IRs:
REF_167(uint256) -> tokenTypes[index]
REF_167(uint256) (->tokenTypes) := _type(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokenTitles[index] = _title

IRs:
REF_168(string) -> tokenTitles[index]
REF_168(string) (->tokenTitles) := _title(string)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokenDescription[index] = _description

IRs:
REF_169(string) -> tokenDescription[index]
REF_169(string) (->tokenDescription) := _description(string)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
BoughtToken(msg.sender,index)

IRs:
Emit BoughtToken(msg.sender,index)"];
}
// Function: 1971.sol-CryptoCaps-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_360(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_361(None) = SOLIDITY_CALL require(bool)(TMP_360)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-CryptoCaps-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_328(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_329 = UnaryType.BANG TMP_328 
CONDITION TMP_329"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)

IRs:
TMP_330 = CONVERT _to to ERC721Receiver
TMP_331(bytes4) = HIGH_LEVEL_CALL, dest:TMP_330(ERC721Receiver), function:onERC721Received, arguments:['msg.sender', '_from', '_tokenId', '_data']  
retval(bytes4) := TMP_331(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_332(bool) = retval == ERC721_RECEIVED
RETURN TMP_332"];
}
// Function: 1971.sol-CryptoCaps-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_313(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_314(bool) = TMP_313 == _owner
TMP_315(None) = SOLIDITY_CALL require(bool)(TMP_314)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_147(address) -> tokenApprovals[_tokenId]
TMP_316 = CONVERT 0 to address
TMP_317(bool) = REF_147 != TMP_316
CONDITION TMP_317"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_148(address) -> tokenApprovals[_tokenId]
TMP_318 = CONVERT 0 to address
REF_148(address) (->tokenApprovals) := TMP_318(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1971.sol-CryptoCaps-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ERC721Token(CryptoCaps,QCC)

IRs:
INTERNAL_CALL, ERC721Token.constructor(string,string)(CryptoCaps,QCC)"];
}
// Function: 1971.sol-CryptoCaps-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_registerInterface(InterfaceId_ERC721Enumerable)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Enumerable)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_registerInterface(InterfaceId_ERC721Metadata)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Metadata)"];
}
// Function: 1971.sol-CryptoCaps-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_140(address) -> tokenOwner[_tokenId]
owner(address) := REF_140(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_266 = CONVERT 0 to address
TMP_267(bool) = owner != TMP_266
RETURN TMP_267"];
}
// Function: 1971.sol-CryptoCaps-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_142(address) -> tokenApprovals[_tokenId]
RETURN REF_142"];
}
// Function: 1971.sol-CryptoCaps-getCurrentPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
price = currentPrice

IRs:
price(uint256) := currentPrice(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
price

IRs:
RETURN price"];
}
// Function: 1971.sol-CryptoCaps-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_145(mapping(address => bool)) -> operatorApprovals[_owner]
REF_146(bool) -> REF_145[_operator]
RETURN REF_146"];
}
// Function: 1971.sol-CryptoCaps-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_296(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_296(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_297(bool) = _spender == owner
TMP_298(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_299(bool) = TMP_298 == _spender
TMP_300(bool) = TMP_297 || TMP_299
TMP_301(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_302(bool) = TMP_300 || TMP_301
RETURN TMP_302"];
}
// Function: 1971.sol-CryptoCaps-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == owner

IRs:
TMP_353(bool) = msg.sender == owner
CONDITION TMP_353"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_354(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 1971.sol-CryptoCaps-myTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[msg.sender]

IRs:
REF_170(uint256[]) -> ownedTokens[msg.sender]
RETURN REF_170"];
}
// Function: 1971.sol-CryptoCaps-name()
digraph{
}
// Function: 1971.sol-CryptoCaps-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_355(bool) = msg.sender == owner
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-CryptoCaps-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_357(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_358(bool) = TMP_357 == msg.sender
TMP_359(None) = SOLIDITY_CALL require(bool)(TMP_358)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-CryptoCaps-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_139(address) -> tokenOwner[_tokenId]
owner(address) := REF_139(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_263 = CONVERT 0 to address
TMP_264(bool) = owner != TMP_263
TMP_265(None) = SOLIDITY_CALL require(bool)(TMP_264)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 1971.sol-CryptoCaps-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_323(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_324(bool) = TMP_323 == _from
TMP_325(None) = SOLIDITY_CALL require(bool)(TMP_324)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_154(uint256) -> ownedTokensCount[_from]
REF_155(uint256) -> ownedTokensCount[_from]
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_155', '1'] 
REF_154(uint256) (->ownedTokensCount) := TMP_326(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_157(address) -> tokenOwner[_tokenId]
TMP_327 = CONVERT 0 to address
REF_157(address) (->tokenOwner) := TMP_327(address)"];
}
// Function: 1971.sol-CryptoCaps-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_222 = CONVERT 0 to address
owner(address) := TMP_222(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1971.sol-CryptoCaps-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
2->1;
}
// Function: 1971.sol-CryptoCaps-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_293(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_294(None) = SOLIDITY_CALL require(bool)(TMP_293)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
3->1;
}
// Function: 1971.sol-CryptoCaps-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_276(bool) = _to != msg.sender
TMP_277(None) = SOLIDITY_CALL require(bool)(TMP_276)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_143(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_144(bool) -> REF_143[_to]
REF_144(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 1971.sol-CryptoCaps-setCurrentPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
currentPrice = newPrice

IRs:
currentPrice(uint256) := newPrice(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1971.sol-CryptoCaps-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TITLE_MIN_LENGTH = 1

IRs:
TITLE_MIN_LENGTH(uint8) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TITLE_MAX_LENGTH = 64

IRs:
TITLE_MAX_LENGTH(uint8) := 64(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
DESCRIPTION_MIN_LENGTH = 1

IRs:
DESCRIPTION_MIN_LENGTH(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
DESCRIPTION_MAX_LENGTH = 10000

IRs:
DESCRIPTION_MAX_LENGTH(uint256) := 10000(uint256)"];
}
// Function: 1971.sol-CryptoCaps-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
currentPrice = 0

IRs:
currentPrice(uint256) := 0(uint256)"];
}
// Function: 1971.sol-CryptoCaps-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_160(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_160"];
}
// Function: 1971.sol-CryptoCaps-symbol()
digraph{
}
// Function: 1971.sol-CryptoCaps-tokenByIndex(uint256)
digraph{
}
// Function: 1971.sol-CryptoCaps-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 1971.sol-CryptoCaps-tokenURI(uint256)
digraph{
}
// Function: 1971.sol-CryptoCaps-totalSupply()
digraph{
}
// Function: 1971.sol-CryptoCaps-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_279 = CONVERT 0 to address
TMP_280(bool) = _from != TMP_279
TMP_281(None) = SOLIDITY_CALL require(bool)(TMP_280)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_282 = CONVERT 0 to address
TMP_283(bool) = _to != TMP_282
TMP_284(None) = SOLIDITY_CALL require(bool)(TMP_283)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
7->1;
}
// Function: 1971.sol-CryptoCaps-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1971.sol-CryptoCaps-viewToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenType_ = tokenTypes[_tokenId]

IRs:
REF_171(uint256) -> tokenTypes[_tokenId]
tokenType_(uint256) := REF_171(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenTitle_ = tokenTitles[_tokenId]

IRs:
REF_172(string) -> tokenTitles[_tokenId]
tokenTitle_(string) := REF_172(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenDescription_ = tokenDescription[_tokenId]

IRs:
REF_173(string) -> tokenDescription[_tokenId]
tokenDescription_(string) := REF_173(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(tokenType_,tokenTitle_,tokenDescription_)

IRs:
RETURN tokenType_,tokenTitle_,tokenDescription_"];
}
// Function: 1971.sol-ERC165-supportsInterface(bytes4)
digraph{
}
// Function: 1971.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 1971.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 1971.sol-ERC721-exists(uint256)
digraph{
}
// Function: 1971.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 1971.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 1971.sol-ERC721-name()
digraph{
}
// Function: 1971.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 1971.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1971.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 1971.sol-ERC721-supportsInterface(bytes4)
digraph{
}
// Function: 1971.sol-ERC721-symbol()
digraph{
}
// Function: 1971.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 1971.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 1971.sol-ERC721-tokenURI(uint256)
digraph{
}
// Function: 1971.sol-ERC721-totalSupply()
digraph{
}
// Function: 1971.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 1971.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 1971.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 1971.sol-ERC721Basic-isApprovedForAll(address,address)
digraph{
}
// Function: 1971.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 1971.sol-ERC721Basic-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Basic-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1971.sol-ERC721Basic-setApprovalForAll(address,bool)
digraph{
}
// Function: 1971.sol-ERC721Basic-supportsInterface(bytes4)
digraph{
}
// Function: 1971.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721BasicToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_83 = CONVERT 0 to address
Emit Transfer(_owner,TMP_83,_tokenId)"];
}
// Function: 1971.sol-ERC721BasicToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_75 = CONVERT 0 to address
TMP_76(bool) = _to != TMP_75
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_79 = CONVERT 0 to address
Emit Transfer(TMP_79,_to,_tokenId)"];
}
// Function: 1971.sol-ERC721BasicToken-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_28(bool) = _interfaceId != 4294967295
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_3(bool) -> supportedInterfaces[_interfaceId]
REF_3(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 1971.sol-ERC721BasicToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_15(address) -> tokenOwner[_tokenId]
TMP_91 = CONVERT 0 to address
TMP_92(bool) = REF_15 == TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_16(address) -> tokenOwner[_tokenId]
REF_16(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_17(uint256) -> ownedTokensCount[_to]
REF_18(uint256) -> ownedTokensCount[_to]
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '1'] 
REF_17(uint256) (->ownedTokensCount) := TMP_94(uint256)"];
}
// Function: 1971.sol-ERC721BasicToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_40(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_40(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_41(bool) = _to != owner
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_43(bool) = msg.sender == owner
TMP_44(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_45(bool) = TMP_43 || TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_7(address) -> tokenApprovals[_tokenId]
REF_7(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
}
// Function: 1971.sol-ERC721BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _owner != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_4(uint256) -> ownedTokensCount[_owner]
RETURN REF_4"];
}
// Function: 1971.sol-ERC721BasicToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_108(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-ERC721BasicToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_100(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_101 = UnaryType.BANG TMP_100 
CONDITION TMP_101"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)

IRs:
TMP_102 = CONVERT _to to ERC721Receiver
TMP_103(bytes4) = HIGH_LEVEL_CALL, dest:TMP_102(ERC721Receiver), function:onERC721Received, arguments:['msg.sender', '_from', '_tokenId', '_data']  
retval(bytes4) := TMP_103(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_104(bool) = retval == ERC721_RECEIVED
RETURN TMP_104"];
}
// Function: 1971.sol-ERC721BasicToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_85(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_86(bool) = TMP_85 == _owner
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_13(address) -> tokenApprovals[_tokenId]
TMP_88 = CONVERT 0 to address
TMP_89(bool) = REF_13 != TMP_88
CONDITION TMP_89"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_14(address) -> tokenApprovals[_tokenId]
TMP_90 = CONVERT 0 to address
REF_14(address) (->tokenApprovals) := TMP_90(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1971.sol-ERC721BasicToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC721)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_registerInterface(InterfaceId_ERC721Exists)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Exists)"];
}
// Function: 1971.sol-ERC721BasicToken-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_6(address) -> tokenOwner[_tokenId]
owner(address) := REF_6(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = owner != TMP_38
RETURN TMP_39"];
}
// Function: 1971.sol-ERC721BasicToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_8(address) -> tokenApprovals[_tokenId]
RETURN REF_8"];
}
// Function: 1971.sol-ERC721BasicToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_11(mapping(address => bool)) -> operatorApprovals[_owner]
REF_12(bool) -> REF_11[_operator]
RETURN REF_12"];
}
// Function: 1971.sol-ERC721BasicToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_68(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_68(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_69(bool) = _spender == owner
TMP_70(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_71(bool) = TMP_70 == _spender
TMP_72(bool) = TMP_69 || TMP_71
TMP_73(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_74(bool) = TMP_72 || TMP_73
RETURN TMP_74"];
}
// Function: 1971.sol-ERC721BasicToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_105(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_106(bool) = TMP_105 == msg.sender
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-ERC721BasicToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_5(address) -> tokenOwner[_tokenId]
owner(address) := REF_5(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = owner != TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 1971.sol-ERC721BasicToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_95(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_96(bool) = TMP_95 == _from
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_20(uint256) -> ownedTokensCount[_from]
REF_21(uint256) -> ownedTokensCount[_from]
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '1'] 
REF_20(uint256) (->ownedTokensCount) := TMP_98(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_23(address) -> tokenOwner[_tokenId]
TMP_99 = CONVERT 0 to address
REF_23(address) (->tokenOwner) := TMP_99(address)"];
}
// Function: 1971.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
2->1;
}
// Function: 1971.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_65(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
3->1;
}
// Function: 1971.sol-ERC721BasicToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_48(bool) = _to != msg.sender
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_9(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_10(bool) -> REF_9[_to]
REF_10(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 1971.sol-ERC721BasicToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
}
// Function: 1971.sol-ERC721BasicToken-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_2(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_2"];
}
// Function: 1971.sol-ERC721BasicToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = _from != TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _to != TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
7->1;
}
// Function: 1971.sol-ERC721Enumerable-approve(address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-getApproved(uint256)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-isApprovedForAll(address,address)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-setApprovalForAll(address,bool)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-supportsInterface(bytes4)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 1971.sol-ERC721Enumerable-transferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Metadata-approve(address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 1971.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 1971.sol-ERC721Metadata-getApproved(uint256)
digraph{
}
// Function: 1971.sol-ERC721Metadata-isApprovedForAll(address,address)
digraph{
}
// Function: 1971.sol-ERC721Metadata-name()
digraph{
}
// Function: 1971.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 1971.sol-ERC721Metadata-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Metadata-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 1971.sol-ERC721Metadata-setApprovalForAll(address,bool)
digraph{
}
// Function: 1971.sol-ERC721Metadata-supportsInterface(bytes4)
digraph{
}
// Function: 1971.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 1971.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 1971.sol-ERC721Metadata-transferFrom(address,address,uint256)
digraph{
}
// Function: 1971.sol-ERC721Receiver-onERC721Received(address,address,uint256,bytes)
digraph{
}
// Function: 1971.sol-ERC721Receiver-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
}
// Function: 1971.sol-ERC721Token-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._burn(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._burn(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
bytes(tokenURIs[_tokenId]).length != 0

IRs:
REF_82(string) -> tokenURIs[_tokenId]
TMP_212 = CONVERT REF_82 to bytes
REF_83 -> LENGTH TMP_212
TMP_213(bool) = REF_83 != 0
CONDITION TMP_213"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete tokenURIs[_tokenId]

IRs:
REF_84(string) -> tokenURIs[_tokenId]
tokenURIs = delete REF_84 "];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokenIndex = allTokensIndex[_tokenId]

IRs:
REF_85(uint256) -> allTokensIndex[_tokenId]
tokenIndex(uint256) := REF_85(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTokenIndex = allTokens.length.sub(1)

IRs:
REF_86 -> LENGTH allTokens
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_86', '1'] 
lastTokenIndex(uint256) := TMP_214(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastToken = allTokens[lastTokenIndex]

IRs:
REF_88(uint256) -> allTokens[lastTokenIndex]
lastToken(uint256) := REF_88(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allTokens[tokenIndex] = lastToken

IRs:
REF_89(uint256) -> allTokens[tokenIndex]
REF_89(uint256) (->allTokens) := lastToken(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allTokens[lastTokenIndex] = 0

IRs:
REF_90(uint256) -> allTokens[lastTokenIndex]
REF_90(uint256) (->allTokens) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
allTokens.length --

IRs:
REF_91 -> LENGTH allTokens
TMP_215(uint256) := REF_91(uint256)
REF_91(-> allTokens) = REF_91 - 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
allTokensIndex[_tokenId] = 0

IRs:
REF_92(uint256) -> allTokensIndex[_tokenId]
REF_92(uint256) (->allTokensIndex) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allTokensIndex[lastToken] = tokenIndex

IRs:
REF_93(uint256) -> allTokensIndex[lastToken]
REF_93(uint256) (->allTokensIndex) := tokenIndex(uint256)"];
}
// Function: 1971.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._mint(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._mint(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allTokensIndex[_tokenId] = allTokens.length

IRs:
REF_77(uint256) -> allTokensIndex[_tokenId]
REF_78 -> LENGTH allTokens
REF_77(uint256) (->allTokensIndex) := REF_78(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allTokens.push(_tokenId)

IRs:
REF_80 -> LENGTH allTokens
TMP_209(uint256) := REF_80(uint256)
TMP_210(uint256) = TMP_209 + 1
REF_80(uint256) (->allTokens) := TMP_210(uint256)
REF_81(uint256) -> allTokens[TMP_209]
REF_81(uint256) (->allTokens) := _tokenId(uint256)"];
}
// Function: 1971.sol-ERC721Token-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_186(bool) = _interfaceId != 4294967295
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_49(bool) -> supportedInterfaces[_interfaceId]
REF_49(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 1971.sol-ERC721Token-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_198(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_55(string) -> tokenURIs[_tokenId]
REF_55(string) (->tokenURIs) := _uri(string)"];
}
// Function: 1971.sol-ERC721Token-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = ownedTokens[_to].length

IRs:
REF_56(uint256[]) -> ownedTokens[_to]
REF_57 -> LENGTH REF_56
length(uint256) := REF_57(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_58(uint256[]) -> ownedTokens[_to]
REF_60 -> LENGTH REF_58
TMP_202(uint256) := REF_60(uint256)
TMP_203(uint256) = TMP_202 + 1
REF_60(uint256) (->ownedTokens) := TMP_203(uint256)
REF_61(uint256) -> REF_58[TMP_202]
REF_61(uint256) (->ownedTokens) := _tokenId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_62(uint256) -> ownedTokensIndex[_tokenId]
REF_62(uint256) (->ownedTokensIndex) := length(uint256)"];
}
// Function: 1971.sol-ERC721Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_120(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_120(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_121(bool) = _to != owner
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_123(bool) = msg.sender == owner
TMP_124(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_125(bool) = TMP_123 || TMP_124
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_29(address) -> tokenApprovals[_tokenId]
REF_29(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
}
// Function: 1971.sol-ERC721Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_112 = CONVERT 0 to address
TMP_113(bool) = _owner != TMP_112
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_26(uint256) -> ownedTokensCount[_owner]
RETURN REF_26"];
}
// Function: 1971.sol-ERC721Token-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_219(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-ERC721Token-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_180(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_181 = UnaryType.BANG TMP_180 
CONDITION TMP_181"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)

IRs:
TMP_182 = CONVERT _to to ERC721Receiver
TMP_183(bytes4) = HIGH_LEVEL_CALL, dest:TMP_182(ERC721Receiver), function:onERC721Received, arguments:['msg.sender', '_from', '_tokenId', '_data']  
retval(bytes4) := TMP_183(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_184(bool) = retval == ERC721_RECEIVED
RETURN TMP_184"];
}
// Function: 1971.sol-ERC721Token-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_165(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_166(bool) = TMP_165 == _owner
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_35(address) -> tokenApprovals[_tokenId]
TMP_168 = CONVERT 0 to address
TMP_169(bool) = REF_35 != TMP_168
CONDITION TMP_169"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_36(address) -> tokenApprovals[_tokenId]
TMP_170 = CONVERT 0 to address
REF_36(address) (->tokenApprovals) := TMP_170(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1971.sol-ERC721Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC165)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC165)"];
}
// Function: 1971.sol-ERC721Token-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_registerInterface(InterfaceId_ERC721Enumerable)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Enumerable)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_registerInterface(InterfaceId_ERC721Metadata)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Metadata)"];
}
// Function: 1971.sol-ERC721Token-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_28(address) -> tokenOwner[_tokenId]
owner(address) := REF_28(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_118 = CONVERT 0 to address
TMP_119(bool) = owner != TMP_118
RETURN TMP_119"];
}
// Function: 1971.sol-ERC721Token-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_30(address) -> tokenApprovals[_tokenId]
RETURN REF_30"];
}
// Function: 1971.sol-ERC721Token-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_33(mapping(address => bool)) -> operatorApprovals[_owner]
REF_34(bool) -> REF_33[_operator]
RETURN REF_34"];
}
// Function: 1971.sol-ERC721Token-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_148(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_148(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_149(bool) = _spender == owner
TMP_150(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_151(bool) = TMP_150 == _spender
TMP_152(bool) = TMP_149 || TMP_151
TMP_153(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_154(bool) = TMP_152 || TMP_153
RETURN TMP_154"];
}
// Function: 1971.sol-ERC721Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name_

IRs:
RETURN name_"];
}
// Function: 1971.sol-ERC721Token-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_216(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_217(bool) = TMP_216 == msg.sender
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-ERC721Token-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_27(address) -> tokenOwner[_tokenId]
owner(address) := REF_27(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_115 = CONVERT 0 to address
TMP_116(bool) = owner != TMP_115
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 1971.sol-ERC721Token-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_63(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_63(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = ownedTokens[_from].length.sub(1)

IRs:
REF_64(uint256[]) -> ownedTokens[_from]
REF_65 -> LENGTH REF_64
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_65', '1'] 
lastTokenIndex(uint256) := TMP_205(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_67(uint256[]) -> ownedTokens[_from]
REF_68(uint256) -> REF_67[lastTokenIndex]
lastToken(uint256) := REF_68(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_69(uint256[]) -> ownedTokens[_from]
REF_70(uint256) -> REF_69[tokenIndex]
REF_70(uint256) (->ownedTokens) := lastToken(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_71(uint256[]) -> ownedTokens[_from]
REF_72(uint256) -> REF_71[lastTokenIndex]
REF_72(uint256) (->ownedTokens) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_73(uint256[]) -> ownedTokens[_from]
REF_74 -> LENGTH REF_73
TMP_206(uint256) := REF_74(uint256)
REF_74(-> ownedTokens) = REF_74 - 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_75(uint256) -> ownedTokensIndex[_tokenId]
REF_75(uint256) (->ownedTokensIndex) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_76(uint256) -> ownedTokensIndex[lastToken]
REF_76(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
}
// Function: 1971.sol-ERC721Token-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
2->1;
}
// Function: 1971.sol-ERC721Token-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_145(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
3->1;
}
// Function: 1971.sol-ERC721Token-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_128(bool) = _to != msg.sender
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_31(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_32(bool) -> REF_31[_to]
REF_32(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 1971.sol-ERC721Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 1971.sol-ERC721Token-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_48(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_48"];
}
// Function: 1971.sol-ERC721Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol_

IRs:
RETURN symbol_"];
}
// Function: 1971.sol-ERC721Token-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < totalSupply())

IRs:
TMP_195(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
TMP_196(bool) = _index < TMP_195
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allTokens[_index]

IRs:
REF_54(uint256) -> allTokens[_index]
RETURN REF_54"];
}
// Function: 1971.sol-ERC721Token-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < balanceOf(_owner))

IRs:
TMP_192(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
TMP_193(bool) = _index < TMP_192
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokens[_owner][_index]

IRs:
REF_51(uint256[]) -> ownedTokens[_owner]
REF_52(uint256) -> REF_51[_index]
RETURN REF_52"];
}
// Function: 1971.sol-ERC721Token-tokenURI(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_190(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenURIs[_tokenId]

IRs:
REF_50(string) -> tokenURIs[_tokenId]
RETURN REF_50"];
}
// Function: 1971.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allTokens.length

IRs:
REF_53 -> LENGTH allTokens
RETURN REF_53"];
}
// Function: 1971.sol-ERC721Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = _from != TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_134 = CONVERT 0 to address
TMP_135(bool) = _to != TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
7->1;
}
// Function: 1971.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _newOwner != TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1971.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1971.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1971.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_14 = CONVERT 0 to address
owner(address) := TMP_14(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1971.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1971.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1971.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1971.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1971.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1971.sol-SupportsInterfaceWithLookup-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_25(bool) = _interfaceId != 4294967295
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_1(bool) -> supportedInterfaces[_interfaceId]
REF_1(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 1971.sol-SupportsInterfaceWithLookup-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC165)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC165)"];
}
// Function: 1971.sol-SupportsInterfaceWithLookup-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
}
// Function: 1971.sol-SupportsInterfaceWithLookup-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_0(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_0"];
}
}
