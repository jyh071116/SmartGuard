digraph G {
// Function: 1974.sol-BicasoBIOToken-_buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(buyOpen)

IRs:
TMP_58(None) = SOLIDITY_CALL require(bool)(buyOpen)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(buyPrice > 0)

IRs:
TMP_59(bool) = buyPrice > 0
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_61(bool) = msg.value > 0
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
amount = msg.value / buyPrice

IRs:
TMP_63(uint256) = msg.value / buyPrice
amount(uint256) := TMP_63(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(owner,msg.sender,amount)

IRs:
INTERNAL_CALL, BicasoBIOToken._transfer(address,address,uint256)(owner,msg.sender,amount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
BuyToken(msg.sender,buyPrice,amount,msg.value)

IRs:
Emit BuyToken(msg.sender,buyPrice,amount,msg.value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
amount

IRs:
RETURN amount"];
8[label="Node Type: RETURN 8

EXPRESSION:
amount

IRs:
RETURN amount"];
}
// Function: 1974.sol-BicasoBIOToken-_sell(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(sellOpen)

IRs:
TMP_66(None) = SOLIDITY_CALL require(bool)(sellOpen)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_25(bool) -> frozenAccount[_from]
TMP_67 = UnaryType.BANG REF_25 
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_69(bool) = amount > 0
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(sellPrice > 0)

IRs:
TMP_71(bool) = sellPrice > 0
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_from != owner)

IRs:
TMP_73(bool) = _from != owner
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(_from,owner,amount)

IRs:
INTERNAL_CALL, BicasoBIOToken._transfer(address,address,uint256)(_from,owner,amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revenue = amount * sellPrice

IRs:
TMP_76(uint256) = amount * sellPrice
revenue(uint256) := TMP_76(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_from.transfer(revenue)

IRs:
Transfer dest:_from value:revenue"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
SellToken(_from,sellPrice,amount,revenue)

IRs:
Emit SellToken(_from,sellPrice,amount,revenue)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
revenue

IRs:
RETURN revenue"];
11[label="Node Type: RETURN 11

EXPRESSION:
revenue

IRs:
RETURN revenue"];
}
// Function: 1974.sol-BicasoBIOToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_46(bool) = _to != 0
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_16(uint256) -> balanceOf[_from]
TMP_48(bool) = REF_16 >= _value
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_17(uint256) -> balanceOf[_to]
TMP_50(uint256) = REF_17 + _value
REF_18(uint256) -> balanceOf[_to]
TMP_51(bool) = TMP_50 > REF_18
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_19(uint256) -> balanceOf[_from]
REF_20(uint256) -> balanceOf[_to]
TMP_53(uint256) = REF_19 + REF_20
previousBalances(uint256) := TMP_53(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_21(uint256) -> balanceOf[_from]
REF_21(-> balanceOf) = REF_21 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_22(uint256) -> balanceOf[_to]
REF_22(-> balanceOf) = REF_22 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_23(uint256) -> balanceOf[_from]
REF_24(uint256) -> balanceOf[_to]
TMP_55(uint256) = REF_23 + REF_24
TMP_56(bool) = TMP_55 == previousBalances
TMP_57(None) = SOLIDITY_CALL assert(bool)(TMP_56)"];
}
// Function: 1974.sol-BicasoBIOToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_8(bool) -> frozenAccount[msg.sender]
TMP_21 = UnaryType.BANG REF_8 
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_9(mapping(address => uint256)) -> allowance[msg.sender]
REF_10(uint256) -> REF_9[_spender]
REF_10(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1974.sol-BicasoBIOToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_11(bool) -> frozenAccount[msg.sender]
TMP_23 = UnaryType.BANG REF_11 
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_25 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_25(tokenRecipient)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_26(bool) = INTERNAL_CALL, BicasoBIOToken.approve(address,uint256)(_spender,_value)
CONDITION TMP_26"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1974.sol-BicasoBIOToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = 0x28F1DdeC2218ec95b14076127a7AdE2F2986E4A6

IRs:
owner(address) := 233753442592952138992233571986190811600897107110(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = BICASO

IRs:
name(string) := BICASO(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = BIO

IRs:
symbol(string) := BIO(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = 5000000000 * 10 ** uint256(8)

IRs:
TMP_0 = CONVERT 8 to uint256
TMP_1(uint256) = 10 ** TMP_0
TMP_2(uint256) = 5000000000 * TMP_1
totalSupply(uint256) := TMP_2(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[owner] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[owner]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
}
// Function: 1974.sol-BicasoBIOToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_3(bool) = msg.sender != owner
CONDITION TMP_3"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_buy()

IRs:
TMP_4(uint256) = INTERNAL_CALL, BicasoBIOToken._buy()()"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 1974.sol-BicasoBIOToken-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(target != owner)

IRs:
TMP_28(bool) = target != owner
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_13(bool) -> frozenAccount[target]
REF_13(bool) (->frozenAccount) := freeze(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BicasoBIOToken.onlyOwner()()"];
4->1;
}
// Function: 1974.sol-BicasoBIOToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_79(bool) = msg.sender == owner
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1974.sol-BicasoBIOToken-setBuyOpen(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(buyPrice > 0)

IRs:
TMP_35(bool) = buyPrice > 0
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buyOpen = newBuyOpen

IRs:
buyOpen(bool) := newBuyOpen(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BicasoBIOToken.onlyOwner()()"];
3->1;
}
// Function: 1974.sol-BicasoBIOToken-setPrices(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sellPrice = newSellPrice

IRs:
sellPrice(uint256) := newSellPrice(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buyPrice = newBuyPrice

IRs:
buyPrice(uint256) := newBuyPrice(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BicasoBIOToken.onlyOwner()()"];
3->1;
}
// Function: 1974.sol-BicasoBIOToken-setSellOpen(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(sellPrice > 0)

IRs:
TMP_38(bool) = sellPrice > 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sellOpen = newSellOpen

IRs:
sellOpen(bool) := newSellOpen(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BicasoBIOToken.onlyOwner()()"];
3->1;
}
// Function: 1974.sol-BicasoBIOToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_1(bool) -> frozenAccount[msg.sender]
TMP_5 = UnaryType.BANG REF_1 
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_to == address(this)

IRs:
TMP_7 = CONVERT this to address
TMP_8(bool) = _to == TMP_7
CONDITION TMP_8"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_sell(msg.sender,_value)

IRs:
TMP_9(uint256) = INTERNAL_CALL, BicasoBIOToken._sell(address,uint256)(msg.sender,_value)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BicasoBIOToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1974.sol-BicasoBIOToken-transferEth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.transfer(amount * 10 ** uint256(18))

IRs:
TMP_41 = CONVERT 18 to uint256
TMP_42(uint256) = 10 ** TMP_41
TMP_43(uint256) = amount * TMP_42
Transfer dest:msg.sender value:TMP_43"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BicasoBIOToken.onlyOwner()()"];
2->1;
}
// Function: 1974.sol-BicasoBIOToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[_from] && ! frozenAccount[msg.sender])

IRs:
REF_2(bool) -> frozenAccount[_from]
TMP_11 = UnaryType.BANG REF_2 
REF_3(bool) -> frozenAccount[msg.sender]
TMP_12 = UnaryType.BANG REF_3 
TMP_13(bool) = TMP_11 && TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_4(mapping(address => uint256)) -> allowance[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_15(bool) = _value <= REF_5
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_6(mapping(address => uint256)) -> allowance[_from]
REF_7(uint256) -> REF_6[msg.sender]
REF_7(-> allowance) = REF_7 - _value"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_to == address(this)

IRs:
TMP_17 = CONVERT this to address
TMP_18(bool) = _to == TMP_17
CONDITION TMP_18"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_sell(_from,_value)

IRs:
TMP_19(uint256) = INTERNAL_CALL, BicasoBIOToken._sell(address,uint256)(_from,_value)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BicasoBIOToken._transfer(address,address,uint256)(_from,_to,_value)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1974.sol-BicasoBIOToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(owner,newOwner,balanceOf[owner])

IRs:
REF_14(uint256) -> balanceOf[owner]
INTERNAL_CALL, BicasoBIOToken._transfer(address,address,uint256)(owner,newOwner,REF_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BicasoBIOToken.onlyOwner()()"];
3->1;
}
// Function: 1974.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
