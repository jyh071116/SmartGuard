digraph G {
// Function: 241.sol-ExShellToken-ExShellToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(init == true)

IRs:
TMP_90(bool) = init == True
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 2000000000

IRs:
totalSupply(uint256) := 2000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[0xa089a405b1df71a6155705fb2bce87df2a86a9e4] = totalSupply

IRs:
REF_40(uint256) -> balances[916508013776751205056983733556871768057573714404]
REF_40(uint256) (->balances) := totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
init = false

IRs:
init(bool) := False(bool)"];
}
// Function: 241.sol-ExShellToken-allowance(address,address)
digraph{
}
// Function: 241.sol-ExShellToken-approve(address,uint256)
digraph{
}
// Function: 241.sol-ExShellToken-balanceOf(address)
digraph{
}
// Function: 241.sol-ExShellToken-controller()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller1 || msg.sender == controller2)

IRs:
TMP_94(bool) = msg.sender == controller1
TMP_95(bool) = msg.sender == controller2
TMP_96(bool) = TMP_94 || TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 241.sol-ExShellToken-on()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(status == true)

IRs:
TMP_92(bool) = status == True
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 241.sol-ExShellToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_74(uint256) = x + y
z(uint256) := TMP_74(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_75(bool) = z >= x
TMP_76(bool) = z >= y
TMP_77(bool) = TMP_75 && TMP_76
TMP_78(None) = SOLIDITY_CALL assert(bool)(TMP_77)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-ExShellToken-safeMult(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_82(uint256) = x * y
z(uint256) := TMP_82(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_83(bool) = x == 0
TMP_84(uint256) = z / x
TMP_85(bool) = TMP_84 == y
TMP_86(bool) = TMP_83 || TMP_85
TMP_87(None) = SOLIDITY_CALL assert(bool)(TMP_86)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-ExShellToken-safeSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_79(bool) = x >= y
TMP_80(None) = SOLIDITY_CALL assert(bool)(TMP_79)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_81(uint256) = x - y
z(uint256) := TMP_81(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-ExShellToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
status = true

IRs:
status(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = ExShellToken

IRs:
name(string) := ExShellToken(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = ET

IRs:
symbol(string) := ET(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
init = true

IRs:
init(bool) := True(bool)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
controller1 = 0xa089a405b1df71a6155705fb2bce87df2a86a9e4

IRs:
controller1(address) := 916508013776751205056983733556871768057573714404(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
controller2 = 0x5aa64423529e43a53c7ea037a07f94abc0c3a111

IRs:
controller2(address) := 517517028732246293122920115584634870634551419153(uint256)"];
}
// Function: 241.sol-ExShellToken-transfer(address,uint256)
digraph{
}
// Function: 241.sol-ExShellToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 241.sol-ExShellToken-turnoff()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
status = false

IRs:
status(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller()

IRs:
MODIFIER_CALL, ExShellToken.controller()()"];
2->1;
}
// Function: 241.sol-ExShellToken-turnon()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
status = true

IRs:
status(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller()

IRs:
MODIFIER_CALL, ExShellToken.controller()()"];
2->1;
}
// Function: 241.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_0(uint256) = x + y
z(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_1(bool) = z >= x
TMP_2(bool) = z >= y
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-SafeMath-safeMult(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_8(uint256) = x * y
z(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_9(bool) = x == 0
TMP_10(uint256) = z / x
TMP_11(bool) = TMP_10 == y
TMP_12(bool) = TMP_9 || TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-SafeMath-safeSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_5(bool) = x >= y
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_7(uint256) = x - y
z(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_18(mapping(address => uint256)) -> allowed[_owner]
REF_19(uint256) -> REF_18[_spender]
RETURN REF_19"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
on()

IRs:
MODIFIER_CALL, StandardToken.on()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 241.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_16(mapping(address => uint256)) -> allowed[msg.sender]
REF_17(uint256) -> REF_16[_spender]
REF_17(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
on()

IRs:
MODIFIER_CALL, StandardToken.on()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 241.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_15(uint256) -> balances[_owner]
RETURN REF_15"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
on()

IRs:
MODIFIER_CALL, StandardToken.on()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 241.sol-StandardToken-on()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(status == true)

IRs:
TMP_50(bool) = status == True
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 241.sol-StandardToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x + y

IRs:
TMP_14(uint256) = x + y
z(uint256) := TMP_14(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((z >= x) && (z >= y))

IRs:
TMP_15(bool) = z >= x
TMP_16(bool) = z >= y
TMP_17(bool) = TMP_15 && TMP_16
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-StandardToken-safeMult(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = x * y

IRs:
TMP_22(uint256) = x * y
z(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)((x == 0) || (z / x == y))

IRs:
TMP_23(bool) = x == 0
TMP_24(uint256) = z / x
TMP_25(bool) = TMP_24 == y
TMP_26(bool) = TMP_23 || TMP_25
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-StandardToken-safeSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(x >= y)

IRs:
TMP_19(bool) = x >= y
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
z = x - y

IRs:
TMP_21(uint256) = x - y
z(uint256) := TMP_21(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 241.sol-StandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
status = true

IRs:
status(bool) := True(bool)"];
}
// Function: 241.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0 && _to != 0X0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_28(bool) = REF_0 >= _value
TMP_29(bool) = _value > 0
TMP_30(bool) = TMP_28 && TMP_29
TMP_31(bool) = _to != 0
TMP_32(bool) = TMP_30 && TMP_31
CONDITION TMP_32"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_2(uint256) -> balances[_to]
REF_3(uint256) -> balances[_to]
TMP_33(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_3,_value)
REF_2(uint256) (->balances) := TMP_33(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
on()

IRs:
MODIFIER_CALL, StandardToken.on()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 241.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_4(uint256) -> balances[_from]
TMP_36(bool) = REF_4 >= _value
REF_5(mapping(address => uint256)) -> allowed[_from]
REF_6(uint256) -> REF_5[msg.sender]
TMP_37(bool) = REF_6 >= _value
TMP_38(bool) = TMP_36 && TMP_37
TMP_39(bool) = _value > 0
TMP_40(bool) = TMP_38 && TMP_39
CONDITION TMP_40"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_41(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_8,_value)
REF_7(uint256) (->balances) := TMP_41(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = safeSubtract(balances[_from],_value)

IRs:
REF_9(uint256) -> balances[_from]
REF_10(uint256) -> balances[_from]
TMP_42(uint256) = INTERNAL_CALL, SafeMath.safeSubtract(uint256,uint256)(REF_10,_value)
REF_9(uint256) (->balances) := TMP_42(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender],_value)

IRs:
REF_11(mapping(address => uint256)) -> allowed[_from]
REF_12(uint256) -> REF_11[msg.sender]
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_43(uint256) = INTERNAL_CALL, SafeMath.safeSubtract(uint256,uint256)(REF_14,_value)
REF_12(uint256) (->allowed) := TMP_43(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
on()

IRs:
MODIFIER_CALL, StandardToken.on()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 241.sol-Token-allowance(address,address)
digraph{
}
// Function: 241.sol-Token-approve(address,uint256)
digraph{
}
// Function: 241.sol-Token-balanceOf(address)
digraph{
}
// Function: 241.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 241.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
