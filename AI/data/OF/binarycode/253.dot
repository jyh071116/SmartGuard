digraph G {
// Function: 253.sol-AccessControl-amountWithTip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tip = safeMul(amount,tip_rate) / (1000000000000000000)

IRs:
TMP_31(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(amount,tip_rate)
TMP_32(uint256) = TMP_31 / 1000000000000000000
tip(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tip_total = safeAdd(tip_total,tip)

IRs:
TMP_33(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tip_total,tip)
tip_total(uint256) := TMP_33(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
safeSub(amount,tip)

IRs:
TMP_34(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(amount,tip)
RETURN TMP_34"];
}
// Function: 253.sol-AccessControl-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_29 = UnaryType.BANG assertion 
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 253.sol-AccessControl-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tip_total = safeAdd(tip_total,msg.value)

IRs:
TMP_30(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tip_total,msg.value)
tip_total(uint256) := TMP_30(uint256)"];
}
// Function: 253.sol-AccessControl-onlyCEO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ceoAddress)

IRs:
TMP_62(bool) = msg.sender == ceoAddress
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-AccessControl-onlyCFO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cfoAddress)

IRs:
TMP_64(bool) = msg.sender == cfoAddress
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-AccessControl-onlyCLevel()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cooAddress || msg.sender == ceoAddress || msg.sender == cfoAddress)

IRs:
TMP_68(bool) = msg.sender == cooAddress
TMP_69(bool) = msg.sender == ceoAddress
TMP_70(bool) = TMP_68 || TMP_69
TMP_71(bool) = msg.sender == cfoAddress
TMP_72(bool) = TMP_70 || TMP_71
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-AccessControl-onlyCOO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cooAddress)

IRs:
TMP_66(bool) = msg.sender == cooAddress
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-AccessControl-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCLevel()

IRs:
MODIFIER_CALL, AccessControl.onlyCLevel()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessControl.whenNotPaused()()"];
3->1;
}
// Function: 253.sol-AccessControl-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_24(uint256) = a + b
c(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_25(bool) = c >= a
TMP_26(bool) = c >= b
TMP_27(bool) = TMP_25 && TMP_26
INTERNAL_CALL, SafeMath.assert(bool)(TMP_27)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 253.sol-AccessControl-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_15(uint256) = a * b
c(uint256) := TMP_15(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_16(bool) = a == 0
TMP_17(uint256) = c / a
TMP_18(bool) = TMP_17 == b
TMP_19(bool) = TMP_16 || TMP_18
INTERNAL_CALL, SafeMath.assert(bool)(TMP_19)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 253.sol-AccessControl-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_21(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_21)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_23(uint256) = a - b
RETURN TMP_23"];
}
// Function: 253.sol-AccessControl-setCEO(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newCEO != address(0))

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = _newCEO != TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ceoAddress = _newCEO

IRs:
ceoAddress(address) := _newCEO(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->1;
}
// Function: 253.sol-AccessControl-setCFO(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newCFO != address(0))

IRs:
TMP_50 = CONVERT 0 to address
TMP_51(bool) = _newCFO != TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cfoAddress = _newCFO

IRs:
cfoAddress(address) := _newCFO(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->1;
}
// Function: 253.sol-AccessControl-setCOO(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newCOO != address(0))

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _newCOO != TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cooAddress = _newCOO

IRs:
cooAddress(address) := _newCOO(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->1;
}
// Function: 253.sol-AccessControl-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newContractAddress = newContract

IRs:
newContractAddress(address) := newContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ContractUpgrade(newContract)

IRs:
Emit ContractUpgrade(newContract)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessControl.whenPaused()()"];
4->1;
}
// Function: 253.sol-AccessControl-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
tip_total = 0

IRs:
tip_total(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tip_rate = 20000000000000000

IRs:
tip_rate(uint256) := 20000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 253.sol-AccessControl-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessControl.whenPaused()()"];
3->1;
}
// Function: 253.sol-AccessControl-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_74 = UnaryType.BANG paused 
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-AccessControl-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_76(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-AccessControl-withdrawTip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount > 0 && amount <= tip_total)

IRs:
TMP_35(bool) = amount > 0
TMP_36(bool) = amount <= tip_total
TMP_37(bool) = TMP_35 && TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender.send(amount))

IRs:
TMP_39 = SEND dest:msg.sender value:amount
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tip_total = tip_total - amount

IRs:
TMP_41(uint256) = tip_total - amount
tip_total(uint256) := TMP_41(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, AccessControl.onlyCFO()()"];
4->1;
}
// Function: 253.sol-RpsGame-RpsGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
payoff[ROCK][ROCK] = DRAW

IRs:
REF_2(mapping(uint256 => uint8)) -> payoff[ROCK]
REF_3(uint8) -> REF_2[ROCK]
REF_3(uint8) (->payoff) := DRAW(uint8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
payoff[ROCK][PAPER] = PLAYERWIN

IRs:
REF_4(mapping(uint256 => uint8)) -> payoff[ROCK]
REF_5(uint8) -> REF_4[PAPER]
REF_5(uint8) (->payoff) := PLAYERWIN(uint8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
payoff[ROCK][SCISSORS] = DEALERWIN

IRs:
REF_6(mapping(uint256 => uint8)) -> payoff[ROCK]
REF_7(uint8) -> REF_6[SCISSORS]
REF_7(uint8) (->payoff) := DEALERWIN(uint8)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
payoff[PAPER][ROCK] = DEALERWIN

IRs:
REF_8(mapping(uint256 => uint8)) -> payoff[PAPER]
REF_9(uint8) -> REF_8[ROCK]
REF_9(uint8) (->payoff) := DEALERWIN(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
payoff[PAPER][PAPER] = DRAW

IRs:
REF_10(mapping(uint256 => uint8)) -> payoff[PAPER]
REF_11(uint8) -> REF_10[PAPER]
REF_11(uint8) (->payoff) := DRAW(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
payoff[PAPER][SCISSORS] = PLAYERWIN

IRs:
REF_12(mapping(uint256 => uint8)) -> payoff[PAPER]
REF_13(uint8) -> REF_12[SCISSORS]
REF_13(uint8) (->payoff) := PLAYERWIN(uint8)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
payoff[SCISSORS][ROCK] = PLAYERWIN

IRs:
REF_14(mapping(uint256 => uint8)) -> payoff[SCISSORS]
REF_15(uint8) -> REF_14[ROCK]
REF_15(uint8) (->payoff) := PLAYERWIN(uint8)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
payoff[SCISSORS][PAPER] = DEALERWIN

IRs:
REF_16(mapping(uint256 => uint8)) -> payoff[SCISSORS]
REF_17(uint8) -> REF_16[PAPER]
REF_17(uint8) (->payoff) := DEALERWIN(uint8)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
payoff[SCISSORS][SCISSORS] = DRAW

IRs:
REF_18(mapping(uint256 => uint8)) -> payoff[SCISSORS]
REF_19(uint8) -> REF_18[SCISSORS]
REF_19(uint8) (->payoff) := DRAW(uint8)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
payoff[NONE][NONE] = DRAW

IRs:
REF_20(mapping(uint256 => uint8)) -> payoff[NONE]
REF_21(uint8) -> REF_20[NONE]
REF_21(uint8) (->payoff) := DRAW(uint8)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
payoff[ROCK][NONE] = DEALERWIN

IRs:
REF_22(mapping(uint256 => uint8)) -> payoff[ROCK]
REF_23(uint8) -> REF_22[NONE]
REF_23(uint8) (->payoff) := DEALERWIN(uint8)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
payoff[PAPER][NONE] = DEALERWIN

IRs:
REF_24(mapping(uint256 => uint8)) -> payoff[PAPER]
REF_25(uint8) -> REF_24[NONE]
REF_25(uint8) (->payoff) := DEALERWIN(uint8)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
payoff[SCISSORS][NONE] = DEALERWIN

IRs:
REF_26(mapping(uint256 => uint8)) -> payoff[SCISSORS]
REF_27(uint8) -> REF_26[NONE]
REF_27(uint8) (->payoff) := DEALERWIN(uint8)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
payoff[NONE][ROCK] = PLAYERWIN

IRs:
REF_28(mapping(uint256 => uint8)) -> payoff[NONE]
REF_29(uint8) -> REF_28[ROCK]
REF_29(uint8) (->payoff) := PLAYERWIN(uint8)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
payoff[NONE][PAPER] = PLAYERWIN

IRs:
REF_30(mapping(uint256 => uint8)) -> payoff[NONE]
REF_31(uint8) -> REF_30[PAPER]
REF_31(uint8) (->payoff) := PLAYERWIN(uint8)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
payoff[NONE][SCISSORS] = PLAYERWIN

IRs:
REF_32(mapping(uint256 => uint8)) -> payoff[NONE]
REF_33(uint8) -> REF_32[SCISSORS]
REF_33(uint8) (->payoff) := PLAYERWIN(uint8)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ceoAddress = msg.sender

IRs:
ceoAddress(address) := msg.sender(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
cooAddress = msg.sender

IRs:
cooAddress(address) := msg.sender(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
cfoAddress = msg.sender

IRs:
cfoAddress(address) := msg.sender(address)"];
}
// Function: 253.sol-RpsGame-amountWithTip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tip = safeMul(amount,tip_rate) / (1000000000000000000)

IRs:
TMP_78(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(amount,tip_rate)
TMP_79(uint256) = TMP_78 / 1000000000000000000
tip(uint256) := TMP_79(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tip_total = safeAdd(tip_total,tip)

IRs:
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tip_total,tip)
tip_total(uint256) := TMP_80(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
safeSub(amount,tip)

IRs:
TMP_81(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(amount,tip)
RETURN TMP_81"];
}
// Function: 253.sol-RpsGame-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_123 = UnaryType.BANG assertion 
CONDITION TMP_123"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 253.sol-RpsGame-checkChoice(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
choice == ROCK || choice == PAPER || choice == SCISSORS

IRs:
TMP_200(bool) = choice == ROCK
TMP_201(bool) = choice == PAPER
TMP_202(bool) = TMP_200 || TMP_201
TMP_203(bool) = choice == SCISSORS
TMP_204(bool) = TMP_202 || TMP_203
RETURN TMP_204"];
}
// Function: 253.sol-RpsGame-close(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
game = games[gameid]

IRs:
REF_74(RpsGame.Game) -> games[gameid]
game(RpsGame.Game) := REF_74(RpsGame.Game)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! game.closed)

IRs:
REF_75(bool) -> game.closed
TMP_175 = UnaryType.BANG REF_75 
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

IRs:
REF_76(uint256) -> game.expireTime
TMP_177(bool) = now > REF_76
REF_77(uint8) -> game.dealerChoice
TMP_178(bool) = REF_77 != NONE
REF_78(uint8) -> game.playerChoice
TMP_179(bool) = REF_78 != NONE
TMP_180(bool) = TMP_178 && TMP_179
TMP_181(bool) = TMP_177 || TMP_180
TMP_182(None) = SOLIDITY_CALL require(bool)(TMP_181)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = payoff[game.dealerChoice][game.playerChoice]

IRs:
REF_79(uint8) -> game.dealerChoice
REF_80(mapping(uint256 => uint8)) -> payoff[REF_79]
REF_81(uint8) -> game.playerChoice
REF_82(uint8) -> REF_80[REF_81]
result(uint8) := REF_82(uint8)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
result == DEALERWIN

IRs:
TMP_183(bool) = result == DEALERWIN
CONDITION TMP_183"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(game.dealer.send(amountWithTip(safeAdd(game.dealerValue,game.playerValue))))

IRs:
REF_83(address) -> game.dealer
REF_85(uint256) -> game.dealerValue
REF_86(uint256) -> game.playerValue
TMP_184(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_85,REF_86)
TMP_185(uint256) = INTERNAL_CALL, AccessControl.amountWithTip(uint256)(TMP_184)
TMP_186 = SEND dest:REF_83 value:TMP_185
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
6->13;
7[label="Node Type: IF 7

EXPRESSION:
result == PLAYERWIN

IRs:
TMP_188(bool) = result == PLAYERWIN
CONDITION TMP_188"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(game.player.send(amountWithTip(safeAdd(game.dealerValue,game.playerValue))))

IRs:
REF_87(address) -> game.player
REF_89(uint256) -> game.dealerValue
REF_90(uint256) -> game.playerValue
TMP_189(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_89,REF_90)
TMP_190(uint256) = INTERNAL_CALL, AccessControl.amountWithTip(uint256)(TMP_189)
TMP_191 = SEND dest:REF_87 value:TMP_190
TMP_192(None) = SOLIDITY_CALL require(bool)(TMP_191)"];
8->12;
9[label="Node Type: IF 9

EXPRESSION:
result == DRAW

IRs:
TMP_193(bool) = result == DRAW
CONDITION TMP_193"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(game.dealer.send(game.dealerValue) && game.player.send(game.playerValue))

IRs:
REF_91(address) -> game.dealer
REF_93(uint256) -> game.dealerValue
TMP_194 = SEND dest:REF_91 value:REF_93
REF_94(address) -> game.player
REF_96(uint256) -> game.playerValue
TMP_195 = SEND dest:REF_94 value:REF_96
TMP_196(bool) = TMP_194 && TMP_195
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
game.closed = true

IRs:
REF_97(bool) -> game.closed
REF_97(bool) (->game) := True(bool)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
game.result = result

IRs:
REF_98(uint8) -> game.result
REF_98(uint8) (->game) := result(uint8)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
CloseGame(gameid,game.dealer,game.player,result)

IRs:
REF_99(address) -> game.dealer
REF_100(address) -> game.player
Emit CloseGame(gameid,REF_99,REF_100,result)"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
game.closed

IRs:
REF_101(bool) -> game.closed
RETURN REF_101"];
}
// Function: 253.sol-RpsGame-createGame(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(dealerHash != 0x0)

IRs:
TMP_124(bool) = dealerHash != 0
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxgame += 1

IRs:
maxgame(uint256) = maxgame + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
game = games[maxgame]

IRs:
REF_34(RpsGame.Game) -> games[maxgame]
game(RpsGame.Game) := REF_34(RpsGame.Game)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
game.dealer = msg.sender

IRs:
REF_35(address) -> game.dealer
REF_35(address) (->game) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
game.player = player

IRs:
REF_36(address) -> game.player
REF_36(address) (->game) := player(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
game.dealerHash = dealerHash

IRs:
REF_37(bytes32) -> game.dealerHash
REF_37(bytes32) (->game) := dealerHash(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
game.dealerChoice = NONE

IRs:
REF_38(uint8) -> game.dealerChoice
REF_38(uint8) (->game) := NONE(uint8)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
game.dealerValue = msg.value

IRs:
REF_39(uint256) -> game.dealerValue
REF_39(uint256) (->game) := msg.value(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
game.expireTime = expireTimeLimit + now

IRs:
REF_40(uint256) -> game.expireTime
TMP_126(uint256) = expireTimeLimit + now
REF_40(uint256) (->game) := TMP_126(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
gameidsOf[msg.sender].push(maxgame)

IRs:
REF_41(uint256[]) -> gameidsOf[msg.sender]
REF_43 -> LENGTH REF_41
TMP_128(uint256) := REF_43(uint256)
TMP_129(uint256) = TMP_128 + 1
REF_43(uint256) (->gameidsOf) := TMP_129(uint256)
REF_44(uint256) -> REF_41[TMP_128]
REF_44(uint256) (->gameidsOf) := maxgame(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
CreateGame(maxgame,game.dealer,game.dealerValue)

IRs:
REF_45(address) -> game.dealer
REF_46(uint256) -> game.dealerValue
Emit CreateGame(maxgame,REF_45,REF_46)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
maxgame

IRs:
RETURN maxgame"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessControl.whenNotPaused()()"];
13->1;
}
// Function: 253.sol-RpsGame-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tip_total = safeAdd(tip_total,msg.value)

IRs:
TMP_77(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tip_total,msg.value)
tip_total(uint256) := TMP_77(uint256)"];
}
// Function: 253.sol-RpsGame-gameCountOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
gameidsOf[owner].length

IRs:
REF_102(uint256[]) -> gameidsOf[owner]
REF_103 -> LENGTH REF_102
RETURN REF_103"];
}
// Function: 253.sol-RpsGame-getProof(address,uint8,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
sha3()(sender,choice,randomSecret)

IRs:
TMP_199(bytes32) = SOLIDITY_CALL sha3()(sender,choice,randomSecret)
RETURN TMP_199"];
}
// Function: 253.sol-RpsGame-joinGame(uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
game = games[gameid]

IRs:
REF_47(RpsGame.Game) -> games[gameid]
game(RpsGame.Game) := REF_47(RpsGame.Game)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value == game.dealerValue && game.dealer != address(0) && game.dealer != msg.sender && game.playerChoice == NONE)

IRs:
REF_48(uint256) -> game.dealerValue
TMP_132(bool) = msg.value == REF_48
REF_49(address) -> game.dealer
TMP_133 = CONVERT 0 to address
TMP_134(bool) = REF_49 != TMP_133
TMP_135(bool) = TMP_132 && TMP_134
REF_50(address) -> game.dealer
TMP_136(bool) = REF_50 != msg.sender
TMP_137(bool) = TMP_135 && TMP_136
REF_51(uint8) -> game.playerChoice
TMP_138(bool) = REF_51 == NONE
TMP_139(bool) = TMP_137 && TMP_138
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(game.player == address(0) || game.player == msg.sender)

IRs:
REF_52(address) -> game.player
TMP_141 = CONVERT 0 to address
TMP_142(bool) = REF_52 == TMP_141
REF_53(address) -> game.player
TMP_143(bool) = REF_53 == msg.sender
TMP_144(bool) = TMP_142 || TMP_143
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! game.closed)

IRs:
REF_54(bool) -> game.closed
TMP_146 = UnaryType.BANG REF_54 
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now < game.expireTime)

IRs:
REF_55(uint256) -> game.expireTime
TMP_148(bool) = now < REF_55
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(checkChoice(choice))

IRs:
TMP_150(bool) = INTERNAL_CALL, RpsGame.checkChoice(uint8)(choice)
TMP_151(None) = SOLIDITY_CALL require(bool)(TMP_150)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
game.player = msg.sender

IRs:
REF_56(address) -> game.player
REF_56(address) (->game) := msg.sender(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
game.playerChoice = choice

IRs:
REF_57(uint8) -> game.playerChoice
REF_57(uint8) (->game) := choice(uint8)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
game.playerValue = msg.value

IRs:
REF_58(uint256) -> game.playerValue
REF_58(uint256) (->game) := msg.value(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
game.expireTime = expireTimeLimit + now

IRs:
REF_59(uint256) -> game.expireTime
TMP_152(uint256) = expireTimeLimit + now
REF_59(uint256) (->game) := TMP_152(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
gameidsOf[msg.sender].push(gameid)

IRs:
REF_60(uint256[]) -> gameidsOf[msg.sender]
REF_62 -> LENGTH REF_60
TMP_154(uint256) := REF_62(uint256)
TMP_155(uint256) = TMP_154 + 1
REF_62(uint256) (->gameidsOf) := TMP_155(uint256)
REF_63(uint256) -> REF_60[TMP_154]
REF_63(uint256) (->gameidsOf) := gameid(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
JoinGame(gameid,game.player,game.playerValue)

IRs:
REF_64(address) -> game.player
REF_65(uint256) -> game.playerValue
Emit JoinGame(gameid,REF_64,REF_65)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
gameid

IRs:
RETURN gameid"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessControl.whenNotPaused()()"];
14->1;
}
// Function: 253.sol-RpsGame-onlyCEO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ceoAddress)

IRs:
TMP_205(bool) = msg.sender == ceoAddress
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-RpsGame-onlyCFO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cfoAddress)

IRs:
TMP_207(bool) = msg.sender == cfoAddress
TMP_208(None) = SOLIDITY_CALL require(bool)(TMP_207)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-RpsGame-onlyCLevel()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cooAddress || msg.sender == ceoAddress || msg.sender == cfoAddress)

IRs:
TMP_211(bool) = msg.sender == cooAddress
TMP_212(bool) = msg.sender == ceoAddress
TMP_213(bool) = TMP_211 || TMP_212
TMP_214(bool) = msg.sender == cfoAddress
TMP_215(bool) = TMP_213 || TMP_214
TMP_216(None) = SOLIDITY_CALL require(bool)(TMP_215)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-RpsGame-onlyCOO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == cooAddress)

IRs:
TMP_209(bool) = msg.sender == cooAddress
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-RpsGame-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCLevel()

IRs:
MODIFIER_CALL, AccessControl.onlyCLevel()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, AccessControl.whenNotPaused()()"];
3->1;
}
// Function: 253.sol-RpsGame-reveal(uint256,uint8,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
game = games[gameid]

IRs:
REF_66(RpsGame.Game) -> games[gameid]
game(RpsGame.Game) := REF_66(RpsGame.Game)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proof = getProof(msg.sender,choice,randomSecret)

IRs:
TMP_158(bytes32) = INTERNAL_CALL, RpsGame.getProof(address,uint8,bytes32)(msg.sender,choice,randomSecret)
proof(bytes32) := TMP_158(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(! game.closed)

IRs:
REF_67(bool) -> game.closed
TMP_159 = UnaryType.BANG REF_67 
TMP_160(None) = SOLIDITY_CALL require(bool)(TMP_159)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(now < game.expireTime)

IRs:
REF_68(uint256) -> game.expireTime
TMP_161(bool) = now < REF_68
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(game.dealerHash != 0x0)

IRs:
REF_69(bytes32) -> game.dealerHash
TMP_163(bool) = REF_69 != 0
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(checkChoice(choice))

IRs:
TMP_165(bool) = INTERNAL_CALL, RpsGame.checkChoice(uint8)(choice)
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(checkChoice(game.playerChoice))

IRs:
REF_70(uint8) -> game.playerChoice
TMP_167(bool) = INTERNAL_CALL, RpsGame.checkChoice(uint8)(REF_70)
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(game.dealer == msg.sender && proof == game.dealerHash)

IRs:
REF_71(address) -> game.dealer
TMP_169(bool) = REF_71 == msg.sender
REF_72(bytes32) -> game.dealerHash
TMP_170(bool) = proof == REF_72
TMP_171(bool) = TMP_169 && TMP_170
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
game.dealerChoice = choice

IRs:
REF_73(uint8) -> game.dealerChoice
REF_73(uint8) (->game) := choice(uint8)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Reveal(gameid,msg.sender,choice)

IRs:
Emit Reveal(gameid,msg.sender,choice)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
close(gameid)

IRs:
TMP_174(bool) = INTERNAL_CALL, RpsGame.close(uint256)(gameid)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 253.sol-RpsGame-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_118(uint256) = a + b
c(uint256) := TMP_118(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_119(bool) = c >= a
TMP_120(bool) = c >= b
TMP_121(bool) = TMP_119 && TMP_120
INTERNAL_CALL, SafeMath.assert(bool)(TMP_121)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 253.sol-RpsGame-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_109(uint256) = a * b
c(uint256) := TMP_109(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_110(bool) = a == 0
TMP_111(uint256) = c / a
TMP_112(bool) = TMP_111 == b
TMP_113(bool) = TMP_110 || TMP_112
INTERNAL_CALL, SafeMath.assert(bool)(TMP_113)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 253.sol-RpsGame-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_115(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_115)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_117(uint256) = a - b
RETURN TMP_117"];
}
// Function: 253.sol-RpsGame-setCEO(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newCEO != address(0))

IRs:
TMP_93 = CONVERT 0 to address
TMP_94(bool) = _newCEO != TMP_93
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ceoAddress = _newCEO

IRs:
ceoAddress(address) := _newCEO(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->1;
}
// Function: 253.sol-RpsGame-setCFO(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newCFO != address(0))

IRs:
TMP_97 = CONVERT 0 to address
TMP_98(bool) = _newCFO != TMP_97
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cfoAddress = _newCFO

IRs:
cfoAddress(address) := _newCFO(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->1;
}
// Function: 253.sol-RpsGame-setCOO(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newCOO != address(0))

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = _newCOO != TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cooAddress = _newCOO

IRs:
cooAddress(address) := _newCOO(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->1;
}
// Function: 253.sol-RpsGame-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newContractAddress = newContract

IRs:
newContractAddress(address) := newContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ContractUpgrade(newContract)

IRs:
Emit ContractUpgrade(newContract)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessControl.whenPaused()()"];
4->1;
}
// Function: 253.sol-RpsGame-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
NONE = 0

IRs:
NONE(uint8) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ROCK = 10

IRs:
ROCK(uint8) := 10(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PAPER = 20

IRs:
PAPER(uint8) := 20(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
SCISSORS = 30

IRs:
SCISSORS(uint8) := 30(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
DEALERWIN = 201

IRs:
DEALERWIN(uint8) := 201(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
PLAYERWIN = 102

IRs:
PLAYERWIN(uint8) := 102(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
DRAW = 101

IRs:
DRAW(uint8) := 101(uint256)"];
}
// Function: 253.sol-RpsGame-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
tip_total = 0

IRs:
tip_total(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tip_rate = 20000000000000000

IRs:
tip_rate(uint256) := 20000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
maxgame = 0

IRs:
maxgame(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
expireTimeLimit = 1800

IRs:
expireTimeLimit(uint256) := 1800(uint256)"];
}
// Function: 253.sol-RpsGame-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCEO()

IRs:
MODIFIER_CALL, AccessControl.onlyCEO()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, AccessControl.whenPaused()()"];
3->1;
}
// Function: 253.sol-RpsGame-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_217 = UnaryType.BANG paused 
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-RpsGame-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_219(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 253.sol-RpsGame-withdrawTip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount > 0 && amount <= tip_total)

IRs:
TMP_82(bool) = amount > 0
TMP_83(bool) = amount <= tip_total
TMP_84(bool) = TMP_82 && TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender.send(amount))

IRs:
TMP_86 = SEND dest:msg.sender value:amount
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tip_total = tip_total - amount

IRs:
TMP_88(uint256) = tip_total - amount
tip_total(uint256) := TMP_88(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, AccessControl.onlyCFO()()"];
4->1;
}
// Function: 253.sol-SafeMath-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_14 = UnaryType.BANG assertion 
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 253.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_10(bool) = c >= a
TMP_11(bool) = c >= b
TMP_12(bool) = TMP_10 && TMP_11
INTERNAL_CALL, SafeMath.assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 253.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
INTERNAL_CALL, SafeMath.assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 253.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_6(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
