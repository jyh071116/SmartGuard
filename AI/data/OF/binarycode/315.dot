digraph G {
// Function: 315.sol-ERC20Token-allowance(address,address)
digraph{
}
// Function: 315.sol-ERC20Token-approve(address,uint256)
digraph{
}
// Function: 315.sol-ERC20Token-balanceOf(address)
digraph{
}
// Function: 315.sol-ERC20Token-transfer(address,uint256)
digraph{
}
// Function: 315.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 315.sol-MMTA-acceptNewOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_44(bool) = msg.sender == newOwner
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateOwner(owner,newOwner)

IRs:
Emit updateOwner(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 315.sol-MMTA-allowance(address,address)
digraph{
}
// Function: 315.sol-MMTA-approve(address,uint256)
digraph{
}
// Function: 315.sol-MMTA-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_56 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_56(tokenRecipient)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_57(bool) = INTERNAL_CALL, standardToken.approve(address,uint256)(_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 315.sol-MMTA-balanceOf(address)
digraph{
}
// Function: 315.sol-MMTA-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner != _newOwner)

IRs:
TMP_41(bool) = owner != _newOwner
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 315.sol-MMTA-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 315.sol-MMTA-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_tokenAlloc] = topTotalSupply

IRs:
REF_42(uint256) -> balances[_tokenAlloc]
REF_42(uint256) (->balances) := topTotalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = topTotalSupply

IRs:
totalSupply(uint256) := topTotalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(0x0,_tokenAlloc,topTotalSupply)

IRs:
Emit Transfer(0,_tokenAlloc,topTotalSupply)"];
}
// Function: 315.sol-MMTA-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_67(None) = SOLIDITY_CALL revert()()"];
}
// Function: 315.sol-MMTA-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_73(bool) = msg.sender == owner
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 315.sol-MMTA-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Medicine chain

IRs:
name(string) := Medicine chain(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = MMTA

IRs:
symbol(string) := MMTA(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
topTotalSupply = 5 * 10 ** 8 * 10 ** decimals

IRs:
TMP_69(uint256) = 10 ** 8
TMP_70(uint256) = 5 * TMP_69
TMP_71(uint256) = 10 ** decimals
TMP_72(uint256) = TMP_70 * TMP_71
topTotalSupply(uint256) := TMP_72(uint256)"];
}
// Function: 315.sol-MMTA-transfer(address,uint256)
digraph{
}
// Function: 315.sol-MMTA-transferFrom(address,address,uint256)
digraph{
}
// Function: 315.sol-Owned-acceptNewOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_3(bool) = msg.sender == newOwner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateOwner(owner,newOwner)

IRs:
Emit updateOwner(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 315.sol-Owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner != _newOwner)

IRs:
TMP_0(bool) = owner != _newOwner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 315.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 315.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_6(bool) = msg.sender == owner
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 315.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_18(uint256) = a + b
c(uint256) := TMP_18(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_19(bool) = c >= a
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 315.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 315.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_8(uint256) = a * b
c(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_9(bool) = a == 0
TMP_10(uint256) = c / a
TMP_11(bool) = TMP_10 == b
TMP_12(bool) = TMP_9 || TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 315.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_15(bool) = b <= a
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_17(uint256) = a - b
RETURN TMP_17"];
}
// Function: 315.sol-standardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances[_owner][_spender]

IRs:
REF_19(mapping(address => uint256)) -> allowances[_owner]
REF_20(uint256) -> REF_19[_spender]
RETURN REF_20"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 315.sol-standardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_6(uint256) -> balances[msg.sender]
TMP_27(bool) = REF_6 >= _value
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowances[msg.sender][_spender] = _value

IRs:
REF_7(mapping(address => uint256)) -> allowances[msg.sender]
REF_8(uint256) -> REF_7[_spender]
REF_8(uint256) (->allowances) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 315.sol-standardToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_30 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_30(tokenRecipient)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_31(bool) = INTERNAL_CALL, standardToken.approve(address,uint256)(_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 315.sol-standardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 315.sol-standardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_21(bool) = REF_1 >= _value
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_to] + _value >= balances[_to])

IRs:
REF_2(uint256) -> balances[_to]
TMP_23(uint256) = REF_2 + _value
REF_3(uint256) -> balances[_to]
TMP_24(bool) = TMP_23 >= REF_3
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_4(-> balances) = REF_4 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _value

IRs:
REF_5(uint256) -> balances[_to]
REF_5(-> balances) = REF_5 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 315.sol-standardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_from] >= _value)

IRs:
REF_10(uint256) -> balances[_from]
TMP_33(bool) = REF_10 >= _value
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_to] + _value >= balances[_to])

IRs:
REF_11(uint256) -> balances[_to]
TMP_35(uint256) = REF_11 + _value
REF_12(uint256) -> balances[_to]
TMP_36(bool) = TMP_35 >= REF_12
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowances[_from][msg.sender])

IRs:
REF_13(mapping(address => uint256)) -> allowances[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_38(bool) = _value <= REF_14
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] -= _value

IRs:
REF_15(uint256) -> balances[_from]
REF_15(-> balances) = REF_15 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] += _value

IRs:
REF_16(uint256) -> balances[_to]
REF_16(-> balances) = REF_16 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowances[_from][msg.sender] -= _value

IRs:
REF_17(mapping(address => uint256)) -> allowances[_from]
REF_18(uint256) -> REF_17[msg.sender]
REF_18(-> allowances) = REF_18 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 315.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
