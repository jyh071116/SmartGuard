digraph G {
// Function: 340.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 340.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 340.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 340.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 340.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 340.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 340.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,O1- Owner only function)

IRs:
TMP_13(bool) = msg.sender == owner
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,O1- Owner only function)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 340.sol-Owned-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 340.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 340.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,O1- Owner only function)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,O1- Owner only function)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 340.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 340.sol-Pausable-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 340.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 340.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 340.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_24 = UnaryType.BANG paused 
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 340.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_26(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 340.sol-SafeERC20-safeTransfer(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token.transfer(_to,_value))

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:_token(ERC20), function:transfer, arguments:['_to', '_value']  
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
}
// Function: 340.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_5(uint256) = a + b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_6(bool) = c >= a
TMP_7(bool) = c >= b
TMP_8(bool) = TMP_6 && TMP_7
TMP_9(None) = SOLIDITY_CALL assert(bool)(TMP_8)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 340.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a - b

IRs:
TMP_0(uint256) = a - b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(b <= a && c <= a)

IRs:
TMP_1(bool) = b <= a
TMP_2(bool) = c <= a
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 340.sol-VIDToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_47(mapping(address => uint256)) -> allowed[_owner]
REF_48(uint256) -> REF_47[_spender]
RETURN REF_48"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 340.sol-VIDToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)((_value == 0) || (allowed[msg.sender][_spender] == 0),A1- Reset allowance to 0 first)

IRs:
TMP_71(bool) = _value == 0
REF_29(mapping(address => uint256)) -> allowed[msg.sender]
REF_30(uint256) -> REF_29[_spender]
TMP_72(bool) = REF_30 == 0
TMP_73(bool) = TMP_71 || TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,A1- Reset allowance to 0 first)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 340.sol-VIDToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_28(uint256) -> balances[_owner]
RETURN REF_28"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 340.sol-VIDToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_value <= balances[msg.sender],B1- The balance of burner is too low)

IRs:
REF_58(uint256) -> balances[msg.sender]
TMP_97(bool) = _value <= REF_58
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,B1- The balance of burner is too low)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_59(uint256) -> balances[msg.sender]
REF_60(uint256) -> balances[msg.sender]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_60', '_value'] 
REF_59(uint256) (->balances) := TMP_99(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_100(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,address(0),_value)

IRs:
TMP_102 = CONVERT 0 to address
Emit Transfer(msg.sender,TMP_102,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->1;
}
// Function: 340.sol-VIDToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
validationWallet = msg.sender

IRs:
validationWallet(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
verifyWallet[msg.sender] = true

IRs:
REF_1(bool) -> verifyWallet[msg.sender]
REF_1(bool) (->verifyWallet) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = initialSupply * 10 ** uint256(decimals)

IRs:
TMP_34 = CONVERT decimals to uint256
TMP_35(uint256) = 10 ** TMP_34
TMP_36(uint256) = initialSupply * TMP_35
totalSupply(uint256) := TMP_36(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(uint256) (->balances) := totalSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),owner,initialSupply)

IRs:
TMP_37 = CONVERT 0 to address
Emit Transfer(TMP_37,owner,initialSupply)"];
}
// Function: 340.sol-VIDToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_subtractedValue)

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
REF_42(mapping(address => uint256)) -> allowed[msg.sender]
REF_43(uint256) -> REF_42[_spender]
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_43', '_subtractedValue'] 
REF_41(uint256) (->allowed) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
Emit Approval(msg.sender,_spender,REF_46)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 340.sol-VIDToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_39(None) = SOLIDITY_CALL revert()()"];
}
// Function: 340.sol-VIDToken-freeze(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[_address] = _state

IRs:
REF_63(bool) -> frozenAccount[_address]
REF_63(bool) (->frozenAccount) := _state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Freeze(_address,_state)

IRs:
Emit Freeze(_address,_state)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 340.sol-VIDToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[_spender]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_36', '_addedValue'] 
REF_34(uint256) (->allowed) := TMP_77(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
Emit Approval(msg.sender,_spender,REF_39)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 340.sol-VIDToken-listFiles(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: IF 1

EXPRESSION:
fileIndex.length == 0

IRs:
REF_103 -> LENGTH fileIndex
TMP_144(bool) = REF_103 == 0
CONDITION TMP_144"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(startAt <= fileIndex.length - 1,L1- Please select a valid start)

IRs:
REF_104 -> LENGTH fileIndex
TMP_145(uint256) = REF_104 - 1
TMP_146(bool) = startAt <= TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,L1- Please select a valid start)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
stopAt > 0

IRs:
TMP_148(bool) = stopAt > 0
CONDITION TMP_148"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(stopAt > startAt && stopAt <= fileIndex.length - 1,L2- Please select a valid stop)

IRs:
TMP_149(bool) = stopAt > startAt
REF_105 -> LENGTH fileIndex
TMP_150(uint256) = REF_105 - 1
TMP_151(bool) = stopAt <= TMP_150
TMP_152(bool) = TMP_149 && TMP_151
TMP_153(None) = SOLIDITY_CALL require(bool,string)(TMP_152,L2- Please select a valid stop)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
stopAt = fileIndex.length - 1

IRs:
REF_106 -> LENGTH fileIndex
TMP_154(uint256) = REF_106 - 1
stopAt(uint256) := TMP_154(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->15;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = startAt

IRs:
i(uint256) := startAt(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i <= stopAt

IRs:
TMP_155(bool) = i <= stopAt
CONDITION TMP_155"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LogEvent(i,fileIndex[i])

IRs:
REF_107(string) -> fileIndex[i]
Emit LogEvent(i,REF_107)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_157(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
16->1;
}
// Function: 340.sol-VIDToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,O1- Owner only function)

IRs:
TMP_166(bool) = msg.sender == owner
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,O1- Owner only function)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 340.sol-VIDToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 340.sol-VIDToken-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 340.sol-VIDToken-setPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
validationPrice = newPrice

IRs:
validationPrice(uint256) := newPrice(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 340.sol-VIDToken-setWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
validationWallet = newWallet

IRs:
validationWallet(address) := newWallet(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 340.sol-VIDToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = V-ID Token

IRs:
name(string) := V-ID Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = VIDT

IRs:
symbol(string) := VIDT(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
initialSupply = 100000000

IRs:
initialSupply(uint256) := 100000000(uint256)"];
}
// Function: 340.sol-VIDToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
validationPrice = 7 * 10 ** uint256(decimals)

IRs:
TMP_159 = CONVERT decimals to uint256
TMP_160(uint256) = 10 ** TMP_159
TMP_161(uint256) = 7 * TMP_160
validationPrice(uint256) := TMP_161(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
validationWallet = address(0)

IRs:
TMP_162 = CONVERT 0 to address
validationWallet(address) := TMP_162(address)"];
}
// Function: 340.sol-VIDToken-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_49(address) -> tkn.sender
REF_49(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_50(uint256) -> tkn.value
REF_50(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_51(bytes) -> tkn.data
REF_51(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_52(None) -> _data[3]
TMP_83 = CONVERT REF_52 to uint32
REF_53(None) -> _data[2]
TMP_84 = CONVERT REF_53 to uint32
TMP_85(uint32) = TMP_84 << 8
TMP_86(uint32) = TMP_83 + TMP_85
REF_54(None) -> _data[1]
TMP_87 = CONVERT REF_54 to uint32
TMP_88(uint32) = TMP_87 << 16
TMP_89(uint32) = TMP_86 + TMP_88
REF_55(None) -> _data[0]
TMP_90 = CONVERT REF_55 to uint32
TMP_91(uint32) = TMP_90 << 24
TMP_92(uint32) = TMP_89 + TMP_91
u(uint32) := TMP_92(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_56(bytes4) -> tkn.sig
TMP_93 = CONVERT u to bytes4
REF_56(bytes4) (->tkn) := TMP_93(bytes4)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 340.sol-VIDToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_to != msg.sender,T1- Recipient can not be the same as sender)

IRs:
TMP_40(bool) = _to != msg.sender
TMP_41(None) = SOLIDITY_CALL require(bool,string)(TMP_40,T1- Recipient can not be the same as sender)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_to != address(0),T2- Please check the recipient address)

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = _to != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,T2- Please check the recipient address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(balances[msg.sender] >= _value,T3- The balance of sender is too low)

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_45(bool) = REF_3 >= _value
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,T3- The balance of sender is too low)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(! frozenAccount[msg.sender],T4- The wallet of sender is frozen)

IRs:
REF_4(bool) -> frozenAccount[msg.sender]
TMP_47 = UnaryType.BANG REF_4 
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,T4- The wallet of sender is frozen)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(! frozenAccount[_to],T5- The wallet of recipient is frozen)

IRs:
REF_5(bool) -> frozenAccount[_to]
TMP_49 = UnaryType.BANG REF_5 
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,T5- The wallet of recipient is frozen)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_7(uint256) -> balances[msg.sender]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_7', '_value'] 
REF_6(uint256) (->balances) := TMP_51(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_9(uint256) -> balances[_to]
REF_10(uint256) -> balances[_to]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_10', '_value'] 
REF_9(uint256) (->balances) := TMP_52(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
10->1;
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 340.sol-VIDToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_to != address(0),TF1- Please check the recipient address)

IRs:
TMP_55 = CONVERT 0 to address
TMP_56(bool) = _to != TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool,string)(TMP_56,TF1- Please check the recipient address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(balances[_from] >= _value,TF2- The balance of sender is too low)

IRs:
REF_12(uint256) -> balances[_from]
TMP_58(bool) = REF_12 >= _value
TMP_59(None) = SOLIDITY_CALL require(bool,string)(TMP_58,TF2- The balance of sender is too low)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(allowed[_from][msg.sender] >= _value,TF3- The allowance of sender is too low)

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_60(bool) = REF_14 >= _value
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TF3- The allowance of sender is too low)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(! frozenAccount[_from],TF4- The wallet of sender is frozen)

IRs:
REF_15(bool) -> frozenAccount[_from]
TMP_62 = UnaryType.BANG REF_15 
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,TF4- The wallet of sender is frozen)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(! frozenAccount[_to],TF5- The wallet of recipient is frozen)

IRs:
REF_16(bool) -> frozenAccount[_to]
TMP_64 = UnaryType.BANG REF_16 
TMP_65(None) = SOLIDITY_CALL require(bool,string)(TMP_64,TF5- The wallet of recipient is frozen)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_17(uint256) -> balances[_from]
REF_18(uint256) -> balances[_from]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balances) := TMP_66(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_20(uint256) -> balances[_to]
REF_21(uint256) -> balances[_to]
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balances) := TMP_67(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_26', '_value'] 
REF_24(uint256) (->allowed) := TMP_68(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
11->1;
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 340.sol-VIDToken-transferToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ERC20(tokenAddress).safeTransfer(owner,tokens)

IRs:
TMP_94 = CONVERT tokenAddress to ERC20
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20,address,uint256), arguments:['TMP_94', 'owner', 'tokens'] "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 340.sol-VIDToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 340.sol-VIDToken-validateFile(address,uint256,bytes,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->27;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(Payment >= validationPrice,V1- Insufficient payment provided)

IRs:
TMP_111(bool) = Payment >= validationPrice
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,V1- Insufficient payment provided)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(verifyPublisher[msg.sender],V2- Unverified publisher address)

IRs:
REF_66(bool) -> verifyPublisher[msg.sender]
TMP_113(None) = SOLIDITY_CALL require(bool,string)(REF_66,V2- Unverified publisher address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(! frozenAccount[msg.sender],V3- The wallet of publisher is frozen)

IRs:
REF_67(bool) -> frozenAccount[msg.sender]
TMP_114 = UnaryType.BANG REF_67 
TMP_115(None) = SOLIDITY_CALL require(bool,string)(TMP_114,V3- The wallet of publisher is frozen)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(Data.length == 64,V4- Invalid hash provided)

IRs:
REF_68 -> LENGTH Data
TMP_116(bool) = REF_68 == 64
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,V4- Invalid hash provided)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! verifyWallet[To] || frozenAccount[To]

IRs:
REF_69(bool) -> verifyWallet[To]
TMP_118 = UnaryType.BANG REF_69 
REF_70(bool) -> frozenAccount[To]
TMP_119(bool) = TMP_118 || REF_70
CONDITION TMP_119"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
To = validationWallet

IRs:
To(address) := validationWallet(address)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
fileHash = string(Data)

IRs:
TMP_120 = CONVERT Data to string
fileHash(string) := TMP_120(string)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
cStore

IRs:
CONDITION cStore"];
10->11[label="True"];
10->16[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
fileIndex.length > 0

IRs:
REF_71 -> LENGTH fileIndex
TMP_121(bool) = REF_71 > 0
CONDITION TMP_121"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(fileHashes[fileHash].index == 0,V5- This hash was previously validated)

IRs:
REF_72(VIDToken.fStruct) -> fileHashes[fileHash]
REF_73(uint256) -> REF_72.index
TMP_122(bool) = REF_73 == 0
TMP_123(None) = SOLIDITY_CALL require(bool,string)(TMP_122,V5- This hash was previously validated)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
fileHashes[fileHash].index = fileIndex.push(fileHash) - 1

IRs:
REF_74(VIDToken.fStruct) -> fileHashes[fileHash]
REF_75(uint256) -> REF_74.index
REF_77 -> LENGTH fileIndex
TMP_126(uint256) := REF_77(uint256)
TMP_127(uint256) = TMP_126 + 1
REF_77(uint256) (->fileIndex) := TMP_127(uint256)
REF_78(string) -> fileIndex[TMP_126]
REF_78(string) (->fileIndex) := fileHash(string)
TMP_125(None) = TMP_124 - 1
REF_75(uint256) (->fileHashes) := TMP_125(None)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
index = fileHashes[fileHash].index

IRs:
REF_79(VIDToken.fStruct) -> fileHashes[fileHash]
REF_80(uint256) -> REF_79.index
index(uint256) := REF_80(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
allowed[To][msg.sender] >= Payment

IRs:
REF_81(mapping(address => uint256)) -> allowed[To]
REF_82(uint256) -> REF_81[msg.sender]
TMP_128(bool) = REF_82 >= Payment
CONDITION TMP_128"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
allowed[To][msg.sender] = allowed[To][msg.sender].sub(Payment)

IRs:
REF_83(mapping(address => uint256)) -> allowed[To]
REF_84(uint256) -> REF_83[msg.sender]
REF_85(mapping(address => uint256)) -> allowed[To]
REF_86(uint256) -> REF_85[msg.sender]
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_86', 'Payment'] 
REF_84(uint256) (->allowed) := TMP_129(uint256)"];
18->21;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(Payment)

IRs:
REF_88(uint256) -> balances[msg.sender]
REF_89(uint256) -> balances[msg.sender]
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_89', 'Payment'] 
REF_88(uint256) (->balances) := TMP_130(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balances[To] = balances[To].add(Payment)

IRs:
REF_91(uint256) -> balances[To]
REF_92(uint256) -> balances[To]
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_92', 'Payment'] 
REF_91(uint256) (->balances) := TMP_131(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,To,Payment)

IRs:
Emit Transfer(msg.sender,To,Payment)"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
eLog

IRs:
CONDITION eLog"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
ValidateFile(index,fileHash)

IRs:
Emit ValidateFile(index,fileHash)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
true

IRs:
RETURN True"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
27->1;
}
// Function: 340.sol-VIDToken-validatePublisher(address,bool,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
verifyPublisher[Address] = State

IRs:
REF_64(bool) -> verifyPublisher[Address]
REF_64(bool) (->verifyPublisher) := State(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ValidatePublisher(Address,State,Publisher)

IRs:
Emit ValidatePublisher(Address,State,Publisher)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 340.sol-VIDToken-validateWallet(address,bool,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
verifyWallet[Address] = State

IRs:
REF_65(bool) -> verifyWallet[Address]
REF_65(bool) (->verifyWallet) := State(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ValidateWallet(Address,State,Wallet)

IRs:
Emit ValidateWallet(Address,State,Wallet)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 340.sol-VIDToken-verifyFile(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
fileIndex.length == 0

IRs:
REF_94 -> LENGTH fileIndex
TMP_135(bool) = REF_94 == 0
CONDITION TMP_135"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
a = bytes(fileIndex[fileHashes[fileHash].index])

IRs:
REF_95(VIDToken.fStruct) -> fileHashes[fileHash]
REF_96(uint256) -> REF_95.index
REF_97(string) -> fileIndex[REF_96]
TMP_136 = CONVERT REF_97 to bytes
a(bytes) := TMP_136(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
b = bytes(fileHash)

IRs:
TMP_137 = CONVERT fileHash to bytes
b(bytes) := TMP_137(bytes)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
a.length != b.length

IRs:
REF_98 -> LENGTH a
REF_99 -> LENGTH b
TMP_138(bool) = REF_98 != REF_99
CONDITION TMP_138"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < a.length

IRs:
REF_100 -> LENGTH a
TMP_139(bool) = i < REF_100
CONDITION TMP_139"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] != b[i]

IRs:
REF_101(None) -> a[i]
REF_102(None) -> b[i]
TMP_140(bool) = REF_101 != REF_102
CONDITION TMP_140"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
false

IRs:
RETURN False"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_141(uint256) := i(uint256)
i(uint256) = i + 1"];
16->12;
17[label="Node Type: RETURN 17

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 340.sol-VIDToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_163 = UnaryType.BANG paused 
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 340.sol-VIDToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_165(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
