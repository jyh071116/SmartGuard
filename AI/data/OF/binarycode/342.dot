digraph G {
// Function: 342.sol-asset-cancelContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isValid = false

IRs:
isValid(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
2->1;
}
// Function: 342.sol-asset-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isValid = true

IRs:
isValid(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isInit = false

IRs:
isInit(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isTradeable = false

IRs:
isTradeable(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
price = 0

IRs:
price(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dataNum = 0

IRs:
dataNum(uint256) := 0(uint256)"];
}
// Function: 342.sol-asset-getAssetBaseInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValid == true,contract invaild)

IRs:
TMP_87(bool) = isValid == True
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,contract invaild)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_price = price

IRs:
_price(uint256) := price(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_isTradeable = isTradeable

IRs:
_isTradeable(bool) := isTradeable(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_dataNum = dataNum

IRs:
_dataNum(uint256) := dataNum(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_remark1 = remark1

IRs:
_remark1(string) := remark1(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_remark2 = remark2

IRs:
_remark2(string) := remark2(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
(_price,_isTradeable,_dataNum,_remark1,_remark2)

IRs:
RETURN _price,_isTradeable,_dataNum,_remark1,_remark2"];
}
// Function: 342.sol-asset-getDataByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValid == true,contract invaild)

IRs:
TMP_89(bool) = isValid == True
TMP_90(None) = SOLIDITY_CALL require(bool,string)(TMP_89,contract invaild)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(index >= 0,Param index smaller than 0)

IRs:
TMP_91(bool) = index >= 0
TMP_92(None) = SOLIDITY_CALL require(bool,string)(TMP_91,Param index smaller than 0)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(index < dataNum,Param index not smaller than dataNum)

IRs:
TMP_93(bool) = index < dataNum
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,Param index not smaller than dataNum)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
link = dataArray[index].link

IRs:
REF_52(asset.data) -> dataArray[index]
REF_53(string) -> REF_52.link
link(string) := REF_53(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
encryptionType = dataArray[index].encryptionType

IRs:
REF_54(asset.data) -> dataArray[index]
REF_55(string) -> REF_54.encryptionType
encryptionType(string) := REF_55(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hashValue = dataArray[index].hashValue

IRs:
REF_56(asset.data) -> dataArray[index]
REF_57(string) -> REF_56.hashValue
hashValue(string) := REF_57(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
(link,encryptionType,hashValue)

IRs:
RETURN link,encryptionType,hashValue"];
}
// Function: 342.sol-asset-getDataNum()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
num = dataNum

IRs:
num(uint256) := dataNum(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
num

IRs:
RETURN num"];
}
// Function: 342.sol-asset-initAsset(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
links = linkSet.toSlice()

IRs:
TMP_47(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['linkSet'] 
links(strings.slice) := TMP_47(strings.slice)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
encryptionTypes = encryptionTypeSet.toSlice()

IRs:
TMP_48(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['encryptionTypeSet'] 
encryptionTypes(strings.slice) := TMP_48(strings.slice)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
hashValues = hashValueSet.toSlice()

IRs:
TMP_49(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['hashValueSet'] 
hashValues(strings.slice) := TMP_49(strings.slice)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
delim =  .toSlice()

IRs:
TMP_50(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:[' '] 
delim(strings.slice) := TMP_50(strings.slice)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dataNum = dataNumber

IRs:
dataNum(uint256) := dataNumber(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(isInit == false,The contract has been initialized)

IRs:
TMP_51(bool) = isInit == False
TMP_52(None) = SOLIDITY_CALL require(bool,string)(TMP_51,The contract has been initialized)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(dataNumber >= 1,Param dataNumber smaller than 1)

IRs:
TMP_53(bool) = dataNumber >= 1
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,Param dataNumber smaller than 1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool,string)(dataNumber - 1 == links.count(delim),Param linkSet invalid)

IRs:
TMP_55(uint256) = dataNumber - 1
TMP_56(uint256) = LIBRARY_CALL, dest:strings, function:strings.count(strings.slice,strings.slice), arguments:['links', 'delim'] 
TMP_57(bool) = TMP_55 == TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,Param linkSet invalid)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool,string)(dataNumber - 1 == encryptionTypes.count(delim),Param encryptionTypeSet invalid)

IRs:
TMP_59(uint256) = dataNumber - 1
TMP_60(uint256) = LIBRARY_CALL, dest:strings, function:strings.count(strings.slice,strings.slice), arguments:['encryptionTypes', 'delim'] 
TMP_61(bool) = TMP_59 == TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool,string)(TMP_61,Param encryptionTypeSet invalid)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool,string)(dataNumber - 1 == hashValues.count(delim),Param hashValueSet invalid)

IRs:
TMP_63(uint256) = dataNumber - 1
TMP_64(uint256) = LIBRARY_CALL, dest:strings, function:strings.count(strings.slice,strings.slice), arguments:['hashValues', 'delim'] 
TMP_65(bool) = TMP_63 == TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool,string)(TMP_65,Param hashValueSet invalid)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isInit = true

IRs:
isInit(bool) := True(bool)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
empty = .toSlice()

IRs:
TMP_67(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:[''] 
empty(strings.slice) := TMP_67(strings.slice)"];
12->15;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < dataNumber

IRs:
TMP_68(bool) = i < dataNumber
CONDITION TMP_68"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
link = links.split(delim)

IRs:
TMP_69(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.split(strings.slice,strings.slice), arguments:['links', 'delim'] 
link(strings.slice) := TMP_69(strings.slice)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
encryptionType = encryptionTypes.split(delim)

IRs:
TMP_70(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.split(strings.slice,strings.slice), arguments:['encryptionTypes', 'delim'] 
encryptionType(strings.slice) := TMP_70(strings.slice)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
hashValue = hashValues.split(delim)

IRs:
TMP_71(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.split(strings.slice,strings.slice), arguments:['hashValues', 'delim'] 
hashValue(strings.slice) := TMP_71(strings.slice)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
require(bool,string)(! encryptionType.empty(),Param encryptionTypeSet data error)

IRs:
TMP_72(bool) = LIBRARY_CALL, dest:strings, function:strings.empty(strings.slice), arguments:['encryptionType'] 
TMP_73 = UnaryType.BANG TMP_72 
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,Param encryptionTypeSet data error)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(! hashValue.empty(),Param hashValueSet data error)

IRs:
TMP_75(bool) = LIBRARY_CALL, dest:strings, function:strings.empty(strings.slice), arguments:['hashValue'] 
TMP_76 = UnaryType.BANG TMP_75 
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,Param hashValueSet data error)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
dataArray.push(data(link.toString(),encryptionType.toString(),hashValue.toString()))

IRs:
TMP_78(string) = LIBRARY_CALL, dest:strings, function:strings.toString(strings.slice), arguments:['link'] 
TMP_79(string) = LIBRARY_CALL, dest:strings, function:strings.toString(strings.slice), arguments:['encryptionType'] 
TMP_80(string) = LIBRARY_CALL, dest:strings, function:strings.toString(strings.slice), arguments:['hashValue'] 
TMP_81(asset.data) = new data(TMP_78,TMP_79,TMP_80)
REF_50 -> LENGTH dataArray
TMP_83(uint256) := REF_50(uint256)
TMP_84(uint256) = TMP_83 + 1
REF_50(uint256) (->dataArray) := TMP_84(uint256)
REF_51(asset.data) -> dataArray[TMP_83]
REF_51(asset.data) (->dataArray) := TMP_81(asset.data)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i ++

IRs:
TMP_85(uint256) := i(uint256)
i(uint256) = i + 1"];
23->16;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
24->1;
}
// Function: 342.sol-asset-onlyHolder()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == holder,This function can only be called by holder)

IRs:
TMP_116(bool) = msg.sender == holder
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,This function can only be called by holder)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 342.sol-asset-setDataLink(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValid == true,contract invaild)

IRs:
TMP_107(bool) = isValid == True
TMP_108(None) = SOLIDITY_CALL require(bool,string)(TMP_107,contract invaild)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(index >= 0,Param index smaller than 0)

IRs:
TMP_109(bool) = index >= 0
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,Param index smaller than 0)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(index < dataNum,Param index not smaller than dataNum)

IRs:
TMP_111(bool) = index < dataNum
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,Param index not smaller than dataNum)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dataArray[index].link = url

IRs:
REF_58(asset.data) -> dataArray[index]
REF_59(string) -> REF_58.link
REF_59(string) (->dataArray) := url(string)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
5->1;
}
// Function: 342.sol-asset-setPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValid == true,contract invaild)

IRs:
TMP_95(bool) = isValid == True
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,contract invaild)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
price = newPrice

IRs:
price(uint256) := newPrice(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
3->1;
}
// Function: 342.sol-asset-setRemark1(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValid == true,contract invaild)

IRs:
TMP_101(bool) = isValid == True
TMP_102(None) = SOLIDITY_CALL require(bool,string)(TMP_101,contract invaild)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
remark1 = content

IRs:
remark1(string) := content(string)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
3->1;
}
// Function: 342.sol-asset-setRemark2(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValid == true,contract invaild)

IRs:
TMP_104(bool) = isValid == True
TMP_105(None) = SOLIDITY_CALL require(bool,string)(TMP_104,contract invaild)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
remark2 = content

IRs:
remark2(string) := content(string)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
3->1;
}
// Function: 342.sol-asset-setTradeable(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValid == true,contract invaild)

IRs:
TMP_98(bool) = isValid == True
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,contract invaild)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isTradeable = status

IRs:
isTradeable(bool) := status(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
3->1;
}
// Function: 342.sol-asset-transferOwnership(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holder = newHolder

IRs:
holder(address) := newHolder(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isTradeable = status

IRs:
isTradeable(bool) := status(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyHolder()

IRs:
MODIFIER_CALL, owned.onlyHolder()()"];
3->1;
}
// Function: 342.sol-owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holder = msg.sender

IRs:
holder(address) := msg.sender(address)"];
}
// Function: 342.sol-owned-onlyHolder()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == holder,This function can only be called by holder)

IRs:
TMP_45(bool) = msg.sender == holder
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,This function can only be called by holder)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 342.sol-strings-count(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = findPtr(self._len,self._ptr,needle._len,needle._ptr) + needle._len

IRs:
REF_21(uint256) -> self._len
REF_22(uint256) -> self._ptr
REF_23(uint256) -> needle._len
REF_24(uint256) -> needle._ptr
TMP_36(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(REF_21,REF_22,REF_23,REF_24)
REF_25(uint256) -> needle._len
TMP_37(uint256) = TMP_36 + REF_25
ptr(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
ptr <= self._ptr + self._len

IRs:
REF_26(uint256) -> self._ptr
REF_27(uint256) -> self._len
TMP_38(uint256) = REF_26 + REF_27
TMP_39(bool) = ptr <= TMP_38
CONDITION TMP_39"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cnt ++

IRs:
TMP_40(uint256) := cnt(uint256)
cnt(uint256) = cnt + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ptr = findPtr(self._len - (ptr - self._ptr),ptr,needle._len,needle._ptr) + needle._len

IRs:
REF_28(uint256) -> self._len
REF_29(uint256) -> self._ptr
TMP_41(uint256) = ptr - REF_29
TMP_42(uint256) = REF_28 - TMP_41
REF_30(uint256) -> needle._len
REF_31(uint256) -> needle._ptr
TMP_43(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(TMP_42,ptr,REF_30,REF_31)
REF_32(uint256) -> needle._len
TMP_44(uint256) = TMP_43 + REF_32
ptr(uint256) := TMP_44(uint256)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
cnt

IRs:
RETURN cnt"];
}
// Function: 342.sol-strings-empty(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
self._len == 0

IRs:
REF_4(uint256) -> self._len
TMP_9(bool) = REF_4 == 0
RETURN TMP_9"];
}
// Function: 342.sol-strings-findPtr(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = selfptr

IRs:
ptr(uint256) := selfptr(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
needlelen <= selflen

IRs:
TMP_17(bool) = needlelen <= selflen
CONDITION TMP_17"];
3->4[label="True"];
3->39[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
needlelen <= 32

IRs:
TMP_18(bool) = needlelen <= 32
CONDITION TMP_18"];
4->5[label="True"];
4->23[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
mask = bytes32(~ (2 ** (8 * (32 - needlelen)) - 1))

IRs:
TMP_19(uint256) = 32 - needlelen
TMP_20(uint256) = 8 * TMP_19
TMP_21(uint256) = 2 ** TMP_20
TMP_22(uint256) = TMP_21 - 1
TMP_23 = UnaryType.TILD TMP_22 
TMP_24 = CONVERT TMP_23 to bytes32
mask(bytes32) := TMP_24(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
end = selfptr + selflen - needlelen

IRs:
TMP_25(uint256) = selfptr + selflen
TMP_26(uint256) = TMP_25 - needlelen
end(uint256) := TMP_26(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
ptrdata != needledata

IRs:
TMP_27(bool) = ptrdata != needledata
CONDITION TMP_27"];
14->15[label="True"];
14->21[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
ptr >= end

IRs:
TMP_28(bool) = ptr >= end
CONDITION TMP_28"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: RETURN 16

EXPRESSION:
selfptr + selflen

IRs:
TMP_29(uint256) = selfptr + selflen
RETURN TMP_29"];
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ptr ++

IRs:
TMP_30(uint256) := ptr(uint256)
ptr(uint256) = ptr + 1"];
18->19;
19[label="Node Type: INLINE ASM 19
"];
19->20;
20[label="Node Type: END INLINE ASM 20
"];
20->14;
21[label="Node Type: END_LOOP 21
"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
ptr

IRs:
RETURN ptr"];
23[label="Node Type: NEW VARIABLE 23
"];
23->24;
24[label="Node Type: INLINE ASM 24
"];
24->25;
25[label="Node Type: END INLINE ASM 25
"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->38;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
idx <= selflen - needlelen

IRs:
TMP_31(uint256) = selflen - needlelen
TMP_32(bool) = idx <= TMP_31
CONDITION TMP_32"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: NEW VARIABLE 30
"];
30->31;
31[label="Node Type: INLINE ASM 31
"];
31->32;
32[label="Node Type: END INLINE ASM 32
"];
32->33;
33[label="Node Type: IF 33

EXPRESSION:
hash == testHash

IRs:
TMP_33(bool) = hash == testHash
CONDITION TMP_33"];
33->34[label="True"];
33->35[label="False"];
34[label="Node Type: RETURN 34

EXPRESSION:
ptr

IRs:
RETURN ptr"];
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
ptr += 1

IRs:
ptr(uint256) = ptr + 1"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
idx ++

IRs:
TMP_34(uint256) := idx(uint256)
idx(uint256) = idx + 1"];
37->29;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: RETURN 40

EXPRESSION:
selfptr + selflen

IRs:
TMP_35(uint256) = selfptr + selflen
RETURN TMP_35"];
}
// Function: 342.sol-strings-memcpy(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: BEGIN_LOOP 1
"];
1->3;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
len >= 32

IRs:
TMP_0(bool) = len >= 32
CONDITION TMP_0"];
3->4[label="True"];
3->2[label="False"];
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dest += 32

IRs:
dest(uint256) = dest + 32"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
src += 32

IRs:
src(uint256) = src + 32"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len -= 32

IRs:
len(uint256) = len - 32"];
8->3;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
mask = 256 ** (32 - len) - 1

IRs:
TMP_1(uint256) = 32 - len
TMP_2(uint256) = 256 ** TMP_1
TMP_3(uint256) = TMP_2 - 1
mask(uint256) := TMP_3(uint256)"];
9->10;
10[label="Node Type: INLINE ASM 10
"];
10->11;
11[label="Node Type: END INLINE ASM 11
"];
}
// Function: 342.sol-strings-split(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
split(self,needle,token)

IRs:
TMP_16(strings.slice) = INTERNAL_CALL, strings.split(strings.slice,strings.slice,strings.slice)(self,needle,token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 342.sol-strings-split(strings.slice,strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = findPtr(self._len,self._ptr,needle._len,needle._ptr)

IRs:
REF_5(uint256) -> self._len
REF_6(uint256) -> self._ptr
REF_7(uint256) -> needle._len
REF_8(uint256) -> needle._ptr
TMP_10(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(REF_5,REF_6,REF_7,REF_8)
ptr(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token._ptr = self._ptr

IRs:
REF_9(uint256) -> token._ptr
REF_10(uint256) -> self._ptr
REF_9(uint256) (->token) := REF_10(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token._len = ptr - self._ptr

IRs:
REF_11(uint256) -> token._len
REF_12(uint256) -> self._ptr
TMP_11(uint256) = ptr - REF_12
REF_11(uint256) (->token) := TMP_11(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
ptr == self._ptr + self._len

IRs:
REF_13(uint256) -> self._ptr
REF_14(uint256) -> self._len
TMP_12(uint256) = REF_13 + REF_14
TMP_13(bool) = ptr == TMP_12
CONDITION TMP_13"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
self._len = 0

IRs:
REF_15(uint256) -> self._len
REF_15(uint256) (->self) := 0(uint256)"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self._len -= token._len + needle._len

IRs:
REF_16(uint256) -> self._len
REF_17(uint256) -> token._len
REF_18(uint256) -> needle._len
TMP_14(uint256) = REF_17 + REF_18
REF_16(-> self) = REF_16 - TMP_14"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self._ptr = ptr + needle._len

IRs:
REF_19(uint256) -> self._ptr
REF_20(uint256) -> needle._len
TMP_15(uint256) = ptr + REF_20
REF_19(uint256) (->self) := TMP_15(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 342.sol-strings-toSlice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
slice(bytes(self).length,ptr)

IRs:
TMP_7 = CONVERT self to bytes
REF_3 -> LENGTH TMP_7
TMP_8(strings.slice) = new slice(REF_3,ptr)
RETURN TMP_8"];
}
// Function: 342.sol-strings-toString(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ret = new string(self._len)

IRs:
REF_0(uint256) -> self._len
TMP_5 = new string(REF_0)
ret(string) := TMP_5(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
memcpy(retptr,self._ptr,self._len)

IRs:
REF_1(uint256) -> self._ptr
REF_2(uint256) -> self._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(retptr,REF_1,REF_2)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
ret

IRs:
RETURN ret"];
}
}
