digraph G {
// Function: 35.sol-BEECASHBACKHOME-BEECASHBACKHOME()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = _totalSupply

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 35.sol-BEECASHBACKHOME-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[_owner]
REF_15(uint256) -> REF_14[_spender]
RETURN REF_15"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 35.sol-BEECASHBACKHOME-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[msg.sender]
REF_13(uint256) -> REF_12[_spender]
REF_13(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35.sol-BEECASHBACKHOME-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 35.sol-BEECASHBACKHOME-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_totalSupply = 50000000000000000000000000

IRs:
_totalSupply(uint256) := 50000000000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = BCH

IRs:
symbol(string) := BCH(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = BEE CASHBACK HOME

IRs:
name(string) := BEE CASHBACK HOME(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 35.sol-BEECASHBACKHOME-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 35.sol-BEECASHBACKHOME-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value && _value > 0)

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_2 >= _value
TMP_1(bool) = _value > 0
TMP_2(bool) = TMP_0 && TMP_1
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35.sol-BEECASHBACKHOME-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0)

IRs:
REF_5(mapping(address => uint256)) -> allowed[_from]
REF_6(uint256) -> REF_5[msg.sender]
TMP_5(bool) = REF_6 >= _value
REF_7(uint256) -> balances[_from]
TMP_6(bool) = REF_7 >= _value
TMP_7(bool) = TMP_5 && TMP_6
TMP_8(bool) = _value > 0
TMP_9(bool) = TMP_7 && TMP_8
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] -= _value

IRs:
REF_8(uint256) -> balances[_from]
REF_8(-> balances) = REF_8 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_9(uint256) -> balances[_to]
REF_9(-> balances) = REF_9 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
REF_11(-> allowed) = REF_11 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
}
