digraph G {
// Function: 351.sol-BaseToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_0(bool) = _to != 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_0(uint256) -> balanceOf[_from]
TMP_2(bool) = REF_0 >= _value
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_1(uint256) -> balanceOf[_to]
TMP_4(uint256) = REF_1 + _value
REF_2(uint256) -> balanceOf[_to]
TMP_5(bool) = TMP_4 > REF_2
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_3(uint256) -> balanceOf[_from]
REF_4(uint256) -> balanceOf[_to]
TMP_7(uint256) = REF_3 + REF_4
previousBalances(uint256) := TMP_7(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_5(uint256) -> balanceOf[_from]
REF_5(-> balanceOf) = REF_5 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_6(uint256) -> balanceOf[_to]
REF_6(-> balanceOf) = REF_6 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_7(uint256) -> balanceOf[_from]
REF_8(uint256) -> balanceOf[_to]
TMP_8(uint256) = REF_7 + REF_8
TMP_9(bool) = TMP_8 == previousBalances
TMP_10(None) = SOLIDITY_CALL assert(bool)(TMP_9)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 351.sol-BaseToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_13(mapping(address => uint256)) -> allowance[msg.sender]
REF_14(uint256) -> REF_13[_spender]
REF_14(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 351.sol-BaseToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 351.sol-BaseToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_9(mapping(address => uint256)) -> allowance[_from]
REF_10(uint256) -> REF_9[msg.sender]
TMP_13(bool) = _value <= REF_10
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_11(mapping(address => uint256)) -> allowance[_from]
REF_12(uint256) -> REF_11[msg.sender]
REF_12(-> allowance) = REF_12 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 351.sol-CustomToken-CustomToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = 10000000000000

IRs:
totalSupply(uint256) := 10000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = Almighty Diamonds

IRs:
name(string) := Almighty Diamonds(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = ADP

IRs:
symbol(string) := ADP(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 4

IRs:
decimals(uint8) := 4(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530] = totalSupply

IRs:
REF_30(uint256) -> balanceOf[540844239197439196329102374418974027326886294832]
REF_30(uint256) (->balanceOf) := totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530,totalSupply)

IRs:
TMP_34 = CONVERT 0 to address
Emit Transfer(TMP_34,540844239197439196329102374418974027326886294832,totalSupply)"];
}
// Function: 351.sol-CustomToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_17(bool) = _to != 0
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_15(uint256) -> balanceOf[_from]
TMP_19(bool) = REF_15 >= _value
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_16(uint256) -> balanceOf[_to]
TMP_21(uint256) = REF_16 + _value
REF_17(uint256) -> balanceOf[_to]
TMP_22(bool) = TMP_21 > REF_17
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_18(uint256) -> balanceOf[_from]
REF_19(uint256) -> balanceOf[_to]
TMP_24(uint256) = REF_18 + REF_19
previousBalances(uint256) := TMP_24(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_20(uint256) -> balanceOf[_from]
REF_20(-> balanceOf) = REF_20 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_21(uint256) -> balanceOf[_to]
REF_21(-> balanceOf) = REF_21 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_22(uint256) -> balanceOf[_from]
REF_23(uint256) -> balanceOf[_to]
TMP_25(uint256) = REF_22 + REF_23
TMP_26(bool) = TMP_25 == previousBalances
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 351.sol-CustomToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_28(mapping(address => uint256)) -> allowance[msg.sender]
REF_29(uint256) -> REF_28[_spender]
REF_29(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 351.sol-CustomToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 351.sol-CustomToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_24(mapping(address => uint256)) -> allowance[_from]
REF_25(uint256) -> REF_24[msg.sender]
TMP_30(bool) = _value <= REF_25
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_26(mapping(address => uint256)) -> allowance[_from]
REF_27(uint256) -> REF_26[msg.sender]
REF_27(-> allowance) = REF_27 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
}
