digraph G {
// Function: 379.sol-MB-MB()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_totalSupply = INITIAL_SUPPLY

IRs:
_totalSupply(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_creator = 0xf2F91C1C681816eE275ce9b4366D5a906da6eBf5

IRs:
_creator(address) := 1387131100904080444867578580291581489207847611381(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_creator] = INITIAL_SUPPLY

IRs:
REF_17(uint256) -> balances[_creator]
REF_17(uint256) (->balances) := INITIAL_SUPPLY(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bIsFreezeAll = false

IRs:
bIsFreezeAll(bool) := False(bool)"];
}
// Function: 379.sol-MB-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_15(mapping(address => uint256)) -> allowed[_owner]
REF_16(uint256) -> REF_15[_spender]
RETURN REF_16"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 379.sol-MB-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bIsFreezeAll == false)

IRs:
TMP_19(bool) = bIsFreezeAll == False
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_13(mapping(address => uint256)) -> allowed[msg.sender]
REF_14(uint256) -> REF_13[_spender]
REF_14(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 379.sol-MB-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_12(uint256) -> balances[_owner]
RETURN REF_12"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 379.sol-MB-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _creator)

IRs:
TMP_25(bool) = msg.sender == _creator
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(_creator)

IRs:
TMP_27(None) = SOLIDITY_CALL selfdestruct(address)(_creator)"];
}
// Function: 379.sol-MB-freezeAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _creator)

IRs:
TMP_22(bool) = msg.sender == _creator
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bIsFreezeAll = ! bIsFreezeAll

IRs:
TMP_24 = UnaryType.BANG bIsFreezeAll 
bIsFreezeAll(bool) := TMP_24(bool)"];
}
// Function: 379.sol-MB-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_3(uint256) = a + b
c(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_4(bool) = c >= a
TMP_5(bool) = c >= b
TMP_6(bool) = TMP_4 && TMP_5
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 379.sol-MB-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_0(bool) = b <= a
TMP_1(None) = SOLIDITY_CALL assert(bool)(TMP_0)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_2(uint256) = a - b
RETURN TMP_2"];
}
// Function: 379.sol-MB-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = MircoChain

IRs:
name(string) := MircoChain(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = MB

IRs:
symbol(string) := MB(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 100000000000000000000000000000

IRs:
INITIAL_SUPPLY(uint256) := 100000000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
bIsFreezeAll = false

IRs:
bIsFreezeAll(bool) := False(bool)"];
}
// Function: 379.sol-MB-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
total = _totalSupply

IRs:
total(uint256) := _totalSupply(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
total

IRs:
RETURN total"];
}
// Function: 379.sol-MB-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bIsFreezeAll == false)

IRs:
TMP_8(bool) = bIsFreezeAll == False
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_10(uint256) = INTERNAL_CALL, MB.safeSub(uint256,uint256)(REF_1,_value)
REF_0(uint256) (->balances) := TMP_10(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_2(uint256) -> balances[_to]
REF_3(uint256) -> balances[_to]
TMP_11(uint256) = INTERNAL_CALL, MB.safeAdd(uint256,uint256)(REF_3,_value)
REF_2(uint256) (->balances) := TMP_11(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 379.sol-MB-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bIsFreezeAll == false)

IRs:
TMP_13(bool) = bIsFreezeAll == False
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
_allowance(uint256) := REF_5(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_6(uint256) -> balances[_to]
REF_7(uint256) -> balances[_to]
TMP_15(uint256) = INTERNAL_CALL, MB.safeAdd(uint256,uint256)(REF_7,_value)
REF_6(uint256) (->balances) := TMP_15(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_8(uint256) -> balances[_from]
REF_9(uint256) -> balances[_from]
TMP_16(uint256) = INTERNAL_CALL, MB.safeSub(uint256,uint256)(REF_9,_value)
REF_8(uint256) (->balances) := TMP_16(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = safeSub(_allowance,_value)

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
TMP_17(uint256) = INTERNAL_CALL, MB.safeSub(uint256,uint256)(_allowance,_value)
REF_11(uint256) (->allowed) := TMP_17(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
}
