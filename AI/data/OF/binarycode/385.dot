digraph G {
// Function: 385.sol-HelpingBlocksContract-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_1(uint256) -> balanceOf[_from]
REF_1(-> balanceOf) = REF_1 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_2(uint256) -> balanceOf[_to]
REF_2(-> balanceOf) = REF_2 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 385.sol-HelpingBlocksContract-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = Helping Blocks Token

IRs:
name(string) := Helping Blocks Token(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = HBT

IRs:
symbol(string) := HBT(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = 10000000

IRs:
totalSupply(uint256) := 10000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
description = Kerala Flood Relief Fund

IRs:
description(string) := Kerala Flood Relief Fund(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[owner] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[owner]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
}
// Function: 385.sol-HelpingBlocksContract-disableDonation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
donationClosed = true

IRs:
donationClosed(bool) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 385.sol-HelpingBlocksContract-enableDonation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
donationClosed = false

IRs:
donationClosed(bool) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 385.sol-HelpingBlocksContract-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! donationClosed)

IRs:
TMP_14 = UnaryType.BANG donationClosed 
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
myDonation[msg.sender] += msg.value

IRs:
REF_3(uint256) -> myDonation[msg.sender]
REF_3(-> myDonation) = REF_3 + msg.value"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
balanceOf[msg.sender] < 1

IRs:
REF_4(uint256) -> balanceOf[msg.sender]
TMP_16(bool) = REF_4 < 1
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(owner,msg.sender,1)

IRs:
INTERNAL_CALL, HelpingBlocksContract._transfer(address,address,uint256)(owner,msg.sender,1)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 385.sol-HelpingBlocksContract-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 385.sol-HelpingBlocksContract-safeWithdrawal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(_value)

IRs:
Transfer dest:owner value:_value"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 385.sol-HelpingBlocksContract-setDescription(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
description = str

IRs:
description(string) := str(string)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 385.sol-HelpingBlocksContract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
donationClosed = false

IRs:
donationClosed(bool) := False(bool)"];
}
// Function: 385.sol-HelpingBlocksContract-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(owner,_to,_value)

IRs:
INTERNAL_CALL, HelpingBlocksContract._transfer(address,address,uint256)(owner,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 385.sol-HelpingBlocksContract-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = newOwner != TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 385.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 385.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 385.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
