digraph G {
// Function: 393.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 393.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 393.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 393.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 393.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 393.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 393.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 393.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_42(uint256) = a + b
c(uint256) := TMP_42(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_43(bool) = c >= a
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 393.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_54(bool) = b > 0
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_56(uint256) = a / b
c(uint256) := TMP_56(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 393.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_48(uint256) = a * b
c(uint256) := TMP_48(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_49(bool) = a == 0
TMP_50(uint256) = c / a
TMP_51(bool) = TMP_50 == b
TMP_52(bool) = TMP_49 || TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 393.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_45(bool) = b <= a
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_47(uint256) = a - b
c(uint256) := TMP_47(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 393.sol-VerifyToken-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! activated)

IRs:
TMP_4 = UnaryType.BANG activated 
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_6(bool) = msg.sender == creator
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dayStartTime = now - 60

IRs:
TMP_8(uint256) = now - 60
dayStartTime(uint256) := TMP_8(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
activated = true

IRs:
activated(bool) := True(bool)"];
}
// Function: 393.sol-VerifyToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_42(mapping(address => uint256)) -> allowed[tokenOwner]
REF_43(uint256) -> REF_42[spender]
RETURN REF_43"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 393.sol-VerifyToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[spender]
REF_27(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 393.sol-VerifyToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[spender]
REF_29(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_35 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_35(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 393.sol-VerifyToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_19(uint256) -> balances[tokenOwner]
RETURN REF_19"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 393.sol-VerifyToken-claimTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(activated)

IRs:
TMP_9(None) = SOLIDITY_CALL require(bool)(activated)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
dayStartTime < now.sub(timestep)

IRs:
TMP_10(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'timestep'] 
TMP_11(bool) = dayStartTime < TMP_10
CONDITION TMP_11"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
daysPassed = (now.sub(dayStartTime)).div(timestep)

IRs:
TMP_12(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'dayStartTime'] 
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_12', 'timestep'] 
daysPassed(uint256) := TMP_13(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dayStartTime = dayStartTime.add(daysPassed.mul(timestep))

IRs:
TMP_14(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['daysPassed', 'timestep'] 
TMP_15(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['dayStartTime', 'TMP_14'] 
dayStartTime(uint256) := TMP_15(uint256)"];
4->15;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
claimedToday = 0

IRs:
claimedToday(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(ethVerify.verifiedUsers(msg.sender))

IRs:
TMP_16(bool) = HIGH_LEVEL_CALL, dest:ethVerify(EthVerifyCore), function:verifiedUsers, arguments:['msg.sender']  
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(lastClaimed[msg.sender] <= dayStartTime)

IRs:
REF_7(uint256) -> lastClaimed[msg.sender]
TMP_18(bool) = REF_7 <= dayStartTime
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
lastClaimed[msg.sender] = now

IRs:
REF_8(uint256) -> lastClaimed[msg.sender]
REF_8(uint256) (->lastClaimed) := now(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
claimedToday = claimedToday.add(1)

IRs:
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['claimedToday', '1'] 
claimedToday(uint256) := TMP_20(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(dailyDistribution.div(claimedYesterday))

IRs:
REF_10(uint256) -> balances[msg.sender]
REF_11(uint256) -> balances[msg.sender]
TMP_21(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['dailyDistribution', 'claimedYesterday'] 
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_11', 'TMP_21'] 
REF_10(uint256) (->balances) := TMP_22(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_totalSupply = _totalSupply.add(dailyDistribution.div(claimedYesterday))

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['dailyDistribution', 'claimedYesterday'] 
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', 'TMP_23'] 
_totalSupply(uint256) := TMP_24(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
TokensClaimed(msg.sender,dailyDistribution.div(claimedYesterday))

IRs:
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['dailyDistribution', 'claimedYesterday'] 
Emit TokensClaimed(msg.sender,TMP_25)"];
15[label="Node Type: IF 15

EXPRESSION:
claimedToday > 1

IRs:
TMP_27(bool) = claimedToday > 1
CONDITION TMP_27"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
claimedYesterday = claimedToday

IRs:
claimedYesterday(uint256) := claimedToday(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
claimedYesterday = 1

IRs:
claimedYesterday(uint256) := 1(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->6;
}
// Function: 393.sol-VerifyToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
timestep = 86400

IRs:
timestep(uint256) := 86400(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = VRF

IRs:
symbol(string) := VRF(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = 0xVerify

IRs:
name(string) := 0xVerify(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dailyDistribution = 10000000 * 10 ** uint256(decimals)

IRs:
TMP_0 = CONVERT decimals to uint256
TMP_1(uint256) = 10 ** TMP_0
TMP_2(uint256) = 10000000 * TMP_1
dailyDistribution(uint256) := TMP_2(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
claimedYesterday = 20

IRs:
claimedYesterday(uint256) := 20(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
claimedToday = 0

IRs:
claimedToday(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
dayStartTime = now

IRs:
dayStartTime(uint256) := now(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_totalSupply = 14 * dailyDistribution

IRs:
TMP_3(uint256) = 14 * dailyDistribution
_totalSupply(uint256) := TMP_3(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[msg.sender] = _totalSupply

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
}
// Function: 393.sol-VerifyToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
activated = false

IRs:
activated(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ethVerify = EthVerifyCore(0x1Ea6fAd76886fE0C0BF8eBb3F51678B33D24186c)

IRs:
TMP_41 = CONVERT 174993498198803729259078003334344352925181286508 to EthVerifyCore
ethVerify(EthVerifyCore) := TMP_41(EthVerifyCore)"];
}
// Function: 393.sol-VerifyToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply.sub(balances[address(0)])

IRs:
TMP_28 = CONVERT 0 to address
REF_18(uint256) -> balances[TMP_28]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'REF_18'] 
RETURN TMP_29"];
}
// Function: 393.sol-VerifyToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(tokens)

IRs:
REF_20(uint256) -> balances[msg.sender]
REF_21(uint256) -> balances[msg.sender]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', 'tokens'] 
REF_20(uint256) (->balances) := TMP_30(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_23(uint256) -> balances[to]
REF_24(uint256) -> balances[to]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_24', 'tokens'] 
REF_23(uint256) (->balances) := TMP_31(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 393.sol-VerifyToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_31(uint256) -> balances[from]
REF_32(uint256) -> balances[from]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_32', 'tokens'] 
REF_31(uint256) (->balances) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_34(mapping(address => uint256)) -> allowed[from]
REF_35(uint256) -> REF_34[msg.sender]
REF_36(mapping(address => uint256)) -> allowed[from]
REF_37(uint256) -> REF_36[msg.sender]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_37', 'tokens'] 
REF_35(uint256) (->allowed) := TMP_38(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_39(uint256) -> balances[to]
REF_40(uint256) -> balances[to]
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_40', 'tokens'] 
REF_39(uint256) (->balances) := TMP_39(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
}
