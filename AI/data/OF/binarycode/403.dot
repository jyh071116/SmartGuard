digraph G {
// Function: 403.sol-KeralaDonationContract-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_8(bool) = _to != 0
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_1(uint256) -> balanceOf[_from]
TMP_10(bool) = REF_1 >= _value
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] == 0)

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_12(bool) = REF_2 == 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value == 1)

IRs:
TMP_14(bool) = _value == 1
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_3(uint256) -> balanceOf[_from]
REF_3(-> balanceOf) = REF_3 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_4(uint256) -> balanceOf[_to]
REF_4(-> balanceOf) = REF_4 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 403.sol-KeralaDonationContract-checkMyDonation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance[msg.sender]

IRs:
REF_5(uint256) -> balance[msg.sender]
RETURN REF_5"];
}
// Function: 403.sol-KeralaDonationContract-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = Kerala Flood Donation Token

IRs:
name(string) := Kerala Flood Donation Token(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = KFDT

IRs:
symbol(string) := KFDT(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = 1000000

IRs:
totalSupply(uint256) := 1000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[owner] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[owner]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
amountRaised = 0

IRs:
amountRaised(uint256) := 0(uint256)"];
}
// Function: 403.sol-KeralaDonationContract-disableDonation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
donationClosed = true

IRs:
donationClosed(bool) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 403.sol-KeralaDonationContract-enableDonation()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
donationClosed = false

IRs:
donationClosed(bool) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 403.sol-KeralaDonationContract-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! donationClosed)

IRs:
TMP_22 = UnaryType.BANG donationClosed 
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
amountRaised += amount

IRs:
amountRaised(uint256) = amountRaised + amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balance[msg.sender] += amount

IRs:
REF_7(uint256) -> balance[msg.sender]
REF_7(-> balance) = REF_7 + amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transfer(msg.sender,1)

IRs:
TMP_24(bool) = INTERNAL_CALL, KeralaDonationContract.transfer(address,uint256)(msg.sender,1)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
}
// Function: 403.sol-KeralaDonationContract-isBacker()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf[msg.sender] > 0

IRs:
REF_6(uint256) -> balanceOf[msg.sender]
TMP_21(bool) = REF_6 > 0
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 403.sol-KeralaDonationContract-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_26(bool) = msg.sender == owner
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 403.sol-KeralaDonationContract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
donationClosed = false

IRs:
donationClosed(bool) := False(bool)"];
}
// Function: 403.sol-KeralaDonationContract-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, KeralaDonationContract._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 403.sol-KeralaDonationContract-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = newOwner != TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 403.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 403.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 403.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
