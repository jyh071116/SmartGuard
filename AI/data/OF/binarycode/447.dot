digraph G {
// Function: 447.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_91(uint256) -> balances[_who]
TMP_72(bool) = _value <= REF_91
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_92(uint256) -> balances[_who]
REF_93(uint256) -> balances[_who]
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_93', '_value'] 
REF_92(uint256) (->balances) := TMP_74(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_75(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_77 = CONVERT 0 to address
Emit Transfer(_who,TMP_77,_value)"];
}
// Function: 447.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 447.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 447.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 447.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 447.sol-BurnableToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_84(mapping(address => uint256)) -> allowed[_from]
REF_85(uint256) -> REF_84[msg.sender]
TMP_68(bool) = _value <= REF_85
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_86(mapping(address => uint256)) -> allowed[_from]
REF_87(uint256) -> REF_86[msg.sender]
REF_88(mapping(address => uint256)) -> allowed[_from]
REF_89(uint256) -> REF_88[msg.sender]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_89', '_value'] 
REF_87(uint256) (->allowed) := TMP_70(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_from,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(_from,_value)"];
}
// Function: 447.sol-BurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_64(bool) = _subtractedValue >= oldValue
CONDITION TMP_64"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_65(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-BurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_62(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 447.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 447.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 447.sol-ECTAToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_103(uint256) -> balances[_who]
TMP_84(bool) = _value <= REF_103
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_104(uint256) -> balances[_who]
REF_105(uint256) -> balances[_who]
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_105', '_value'] 
REF_104(uint256) (->balances) := TMP_86(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_87(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_89 = CONVERT 0 to address
Emit Transfer(_who,TMP_89,_value)"];
}
// Function: 447.sol-ECTAToken-allowance(address,address)
digraph{
}
// Function: 447.sol-ECTAToken-approve(address,uint256)
digraph{
}
// Function: 447.sol-ECTAToken-balanceOf(address)
digraph{
}
// Function: 447.sol-ECTAToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 447.sol-ECTAToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_96(mapping(address => uint256)) -> allowed[_from]
REF_97(uint256) -> REF_96[msg.sender]
TMP_80(bool) = _value <= REF_97
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_98(mapping(address => uint256)) -> allowed[_from]
REF_99(uint256) -> REF_98[msg.sender]
REF_100(mapping(address => uint256)) -> allowed[_from]
REF_101(uint256) -> REF_100[msg.sender]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_101', '_value'] 
REF_99(uint256) (->allowed) := TMP_82(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_from,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(_from,_value)"];
}
// Function: 447.sol-ECTAToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
approve(adminAddress,ADMIN_ALLOWANCE)

IRs:
TMP_116(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(adminAddress,ADMIN_ALLOWANCE)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = INITIAL_SUPPLY

IRs:
totalSupply_(uint256) := INITIAL_SUPPLY(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[creator] = totalSupply_ - TEAM_VESTING_AMOUNT - PLATFORM_GROWTH_VESTING_AMOUNT

IRs:
REF_150(uint256) -> balances[creator]
TMP_117(uint256) = totalSupply_ - TEAM_VESTING_AMOUNT
TMP_118(uint256) = TMP_117 - PLATFORM_GROWTH_VESTING_AMOUNT
REF_150(uint256) (->balances) := TMP_118(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
BurnableToken()

IRs:
NOP"];
5->1;
}
// Function: 447.sol-ECTAToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_141(mapping(address => uint256)) -> allowed[msg.sender]
REF_142(uint256) -> REF_141[_spender]
oldValue(uint256) := REF_142(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_113(bool) = _subtractedValue >= oldValue
CONDITION TMP_113"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_143(mapping(address => uint256)) -> allowed[msg.sender]
REF_144(uint256) -> REF_143[_spender]
REF_144(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_145(mapping(address => uint256)) -> allowed[msg.sender]
REF_146(uint256) -> REF_145[_spender]
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_146(uint256) (->allowed) := TMP_114(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_148(mapping(address => uint256)) -> allowed[msg.sender]
REF_149(uint256) -> REF_148[_spender]
Emit Approval(msg.sender,_spender,REF_149)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-ECTAToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_134(mapping(address => uint256)) -> allowed[msg.sender]
REF_135(uint256) -> REF_134[_spender]
REF_136(mapping(address => uint256)) -> allowed[msg.sender]
REF_137(uint256) -> REF_136[_spender]
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_137', '_addedValue'] 
REF_135(uint256) (->allowed) := TMP_111(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_139(mapping(address => uint256)) -> allowed[msg.sender]
REF_140(uint256) -> REF_139[_spender]
Emit Approval(msg.sender,_spender,REF_140)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-ECTAToken-onlyCreator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_146(bool) = msg.sender == creator
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 447.sol-ECTAToken-setCrowdsaleAndVesting(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(crowdsaleAddress == address(0))

IRs:
TMP_120 = CONVERT 0 to address
TMP_121(bool) = crowdsaleAddress == TMP_120
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
crowdsaleAddress = _crowdsaleAddress

IRs:
crowdsaleAddress(address) := _crowdsaleAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
approve(crowdsaleAddress,CROWDSALE_ALLOWANCE)

IRs:
TMP_123(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(crowdsaleAddress,CROWDSALE_ALLOWANCE)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_teamVestingContractAddress] = TEAM_VESTING_AMOUNT

IRs:
REF_151(uint256) -> balances[_teamVestingContractAddress]
REF_151(uint256) (->balances) := TEAM_VESTING_AMOUNT(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_platformVestingContractAddress] = PLATFORM_GROWTH_VESTING_AMOUNT

IRs:
REF_152(uint256) -> balances[_platformVestingContractAddress]
REF_152(uint256) (->balances) := PLATFORM_GROWTH_VESTING_AMOUNT(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, ECTAToken.onlyCreator()()"];
6->1;
}
// Function: 447.sol-ECTAToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = ECTA Token

IRs:
name(string) := ECTA Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ECTA

IRs:
symbol(string) := ECTA(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals))

IRs:
TMP_131 = CONVERT decimals to uint256
TMP_132(uint256) = 10 ** TMP_131
TMP_133(uint256) = 1000000000 * TMP_132
INITIAL_SUPPLY(uint256) := TMP_133(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
ADMIN_ALLOWANCE = 170000000 * (10 ** uint256(decimals))

IRs:
TMP_134 = CONVERT decimals to uint256
TMP_135(uint256) = 10 ** TMP_134
TMP_136(uint256) = 170000000 * TMP_135
ADMIN_ALLOWANCE(uint256) := TMP_136(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
TEAM_VESTING_AMOUNT = 200000000 * (10 ** uint256(decimals))

IRs:
TMP_137 = CONVERT decimals to uint256
TMP_138(uint256) = 10 ** TMP_137
TMP_139(uint256) = 200000000 * TMP_138
TEAM_VESTING_AMOUNT(uint256) := TMP_139(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
PLATFORM_GROWTH_VESTING_AMOUNT = 130000000 * (10 ** uint256(decimals))

IRs:
TMP_140 = CONVERT decimals to uint256
TMP_141(uint256) = 10 ** TMP_140
TMP_142(uint256) = 130000000 * TMP_141
PLATFORM_GROWTH_VESTING_AMOUNT(uint256) := TMP_142(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CROWDSALE_ALLOWANCE = 500000000 * (10 ** uint256(decimals))

IRs:
TMP_143 = CONVERT decimals to uint256
TMP_144(uint256) = 10 ** TMP_143
TMP_145(uint256) = 500000000 * TMP_144
CROWDSALE_ALLOWANCE(uint256) := TMP_145(uint256)"];
}
// Function: 447.sol-ECTAToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
adminAddress = 0xCF3D36be31838DA6d600B882848566A1aEAE8008

IRs:
adminAddress(address) := 1183126203800550415279310133120422503573665775624(address)"];
}
// Function: 447.sol-ECTAToken-totalSupply()
digraph{
}
// Function: 447.sol-ECTAToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != creator)

IRs:
TMP_125(bool) = msg.sender != creator
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_127(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(_to,_value)
RETURN TMP_127"];
}
// Function: 447.sol-ECTAToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != creator)

IRs:
TMP_128(bool) = msg.sender != creator
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_130(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_130"];
}
// Function: 447.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 447.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 447.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 447.sol-ERC20-totalSupply()
digraph{
}
// Function: 447.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 447.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 447.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_11(uint256) = _a + _b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= _a)

IRs:
TMP_12(bool) = c >= _a
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 447.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b > 0)

IRs:
TMP_5(bool) = _b > 0
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a / _b

IRs:
TMP_7(uint256) = _a / _b
c(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 447.sol-SafeMath-mod(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b != 0)

IRs:
TMP_14(bool) = b != 0
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a % b

IRs:
TMP_16(uint256) = a % b
RETURN TMP_16"];
}
// Function: 447.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 447.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b <= _a)

IRs:
TMP_8(bool) = _b <= _a
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a - _b

IRs:
TMP_10(uint256) = _a - _b
c(uint256) := TMP_10(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 447.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
}
// Function: 447.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[_spender]
REF_11(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 447.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
oldValue(uint256) := REF_34(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_39(bool) = _subtractedValue >= oldValue
CONDITION TMP_39"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[_spender]
REF_36(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_37(mapping(address => uint256)) -> allowed[msg.sender]
REF_38(uint256) -> REF_37[_spender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_38(uint256) (->allowed) := TMP_40(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
Emit Approval(msg.sender,_spender,REF_41)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_29', '_addedValue'] 
REF_27(uint256) (->allowed) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
Emit Approval(msg.sender,_spender,REF_32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 447.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_17(bool) = _value <= REF_3
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _to != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_22(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_23(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 447.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_12(uint256) -> balances[_from]
TMP_26(bool) = _value <= REF_12
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_28(bool) = _value <= REF_14
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = _to != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_15(uint256) -> balances[_from]
REF_16(uint256) -> balances[_from]
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_16', '_value'] 
REF_15(uint256) (->balances) := TMP_33(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_18(uint256) -> balances[_to]
REF_19(uint256) -> balances[_to]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_19', '_value'] 
REF_18(uint256) (->balances) := TMP_34(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_value'] 
REF_22(uint256) (->allowed) := TMP_35(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
