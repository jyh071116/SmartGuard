digraph G {
// Function: 473.sol-ApcrdaZebichain-ApcrdaZebichain()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 473.sol-ApcrdaZebichain-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 473.sol-ApcrdaZebichain-insertHash(uint16,uint8,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
dt = new DateTime()

IRs:
TMP_30(DateTime) = new DateTime() 
dt(DateTime) := TMP_30(DateTime)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
t = dt.toTimestamp(year,month,day)

IRs:
TMP_31(uint256) = HIGH_LEVEL_CALL, dest:dt(DateTime), function:toTimestamp, arguments:['year', 'month', 'day']  
t(uint256) := TMP_31(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
event_details[t] = hash

IRs:
REF_17(string) -> event_details[t]
REF_17(string) (->event_details) := hash(string)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 473.sol-ApcrdaZebichain-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_33(bool) = msg.sender == owner
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 473.sol-ApcrdaZebichain-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = newOwner != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 473.sol-ApcrdaZebichain-viewMerkleHash(uint16,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
time = dt.toTimestamp(year,month,day)

IRs:
TMP_28(uint256) = HIGH_LEVEL_CALL, dest:dt(DateTime), function:toTimestamp, arguments:['year', 'month', 'day']  
time(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hash = event_details[time]

IRs:
REF_15(string) -> event_details[time]
hash(string) := REF_15(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
hash

IRs:
RETURN hash"];
}
// Function: 473.sol-DateTime-isLeapYear(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
year % 4 != 0

IRs:
TMP_17(uint16) = year % 4
TMP_18(bool) = TMP_17 != 0
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
year % 100 != 0

IRs:
TMP_19(uint16) = year % 100
TMP_20(bool) = TMP_19 != 0
CONDITION TMP_20"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
year % 400 != 0

IRs:
TMP_21(uint16) = year % 400
TMP_22(bool) = TMP_21 != 0
CONDITION TMP_22"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 473.sol-DateTime-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DAY_IN_SECONDS = 86400

IRs:
DAY_IN_SECONDS(uint256) := 86400(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
YEAR_IN_SECONDS = 31536000

IRs:
YEAR_IN_SECONDS(uint256) := 31536000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
LEAP_YEAR_IN_SECONDS = 31622400

IRs:
LEAP_YEAR_IN_SECONDS(uint256) := 31622400(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
ORIGIN_YEAR = 1970

IRs:
ORIGIN_YEAR(uint16) := 1970(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
GMT_TO_LOCAL = 19800

IRs:
GMT_TO_LOCAL(uint256) := 19800(uint256)"];
}
// Function: 473.sol-DateTime-toTimestamp(uint16,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
i = ORIGIN_YEAR

IRs:
i(uint16) := ORIGIN_YEAR(uint16)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < year

IRs:
TMP_7(bool) = i < year
CONDITION TMP_7"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
isLeapYear(i)

IRs:
TMP_8(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(i)
CONDITION TMP_8"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
timestamp += LEAP_YEAR_IN_SECONDS

IRs:
timestamp(uint256) = timestamp + LEAP_YEAR_IN_SECONDS"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
timestamp += YEAR_IN_SECONDS

IRs:
timestamp(uint256) = timestamp + YEAR_IN_SECONDS"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_9(uint16) := i(uint16)
i(uint16) = i + 1"];
10->5;
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
monthDayCounts[0] = 31

IRs:
REF_0(uint8) -> monthDayCounts[0]
REF_0(uint8) (->monthDayCounts) := 31(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
isLeapYear(year)

IRs:
TMP_10(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(year)
CONDITION TMP_10"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
monthDayCounts[1] = 29

IRs:
REF_1(uint8) -> monthDayCounts[1]
REF_1(uint8) (->monthDayCounts) := 29(uint256)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
monthDayCounts[1] = 28

IRs:
REF_2(uint8) -> monthDayCounts[1]
REF_2(uint8) (->monthDayCounts) := 28(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
monthDayCounts[2] = 31

IRs:
REF_3(uint8) -> monthDayCounts[2]
REF_3(uint8) (->monthDayCounts) := 31(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
monthDayCounts[3] = 30

IRs:
REF_4(uint8) -> monthDayCounts[3]
REF_4(uint8) (->monthDayCounts) := 30(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
monthDayCounts[4] = 31

IRs:
REF_5(uint8) -> monthDayCounts[4]
REF_5(uint8) (->monthDayCounts) := 31(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
monthDayCounts[5] = 30

IRs:
REF_6(uint8) -> monthDayCounts[5]
REF_6(uint8) (->monthDayCounts) := 30(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
monthDayCounts[6] = 31

IRs:
REF_7(uint8) -> monthDayCounts[6]
REF_7(uint8) (->monthDayCounts) := 31(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
monthDayCounts[7] = 31

IRs:
REF_8(uint8) -> monthDayCounts[7]
REF_8(uint8) (->monthDayCounts) := 31(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
monthDayCounts[8] = 30

IRs:
REF_9(uint8) -> monthDayCounts[8]
REF_9(uint8) (->monthDayCounts) := 30(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
monthDayCounts[9] = 31

IRs:
REF_10(uint8) -> monthDayCounts[9]
REF_10(uint8) (->monthDayCounts) := 31(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
monthDayCounts[10] = 30

IRs:
REF_11(uint8) -> monthDayCounts[10]
REF_11(uint8) (->monthDayCounts) := 30(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
monthDayCounts[11] = 31

IRs:
REF_12(uint8) -> monthDayCounts[11]
REF_12(uint8) (->monthDayCounts) := 31(uint256)"];
26->29;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->33;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 1

IRs:
i(uint16) := 1(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < month

IRs:
TMP_11(bool) = i < month
CONDITION TMP_11"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1]

IRs:
TMP_12(uint16) = i - 1
REF_13(uint8) -> monthDayCounts[TMP_12]
TMP_13(uint256) = DAY_IN_SECONDS * REF_13
timestamp(uint256) = timestamp + TMP_13"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_14(uint16) := i(uint16)
i(uint16) = i + 1"];
32->30;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
timestamp += DAY_IN_SECONDS * (day - 1)

IRs:
TMP_15(uint8) = day - 1
TMP_16(uint256) = DAY_IN_SECONDS * TMP_15
timestamp(uint256) = timestamp + TMP_16"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
timestamp -= GMT_TO_LOCAL

IRs:
timestamp(uint256) = timestamp - GMT_TO_LOCAL"];
34->35;
35[label="Node Type: RETURN 35

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
36[label="Node Type: RETURN 36

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 473.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 473.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 473.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
