digraph G {
// Function: 483.sol-DigixDaoFirstProposal-constructor(uint256,bytes32[],uint256[],uint256[],uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
NumberCarbonVoting(_itemCount,_titles,_minValues,_maxValues,_start,_end)

IRs:
INTERNAL_CALL, NumberCarbonVoting.constructor(uint256,bytes32[],uint256[],uint256[],uint256,uint256)(_itemCount,_titles,_minValues,_maxValues,_start,_end)"];
}
// Function: 483.sol-DigixDaoFirstProposal-getAllVoters()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_voters = voters

IRs:
_voters(address[]) := voters(address[])"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_voters

IRs:
RETURN _voters"];
}
// Function: 483.sol-DigixDaoFirstProposal-getUserVote(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_voted = voted[_voter]

IRs:
REF_87(bool) -> voted[_voter]
_voted(bool) := REF_87(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_votes = new uint256[](itemCount)

IRs:
TMP_69(uint256[])  = new uint256[](itemCount)
_votes(uint256[]) = ['TMP_69(uint256[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < itemCount

IRs:
TMP_70(bool) = i < itemCount
CONDITION TMP_70"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_votes[i] = voteItems[i].votes[_voter]

IRs:
REF_88(uint256) -> _votes[i]
REF_89(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_90(mapping(address => uint256)) -> REF_89.votes
REF_91(uint256) -> REF_90[_voter]
REF_88(uint256) (->_votes) := REF_91(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_71(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: RETURN 9

EXPRESSION:
(_votes,_voted)

IRs:
RETURN _votes,_voted"];
}
// Function: 483.sol-DigixDaoFirstProposal-getVoteItemDetails(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_title = voteItems[_itemIndex].title

IRs:
REF_81(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_82(bytes32) -> REF_81.title
_title(bytes32) := REF_82(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_minValue = voteItems[_itemIndex].minValue

IRs:
REF_83(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_84(uint256) -> REF_83.minValue
_minValue(uint256) := REF_84(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_maxValue = voteItems[_itemIndex].maxValue

IRs:
REF_85(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_86(uint256) -> REF_85.maxValue
_maxValue(uint256) := REF_86(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_title,_minValue,_maxValue)

IRs:
RETURN _title,_minValue,_maxValue"];
}
// Function: 483.sol-DigixDaoFirstProposal-getVotesForItem(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getVotesForItemFromVoterIndex(_itemIndex,0,voters.length)

IRs:
REF_71 -> LENGTH voters
TUPLE_1(address[],uint256[]) = INTERNAL_CALL, NumberCarbonVoting.getVotesForItemFromVoterIndex(uint256,uint256,uint256)(_itemIndex,0,REF_71)
RETURN TUPLE_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
(_voters,_votes)

IRs:
RETURN _voters,_votes"];
}
// Function: 483.sol-DigixDaoFirstProposal-getVotesForItemFromVoterIndex(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_itemIndex < itemCount)

IRs:
TMP_54(bool) = _itemIndex < itemCount
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_voterIndex < voters.length)

IRs:
REF_72 -> LENGTH voters
TMP_56(bool) = _voterIndex < REF_72
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_count = min(voters.length - _voterIndex,_count)

IRs:
REF_73 -> LENGTH voters
TMP_58(uint256) = REF_73 - _voterIndex
TMP_59(uint256) = INTERNAL_CALL, NumberCarbonVoting.min(uint256,uint256)(TMP_58,_count)
_count(uint256) := TMP_59(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_voters = new address[](_count)

IRs:
TMP_61(address[])  = new address[](_count)
_voters(address[]) = ['TMP_61(address[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_votes = new uint256[](_count)

IRs:
TMP_63(uint256[])  = new uint256[](_count)
_votes(uint256[]) = ['TMP_63(uint256[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _count

IRs:
TMP_64(bool) = i < _count
CONDITION TMP_64"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_voters[i] = voters[_voterIndex + i]

IRs:
REF_74(address) -> _voters[i]
TMP_65(uint256) = _voterIndex + i
REF_75(address) -> voters[TMP_65]
REF_74(address) (->_voters) := REF_75(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_votes[i] = voteItems[_itemIndex].votes[_voters[i]]

IRs:
REF_76(uint256) -> _votes[i]
REF_77(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_78(mapping(address => uint256)) -> REF_77.votes
REF_79(address) -> _voters[i]
REF_80(uint256) -> REF_78[REF_79]
REF_76(uint256) (->_votes) := REF_80(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_66(uint256) := i(uint256)
i(uint256) = i + 1"];
12->9;
13[label="Node Type: RETURN 13

EXPRESSION:
(_voters,_votes)

IRs:
RETURN _voters,_votes"];
}
// Function: 483.sol-DigixDaoFirstProposal-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_min = _a

IRs:
_min(uint256) := _a(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_b < _a

IRs:
TMP_67(bool) = _b < _a
CONDITION TMP_67"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_min = _b

IRs:
_min(uint256) := _b(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_min

IRs:
RETURN _min"];
}
// Function: 483.sol-DigixDaoFirstProposal-vote(uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_votes.length == itemCount)

IRs:
REF_55 -> LENGTH _votes
TMP_38(bool) = REF_55 == itemCount
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now >= start && now < end)

IRs:
TMP_40(bool) = now >= start
TMP_41(bool) = now < end
TMP_42(bool) = TMP_40 && TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
voter = msg.sender

IRs:
voter(address) := msg.sender(address)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! voted[voter]

IRs:
REF_56(bool) -> voted[voter]
TMP_44 = UnaryType.BANG REF_56 
CONDITION TMP_44"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
voted[voter] = true

IRs:
REF_57(bool) -> voted[voter]
REF_57(bool) (->voted) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
voters.push(voter)

IRs:
REF_59 -> LENGTH voters
TMP_46(uint256) := REF_59(uint256)
TMP_47(uint256) = TMP_46 + 1
REF_59(uint256) (->voters) := TMP_47(uint256)
REF_60(address) -> voters[TMP_46]
REF_60(address) (->voters) := voter(address)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < itemCount

IRs:
TMP_48(bool) = i < itemCount
CONDITION TMP_48"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(_votes[i] >= voteItems[i].minValue && _votes[i] <= voteItems[i].maxValue)

IRs:
REF_61(uint256) -> _votes[i]
REF_62(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_63(uint256) -> REF_62.minValue
TMP_49(bool) = REF_61 >= REF_63
REF_64(uint256) -> _votes[i]
REF_65(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_66(uint256) -> REF_65.maxValue
TMP_50(bool) = REF_64 <= REF_66
TMP_51(bool) = TMP_49 && TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
voteItems[i].votes[voter] = _votes[i]

IRs:
REF_67(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_68(mapping(address => uint256)) -> REF_67.votes
REF_69(uint256) -> REF_68[voter]
REF_70(uint256) -> _votes[i]
REF_69(uint256) (->voteItems) := REF_70(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_53(uint256) := i(uint256)
i(uint256) = i + 1"];
14->11;
}
// Function: 483.sol-NumberCarbonVoting-constructor(uint256,bytes32[],uint256[],uint256[],uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
itemCount = _itemCount

IRs:
itemCount(uint256) := _itemCount(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < itemCount

IRs:
TMP_0(bool) = i < itemCount
CONDITION TMP_0"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
voteItems[i].title = _titles[i]

IRs:
REF_0(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_1(bytes32) -> REF_0.title
REF_2(bytes32) -> _titles[i]
REF_1(bytes32) (->voteItems) := REF_2(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
voteItems[i].minValue = _minValues[i]

IRs:
REF_3(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_4(uint256) -> REF_3.minValue
REF_5(uint256) -> _minValues[i]
REF_4(uint256) (->voteItems) := REF_5(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
voteItems[i].maxValue = _maxValues[i]

IRs:
REF_6(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_7(uint256) -> REF_6.maxValue
REF_8(uint256) -> _maxValues[i]
REF_7(uint256) (->voteItems) := REF_8(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
start = _start

IRs:
start(uint256) := _start(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
end = _end

IRs:
end(uint256) := _end(uint256)"];
}
// Function: 483.sol-NumberCarbonVoting-getAllVoters()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_voters = voters

IRs:
_voters(address[]) := voters(address[])"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_voters

IRs:
RETURN _voters"];
}
// Function: 483.sol-NumberCarbonVoting-getUserVote(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_voted = voted[_voter]

IRs:
REF_41(bool) -> voted[_voter]
_voted(bool) := REF_41(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_votes = new uint256[](itemCount)

IRs:
TMP_33(uint256[])  = new uint256[](itemCount)
_votes(uint256[]) = ['TMP_33(uint256[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < itemCount

IRs:
TMP_34(bool) = i < itemCount
CONDITION TMP_34"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_votes[i] = voteItems[i].votes[_voter]

IRs:
REF_42(uint256) -> _votes[i]
REF_43(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_44(mapping(address => uint256)) -> REF_43.votes
REF_45(uint256) -> REF_44[_voter]
REF_42(uint256) (->_votes) := REF_45(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_35(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: RETURN 9

EXPRESSION:
(_votes,_voted)

IRs:
RETURN _votes,_voted"];
}
// Function: 483.sol-NumberCarbonVoting-getVoteItemDetails(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_title = voteItems[_itemIndex].title

IRs:
REF_35(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_36(bytes32) -> REF_35.title
_title(bytes32) := REF_36(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_minValue = voteItems[_itemIndex].minValue

IRs:
REF_37(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_38(uint256) -> REF_37.minValue
_minValue(uint256) := REF_38(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_maxValue = voteItems[_itemIndex].maxValue

IRs:
REF_39(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_40(uint256) -> REF_39.maxValue
_maxValue(uint256) := REF_40(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_title,_minValue,_maxValue)

IRs:
RETURN _title,_minValue,_maxValue"];
}
// Function: 483.sol-NumberCarbonVoting-getVotesForItem(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getVotesForItemFromVoterIndex(_itemIndex,0,voters.length)

IRs:
REF_25 -> LENGTH voters
TUPLE_0(address[],uint256[]) = INTERNAL_CALL, NumberCarbonVoting.getVotesForItemFromVoterIndex(uint256,uint256,uint256)(_itemIndex,0,REF_25)
RETURN TUPLE_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
(_voters,_votes)

IRs:
RETURN _voters,_votes"];
}
// Function: 483.sol-NumberCarbonVoting-getVotesForItemFromVoterIndex(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_itemIndex < itemCount)

IRs:
TMP_18(bool) = _itemIndex < itemCount
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_voterIndex < voters.length)

IRs:
REF_26 -> LENGTH voters
TMP_20(bool) = _voterIndex < REF_26
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_count = min(voters.length - _voterIndex,_count)

IRs:
REF_27 -> LENGTH voters
TMP_22(uint256) = REF_27 - _voterIndex
TMP_23(uint256) = INTERNAL_CALL, NumberCarbonVoting.min(uint256,uint256)(TMP_22,_count)
_count(uint256) := TMP_23(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_voters = new address[](_count)

IRs:
TMP_25(address[])  = new address[](_count)
_voters(address[]) = ['TMP_25(address[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_votes = new uint256[](_count)

IRs:
TMP_27(uint256[])  = new uint256[](_count)
_votes(uint256[]) = ['TMP_27(uint256[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _count

IRs:
TMP_28(bool) = i < _count
CONDITION TMP_28"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_voters[i] = voters[_voterIndex + i]

IRs:
REF_28(address) -> _voters[i]
TMP_29(uint256) = _voterIndex + i
REF_29(address) -> voters[TMP_29]
REF_28(address) (->_voters) := REF_29(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_votes[i] = voteItems[_itemIndex].votes[_voters[i]]

IRs:
REF_30(uint256) -> _votes[i]
REF_31(NumberCarbonVoting.VoteItem) -> voteItems[_itemIndex]
REF_32(mapping(address => uint256)) -> REF_31.votes
REF_33(address) -> _voters[i]
REF_34(uint256) -> REF_32[REF_33]
REF_30(uint256) (->_votes) := REF_34(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_30(uint256) := i(uint256)
i(uint256) = i + 1"];
12->9;
13[label="Node Type: RETURN 13

EXPRESSION:
(_voters,_votes)

IRs:
RETURN _voters,_votes"];
}
// Function: 483.sol-NumberCarbonVoting-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_min = _a

IRs:
_min(uint256) := _a(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_b < _a

IRs:
TMP_31(bool) = _b < _a
CONDITION TMP_31"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_min = _b

IRs:
_min(uint256) := _b(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_min

IRs:
RETURN _min"];
}
// Function: 483.sol-NumberCarbonVoting-vote(uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_votes.length == itemCount)

IRs:
REF_9 -> LENGTH _votes
TMP_2(bool) = REF_9 == itemCount
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now >= start && now < end)

IRs:
TMP_4(bool) = now >= start
TMP_5(bool) = now < end
TMP_6(bool) = TMP_4 && TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
voter = msg.sender

IRs:
voter(address) := msg.sender(address)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! voted[voter]

IRs:
REF_10(bool) -> voted[voter]
TMP_8 = UnaryType.BANG REF_10 
CONDITION TMP_8"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
voted[voter] = true

IRs:
REF_11(bool) -> voted[voter]
REF_11(bool) (->voted) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
voters.push(voter)

IRs:
REF_13 -> LENGTH voters
TMP_10(uint256) := REF_13(uint256)
TMP_11(uint256) = TMP_10 + 1
REF_13(uint256) (->voters) := TMP_11(uint256)
REF_14(address) -> voters[TMP_10]
REF_14(address) (->voters) := voter(address)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < itemCount

IRs:
TMP_12(bool) = i < itemCount
CONDITION TMP_12"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(_votes[i] >= voteItems[i].minValue && _votes[i] <= voteItems[i].maxValue)

IRs:
REF_15(uint256) -> _votes[i]
REF_16(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_17(uint256) -> REF_16.minValue
TMP_13(bool) = REF_15 >= REF_17
REF_18(uint256) -> _votes[i]
REF_19(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_20(uint256) -> REF_19.maxValue
TMP_14(bool) = REF_18 <= REF_20
TMP_15(bool) = TMP_13 && TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
voteItems[i].votes[voter] = _votes[i]

IRs:
REF_21(NumberCarbonVoting.VoteItem) -> voteItems[i]
REF_22(mapping(address => uint256)) -> REF_21.votes
REF_23(uint256) -> REF_22[voter]
REF_24(uint256) -> _votes[i]
REF_23(uint256) (->voteItems) := REF_24(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_17(uint256) := i(uint256)
i(uint256) = i + 1"];
14->11;
}
}
