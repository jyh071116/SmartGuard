digraph G {
// Function: 508.sol-Contract-authorize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initialize()

IRs:
INTERNAL_CALL, Contract.initialize()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
perms = EXEC_PERMISSIONS

IRs:
perms(bytes32) := EXEC_PERMISSIONS(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! authorized

IRs:
TMP_13 = UnaryType.BANG authorized 
CONDITION TMP_13"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert(string)(Sender is not authorized as a script exec address)

IRs:
TMP_14(None) = SOLIDITY_CALL revert(string)(Sender is not authorized as a script exec address)"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 508.sol-Contract-buffPtr()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
ptr

IRs:
RETURN ptr"];
}
// Function: 508.sol-Contract-by(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
expected() == NextFunction.VAL_INC

IRs:
TMP_161(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_7(Contract.NextFunction) -> NextFunction.VAL_INC
TMP_162(bool) = TMP_161 == REF_7
CONDITION TMP_162"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_amt = _amt.add(uint256(_val))

IRs:
TMP_163 = CONVERT _val to uint256
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amt', 'TMP_163'] 
_amt(uint256) := TMP_164(uint256)"];
2->7;
3[label="Node Type: IF 3

EXPRESSION:
expected() == NextFunction.VAL_DEC

IRs:
TMP_165(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_9(Contract.NextFunction) -> NextFunction.VAL_DEC
TMP_166(bool) = TMP_165 == REF_9
CONDITION TMP_166"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_amt = uint256(_val).sub(_amt)

IRs:
TMP_167 = CONVERT _val to uint256
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_167', '_amt'] 
_amt(uint256) := TMP_168(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Expected VAL_INC or VAL_DEC)

IRs:
TMP_169(None) = SOLIDITY_CALL revert(string)(Expected VAL_INC or VAL_DEC)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
13->1;
}
// Function: 508.sol-Contract-byMaximum(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
expected() == NextFunction.VAL_DEC

IRs:
TMP_174(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_11(Contract.NextFunction) -> NextFunction.VAL_DEC
TMP_175(bool) = TMP_174 == REF_11
CONDITION TMP_175"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
_amt >= uint256(_val)

IRs:
TMP_176 = CONVERT _val to uint256
TMP_177(bool) = _amt >= TMP_176
CONDITION TMP_177"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_amt = 0

IRs:
_amt(uint256) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_amt = uint256(_val).sub(_amt)

IRs:
TMP_178 = CONVERT _val to uint256
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_178', '_amt'] 
_amt(uint256) := TMP_179(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert(string)(Expected VAL_DEC)

IRs:
TMP_180(None) = SOLIDITY_CALL revert(string)(Expected VAL_DEC)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
13->1;
}
// Function: 508.sol-Contract-checks(function())
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_check()

IRs:
INTERNAL_DYNAMIC_CALL _check()  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
conditions(validState,validState)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,validState)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
conditions(validState,validState)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,validState)"];
3->1;
}
// Function: 508.sol-Contract-commit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = buffPtr()

IRs:
TMP_29(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
ptr(bytes32) := TMP_29(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(ptr >= 0x180,Invalid buffer pointer)

IRs:
TMP_30(bool) = ptr >= 384
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,Invalid buffer pointer)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validState,none)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,none)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validState,none)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,none)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validState,none)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,none)"];
7->1;
}
// Function: 508.sol-Contract-conditions(function(),function())
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
first()

IRs:
INTERNAL_DYNAMIC_CALL first()  "];
1->2;
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
last()

IRs:
INTERNAL_DYNAMIC_CALL last()  "];
}
// Function: 508.sol-Contract-currentAction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_52(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_53 = CONVERT 0 to bytes32
TMP_54(bool) = TMP_52 == TMP_53
CONDITION TMP_54"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
bytes4(0)

IRs:
TMP_55 = CONVERT 0 to bytes4
RETURN TMP_55"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
action

IRs:
RETURN action"];
}
// Function: 508.sol-Contract-decrease(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = keccak256()(_field,execID())

IRs:
TMP_155(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_156(bytes32) = SOLIDITY_CALL keccak256()(_field,TMP_155)
val(bytes32) := TMP_156(bytes32)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
val

IRs:
RETURN val"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
val

IRs:
RETURN val"];
}
// Function: 508.sol-Contract-emitted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_216(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_217 = CONVERT 0 to bytes32
TMP_218(bool) = TMP_216 == TMP_217
CONDITION TMP_218"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
num_emitted

IRs:
RETURN num_emitted"];
}
// Function: 508.sol-Contract-emitting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
action_req = EMITS

IRs:
action_req(bytes4) := EMITS(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEmitBuff,isEmitting)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEmitBuff,isEmitting)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validEmitBuff,isEmitting)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEmitBuff,isEmitting)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validEmitBuff,isEmitting)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEmitBuff,isEmitting)"];
7->1;
}
// Function: 508.sol-Contract-execID()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(exec_id != bytes32(0),Execution id overwritten, or not read)

IRs:
TMP_95 = CONVERT 0 to bytes32
TMP_96(bool) = exec_id != TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool,string)(TMP_96,Execution id overwritten, or not read)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
exec_id

IRs:
RETURN exec_id"];
}
// Function: 508.sol-Contract-expected()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
next

IRs:
RETURN next"];
}
// Function: 508.sol-Contract-freeMem()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
ptr

IRs:
RETURN ptr"];
}
// Function: 508.sol-Contract-increase(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = keccak256()(_field,execID())

IRs:
TMP_149(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_150(bytes32) = SOLIDITY_CALL keccak256()(_field,TMP_149)
val(bytes32) := TMP_150(bytes32)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
val

IRs:
RETURN val"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
val

IRs:
RETURN val"];
}
// Function: 508.sol-Contract-initialize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(freeMem() == 0x80,Memory allocated prior to execution)

IRs:
TMP_15(bytes32) = INTERNAL_CALL, Contract.freeMem()()
TMP_16(bool) = TMP_15 == 128
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,Memory allocated prior to execution)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(execID() != bytes32(0) && sender() != address(0))

IRs:
TMP_18(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_19 = CONVERT 0 to bytes32
TMP_20(bool) = TMP_18 != TMP_19
TMP_21(address) = INTERNAL_CALL, Contract.sender()()
TMP_22 = CONVERT 0 to address
TMP_23(bool) = TMP_21 != TMP_22
TMP_24(bool) = TMP_20 && TMP_23
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
}
// Function: 508.sol-Contract-isEmitting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentAction() != EMITS

IRs:
TMP_59(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_60(bool) = TMP_59 != EMITS
CONDITION TMP_60"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Invalid current action - expected EMITS)

IRs:
TMP_61(None) = SOLIDITY_CALL revert(string)(Invalid current action - expected EMITS)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 508.sol-Contract-isPaying()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentAction() != PAYS

IRs:
TMP_62(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_63(bool) = TMP_62 != PAYS
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Invalid current action - expected PAYS)

IRs:
TMP_64(None) = SOLIDITY_CALL revert(string)(Invalid current action - expected PAYS)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 508.sol-Contract-isStoring()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentAction() != STORES

IRs:
TMP_56(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_57(bool) = TMP_56 != STORES
CONDITION TMP_57"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Invalid current action - expected STORES)

IRs:
TMP_58(None) = SOLIDITY_CALL revert(string)(Invalid current action - expected STORES)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 508.sol-Contract-log(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 508.sol-Contract-log(bytes32[1],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 508.sol-Contract-log(bytes32[2],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 508.sol-Contract-log(bytes32[3],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 508.sol-Contract-log(bytes32[4],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 508.sol-Contract-none()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 508.sol-Contract-paid()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_222(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_223 = CONVERT 0 to bytes32
TMP_224(bool) = TMP_222 == TMP_223
CONDITION TMP_224"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
num_paid

IRs:
RETURN num_paid"];
}
// Function: 508.sol-Contract-pay(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_amount

IRs:
RETURN _amount"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validPayAmt,validPayDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayAmt,validPayDest)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validPayAmt,validPayDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayAmt,validPayDest)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validPayAmt,validPayDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayAmt,validPayDest)"];
7->1;
}
// Function: 508.sol-Contract-paying()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
action_req = PAYS

IRs:
action_req(bytes4) := PAYS(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validPayBuff,isPaying)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayBuff,isPaying)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validPayBuff,isPaying)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayBuff,isPaying)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validPayBuff,isPaying)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayBuff,isPaying)"];
7->1;
}
// Function: 508.sol-Contract-read(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
data = keccak256()(_location,execID())

IRs:
TMP_101(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_102(bytes32) = SOLIDITY_CALL keccak256()(_location,TMP_101)
data(bytes32) := TMP_102(bytes32)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
data

IRs:
RETURN data"];
}
// Function: 508.sol-Contract-sender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(addr != address(0),Sender address overwritten, or not read)

IRs:
TMP_98 = CONVERT 0 to address
TMP_99(bool) = addr != TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,Sender address overwritten, or not read)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
addr

IRs:
RETURN addr"];
}
// Function: 508.sol-Contract-set(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_field

IRs:
RETURN _field"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
7->1;
}
// Function: 508.sol-Contract-setFreeMem()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 508.sol-Contract-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
EXEC_PERMISSIONS = keccak256()(script_exec_permissions)

IRs:
TMP_225(bytes32) = SOLIDITY_CALL keccak256()(script_exec_permissions)
EXEC_PERMISSIONS(bytes32) := TMP_225(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
EMITS = bytes4(keccak256()(Emit((bytes32[],bytes)[])))

IRs:
TMP_226(bytes32) = SOLIDITY_CALL keccak256()(Emit((bytes32[],bytes)[]))
TMP_227 = CONVERT TMP_226 to bytes4
EMITS(bytes4) := TMP_227(bytes4)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
STORES = bytes4(keccak256()(Store(bytes32[])))

IRs:
TMP_228(bytes32) = SOLIDITY_CALL keccak256()(Store(bytes32[]))
TMP_229 = CONVERT TMP_228 to bytes4
STORES(bytes4) := TMP_229(bytes4)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PAYS = bytes4(keccak256()(Pay(bytes32[])))

IRs:
TMP_230(bytes32) = SOLIDITY_CALL keccak256()(Pay(bytes32[]))
TMP_231 = CONVERT TMP_230 to bytes4
PAYS(bytes4) := TMP_231(bytes4)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
THROWS = bytes4(keccak256()(Error(string)))

IRs:
TMP_232(bytes32) = SOLIDITY_CALL keccak256()(Error(string))
TMP_233 = CONVERT TMP_232 to bytes4
THROWS(bytes4) := TMP_233(bytes4)"];
}
// Function: 508.sol-Contract-startBuffer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 508.sol-Contract-stored()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_219(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_220 = CONVERT 0 to bytes32
TMP_221(bool) = TMP_219 == TMP_220
CONDITION TMP_221"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
num_stored

IRs:
RETURN num_stored"];
}
// Function: 508.sol-Contract-storing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
action_req = STORES

IRs:
action_req(bytes4) := STORES(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validStoreBuff,isStoring)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreBuff,isStoring)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreBuff,isStoring)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreBuff,isStoring)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreBuff,isStoring)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreBuff,isStoring)"];
7->1;
}
// Function: 508.sol-Contract-to(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
to(_field,bytes32(_val))

IRs:
TMP_143 = CONVERT _val to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_143)"];
}
// Function: 508.sol-Contract-to(bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_val

IRs:
CONDITION _val"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
to(_field,bytes32(1))

IRs:
TMP_145 = CONVERT 1 to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_145)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
to(_field,bytes32(0))

IRs:
TMP_147 = CONVERT 0 to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_147)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 508.sol-Contract-to(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
6->1;
}
// Function: 508.sol-Contract-to(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
to(_field,bytes32(_val))

IRs:
TMP_141 = CONVERT _val to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_141)"];
}
// Function: 508.sol-Contract-toAcc(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validPayDest,validPayAmt)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayDest,validPayAmt)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validPayDest,validPayAmt)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayDest,validPayAmt)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validPayDest,validPayAmt)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayDest,validPayAmt)"];
6->1;
}
// Function: 508.sol-Contract-validEmitBuff()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_75(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_76 = CONVERT 0 to bytes32
TMP_77(bool) = TMP_75 == TMP_76
CONDITION TMP_77"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startBuffer()

IRs:
INTERNAL_CALL, Contract.startBuffer()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
emitted() != 0 || currentAction() == EMITS

IRs:
TMP_79(uint256) = INTERNAL_CALL, Contract.emitted()()
TMP_80(bool) = TMP_79 != 0
TMP_81(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_82(bool) = TMP_81 == EMITS
TMP_83(bool) = TMP_80 || TMP_82
CONDITION TMP_83"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Duplicate request - emits)

IRs:
TMP_84(None) = SOLIDITY_CALL revert(string)(Duplicate request - emits)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 508.sol-Contract-validEvent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.EMIT_LOG

IRs:
TMP_125(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_6(Contract.NextFunction) -> NextFunction.EMIT_LOG
TMP_126(bool) = TMP_125 != REF_6
CONDITION TMP_126"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected event to be pushed)

IRs:
TMP_127(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected event to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isEmitting()

IRs:
INTERNAL_CALL, Contract.isEmitting()()"];
}
// Function: 508.sol-Contract-validPayAmt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.PAY_AMT

IRs:
TMP_121(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_5(Contract.NextFunction) -> NextFunction.PAY_AMT
TMP_122(bool) = TMP_121 != REF_5
CONDITION TMP_122"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected payment amount to be pushed)

IRs:
TMP_123(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected payment amount to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isPaying()

IRs:
INTERNAL_CALL, Contract.isPaying()()"];
}
// Function: 508.sol-Contract-validPayBuff()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_85(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_86 = CONVERT 0 to bytes32
TMP_87(bool) = TMP_85 == TMP_86
CONDITION TMP_87"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startBuffer()

IRs:
INTERNAL_CALL, Contract.startBuffer()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
paid() != 0 || currentAction() == PAYS

IRs:
TMP_89(uint256) = INTERNAL_CALL, Contract.paid()()
TMP_90(bool) = TMP_89 != 0
TMP_91(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_92(bool) = TMP_91 == PAYS
TMP_93(bool) = TMP_90 || TMP_92
CONDITION TMP_93"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Duplicate request - pays)

IRs:
TMP_94(None) = SOLIDITY_CALL revert(string)(Duplicate request - pays)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 508.sol-Contract-validPayDest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.PAY_DEST

IRs:
TMP_117(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_4(Contract.NextFunction) -> NextFunction.PAY_DEST
TMP_118(bool) = TMP_117 != REF_4
CONDITION TMP_118"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected payment destination to be pushed)

IRs:
TMP_119(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected payment destination to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isPaying()

IRs:
INTERNAL_CALL, Contract.isPaying()()"];
}
// Function: 508.sol-Contract-validState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
freeMem() < 0x180

IRs:
TMP_35(bytes32) = INTERNAL_CALL, Contract.freeMem()()
TMP_36(bool) = TMP_35 < 384
CONDITION TMP_36"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Expected Contract.execute())

IRs:
TMP_37(None) = SOLIDITY_CALL revert(string)(Expected Contract.execute())"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
buffPtr() != 0 && buffPtr() < 0x180

IRs:
TMP_38(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_39(bool) = TMP_38 != 0
TMP_40(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_41(bool) = TMP_40 < 384
TMP_42(bool) = TMP_39 && TMP_41
CONDITION TMP_42"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Invalid buffer pointer)

IRs:
TMP_43(None) = SOLIDITY_CALL revert(string)(Invalid buffer pointer)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(execID() != bytes32(0) && sender() != address(0))

IRs:
TMP_44(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_45 = CONVERT 0 to bytes32
TMP_46(bool) = TMP_44 != TMP_45
TMP_47(address) = INTERNAL_CALL, Contract.sender()()
TMP_48 = CONVERT 0 to address
TMP_49(bool) = TMP_47 != TMP_48
TMP_50(bool) = TMP_46 && TMP_49
TMP_51(None) = SOLIDITY_CALL assert(bool)(TMP_50)"];
}
// Function: 508.sol-Contract-validStoreBuff()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_65(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_66 = CONVERT 0 to bytes32
TMP_67(bool) = TMP_65 == TMP_66
CONDITION TMP_67"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startBuffer()

IRs:
INTERNAL_CALL, Contract.startBuffer()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
stored() != 0 || currentAction() == STORES

IRs:
TMP_69(uint256) = INTERNAL_CALL, Contract.stored()()
TMP_70(bool) = TMP_69 != 0
TMP_71(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_72(bool) = TMP_71 == STORES
TMP_73(bool) = TMP_70 || TMP_72
CONDITION TMP_73"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Duplicate request - stores)

IRs:
TMP_74(None) = SOLIDITY_CALL revert(string)(Duplicate request - stores)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 508.sol-Contract-validStoreDest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.STORE_DEST

IRs:
TMP_103(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_0(Contract.NextFunction) -> NextFunction.STORE_DEST
TMP_104(bool) = TMP_103 != REF_0
CONDITION TMP_104"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected storage destination to be pushed)

IRs:
TMP_105(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected storage destination to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isStoring()

IRs:
INTERNAL_CALL, Contract.isStoring()()"];
}
// Function: 508.sol-Contract-validStoreVal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.VAL_SET && expected() != NextFunction.VAL_INC && expected() != NextFunction.VAL_DEC

IRs:
TMP_107(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_1(Contract.NextFunction) -> NextFunction.VAL_SET
TMP_108(bool) = TMP_107 != REF_1
TMP_109(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_2(Contract.NextFunction) -> NextFunction.VAL_INC
TMP_110(bool) = TMP_109 != REF_2
TMP_111(bool) = TMP_108 && TMP_110
TMP_112(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_3(Contract.NextFunction) -> NextFunction.VAL_DEC
TMP_113(bool) = TMP_112 != REF_3
TMP_114(bool) = TMP_111 && TMP_113
CONDITION TMP_114"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected storage value to be pushed)

IRs:
TMP_115(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected storage value to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isStoring()

IRs:
INTERNAL_CALL, Contract.isStoring()()"];
}
// Function: 508.sol-Provider-appBase(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_app,keccak256()(bytes32(Contract.sender()),app_base))

IRs:
TMP_243(address) = LIBRARY_CALL, dest:Contract, function:Contract.sender(), arguments:[] 
TMP_244 = CONVERT TMP_243 to bytes32
TMP_245(bytes32) = SOLIDITY_CALL keccak256()(TMP_244,app_base)
TMP_246(bytes32) = SOLIDITY_CALL keccak256()(_app,TMP_245)
RETURN TMP_246"];
}
// Function: 508.sol-Provider-appIndex()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(index)

IRs:
TMP_236(bytes32) = SOLIDITY_CALL keccak256()(index)
RETURN TMP_236"];
}
// Function: 508.sol-Provider-appSelectors(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_selector,implementation)

IRs:
TMP_239(bytes32) = SOLIDITY_CALL keccak256()(_selector,implementation)
RETURN TMP_239"];
}
// Function: 508.sol-Provider-appVersionList(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(versions,appBase(_app))

IRs:
TMP_247(bytes32) = INTERNAL_CALL, Provider.appBase(bytes32)(_app)
TMP_248(bytes32) = SOLIDITY_CALL keccak256()(versions,TMP_247)
RETURN TMP_248"];
}
// Function: 508.sol-Provider-appVersionListAt(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bytes32((32 * _index) + uint256(appVersionList(_app)))

IRs:
TMP_259(uint256) = 32 * _index
TMP_260(bytes32) = INTERNAL_CALL, Provider.appVersionList(bytes32)(_app)
TMP_261 = CONVERT TMP_260 to uint256
TMP_262(uint256) = TMP_259 + TMP_261
TMP_263 = CONVERT TMP_262 to bytes32
RETURN TMP_263"];
}
// Function: 508.sol-Provider-execPermissions(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_exec,keccak256()(script_exec_permissions))

IRs:
TMP_237(bytes32) = SOLIDITY_CALL keccak256()(script_exec_permissions)
TMP_238(bytes32) = SOLIDITY_CALL keccak256()(_exec,TMP_237)
RETURN TMP_238"];
}
// Function: 508.sol-Provider-getLatestVersion(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = uint256(registryRead(appVersionList(_app),_registry_id))

IRs:
TMP_461(bytes32) = INTERNAL_CALL, Provider.appVersionList(bytes32)(_app)
TMP_462(bytes32) = INTERNAL_CALL, Provider.registryRead(bytes32,bytes32)(TMP_461,_registry_id)
TMP_463 = CONVERT TMP_462 to uint256
length(uint256) := TMP_463(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
registryRead(appVersionListAt(_app,length),_registry_id)

IRs:
TMP_464(bytes32) = INTERNAL_CALL, Provider.appVersionListAt(bytes32,uint256)(_app,length)
TMP_465(bytes32) = INTERNAL_CALL, Provider.registryRead(bytes32,bytes32)(TMP_464,_registry_id)
RETURN TMP_465"];
}
// Function: 508.sol-Provider-getVersionImplementations(bytes32,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = uint256(registryRead(versionAddresses(_app,_version),_registry_id))

IRs:
TMP_469(bytes32) = INTERNAL_CALL, Provider.versionAddresses(bytes32,bytes32)(_app,_version)
TMP_470(bytes32) = INTERNAL_CALL, Provider.registryRead(bytes32,bytes32)(TMP_469,_registry_id)
TMP_471 = CONVERT TMP_470 to uint256
length(uint256) := TMP_471(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
impl = new address[](length)

IRs:
TMP_473(address[])  = new address[](length)
impl(address[]) = ['TMP_473(address[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->10;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < length

IRs:
TMP_474(bool) = i < length
CONDITION TMP_474"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
location = bytes32(32 * (i + 1) + uint256(versionAddresses(_app,_version)))

IRs:
TMP_475(uint256) = i + 1
TMP_476(uint256) = 32 * TMP_475
TMP_477(bytes32) = INTERNAL_CALL, Provider.versionAddresses(bytes32,bytes32)(_app,_version)
TMP_478 = CONVERT TMP_477 to uint256
TMP_479(uint256) = TMP_476 + TMP_478
TMP_480 = CONVERT TMP_479 to bytes32
location(bytes32) := TMP_480(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
impl[i] = address(registryRead(location,_registry_id))

IRs:
REF_112(address) -> impl[i]
TMP_481(bytes32) = INTERNAL_CALL, Provider.registryRead(bytes32,bytes32)(location,_registry_id)
TMP_482 = CONVERT TMP_481 to address
REF_112(address) (->impl) := TMP_482(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_483(uint256) := i(uint256)
i(uint256) = i + 1"];
9->6;
10[label="Node Type: RETURN 10

EXPRESSION:
impl

IRs:
RETURN impl"];
}
// Function: 508.sol-Provider-getVersionIndex(bytes32,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(registryRead(versionIndex(_app,_version),_registry_id))

IRs:
TMP_466(bytes32) = INTERNAL_CALL, Provider.versionIndex(bytes32,bytes32)(_app,_version)
TMP_467(bytes32) = INTERNAL_CALL, Provider.registryRead(bytes32,bytes32)(TMP_466,_registry_id)
TMP_468 = CONVERT TMP_467 to address
RETURN TMP_468"];
}
// Function: 508.sol-Provider-getVersionSelectors(bytes32,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = uint256(registryRead(versionSelectors(_app,_version),_registry_id))

IRs:
TMP_484(bytes32) = INTERNAL_CALL, Provider.versionSelectors(bytes32,bytes32)(_app,_version)
TMP_485(bytes32) = INTERNAL_CALL, Provider.registryRead(bytes32,bytes32)(TMP_484,_registry_id)
TMP_486 = CONVERT TMP_485 to uint256
length(uint256) := TMP_486(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sels = new bytes4[](length)

IRs:
TMP_488(bytes4[])  = new bytes4[](length)
sels(bytes4[]) = ['TMP_488(bytes4[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->10;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < length

IRs:
TMP_489(bool) = i < length
CONDITION TMP_489"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
location = bytes32(32 * (i + 1) + uint256(versionSelectors(_app,_version)))

IRs:
TMP_490(uint256) = i + 1
TMP_491(uint256) = 32 * TMP_490
TMP_492(bytes32) = INTERNAL_CALL, Provider.versionSelectors(bytes32,bytes32)(_app,_version)
TMP_493 = CONVERT TMP_492 to uint256
TMP_494(uint256) = TMP_491 + TMP_493
TMP_495 = CONVERT TMP_494 to bytes32
location(bytes32) := TMP_495(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
sels[i] = bytes4(registryRead(location,_registry_id))

IRs:
REF_113(bytes4) -> sels[i]
TMP_496(bytes32) = INTERNAL_CALL, Provider.registryRead(bytes32,bytes32)(location,_registry_id)
TMP_497 = CONVERT TMP_496 to bytes4
REF_113(bytes4) (->sels) := TMP_497(bytes4)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_498(uint256) := i(uint256)
i(uint256) = i + 1"];
9->6;
10[label="Node Type: RETURN 10

EXPRESSION:
sels

IRs:
RETURN sels"];
}
// Function: 508.sol-Provider-previousVersion(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(previous version,versionBase(_app,_version))

IRs:
TMP_257(bytes32) = INTERNAL_CALL, Provider.versionBase(bytes32,bytes32)(_app,_version)
TMP_258(bytes32) = SOLIDITY_CALL keccak256()(previous version,TMP_257)
RETURN TMP_258"];
}
// Function: 508.sol-Provider-registerApp(bytes32,address,bytes4[],address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Contract.authorize(msg.sender)

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.authorize(address), arguments:['msg.sender'] "];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
Contract.read(appBase(_app)) != bytes32(0)

IRs:
TMP_265(bytes32) = INTERNAL_CALL, Provider.appBase(bytes32)(_app)
TMP_266(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.read(bytes32), arguments:['TMP_265'] 
TMP_267 = CONVERT 0 to bytes32
TMP_268(bool) = TMP_266 != TMP_267
CONDITION TMP_268"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert(string)(app is already registered)

IRs:
TMP_269(None) = SOLIDITY_CALL revert(string)(app is already registered)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_selectors.length != _implementations.length || _selectors.length == 0

IRs:
REF_17 -> LENGTH _selectors
REF_18 -> LENGTH _implementations
TMP_270(bool) = REF_17 != REF_18
REF_19 -> LENGTH _selectors
TMP_271(bool) = REF_19 == 0
TMP_272(bool) = TMP_270 || TMP_271
CONDITION TMP_272"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert(string)(invalid input arrays)

IRs:
TMP_273(None) = SOLIDITY_CALL revert(string)(invalid input arrays)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Contract.storing()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.storing(), arguments:[] "];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
num_registered_apps = uint256(Contract.read(registeredApps()))

IRs:
TMP_275(bytes32) = INTERNAL_CALL, Provider.registeredApps()()
TMP_276(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.read(bytes32), arguments:['TMP_275'] 
TMP_277 = CONVERT TMP_276 to uint256
num_registered_apps(uint256) := TMP_277(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Contract.increase(registeredApps()).by(uint256(1))

IRs:
TMP_278(bytes32) = INTERNAL_CALL, Provider.registeredApps()()
TMP_279(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.increase(bytes32), arguments:['TMP_278'] 
TMP_280 = CONVERT 1 to uint256
LIBRARY_CALL, dest:Contract, function:Contract.by(bytes32,uint256), arguments:['TMP_279', 'TMP_280'] "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Contract.set(bytes32(32 * (num_registered_apps + 1) + uint256(registeredApps()))).to(_app)

IRs:
TMP_282(uint256) = num_registered_apps + 1
TMP_283(uint256) = 32 * TMP_282
TMP_284(bytes32) = INTERNAL_CALL, Provider.registeredApps()()
TMP_285 = CONVERT TMP_284 to uint256
TMP_286(uint256) = TMP_283 + TMP_285
TMP_287 = CONVERT TMP_286 to bytes32
TMP_288(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_287'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_288', '_app'] "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Contract.set(appBase(_app)).to(_app)

IRs:
TMP_290(bytes32) = INTERNAL_CALL, Provider.appBase(bytes32)(_app)
TMP_291(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_290'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_291', '_app'] "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Contract.set(versionBase(_app,_app)).to(_app)

IRs:
TMP_293(bytes32) = INTERNAL_CALL, Provider.versionBase(bytes32,bytes32)(_app,_app)
TMP_294(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_293'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_294', '_app'] "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Contract.set(appVersionList(_app)).to(uint256(1))

IRs:
TMP_296(bytes32) = INTERNAL_CALL, Provider.appVersionList(bytes32)(_app)
TMP_297(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_296'] 
TMP_298 = CONVERT 1 to uint256
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_297', 'TMP_298'] "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Contract.set(bytes32(32 + uint256(appVersionList(_app)))).to(_app)

IRs:
TMP_300(bytes32) = INTERNAL_CALL, Provider.appVersionList(bytes32)(_app)
TMP_301 = CONVERT TMP_300 to uint256
TMP_302(uint256) = 32 + TMP_301
TMP_303 = CONVERT TMP_302 to bytes32
TMP_304(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_303'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_304', '_app'] "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Contract.set(versionIndex(_app,_app)).to(_index)

IRs:
TMP_306(bytes32) = INTERNAL_CALL, Provider.versionIndex(bytes32,bytes32)(_app,_app)
TMP_307(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_306'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_307', '_index'] "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Contract.set(versionSelectors(_app,_app)).to(_selectors.length)

IRs:
TMP_309(bytes32) = INTERNAL_CALL, Provider.versionSelectors(bytes32,bytes32)(_app,_app)
TMP_310(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_309'] 
REF_38 -> LENGTH _selectors
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_310', 'REF_38'] "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Contract.set(versionAddresses(_app,_app)).to(_implementations.length)

IRs:
TMP_312(bytes32) = INTERNAL_CALL, Provider.versionAddresses(bytes32,bytes32)(_app,_app)
TMP_313(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_312'] 
REF_41 -> LENGTH _implementations
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_313', 'REF_41'] "];
18->21;
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->26;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
i < _selectors.length

IRs:
REF_42 -> LENGTH _selectors
TMP_315(bool) = i < REF_42
CONDITION TMP_315"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Contract.set(bytes32(32 * (i + 1) + uint256(versionSelectors(_app,_app)))).to(_selectors[i])

IRs:
TMP_316(uint256) = i + 1
TMP_317(uint256) = 32 * TMP_316
TMP_318(bytes32) = INTERNAL_CALL, Provider.versionSelectors(bytes32,bytes32)(_app,_app)
TMP_319 = CONVERT TMP_318 to uint256
TMP_320(uint256) = TMP_317 + TMP_319
TMP_321 = CONVERT TMP_320 to bytes32
TMP_322(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_321'] 
REF_45(bytes4) -> _selectors[i]
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_322', 'REF_45'] "];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
Contract.set(bytes32(32 * (i + 1) + uint256(versionAddresses(_app,_app)))).to(_implementations[i])

IRs:
TMP_324(uint256) = i + 1
TMP_325(uint256) = 32 * TMP_324
TMP_326(bytes32) = INTERNAL_CALL, Provider.versionAddresses(bytes32,bytes32)(_app,_app)
TMP_327 = CONVERT TMP_326 to uint256
TMP_328(uint256) = TMP_325 + TMP_327
TMP_329 = CONVERT TMP_328 to bytes32
TMP_330(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_329'] 
REF_48(address) -> _implementations[i]
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_330', 'REF_48'] "];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i ++

IRs:
TMP_332(uint256) := i(uint256)
i(uint256) = i + 1"];
25->22;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
Contract.set(previousVersion(_app,_app)).to(uint256(0))

IRs:
TMP_333(bytes32) = INTERNAL_CALL, Provider.previousVersion(bytes32,bytes32)(_app,_app)
TMP_334(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_333'] 
TMP_335 = CONVERT 0 to uint256
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_334', 'TMP_335'] "];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
Contract.commit()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.commit(), arguments:[] "];
}
// Function: 508.sol-Provider-registerAppVersion(bytes32,bytes32,address,bytes4[],address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Contract.authorize(msg.sender)

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.authorize(address), arguments:['msg.sender'] "];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
Contract.read(appBase(_app)) == bytes32(0)

IRs:
TMP_339(bytes32) = INTERNAL_CALL, Provider.appBase(bytes32)(_app)
TMP_340(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.read(bytes32), arguments:['TMP_339'] 
TMP_341 = CONVERT 0 to bytes32
TMP_342(bool) = TMP_340 == TMP_341
CONDITION TMP_342"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert(string)(App has not been registered)

IRs:
TMP_343(None) = SOLIDITY_CALL revert(string)(App has not been registered)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
Contract.read(versionBase(_app,_version)) != bytes32(0)

IRs:
TMP_344(bytes32) = INTERNAL_CALL, Provider.versionBase(bytes32,bytes32)(_app,_version)
TMP_345(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.read(bytes32), arguments:['TMP_344'] 
TMP_346 = CONVERT 0 to bytes32
TMP_347(bool) = TMP_345 != TMP_346
CONDITION TMP_347"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert(string)(Version already exists)

IRs:
TMP_348(None) = SOLIDITY_CALL revert(string)(Version already exists)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_selectors.length != _implementations.length || _selectors.length == 0

IRs:
REF_55 -> LENGTH _selectors
REF_56 -> LENGTH _implementations
TMP_349(bool) = REF_55 != REF_56
REF_57 -> LENGTH _selectors
TMP_350(bool) = REF_57 == 0
TMP_351(bool) = TMP_349 || TMP_350
CONDITION TMP_351"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert(string)(Invalid input array lengths)

IRs:
TMP_352(None) = SOLIDITY_CALL revert(string)(Invalid input array lengths)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Contract.storing()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.storing(), arguments:[] "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Contract.set(versionBase(_app,_version)).to(_version)

IRs:
TMP_354(bytes32) = INTERNAL_CALL, Provider.versionBase(bytes32,bytes32)(_app,_version)
TMP_355(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_354'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_355', '_version'] "];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
num_versions = uint256(Contract.read(appVersionList(_app)))

IRs:
TMP_357(bytes32) = INTERNAL_CALL, Provider.appVersionList(bytes32)(_app)
TMP_358(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.read(bytes32), arguments:['TMP_357'] 
TMP_359 = CONVERT TMP_358 to uint256
num_versions(uint256) := TMP_359(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Contract.set(appVersionListAt(_app,(num_versions + 1))).to(_version)

IRs:
TMP_360(uint256) = num_versions + 1
TMP_361(bytes32) = INTERNAL_CALL, Provider.appVersionListAt(bytes32,uint256)(_app,TMP_360)
TMP_362(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_361'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_362', '_version'] "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Contract.set(appVersionList(_app)).to(num_versions + 1)

IRs:
TMP_364(bytes32) = INTERNAL_CALL, Provider.appVersionList(bytes32)(_app)
TMP_365(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_364'] 
TMP_366(uint256) = num_versions + 1
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_365', 'TMP_366'] "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Contract.set(versionIndex(_app,_version)).to(_index)

IRs:
TMP_368(bytes32) = INTERNAL_CALL, Provider.versionIndex(bytes32,bytes32)(_app,_version)
TMP_369(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_368'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_369', '_index'] "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Contract.set(versionSelectors(_app,_version)).to(_selectors.length)

IRs:
TMP_371(bytes32) = INTERNAL_CALL, Provider.versionSelectors(bytes32,bytes32)(_app,_version)
TMP_372(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_371'] 
REF_70 -> LENGTH _selectors
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_372', 'REF_70'] "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Contract.set(versionAddresses(_app,_version)).to(_implementations.length)

IRs:
TMP_374(bytes32) = INTERNAL_CALL, Provider.versionAddresses(bytes32,bytes32)(_app,_version)
TMP_375(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_374'] 
REF_73 -> LENGTH _implementations
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_375', 'REF_73'] "];
18->21;
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->26;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
i < _selectors.length

IRs:
REF_74 -> LENGTH _selectors
TMP_377(bool) = i < REF_74
CONDITION TMP_377"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Contract.set(bytes32(32 * (i + 1) + uint256(versionSelectors(_app,_version)))).to(_selectors[i])

IRs:
TMP_378(uint256) = i + 1
TMP_379(uint256) = 32 * TMP_378
TMP_380(bytes32) = INTERNAL_CALL, Provider.versionSelectors(bytes32,bytes32)(_app,_version)
TMP_381 = CONVERT TMP_380 to uint256
TMP_382(uint256) = TMP_379 + TMP_381
TMP_383 = CONVERT TMP_382 to bytes32
TMP_384(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_383'] 
REF_77(bytes4) -> _selectors[i]
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_384', 'REF_77'] "];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
Contract.set(bytes32(32 * (i + 1) + uint256(versionAddresses(_app,_version)))).to(_implementations[i])

IRs:
TMP_386(uint256) = i + 1
TMP_387(uint256) = 32 * TMP_386
TMP_388(bytes32) = INTERNAL_CALL, Provider.versionAddresses(bytes32,bytes32)(_app,_version)
TMP_389 = CONVERT TMP_388 to uint256
TMP_390(uint256) = TMP_387 + TMP_389
TMP_391 = CONVERT TMP_390 to bytes32
TMP_392(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_391'] 
REF_80(address) -> _implementations[i]
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_392', 'REF_80'] "];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i ++

IRs:
TMP_394(uint256) := i(uint256)
i(uint256) = i + 1"];
25->22;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
prev_version = Contract.read(bytes32(32 * num_versions + uint256(appVersionList(_app))))

IRs:
TMP_395(uint256) = 32 * num_versions
TMP_396(bytes32) = INTERNAL_CALL, Provider.appVersionList(bytes32)(_app)
TMP_397 = CONVERT TMP_396 to uint256
TMP_398(uint256) = TMP_395 + TMP_397
TMP_399 = CONVERT TMP_398 to bytes32
TMP_400(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.read(bytes32), arguments:['TMP_399'] 
prev_version(bytes32) := TMP_400(bytes32)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
Contract.set(previousVersion(_app,_version)).to(prev_version)

IRs:
TMP_401(bytes32) = INTERNAL_CALL, Provider.previousVersion(bytes32,bytes32)(_app,_version)
TMP_402(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_401'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_402', 'prev_version'] "];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
Contract.commit()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.commit(), arguments:[] "];
}
// Function: 508.sol-Provider-registeredApps()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(bytes32(Contract.sender()),app_list)

IRs:
TMP_240(address) = LIBRARY_CALL, dest:Contract, function:Contract.sender(), arguments:[] 
TMP_241 = CONVERT TMP_240 to bytes32
TMP_242(bytes32) = SOLIDITY_CALL keccak256()(TMP_241,app_list)
RETURN TMP_242"];
}
// Function: 508.sol-Provider-registryRead(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_location = keccak256()(_location,_registry_id)

IRs:
TMP_460(bytes32) = SOLIDITY_CALL keccak256()(_location,_registry_id)
_location(bytes32) := TMP_460(bytes32)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
value

IRs:
RETURN value"];
}
// Function: 508.sol-Provider-updateExec(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Contract.authorize(msg.sender)

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.authorize(address), arguments:['msg.sender'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_new_exec_addr != 0,invalid replacement)

IRs:
TMP_450(bool) = _new_exec_addr != 0
TMP_451(None) = SOLIDITY_CALL require(bool,string)(TMP_450,invalid replacement)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Contract.storing()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.storing(), arguments:[] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Contract.set(execPermissions(msg.sender)).to(false)

IRs:
TMP_453(bytes32) = INTERNAL_CALL, Provider.execPermissions(address)(msg.sender)
TMP_454(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_453'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bool), arguments:['TMP_454', 'False'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Contract.set(execPermissions(_new_exec_addr)).to(true)

IRs:
TMP_456(bytes32) = INTERNAL_CALL, Provider.execPermissions(address)(_new_exec_addr)
TMP_457(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_456'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bool), arguments:['TMP_457', 'True'] "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Contract.commit()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.commit(), arguments:[] "];
}
// Function: 508.sol-Provider-updateInstance(bytes32,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Contract.authorize(msg.sender)

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.authorize(address), arguments:['msg.sender'] "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_app_name != 0 && _current_version != 0 && _registry_id != 0,invalid input)

IRs:
TMP_406(bool) = _app_name != 0
TMP_407(bool) = _current_version != 0
TMP_408(bool) = TMP_406 && TMP_407
TMP_409(bool) = _registry_id != 0
TMP_410(bool) = TMP_408 && TMP_409
TMP_411(None) = SOLIDITY_CALL require(bool,string)(TMP_410,invalid input)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
current_selectors = getVersionSelectors(_app_name,_current_version,_registry_id)

IRs:
TMP_412(bytes4[]) = INTERNAL_CALL, Provider.getVersionSelectors(bytes32,bytes32,bytes32)(_app_name,_current_version,_registry_id)
current_selectors(bytes4[]) = ['TMP_412(bytes4[])']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(current_selectors.length != 0,invalid current version)

IRs:
REF_86 -> LENGTH current_selectors
TMP_413(bool) = REF_86 != 0
TMP_414(None) = SOLIDITY_CALL require(bool,string)(TMP_413,invalid current version)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
latest_version = getLatestVersion(_app_name,_registry_id)

IRs:
TMP_415(bytes32) = INTERNAL_CALL, Provider.getLatestVersion(bytes32,bytes32)(_app_name,_registry_id)
latest_version(bytes32) := TMP_415(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(latest_version != _current_version,current version is already latest)

IRs:
TMP_416(bool) = latest_version != _current_version
TMP_417(None) = SOLIDITY_CALL require(bool,string)(TMP_416,current version is already latest)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(latest_version != 0,invalid latest version)

IRs:
TMP_418(bool) = latest_version != 0
TMP_419(None) = SOLIDITY_CALL require(bool,string)(TMP_418,invalid latest version)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
latest_idx = getVersionIndex(_app_name,latest_version,_registry_id)

IRs:
TMP_420(address) = INTERNAL_CALL, Provider.getVersionIndex(bytes32,bytes32,bytes32)(_app_name,latest_version,_registry_id)
latest_idx(address) := TMP_420(address)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
latest_selectors = getVersionSelectors(_app_name,latest_version,_registry_id)

IRs:
TMP_421(bytes4[]) = INTERNAL_CALL, Provider.getVersionSelectors(bytes32,bytes32,bytes32)(_app_name,latest_version,_registry_id)
latest_selectors(bytes4[]) = ['TMP_421(bytes4[])']"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
latest_impl = getVersionImplementations(_app_name,latest_version,_registry_id)

IRs:
TMP_422(address[]) = INTERNAL_CALL, Provider.getVersionImplementations(bytes32,bytes32,bytes32)(_app_name,latest_version,_registry_id)
latest_impl(address[]) = ['TMP_422(address[])']"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool,string)(latest_idx != 0,invalid version idx address)

IRs:
TMP_423(bool) = latest_idx != 0
TMP_424(None) = SOLIDITY_CALL require(bool,string)(TMP_423,invalid version idx address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(latest_selectors.length != 0 && latest_selectors.length == latest_impl.length,invalid implementation specification)

IRs:
REF_87 -> LENGTH latest_selectors
TMP_425(bool) = REF_87 != 0
REF_88 -> LENGTH latest_selectors
REF_89 -> LENGTH latest_impl
TMP_426(bool) = REF_88 == REF_89
TMP_427(bool) = TMP_425 && TMP_426
TMP_428(None) = SOLIDITY_CALL require(bool,string)(TMP_427,invalid implementation specification)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Contract.storing()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.storing(), arguments:[] "];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < current_selectors.length

IRs:
REF_91 -> LENGTH current_selectors
TMP_430(bool) = i < REF_91
CONDITION TMP_430"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Contract.set(appSelectors(current_selectors[i])).to(address(0))

IRs:
REF_93(bytes4) -> current_selectors[i]
TMP_431(bytes32) = INTERNAL_CALL, Provider.appSelectors(bytes4)(REF_93)
TMP_432(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_431'] 
TMP_433 = CONVERT 0 to address
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_432', 'TMP_433'] "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_435(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Contract.set(appIndex()).to(latest_idx)

IRs:
TMP_436(bytes32) = INTERNAL_CALL, Provider.appIndex()()
TMP_437(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_436'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_437', 'latest_idx'] "];
20->23;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->28;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < latest_selectors.length

IRs:
REF_97 -> LENGTH latest_selectors
TMP_439(bool) = i < REF_97
CONDITION TMP_439"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
require(bool,string)(latest_selectors[i] != 0 && latest_impl[i] != 0,invalid input - expected nonzero implementation)

IRs:
REF_98(bytes4) -> latest_selectors[i]
TMP_440(bool) = REF_98 != 0
REF_99(address) -> latest_impl[i]
TMP_441(bool) = REF_99 != 0
TMP_442(bool) = TMP_440 && TMP_441
TMP_443(None) = SOLIDITY_CALL require(bool,string)(TMP_442,invalid input - expected nonzero implementation)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
Contract.set(appSelectors(latest_selectors[i])).to(latest_impl[i])

IRs:
REF_101(bytes4) -> latest_selectors[i]
TMP_444(bytes32) = INTERNAL_CALL, Provider.appSelectors(bytes4)(REF_101)
TMP_445(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_444'] 
REF_103(address) -> latest_impl[i]
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_445', 'REF_103'] "];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_447(uint256) := i(uint256)
i(uint256) = i + 1"];
27->24;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
Contract.commit()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.commit(), arguments:[] "];
}
// Function: 508.sol-Provider-versionAddresses(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(addresses,versionBase(_app,_version))

IRs:
TMP_255(bytes32) = INTERNAL_CALL, Provider.versionBase(bytes32,bytes32)(_app,_version)
TMP_256(bytes32) = SOLIDITY_CALL keccak256()(addresses,TMP_255)
RETURN TMP_256"];
}
// Function: 508.sol-Provider-versionBase(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_version,version,appBase(_app))

IRs:
TMP_249(bytes32) = INTERNAL_CALL, Provider.appBase(bytes32)(_app)
TMP_250(bytes32) = SOLIDITY_CALL keccak256()(_version,version,TMP_249)
RETURN TMP_250"];
}
// Function: 508.sol-Provider-versionIndex(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(index,versionBase(_app,_version))

IRs:
TMP_251(bytes32) = INTERNAL_CALL, Provider.versionBase(bytes32,bytes32)(_app,_version)
TMP_252(bytes32) = SOLIDITY_CALL keccak256()(index,TMP_251)
RETURN TMP_252"];
}
// Function: 508.sol-Provider-versionSelectors(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(selectors,versionBase(_app,_version))

IRs:
TMP_253(bytes32) = INTERNAL_CALL, Provider.versionBase(bytes32,bytes32)(_app,_version)
TMP_254(bytes32) = SOLIDITY_CALL keccak256()(selectors,TMP_253)
RETURN TMP_254"];
}
// Function: 508.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,Overflow - Addition)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,Overflow - Addition)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 508.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 508.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,Overflow - Multiplication)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,Overflow - Multiplication)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 508.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,Underflow - Subtraction)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,Underflow - Subtraction)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
