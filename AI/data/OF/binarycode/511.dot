digraph G {
// Function: 511.sol-OceanTokenTransferManager-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 511.sol-OceanTokenTransferManager-addAddressToWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
! whitelist[addr]

IRs:
REF_9(bool) -> whitelist[addr]
TMP_28 = UnaryType.BANG REF_9 
CONDITION TMP_28"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[addr] = true

IRs:
REF_10(bool) -> whitelist[addr]
REF_10(bool) (->whitelist) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WhitelistedAddressAdded(addr)

IRs:
Emit WhitelistedAddressAdded(addr)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-OceanTokenTransferManager-addAddressesToWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < addrs.length

IRs:
REF_11 -> LENGTH addrs
TMP_31(bool) = i < REF_11
CONDITION TMP_31"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
addAddressToWhitelist(addrs[i])

IRs:
REF_12(address) -> addrs[i]
TMP_32(bool) = INTERNAL_CALL, Whitelist.addAddressToWhitelist(address)(REF_12)
CONDITION TMP_32"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_33(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->3;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-OceanTokenTransferManager-canTransferFrom(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
whitelist[_from] == true || whitelist[_to] == true

IRs:
REF_17(bool) -> whitelist[_from]
TMP_46(bool) = REF_17 == True
REF_18(bool) -> whitelist[_to]
TMP_47(bool) = REF_18 == True
TMP_48(bool) = TMP_46 || TMP_47
CONDITION TMP_48"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-OceanTokenTransferManager-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_50(bool) = msg.sender == owner
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 511.sol-OceanTokenTransferManager-onlyWhitelisted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(whitelist[msg.sender])

IRs:
REF_19(bool) -> whitelist[msg.sender]
TMP_49(None) = SOLIDITY_CALL require(bool)(REF_19)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 511.sol-OceanTokenTransferManager-removeAddressFromWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
whitelist[addr]

IRs:
REF_13(bool) -> whitelist[addr]
CONDITION REF_13"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[addr] = false

IRs:
REF_14(bool) -> whitelist[addr]
REF_14(bool) (->whitelist) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WhitelistedAddressRemoved(addr)

IRs:
Emit WhitelistedAddressRemoved(addr)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-OceanTokenTransferManager-removeAddressesFromWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < addrs.length

IRs:
REF_15 -> LENGTH addrs
TMP_37(bool) = i < REF_15
CONDITION TMP_37"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
removeAddressFromWhitelist(addrs[i])

IRs:
REF_16(address) -> addrs[i]
TMP_38(bool) = INTERNAL_CALL, Whitelist.removeAddressFromWhitelist(address)(REF_16)
CONDITION TMP_38"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_39(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->3;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-OceanTokenTransferManager-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = newOwner != TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 511.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 511.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 511.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 511.sol-Whitelist-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 511.sol-Whitelist-addAddressToWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
! whitelist[addr]

IRs:
REF_0(bool) -> whitelist[addr]
TMP_12 = UnaryType.BANG REF_0 
CONDITION TMP_12"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[addr] = true

IRs:
REF_1(bool) -> whitelist[addr]
REF_1(bool) (->whitelist) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WhitelistedAddressAdded(addr)

IRs:
Emit WhitelistedAddressAdded(addr)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-Whitelist-addAddressesToWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < addrs.length

IRs:
REF_2 -> LENGTH addrs
TMP_15(bool) = i < REF_2
CONDITION TMP_15"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
addAddressToWhitelist(addrs[i])

IRs:
REF_3(address) -> addrs[i]
TMP_16(bool) = INTERNAL_CALL, Whitelist.addAddressToWhitelist(address)(REF_3)
CONDITION TMP_16"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_17(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->3;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-Whitelist-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_25(bool) = msg.sender == owner
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 511.sol-Whitelist-onlyWhitelisted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(whitelist[msg.sender])

IRs:
REF_8(bool) -> whitelist[msg.sender]
TMP_27(None) = SOLIDITY_CALL require(bool)(REF_8)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 511.sol-Whitelist-removeAddressFromWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
whitelist[addr]

IRs:
REF_4(bool) -> whitelist[addr]
CONDITION REF_4"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[addr] = false

IRs:
REF_5(bool) -> whitelist[addr]
REF_5(bool) (->whitelist) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WhitelistedAddressRemoved(addr)

IRs:
Emit WhitelistedAddressRemoved(addr)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-Whitelist-removeAddressesFromWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < addrs.length

IRs:
REF_6 -> LENGTH addrs
TMP_21(bool) = i < REF_6
CONDITION TMP_21"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
removeAddressFromWhitelist(addrs[i])

IRs:
REF_7(address) -> addrs[i]
TMP_22(bool) = INTERNAL_CALL, Whitelist.removeAddressFromWhitelist(address)(REF_7)
CONDITION TMP_22"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->3;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 511.sol-Whitelist-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
