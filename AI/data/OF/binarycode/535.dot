digraph G {
// Function: 535.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_11(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 535.sol-DSAuth-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 535.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_5 = CONVERT this to address
TMP_6(bool) = src == TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_7(bool) = src == owner
CONDITION TMP_7"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_8 = CONVERT 0 to DSAuthority
TMP_9(bool) = authority == TMP_8
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_10"];
}
// Function: 535.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 535.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 535.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 535.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_34(uint256) = x + y
z(uint256) := TMP_34(uint256)
TMP_35(bool) = z >= x
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_49(bool) = x >= y
CONDITION TMP_49"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_48(bool) = x <= y
CONDITION TMP_48"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_47(bool) = x >= y
CONDITION TMP_47"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_46(bool) = x <= y
CONDITION TMP_46"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_40(bool) = y == 0
TMP_41(uint256) = x * y
z(uint256) := TMP_41(uint256)
TMP_42(uint256) = z / y
TMP_43(bool) = TMP_42 == x
TMP_44(bool) = TMP_40 || TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_62(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_63(uint256) = y / 2
TMP_64(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_62,TMP_63)
TMP_65(uint256) = TMP_64 / y
z(uint256) := TMP_65(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_54(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_55(uint256) = RAY / 2
TMP_56(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_54,TMP_55)
TMP_57(uint256) = TMP_56 / RAY
z(uint256) := TMP_57(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_66(bool) = n != 0
CONDITION TMP_66"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_67(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_67(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_68(uint256) = n % 2
TMP_69(bool) = TMP_68 != 0
CONDITION TMP_69"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_70(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_70(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_71(uint256) = n % 2
TMP_72(bool) = TMP_71 != 0
CONDITION TMP_72"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_73(uint256) = 10 ** 18
WAD(uint256) := TMP_73(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_74(uint256) = 10 ** 27
RAY(uint256) := TMP_74(uint256)"];
}
// Function: 535.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_37(uint256) = x - y
z(uint256) := TMP_37(uint256)
TMP_38(bool) = z <= x
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_58(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_59(uint256) = y / 2
TMP_60(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_58,TMP_59)
TMP_61(uint256) = TMP_60 / y
z(uint256) := TMP_61(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSMath-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_50(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_51(uint256) = WAD / 2
TMP_52(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_50,TMP_51)
TMP_53(uint256) = TMP_52 / WAD
z(uint256) := TMP_53(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 535.sol-DSStop-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_29(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 535.sol-DSStop-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 535.sol-DSStop-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_19 = CONVERT this to address
TMP_20(bool) = src == TMP_19
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_21(bool) = src == owner
CONDITION TMP_21"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_22 = CONVERT 0 to DSAuthority
TMP_23(bool) = authority == TMP_22
CONDITION TMP_23"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_24(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_24"];
}
// Function: 535.sol-DSStop-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 535.sol-DSStop-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 535.sol-DSStop-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 535.sol-DSStop-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 535.sol-DSStop-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 535.sol-DSStop-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stopped)

IRs:
TMP_32 = UnaryType.BANG stopped 
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 535.sol-DSToken-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_145(uint256) = x + y
z(uint256) := TMP_145(uint256)
TMP_146(bool) = z >= x
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-allowance(address,address)
digraph{
}
// Function: 535.sol-DSToken-approve(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(guy,uint256(- 1))

IRs:
TMP_184(uint256) = 0 - 1
TMP_185 = CONVERT TMP_184 to uint256
TMP_186(bool) = INTERNAL_CALL, DSTokenBase.approve(address,uint256)(guy,TMP_185)
RETURN TMP_186"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->1;
}
// Function: 535.sol-DSToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(guy,wad)

IRs:
TMP_188(bool) = INTERNAL_CALL, DSTokenBase.approve(address,uint256)(guy,wad)
RETURN TMP_188"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->1;
}
// Function: 535.sol-DSToken-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_226(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 535.sol-DSToken-balanceOf(address)
digraph{
}
// Function: 535.sol-DSToken-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
guy != msg.sender && _approvals[guy][msg.sender] != uint256(- 1)

IRs:
TMP_210(bool) = guy != msg.sender
REF_43(mapping(address => uint256)) -> _approvals[guy]
REF_44(uint256) -> REF_43[msg.sender]
TMP_211(uint256) = 0 - 1
TMP_212 = CONVERT TMP_211 to uint256
TMP_213(bool) = REF_44 != TMP_212
TMP_214(bool) = TMP_210 && TMP_213
CONDITION TMP_214"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender],wad)

IRs:
REF_45(mapping(address => uint256)) -> _approvals[guy]
REF_46(uint256) -> REF_45[msg.sender]
REF_47(mapping(address => uint256)) -> _approvals[guy]
REF_48(uint256) -> REF_47[msg.sender]
TMP_215(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_48,wad)
REF_46(uint256) (->_approvals) := TMP_215(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[guy] = sub(_balances[guy],wad)

IRs:
REF_49(uint256) -> _balances[guy]
REF_50(uint256) -> _balances[guy]
TMP_216(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_50,wad)
REF_49(uint256) (->_balances) := TMP_216(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_supply = sub(_supply,wad)

IRs:
TMP_217(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_217(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(guy,wad)

IRs:
Emit Burn(guy,wad)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
8->1;
}
// Function: 535.sol-DSToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
burn(msg.sender,wad)

IRs:
INTERNAL_CALL, DSToken.burn(address,uint256)(msg.sender,wad)"];
}
// Function: 535.sol-DSToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 535.sol-DSToken-constructor(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = symbol_

IRs:
symbol(bytes32) := symbol_(bytes32)"];
}
// Function: 535.sol-DSToken-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_17(uint256) -> _balances[msg.sender]
REF_17(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 535.sol-DSToken-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_160(bool) = x >= y
CONDITION TMP_160"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_159(bool) = x <= y
CONDITION TMP_159"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_132 = CONVERT this to address
TMP_133(bool) = src == TMP_132
CONDITION TMP_133"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_134(bool) = src == owner
CONDITION TMP_134"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_135 = CONVERT 0 to DSAuthority
TMP_136(bool) = authority == TMP_135
CONDITION TMP_136"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_137(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_137"];
}
// Function: 535.sol-DSToken-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_158(bool) = x >= y
CONDITION TMP_158"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_157(bool) = x <= y
CONDITION TMP_157"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[guy] = add(_balances[guy],wad)

IRs:
REF_41(uint256) -> _balances[guy]
REF_42(uint256) -> _balances[guy]
TMP_205(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_42,wad)
REF_41(uint256) (->_balances) := TMP_205(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = add(_supply,wad)

IRs:
TMP_206(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_206(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(guy,wad)

IRs:
Emit Mint(guy,wad)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
5->1;
}
// Function: 535.sol-DSToken-mint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mint(msg.sender,wad)

IRs:
INTERNAL_CALL, DSToken.mint(address,uint256)(msg.sender,wad)"];
}
// Function: 535.sol-DSToken-move(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(src,dst,wad)

IRs:
TMP_202(bool) = INTERNAL_CALL, DSToken.transferFrom(address,address,uint256)(src,dst,wad)"];
}
// Function: 535.sol-DSToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_151(bool) = y == 0
TMP_152(uint256) = x * y
z(uint256) := TMP_152(uint256)
TMP_153(uint256) = z / y
TMP_154(bool) = TMP_153 == x
TMP_155(bool) = TMP_151 || TMP_154
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 535.sol-DSToken-pull(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(src,msg.sender,wad)

IRs:
TMP_201(bool) = INTERNAL_CALL, DSToken.transferFrom(address,address,uint256)(src,msg.sender,wad)"];
}
// Function: 535.sol-DSToken-push(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(msg.sender,dst,wad)

IRs:
TMP_200(bool) = INTERNAL_CALL, DSToken.transferFrom(address,address,uint256)(msg.sender,dst,wad)"];
}
// Function: 535.sol-DSToken-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_173(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_174(uint256) = y / 2
TMP_175(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_173,TMP_174)
TMP_176(uint256) = TMP_175 / y
z(uint256) := TMP_176(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_165(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_166(uint256) = RAY / 2
TMP_167(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_165,TMP_166)
TMP_168(uint256) = TMP_167 / RAY
z(uint256) := TMP_168(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_177(bool) = n != 0
CONDITION TMP_177"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_178(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_178(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_179(uint256) = n % 2
TMP_180(bool) = TMP_179 != 0
CONDITION TMP_180"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_181(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_181(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_182(uint256) = n % 2
TMP_183(bool) = TMP_182 != 0
CONDITION TMP_183"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 535.sol-DSToken-setName(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = name_

IRs:
name(bytes32) := name_(bytes32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->1;
}
// Function: 535.sol-DSToken-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 535.sol-DSToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_222(uint256) = 10 ** 18
WAD(uint256) := TMP_222(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_223(uint256) = 10 ** 27
RAY(uint256) := TMP_223(uint256)"];
}
// Function: 535.sol-DSToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 

IRs:
name(bytes32) := (string)"];
}
// Function: 535.sol-DSToken-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 535.sol-DSToken-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 535.sol-DSToken-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stopped)

IRs:
TMP_224 = UnaryType.BANG stopped 
TMP_225(None) = SOLIDITY_CALL require(bool)(TMP_224)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 535.sol-DSToken-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_148(uint256) = x - y
z(uint256) := TMP_148(uint256)
TMP_149(bool) = z <= x
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-totalSupply()
digraph{
}
// Function: 535.sol-DSToken-transfer(address,uint256)
digraph{
}
// Function: 535.sol-DSToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
src != msg.sender && _approvals[src][msg.sender] != uint256(- 1)

IRs:
TMP_190(bool) = src != msg.sender
REF_31(mapping(address => uint256)) -> _approvals[src]
REF_32(uint256) -> REF_31[msg.sender]
TMP_191(uint256) = 0 - 1
TMP_192 = CONVERT TMP_191 to uint256
TMP_193(bool) = REF_32 != TMP_192
TMP_194(bool) = TMP_190 && TMP_193
CONDITION TMP_194"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_approvals[src][msg.sender] = sub(_approvals[src][msg.sender],wad)

IRs:
REF_33(mapping(address => uint256)) -> _approvals[src]
REF_34(uint256) -> REF_33[msg.sender]
REF_35(mapping(address => uint256)) -> _approvals[src]
REF_36(uint256) -> REF_35[msg.sender]
TMP_195(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_36,wad)
REF_34(uint256) (->_approvals) := TMP_195(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[src] = sub(_balances[src],wad)

IRs:
REF_37(uint256) -> _balances[src]
REF_38(uint256) -> _balances[src]
TMP_196(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_38,wad)
REF_37(uint256) (->_balances) := TMP_196(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_39(uint256) -> _balances[dst]
REF_40(uint256) -> _balances[dst]
TMP_197(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_40,wad)
REF_39(uint256) (->_balances) := TMP_197(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(src,dst,wad)

IRs:
Emit Transfer(src,dst,wad)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
8->1;
}
// Function: 535.sol-DSToken-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_169(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_170(uint256) = y / 2
TMP_171(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_169,TMP_170)
TMP_172(uint256) = TMP_171 / y
z(uint256) := TMP_172(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSToken-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_161(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_162(uint256) = WAD / 2
TMP_163(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_161,TMP_162)
TMP_164(uint256) = TMP_163 / WAD
z(uint256) := TMP_164(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_75(uint256) = x + y
z(uint256) := TMP_75(uint256)
TMP_76(bool) = z >= x
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_approvals[src][guy]

IRs:
REF_4(mapping(address => uint256)) -> _approvals[src]
REF_5(uint256) -> REF_4[guy]
RETURN REF_5"];
}
// Function: 535.sol-DSTokenBase-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_approvals[msg.sender][guy] = wad

IRs:
REF_14(mapping(address => uint256)) -> _approvals[msg.sender]
REF_15(uint256) -> REF_14[guy]
REF_15(uint256) (->_approvals) := wad(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,guy,wad)

IRs:
Emit Approval(msg.sender,guy,wad)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 535.sol-DSTokenBase-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balances[src]

IRs:
REF_3(uint256) -> _balances[src]
RETURN REF_3"];
}
// Function: 535.sol-DSTokenBase-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_2(uint256) -> _balances[msg.sender]
REF_2(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 535.sol-DSTokenBase-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_90(bool) = x >= y
CONDITION TMP_90"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_89(bool) = x <= y
CONDITION TMP_89"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_88(bool) = x >= y
CONDITION TMP_88"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_87(bool) = x <= y
CONDITION TMP_87"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_81(bool) = y == 0
TMP_82(uint256) = x * y
z(uint256) := TMP_82(uint256)
TMP_83(uint256) = z / y
TMP_84(bool) = TMP_83 == x
TMP_85(bool) = TMP_81 || TMP_84
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_103(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_104(uint256) = y / 2
TMP_105(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_103,TMP_104)
TMP_106(uint256) = TMP_105 / y
z(uint256) := TMP_106(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_95(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_96(uint256) = RAY / 2
TMP_97(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_95,TMP_96)
TMP_98(uint256) = TMP_97 / RAY
z(uint256) := TMP_98(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_107(bool) = n != 0
CONDITION TMP_107"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_108(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_108(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_109(uint256) = n % 2
TMP_110(bool) = TMP_109 != 0
CONDITION TMP_110"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_111(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_111(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_112(uint256) = n % 2
TMP_113(bool) = TMP_112 != 0
CONDITION TMP_113"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_121(uint256) = 10 ** 18
WAD(uint256) := TMP_121(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_122(uint256) = 10 ** 27
RAY(uint256) := TMP_122(uint256)"];
}
// Function: 535.sol-DSTokenBase-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_78(uint256) = x - y
z(uint256) := TMP_78(uint256)
TMP_79(bool) = z <= x
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_supply

IRs:
RETURN _supply"];
}
// Function: 535.sol-DSTokenBase-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferFrom(msg.sender,dst,wad)

IRs:
TMP_114(bool) = INTERNAL_CALL, DSTokenBase.transferFrom(address,address,uint256)(msg.sender,dst,wad)
RETURN TMP_114"];
}
// Function: 535.sol-DSTokenBase-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src != msg.sender

IRs:
TMP_115(bool) = src != msg.sender
CONDITION TMP_115"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_approvals[src][msg.sender] = sub(_approvals[src][msg.sender],wad)

IRs:
REF_6(mapping(address => uint256)) -> _approvals[src]
REF_7(uint256) -> REF_6[msg.sender]
REF_8(mapping(address => uint256)) -> _approvals[src]
REF_9(uint256) -> REF_8[msg.sender]
TMP_116(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_9,wad)
REF_7(uint256) (->_approvals) := TMP_116(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[src] = sub(_balances[src],wad)

IRs:
REF_10(uint256) -> _balances[src]
REF_11(uint256) -> _balances[src]
TMP_117(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_11,wad)
REF_10(uint256) (->_balances) := TMP_117(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_12(uint256) -> _balances[dst]
REF_13(uint256) -> _balances[dst]
TMP_118(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_13,wad)
REF_12(uint256) (->_balances) := TMP_118(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(src,dst,wad)

IRs:
Emit Transfer(src,dst,wad)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 535.sol-DSTokenBase-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_99(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_100(uint256) = y / 2
TMP_101(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_99,TMP_100)
TMP_102(uint256) = TMP_101 / y
z(uint256) := TMP_102(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-DSTokenBase-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_91(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_92(uint256) = WAD / 2
TMP_93(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_91,TMP_92)
TMP_94(uint256) = TMP_93 / WAD
z(uint256) := TMP_94(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 535.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 535.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 535.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 535.sol-ERC20-totalSupply()
digraph{
}
// Function: 535.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 535.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 535.sol-MintAuthority-canCall(address,address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((_src == multisig || _src == crowdsale) && _sig == bytes4(keccak256()(mint(address,uint256))))

IRs:
TMP_229(bool) = _src == multisig
TMP_230(bool) = _src == crowdsale
TMP_231(bool) = TMP_229 || TMP_230
TMP_232(bytes32) = SOLIDITY_CALL keccak256()(mint(address,uint256))
TMP_233 = CONVERT TMP_232 to bytes4
TMP_234(bool) = _sig == TMP_233
TMP_235(bool) = TMP_231 && TMP_234
RETURN TMP_235"];
}
// Function: 535.sol-MintAuthority-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
multisig = _multisig

IRs:
multisig(address) := _multisig(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
crowdsale = _crowdsale

IRs:
crowdsale(address) := _crowdsale(address)"];
}
}
