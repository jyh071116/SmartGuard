digraph G {
// Function: 571.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 571.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1(bool) = msg.sender == owner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 571.sol-Owned-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 571.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_3(uint256) = _a + _b
c(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_4(bool) = c >= _a
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 571.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a * _b

IRs:
TMP_9(uint256) = _a * _b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_a == 0 || c / _a == _b)

IRs:
TMP_10(bool) = _a == 0
TMP_11(uint256) = c / _a
TMP_12(bool) = TMP_11 == _b
TMP_13(bool) = TMP_10 || TMP_12
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 571.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_a >= _b)

IRs:
TMP_6(bool) = _a >= _b
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_8(uint256) = _a - _b
RETURN TMP_8"];
}
// Function: 571.sol-Token-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 571.sol-Token-Token(string,string,uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_name).length > 0 && bytes(_symbol).length > 0)

IRs:
TMP_28 = CONVERT _name to bytes
REF_0 -> LENGTH TMP_28
TMP_29(bool) = REF_0 > 0
TMP_30 = CONVERT _symbol to bytes
REF_1 -> LENGTH TMP_30
TMP_31(bool) = REF_1 > 0
TMP_32(bool) = TMP_29 && TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceP[msg.sender] = _totalSupply

IRs:
REF_2(uint256) -> balanceP[msg.sender]
REF_2(uint256) (->balanceP) := _totalSupply(uint256)"];
}
// Function: 571.sol-Token-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_16(uint256) = _a + _b
c(uint256) := TMP_16(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_17(bool) = c >= _a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 571.sol-Token-addLocker(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locker[_address] = true

IRs:
REF_3(bool) -> locker[_address]
REF_3(bool) (->locker) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validAddress(_address)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 571.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value == 0 || allowance[msg.sender][_spender] == 0)

IRs:
TMP_145(bool) = _value == 0
REF_132(mapping(address => uint256)) -> allowance[msg.sender]
REF_133(uint256) -> REF_132[_spender]
TMP_146(bool) = REF_133 == 0
TMP_147(bool) = TMP_145 || TMP_146
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
lockNum[msg.sender] > 0

IRs:
REF_134(uint256) -> lockNum[msg.sender]
TMP_149(bool) = REF_134 > 0
CONDITION TMP_149"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
calcUnlock(msg.sender)

IRs:
INTERNAL_CALL, Token.calcUnlock(address)(msg.sender)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_135(mapping(address => uint256)) -> allowance[msg.sender]
REF_136(uint256) -> REF_135[_spender]
REF_136(uint256) (->allowance) := _value(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
validAddress(_spender)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_spender)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 571.sol-Token-balanceLocked(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balance = 0

IRs:
_balance(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < lockNum[_address]

IRs:
REF_11(uint256) -> lockNum[_address]
TMP_48(bool) = i < REF_11
CONDITION TMP_48"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
add(now,earlier) < add(lockTime[_address][i],later)

IRs:
TMP_49(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(now,earlier)
REF_12(uint256[]) -> lockTime[_address]
REF_13(uint256) -> REF_12[i]
TMP_50(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_13,later)
TMP_51(bool) = TMP_49 < TMP_50
CONDITION TMP_51"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_balance = add(_balance,lockValue[_address][i])

IRs:
REF_14(uint256[]) -> lockValue[_address]
REF_15(uint256) -> REF_14[i]
TMP_52(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(_balance,REF_15)
_balance(uint256) := TMP_52(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_53(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
_balance

IRs:
RETURN _balance"];
11[label="Node Type: RETURN 11

EXPRESSION:
_balance

IRs:
RETURN _balance"];
}
// Function: 571.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balance = balanceP[_address]

IRs:
REF_16(uint256) -> balanceP[_address]
_balance(uint256) := REF_16(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < lockNum[_address]

IRs:
REF_17(uint256) -> lockNum[_address]
TMP_54(bool) = i < REF_17
CONDITION TMP_54"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balance = add(_balance,lockValue[_address][i])

IRs:
REF_18(uint256[]) -> lockValue[_address]
REF_19(uint256) -> REF_18[i]
TMP_55(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(_balance,REF_19)
_balance(uint256) := TMP_55(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_56(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
_balance

IRs:
RETURN _balance"];
9[label="Node Type: RETURN 9

EXPRESSION:
_balance

IRs:
RETURN _balance"];
}
// Function: 571.sol-Token-balanceUnlocked(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balance = balanceP[_address]

IRs:
REF_5(uint256) -> balanceP[_address]
_balance(uint256) := REF_5(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < lockNum[_address]

IRs:
REF_6(uint256) -> lockNum[_address]
TMP_42(bool) = i < REF_6
CONDITION TMP_42"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
add(now,earlier) > add(lockTime[_address][i],later)

IRs:
TMP_43(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(now,earlier)
REF_7(uint256[]) -> lockTime[_address]
REF_8(uint256) -> REF_7[i]
TMP_44(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_8,later)
TMP_45(bool) = TMP_43 > TMP_44
CONDITION TMP_45"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_balance = add(_balance,lockValue[_address][i])

IRs:
REF_9(uint256[]) -> lockValue[_address]
REF_10(uint256) -> REF_9[i]
TMP_46(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(_balance,REF_10)
_balance(uint256) := TMP_46(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_47(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
_balance

IRs:
RETURN _balance"];
11[label="Node Type: RETURN 11

EXPRESSION:
_balance

IRs:
RETURN _balance"];
}
// Function: 571.sol-Token-calcUnlock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
newLockTime = new uint256[](lockNum[_address])

IRs:
REF_26(uint256) -> lockNum[_address]
TMP_66(uint256[])  = new uint256[](REF_26)
newLockTime(uint256[]) = ['TMP_66(uint256[])']"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
newLockValue = new uint256[](lockNum[_address])

IRs:
REF_27(uint256) -> lockNum[_address]
TMP_68(uint256[])  = new uint256[](REF_27)
newLockValue(uint256[]) = ['TMP_68(uint256[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
currentLockTime = lockTime[_address]

IRs:
REF_28(uint256[]) -> lockTime[_address]
currentLockTime(uint256[]) = ['REF_28(uint256[])']"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
currentLockValue = lockValue[_address]

IRs:
REF_29(uint256[]) -> lockValue[_address]
currentLockValue(uint256[]) = ['REF_29(uint256[])']"];
8->9;
9[label="Node Type: BEGIN_LOOP 9
"];
9->10;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < lockNum[_address]

IRs:
REF_30(uint256) -> lockNum[_address]
TMP_69(bool) = i < REF_30
CONDITION TMP_69"];
10->11[label="True"];
10->19[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
add(now,earlier) > add(currentLockTime[i],later)

IRs:
TMP_70(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(now,earlier)
REF_31(uint256) -> currentLockTime[i]
TMP_71(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_31,later)
TMP_72(bool) = TMP_70 > TMP_71
CONDITION TMP_72"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balanceP[_address] = add(balanceP[_address],currentLockValue[i])

IRs:
REF_32(uint256) -> balanceP[_address]
REF_33(uint256) -> balanceP[_address]
REF_34(uint256) -> currentLockValue[i]
TMP_73(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_33,REF_34)
REF_32(uint256) (->balanceP) := TMP_73(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
TokenUnlocked(_address,currentLockValue[i])

IRs:
REF_35(uint256) -> currentLockValue[i]
Emit TokenUnlocked(_address,REF_35)"];
13->17;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
newLockTime[j] = currentLockTime[i]

IRs:
REF_36(uint256) -> newLockTime[j]
REF_37(uint256) -> currentLockTime[i]
REF_36(uint256) (->newLockTime) := REF_37(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
newLockValue[j] = currentLockValue[i]

IRs:
REF_38(uint256) -> newLockValue[j]
REF_39(uint256) -> currentLockValue[i]
REF_38(uint256) (->newLockValue) := REF_39(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
j ++

IRs:
TMP_75(uint256) := j(uint256)
j(uint256) = j + 1"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_76(uint256) := i(uint256)
i(uint256) = i + 1"];
18->10;
19[label="Node Type: END_LOOP 19
"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
trimLockTime = new uint256[](j)

IRs:
TMP_78(uint256[])  = new uint256[](j)
trimLockTime(uint256[]) = ['TMP_78(uint256[])']"];
20->21;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
trimLockValue = new uint256[](j)

IRs:
TMP_80(uint256[])  = new uint256[](j)
trimLockValue(uint256[]) = ['TMP_80(uint256[])']"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->23;
23[label="Node Type: BEGIN_LOOP 23
"];
23->24;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < j

IRs:
TMP_81(bool) = i < j
CONDITION TMP_81"];
24->25[label="True"];
24->28[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
trimLockTime[i] = newLockTime[i]

IRs:
REF_40(uint256) -> trimLockTime[i]
REF_41(uint256) -> newLockTime[i]
REF_40(uint256) (->trimLockTime) := REF_41(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
trimLockValue[i] = newLockValue[i]

IRs:
REF_42(uint256) -> trimLockValue[i]
REF_43(uint256) -> newLockValue[i]
REF_42(uint256) (->trimLockValue) := REF_43(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_82(uint256) := i(uint256)
i(uint256) = i + 1"];
27->24;
28[label="Node Type: END_LOOP 28
"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
lockTime[_address] = trimLockTime

IRs:
REF_44(uint256[]) -> lockTime[_address]
REF_44(uint256[]) (->lockTime) := trimLockTime(uint256[])"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
lockValue[_address] = trimLockValue

IRs:
REF_45(uint256[]) -> lockValue[_address]
REF_45(uint256[]) (->lockValue) := trimLockValue(uint256[])"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
lockNum[_address] = j

IRs:
REF_46(uint256) -> lockNum[_address]
REF_46(uint256) (->lockNum) := j(uint256)"];
}
// Function: 571.sol-Token-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_153(None) = SOLIDITY_CALL revert()()"];
}
// Function: 571.sol-Token-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a * _b

IRs:
TMP_22(uint256) = _a * _b
c(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_a == 0 || c / _a == _b)

IRs:
TMP_23(bool) = _a == 0
TMP_24(uint256) = c / _a
TMP_25(bool) = TMP_24 == _b
TMP_26(bool) = TMP_23 || TMP_25
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 571.sol-Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_154(bool) = msg.sender == owner
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 571.sol-Token-removeLocker(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locker[_address] = false

IRs:
REF_4(bool) -> locker[_address]
REF_4(bool) (->locker) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validAddress(_address)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 571.sol-Token-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 571.sol-Token-setUnlockEarlier(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
earlier = add(earlier,_earlier)

IRs:
TMP_38(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(earlier,_earlier)
earlier(uint256) := TMP_38(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 571.sol-Token-setUnlockLater(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
later = add(later,_later)

IRs:
TMP_40(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(later,_later)
later(uint256) := TMP_40(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 571.sol-Token-showTime(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tempLockTime = new uint256[](lockNum[_address])

IRs:
REF_20(uint256) -> lockNum[_address]
TMP_58(uint256[])  = new uint256[](REF_20)
tempLockTime(uint256[]) = ['TMP_58(uint256[])']"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < lockNum[_address]

IRs:
REF_21(uint256) -> lockNum[_address]
TMP_59(bool) = i < REF_21
CONDITION TMP_59"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tempLockTime[i] = sub(add(lockTime[_address][i],later),earlier)

IRs:
REF_22(uint256) -> tempLockTime[i]
REF_23(uint256[]) -> lockTime[_address]
REF_24(uint256) -> REF_23[i]
TMP_60(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_24,later)
TMP_61(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(TMP_60,earlier)
REF_22(uint256) (->tempLockTime) := TMP_61(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_62(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
tempLockTime

IRs:
RETURN tempLockTime"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validAddress(_address)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_address)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
_time

IRs:
RETURN _time"];
}
// Function: 571.sol-Token-showValue(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
lockValue[_address]

IRs:
REF_25(uint256[]) -> lockValue[_address]
RETURN REF_25"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validAddress(_address)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_address)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_value

IRs:
RETURN _value"];
}
// Function: 571.sol-Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DAY_IN_SECONDS = 86400

IRs:
DAY_IN_SECONDS(uint256) := 86400(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
standard = 0.777

IRs:
standard(string) := 0.777(string)"];
}
// Function: 571.sol-Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = 

IRs:
name(string) := (string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = 

IRs:
symbol(string) := (string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 0

IRs:
decimals(uint8) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
later = 0

IRs:
later(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
earlier = 0

IRs:
earlier(uint256) := 0(uint256)"];
}
// Function: 571.sol-Token-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_a >= _b)

IRs:
TMP_19(bool) = _a >= _b
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_21(uint256) = _a - _b
RETURN TMP_21"];
}
// Function: 571.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
lockNum[msg.sender] > 0

IRs:
REF_47(uint256) -> lockNum[msg.sender]
TMP_83(bool) = REF_47 > 0
CONDITION TMP_83"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
calcUnlock(msg.sender)

IRs:
INTERNAL_CALL, Token.calcUnlock(address)(msg.sender)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
balanceP[msg.sender] >= _value && _value > 0

IRs:
REF_48(uint256) -> balanceP[msg.sender]
TMP_85(bool) = REF_48 >= _value
TMP_86(bool) = _value > 0
TMP_87(bool) = TMP_85 && TMP_86
CONDITION TMP_87"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceP[msg.sender] = sub(balanceP[msg.sender],_value)

IRs:
REF_49(uint256) -> balanceP[msg.sender]
REF_50(uint256) -> balanceP[msg.sender]
TMP_88(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(REF_50,_value)
REF_49(uint256) (->balanceP) := TMP_88(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceP[_to] = add(balanceP[_to],_value)

IRs:
REF_51(uint256) -> balanceP[_to]
REF_52(uint256) -> balanceP[_to]
TMP_89(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_52,_value)
REF_51(uint256) (->balanceP) := TMP_89(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_to)"];
11->1;
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 571.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: IF 1

EXPRESSION:
lockNum[_from] > 0

IRs:
REF_122(uint256) -> lockNum[_from]
TMP_134(bool) = REF_122 > 0
CONDITION TMP_134"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
calcUnlock(_from)

IRs:
INTERNAL_CALL, Token.calcUnlock(address)(_from)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
balanceP[_from] >= _value && _value > 0

IRs:
REF_123(uint256) -> balanceP[_from]
TMP_136(bool) = REF_123 >= _value
TMP_137(bool) = _value > 0
TMP_138(bool) = TMP_136 && TMP_137
CONDITION TMP_138"];
4->5[label="True"];
4->10[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[_from][msg.sender] = sub(allowance[_from][msg.sender],_value)

IRs:
REF_124(mapping(address => uint256)) -> allowance[_from]
REF_125(uint256) -> REF_124[msg.sender]
REF_126(mapping(address => uint256)) -> allowance[_from]
REF_127(uint256) -> REF_126[msg.sender]
TMP_139(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(REF_127,_value)
REF_125(uint256) (->allowance) := TMP_139(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceP[_from] = sub(balanceP[_from],_value)

IRs:
REF_128(uint256) -> balanceP[_from]
REF_129(uint256) -> balanceP[_from]
TMP_140(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(REF_129,_value)
REF_128(uint256) (->balanceP) := TMP_140(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceP[_to] = add(balanceP[_to],_value)

IRs:
REF_130(uint256) -> balanceP[_to]
REF_131(uint256) -> balanceP[_to]
TMP_141(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_131,_value)
REF_130(uint256) (->balanceP) := TMP_141(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
validAddress(_from)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_from)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_to)"];
13->1;
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 571.sol-Token-transferLocked(address,uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->29;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value.length == _time.length)

IRs:
REF_53 -> LENGTH _value
REF_54 -> LENGTH _time
TMP_92(bool) = REF_53 == REF_54
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
lockNum[msg.sender] > 0

IRs:
REF_55(uint256) -> lockNum[msg.sender]
TMP_94(bool) = REF_55 > 0
CONDITION TMP_94"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
calcUnlock(msg.sender)

IRs:
INTERNAL_CALL, Token.calcUnlock(address)(msg.sender)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
totalValue = 0

IRs:
totalValue(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: BEGIN_LOOP 7
"];
7->8;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < _value.length

IRs:
REF_56 -> LENGTH _value
TMP_96(bool) = i < REF_56
CONDITION TMP_96"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalValue = add(totalValue,_value[i])

IRs:
REF_57(uint256) -> _value[i]
TMP_97(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(totalValue,REF_57)
totalValue(uint256) := TMP_97(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_98(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
balanceP[msg.sender] >= totalValue && totalValue > 0

IRs:
REF_58(uint256) -> balanceP[msg.sender]
TMP_99(bool) = REF_58 >= totalValue
TMP_100(bool) = totalValue > 0
TMP_101(bool) = TMP_99 && TMP_100
CONDITION TMP_101"];
12->13[label="True"];
12->27[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
i < _time.length

IRs:
REF_59 -> LENGTH _time
TMP_102(bool) = i < REF_59
CONDITION TMP_102"];
15->16[label="True"];
15->25[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balanceP[msg.sender] = sub(balanceP[msg.sender],_value[i])

IRs:
REF_60(uint256) -> balanceP[msg.sender]
REF_61(uint256) -> balanceP[msg.sender]
REF_62(uint256) -> _value[i]
TMP_103(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(REF_61,REF_62)
REF_60(uint256) (->balanceP) := TMP_103(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lockTime[_to].length = lockNum[_to] + 1

IRs:
REF_63(uint256[]) -> lockTime[_to]
REF_64 -> LENGTH REF_63
REF_65(uint256) -> lockNum[_to]
TMP_104(uint256) = REF_65 + 1
REF_64(uint256) (->lockTime) := TMP_104(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
lockValue[_to].length = lockNum[_to] + 1

IRs:
REF_66(uint256[]) -> lockValue[_to]
REF_67 -> LENGTH REF_66
REF_68(uint256) -> lockNum[_to]
TMP_105(uint256) = REF_68 + 1
REF_67(uint256) (->lockValue) := TMP_105(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lockTime[_to][lockNum[_to]] = add(now,_time[i])

IRs:
REF_69(uint256[]) -> lockTime[_to]
REF_70(uint256) -> lockNum[_to]
REF_71(uint256) -> REF_69[REF_70]
REF_72(uint256) -> _time[i]
TMP_106(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(now,REF_72)
REF_71(uint256) (->lockTime) := TMP_106(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
lockValue[_to][lockNum[_to]] = _value[i]

IRs:
REF_73(uint256[]) -> lockValue[_to]
REF_74(uint256) -> lockNum[_to]
REF_75(uint256) -> REF_73[REF_74]
REF_76(uint256) -> _value[i]
REF_75(uint256) (->lockValue) := REF_76(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
TransferredLocked(msg.sender,_to,lockTime[_to][lockNum[_to]],lockValue[_to][lockNum[_to]])

IRs:
REF_77(uint256[]) -> lockTime[_to]
REF_78(uint256) -> lockNum[_to]
REF_79(uint256) -> REF_77[REF_78]
REF_80(uint256[]) -> lockValue[_to]
REF_81(uint256) -> lockNum[_to]
REF_82(uint256) -> REF_80[REF_81]
Emit TransferredLocked(msg.sender,_to,REF_79,REF_82)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,_to,lockValue[_to][lockNum[_to]])

IRs:
REF_83(uint256[]) -> lockValue[_to]
REF_84(uint256) -> lockNum[_to]
REF_85(uint256) -> REF_83[REF_84]
Emit Transfer(msg.sender,_to,REF_85)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
lockNum[_to] ++

IRs:
REF_86(uint256) -> lockNum[_to]
TMP_109(uint256) := REF_86(uint256)
REF_86(-> lockNum) = REF_86 + 1"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
i ++

IRs:
TMP_110(uint256) := i(uint256)
i(uint256) = i + 1"];
24->15;
25[label="Node Type: END_LOOP 25
"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
true

IRs:
RETURN True"];
27[label="Node Type: RETURN 27

EXPRESSION:
false

IRs:
RETURN False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_to)"];
29->1;
30[label="Node Type: RETURN 30

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 571.sol-Token-transferLockedFrom(address,address,uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->30;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(locker[msg.sender])

IRs:
REF_87(bool) -> locker[msg.sender]
TMP_112(None) = SOLIDITY_CALL require(bool)(REF_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value.length == _time.length)

IRs:
REF_88 -> LENGTH _value
REF_89 -> LENGTH _time
TMP_113(bool) = REF_88 == REF_89
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockNum[_from] > 0

IRs:
REF_90(uint256) -> lockNum[_from]
TMP_115(bool) = REF_90 > 0
CONDITION TMP_115"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
calcUnlock(_from)

IRs:
INTERNAL_CALL, Token.calcUnlock(address)(_from)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
totalValue = 0

IRs:
totalValue(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _value.length

IRs:
REF_91 -> LENGTH _value
TMP_117(bool) = i < REF_91
CONDITION TMP_117"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalValue = add(totalValue,_value[i])

IRs:
REF_92(uint256) -> _value[i]
TMP_118(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(totalValue,REF_92)
totalValue(uint256) := TMP_118(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_119(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: END_LOOP 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
balanceP[_from] >= totalValue && totalValue > 0

IRs:
REF_93(uint256) -> balanceP[_from]
TMP_120(bool) = REF_93 >= totalValue
TMP_121(bool) = totalValue > 0
TMP_122(bool) = TMP_120 && TMP_121
CONDITION TMP_122"];
13->14[label="True"];
13->28[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < _time.length

IRs:
REF_94 -> LENGTH _time
TMP_123(bool) = i < REF_94
CONDITION TMP_123"];
16->17[label="True"];
16->26[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
balanceP[_from] = sub(balanceP[_from],_value[i])

IRs:
REF_95(uint256) -> balanceP[_from]
REF_96(uint256) -> balanceP[_from]
REF_97(uint256) -> _value[i]
TMP_124(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(REF_96,REF_97)
REF_95(uint256) (->balanceP) := TMP_124(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
lockTime[_to].length = lockNum[_to] + 1

IRs:
REF_98(uint256[]) -> lockTime[_to]
REF_99 -> LENGTH REF_98
REF_100(uint256) -> lockNum[_to]
TMP_125(uint256) = REF_100 + 1
REF_99(uint256) (->lockTime) := TMP_125(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lockValue[_to].length = lockNum[_to] + 1

IRs:
REF_101(uint256[]) -> lockValue[_to]
REF_102 -> LENGTH REF_101
REF_103(uint256) -> lockNum[_to]
TMP_126(uint256) = REF_103 + 1
REF_102(uint256) (->lockValue) := TMP_126(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
lockTime[_to][lockNum[_to]] = add(now,_time[i])

IRs:
REF_104(uint256[]) -> lockTime[_to]
REF_105(uint256) -> lockNum[_to]
REF_106(uint256) -> REF_104[REF_105]
REF_107(uint256) -> _time[i]
TMP_127(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(now,REF_107)
REF_106(uint256) (->lockTime) := TMP_127(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
lockValue[_to][lockNum[_to]] = _value[i]

IRs:
REF_108(uint256[]) -> lockValue[_to]
REF_109(uint256) -> lockNum[_to]
REF_110(uint256) -> REF_108[REF_109]
REF_111(uint256) -> _value[i]
REF_110(uint256) (->lockValue) := REF_111(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
TransferredLocked(_from,_to,lockTime[_to][lockNum[_to]],lockValue[_to][lockNum[_to]])

IRs:
REF_112(uint256[]) -> lockTime[_to]
REF_113(uint256) -> lockNum[_to]
REF_114(uint256) -> REF_112[REF_113]
REF_115(uint256[]) -> lockValue[_to]
REF_116(uint256) -> lockNum[_to]
REF_117(uint256) -> REF_115[REF_116]
Emit TransferredLocked(_from,_to,REF_114,REF_117)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Transfer(_from,_to,lockValue[_to][lockNum[_to]])

IRs:
REF_118(uint256[]) -> lockValue[_to]
REF_119(uint256) -> lockNum[_to]
REF_120(uint256) -> REF_118[REF_119]
Emit Transfer(_from,_to,REF_120)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
lockNum[_to] ++

IRs:
REF_121(uint256) -> lockNum[_to]
TMP_130(uint256) := REF_121(uint256)
REF_121(-> lockNum) = REF_121 + 1"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i ++

IRs:
TMP_131(uint256) := i(uint256)
i(uint256) = i + 1"];
25->16;
26[label="Node Type: END_LOOP 26
"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: RETURN 28

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
validAddress(_from)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_from)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Token.validAddress(address)(_to)"];
31->1;
32[label="Node Type: RETURN 32

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 571.sol-Token-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_156(bool) = _address != 0
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
