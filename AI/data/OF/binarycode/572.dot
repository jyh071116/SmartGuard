digraph G {
// Function: 572.sol-EnjoyGameToken-transfer(address,uint256)
digraph{
}
// Function: 572.sol-EnjoyGameToken-transferAndLock(address,uint256,uint256)
digraph{
}
// Function: 572.sol-EnjoyGameToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 572.sol-TransferEGTMulti-isAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
0xe7266A1eFb21069E257Ec8Fc3e103f1FcF2C3e5D != msg.sender && 0xc1180dd8a1270c7aafc76d957dbb1c4c09720370 != msg.sender && 0x7C2A9bEA4177606B97bd333836F916ED475bb638 != msg.sender && 0x22B8EAeA7F027c37a968Ac95c7Fa009Aa52fF754 != msg.sender && 0xC24878A818Da47A1f39f2F926620E547B0d41831 != msg.sender

IRs:
TMP_23(bool) = 1319633540822438574953990090817674032301311016541 != msg.sender
TMP_24(bool) = 1102371642828682590946314494680892508186459898736 != msg.sender
TMP_25(bool) = TMP_23 && TMP_24
TMP_26(bool) = 708865068997907328202566499302269047178922800696 != msg.sender
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(bool) = 198229487394346929366455910990209052726472472404 != msg.sender
TMP_29(bool) = TMP_27 && TMP_28
TMP_30(bool) = 1109160373868903372010891839404896772040888162353 != msg.sender
TMP_31(bool) = TMP_29 && TMP_30
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(not admin)

IRs:
TMP_32(None) = SOLIDITY_CALL revert(string)(not admin)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 572.sol-TransferEGTMulti-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
tokenAddr = 0xc5faadd1206ca91d9f8dd015b3498affad9a58bc

IRs:
tokenAddr(address) := 1130261509739509417058180360391730306978774931644(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
egt = EnjoyGameToken(tokenAddr)

IRs:
TMP_22 = CONVERT tokenAddr to EnjoyGameToken
egt(EnjoyGameToken) := TMP_22(EnjoyGameToken)"];
}
// Function: 572.sol-TransferEGTMulti-transferAndLockMulti(address[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
tos.length != values.length || tos.length != _releaseTimeSs.length

IRs:
REF_15 -> LENGTH tos
REF_16 -> LENGTH values
TMP_14(bool) = REF_15 != REF_16
REF_17 -> LENGTH tos
REF_18 -> LENGTH _releaseTimeSs
TMP_15(bool) = REF_17 != REF_18
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(params error)

IRs:
TMP_17(None) = SOLIDITY_CALL revert(string)(params error)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < tos.length

IRs:
REF_19 -> LENGTH tos
TMP_18(bool) = i < REF_19
CONDITION TMP_18"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
egt.transferAndLock(tos[i],values[i],_releaseTimeSs[i])

IRs:
REF_21(address) -> tos[i]
REF_22(uint256) -> values[i]
REF_23(uint256) -> _releaseTimeSs[i]
TMP_19(bool) = HIGH_LEVEL_CALL, dest:egt(EnjoyGameToken), function:transferAndLock, arguments:['REF_21', 'REF_22', 'REF_23']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_20(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, TransferEGTMulti.isAdmin()()"];
10->1;
}
// Function: 572.sol-TransferEGTMulti-transferFromMulti(address[],address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
tos.length != froms.length || tos.length != values.length

IRs:
REF_6 -> LENGTH tos
REF_7 -> LENGTH froms
TMP_6(bool) = REF_6 != REF_7
REF_8 -> LENGTH tos
REF_9 -> LENGTH values
TMP_7(bool) = REF_8 != REF_9
TMP_8(bool) = TMP_6 || TMP_7
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(params error)

IRs:
TMP_9(None) = SOLIDITY_CALL revert(string)(params error)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < tos.length

IRs:
REF_10 -> LENGTH tos
TMP_10(bool) = i < REF_10
CONDITION TMP_10"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
egt.transferFrom(froms[i],tos[i],values[i])

IRs:
REF_12(address) -> froms[i]
REF_13(address) -> tos[i]
REF_14(uint256) -> values[i]
TMP_11(bool) = HIGH_LEVEL_CALL, dest:egt(EnjoyGameToken), function:transferFrom, arguments:['REF_12', 'REF_13', 'REF_14']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_12(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, TransferEGTMulti.isAdmin()()"];
10->1;
}
// Function: 572.sol-TransferEGTMulti-transferMulti(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
tos.length != values.length

IRs:
REF_0 -> LENGTH tos
REF_1 -> LENGTH values
TMP_0(bool) = REF_0 != REF_1
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(params error)

IRs:
TMP_1(None) = SOLIDITY_CALL revert(string)(params error)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < tos.length

IRs:
REF_2 -> LENGTH tos
TMP_2(bool) = i < REF_2
CONDITION TMP_2"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
egt.transfer(tos[i],values[i])

IRs:
REF_4(address) -> tos[i]
REF_5(uint256) -> values[i]
TMP_3(bool) = HIGH_LEVEL_CALL, dest:egt(EnjoyGameToken), function:transfer, arguments:['REF_4', 'REF_5']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_4(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, TransferEGTMulti.isAdmin()()"];
10->1;
}
}
