digraph G {
// Function: 579.sol-Planethereum-Planethereum(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = valueFounder

IRs:
totalSupply(uint256) := valueFounder(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_addressFounder] = valueFounder

IRs:
REF_0(uint256) -> balanceOf[_addressFounder]
REF_0(uint256) (->balanceOf) := valueFounder(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(0x0,_addressFounder,valueFounder)

IRs:
Emit Transfer(0,_addressFounder,valueFounder)"];
}
// Function: 579.sol-Planethereum-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value == 0 || allowance[msg.sender][_spender] == 0)

IRs:
TMP_19(bool) = _value == 0
REF_15(mapping(address => uint256)) -> allowance[msg.sender]
REF_16(uint256) -> REF_15[_spender]
TMP_20(bool) = REF_16 == 0
TMP_21(bool) = TMP_19 || TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_17(mapping(address => uint256)) -> allowance[msg.sender]
REF_18(uint256) -> REF_17[_spender]
REF_18(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isRunning()

IRs:
MODIFIER_CALL, Planethereum.isRunning()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
validAddress()

IRs:
MODIFIER_CALL, Planethereum.validAddress()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 579.sol-Planethereum-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_19(uint256) -> balanceOf[msg.sender]
TMP_29(bool) = REF_19 >= _value
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_20(uint256) -> balanceOf[msg.sender]
REF_20(-> balanceOf) = REF_20 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[0x0] += _value

IRs:
REF_21(uint256) -> balanceOf[0]
REF_21(-> balanceOf) = REF_21 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,0x0,_value)

IRs:
Emit Transfer(msg.sender,0,_value)"];
}
// Function: 579.sol-Planethereum-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(owner == msg.sender)

IRs:
TMP_32(bool) = owner == msg.sender
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 579.sol-Planethereum-isRunning()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! stopped)

IRs:
TMP_34 = UnaryType.BANG stopped 
TMP_35(None) = SOLIDITY_CALL assert(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 579.sol-Planethereum-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Planethereum.isOwner()()"];
2->1;
}
// Function: 579.sol-Planethereum-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
valueFounder = 21000000000000

IRs:
valueFounder(uint256) := 21000000000000(uint256)"];
}
// Function: 579.sol-Planethereum-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Planethereum 

IRs:
name(string) := Planethereum (string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = PLNX

IRs:
symbol(string) := PLNX(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 6

IRs:
decimals(uint256) := 6(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
owner = 0x0

IRs:
owner(address) := 0(uint256)"];
}
// Function: 579.sol-Planethereum-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Planethereum.isOwner()()"];
2->1;
}
// Function: 579.sol-Planethereum-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Planethereum.isOwner()()"];
2->1;
}
// Function: 579.sol-Planethereum-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_1(bool) = REF_1 >= _value
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_3(uint256) = REF_2 + _value
REF_3(uint256) -> balanceOf[_to]
TMP_4(bool) = TMP_3 >= REF_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_4(uint256) -> balanceOf[msg.sender]
REF_4(-> balanceOf) = REF_4 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_5(uint256) -> balanceOf[_to]
REF_5(-> balanceOf) = REF_5 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isRunning()

IRs:
MODIFIER_CALL, Planethereum.isRunning()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
validAddress()

IRs:
MODIFIER_CALL, Planethereum.validAddress()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 579.sol-Planethereum-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_6(uint256) -> balanceOf[_from]
TMP_9(bool) = REF_6 >= _value
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_7(uint256) -> balanceOf[_to]
TMP_11(uint256) = REF_7 + _value
REF_8(uint256) -> balanceOf[_to]
TMP_12(bool) = TMP_11 >= REF_8
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(allowance[_from][msg.sender] >= _value)

IRs:
REF_9(mapping(address => uint256)) -> allowance[_from]
REF_10(uint256) -> REF_9[msg.sender]
TMP_14(bool) = REF_10 >= _value
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_11(uint256) -> balanceOf[_to]
REF_11(-> balanceOf) = REF_11 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_12(uint256) -> balanceOf[_from]
REF_12(-> balanceOf) = REF_12 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_13(mapping(address => uint256)) -> allowance[_from]
REF_14(uint256) -> REF_13[msg.sender]
REF_14(-> allowance) = REF_14 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isRunning()

IRs:
MODIFIER_CALL, Planethereum.isRunning()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
validAddress()

IRs:
MODIFIER_CALL, Planethereum.validAddress()()"];
10->1;
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 579.sol-Planethereum-validAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(0x0 != msg.sender)

IRs:
TMP_36(bool) = 0 != msg.sender
TMP_37(None) = SOLIDITY_CALL assert(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
