digraph G {
// Function: 61.sol-Aeroneum-Aeroneum(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = ARM

IRs:
symbol(string) := ARM(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = Aeroneum

IRs:
name(string) := Aeroneum(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rate = 5000000

IRs:
rate(uint256) := 5000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
mintx = 16

IRs:
mintx(uint8) := 16(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_totalSupply = totalSupply()

IRs:
TMP_27(uint256) = INTERNAL_CALL, Aeroneum.totalSupply()()
_totalSupply(uint256) := TMP_27(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_tokenToSale = (_totalSupply.mul(95)).div(100)

IRs:
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_totalSupply', '95'] 
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_28', '100'] 
_tokenToSale(uint256) := TMP_29(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_ownersTokens = _totalSupply - _tokenToSale

IRs:
TMP_30(uint256) = _totalSupply - _tokenToSale
_ownersTokens(uint256) := TMP_30(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[this] = _tokenToSale

IRs:
REF_2(uint256) -> balances[this]
REF_2(uint256) (->balances) := _tokenToSale(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[owner] = _ownersTokens

IRs:
REF_3(uint256) -> balances[owner]
REF_3(uint256) (->balances) := _ownersTokens(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(address(0),this,_tokenToSale)

IRs:
TMP_31 = CONVERT 0 to address
Emit Transfer(TMP_31,this,_tokenToSale)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Transfer(address(0),owner,_ownersTokens)

IRs:
TMP_33 = CONVERT 0 to address
Emit Transfer(TMP_33,owner,_ownersTokens)"];
}
// Function: 61.sol-Aeroneum-_deliverTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_beneficiary,_tokenAmount)

IRs:
TMP_85(bool) = INTERNAL_CALL, Aeroneum._transfer(address,uint256)(_beneficiary,_tokenAmount)"];
}
// Function: 61.sol-Aeroneum-_forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 61.sol-Aeroneum-_getTokenAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_weiAmount < 1 * 10 ** uint256(mintx)

IRs:
TMP_77 = CONVERT mintx to uint256
TMP_78(uint256) = 10 ** TMP_77
TMP_79(uint256) = 1 * TMP_78
TMP_80(bool) = _weiAmount < TMP_79
CONDITION TMP_80"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
50 * 10 ** uint256(decimals)

IRs:
TMP_81 = CONVERT decimals to uint256
TMP_82(uint256) = 10 ** TMP_81
TMP_83(uint256) = 50 * TMP_82
RETURN TMP_83"];
3[label="Node Type: RETURN 3

EXPRESSION:
_weiAmount.mul(rate)

IRs:
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_weiAmount', 'rate'] 
RETURN TMP_84"];
}
// Function: 61.sol-Aeroneum-_preValidatePurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0x0))

IRs:
TMP_74 = CONVERT 0 to address
TMP_75(bool) = _beneficiary != TMP_74
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
}
// Function: 61.sol-Aeroneum-_processPurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_deliverTokens(_beneficiary,_tokenAmount)

IRs:
INTERNAL_CALL, Aeroneum._deliverTokens(address,uint256)(_beneficiary,_tokenAmount)"];
}
// Function: 61.sol-Aeroneum-_transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_48(bool) = _to != 0
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[this] >= _tokens)

IRs:
REF_14(uint256) -> balances[this]
TMP_50(bool) = REF_14 >= _tokens
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[_to] + _tokens >= balances[_to])

IRs:
REF_15(uint256) -> balances[_to]
TMP_52(uint256) = REF_15 + _tokens
REF_16(uint256) -> balances[_to]
TMP_53(bool) = TMP_52 >= REF_16
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[this] = balances[this].sub(_tokens)

IRs:
REF_17(uint256) -> balances[this]
REF_18(uint256) -> balances[this]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', '_tokens'] 
REF_17(uint256) (->balances) := TMP_55(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_tokens)

IRs:
REF_20(uint256) -> balances[_to]
REF_21(uint256) -> balances[_to]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', '_tokens'] 
REF_20(uint256) (->balances) := TMP_56(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(this,_to,_tokens)

IRs:
Emit Transfer(this,_to,_tokens)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 61.sol-Aeroneum-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_23(bool) = msg.sender == newOwner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
newOwner(address) := TMP_26(address)"];
}
// Function: 61.sol-Aeroneum-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_39(mapping(address => uint256)) -> allowed[tokenOwner]
REF_40(uint256) -> REF_39[spender]
RETURN REF_40"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 61.sol-Aeroneum-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_23(mapping(address => uint256)) -> allowed[msg.sender]
REF_24(uint256) -> REF_23[spender]
REF_24(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 61.sol-Aeroneum-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_4(uint256) -> balances[tokenOwner]
RETURN REF_4"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 61.sol-Aeroneum-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_preValidatePurchase(_beneficiary,weiAmount)

IRs:
INTERNAL_CALL, Aeroneum._preValidatePurchase(address,uint256)(_beneficiary,weiAmount)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokens = _getTokenAmount(weiAmount)

IRs:
TMP_69(uint256) = INTERNAL_CALL, Aeroneum._getTokenAmount(uint256)(weiAmount)
tokens(uint256) := TMP_69(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_70(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_processPurchase(_beneficiary,tokens)

IRs:
INTERNAL_CALL, Aeroneum._processPurchase(address,uint256)(_beneficiary,tokens)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
TokenPurchase(this,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(this,_beneficiary,weiAmount,tokens)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_forwardFunds()

IRs:
INTERNAL_CALL, Aeroneum._forwardFunds()()"];
}
// Function: 61.sol-Aeroneum-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Aeroneum.buyTokens(address)(msg.sender)"];
}
// Function: 61.sol-Aeroneum-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_88(bool) = msg.sender == owner
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 61.sol-Aeroneum-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
11000000000 * 10 ** uint256(decimals)

IRs:
TMP_35 = CONVERT decimals to uint256
TMP_36(uint256) = 10 ** TMP_35
TMP_37(uint256) = 11000000000 * TMP_36
RETURN TMP_37"];
}
// Function: 61.sol-Aeroneum-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != 0x0)

IRs:
TMP_38(bool) = to != 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= tokens)

IRs:
REF_5(uint256) -> balances[msg.sender]
TMP_40(bool) = REF_5 >= tokens
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[to] + tokens >= balances[to])

IRs:
REF_6(uint256) -> balances[to]
TMP_42(uint256) = REF_6 + tokens
REF_7(uint256) -> balances[to]
TMP_43(bool) = TMP_42 >= REF_7
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(tokens)

IRs:
REF_8(uint256) -> balances[msg.sender]
REF_9(uint256) -> balances[msg.sender]
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_9', 'tokens'] 
REF_8(uint256) (->balances) := TMP_45(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_11(uint256) -> balances[to]
REF_12(uint256) -> balances[to]
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', 'tokens'] 
REF_11(uint256) (->balances) := TMP_46(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 61.sol-Aeroneum-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokens <= allowed[from][msg.sender])

IRs:
REF_25(mapping(address => uint256)) -> allowed[from]
REF_26(uint256) -> REF_25[msg.sender]
TMP_59(bool) = tokens <= REF_26
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[from] >= tokens)

IRs:
REF_27(uint256) -> balances[from]
TMP_61(bool) = REF_27 >= tokens
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_28(uint256) -> balances[from]
REF_29(uint256) -> balances[from]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_29', 'tokens'] 
REF_28(uint256) (->balances) := TMP_63(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_31(uint256) -> balances[to]
REF_32(uint256) -> balances[to]
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_32', 'tokens'] 
REF_31(uint256) (->balances) := TMP_64(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_34(mapping(address => uint256)) -> allowed[from]
REF_35(uint256) -> REF_34[msg.sender]
REF_36(mapping(address => uint256)) -> allowed[from]
REF_37(uint256) -> REF_36[msg.sender]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_37', 'tokens'] 
REF_35(uint256) (->allowed) := TMP_65(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 61.sol-Aeroneum-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 61.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 61.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 61.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 61.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 61.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 61.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 61.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_1(bool) = msg.sender == newOwner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_4 = CONVERT 0 to address
newOwner(address) := TMP_4(address)"];
}
// Function: 61.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 61.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 61.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_7(uint256) = a + b
c(uint256) := TMP_7(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_8(bool) = c >= a
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 61.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_19(bool) = b > 0
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_21(uint256) = a / b
c(uint256) := TMP_21(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 61.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_13(uint256) = a * b
c(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_14(bool) = a == 0
TMP_15(uint256) = c / a
TMP_16(bool) = TMP_15 == b
TMP_17(bool) = TMP_14 || TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 61.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_10(bool) = b <= a
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_12(uint256) = a - b
c(uint256) := TMP_12(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
