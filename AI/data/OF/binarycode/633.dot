digraph G {
// Function: 633.sol-NABC-NABC()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = amount1 + amount2

IRs:
TMP_39(uint256) = amount1 + amount2
totalSupply(uint256) := TMP_39(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[account1] = amount1

IRs:
REF_36(uint256) -> balances[account1]
REF_36(uint256) (->balances) := amount1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[account2] = amount2

IRs:
REF_37(uint256) -> balances[account2]
REF_37(uint256) (->balances) := amount2(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = 2 * 10000 * 10000 * 10 ** decimals

IRs:
REF_38(uint256) -> balances[msg.sender]
TMP_40(uint256) = 2 * 10000
TMP_41(uint256) = TMP_40 * 10000
TMP_42(uint256) = 10 ** decimals
TMP_43(uint256) = TMP_41 * TMP_42
REF_38(uint256) (->balances) := TMP_43(uint256)"];
}
// Function: 633.sol-NABC-_addressNotNull(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_to != address(0)

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = _to != TMP_22
RETURN TMP_23"];
}
// Function: 633.sol-NABC-addBlackAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addressNotNull(_b))

IRs:
TMP_24(bool) = INTERNAL_CALL, NABC._addressNotNull(address)(_b)
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
blackmap[_b] = 1

IRs:
REF_30(uint256) -> blackmap[_b]
REF_30(uint256) (->blackmap) := 1(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, NABC.onlyCreator()()"];
3->1;
}
// Function: 633.sol-NABC-allowance(address,address)
digraph{
}
// Function: 633.sol-NABC-approve(address,uint256)
digraph{
}
// Function: 633.sol-NABC-balanceOf(address)
digraph{
}
// Function: 633.sol-NABC-checkBlackAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addressNotNull(_b))

IRs:
TMP_30(bool) = INTERNAL_CALL, NABC._addressNotNull(address)(_b)
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
blackmap[_b]

IRs:
REF_32(uint256) -> blackmap[_b]
RETURN REF_32"];
}
// Function: 633.sol-NABC-checkReleaseAmount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addressNotNull(_b))

IRs:
TMP_37(bool) = INTERNAL_CALL, NABC._addressNotNull(address)(_b)
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
releaseamount[_b]

IRs:
REF_35(uint256) -> releaseamount[_b]
RETURN REF_35"];
}
// Function: 633.sol-NABC-clearBlackAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addressNotNull(_b))

IRs:
TMP_27(bool) = INTERNAL_CALL, NABC._addressNotNull(address)(_b)
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
blackmap[_b] = 0

IRs:
REF_31(uint256) -> blackmap[_b]
REF_31(uint256) (->blackmap) := 0(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, NABC.onlyCreator()()"];
3->1;
}
// Function: 633.sol-NABC-onlyCreator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == creator)

IRs:
TMP_59(bool) = msg.sender == creator
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 633.sol-NABC-setReleaseAmount(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addressNotNull(_b))

IRs:
TMP_32(bool) = INTERNAL_CALL, NABC._addressNotNull(address)(_b)
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_b] >= _a)

IRs:
REF_33(uint256) -> balances[_b]
TMP_34(bool) = REF_33 >= _a
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
releaseamount[_b] = _a

IRs:
REF_34(uint256) -> releaseamount[_b]
REF_34(uint256) (->releaseamount) := _a(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, NABC.onlyCreator()()"];
4->1;
}
// Function: 633.sol-NABC-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = NABC

IRs:
name(string) := NABC(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = NABC

IRs:
symbol(string) := NABC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 633.sol-NABC-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
account1 = 0xA1eA1e293839e2005a8E47f772B758DaBC0515FB

IRs:
account1(address) := 924368515873986638320019780654512387667154769403(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
account2 = 0xD285bB3f0d0A6271d535Bd37798A452892466De0

IRs:
account2(address) := 1201870372437003111760728632040232029966586768864(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
amount1 = 34 * 10000 * 10000 * 10 ** decimals

IRs:
TMP_51(uint256) = 34 * 10000
TMP_52(uint256) = TMP_51 * 10000
TMP_53(uint256) = 10 ** decimals
TMP_54(uint256) = TMP_52 * TMP_53
amount1(uint256) := TMP_54(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
amount2 = 14 * 10000 * 10000 * 10 ** decimals

IRs:
TMP_55(uint256) = 14 * 10000
TMP_56(uint256) = TMP_55 * 10000
TMP_57(uint256) = 10 ** decimals
TMP_58(uint256) = TMP_56 * TMP_57
amount2(uint256) := TMP_58(uint256)"];
}
// Function: 633.sol-NABC-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_39(uint256) -> balances[msg.sender]
TMP_44(bool) = REF_39 >= _value
TMP_45(bool) = _value > 0
TMP_46(bool) = TMP_44 && TMP_45
CONDITION TMP_46"];
1->2[label="True"];
1->16[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
blackmap[msg.sender] != 0

IRs:
REF_40(uint256) -> blackmap[msg.sender]
TMP_47(bool) = REF_40 != 0
CONDITION TMP_47"];
2->3[label="True"];
2->11[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
releaseamount[msg.sender] < _value

IRs:
REF_41(uint256) -> releaseamount[msg.sender]
TMP_48(bool) = REF_41 < _value
CONDITION TMP_48"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseamount[msg.sender] -= _value

IRs:
REF_42(uint256) -> releaseamount[msg.sender]
REF_42(-> releaseamount) = REF_42 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_43(uint256) -> balances[msg.sender]
REF_43(-> balances) = REF_43 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] += _value

IRs:
REF_44(uint256) -> balances[_to]
REF_44(-> balances) = REF_44 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_45(uint256) -> balances[msg.sender]
REF_45(-> balances) = REF_45 - _value"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[_to] += _value

IRs:
REF_46(uint256) -> balances[_to]
REF_46(-> balances) = REF_46 + _value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: RETURN 16

EXPRESSION:
false

IRs:
RETURN False"];
18[label="Node Type: RETURN 18

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 633.sol-NABC-transferFrom(address,address,uint256)
digraph{
}
// Function: 633.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 633.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 633.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 633.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
TMP_1(bool) = _value > 0
TMP_2(bool) = TMP_0 && TMP_1
CONDITION TMP_2"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 633.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_4(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_5(bool) = REF_5 >= _value
TMP_6(bool) = TMP_4 && TMP_5
TMP_7(bool) = _value > 0
TMP_8(bool) = TMP_6 && TMP_7
CONDITION TMP_8"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 633.sol-Token-allowance(address,address)
digraph{
}
// Function: 633.sol-Token-approve(address,uint256)
digraph{
}
// Function: 633.sol-Token-balanceOf(address)
digraph{
}
// Function: 633.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 633.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
