digraph G {
// Function: 644.sol-AgriChainToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == newOwner,Not new contract owner.)

IRs:
TMP_25(bool) = msg.sender == newOwner
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,Not new contract owner.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_28 = CONVERT 0 to address
newOwner(address) := TMP_28(address)"];
}
// Function: 644.sol-AgriChainToken-addAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
administrators[_admin] = true

IRs:
REF_39(bool) -> administrators[_admin]
REF_39(bool) (->administrators) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 644.sol-AgriChainToken-allowTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isAllowingTransfers = true

IRs:
isAllowingTransfers(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AllowTransfers()

IRs:
Emit AllowTransfers()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AgriChainToken.onlyAdmin()()"];
3->1;
}
// Function: 644.sol-AgriChainToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_23(mapping(address => uint256)) -> allowed[tokenOwner]
REF_24(uint256) -> REF_23[spender]
RETURN REF_24"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 644.sol-AgriChainToken-allowingTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isAllowingTransfers,Contract currently not allowing transfers.)

IRs:
TMP_74(None) = SOLIDITY_CALL require(bool,string)(isAllowingTransfers,Contract currently not allowing transfers.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 644.sol-AgriChainToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[spender]
REF_11(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 644.sol-AgriChainToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_25(mapping(address => uint256)) -> allowed[msg.sender]
REF_26(uint256) -> REF_25[spender]
REF_26(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_47 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_47(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 644.sol-AgriChainToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_3(uint256) -> balances[tokenOwner]
RETURN REF_3"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 644.sol-AgriChainToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_value <= balances[msg.sender],Burn value exceeds balance.)

IRs:
REF_34(uint256) -> balances[msg.sender]
TMP_60(bool) = _value <= REF_34
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,Burn value exceeds balance.)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_35(uint256) -> balances[burner]
REF_36(uint256) -> balances[burner]
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_36', '_value'] 
REF_35(uint256) (->balances) := TMP_62(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = _totalSupply.sub(_value)

IRs:
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', '_value'] 
_totalSupply(uint256) := TMP_63(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AgriChainToken.onlyAdmin()()"];
6->1;
}
// Function: 644.sol-AgriChainToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 644.sol-AgriChainToken-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = AGRI

IRs:
symbol(string) := AGRI(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = AgriChain Utility Token

IRs:
name(string) := AgriChain Utility Token(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = initialTokenSupply * 10 ** uint256(decimals)

IRs:
TMP_29 = CONVERT decimals to uint256
TMP_30(uint256) = 10 ** TMP_29
TMP_31(uint256) = initialTokenSupply * TMP_30
_totalSupply(uint256) := TMP_31(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = _totalSupply

IRs:
REF_0(uint256) -> balances[owner]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),owner,_totalSupply)

IRs:
TMP_32 = CONVERT 0 to address
Emit Transfer(TMP_32,owner,_totalSupply)"];
}
// Function: 644.sol-AgriChainToken-disallowTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isAllowingTransfers = false

IRs:
isAllowingTransfers(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DisallowTransfers()

IRs:
Emit DisallowTransfers()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AgriChainToken.onlyAdmin()()"];
3->1;
}
// Function: 644.sol-AgriChainToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert(string)(Contract does not accept ETH.)

IRs:
TMP_49(None) = SOLIDITY_CALL revert(string)(Contract does not accept ETH.)"];
}
// Function: 644.sol-AgriChainToken-mintTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_totalSupply.add(_value) <= MAX_SUPPLY,Cannot mint greater than maximum supply.)

IRs:
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', '_value'] 
TMP_54(bool) = TMP_53 <= MAX_SUPPLY
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,Cannot mint greater than maximum supply.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(_value)

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_31(uint256) -> balances[msg.sender]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_31', '_value'] 
REF_30(uint256) (->balances) := TMP_56(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.add(_value)

IRs:
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', '_value'] 
_totalSupply(uint256) := TMP_57(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(0,msg.sender,_value)

IRs:
Emit Transfer(0,msg.sender,_value)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AgriChainToken.onlyAdmin()()"];
5->1;
}
// Function: 644.sol-AgriChainToken-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(administrators[msg.sender],Not contract administrator.)

IRs:
REF_41(bool) -> administrators[msg.sender]
TMP_75(None) = SOLIDITY_CALL require(bool,string)(REF_41,Not contract administrator.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 644.sol-AgriChainToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,Not contract owner.)

IRs:
TMP_72(bool) = msg.sender == owner
TMP_73(None) = SOLIDITY_CALL require(bool,string)(TMP_72,Not contract owner.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 644.sol-AgriChainToken-removeAdministrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
administrators[_admin] = false

IRs:
REF_40(bool) -> administrators[_admin]
REF_40(bool) (->administrators) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 644.sol-AgriChainToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_SUPPLY = 1000000000000000000000000000

IRs:
MAX_SUPPLY(uint256) := 1000000000000000000000000000(uint256)"];
}
// Function: 644.sol-AgriChainToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply.sub(balances[address(0)])

IRs:
TMP_34 = CONVERT 0 to address
REF_2(uint256) -> balances[TMP_34]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'REF_2'] 
RETURN TMP_35"];
}
// Function: 644.sol-AgriChainToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(tokens)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', 'tokens'] 
REF_4(uint256) (->balances) := TMP_36(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_7(uint256) -> balances[to]
REF_8(uint256) -> balances[to]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', 'tokens'] 
REF_7(uint256) (->balances) := TMP_37(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowingTransfers()

IRs:
MODIFIER_CALL, AgriChainToken.allowingTransfers()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 644.sol-AgriChainToken-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_50 = CONVERT tokenAddress to ERC20Interface
TMP_51(bool) = HIGH_LEVEL_CALL, dest:TMP_50(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_51"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AgriChainToken.onlyAdmin()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 644.sol-AgriChainToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_12(uint256) -> balances[from]
REF_13(uint256) -> balances[from]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_13', 'tokens'] 
REF_12(uint256) (->balances) := TMP_41(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_15(mapping(address => uint256)) -> allowed[from]
REF_16(uint256) -> REF_15[msg.sender]
REF_17(mapping(address => uint256)) -> allowed[from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', 'tokens'] 
REF_16(uint256) (->allowed) := TMP_42(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_20(uint256) -> balances[to]
REF_21(uint256) -> balances[to]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', 'tokens'] 
REF_20(uint256) (->balances) := TMP_43(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowingTransfers()

IRs:
MODIFIER_CALL, AgriChainToken.allowingTransfers()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 644.sol-AgriChainToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 644.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 644.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 644.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 644.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 644.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 644.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 644.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 644.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == newOwner,Not new contract owner.)

IRs:
TMP_18(bool) = msg.sender == newOwner
TMP_19(None) = SOLIDITY_CALL require(bool,string)(TMP_18,Not new contract owner.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_21 = CONVERT 0 to address
newOwner(address) := TMP_21(address)"];
}
// Function: 644.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 644.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,Not contract owner.)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,Not contract owner.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 644.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 644.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_11(uint256) = _a + _b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= _a,Addition overflow error.)

IRs:
TMP_12(bool) = c >= _a
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,Addition overflow error.)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 644.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_b > 0,Divide by zero error.)

IRs:
TMP_5(bool) = _b > 0
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,Divide by zero error.)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a / _b

IRs:
TMP_7(uint256) = _a / _b
c(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 644.sol-SafeMath-mod(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b != 0,Mod overflow error)

IRs:
TMP_14(bool) = b != 0
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,Mod overflow error)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a % b

IRs:
TMP_16(uint256) = a % b
RETURN TMP_16"];
}
// Function: 644.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / _a == _b,Muliply overflow error.)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,Muliply overflow error.)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 644.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_b <= _a,Subtraction overflow error.)

IRs:
TMP_8(bool) = _b <= _a
TMP_9(None) = SOLIDITY_CALL require(bool,string)(TMP_8,Subtraction overflow error.)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a - _b

IRs:
TMP_10(uint256) = _a - _b
c(uint256) := TMP_10(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
