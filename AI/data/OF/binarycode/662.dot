digraph G {
// Function: 662.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 662.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 662.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 662.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 662.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 662.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 662.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 662.sol-GEONToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_23(bool) = msg.sender == newOwner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
newOwner(address) := TMP_26(address)"];
}
// Function: 662.sol-GEONToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_23(mapping(address => uint256)) -> allowed[tokenOwner]
REF_24(uint256) -> REF_23[spender]
RETURN REF_24"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 662.sol-GEONToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[spender]
REF_11(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 662.sol-GEONToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_25(mapping(address => uint256)) -> allowed[msg.sender]
REF_26(uint256) -> REF_25[spender]
REF_26(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_43 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_43(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 662.sol-GEONToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_3(uint256) -> balances[tokenOwner]
RETURN REF_3"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 662.sol-GEONToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = GEON

IRs:
symbol(string) := GEON(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = GEON

IRs:
name(string) := GEON(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 850000000 * 10 ** uint256(decimals)

IRs:
TMP_27 = CONVERT decimals to uint256
TMP_28(uint256) = 10 ** TMP_27
TMP_29(uint256) = 850000000 * TMP_28
_totalSupply(uint256) := TMP_29(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = _totalSupply

IRs:
REF_0(uint256) -> balances[owner]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),owner,_totalSupply)

IRs:
TMP_30 = CONVERT 0 to address
Emit Transfer(TMP_30,owner,_totalSupply)"];
}
// Function: 662.sol-GEONToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_45(None) = SOLIDITY_CALL revert()()"];
}
// Function: 662.sol-GEONToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_49(bool) = msg.sender == owner
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 662.sol-GEONToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply.sub(balances[address(0)])

IRs:
TMP_32 = CONVERT 0 to address
REF_2(uint256) -> balances[TMP_32]
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'REF_2'] 
RETURN TMP_33"];
}
// Function: 662.sol-GEONToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(tokens)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', 'tokens'] 
REF_4(uint256) (->balances) := TMP_34(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_7(uint256) -> balances[to]
REF_8(uint256) -> balances[to]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', 'tokens'] 
REF_7(uint256) (->balances) := TMP_35(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 662.sol-GEONToken-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_46 = CONVERT tokenAddress to ERC20Interface
TMP_47(bool) = HIGH_LEVEL_CALL, dest:TMP_46(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_47"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 662.sol-GEONToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_12(uint256) -> balances[from]
REF_13(uint256) -> balances[from]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_13', 'tokens'] 
REF_12(uint256) (->balances) := TMP_38(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_15(mapping(address => uint256)) -> allowed[from]
REF_16(uint256) -> REF_15[msg.sender]
REF_17(mapping(address => uint256)) -> allowed[from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', 'tokens'] 
REF_16(uint256) (->allowed) := TMP_39(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_20(uint256) -> balances[to]
REF_21(uint256) -> balances[to]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', 'tokens'] 
REF_20(uint256) (->balances) := TMP_40(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 662.sol-GEONToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 662.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_16(bool) = msg.sender == newOwner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_19 = CONVERT 0 to address
newOwner(address) := TMP_19(address)"];
}
// Function: 662.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 662.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 662.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 662.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 662.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 662.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 662.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
