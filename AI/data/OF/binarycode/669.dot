digraph G {
// Function: 669.sol-TokenERC20-transfer(address,uint256)
digraph{
}
// Function: 669.sol-locksdc2-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 669.sol-locksdc2-getAccountInputSdcslength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
accountInputSdcs[msg.sender].length

IRs:
REF_32(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_33 -> LENGTH REF_32
RETURN REF_33"];
2[label="Node Type: RETURN 2

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 669.sol-locksdc2-getAccountOutputSdcslength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
accountOutputSdcs[msg.sender].length

IRs:
REF_34(locksdc2.accountOutputSdc[]) -> accountOutputSdcs[msg.sender]
REF_35 -> LENGTH REF_34
RETURN REF_35"];
2[label="Node Type: RETURN 2

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 669.sol-locksdc2-getLockSdc()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmpLockSdc = 0

IRs:
tmpLockSdc(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < accountInputSdcs[msg.sender].length

IRs:
REF_36(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_37 -> LENGTH REF_36
TMP_29(bool) = i < REF_37
CONDITION TMP_29"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
now < accountInputSdcs[msg.sender][i].locktime

IRs:
REF_38(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_39(locksdc2.accountInputSdc) -> REF_38[i]
REF_40(uint256) -> REF_39.locktime
TMP_30(bool) = now < REF_40
CONDITION TMP_30"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tmpLockSdc = tmpLockSdc + accountInputSdcs[msg.sender][i].sdc

IRs:
REF_41(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_42(locksdc2.accountInputSdc) -> REF_41[i]
REF_43(uint256) -> REF_42.sdc
TMP_31(uint256) = tmpLockSdc + REF_43
tmpLockSdc(uint256) := TMP_31(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_32(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
tmpLockSdc

IRs:
RETURN tmpLockSdc"];
11[label="Node Type: RETURN 11

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 669.sol-locksdc2-getUnlockSdc()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmpUnlockSdc = unlockSdc[msg.sender]

IRs:
REF_44(uint256) -> unlockSdc[msg.sender]
tmpUnlockSdc(uint256) := REF_44(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < accountInputSdcs[msg.sender].length

IRs:
REF_45(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_46 -> LENGTH REF_45
TMP_33(bool) = i < REF_46
CONDITION TMP_33"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
now >= accountInputSdcs[msg.sender][i].locktime

IRs:
REF_47(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_48(locksdc2.accountInputSdc) -> REF_47[i]
REF_49(uint256) -> REF_48.locktime
TMP_34(bool) = now >= REF_49
CONDITION TMP_34"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tmpUnlockSdc = tmpUnlockSdc + accountInputSdcs[msg.sender][i].sdc

IRs:
REF_50(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_51(locksdc2.accountInputSdc) -> REF_50[i]
REF_52(uint256) -> REF_51.sdc
TMP_35(uint256) = tmpUnlockSdc + REF_52
tmpUnlockSdc(uint256) := TMP_35(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_36(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
tmpUnlockSdc

IRs:
RETURN tmpUnlockSdc"];
11[label="Node Type: RETURN 11

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 669.sol-locksdc2-inSdcForAdmin(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == sdcMainAcc)

IRs:
TMP_0(bool) = msg.sender == sdcMainAcc
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
accountInputSdcs[_address].push(accountInputSdc(_address,_sdc,_locktime,now))

IRs:
REF_0(locksdc2.accountInputSdc[]) -> accountInputSdcs[_address]
TMP_2(locksdc2.accountInputSdc) = new accountInputSdc(_address,_sdc,_locktime,now)
REF_2 -> LENGTH REF_0
TMP_4(uint256) := REF_2(uint256)
TMP_5(uint256) = TMP_4 + 1
REF_2(uint256) (->accountInputSdcs) := TMP_5(uint256)
REF_3(locksdc2.accountInputSdc) -> REF_0[TMP_4]
REF_3(locksdc2.accountInputSdc) (->accountInputSdcs) := TMP_2(locksdc2.accountInputSdc)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lockLogs(msg.sender,_address,_sdc,_locktime,true)

IRs:
Emit lockLogs(msg.sender,_address,_sdc,_locktime,True)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
accoutInputOutputSdcLogs[_address].push(accoutInputOutputSdcLog(_address,_sdc,_locktime,true,now))

IRs:
REF_4(locksdc2.accoutInputOutputSdcLog[]) -> accoutInputOutputSdcLogs[_address]
TMP_7(locksdc2.accoutInputOutputSdcLog) = new accoutInputOutputSdcLog(_address,_sdc,_locktime,True,now)
REF_6 -> LENGTH REF_4
TMP_9(uint256) := REF_6(uint256)
TMP_10(uint256) = TMP_9 + 1
REF_6(uint256) (->accoutInputOutputSdcLogs) := TMP_10(uint256)
REF_7(locksdc2.accoutInputOutputSdcLog) -> REF_4[TMP_9]
REF_7(locksdc2.accoutInputOutputSdcLog) (->accoutInputOutputSdcLogs) := TMP_7(locksdc2.accoutInputOutputSdcLog)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 669.sol-locksdc2-insetMoney()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < accountInputSdcs[msg.sender].length

IRs:
REF_53(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_54 -> LENGTH REF_53
TMP_37(bool) = i < REF_54
CONDITION TMP_37"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
now >= accountInputSdcs[msg.sender][i].locktime

IRs:
REF_55(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_56(locksdc2.accountInputSdc) -> REF_55[i]
REF_57(uint256) -> REF_56.locktime
TMP_38(bool) = now >= REF_57
CONDITION TMP_38"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unlockSdc[msg.sender] = unlockSdc[msg.sender] + accountInputSdcs[msg.sender][i].sdc

IRs:
REF_58(uint256) -> unlockSdc[msg.sender]
REF_59(uint256) -> unlockSdc[msg.sender]
REF_60(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_61(locksdc2.accountInputSdc) -> REF_60[i]
REF_62(uint256) -> REF_61.sdc
TMP_39(uint256) = REF_59 + REF_62
REF_58(uint256) (->unlockSdc) := TMP_39(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
accountInputSdcs[msg.sender][i] = accountInputSdc(msg.sender,0,999999999999,now)

IRs:
REF_63(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_64(locksdc2.accountInputSdc) -> REF_63[i]
TMP_40(locksdc2.accountInputSdc) = new accountInputSdc(msg.sender,0,999999999999,now)
REF_64(locksdc2.accountInputSdc) (->accountInputSdcs) := TMP_40(locksdc2.accountInputSdc)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_41(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 669.sol-locksdc2-nowInSeconds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now

IRs:
RETURN now"];
}
// Function: 669.sol-locksdc2-outSdcForUser(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < accountInputSdcs[msg.sender].length

IRs:
REF_8(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_9 -> LENGTH REF_8
TMP_11(bool) = i < REF_9
CONDITION TMP_11"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
now >= accountInputSdcs[msg.sender][i].locktime

IRs:
REF_10(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_11(locksdc2.accountInputSdc) -> REF_10[i]
REF_12(uint256) -> REF_11.locktime
TMP_12(bool) = now >= REF_12
CONDITION TMP_12"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unlockSdc[msg.sender] = unlockSdc[msg.sender] + accountInputSdcs[msg.sender][i].sdc

IRs:
REF_13(uint256) -> unlockSdc[msg.sender]
REF_14(uint256) -> unlockSdc[msg.sender]
REF_15(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_16(locksdc2.accountInputSdc) -> REF_15[i]
REF_17(uint256) -> REF_16.sdc
TMP_13(uint256) = REF_14 + REF_17
REF_13(uint256) (->unlockSdc) := TMP_13(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
accountInputSdcs[msg.sender][i] = accountInputSdc(msg.sender,0,999999999999,now)

IRs:
REF_18(locksdc2.accountInputSdc[]) -> accountInputSdcs[msg.sender]
REF_19(locksdc2.accountInputSdc) -> REF_18[i]
TMP_14(locksdc2.accountInputSdc) = new accountInputSdc(msg.sender,0,999999999999,now)
REF_19(locksdc2.accountInputSdc) (->accountInputSdcs) := TMP_14(locksdc2.accountInputSdc)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_15(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(unlockSdc[msg.sender] >= _sdc)

IRs:
REF_20(uint256) -> unlockSdc[msg.sender]
TMP_16(bool) = REF_20 >= _sdc
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sdcCon.transfer(msg.sender,_sdc)

IRs:
HIGH_LEVEL_CALL, dest:sdcCon(TokenERC20), function:transfer, arguments:['msg.sender', '_sdc']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
unlockSdc[msg.sender] = unlockSdc[msg.sender] - _sdc

IRs:
REF_22(uint256) -> unlockSdc[msg.sender]
REF_23(uint256) -> unlockSdc[msg.sender]
TMP_19(uint256) = REF_23 - _sdc
REF_22(uint256) (->unlockSdc) := TMP_19(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockLogs(msg.sender,msg.sender,_sdc,now,false)

IRs:
Emit lockLogs(msg.sender,msg.sender,_sdc,now,False)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
accountOutputSdcs[msg.sender].push(accountOutputSdc(msg.sender,_sdc,now))

IRs:
REF_24(locksdc2.accountOutputSdc[]) -> accountOutputSdcs[msg.sender]
TMP_21(locksdc2.accountOutputSdc) = new accountOutputSdc(msg.sender,_sdc,now)
REF_26 -> LENGTH REF_24
TMP_23(uint256) := REF_26(uint256)
TMP_24(uint256) = TMP_23 + 1
REF_26(uint256) (->accountOutputSdcs) := TMP_24(uint256)
REF_27(locksdc2.accountOutputSdc) -> REF_24[TMP_23]
REF_27(locksdc2.accountOutputSdc) (->accountOutputSdcs) := TMP_21(locksdc2.accountOutputSdc)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
accoutInputOutputSdcLogs[msg.sender].push(accoutInputOutputSdcLog(msg.sender,_sdc,999999999999,false,now))

IRs:
REF_28(locksdc2.accoutInputOutputSdcLog[]) -> accoutInputOutputSdcLogs[msg.sender]
TMP_25(locksdc2.accoutInputOutputSdcLog) = new accoutInputOutputSdcLog(msg.sender,_sdc,999999999999,False,now)
REF_30 -> LENGTH REF_28
TMP_27(uint256) := REF_30(uint256)
TMP_28(uint256) = TMP_27 + 1
REF_30(uint256) (->accoutInputOutputSdcLogs) := TMP_28(uint256)
REF_31(locksdc2.accoutInputOutputSdcLog) -> REF_28[TMP_27]
REF_31(locksdc2.accoutInputOutputSdcLog) (->accoutInputOutputSdcLogs) := TMP_25(locksdc2.accoutInputOutputSdcLog)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: RETURN 17

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 669.sol-locksdc2-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
sdcContractAddr = 0xe85ed250e3d91fde61bf32e22c54f04754e695c5

IRs:
sdcContractAddr(address) := 1326600449985289801359345548443345579668043896261(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
sdcMainAcc = 0x34e0968ee4c3447baac34bfc6f9c8445f0633245

IRs:
sdcMainAcc(address) := 301876002474374251582226986938983350143442694725(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
sdcCon = TokenERC20(sdcContractAddr)

IRs:
TMP_42 = CONVERT sdcContractAddr to TokenERC20
sdcCon(TokenERC20) := TMP_42(TokenERC20)"];
}
}
