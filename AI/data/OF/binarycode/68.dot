digraph G {
// Function: 68.sol-ArrayUtils-toAddressArr(bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_conv

IRs:
RETURN _conv"];
}
// Function: 68.sol-ArrayUtils-toBytes4Arr(bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_conv

IRs:
RETURN _conv"];
}
// Function: 68.sol-ArrayUtils-toUintArr(bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_conv

IRs:
RETURN _conv"];
}
// Function: 68.sol-Contract-authorize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initialize()

IRs:
INTERNAL_CALL, Contract.initialize()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
perms = EXEC_PERMISSIONS

IRs:
perms(bytes32) := EXEC_PERMISSIONS(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! authorized

IRs:
TMP_13 = UnaryType.BANG authorized 
CONDITION TMP_13"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert(string)(Sender is not authorized as a script exec address)

IRs:
TMP_14(None) = SOLIDITY_CALL revert(string)(Sender is not authorized as a script exec address)"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 68.sol-Contract-buffPtr()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
ptr

IRs:
RETURN ptr"];
}
// Function: 68.sol-Contract-by(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
expected() == NextFunction.VAL_INC

IRs:
TMP_161(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_7(Contract.NextFunction) -> NextFunction.VAL_INC
TMP_162(bool) = TMP_161 == REF_7
CONDITION TMP_162"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_amt = _amt.add(uint256(_val))

IRs:
TMP_163 = CONVERT _val to uint256
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amt', 'TMP_163'] 
_amt(uint256) := TMP_164(uint256)"];
2->7;
3[label="Node Type: IF 3

EXPRESSION:
expected() == NextFunction.VAL_DEC

IRs:
TMP_165(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_9(Contract.NextFunction) -> NextFunction.VAL_DEC
TMP_166(bool) = TMP_165 == REF_9
CONDITION TMP_166"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_amt = uint256(_val).sub(_amt)

IRs:
TMP_167 = CONVERT _val to uint256
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_167', '_amt'] 
_amt(uint256) := TMP_168(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Expected VAL_INC or VAL_DEC)

IRs:
TMP_169(None) = SOLIDITY_CALL revert(string)(Expected VAL_INC or VAL_DEC)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
13->1;
}
// Function: 68.sol-Contract-byMaximum(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
expected() == NextFunction.VAL_DEC

IRs:
TMP_174(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_11(Contract.NextFunction) -> NextFunction.VAL_DEC
TMP_175(bool) = TMP_174 == REF_11
CONDITION TMP_175"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
_amt >= uint256(_val)

IRs:
TMP_176 = CONVERT _val to uint256
TMP_177(bool) = _amt >= TMP_176
CONDITION TMP_177"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_amt = 0

IRs:
_amt(uint256) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_amt = uint256(_val).sub(_amt)

IRs:
TMP_178 = CONVERT _val to uint256
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_178', '_amt'] 
_amt(uint256) := TMP_179(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert(string)(Expected VAL_DEC)

IRs:
TMP_180(None) = SOLIDITY_CALL revert(string)(Expected VAL_DEC)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
13->1;
}
// Function: 68.sol-Contract-checks(function())
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_check()

IRs:
INTERNAL_DYNAMIC_CALL _check()  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
conditions(validState,validState)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,validState)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
conditions(validState,validState)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,validState)"];
3->1;
}
// Function: 68.sol-Contract-commit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = buffPtr()

IRs:
TMP_29(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
ptr(bytes32) := TMP_29(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(ptr >= 0x180,Invalid buffer pointer)

IRs:
TMP_30(bool) = ptr >= 384
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,Invalid buffer pointer)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validState,none)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,none)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validState,none)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,none)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validState,none)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validState,none)"];
7->1;
}
// Function: 68.sol-Contract-conditions(function(),function())
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
first()

IRs:
INTERNAL_DYNAMIC_CALL first()  "];
1->2;
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
last()

IRs:
INTERNAL_DYNAMIC_CALL last()  "];
}
// Function: 68.sol-Contract-currentAction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_52(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_53 = CONVERT 0 to bytes32
TMP_54(bool) = TMP_52 == TMP_53
CONDITION TMP_54"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
bytes4(0)

IRs:
TMP_55 = CONVERT 0 to bytes4
RETURN TMP_55"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
action

IRs:
RETURN action"];
}
// Function: 68.sol-Contract-decrease(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = keccak256()(_field,execID())

IRs:
TMP_155(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_156(bytes32) = SOLIDITY_CALL keccak256()(_field,TMP_155)
val(bytes32) := TMP_156(bytes32)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
val

IRs:
RETURN val"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
val

IRs:
RETURN val"];
}
// Function: 68.sol-Contract-emitted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_216(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_217 = CONVERT 0 to bytes32
TMP_218(bool) = TMP_216 == TMP_217
CONDITION TMP_218"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
num_emitted

IRs:
RETURN num_emitted"];
}
// Function: 68.sol-Contract-emitting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
action_req = EMITS

IRs:
action_req(bytes4) := EMITS(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEmitBuff,isEmitting)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEmitBuff,isEmitting)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validEmitBuff,isEmitting)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEmitBuff,isEmitting)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validEmitBuff,isEmitting)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEmitBuff,isEmitting)"];
7->1;
}
// Function: 68.sol-Contract-execID()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(exec_id != bytes32(0),Execution id overwritten, or not read)

IRs:
TMP_95 = CONVERT 0 to bytes32
TMP_96(bool) = exec_id != TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool,string)(TMP_96,Execution id overwritten, or not read)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
exec_id

IRs:
RETURN exec_id"];
}
// Function: 68.sol-Contract-expected()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
next

IRs:
RETURN next"];
}
// Function: 68.sol-Contract-freeMem()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
ptr

IRs:
RETURN ptr"];
}
// Function: 68.sol-Contract-increase(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = keccak256()(_field,execID())

IRs:
TMP_149(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_150(bytes32) = SOLIDITY_CALL keccak256()(_field,TMP_149)
val(bytes32) := TMP_150(bytes32)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
val

IRs:
RETURN val"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
val

IRs:
RETURN val"];
}
// Function: 68.sol-Contract-initialize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(freeMem() == 0x80,Memory allocated prior to execution)

IRs:
TMP_15(bytes32) = INTERNAL_CALL, Contract.freeMem()()
TMP_16(bool) = TMP_15 == 128
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,Memory allocated prior to execution)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(execID() != bytes32(0) && sender() != address(0))

IRs:
TMP_18(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_19 = CONVERT 0 to bytes32
TMP_20(bool) = TMP_18 != TMP_19
TMP_21(address) = INTERNAL_CALL, Contract.sender()()
TMP_22 = CONVERT 0 to address
TMP_23(bool) = TMP_21 != TMP_22
TMP_24(bool) = TMP_20 && TMP_23
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
}
// Function: 68.sol-Contract-isEmitting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentAction() != EMITS

IRs:
TMP_59(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_60(bool) = TMP_59 != EMITS
CONDITION TMP_60"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Invalid current action - expected EMITS)

IRs:
TMP_61(None) = SOLIDITY_CALL revert(string)(Invalid current action - expected EMITS)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 68.sol-Contract-isPaying()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentAction() != PAYS

IRs:
TMP_62(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_63(bool) = TMP_62 != PAYS
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Invalid current action - expected PAYS)

IRs:
TMP_64(None) = SOLIDITY_CALL revert(string)(Invalid current action - expected PAYS)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 68.sol-Contract-isStoring()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentAction() != STORES

IRs:
TMP_56(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_57(bool) = TMP_56 != STORES
CONDITION TMP_57"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Invalid current action - expected STORES)

IRs:
TMP_58(None) = SOLIDITY_CALL revert(string)(Invalid current action - expected STORES)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 68.sol-Contract-log(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 68.sol-Contract-log(bytes32[1],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 68.sol-Contract-log(bytes32[2],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 68.sol-Contract-log(bytes32[3],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 68.sol-Contract-log(bytes32[4],bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validEvent,validEvent)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validEvent,validEvent)"];
5->1;
}
// Function: 68.sol-Contract-none()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 68.sol-Contract-paid()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_222(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_223 = CONVERT 0 to bytes32
TMP_224(bool) = TMP_222 == TMP_223
CONDITION TMP_224"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
num_paid

IRs:
RETURN num_paid"];
}
// Function: 68.sol-Contract-pay(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_amount

IRs:
RETURN _amount"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validPayAmt,validPayDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayAmt,validPayDest)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validPayAmt,validPayDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayAmt,validPayDest)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validPayAmt,validPayDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayAmt,validPayDest)"];
7->1;
}
// Function: 68.sol-Contract-paying()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
action_req = PAYS

IRs:
action_req(bytes4) := PAYS(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validPayBuff,isPaying)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayBuff,isPaying)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validPayBuff,isPaying)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayBuff,isPaying)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validPayBuff,isPaying)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayBuff,isPaying)"];
7->1;
}
// Function: 68.sol-Contract-read(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
data = keccak256()(_location,execID())

IRs:
TMP_101(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_102(bytes32) = SOLIDITY_CALL keccak256()(_location,TMP_101)
data(bytes32) := TMP_102(bytes32)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
data

IRs:
RETURN data"];
}
// Function: 68.sol-Contract-sender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(addr != address(0),Sender address overwritten, or not read)

IRs:
TMP_98 = CONVERT 0 to address
TMP_99(bool) = addr != TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,Sender address overwritten, or not read)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
addr

IRs:
RETURN addr"];
}
// Function: 68.sol-Contract-set(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_field

IRs:
RETURN _field"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreDest,validStoreVal)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreDest,validStoreVal)"];
7->1;
}
// Function: 68.sol-Contract-setFreeMem()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 68.sol-Contract-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
EXEC_PERMISSIONS = keccak256()(script_exec_permissions)

IRs:
TMP_225(bytes32) = SOLIDITY_CALL keccak256()(script_exec_permissions)
EXEC_PERMISSIONS(bytes32) := TMP_225(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
EMITS = bytes4(keccak256()(Emit((bytes32[],bytes)[])))

IRs:
TMP_226(bytes32) = SOLIDITY_CALL keccak256()(Emit((bytes32[],bytes)[]))
TMP_227 = CONVERT TMP_226 to bytes4
EMITS(bytes4) := TMP_227(bytes4)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
STORES = bytes4(keccak256()(Store(bytes32[])))

IRs:
TMP_228(bytes32) = SOLIDITY_CALL keccak256()(Store(bytes32[]))
TMP_229 = CONVERT TMP_228 to bytes4
STORES(bytes4) := TMP_229(bytes4)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PAYS = bytes4(keccak256()(Pay(bytes32[])))

IRs:
TMP_230(bytes32) = SOLIDITY_CALL keccak256()(Pay(bytes32[]))
TMP_231 = CONVERT TMP_230 to bytes4
PAYS(bytes4) := TMP_231(bytes4)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
THROWS = bytes4(keccak256()(Error(string)))

IRs:
TMP_232(bytes32) = SOLIDITY_CALL keccak256()(Error(string))
TMP_233 = CONVERT TMP_232 to bytes4
THROWS(bytes4) := TMP_233(bytes4)"];
}
// Function: 68.sol-Contract-startBuffer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 68.sol-Contract-stored()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_219(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_220 = CONVERT 0 to bytes32
TMP_221(bool) = TMP_219 == TMP_220
CONDITION TMP_221"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
num_stored

IRs:
RETURN num_stored"];
}
// Function: 68.sol-Contract-storing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
action_req = STORES

IRs:
action_req(bytes4) := STORES(bytes4)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validStoreBuff,isStoring)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreBuff,isStoring)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreBuff,isStoring)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreBuff,isStoring)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
conditions(validStoreBuff,isStoring)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreBuff,isStoring)"];
7->1;
}
// Function: 68.sol-Contract-to(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
to(_field,bytes32(_val))

IRs:
TMP_143 = CONVERT _val to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_143)"];
}
// Function: 68.sol-Contract-to(bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_val

IRs:
CONDITION _val"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
to(_field,bytes32(1))

IRs:
TMP_145 = CONVERT 1 to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_145)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
to(_field,bytes32(0))

IRs:
TMP_147 = CONVERT 0 to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_147)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 68.sol-Contract-to(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validStoreVal,validStoreDest)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validStoreVal,validStoreDest)"];
6->1;
}
// Function: 68.sol-Contract-to(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
to(_field,bytes32(_val))

IRs:
TMP_141 = CONVERT _val to bytes32
INTERNAL_CALL, Contract.to(bytes32,bytes32)(_field,TMP_141)"];
}
// Function: 68.sol-Contract-toAcc(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFreeMem()

IRs:
INTERNAL_CALL, Contract.setFreeMem()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
conditions(validPayDest,validPayAmt)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayDest,validPayAmt)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
conditions(validPayDest,validPayAmt)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayDest,validPayAmt)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
conditions(validPayDest,validPayAmt)

IRs:
MODIFIER_CALL, Contract.conditions(function(),function())(validPayDest,validPayAmt)"];
6->1;
}
// Function: 68.sol-Contract-validEmitBuff()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_75(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_76 = CONVERT 0 to bytes32
TMP_77(bool) = TMP_75 == TMP_76
CONDITION TMP_77"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startBuffer()

IRs:
INTERNAL_CALL, Contract.startBuffer()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
emitted() != 0 || currentAction() == EMITS

IRs:
TMP_79(uint256) = INTERNAL_CALL, Contract.emitted()()
TMP_80(bool) = TMP_79 != 0
TMP_81(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_82(bool) = TMP_81 == EMITS
TMP_83(bool) = TMP_80 || TMP_82
CONDITION TMP_83"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Duplicate request - emits)

IRs:
TMP_84(None) = SOLIDITY_CALL revert(string)(Duplicate request - emits)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 68.sol-Contract-validEvent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.EMIT_LOG

IRs:
TMP_125(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_6(Contract.NextFunction) -> NextFunction.EMIT_LOG
TMP_126(bool) = TMP_125 != REF_6
CONDITION TMP_126"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected event to be pushed)

IRs:
TMP_127(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected event to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isEmitting()

IRs:
INTERNAL_CALL, Contract.isEmitting()()"];
}
// Function: 68.sol-Contract-validPayAmt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.PAY_AMT

IRs:
TMP_121(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_5(Contract.NextFunction) -> NextFunction.PAY_AMT
TMP_122(bool) = TMP_121 != REF_5
CONDITION TMP_122"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected payment amount to be pushed)

IRs:
TMP_123(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected payment amount to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isPaying()

IRs:
INTERNAL_CALL, Contract.isPaying()()"];
}
// Function: 68.sol-Contract-validPayBuff()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_85(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_86 = CONVERT 0 to bytes32
TMP_87(bool) = TMP_85 == TMP_86
CONDITION TMP_87"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startBuffer()

IRs:
INTERNAL_CALL, Contract.startBuffer()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
paid() != 0 || currentAction() == PAYS

IRs:
TMP_89(uint256) = INTERNAL_CALL, Contract.paid()()
TMP_90(bool) = TMP_89 != 0
TMP_91(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_92(bool) = TMP_91 == PAYS
TMP_93(bool) = TMP_90 || TMP_92
CONDITION TMP_93"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Duplicate request - pays)

IRs:
TMP_94(None) = SOLIDITY_CALL revert(string)(Duplicate request - pays)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 68.sol-Contract-validPayDest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.PAY_DEST

IRs:
TMP_117(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_4(Contract.NextFunction) -> NextFunction.PAY_DEST
TMP_118(bool) = TMP_117 != REF_4
CONDITION TMP_118"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected payment destination to be pushed)

IRs:
TMP_119(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected payment destination to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isPaying()

IRs:
INTERNAL_CALL, Contract.isPaying()()"];
}
// Function: 68.sol-Contract-validState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
freeMem() < 0x180

IRs:
TMP_35(bytes32) = INTERNAL_CALL, Contract.freeMem()()
TMP_36(bool) = TMP_35 < 384
CONDITION TMP_36"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Expected Contract.execute())

IRs:
TMP_37(None) = SOLIDITY_CALL revert(string)(Expected Contract.execute())"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
buffPtr() != 0 && buffPtr() < 0x180

IRs:
TMP_38(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_39(bool) = TMP_38 != 0
TMP_40(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_41(bool) = TMP_40 < 384
TMP_42(bool) = TMP_39 && TMP_41
CONDITION TMP_42"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Invalid buffer pointer)

IRs:
TMP_43(None) = SOLIDITY_CALL revert(string)(Invalid buffer pointer)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(execID() != bytes32(0) && sender() != address(0))

IRs:
TMP_44(bytes32) = INTERNAL_CALL, Contract.execID()()
TMP_45 = CONVERT 0 to bytes32
TMP_46(bool) = TMP_44 != TMP_45
TMP_47(address) = INTERNAL_CALL, Contract.sender()()
TMP_48 = CONVERT 0 to address
TMP_49(bool) = TMP_47 != TMP_48
TMP_50(bool) = TMP_46 && TMP_49
TMP_51(None) = SOLIDITY_CALL assert(bool)(TMP_50)"];
}
// Function: 68.sol-Contract-validStoreBuff()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buffPtr() == bytes32(0)

IRs:
TMP_65(bytes32) = INTERNAL_CALL, Contract.buffPtr()()
TMP_66 = CONVERT 0 to bytes32
TMP_67(bool) = TMP_65 == TMP_66
CONDITION TMP_67"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startBuffer()

IRs:
INTERNAL_CALL, Contract.startBuffer()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
stored() != 0 || currentAction() == STORES

IRs:
TMP_69(uint256) = INTERNAL_CALL, Contract.stored()()
TMP_70(bool) = TMP_69 != 0
TMP_71(bytes4) = INTERNAL_CALL, Contract.currentAction()()
TMP_72(bool) = TMP_71 == STORES
TMP_73(bool) = TMP_70 || TMP_72
CONDITION TMP_73"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert(string)(Duplicate request - stores)

IRs:
TMP_74(None) = SOLIDITY_CALL revert(string)(Duplicate request - stores)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 68.sol-Contract-validStoreDest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.STORE_DEST

IRs:
TMP_103(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_0(Contract.NextFunction) -> NextFunction.STORE_DEST
TMP_104(bool) = TMP_103 != REF_0
CONDITION TMP_104"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected storage destination to be pushed)

IRs:
TMP_105(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected storage destination to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isStoring()

IRs:
INTERNAL_CALL, Contract.isStoring()()"];
}
// Function: 68.sol-Contract-validStoreVal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
expected() != NextFunction.VAL_SET && expected() != NextFunction.VAL_INC && expected() != NextFunction.VAL_DEC

IRs:
TMP_107(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_1(Contract.NextFunction) -> NextFunction.VAL_SET
TMP_108(bool) = TMP_107 != REF_1
TMP_109(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_2(Contract.NextFunction) -> NextFunction.VAL_INC
TMP_110(bool) = TMP_109 != REF_2
TMP_111(bool) = TMP_108 && TMP_110
TMP_112(Contract.NextFunction) = INTERNAL_CALL, Contract.expected()()
REF_3(Contract.NextFunction) -> NextFunction.VAL_DEC
TMP_113(bool) = TMP_112 != REF_3
TMP_114(bool) = TMP_111 && TMP_113
CONDITION TMP_114"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Unexpected function order - expected storage value to be pushed)

IRs:
TMP_115(None) = SOLIDITY_CALL revert(string)(Unexpected function order - expected storage value to be pushed)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isStoring()

IRs:
INTERNAL_CALL, Contract.isStoring()()"];
}
// Function: 68.sol-GetterInterface-read(bytes32,bytes32)
digraph{
}
// Function: 68.sol-GetterInterface-readMulti(bytes32,bytes32[])
digraph{
}
// Function: 68.sol-MintedCappedIdx-admin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_admin)

IRs:
TMP_237(bytes32) = SOLIDITY_CALL keccak256()(sale_admin)
RETURN TMP_237"];
}
// Function: 68.sol-MintedCappedIdx-allowance(address,bytes32,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(GetterInterface(_storage).read(_exec_id,allowed(_owner,_spender)))

IRs:
TMP_564 = CONVERT _storage to GetterInterface
TMP_565(bytes32) = INTERNAL_CALL, MintedCappedIdx.allowed(address,address)(_owner,_spender)
TMP_566(bytes32) = HIGH_LEVEL_CALL, dest:TMP_564(GetterInterface), function:read, arguments:['_exec_id', 'TMP_565']  
TMP_567 = CONVERT TMP_566 to uint256
RETURN TMP_567"];
}
// Function: 68.sol-MintedCappedIdx-allowed(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_spender,keccak256()(_owner,TOKEN_ALLOWANCES))

IRs:
TMP_276(bytes32) = SOLIDITY_CALL keccak256()(_owner,TOKEN_ALLOWANCES)
TMP_277(bytes32) = SOLIDITY_CALL keccak256()(_spender,TMP_276)
RETURN TMP_277"];
}
// Function: 68.sol-MintedCappedIdx-balanceOf(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(GetterInterface(_storage).read(_exec_id,balances(_owner)))

IRs:
TMP_560 = CONVERT _storage to GetterInterface
TMP_561(bytes32) = INTERNAL_CALL, MintedCappedIdx.balances(address)(_owner)
TMP_562(bytes32) = HIGH_LEVEL_CALL, dest:TMP_560(GetterInterface), function:read, arguments:['_exec_id', 'TMP_561']  
TMP_563 = CONVERT TMP_562 to uint256
RETURN TMP_563"];
}
// Function: 68.sol-MintedCappedIdx-balances(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_owner,TOKEN_BALANCES)

IRs:
TMP_275(bytes32) = SOLIDITY_CALL keccak256()(_owner,TOKEN_BALANCES)
RETURN TMP_275"];
}
// Function: 68.sol-MintedCappedIdx-contributors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_contributors)

IRs:
TMP_243(bytes32) = SOLIDITY_CALL keccak256()(sale_contributors)
RETURN TMP_243"];
}
// Function: 68.sol-MintedCappedIdx-currentEndsAt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(current_tier_ends_at)

IRs:
TMP_262(bytes32) = SOLIDITY_CALL keccak256()(current_tier_ends_at)
RETURN TMP_262"];
}
// Function: 68.sol-MintedCappedIdx-currentTier()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_current_tier)

IRs:
TMP_261(bytes32) = SOLIDITY_CALL keccak256()(sale_current_tier)
RETURN TMP_261"];
}
// Function: 68.sol-MintedCappedIdx-currentTokensRemaining()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(current_tier_tokens_remaining)

IRs:
TMP_263(bytes32) = SOLIDITY_CALL keccak256()(current_tier_tokens_remaining)
RETURN TMP_263"];
}
// Function: 68.sol-MintedCappedIdx-decimals(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(GetterInterface(_storage).read(_exec_id,tokenDecimals()))

IRs:
TMP_568 = CONVERT _storage to GetterInterface
TMP_569(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenDecimals()()
TMP_570(bytes32) = HIGH_LEVEL_CALL, dest:TMP_568(GetterInterface), function:read, arguments:['_exec_id', 'TMP_569']  
TMP_571 = CONVERT TMP_570 to uint256
RETURN TMP_571"];
}
// Function: 68.sol-MintedCappedIdx-destIndex(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_destination,index,reservedDestinations())

IRs:
TMP_281(bytes32) = INTERNAL_CALL, MintedCappedIdx.reservedDestinations()()
TMP_282(bytes32) = SOLIDITY_CALL keccak256()(_destination,index,TMP_281)
RETURN TMP_282"];
}
// Function: 68.sol-MintedCappedIdx-destPercent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_destination,numpercent,reservedDestinations())

IRs:
TMP_285(bytes32) = INTERNAL_CALL, MintedCappedIdx.reservedDestinations()()
TMP_286(bytes32) = SOLIDITY_CALL keccak256()(_destination,numpercent,TMP_285)
RETURN TMP_286"];
}
// Function: 68.sol-MintedCappedIdx-destPrecision(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_destination,precision,reservedDestinations())

IRs:
TMP_287(bytes32) = INTERNAL_CALL, MintedCappedIdx.reservedDestinations()()
TMP_288(bytes32) = SOLIDITY_CALL keccak256()(_destination,precision,TMP_287)
RETURN TMP_288"];
}
// Function: 68.sol-MintedCappedIdx-destTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_destination,numtokens,reservedDestinations())

IRs:
TMP_283(bytes32) = INTERNAL_CALL, MintedCappedIdx.reservedDestinations()()
TMP_284(bytes32) = SOLIDITY_CALL keccak256()(_destination,numtokens,TMP_283)
RETURN TMP_284"];
}
// Function: 68.sol-MintedCappedIdx-execPermissions(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_exec,EXEC_PERMISSIONS)

IRs:
TMP_236(bytes32) = SOLIDITY_CALL keccak256()(_exec,EXEC_PERMISSIONS)
RETURN TMP_236"];
}
// Function: 68.sol-MintedCappedIdx-getAdmin(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(GetterInterface(_storage).read(_exec_id,admin()))

IRs:
TMP_364 = CONVERT _storage to GetterInterface
TMP_365(bytes32) = INTERNAL_CALL, MintedCappedIdx.admin()()
TMP_366(bytes32) = HIGH_LEVEL_CALL, dest:TMP_364(GetterInterface), function:read, arguments:['_exec_id', 'TMP_365']  
TMP_367 = CONVERT TMP_366 to address
RETURN TMP_367"];
}
// Function: 68.sol-MintedCappedIdx-getCrowdsaleInfo(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = GetterInterface(_storage)

IRs:
TMP_368 = CONVERT _storage to GetterInterface
target(GetterInterface) := TMP_368(GetterInterface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
arr_indices = new bytes32[](4)

IRs:
TMP_370(bytes32[])  = new bytes32[](4)
arr_indices(bytes32[]) = ['TMP_370(bytes32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
arr_indices[0] = totalWeiRaised()

IRs:
REF_50(bytes32) -> arr_indices[0]
TMP_371(bytes32) = INTERNAL_CALL, MintedCappedIdx.totalWeiRaised()()
REF_50(bytes32) (->arr_indices) := TMP_371(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
arr_indices[1] = wallet()

IRs:
REF_51(bytes32) -> arr_indices[1]
TMP_372(bytes32) = INTERNAL_CALL, MintedCappedIdx.wallet()()
REF_51(bytes32) (->arr_indices) := TMP_372(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
arr_indices[2] = isConfigured()

IRs:
REF_52(bytes32) -> arr_indices[2]
TMP_373(bytes32) = INTERNAL_CALL, MintedCappedIdx.isConfigured()()
REF_52(bytes32) (->arr_indices) := TMP_373(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
arr_indices[3] = isFinished()

IRs:
REF_53(bytes32) -> arr_indices[3]
TMP_374(bytes32) = INTERNAL_CALL, MintedCappedIdx.isFinished()()
REF_53(bytes32) (->arr_indices) := TMP_374(bytes32)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
read_values = target.readMulti(_exec_id,arr_indices)

IRs:
TMP_375(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
read_values(bytes32[]) = ['TMP_375(bytes32[])']"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
wei_raised = uint256(read_values[0])

IRs:
REF_55(bytes32) -> read_values[0]
TMP_376 = CONVERT REF_55 to uint256
wei_raised(uint256) := TMP_376(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
team_wallet = address(read_values[1])

IRs:
REF_56(bytes32) -> read_values[1]
TMP_377 = CONVERT REF_56 to address
team_wallet(address) := TMP_377(address)"];
9->12;
12[label="Node Type: IF 12

EXPRESSION:
read_values[2] == 0

IRs:
REF_57(bytes32) -> read_values[2]
TMP_378(bool) = REF_57 == 0
CONDITION TMP_378"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
is_initialized = false

IRs:
is_initialized(bool) := False(bool)"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
is_initialized = true

IRs:
is_initialized(bool) := True(bool)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
read_values[3] == 0

IRs:
REF_58(bytes32) -> read_values[3]
TMP_379(bool) = REF_58 == 0
CONDITION TMP_379"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
is_finalized = false

IRs:
is_finalized(bool) := False(bool)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
is_finalized = true

IRs:
is_finalized(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(wei_raised,team_wallet,is_initialized,is_finalized)

IRs:
RETURN wei_raised,team_wallet,is_initialized,is_finalized"];
}
// Function: 68.sol-MintedCappedIdx-getCrowdsaleMaxRaise(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = GetterInterface(_storage)

IRs:
TMP_467 = CONVERT _storage to GetterInterface
target(GetterInterface) := TMP_467(GetterInterface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
arr_indices = new bytes32[](3)

IRs:
TMP_469(bytes32[])  = new bytes32[](3)
arr_indices(bytes32[]) = ['TMP_469(bytes32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
arr_indices[0] = saleTierList()

IRs:
REF_122(bytes32) -> arr_indices[0]
TMP_470(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
REF_122(bytes32) (->arr_indices) := TMP_470(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
arr_indices[1] = tokenDecimals()

IRs:
REF_123(bytes32) -> arr_indices[1]
TMP_471(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenDecimals()()
REF_123(bytes32) (->arr_indices) := TMP_471(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
arr_indices[2] = tokenName()

IRs:
REF_124(bytes32) -> arr_indices[2]
TMP_472(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenName()()
REF_124(bytes32) (->arr_indices) := TMP_472(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
read_values = target.readMulti(_exec_id,arr_indices).toUintArr()

IRs:
TMP_473(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
TMP_474(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_473'] 
read_values(uint256[]) = ['TMP_474(uint256[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(read_values.length == 3)

IRs:
REF_127 -> LENGTH read_values
TMP_475(bool) = REF_127 == 3
TMP_476(None) = SOLIDITY_CALL assert(bool)(TMP_475)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
num_tiers = read_values[0]

IRs:
REF_128(uint256) -> read_values[0]
num_tiers(uint256) := REF_128(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
num_decimals = read_values[1]

IRs:
REF_129(uint256) -> read_values[1]
num_decimals(uint256) := REF_129(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
read_values[2] == 0

IRs:
REF_130(uint256) -> read_values[2]
TMP_477(bool) = REF_130 == 0
CONDITION TMP_477"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
(0,0)

IRs:
RETURN 0,0"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
last_arr = new bytes32[](2 * num_tiers)

IRs:
TMP_479(uint256) = 2 * num_tiers
TMP_480(bytes32[])  = new bytes32[](TMP_479)
last_arr(bytes32[]) = ['TMP_480(bytes32[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->21;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < 2 * num_tiers

IRs:
TMP_481(uint256) = 2 * num_tiers
TMP_482(bool) = i < TMP_481
CONDITION TMP_482"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
last_arr[i] = tierCap(i / 2)

IRs:
REF_131(bytes32) -> last_arr[i]
TMP_483(uint256) = i / 2
TMP_484(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierCap(uint256)(TMP_483)
REF_131(bytes32) (->last_arr) := TMP_484(bytes32)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
last_arr[i + 1] = tierPrice(i / 2)

IRs:
TMP_485(uint256) = i + 1
REF_132(bytes32) -> last_arr[TMP_485]
TMP_486(uint256) = i / 2
TMP_487(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierPrice(uint256)(TMP_486)
REF_132(bytes32) (->last_arr) := TMP_487(bytes32)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
20->17;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
read_values = target.readMulti(_exec_id,last_arr).toUintArr()

IRs:
TMP_488(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'last_arr']  
TMP_489(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_488'] 
read_values(uint256[]) = ['TMP_489(uint256[])']"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
assert(bool)(read_values.length == 2 * num_tiers)

IRs:
REF_135 -> LENGTH read_values
TMP_490(uint256) = 2 * num_tiers
TMP_491(bool) = REF_135 == TMP_490
TMP_492(None) = SOLIDITY_CALL assert(bool)(TMP_491)"];
22->25;
23[label="Node Type: BEGIN_LOOP 23
"];
23->26;
24[label="Node Type: END_LOOP 24
"];
24->30;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
25->23;
26[label="Node Type: IF_LOOP 26

EXPRESSION:
i < read_values.length

IRs:
REF_136 -> LENGTH read_values
TMP_493(bool) = i < REF_136
CONDITION TMP_493"];
26->27[label="True"];
26->24[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
total_sell_cap += read_values[i]

IRs:
REF_137(uint256) -> read_values[i]
total_sell_cap(uint256) = total_sell_cap + REF_137"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
wei_raise_cap += (read_values[i] * read_values[i + 1]) / (10 ** num_decimals)

IRs:
REF_138(uint256) -> read_values[i]
TMP_494(uint256) = i + 1
REF_139(uint256) -> read_values[TMP_494]
TMP_495(uint256) = REF_138 * REF_139
TMP_496(uint256) = 10 ** num_decimals
TMP_497(uint256) = TMP_495 / TMP_496
wei_raise_cap(uint256) = wei_raise_cap + TMP_497"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
29->26;
30[label="Node Type: RETURN 30

EXPRESSION:
(wei_raise_cap,total_sell_cap)

IRs:
RETURN wei_raise_cap,total_sell_cap"];
}
// Function: 68.sol-MintedCappedIdx-getCrowdsaleStartAndEndTimes(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arr_indices = new bytes32[](2)

IRs:
TMP_404(bytes32[])  = new bytes32[](2)
arr_indices(bytes32[]) = ['TMP_404(bytes32[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
arr_indices[0] = startTime()

IRs:
REF_72(bytes32) -> arr_indices[0]
TMP_405(bytes32) = INTERNAL_CALL, MintedCappedIdx.startTime()()
REF_72(bytes32) (->arr_indices) := TMP_405(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
arr_indices[1] = totalDuration()

IRs:
REF_73(bytes32) -> arr_indices[1]
TMP_406(bytes32) = INTERNAL_CALL, MintedCappedIdx.totalDuration()()
REF_73(bytes32) (->arr_indices) := TMP_406(bytes32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
read_values = GetterInterface(_storage).readMulti(_exec_id,arr_indices).toUintArr()

IRs:
TMP_407 = CONVERT _storage to GetterInterface
TMP_408(bytes32[]) = HIGH_LEVEL_CALL, dest:TMP_407(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
TMP_409(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_408'] 
read_values(uint256[]) = ['TMP_409(uint256[])']"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
start_time = read_values[0]

IRs:
REF_76(uint256) -> read_values[0]
start_time(uint256) := REF_76(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
end_time = start_time + read_values[1]

IRs:
REF_77(uint256) -> read_values[1]
TMP_410(uint256) = start_time + REF_77
end_time(uint256) := TMP_410(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
(start_time,end_time)

IRs:
RETURN start_time,end_time"];
}
// Function: 68.sol-MintedCappedIdx-getCrowdsaleTier(address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = GetterInterface(_storage)

IRs:
TMP_448 = CONVERT _storage to GetterInterface
target(GetterInterface) := TMP_448(GetterInterface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
arr_indices = new bytes32[](7)

IRs:
TMP_450(bytes32[])  = new bytes32[](7)
arr_indices(bytes32[]) = ['TMP_450(bytes32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
arr_indices[0] = tierName(_index)

IRs:
REF_106(bytes32) -> arr_indices[0]
TMP_451(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierName(uint256)(_index)
REF_106(bytes32) (->arr_indices) := TMP_451(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
arr_indices[1] = tierCap(_index)

IRs:
REF_107(bytes32) -> arr_indices[1]
TMP_452(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierCap(uint256)(_index)
REF_107(bytes32) (->arr_indices) := TMP_452(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
arr_indices[2] = tierPrice(_index)

IRs:
REF_108(bytes32) -> arr_indices[2]
TMP_453(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierPrice(uint256)(_index)
REF_108(bytes32) (->arr_indices) := TMP_453(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
arr_indices[3] = tierDuration(_index)

IRs:
REF_109(bytes32) -> arr_indices[3]
TMP_454(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierDuration(uint256)(_index)
REF_109(bytes32) (->arr_indices) := TMP_454(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
arr_indices[4] = tierModifiable(_index)

IRs:
REF_110(bytes32) -> arr_indices[4]
TMP_455(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierModifiable(uint256)(_index)
REF_110(bytes32) (->arr_indices) := TMP_455(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
arr_indices[5] = tierWhitelisted(_index)

IRs:
REF_111(bytes32) -> arr_indices[5]
TMP_456(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierWhitelisted(uint256)(_index)
REF_111(bytes32) (->arr_indices) := TMP_456(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
arr_indices[6] = tierMin(_index)

IRs:
REF_112(bytes32) -> arr_indices[6]
TMP_457(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierMin(uint256)(_index)
REF_112(bytes32) (->arr_indices) := TMP_457(bytes32)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
read_values = target.readMulti(_exec_id,arr_indices)

IRs:
TMP_458(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
read_values(bytes32[]) = ['TMP_458(bytes32[])']"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
assert(bool)(read_values.length == 7)

IRs:
REF_114 -> LENGTH read_values
TMP_459(bool) = REF_114 == 7
TMP_460(None) = SOLIDITY_CALL assert(bool)(TMP_459)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tier_name = read_values[0]

IRs:
REF_115(bytes32) -> read_values[0]
tier_name(bytes32) := REF_115(bytes32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tier_sell_cap = uint256(read_values[1])

IRs:
REF_116(bytes32) -> read_values[1]
TMP_461 = CONVERT REF_116 to uint256
tier_sell_cap(uint256) := TMP_461(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
tier_price = uint256(read_values[2])

IRs:
REF_117(bytes32) -> read_values[2]
TMP_462 = CONVERT REF_117 to uint256
tier_price(uint256) := TMP_462(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tier_duration = uint256(read_values[3])

IRs:
REF_118(bytes32) -> read_values[3]
TMP_463 = CONVERT REF_118 to uint256
tier_duration(uint256) := TMP_463(uint256)"];
15->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
tier_min = uint256(read_values[6])

IRs:
REF_119(bytes32) -> read_values[6]
TMP_464 = CONVERT REF_119 to uint256
tier_min(uint256) := TMP_464(uint256)"];
18->27;
19[label="Node Type: IF 19

EXPRESSION:
read_values[4] == 0

IRs:
REF_120(bytes32) -> read_values[4]
TMP_465(bool) = REF_120 == 0
CONDITION TMP_465"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
duration_is_modifiable = false

IRs:
duration_is_modifiable(bool) := False(bool)"];
20->22;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
duration_is_modifiable = true

IRs:
duration_is_modifiable(bool) := True(bool)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
read_values[5] == 0

IRs:
REF_121(bytes32) -> read_values[5]
TMP_466(bool) = REF_121 == 0
CONDITION TMP_466"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
is_whitelisted = false

IRs:
is_whitelisted(bool) := False(bool)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
is_whitelisted = true

IRs:
is_whitelisted(bool) := True(bool)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->18;
27[label="Node Type: RETURN 27

EXPRESSION:
(tier_name,tier_sell_cap,tier_price,tier_min,tier_duration,duration_is_modifiable,is_whitelisted)

IRs:
RETURN tier_name,tier_sell_cap,tier_price,tier_min,tier_duration,duration_is_modifiable,is_whitelisted"];
}
// Function: 68.sol-MintedCappedIdx-getCrowdsaleTierList(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = GetterInterface(_storage)

IRs:
TMP_498 = CONVERT _storage to GetterInterface
target(GetterInterface) := TMP_498(GetterInterface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
list_length = uint256(target.read(_exec_id,saleTierList()))

IRs:
TMP_499(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_500(bytes32) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:read, arguments:['_exec_id', 'TMP_499']  
TMP_501 = CONVERT TMP_500 to uint256
list_length(uint256) := TMP_501(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
arr_indices = new bytes32[](list_length)

IRs:
TMP_503(bytes32[])  = new bytes32[](list_length)
arr_indices(bytes32[]) = ['TMP_503(bytes32[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < list_length

IRs:
TMP_504(bool) = i < list_length
CONDITION TMP_504"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
arr_indices[i] = tierName(i)

IRs:
REF_141(bytes32) -> arr_indices[i]
TMP_505(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierName(uint256)(i)
REF_141(bytes32) (->arr_indices) := TMP_505(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_506(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
crowdsale_tiers = target.readMulti(_exec_id,arr_indices)

IRs:
TMP_507(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
crowdsale_tiers(bytes32[]) = ['TMP_507(bytes32[])']"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
crowdsale_tiers

IRs:
RETURN crowdsale_tiers"];
}
// Function: 68.sol-MintedCappedIdx-getCrowdsaleUniqueBuyers(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(GetterInterface(_storage).read(_exec_id,contributors()))

IRs:
TMP_399 = CONVERT _storage to GetterInterface
TMP_400(bytes32) = INTERNAL_CALL, MintedCappedIdx.contributors()()
TMP_401(bytes32) = HIGH_LEVEL_CALL, dest:TMP_399(GetterInterface), function:read, arguments:['_exec_id', 'TMP_400']  
TMP_402 = CONVERT TMP_401 to uint256
RETURN TMP_402"];
}
// Function: 68.sol-MintedCappedIdx-getCurrentTierInfo(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
initial_arr = new bytes32[](4)

IRs:
TMP_412(bytes32[])  = new bytes32[](4)
initial_arr(bytes32[]) = ['TMP_412(bytes32[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
initial_arr[0] = currentEndsAt()

IRs:
REF_78(bytes32) -> initial_arr[0]
TMP_413(bytes32) = INTERNAL_CALL, MintedCappedIdx.currentEndsAt()()
REF_78(bytes32) (->initial_arr) := TMP_413(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
initial_arr[1] = currentTier()

IRs:
REF_79(bytes32) -> initial_arr[1]
TMP_414(bytes32) = INTERNAL_CALL, MintedCappedIdx.currentTier()()
REF_79(bytes32) (->initial_arr) := TMP_414(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
initial_arr[2] = currentTokensRemaining()

IRs:
REF_80(bytes32) -> initial_arr[2]
TMP_415(bytes32) = INTERNAL_CALL, MintedCappedIdx.currentTokensRemaining()()
REF_80(bytes32) (->initial_arr) := TMP_415(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
initial_arr[3] = saleTierList()

IRs:
REF_81(bytes32) -> initial_arr[3]
TMP_416(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
REF_81(bytes32) (->initial_arr) := TMP_416(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
read_values = GetterInterface(_storage).readMulti(_exec_id,initial_arr).toUintArr()

IRs:
TMP_417 = CONVERT _storage to GetterInterface
TMP_418(bytes32[]) = HIGH_LEVEL_CALL, dest:TMP_417(GetterInterface), function:readMulti, arguments:['_exec_id', 'initial_arr']  
TMP_419(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_418'] 
read_values(uint256[]) = ['TMP_419(uint256[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(read_values.length == 4)

IRs:
REF_84 -> LENGTH read_values
TMP_420(bool) = REF_84 == 4
TMP_421(None) = SOLIDITY_CALL assert(bool)(TMP_420)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
read_values[1] == 0

IRs:
REF_85(uint256) -> read_values[1]
TMP_422(bool) = REF_85 == 0
CONDITION TMP_422"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tier_ends_at = read_values[0]

IRs:
REF_86(uint256) -> read_values[0]
tier_ends_at(uint256) := REF_86(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tier_index = read_values[1] - 1

IRs:
REF_87(uint256) -> read_values[1]
TMP_423(uint256) = REF_87 - 1
tier_index(uint256) := TMP_423(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tier_tokens_remaining = read_values[2]

IRs:
REF_88(uint256) -> read_values[2]
tier_tokens_remaining(uint256) := REF_88(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
num_tiers = read_values[3]

IRs:
REF_89(uint256) -> read_values[3]
num_tiers(uint256) := REF_89(uint256)"];
14->15;
15[label="Node Type: NEW VARIABLE 15
"];
15->16;
16[label="Node Type: BEGIN_LOOP 16
"];
16->17;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
now >= tier_ends_at && ++ tier_index < num_tiers

IRs:
TMP_424(bool) = now >= tier_ends_at
tier_index(uint256) = tier_index + 1
TMP_425(bool) = tier_index < num_tiers
TMP_426(bool) = TMP_424 && TMP_425
CONDITION TMP_426"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
tier_ends_at += uint256(GetterInterface(_storage).read(_exec_id,tierDuration(tier_index)))

IRs:
TMP_427 = CONVERT _storage to GetterInterface
TMP_428(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierDuration(uint256)(tier_index)
TMP_429(bytes32) = HIGH_LEVEL_CALL, dest:TMP_427(GetterInterface), function:read, arguments:['_exec_id', 'TMP_428']  
TMP_430 = CONVERT TMP_429 to uint256
tier_ends_at(uint256) = tier_ends_at + TMP_430"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
updated_tier = true

IRs:
updated_tier(bool) := True(bool)"];
19->17;
20[label="Node Type: END_LOOP 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
tier_index >= num_tiers

IRs:
TMP_431(bool) = tier_index >= num_tiers
CONDITION TMP_431"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: RETURN 22

EXPRESSION:
(0,0,0,0,0,0,false,false)

IRs:
RETURN 0,0,0,0,0,0,False,False"];
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
initial_arr = new bytes32[](6)

IRs:
TMP_433(bytes32[])  = new bytes32[](6)
initial_arr(bytes32[]) = ['TMP_433(bytes32[])']"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
initial_arr[0] = tierName(tier_index)

IRs:
REF_91(bytes32) -> initial_arr[0]
TMP_434(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierName(uint256)(tier_index)
REF_91(bytes32) (->initial_arr) := TMP_434(bytes32)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
initial_arr[1] = tierPrice(tier_index)

IRs:
REF_92(bytes32) -> initial_arr[1]
TMP_435(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierPrice(uint256)(tier_index)
REF_92(bytes32) (->initial_arr) := TMP_435(bytes32)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
initial_arr[2] = tierModifiable(tier_index)

IRs:
REF_93(bytes32) -> initial_arr[2]
TMP_436(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierModifiable(uint256)(tier_index)
REF_93(bytes32) (->initial_arr) := TMP_436(bytes32)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
initial_arr[3] = tierWhitelisted(tier_index)

IRs:
REF_94(bytes32) -> initial_arr[3]
TMP_437(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierWhitelisted(uint256)(tier_index)
REF_94(bytes32) (->initial_arr) := TMP_437(bytes32)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
initial_arr[4] = tierMin(tier_index)

IRs:
REF_95(bytes32) -> initial_arr[4]
TMP_438(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierMin(uint256)(tier_index)
REF_95(bytes32) (->initial_arr) := TMP_438(bytes32)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
initial_arr[5] = tierCap(tier_index)

IRs:
REF_96(bytes32) -> initial_arr[5]
TMP_439(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierCap(uint256)(tier_index)
REF_96(bytes32) (->initial_arr) := TMP_439(bytes32)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
read_values = GetterInterface(_storage).readMulti(_exec_id,initial_arr).toUintArr()

IRs:
TMP_440 = CONVERT _storage to GetterInterface
TMP_441(bytes32[]) = HIGH_LEVEL_CALL, dest:TMP_440(GetterInterface), function:readMulti, arguments:['_exec_id', 'initial_arr']  
TMP_442(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_441'] 
read_values(uint256[]) = ['TMP_442(uint256[])']"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
assert(bool)(read_values.length == 6)

IRs:
REF_99 -> LENGTH read_values
TMP_443(bool) = REF_99 == 6
TMP_444(None) = SOLIDITY_CALL assert(bool)(TMP_443)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
tier_name = bytes32(read_values[0])

IRs:
REF_100(uint256) -> read_values[0]
TMP_445 = CONVERT REF_100 to bytes32
tier_name(bytes32) := TMP_445(bytes32)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
tier_price = read_values[1]

IRs:
REF_101(uint256) -> read_values[1]
tier_price(uint256) := REF_101(uint256)"];
34->41;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
tier_min = read_values[4]

IRs:
REF_102(uint256) -> read_values[4]
tier_min(uint256) := REF_102(uint256)"];
37->38;
38[label="Node Type: IF 38

EXPRESSION:
updated_tier

IRs:
CONDITION updated_tier"];
38->39[label="True"];
38->40[label="False"];
39[label="Node Type: EXPRESSION 39

EXPRESSION:
tier_tokens_remaining = read_values[5]

IRs:
REF_103(uint256) -> read_values[5]
tier_tokens_remaining(uint256) := REF_103(uint256)"];
39->40;
40[label="Node Type: END_IF 40
"];
40->49;
41[label="Node Type: IF 41

EXPRESSION:
read_values[2] == 0

IRs:
REF_104(uint256) -> read_values[2]
TMP_446(bool) = REF_104 == 0
CONDITION TMP_446"];
41->42[label="True"];
41->43[label="False"];
42[label="Node Type: EXPRESSION 42

EXPRESSION:
duration_is_modifiable = false

IRs:
duration_is_modifiable(bool) := False(bool)"];
42->44;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
duration_is_modifiable = true

IRs:
duration_is_modifiable(bool) := True(bool)"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: IF 45

EXPRESSION:
read_values[3] == 0

IRs:
REF_105(uint256) -> read_values[3]
TMP_447(bool) = REF_105 == 0
CONDITION TMP_447"];
45->46[label="True"];
45->47[label="False"];
46[label="Node Type: EXPRESSION 46

EXPRESSION:
is_whitelisted = false

IRs:
is_whitelisted(bool) := False(bool)"];
46->48;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
is_whitelisted = true

IRs:
is_whitelisted(bool) := True(bool)"];
47->48;
48[label="Node Type: END_IF 48
"];
48->37;
49[label="Node Type: RETURN 49

EXPRESSION:
(tier_name,tier_index,tier_ends_at,tier_tokens_remaining,tier_price,tier_min,duration_is_modifiable,is_whitelisted)

IRs:
RETURN tier_name,tier_index,tier_ends_at,tier_tokens_remaining,tier_price,tier_min,duration_is_modifiable,is_whitelisted"];
}
// Function: 68.sol-MintedCappedIdx-getReservedDestinationInfo(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arr_indices = new bytes32[](4)

IRs:
TMP_615(bytes32[])  = new bytes32[](4)
arr_indices(bytes32[]) = ['TMP_615(bytes32[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
arr_indices[0] = destIndex(_destination)

IRs:
REF_186(bytes32) -> arr_indices[0]
TMP_616(bytes32) = INTERNAL_CALL, MintedCappedIdx.destIndex(address)(_destination)
REF_186(bytes32) (->arr_indices) := TMP_616(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
arr_indices[1] = destTokens(_destination)

IRs:
REF_187(bytes32) -> arr_indices[1]
TMP_617(bytes32) = INTERNAL_CALL, MintedCappedIdx.destTokens(address)(_destination)
REF_187(bytes32) (->arr_indices) := TMP_617(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
arr_indices[2] = destPercent(_destination)

IRs:
REF_188(bytes32) -> arr_indices[2]
TMP_618(bytes32) = INTERNAL_CALL, MintedCappedIdx.destPercent(address)(_destination)
REF_188(bytes32) (->arr_indices) := TMP_618(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
arr_indices[3] = destPrecision(_destination)

IRs:
REF_189(bytes32) -> arr_indices[3]
TMP_619(bytes32) = INTERNAL_CALL, MintedCappedIdx.destPrecision(address)(_destination)
REF_189(bytes32) (->arr_indices) := TMP_619(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
read_values = GetterInterface(_storage).readMulti(_exec_id,arr_indices)

IRs:
TMP_620 = CONVERT _storage to GetterInterface
TMP_621(bytes32[]) = HIGH_LEVEL_CALL, dest:TMP_620(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
read_values(bytes32[]) = ['TMP_621(bytes32[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
destination_list_index = uint256(read_values[0])

IRs:
REF_191(bytes32) -> read_values[0]
TMP_622 = CONVERT REF_191 to uint256
destination_list_index(uint256) := TMP_622(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
destination_list_index == 0

IRs:
TMP_623(bool) = destination_list_index == 0
CONDITION TMP_623"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
destination_list_index --

IRs:
TMP_624(uint256) := destination_list_index(uint256)
destination_list_index(uint256) = destination_list_index - 1"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
num_tokens = uint256(read_values[1])

IRs:
REF_192(bytes32) -> read_values[1]
TMP_625 = CONVERT REF_192 to uint256
num_tokens(uint256) := TMP_625(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
num_percent = uint256(read_values[2])

IRs:
REF_193(bytes32) -> read_values[2]
TMP_626 = CONVERT REF_193 to uint256
num_percent(uint256) := TMP_626(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
percent_decimals = uint256(read_values[3])

IRs:
REF_194(bytes32) -> read_values[3]
TMP_627 = CONVERT REF_194 to uint256
percent_decimals(uint256) := TMP_627(uint256)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
(destination_list_index,num_tokens,num_percent,percent_decimals)

IRs:
RETURN destination_list_index,num_tokens,num_percent,percent_decimals"];
}
// Function: 68.sol-MintedCappedIdx-getReservedTokenDestinationList(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
num_destinations = uint256(GetterInterface(_storage).read(_exec_id,reservedDestinations()))

IRs:
TMP_596 = CONVERT _storage to GetterInterface
TMP_597(bytes32) = INTERNAL_CALL, MintedCappedIdx.reservedDestinations()()
TMP_598(bytes32) = HIGH_LEVEL_CALL, dest:TMP_596(GetterInterface), function:read, arguments:['_exec_id', 'TMP_597']  
TMP_599 = CONVERT TMP_598 to uint256
num_destinations(uint256) := TMP_599(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
num_destinations == 0

IRs:
TMP_600(bool) = num_destinations == 0
CONDITION TMP_600"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(num_destinations,reserved_destinations)

IRs:
RETURN num_destinations,reserved_destinations"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
arr_indices = new bytes32[](num_destinations)

IRs:
TMP_602(bytes32[])  = new bytes32[](num_destinations)
arr_indices(bytes32[]) = ['TMP_602(bytes32[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i <= num_destinations

IRs:
TMP_603(bool) = i <= num_destinations
CONDITION TMP_603"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
arr_indices[i - 1] = bytes32((32 * i) + uint256(reservedDestinations()))

IRs:
TMP_604(uint256) = i - 1
REF_183(bytes32) -> arr_indices[TMP_604]
TMP_605(uint256) = 32 * i
TMP_606(bytes32) = INTERNAL_CALL, MintedCappedIdx.reservedDestinations()()
TMP_607 = CONVERT TMP_606 to uint256
TMP_608(uint256) = TMP_605 + TMP_607
TMP_609 = CONVERT TMP_608 to bytes32
REF_183(bytes32) (->arr_indices) := TMP_609(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_610(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reserved_destinations = GetterInterface(_storage).readMulti(_exec_id,arr_indices).toAddressArr()

IRs:
TMP_611 = CONVERT _storage to GetterInterface
TMP_612(bytes32[]) = HIGH_LEVEL_CALL, dest:TMP_611(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
TMP_613(address[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toAddressArr(bytes32[]), arguments:['TMP_612'] 
reserved_destinations(address[]) = ['TMP_613(address[])']"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(num_destinations,reserved_destinations)

IRs:
RETURN num_destinations,reserved_destinations"];
}
// Function: 68.sol-MintedCappedIdx-getTierStartAndEndDates(address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = GetterInterface(_storage)

IRs:
TMP_508 = CONVERT _storage to GetterInterface
target(GetterInterface) := TMP_508(GetterInterface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
arr_indices = new bytes32[](3 + _index)

IRs:
TMP_510(uint256) = 3 + _index
TMP_511(bytes32[])  = new bytes32[](TMP_510)
arr_indices(bytes32[]) = ['TMP_511(bytes32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
arr_indices[0] = saleTierList()

IRs:
REF_143(bytes32) -> arr_indices[0]
TMP_512(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
REF_143(bytes32) (->arr_indices) := TMP_512(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
arr_indices[1] = startTime()

IRs:
REF_144(bytes32) -> arr_indices[1]
TMP_513(bytes32) = INTERNAL_CALL, MintedCappedIdx.startTime()()
REF_144(bytes32) (->arr_indices) := TMP_513(bytes32)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i <= _index

IRs:
TMP_514(bool) = i <= _index
CONDITION TMP_514"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
arr_indices[2 + i] = tierDuration(i)

IRs:
TMP_515(uint256) = 2 + i
REF_145(bytes32) -> arr_indices[TMP_515]
TMP_516(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierDuration(uint256)(i)
REF_145(bytes32) (->arr_indices) := TMP_516(bytes32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_517(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
read_values = target.readMulti(_exec_id,arr_indices).toUintArr()

IRs:
TMP_518(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
TMP_519(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_518'] 
read_values(uint256[]) = ['TMP_519(uint256[])']"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
assert(bool)(read_values.length == 3 + _index)

IRs:
REF_148 -> LENGTH read_values
TMP_520(uint256) = 3 + _index
TMP_521(bool) = REF_148 == TMP_520
TMP_522(None) = SOLIDITY_CALL assert(bool)(TMP_521)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
read_values[0] <= _index

IRs:
REF_149(uint256) -> read_values[0]
TMP_523(bool) = REF_149 <= _index
CONDITION TMP_523"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
(0,0)

IRs:
RETURN 0,0"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tier_start = read_values[1]

IRs:
REF_150(uint256) -> read_values[1]
tier_start(uint256) := REF_150(uint256)"];
16->19;
17[label="Node Type: BEGIN_LOOP 17
"];
17->20;
18[label="Node Type: END_LOOP 18
"];
18->23;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
19->17;
20[label="Node Type: IF_LOOP 20

EXPRESSION:
i < _index

IRs:
TMP_524(bool) = i < _index
CONDITION TMP_524"];
20->21[label="True"];
20->18[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
tier_start += read_values[2 + i]

IRs:
TMP_525(uint256) = 2 + i
REF_151(uint256) -> read_values[TMP_525]
tier_start(uint256) = tier_start + REF_151"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_526(uint256) := i(uint256)
i(uint256) = i + 1"];
22->20;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
tier_end = tier_start + read_values[read_values.length - 1]

IRs:
REF_152 -> LENGTH read_values
TMP_527(uint256) = REF_152 - 1
REF_153(uint256) -> read_values[TMP_527]
TMP_528(uint256) = tier_start + REF_153
tier_end(uint256) := TMP_528(uint256)"];
23->24;
24[label="Node Type: RETURN 24

EXPRESSION:
(tier_start,tier_end)

IRs:
RETURN tier_start,tier_end"];
}
// Function: 68.sol-MintedCappedIdx-getTierWhitelist(address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
num_whitelisted = uint256(GetterInterface(_storage).read(_exec_id,tierWhitelist(_tier_index)))

IRs:
TMP_542 = CONVERT _storage to GetterInterface
TMP_543(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierWhitelist(uint256)(_tier_index)
TMP_544(bytes32) = HIGH_LEVEL_CALL, dest:TMP_542(GetterInterface), function:read, arguments:['_exec_id', 'TMP_543']  
TMP_545 = CONVERT TMP_544 to uint256
num_whitelisted(uint256) := TMP_545(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
num_whitelisted == 0

IRs:
TMP_546(bool) = num_whitelisted == 0
CONDITION TMP_546"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
arr_indices = new bytes32[](num_whitelisted)

IRs:
TMP_548(bytes32[])  = new bytes32[](num_whitelisted)
arr_indices(bytes32[]) = ['TMP_548(bytes32[])']"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < num_whitelisted

IRs:
TMP_549(bool) = i < num_whitelisted
CONDITION TMP_549"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
arr_indices[i] = bytes32(32 + (32 * i) + uint256(tierWhitelist(_tier_index)))

IRs:
REF_163(bytes32) -> arr_indices[i]
TMP_550(uint256) = 32 * i
TMP_551(uint256) = 32 + TMP_550
TMP_552(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierWhitelist(uint256)(_tier_index)
TMP_553 = CONVERT TMP_552 to uint256
TMP_554(uint256) = TMP_551 + TMP_553
TMP_555 = CONVERT TMP_554 to bytes32
REF_163(bytes32) (->arr_indices) := TMP_555(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_556(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
whitelist = GetterInterface(_storage).readMulti(_exec_id,arr_indices).toAddressArr()

IRs:
TMP_557 = CONVERT _storage to GetterInterface
TMP_558(bytes32[]) = HIGH_LEVEL_CALL, dest:TMP_557(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
TMP_559(address[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toAddressArr(bytes32[]), arguments:['TMP_558'] 
whitelist(address[]) = ['TMP_559(address[])']"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(num_whitelisted,whitelist)

IRs:
RETURN num_whitelisted,whitelist"];
}
// Function: 68.sol-MintedCappedIdx-getTokenInfo(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed_arr = new bytes32[](4)

IRs:
TMP_583(bytes32[])  = new bytes32[](4)
seed_arr(bytes32[]) = ['TMP_583(bytes32[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
seed_arr[0] = tokenName()

IRs:
REF_172(bytes32) -> seed_arr[0]
TMP_584(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenName()()
REF_172(bytes32) (->seed_arr) := TMP_584(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
seed_arr[1] = tokenSymbol()

IRs:
REF_173(bytes32) -> seed_arr[1]
TMP_585(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenSymbol()()
REF_173(bytes32) (->seed_arr) := TMP_585(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
seed_arr[2] = tokenDecimals()

IRs:
REF_174(bytes32) -> seed_arr[2]
TMP_586(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenDecimals()()
REF_174(bytes32) (->seed_arr) := TMP_586(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
seed_arr[3] = tokenTotalSupply()

IRs:
REF_175(bytes32) -> seed_arr[3]
TMP_587(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenTotalSupply()()
REF_175(bytes32) (->seed_arr) := TMP_587(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
values_arr = GetterInterface(_storage).readMulti(_exec_id,seed_arr)

IRs:
TMP_588 = CONVERT _storage to GetterInterface
TMP_589(bytes32[]) = HIGH_LEVEL_CALL, dest:TMP_588(GetterInterface), function:readMulti, arguments:['_exec_id', 'seed_arr']  
values_arr(bytes32[]) = ['TMP_589(bytes32[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token_name = values_arr[0]

IRs:
REF_177(bytes32) -> values_arr[0]
token_name(bytes32) := REF_177(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token_symbol = values_arr[1]

IRs:
REF_178(bytes32) -> values_arr[1]
token_symbol(bytes32) := REF_178(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
token_decimals = uint256(values_arr[2])

IRs:
REF_179(bytes32) -> values_arr[2]
TMP_590 = CONVERT REF_179 to uint256
token_decimals(uint256) := TMP_590(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
total_supply = uint256(values_arr[3])

IRs:
REF_180(bytes32) -> values_arr[3]
TMP_591 = CONVERT REF_180 to uint256
total_supply(uint256) := TMP_591(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(token_name,token_symbol,token_decimals,total_supply)

IRs:
RETURN token_name,token_symbol,token_decimals,total_supply"];
}
// Function: 68.sol-MintedCappedIdx-getTokensSold(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(GetterInterface(_storage).read(_exec_id,tokensSold()))

IRs:
TMP_529 = CONVERT _storage to GetterInterface
TMP_530(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokensSold()()
TMP_531(bytes32) = HIGH_LEVEL_CALL, dest:TMP_529(GetterInterface), function:read, arguments:['_exec_id', 'TMP_530']  
TMP_532 = CONVERT TMP_531 to uint256
RETURN TMP_532"];
}
// Function: 68.sol-MintedCappedIdx-getTransferAgentStatus(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
GetterInterface(_storage).read(_exec_id,transferAgents(_agent)) != 0

IRs:
TMP_592 = CONVERT _storage to GetterInterface
TMP_593(bytes32) = INTERNAL_CALL, MintedCappedIdx.transferAgents(address)(_agent)
TMP_594(bytes32) = HIGH_LEVEL_CALL, dest:TMP_592(GetterInterface), function:read, arguments:['_exec_id', 'TMP_593']  
TMP_595(bool) = TMP_594 != 0
CONDITION TMP_595"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 68.sol-MintedCappedIdx-getWhitelistStatus(address,bytes32,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = GetterInterface(_storage)

IRs:
TMP_533 = CONVERT _storage to GetterInterface
target(GetterInterface) := TMP_533(GetterInterface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
arr_indices = new bytes32[](2)

IRs:
TMP_535(bytes32[])  = new bytes32[](2)
arr_indices(bytes32[]) = ['TMP_535(bytes32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
arr_indices[0] = whitelistMinTok(_tier_index,_buyer)

IRs:
REF_155(bytes32) -> arr_indices[0]
TMP_536(bytes32) = INTERNAL_CALL, MintedCappedIdx.whitelistMinTok(uint256,address)(_tier_index,_buyer)
REF_155(bytes32) (->arr_indices) := TMP_536(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
arr_indices[1] = whitelistMaxTok(_tier_index,_buyer)

IRs:
REF_156(bytes32) -> arr_indices[1]
TMP_537(bytes32) = INTERNAL_CALL, MintedCappedIdx.whitelistMaxTok(uint256,address)(_tier_index,_buyer)
REF_156(bytes32) (->arr_indices) := TMP_537(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
read_values = target.readMulti(_exec_id,arr_indices).toUintArr()

IRs:
TMP_538(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
TMP_539(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_538'] 
read_values(uint256[]) = ['TMP_539(uint256[])']"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(read_values.length == 2)

IRs:
REF_159 -> LENGTH read_values
TMP_540(bool) = REF_159 == 2
TMP_541(None) = SOLIDITY_CALL assert(bool)(TMP_540)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
minimum_purchase_amt = read_values[0]

IRs:
REF_160(uint256) -> read_values[0]
minimum_purchase_amt(uint256) := REF_160(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
max_tokens_remaining = read_values[1]

IRs:
REF_161(uint256) -> read_values[1]
max_tokens_remaining(uint256) := REF_161(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
(minimum_purchase_amt,max_tokens_remaining)

IRs:
RETURN minimum_purchase_amt,max_tokens_remaining"];
}
// Function: 68.sol-MintedCappedIdx-hasContributed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_purchaser,contributors())

IRs:
TMP_244(bytes32) = INTERNAL_CALL, MintedCappedIdx.contributors()()
TMP_245(bytes32) = SOLIDITY_CALL keccak256()(_purchaser,TMP_244)
RETURN TMP_245"];
}
// Function: 68.sol-MintedCappedIdx-init(address,uint256,bytes32,uint256,uint256,uint256,uint256,bool,bool,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Contract.initialize()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.initialize(), arguments:[] "];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_team_wallet == 0 || _initial_tier_price == 0 || _start_time < now || _start_time + _initial_tier_duration <= _start_time || _initial_tier_token_sell_cap == 0 || _admin == address(0)

IRs:
TMP_290(bool) = _team_wallet == 0
TMP_291(bool) = _initial_tier_price == 0
TMP_292(bool) = TMP_290 || TMP_291
TMP_293(bool) = _start_time < now
TMP_294(bool) = TMP_292 || TMP_293
TMP_295(uint256) = _start_time + _initial_tier_duration
TMP_296(bool) = TMP_295 <= _start_time
TMP_297(bool) = TMP_294 || TMP_296
TMP_298(bool) = _initial_tier_token_sell_cap == 0
TMP_299(bool) = TMP_297 || TMP_298
TMP_300 = CONVERT 0 to address
TMP_301(bool) = _admin == TMP_300
TMP_302(bool) = TMP_299 || TMP_301
CONDITION TMP_302"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert(string)(improper initialization)

IRs:
TMP_303(None) = SOLIDITY_CALL revert(string)(improper initialization)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Contract.storing()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.storing(), arguments:[] "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Contract.set(execPermissions(msg.sender)).to(true)

IRs:
TMP_305(bytes32) = INTERNAL_CALL, MintedCappedIdx.execPermissions(address)(msg.sender)
TMP_306(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_305'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bool), arguments:['TMP_306', 'True'] "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Contract.set(admin()).to(_admin)

IRs:
TMP_308(bytes32) = INTERNAL_CALL, MintedCappedIdx.admin()()
TMP_309(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_308'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_309', '_admin'] "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Contract.set(wallet()).to(_team_wallet)

IRs:
TMP_311(bytes32) = INTERNAL_CALL, MintedCappedIdx.wallet()()
TMP_312(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_311'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,address), arguments:['TMP_312', '_team_wallet'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Contract.set(totalDuration()).to(_initial_tier_duration)

IRs:
TMP_314(bytes32) = INTERNAL_CALL, MintedCappedIdx.totalDuration()()
TMP_315(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_314'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_315', '_initial_tier_duration'] "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Contract.set(startTime()).to(_start_time)

IRs:
TMP_317(bytes32) = INTERNAL_CALL, MintedCappedIdx.startTime()()
TMP_318(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_317'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_318', '_start_time'] "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Contract.set(saleTierList()).to(uint256(1))

IRs:
TMP_320(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_321(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_320'] 
TMP_322 = CONVERT 1 to uint256
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_321', 'TMP_322'] "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Contract.set(tierName(uint256(0))).to(_initial_tier_name)

IRs:
TMP_324 = CONVERT 0 to uint256
TMP_325(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierName(uint256)(TMP_324)
TMP_326(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_325'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bytes32), arguments:['TMP_326', '_initial_tier_name'] "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Contract.set(tierCap(uint256(0))).to(_initial_tier_token_sell_cap)

IRs:
TMP_328 = CONVERT 0 to uint256
TMP_329(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierCap(uint256)(TMP_328)
TMP_330(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_329'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_330', '_initial_tier_token_sell_cap'] "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Contract.set(tierPrice(uint256(0))).to(_initial_tier_price)

IRs:
TMP_332 = CONVERT 0 to uint256
TMP_333(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierPrice(uint256)(TMP_332)
TMP_334(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_333'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_334', '_initial_tier_price'] "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Contract.set(tierDuration(uint256(0))).to(_initial_tier_duration)

IRs:
TMP_336 = CONVERT 0 to uint256
TMP_337(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierDuration(uint256)(TMP_336)
TMP_338(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_337'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_338', '_initial_tier_duration'] "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Contract.set(tierMin(uint256(0))).to(_initial_tier_min_purchase)

IRs:
TMP_340 = CONVERT 0 to uint256
TMP_341(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierMin(uint256)(TMP_340)
TMP_342(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_341'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_342', '_initial_tier_min_purchase'] "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Contract.set(tierModifiable(uint256(0))).to(_initial_tier_duration_is_modifiable)

IRs:
TMP_344 = CONVERT 0 to uint256
TMP_345(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierModifiable(uint256)(TMP_344)
TMP_346(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_345'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bool), arguments:['TMP_346', '_initial_tier_duration_is_modifiable'] "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Contract.set(tierWhitelisted(uint256(0))).to(_initial_tier_is_whitelisted)

IRs:
TMP_348 = CONVERT 0 to uint256
TMP_349(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierWhitelisted(uint256)(TMP_348)
TMP_350(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_349'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,bool), arguments:['TMP_350', '_initial_tier_is_whitelisted'] "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Contract.set(currentTier()).to(uint256(1))

IRs:
TMP_352(bytes32) = INTERNAL_CALL, MintedCappedIdx.currentTier()()
TMP_353(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_352'] 
TMP_354 = CONVERT 1 to uint256
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_353', 'TMP_354'] "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Contract.set(currentEndsAt()).to(_initial_tier_duration.add(_start_time))

IRs:
TMP_356(bytes32) = INTERNAL_CALL, MintedCappedIdx.currentEndsAt()()
TMP_357(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_356'] 
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_initial_tier_duration', '_start_time'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_357', 'TMP_358'] "];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Contract.set(currentTokensRemaining()).to(_initial_tier_token_sell_cap)

IRs:
TMP_360(bytes32) = INTERNAL_CALL, MintedCappedIdx.currentTokensRemaining()()
TMP_361(bytes32) = LIBRARY_CALL, dest:Contract, function:Contract.set(bytes32), arguments:['TMP_360'] 
LIBRARY_CALL, dest:Contract, function:Contract.to(bytes32,uint256), arguments:['TMP_361', '_initial_tier_token_sell_cap'] "];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Contract.commit()

IRs:
LIBRARY_CALL, dest:Contract, function:Contract.commit(), arguments:[] "];
}
// Function: 68.sol-MintedCappedIdx-isConfigured()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_is_configured)

IRs:
TMP_238(bytes32) = SOLIDITY_CALL keccak256()(sale_is_configured)
RETURN TMP_238"];
}
// Function: 68.sol-MintedCappedIdx-isCrowdsaleFull(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
target = GetterInterface(_storage)

IRs:
TMP_380 = CONVERT _storage to GetterInterface
target(GetterInterface) := TMP_380(GetterInterface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
initial_arr = new bytes32[](2)

IRs:
TMP_382(bytes32[])  = new bytes32[](2)
initial_arr(bytes32[]) = ['TMP_382(bytes32[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
initial_arr[0] = saleTierList()

IRs:
REF_59(bytes32) -> initial_arr[0]
TMP_383(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
REF_59(bytes32) (->initial_arr) := TMP_383(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
initial_arr[1] = tokensSold()

IRs:
REF_60(bytes32) -> initial_arr[1]
TMP_384(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokensSold()()
REF_60(bytes32) (->initial_arr) := TMP_384(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
read_values = target.readMulti(_exec_id,initial_arr).toUintArr()

IRs:
TMP_385(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'initial_arr']  
TMP_386(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_385'] 
read_values(uint256[]) = ['TMP_386(uint256[])']"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
num_tiers = read_values[0]

IRs:
REF_63(uint256) -> read_values[0]
num_tiers(uint256) := REF_63(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_tokens_sold = read_values[1]

IRs:
REF_64(uint256) -> read_values[1]
_tokens_sold(uint256) := REF_64(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
arr_indices = new bytes32[](num_tiers)

IRs:
TMP_388(bytes32[])  = new bytes32[](num_tiers)
arr_indices(bytes32[]) = ['TMP_388(bytes32[])']"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->15;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < num_tiers

IRs:
TMP_389(bool) = i < num_tiers
CONDITION TMP_389"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
arr_indices[i] = tierCap(i)

IRs:
REF_65(bytes32) -> arr_indices[i]
TMP_390(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierCap(uint256)(i)
REF_65(bytes32) (->arr_indices) := TMP_390(bytes32)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_391(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
read_values = target.readMulti(_exec_id,arr_indices).toUintArr()

IRs:
TMP_392(bytes32[]) = HIGH_LEVEL_CALL, dest:target(GetterInterface), function:readMulti, arguments:['_exec_id', 'arr_indices']  
TMP_393(uint256[]) = LIBRARY_CALL, dest:ArrayUtils, function:ArrayUtils.toUintArr(bytes32[]), arguments:['TMP_392'] 
read_values(uint256[]) = ['TMP_393(uint256[])']"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
assert(bool)(read_values.length == num_tiers)

IRs:
REF_68 -> LENGTH read_values
TMP_394(bool) = REF_68 == num_tiers
TMP_395(None) = SOLIDITY_CALL assert(bool)(TMP_394)"];
16->19;
17[label="Node Type: BEGIN_LOOP 17
"];
17->20;
18[label="Node Type: END_LOOP 18
"];
18->24;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
19->17;
20[label="Node Type: IF_LOOP 20

EXPRESSION:
i < read_values.length

IRs:
REF_69 -> LENGTH read_values
TMP_396(bool) = i < REF_69
CONDITION TMP_396"];
20->21[label="True"];
20->18[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
max_sellable += read_values[i]

IRs:
REF_70(uint256) -> read_values[i]
max_sellable(uint256) = max_sellable + REF_70"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_397(uint256) := i(uint256)
i(uint256) = i + 1"];
22->20;
24[label="Node Type: IF 24

EXPRESSION:
_tokens_sold >= max_sellable

IRs:
TMP_398(bool) = _tokens_sold >= max_sellable
CONDITION TMP_398"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
is_crowdsale_full = true

IRs:
is_crowdsale_full(bool) := True(bool)"];
25->27;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
is_crowdsale_full = false

IRs:
is_crowdsale_full(bool) := False(bool)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: RETURN 28

EXPRESSION:
(is_crowdsale_full,max_sellable)

IRs:
RETURN is_crowdsale_full,max_sellable"];
}
// Function: 68.sol-MintedCappedIdx-isFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_is_completed)

IRs:
TMP_239(bytes32) = SOLIDITY_CALL keccak256()(sale_is_completed)
RETURN TMP_239"];
}
// Function: 68.sol-MintedCappedIdx-name(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
GetterInterface(_storage).read(_exec_id,tokenName())

IRs:
TMP_576 = CONVERT _storage to GetterInterface
TMP_577(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenName()()
TMP_578(bytes32) = HIGH_LEVEL_CALL, dest:TMP_576(GetterInterface), function:read, arguments:['_exec_id', 'TMP_577']  
RETURN TMP_578"];
}
// Function: 68.sol-MintedCappedIdx-reservedDestinations()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(reserved_token_dest_list)

IRs:
TMP_280(bytes32) = SOLIDITY_CALL keccak256()(reserved_token_dest_list)
RETURN TMP_280"];
}
// Function: 68.sol-MintedCappedIdx-saleTierList()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_tier_list)

IRs:
TMP_246(bytes32) = SOLIDITY_CALL keccak256()(sale_tier_list)
RETURN TMP_246"];
}
// Function: 68.sol-MintedCappedIdx-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
EXEC_PERMISSIONS = keccak256()(script_exec_permissions)

IRs:
TMP_628(bytes32) = SOLIDITY_CALL keccak256()(script_exec_permissions)
EXEC_PERMISSIONS(bytes32) := TMP_628(bytes32)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_BALANCES = keccak256()(token_balances)

IRs:
TMP_629(bytes32) = SOLIDITY_CALL keccak256()(token_balances)
TOKEN_BALANCES(bytes32) := TMP_629(bytes32)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_ALLOWANCES = keccak256()(token_allowances)

IRs:
TMP_630(bytes32) = SOLIDITY_CALL keccak256()(token_allowances)
TOKEN_ALLOWANCES(bytes32) := TMP_630(bytes32)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOKEN_TRANSFER_AGENTS = keccak256()(token_transfer_agents)

IRs:
TMP_631(bytes32) = SOLIDITY_CALL keccak256()(token_transfer_agents)
TOKEN_TRANSFER_AGENTS(bytes32) := TMP_631(bytes32)"];
}
// Function: 68.sol-MintedCappedIdx-startTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_start_time)

IRs:
TMP_240(bytes32) = SOLIDITY_CALL keccak256()(sale_start_time)
RETURN TMP_240"];
}
// Function: 68.sol-MintedCappedIdx-symbol(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
GetterInterface(_storage).read(_exec_id,tokenSymbol())

IRs:
TMP_579 = CONVERT _storage to GetterInterface
TMP_580(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenSymbol()()
TMP_581(bytes32) = HIGH_LEVEL_CALL, dest:TMP_579(GetterInterface), function:read, arguments:['_exec_id', 'TMP_580']  
RETURN TMP_581"];
}
// Function: 68.sol-MintedCappedIdx-tierCap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,cap,saleTierList())

IRs:
TMP_249(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_250(bytes32) = SOLIDITY_CALL keccak256()(_idx,cap,TMP_249)
RETURN TMP_250"];
}
// Function: 68.sol-MintedCappedIdx-tierDuration(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,duration,saleTierList())

IRs:
TMP_255(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_256(bytes32) = SOLIDITY_CALL keccak256()(_idx,duration,TMP_255)
RETURN TMP_256"];
}
// Function: 68.sol-MintedCappedIdx-tierMin(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,minimum,saleTierList())

IRs:
TMP_253(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_254(bytes32) = SOLIDITY_CALL keccak256()(_idx,minimum,TMP_253)
RETURN TMP_254"];
}
// Function: 68.sol-MintedCappedIdx-tierModifiable(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,mod_stat,saleTierList())

IRs:
TMP_257(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_258(bytes32) = SOLIDITY_CALL keccak256()(_idx,mod_stat,TMP_257)
RETURN TMP_258"];
}
// Function: 68.sol-MintedCappedIdx-tierName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,name,saleTierList())

IRs:
TMP_247(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_248(bytes32) = SOLIDITY_CALL keccak256()(_idx,name,TMP_247)
RETURN TMP_248"];
}
// Function: 68.sol-MintedCappedIdx-tierPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,price,saleTierList())

IRs:
TMP_251(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_252(bytes32) = SOLIDITY_CALL keccak256()(_idx,price,TMP_251)
RETURN TMP_252"];
}
// Function: 68.sol-MintedCappedIdx-tierWhitelist(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,tier_whitelists)

IRs:
TMP_266(bytes32) = SOLIDITY_CALL keccak256()(_idx,tier_whitelists)
RETURN TMP_266"];
}
// Function: 68.sol-MintedCappedIdx-tierWhitelisted(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_idx,wl_stat,saleTierList())

IRs:
TMP_259(bytes32) = INTERNAL_CALL, MintedCappedIdx.saleTierList()()
TMP_260(bytes32) = SOLIDITY_CALL keccak256()(_idx,wl_stat,TMP_259)
RETURN TMP_260"];
}
// Function: 68.sol-MintedCappedIdx-tokenDecimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(token_decimals)

IRs:
TMP_273(bytes32) = SOLIDITY_CALL keccak256()(token_decimals)
RETURN TMP_273"];
}
// Function: 68.sol-MintedCappedIdx-tokenName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(token_name)

IRs:
TMP_271(bytes32) = SOLIDITY_CALL keccak256()(token_name)
RETURN TMP_271"];
}
// Function: 68.sol-MintedCappedIdx-tokenSymbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(token_symbol)

IRs:
TMP_272(bytes32) = SOLIDITY_CALL keccak256()(token_symbol)
RETURN TMP_272"];
}
// Function: 68.sol-MintedCappedIdx-tokenTotalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(token_total_supply)

IRs:
TMP_274(bytes32) = SOLIDITY_CALL keccak256()(token_total_supply)
RETURN TMP_274"];
}
// Function: 68.sol-MintedCappedIdx-tokensSold()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_tokens_sold)

IRs:
TMP_242(bytes32) = SOLIDITY_CALL keccak256()(sale_tokens_sold)
RETURN TMP_242"];
}
// Function: 68.sol-MintedCappedIdx-tokensUnlocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_tokens_unlocked)

IRs:
TMP_279(bytes32) = SOLIDITY_CALL keccak256()(sale_tokens_unlocked)
RETURN TMP_279"];
}
// Function: 68.sol-MintedCappedIdx-totalDuration()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_total_duration)

IRs:
TMP_241(bytes32) = SOLIDITY_CALL keccak256()(sale_total_duration)
RETURN TMP_241"];
}
// Function: 68.sol-MintedCappedIdx-totalSupply(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(GetterInterface(_storage).read(_exec_id,tokenTotalSupply()))

IRs:
TMP_572 = CONVERT _storage to GetterInterface
TMP_573(bytes32) = INTERNAL_CALL, MintedCappedIdx.tokenTotalSupply()()
TMP_574(bytes32) = HIGH_LEVEL_CALL, dest:TMP_572(GetterInterface), function:read, arguments:['_exec_id', 'TMP_573']  
TMP_575 = CONVERT TMP_574 to uint256
RETURN TMP_575"];
}
// Function: 68.sol-MintedCappedIdx-totalWeiRaised()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_tot_wei_raised)

IRs:
TMP_265(bytes32) = SOLIDITY_CALL keccak256()(sale_tot_wei_raised)
RETURN TMP_265"];
}
// Function: 68.sol-MintedCappedIdx-transferAgents(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_agent,TOKEN_TRANSFER_AGENTS)

IRs:
TMP_278(bytes32) = SOLIDITY_CALL keccak256()(_agent,TOKEN_TRANSFER_AGENTS)
RETURN TMP_278"];
}
// Function: 68.sol-MintedCappedIdx-wallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(sale_destination_wallet)

IRs:
TMP_264(bytes32) = SOLIDITY_CALL keccak256()(sale_destination_wallet)
RETURN TMP_264"];
}
// Function: 68.sol-MintedCappedIdx-whitelistMaxTok(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_spender,max_tok,tierWhitelist(_idx))

IRs:
TMP_269(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierWhitelist(uint256)(_idx)
TMP_270(bytes32) = SOLIDITY_CALL keccak256()(_spender,max_tok,TMP_269)
RETURN TMP_270"];
}
// Function: 68.sol-MintedCappedIdx-whitelistMinTok(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_spender,min_tok,tierWhitelist(_idx))

IRs:
TMP_267(bytes32) = INTERNAL_CALL, MintedCappedIdx.tierWhitelist(uint256)(_idx)
TMP_268(bytes32) = SOLIDITY_CALL keccak256()(_spender,min_tok,TMP_267)
RETURN TMP_268"];
}
// Function: 68.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,Overflow - Addition)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,Overflow - Addition)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 68.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 68.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,Overflow - Multiplication)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,Overflow - Multiplication)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 68.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,Underflow - Subtraction)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,Underflow - Subtraction)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
