digraph G {
// Function: 695.sol-FlatPricingExt-FlatPricingExt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_oneTokenInWei > 0)

IRs:
TMP_39(bool) = _oneTokenInWei > 0
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oneTokenInWei = _oneTokenInWei

IRs:
oneTokenInWei(uint256) := _oneTokenInWei(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 695.sol-FlatPricingExt-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 695.sol-FlatPricingExt-calculatePrice(uint256,uint256,uint256,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
multiplier = 10 ** decimals

IRs:
TMP_44(uint256) = 10 ** decimals
multiplier(uint256) := TMP_44(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
value.times(multiplier) / oneTokenInWei

IRs:
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.times(uint256,uint256), arguments:['value', 'multiplier'] 
TMP_46(uint256) = TMP_45 / oneTokenInWei
RETURN TMP_46"];
}
// Function: 695.sol-FlatPricingExt-isPresalePurchase(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 695.sol-FlatPricingExt-isPricingStrategy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 695.sol-FlatPricingExt-isSane(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 695.sol-FlatPricingExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_47(bool) = msg.sender == owner
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 695.sol-FlatPricingExt-onlyTier()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != address(tier)

IRs:
TMP_49 = CONVERT tier to address
TMP_50(bool) = msg.sender != TMP_49
CONDITION TMP_50"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 695.sol-FlatPricingExt-setTier(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_tier != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _tier != TMP_32
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(tier == address(0))

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = tier == TMP_35
TMP_37(None) = SOLIDITY_CALL assert(bool)(TMP_36)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tier = _tier

IRs:
tier(address) := _tier(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 695.sol-FlatPricingExt-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = newOwner != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 695.sol-FlatPricingExt-updateRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oneTokenInWei = newOneTokenInWei

IRs:
oneTokenInWei(uint256) := newOneTokenInWei(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RateChanged(newOneTokenInWei)

IRs:
Emit RateChanged(newOneTokenInWei)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyTier()

IRs:
MODIFIER_CALL, FlatPricingExt.onlyTier()()"];
3->1;
}
// Function: 695.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 695.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 695.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 695.sol-PricingStrategy-calculatePrice(uint256,uint256,uint256,address,uint256)
digraph{
}
// Function: 695.sol-PricingStrategy-isPresalePurchase(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 695.sol-PricingStrategy-isPricingStrategy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 695.sol-PricingStrategy-isSane(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 695.sol-PricingStrategy-updateRate(uint256)
digraph{
}
// Function: 695.sol-SafeMathLibExt-divides(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_13(bool) = b > 0
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_15(uint256) = a / b
c(uint256) := TMP_15(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_16(uint256) = b * c
TMP_17(uint256) = a % b
TMP_18(uint256) = TMP_16 + TMP_17
TMP_19(bool) = a == TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 695.sol-SafeMathLibExt-minus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_21(bool) = b <= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_23(uint256) = a - b
RETURN TMP_23"];
}
// Function: 695.sol-SafeMathLibExt-plus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_24(uint256) = a + b
c(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_25(bool) = c >= a
TMP_26(None) = SOLIDITY_CALL assert(bool)(TMP_25)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 695.sol-SafeMathLibExt-times(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_8(bool) = a == 0
TMP_9(uint256) = c / a
TMP_10(bool) = TMP_9 == b
TMP_11(bool) = TMP_8 || TMP_10
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
