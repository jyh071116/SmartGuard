digraph G {
// Function: 717.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_10(bool) = size > 0
RETURN TMP_10"];
}
// Function: 717.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 717.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 717.sol-ERC721-exists(uint256)
digraph{
}
// Function: 717.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 717.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 717.sol-ERC721-name()
digraph{
}
// Function: 717.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 717.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 717.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 717.sol-ERC721-symbol()
digraph{
}
// Function: 717.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 717.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 717.sol-ERC721-tokenURI(uint256)
digraph{
}
// Function: 717.sol-ERC721-totalSupply()
digraph{
}
// Function: 717.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 717.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 717.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 717.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 717.sol-ERC721Basic-isApprovedForAll(address,address)
digraph{
}
// Function: 717.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 717.sol-ERC721Basic-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721Basic-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 717.sol-ERC721Basic-setApprovalForAll(address,bool)
digraph{
}
// Function: 717.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721BasicToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_80 = CONVERT 0 to address
Emit Transfer(_owner,TMP_80,_tokenId)"];
}
// Function: 717.sol-ERC721BasicToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _to != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_76 = CONVERT 0 to address
Emit Transfer(TMP_76,_to,_tokenId)"];
}
// Function: 717.sol-ERC721BasicToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_11(address) -> tokenOwner[_tokenId]
TMP_90 = CONVERT 0 to address
TMP_91(bool) = REF_11 == TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_12(address) -> tokenOwner[_tokenId]
REF_12(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_13(uint256) -> ownedTokensCount[_to]
REF_14(uint256) -> ownedTokensCount[_to]
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', '1'] 
REF_13(uint256) (->ownedTokensCount) := TMP_93(uint256)"];
}
// Function: 717.sol-ERC721BasicToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_31(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_31(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_32(bool) = _to != owner
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_34(bool) = msg.sender == owner
TMP_35(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_36(bool) = TMP_34 || TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
getApproved(_tokenId) != address(0) || _to != address(0)

IRs:
TMP_38(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_39 = CONVERT 0 to address
TMP_40(bool) = TMP_38 != TMP_39
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _to != TMP_41
TMP_43(bool) = TMP_40 || TMP_42
CONDITION TMP_43"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_3(address) -> tokenApprovals[_tokenId]
REF_3(address) (->tokenApprovals) := _to(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 717.sol-ERC721BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = _owner != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_0(uint256) -> ownedTokensCount[_owner]
RETURN REF_0"];
}
// Function: 717.sol-ERC721BasicToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_107(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-ERC721BasicToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_99(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_100 = UnaryType.BANG TMP_99 
CONDITION TMP_100"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_101 = CONVERT _to to ERC721Receiver
TMP_102(bytes4) = HIGH_LEVEL_CALL, dest:TMP_101(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_102(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_103(bool) = retval == ERC721_RECEIVED
RETURN TMP_103"];
}
// Function: 717.sol-ERC721BasicToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_82(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_83(bool) = TMP_82 == _owner
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_9(address) -> tokenApprovals[_tokenId]
TMP_85 = CONVERT 0 to address
TMP_86(bool) = REF_9 != TMP_85
CONDITION TMP_86"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_10(address) -> tokenApprovals[_tokenId]
TMP_87 = CONVERT 0 to address
REF_10(address) (->tokenApprovals) := TMP_87(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_88 = CONVERT 0 to address
Emit Approval(_owner,TMP_88,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 717.sol-ERC721BasicToken-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_2(address) -> tokenOwner[_tokenId]
owner(address) := REF_2(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_29 = CONVERT 0 to address
TMP_30(bool) = owner != TMP_29
RETURN TMP_30"];
}
// Function: 717.sol-ERC721BasicToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_4(address) -> tokenApprovals[_tokenId]
RETURN REF_4"];
}
// Function: 717.sol-ERC721BasicToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_7(mapping(address => bool)) -> operatorApprovals[_owner]
REF_8(bool) -> REF_7[_operator]
RETURN REF_8"];
}
// Function: 717.sol-ERC721BasicToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_65(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_65(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_66(bool) = _spender == owner
TMP_67(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_68(bool) = TMP_67 == _spender
TMP_69(bool) = TMP_66 || TMP_68
TMP_70(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_71(bool) = TMP_69 || TMP_70
RETURN TMP_71"];
}
// Function: 717.sol-ERC721BasicToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_104(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_105(bool) = TMP_104 == msg.sender
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-ERC721BasicToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_1(address) -> tokenOwner[_tokenId]
owner(address) := REF_1(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = owner != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 717.sol-ERC721BasicToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_94(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_95(bool) = TMP_94 == _from
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_16(uint256) -> ownedTokensCount[_from]
REF_17(uint256) -> ownedTokensCount[_from]
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_17', '1'] 
REF_16(uint256) (->ownedTokensCount) := TMP_97(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_19(address) -> tokenOwner[_tokenId]
TMP_98 = CONVERT 0 to address
REF_19(address) (->tokenOwner) := TMP_98(address)"];
}
// Function: 717.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
2->1;
}
// Function: 717.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_62(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
3->1;
}
// Function: 717.sol-ERC721BasicToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_45(bool) = _to != msg.sender
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_5(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_6(bool) -> REF_5[_to]
REF_6(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 717.sol-ERC721BasicToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 717.sol-ERC721BasicToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _from != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = _to != TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
7->1;
}
// Function: 717.sol-ERC721Enumerable-approve(address,uint256)
digraph{
}
// Function: 717.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 717.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 717.sol-ERC721Enumerable-getApproved(uint256)
digraph{
}
// Function: 717.sol-ERC721Enumerable-isApprovedForAll(address,address)
digraph{
}
// Function: 717.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 717.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 717.sol-ERC721Enumerable-setApprovalForAll(address,bool)
digraph{
}
// Function: 717.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 717.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 717.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 717.sol-ERC721Enumerable-transferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721Metadata-approve(address,uint256)
digraph{
}
// Function: 717.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 717.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 717.sol-ERC721Metadata-getApproved(uint256)
digraph{
}
// Function: 717.sol-ERC721Metadata-isApprovedForAll(address,address)
digraph{
}
// Function: 717.sol-ERC721Metadata-name()
digraph{
}
// Function: 717.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 717.sol-ERC721Metadata-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721Metadata-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 717.sol-ERC721Metadata-setApprovalForAll(address,bool)
digraph{
}
// Function: 717.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 717.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 717.sol-ERC721Metadata-transferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721Receiver-onERC721Received(address,uint256,bytes)
digraph{
}
// Function: 717.sol-ERC721Receiver-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 717.sol-ERC721Token-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._burn(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._burn(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
bytes(tokenURIs[_tokenId]).length != 0

IRs:
REF_76(string) -> tokenURIs[_tokenId]
TMP_212 = CONVERT REF_76 to bytes
REF_77 -> LENGTH TMP_212
TMP_213(bool) = REF_77 != 0
CONDITION TMP_213"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete tokenURIs[_tokenId]

IRs:
REF_78(string) -> tokenURIs[_tokenId]
tokenURIs = delete REF_78 "];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokenIndex = allTokensIndex[_tokenId]

IRs:
REF_79(uint256) -> allTokensIndex[_tokenId]
tokenIndex(uint256) := REF_79(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTokenIndex = allTokens.length.sub(1)

IRs:
REF_80 -> LENGTH allTokens
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_80', '1'] 
lastTokenIndex(uint256) := TMP_214(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastToken = allTokens[lastTokenIndex]

IRs:
REF_82(uint256) -> allTokens[lastTokenIndex]
lastToken(uint256) := REF_82(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allTokens[tokenIndex] = lastToken

IRs:
REF_83(uint256) -> allTokens[tokenIndex]
REF_83(uint256) (->allTokens) := lastToken(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allTokens[lastTokenIndex] = 0

IRs:
REF_84(uint256) -> allTokens[lastTokenIndex]
REF_84(uint256) (->allTokens) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
allTokens.length --

IRs:
REF_85 -> LENGTH allTokens
TMP_215(uint256) := REF_85(uint256)
REF_85(-> allTokens) = REF_85 - 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
allTokensIndex[_tokenId] = 0

IRs:
REF_86(uint256) -> allTokensIndex[_tokenId]
REF_86(uint256) (->allTokensIndex) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allTokensIndex[lastToken] = tokenIndex

IRs:
REF_87(uint256) -> allTokensIndex[lastToken]
REF_87(uint256) (->allTokensIndex) := tokenIndex(uint256)"];
}
// Function: 717.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._mint(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._mint(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allTokensIndex[_tokenId] = allTokens.length

IRs:
REF_71(uint256) -> allTokensIndex[_tokenId]
REF_72 -> LENGTH allTokens
REF_71(uint256) (->allTokensIndex) := REF_72(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allTokens.push(_tokenId)

IRs:
REF_74 -> LENGTH allTokens
TMP_209(uint256) := REF_74(uint256)
TMP_210(uint256) = TMP_209 + 1
REF_74(uint256) (->allTokens) := TMP_210(uint256)
REF_75(uint256) -> allTokens[TMP_209]
REF_75(uint256) (->allTokens) := _tokenId(uint256)"];
}
// Function: 717.sol-ERC721Token-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_198(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_49(string) -> tokenURIs[_tokenId]
REF_49(string) (->tokenURIs) := _uri(string)"];
}
// Function: 717.sol-ERC721Token-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = ownedTokens[_to].length

IRs:
REF_50(uint256[]) -> ownedTokens[_to]
REF_51 -> LENGTH REF_50
length(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_52(uint256[]) -> ownedTokens[_to]
REF_54 -> LENGTH REF_52
TMP_202(uint256) := REF_54(uint256)
TMP_203(uint256) = TMP_202 + 1
REF_54(uint256) (->ownedTokens) := TMP_203(uint256)
REF_55(uint256) -> REF_52[TMP_202]
REF_55(uint256) (->ownedTokens) := _tokenId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_56(uint256) -> ownedTokensIndex[_tokenId]
REF_56(uint256) (->ownedTokensIndex) := length(uint256)"];
}
// Function: 717.sol-ERC721Token-approve(address,uint256)
digraph{
}
// Function: 717.sol-ERC721Token-balanceOf(address)
digraph{
}
// Function: 717.sol-ERC721Token-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_219(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-ERC721Token-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_185(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_186 = UnaryType.BANG TMP_185 
CONDITION TMP_186"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_187 = CONVERT _to to ERC721Receiver
TMP_188(bytes4) = HIGH_LEVEL_CALL, dest:TMP_187(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_188(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_189(bool) = retval == ERC721_RECEIVED
RETURN TMP_189"];
}
// Function: 717.sol-ERC721Token-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_168(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_169(bool) = TMP_168 == _owner
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_31(address) -> tokenApprovals[_tokenId]
TMP_171 = CONVERT 0 to address
TMP_172(bool) = REF_31 != TMP_171
CONDITION TMP_172"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_32(address) -> tokenApprovals[_tokenId]
TMP_173 = CONVERT 0 to address
REF_32(address) (->tokenApprovals) := TMP_173(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_174 = CONVERT 0 to address
Emit Approval(_owner,TMP_174,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 717.sol-ERC721Token-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
}
// Function: 717.sol-ERC721Token-exists(uint256)
digraph{
}
// Function: 717.sol-ERC721Token-getApproved(uint256)
digraph{
}
// Function: 717.sol-ERC721Token-isApprovedForAll(address,address)
digraph{
}
// Function: 717.sol-ERC721Token-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_151(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_151(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_152(bool) = _spender == owner
TMP_153(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_154(bool) = TMP_153 == _spender
TMP_155(bool) = TMP_152 || TMP_154
TMP_156(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_157(bool) = TMP_155 || TMP_156
RETURN TMP_157"];
}
// Function: 717.sol-ERC721Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name_

IRs:
RETURN name_"];
}
// Function: 717.sol-ERC721Token-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_216(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_217(bool) = TMP_216 == msg.sender
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-ERC721Token-ownerOf(uint256)
digraph{
}
// Function: 717.sol-ERC721Token-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_57(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_57(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = ownedTokens[_from].length.sub(1)

IRs:
REF_58(uint256[]) -> ownedTokens[_from]
REF_59 -> LENGTH REF_58
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', '1'] 
lastTokenIndex(uint256) := TMP_205(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_61(uint256[]) -> ownedTokens[_from]
REF_62(uint256) -> REF_61[lastTokenIndex]
lastToken(uint256) := REF_62(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_63(uint256[]) -> ownedTokens[_from]
REF_64(uint256) -> REF_63[tokenIndex]
REF_64(uint256) (->ownedTokens) := lastToken(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_65(uint256[]) -> ownedTokens[_from]
REF_66(uint256) -> REF_65[lastTokenIndex]
REF_66(uint256) (->ownedTokens) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_67(uint256[]) -> ownedTokens[_from]
REF_68 -> LENGTH REF_67
TMP_206(uint256) := REF_68(uint256)
REF_68(-> ownedTokens) = REF_68 - 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_69(uint256) -> ownedTokensIndex[_tokenId]
REF_69(uint256) (->ownedTokensIndex) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_70(uint256) -> ownedTokensIndex[lastToken]
REF_70(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
}
// Function: 717.sol-ERC721Token-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-ERC721Token-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 717.sol-ERC721Token-setApprovalForAll(address,bool)
digraph{
}
// Function: 717.sol-ERC721Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 717.sol-ERC721Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol_

IRs:
RETURN symbol_"];
}
// Function: 717.sol-ERC721Token-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < totalSupply())

IRs:
TMP_195(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
TMP_196(bool) = _index < TMP_195
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allTokens[_index]

IRs:
REF_48(uint256) -> allTokens[_index]
RETURN REF_48"];
}
// Function: 717.sol-ERC721Token-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < balanceOf(_owner))

IRs:
TMP_192(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
TMP_193(bool) = _index < TMP_192
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokens[_owner][_index]

IRs:
REF_45(uint256[]) -> ownedTokens[_owner]
REF_46(uint256) -> REF_45[_index]
RETURN REF_46"];
}
// Function: 717.sol-ERC721Token-tokenURI(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_190(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenURIs[_tokenId]

IRs:
REF_44(string) -> tokenURIs[_tokenId]
RETURN REF_44"];
}
// Function: 717.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allTokens.length

IRs:
REF_47 -> LENGTH allTokens
RETURN REF_47"];
}
// Function: 717.sol-ERC721Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 717.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_8(bool) = msg.sender == owner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_6 = CONVERT 0 to address
owner(address) := TMP_6(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 717.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 717.sol-RoyalStables-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_304 = CONVERT 0 to address
Emit Transfer(_owner,TMP_304,_tokenId)"];
}
// Function: 717.sol-RoyalStables-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_296 = CONVERT 0 to address
TMP_297(bool) = _to != TMP_296
TMP_298(None) = SOLIDITY_CALL require(bool)(TMP_297)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_300 = CONVERT 0 to address
Emit Transfer(TMP_300,_to,_tokenId)"];
}
// Function: 717.sol-RoyalStables-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_229(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_93(string) -> tokenURIs[_tokenId]
REF_93(string) (->tokenURIs) := _uri(string)"];
}
// Function: 717.sol-RoyalStables-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_143(address) -> tokenOwner[_tokenId]
TMP_314 = CONVERT 0 to address
TMP_315(bool) = REF_143 == TMP_314
TMP_316(None) = SOLIDITY_CALL require(bool)(TMP_315)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_144(address) -> tokenOwner[_tokenId]
REF_144(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_145(uint256) -> ownedTokensCount[_to]
REF_146(uint256) -> ownedTokensCount[_to]
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', '1'] 
REF_145(uint256) (->ownedTokensCount) := TMP_317(uint256)"];
}
// Function: 717.sol-RoyalStables-approve(address,uint256)
digraph{
}
// Function: 717.sol-RoyalStables-balanceOf(address)
digraph{
}
// Function: 717.sol-RoyalStables-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_369(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_370(None) = SOLIDITY_CALL require(bool)(TMP_369)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-RoyalStables-changeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
master = newMaster

IRs:
master(address) := newMaster(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validAddress(newMaster)

IRs:
MODIFIER_CALL, RoyalStables.validAddress(address)(newMaster)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 717.sol-RoyalStables-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_323(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_324 = UnaryType.BANG TMP_323 
CONDITION TMP_324"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_325 = CONVERT _to to ERC721Receiver
TMP_326(bytes4) = HIGH_LEVEL_CALL, dest:TMP_325(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_326(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_327(bool) = retval == ERC721_RECEIVED
RETURN TMP_327"];
}
// Function: 717.sol-RoyalStables-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_306(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_307(bool) = TMP_306 == _owner
TMP_308(None) = SOLIDITY_CALL require(bool)(TMP_307)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_141(address) -> tokenApprovals[_tokenId]
TMP_309 = CONVERT 0 to address
TMP_310(bool) = REF_141 != TMP_309
CONDITION TMP_310"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_142(address) -> tokenApprovals[_tokenId]
TMP_311 = CONVERT 0 to address
REF_142(address) (->tokenApprovals) := TMP_311(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_312 = CONVERT 0 to address
Emit Approval(_owner,TMP_312,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 717.sol-RoyalStables-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Ownable()

IRs:
INTERNAL_CALL, Ownable.constructor()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ERC721Token(HORSEY,HRSY)

IRs:
INTERNAL_CALL, ERC721Token.constructor(string,string)(HORSEY,HRSY)"];
}
// Function: 717.sol-RoyalStables-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
}
// Function: 717.sol-RoyalStables-exists(uint256)
digraph{
}
// Function: 717.sol-RoyalStables-getApproved(uint256)
digraph{
}
// Function: 717.sol-RoyalStables-getOwnedTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[eth_address]

IRs:
REF_154(uint256[]) -> ownedTokens[eth_address]
RETURN REF_154"];
}
// Function: 717.sol-RoyalStables-isApprovedForAll(address,address)
digraph{
}
// Function: 717.sol-RoyalStables-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_289(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_289(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_290(bool) = _spender == owner
TMP_291(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_292(bool) = TMP_291 == _spender
TMP_293(bool) = TMP_290 || TMP_292
TMP_294(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_295(bool) = TMP_293 || TMP_294
RETURN TMP_295"];
}
// Function: 717.sol-RoyalStables-modifyHorsey(uint256,address,bytes32,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(exists(tokenId),token not found)

IRs:
TMP_349(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(tokenId)
TMP_350(None) = SOLIDITY_CALL require(bool,string)(TMP_349,token not found)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hrsy = horseys[tokenId]

IRs:
REF_157(RoyalStables.Horsey) -> horseys[tokenId]
hrsy(RoyalStables.Horsey) := REF_157(RoyalStables.Horsey)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hrsy.race = race

IRs:
REF_158(address) -> hrsy.race
REF_158(address) (->hrsy) := race(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
hrsy.dna = dna

IRs:
REF_159(bytes32) -> hrsy.dna
REF_159(bytes32) (->hrsy) := dna(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
hrsy.feedingCounter = feedingCounter

IRs:
REF_160(uint8) -> hrsy.feedingCounter
REF_160(uint8) (->hrsy) := feedingCounter(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hrsy.tier = tier

IRs:
REF_161(uint8) -> hrsy.tier
REF_161(uint8) (->hrsy) := tier(uint8)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
7->1;
}
// Function: 717.sol-RoyalStables-modifyHorseyDna(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(exists(tokenId),token not found)

IRs:
TMP_352(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(tokenId)
TMP_353(None) = SOLIDITY_CALL require(bool,string)(TMP_352,token not found)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
horseys[tokenId].dna = dna

IRs:
REF_162(RoyalStables.Horsey) -> horseys[tokenId]
REF_163(bytes32) -> REF_162.dna
REF_163(bytes32) (->horseys) := dna(bytes32)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
3->1;
}
// Function: 717.sol-RoyalStables-modifyHorseyFeedingCounter(uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(exists(tokenId),token not found)

IRs:
TMP_355(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(tokenId)
TMP_356(None) = SOLIDITY_CALL require(bool,string)(TMP_355,token not found)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
horseys[tokenId].feedingCounter = feedingCounter

IRs:
REF_164(RoyalStables.Horsey) -> horseys[tokenId]
REF_165(uint8) -> REF_164.feedingCounter
REF_165(uint8) (->horseys) := feedingCounter(uint8)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
3->1;
}
// Function: 717.sol-RoyalStables-modifyHorseyTier(uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(exists(tokenId),token not found)

IRs:
TMP_358(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(tokenId)
TMP_359(None) = SOLIDITY_CALL require(bool,string)(TMP_358,token not found)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
horseys[tokenId].tier = tier

IRs:
REF_166(RoyalStables.Horsey) -> horseys[tokenId]
REF_167(uint8) -> REF_166.tier
REF_167(uint8) (->horseys) := tier(uint8)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
3->1;
}
// Function: 717.sol-RoyalStables-name()
digraph{
}
// Function: 717.sol-RoyalStables-onlyMaster()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(master == msg.sender,Address must be non zero)

IRs:
TMP_376(bool) = master == msg.sender
TMP_377(None) = SOLIDITY_CALL require(bool,string)(TMP_376,Address must be non zero)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-RoyalStables-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_371(bool) = msg.sender == owner
TMP_372(None) = SOLIDITY_CALL require(bool)(TMP_371)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-RoyalStables-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_366(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_367(bool) = TMP_366 == msg.sender
TMP_368(None) = SOLIDITY_CALL require(bool)(TMP_367)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-RoyalStables-ownerOf(uint256)
digraph{
}
// Function: 717.sol-RoyalStables-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_318(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_319(bool) = TMP_318 == _from
TMP_320(None) = SOLIDITY_CALL require(bool)(TMP_319)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_148(uint256) -> ownedTokensCount[_from]
REF_149(uint256) -> ownedTokensCount[_from]
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_149', '1'] 
REF_148(uint256) (->ownedTokensCount) := TMP_321(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_151(address) -> tokenOwner[_tokenId]
TMP_322 = CONVERT 0 to address
REF_151(address) (->tokenOwner) := TMP_322(address)"];
}
// Function: 717.sol-RoyalStables-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_334 = CONVERT 0 to address
owner(address) := TMP_334(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 717.sol-RoyalStables-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-RoyalStables-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 717.sol-RoyalStables-setApprovalForAll(address,bool)
digraph{
}
// Function: 717.sol-RoyalStables-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 717.sol-RoyalStables-storeCarrotsCredit(address,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
carrot_credits[client] = amount

IRs:
REF_156(uint32) -> carrot_credits[client]
REF_156(uint32) (->carrot_credits) := amount(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
validAddress(client)

IRs:
MODIFIER_CALL, RoyalStables.validAddress(address)(client)"];
3->1;
}
// Function: 717.sol-RoyalStables-storeHorsey(address,uint256,address,bytes32,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_mint(client,tokenId)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(client,tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
modifyHorsey(tokenId,race,dna,feedingCounter,tier)

IRs:
INTERNAL_CALL, RoyalStables.modifyHorsey(uint256,address,bytes32,uint8,uint8)(tokenId,race,dna,feedingCounter,tier)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(client)

IRs:
MODIFIER_CALL, RoyalStables.validAddress(address)(client)"];
4->1;
}
// Function: 717.sol-RoyalStables-storeName(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(exists(tokenId),token not found)

IRs:
TMP_340(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(tokenId)
TMP_341(None) = SOLIDITY_CALL require(bool,string)(TMP_340,token not found)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
names[tokenId] = newName

IRs:
REF_155(string) -> names[tokenId]
REF_155(string) (->names) := newName(string)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
3->1;
}
// Function: 717.sol-RoyalStables-symbol()
digraph{
}
// Function: 717.sol-RoyalStables-tokenByIndex(uint256)
digraph{
}
// Function: 717.sol-RoyalStables-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 717.sol-RoyalStables-tokenURI(uint256)
digraph{
}
// Function: 717.sol-RoyalStables-totalSupply()
digraph{
}
// Function: 717.sol-RoyalStables-transferFrom(address,address,uint256)
digraph{
}
// Function: 717.sol-RoyalStables-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_328 = CONVERT 0 to address
TMP_329(bool) = newOwner != TMP_328
TMP_330(None) = SOLIDITY_CALL require(bool)(TMP_329)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 717.sol-RoyalStables-unstoreHorsey(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(exists(tokenId),token not found)

IRs:
TMP_361(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(tokenId)
TMP_362(None) = SOLIDITY_CALL require(bool,string)(TMP_361,token not found)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_burn(ownerOf(tokenId),tokenId)

IRs:
TMP_363(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(tokenId)
INTERNAL_CALL, ERC721Token._burn(address,uint256)(TMP_363,tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete horseys[tokenId]

IRs:
REF_168(RoyalStables.Horsey) -> horseys[tokenId]
horseys = delete REF_168 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete names[tokenId]

IRs:
REF_169(string) -> names[tokenId]
names = delete REF_169 "];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, RoyalStables.onlyMaster()()"];
5->1;
}
// Function: 717.sol-RoyalStables-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(addr != address(0),Address must be non zero)

IRs:
TMP_373 = CONVERT 0 to address
TMP_374(bool) = addr != TMP_373
TMP_375(None) = SOLIDITY_CALL require(bool,string)(TMP_374,Address must be non zero)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 717.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_20(uint256) = a + b
c(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_21(bool) = c >= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 717.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_16(uint256) = a / b
RETURN TMP_16"];
}
// Function: 717.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_11(bool) = a == 0
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_12(uint256) = a * b
c(uint256) := TMP_12(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_13(uint256) = c / a
TMP_14(bool) = TMP_13 == b
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 717.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_17(bool) = b <= a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_19(uint256) = a - b
RETURN TMP_19"];
}
}
