digraph G {
// Function: 719.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 719.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 719.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 719.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 719.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 719.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 719.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 719.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 719.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_15(bool) = msg.sender == owner
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 719.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SatoExchange-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 719.sol-SatoExchange-SatoExchange()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = SATX

IRs:
symbol(string) := SATX(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = SatoExchange

IRs:
name(string) := SatoExchange(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 30000000000000000

IRs:
_totalSupply(uint256) := 30000000000000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = _totalSupply

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),msg.sender,_totalSupply)

IRs:
TMP_32 = CONVERT 0 to address
Emit Transfer(TMP_32,msg.sender,_totalSupply)"];
}
// Function: 719.sol-SatoExchange-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_44(mapping(address => uint256)) -> allowed[tokenOwner]
REF_45(uint256) -> REF_44[spender]
RETURN REF_45"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 719.sol-SatoExchange-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokens > 0)

IRs:
TMP_56(bool) = tokens > 0
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[spender]
REF_11(uint256) (->allowed) := tokens(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 719.sol-SatoExchange-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokens > 0)

IRs:
TMP_95(bool) = tokens > 0
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_46(mapping(address => uint256)) -> allowed[msg.sender]
REF_47(uint256) -> REF_46[spender]
REF_47(uint256) (->allowed) := tokens(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_98 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_98(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 719.sol-SatoExchange-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_2(uint256) -> balances[tokenOwner]
RETURN REF_2"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 719.sol-SatoExchange-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_12(uint256) -> balances[msg.sender]
TMP_59(bool) = REF_12 < _value
CONDITION TMP_59"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_60(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_61(bool) = _value <= 0
CONDITION TMP_61"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_62(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = SafeMath.safeSub(balances[msg.sender],_value)

IRs:
REF_13(uint256) -> balances[msg.sender]
REF_15(uint256) -> balances[msg.sender]
TMP_63(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_15,_value)
REF_13(uint256) (->balances) := TMP_63(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_totalSupply = SafeMath.safeSub(_totalSupply,_value)

IRs:
TMP_64(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_totalSupply,_value)
_totalSupply(uint256) := TMP_64(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 719.sol-SatoExchange-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_100(None) = SOLIDITY_CALL revert()()"];
}
// Function: 719.sol-SatoExchange-freeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_17(uint256) -> balances[msg.sender]
TMP_66(bool) = REF_17 < _value
CONDITION TMP_66"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_67(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_68(bool) = _value <= 0
CONDITION TMP_68"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_69(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = SafeMath.safeSub(balances[msg.sender],_value)

IRs:
REF_18(uint256) -> balances[msg.sender]
REF_20(uint256) -> balances[msg.sender]
TMP_70(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_20,_value)
REF_18(uint256) (->balances) := TMP_70(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender],_value)

IRs:
REF_21(uint256) -> freezeOf[msg.sender]
REF_23(uint256) -> freezeOf[msg.sender]
TMP_71(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_23,_value)
REF_21(uint256) (->freezeOf) := TMP_71(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freeze(msg.sender,_value)

IRs:
Emit Freeze(msg.sender,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 719.sol-SatoExchange-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_104(bool) = msg.sender == owner
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 719.sol-SatoExchange-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_18(bool) = c >= a
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SatoExchange-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_29(bool) = b > 0
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_31(uint256) = a / b
c(uint256) := TMP_31(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SatoExchange-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_23(uint256) = a * b
c(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_24(bool) = a == 0
TMP_25(uint256) = c / a
TMP_26(bool) = TMP_25 == b
TMP_27(bool) = TMP_24 || TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SatoExchange-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_20(bool) = b <= a
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_22(uint256) = a - b
c(uint256) := TMP_22(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 719.sol-SatoExchange-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply - balances[address(0)]

IRs:
TMP_34 = CONVERT 0 to address
REF_1(uint256) -> balances[TMP_34]
TMP_35(uint256) = _totalSupply - REF_1
RETURN TMP_35"];
}
// Function: 719.sol-SatoExchange-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
to == 0x0

IRs:
TMP_36(bool) = to == 0
CONDITION TMP_36"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_37(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tokens <= 0

IRs:
TMP_38(bool) = tokens <= 0
CONDITION TMP_38"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_39(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(msg.sender != address(0) && msg.sender != to)

IRs:
TMP_40 = CONVERT 0 to address
TMP_41(bool) = msg.sender != TMP_40
TMP_42(bool) = msg.sender != to
TMP_43(bool) = TMP_41 && TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = to != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
balances[msg.sender] < tokens

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_48(bool) = REF_3 < tokens
CONDITION TMP_48"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert()()

IRs:
TMP_49(None) = SOLIDITY_CALL revert()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
balances[to] + tokens < balances[to]

IRs:
REF_4(uint256) -> balances[to]
TMP_50(uint256) = REF_4 + tokens
REF_5(uint256) -> balances[to]
TMP_51(bool) = TMP_50 < REF_5
CONDITION TMP_51"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert()()

IRs:
TMP_52(None) = SOLIDITY_CALL revert()()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],tokens)

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_7(uint256) -> balances[msg.sender]
TMP_53(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_7,tokens)
REF_6(uint256) (->balances) := TMP_53(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_8(uint256) -> balances[to]
REF_9(uint256) -> balances[to]
TMP_54(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_9,tokens)
REF_8(uint256) (->balances) := TMP_54(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
true

IRs:
RETURN True"];
19[label="Node Type: RETURN 19

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 719.sol-SatoExchange-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_101 = CONVERT tokenAddress to ERC20Interface
TMP_102(bool) = HIGH_LEVEL_CALL, dest:TMP_101(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_102"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 719.sol-SatoExchange-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
to == 0x0

IRs:
TMP_80(bool) = to == 0
CONDITION TMP_80"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_81(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tokens <= 0

IRs:
TMP_82(bool) = tokens <= 0
CONDITION TMP_82"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_83(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balances[from] < tokens

IRs:
REF_31(uint256) -> balances[from]
TMP_84(bool) = REF_31 < tokens
CONDITION TMP_84"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_85(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
balances[to] + tokens < balances[to]

IRs:
REF_32(uint256) -> balances[to]
TMP_86(uint256) = REF_32 + tokens
REF_33(uint256) -> balances[to]
TMP_87(bool) = TMP_86 < REF_33
CONDITION TMP_87"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_88(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
tokens > allowed[from][msg.sender]

IRs:
REF_34(mapping(address => uint256)) -> allowed[from]
REF_35(uint256) -> REF_34[msg.sender]
TMP_89(bool) = tokens > REF_35
CONDITION TMP_89"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
revert()()

IRs:
TMP_90(None) = SOLIDITY_CALL revert()()"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[from] = safeSub(balances[from],tokens)

IRs:
REF_36(uint256) -> balances[from]
REF_37(uint256) -> balances[from]
TMP_91(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_37,tokens)
REF_36(uint256) (->balances) := TMP_91(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
allowed[from][msg.sender] = safeSub(allowed[from][msg.sender],tokens)

IRs:
REF_38(mapping(address => uint256)) -> allowed[from]
REF_39(uint256) -> REF_38[msg.sender]
REF_40(mapping(address => uint256)) -> allowed[from]
REF_41(uint256) -> REF_40[msg.sender]
TMP_92(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_41,tokens)
REF_39(uint256) (->allowed) := TMP_92(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_42(uint256) -> balances[to]
REF_43(uint256) -> balances[to]
TMP_93(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_43,tokens)
REF_42(uint256) (->balances) := TMP_93(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
true

IRs:
RETURN True"];
21[label="Node Type: RETURN 21

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 719.sol-SatoExchange-unfreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
freezeOf[msg.sender] < _value

IRs:
REF_24(uint256) -> freezeOf[msg.sender]
TMP_73(bool) = REF_24 < _value
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_74(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value <= 0

IRs:
TMP_75(bool) = _value <= 0
CONDITION TMP_75"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_76(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender],_value)

IRs:
REF_25(uint256) -> freezeOf[msg.sender]
REF_27(uint256) -> freezeOf[msg.sender]
TMP_77(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_27,_value)
REF_25(uint256) (->freezeOf) := TMP_77(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = SafeMath.safeAdd(balances[msg.sender],_value)

IRs:
REF_28(uint256) -> balances[msg.sender]
REF_30(uint256) -> balances[msg.sender]
TMP_78(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_30,_value)
REF_28(uint256) (->balances) := TMP_78(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Unfreeze(msg.sender,_value)

IRs:
Emit Unfreeze(msg.sender,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
}
