digraph G {
// Function: 731.sol-BankFunctions-ChangeInterest(uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value = _value

IRs:
REF_173(Base.Bank) -> banks[msg.sender]
REF_174(mapping(uint256 => Base.strCateg)) -> REF_173.Category
REF_175(Base.strCateg) -> REF_174[_category]
REF_176(mapping(uint256 => Base.strAmount)) -> REF_175.Amount
REF_177(Base.strAmount) -> REF_176[_amount]
REF_178(mapping(uint256 => Base.strInsta)) -> REF_177.Installment
REF_179(Base.strInsta) -> REF_178[_installment]
REF_180(uint256) -> REF_179.value
REF_180(uint256) (->banks) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable = _enable

IRs:
REF_181(Base.Bank) -> banks[msg.sender]
REF_182(mapping(uint256 => Base.strCateg)) -> REF_181.Category
REF_183(Base.strCateg) -> REF_182[_category]
REF_184(mapping(uint256 => Base.strAmount)) -> REF_183.Amount
REF_185(Base.strAmount) -> REF_184[_amount]
REF_186(mapping(uint256 => Base.strInsta)) -> REF_185.Installment
REF_187(Base.strInsta) -> REF_186[_installment]
REF_188(bool) -> REF_187.enable
REF_188(bool) (->banks) := _enable(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-BankFunctions-GetBankBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Tokens

IRs:
REF_189(Base.Bank) -> banks[msg.sender]
REF_190(uint256) -> REF_189.Tokens
RETURN REF_190"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-BankFunctions-GetClientCategory(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[_client].Category

IRs:
REF_152(Base.Client) -> clients[_client]
REF_153(uint256) -> REF_152.Category
RETURN REF_153"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-BankFunctions-askForALoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Owner == _bankAddress,not a valid bank)

IRs:
REF_77(Base.Bank) -> banks[_bankAddress]
REF_78(address) -> REF_77.Owner
TMP_38(bool) = REF_78 == _bankAddress
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,not a valid bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable,you not apply for that loan)

IRs:
REF_79(Base.Bank) -> banks[_bankAddress]
REF_80(mapping(uint256 => Base.strCateg)) -> REF_79.Category
REF_81(Base.Client) -> clients[msg.sender]
REF_82(uint256) -> REF_81.Category
REF_83(Base.strCateg) -> REF_80[REF_82]
REF_84(mapping(uint256 => Base.strAmount)) -> REF_83.Amount
REF_85(Base.strAmount) -> REF_84[_amount]
REF_86(mapping(uint256 => Base.strInsta)) -> REF_85.Installment
REF_87(Base.strInsta) -> REF_86[_installment]
REF_88(bool) -> REF_87.enable
TMP_40(None) = SOLIDITY_CALL require(bool,string)(REF_88,you not apply for that loan)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan.Debt = _amount

IRs:
REF_89(uint256) -> _loan.Debt
REF_89(uint256) (->_loan) := _amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan.Debt = _loan.Debt.add(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value)

IRs:
REF_90(uint256) -> _loan.Debt
REF_91(uint256) -> _loan.Debt
REF_93(Base.Bank) -> banks[_bankAddress]
REF_94(mapping(uint256 => Base.strCateg)) -> REF_93.Category
REF_95(Base.Client) -> clients[msg.sender]
REF_96(uint256) -> REF_95.Category
REF_97(Base.strCateg) -> REF_94[REF_96]
REF_98(mapping(uint256 => Base.strAmount)) -> REF_97.Amount
REF_99(Base.strAmount) -> REF_98[_amount]
REF_100(mapping(uint256 => Base.strInsta)) -> REF_99.Installment
REF_101(Base.strInsta) -> REF_100[_installment]
REF_102(uint256) -> REF_101.value
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_91', 'REF_102'] 
REF_90(uint256) (->_loan) := TMP_41(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_loan.Client = msg.sender

IRs:
REF_103(address) -> _loan.Client
REF_103(address) (->_loan) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_loan.Owner = _bankAddress

IRs:
REF_104(address) -> _loan.Owner
REF_104(address) (->_loan) := _bankAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loan.Installment = _installment

IRs:
REF_105(uint256) -> _loan.Installment
REF_105(uint256) (->_loan) := _installment(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_loan.Category = clients[msg.sender].Category

IRs:
REF_106(uint256) -> _loan.Category
REF_107(Base.Client) -> clients[msg.sender]
REF_108(uint256) -> REF_107.Category
REF_106(uint256) (->_loan) := REF_108(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_loan.Amount = _amount

IRs:
REF_109(uint256) -> _loan.Amount
REF_109(uint256) (->_loan) := _amount(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[_bankAddress].LoanPending.push(_loan)

IRs:
REF_110(Base.Bank) -> banks[_bankAddress]
REF_111(Base.Loan[]) -> REF_110.LoanPending
REF_113 -> LENGTH REF_111
TMP_43(uint256) := REF_113(uint256)
TMP_44(uint256) = TMP_43 + 1
REF_113(uint256) (->banks) := TMP_44(uint256)
REF_114(Base.Loan) -> REF_111[TMP_43]
REF_114(Base.Loan) (->banks) := _loan(Base.Loan)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
12->1;
}
// Function: 731.sol-BankFunctions-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(false,Should not go through this point)

IRs:
TMP_55(None) = SOLIDITY_CALL require(bool,string)(False,Should not go through this point)"];
}
// Function: 731.sol-BankFunctions-findOutInterestByBank(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value

IRs:
REF_191(Base.Bank) -> banks[msg.sender]
REF_192(mapping(uint256 => Base.strCateg)) -> REF_191.Category
REF_193(Base.strCateg) -> REF_192[_category]
REF_194(mapping(uint256 => Base.strAmount)) -> REF_193.Amount
REF_195(Base.strAmount) -> REF_194[_amount]
REF_196(mapping(uint256 => Base.strInsta)) -> REF_195.Installment
REF_197(Base.strInsta) -> REF_196[_installment]
REF_198(uint256) -> REF_197.value
_value(uint256) := REF_198(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable

IRs:
REF_199(Base.Bank) -> banks[msg.sender]
REF_200(mapping(uint256 => Base.strCateg)) -> REF_199.Category
REF_201(Base.strCateg) -> REF_200[_category]
REF_202(mapping(uint256 => Base.strAmount)) -> REF_201.Amount
REF_203(Base.strAmount) -> REF_202[_amount]
REF_204(mapping(uint256 => Base.strInsta)) -> REF_203.Installment
REF_205(Base.strInsta) -> REF_204[_installment]
REF_206(bool) -> REF_205.enable
_enable(bool) := REF_206(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-BankFunctions-findOutInterestByClientCategory(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value

IRs:
REF_115(Base.Bank) -> banks[_bankAddress]
REF_116(mapping(uint256 => Base.strCateg)) -> REF_115.Category
REF_117(Base.Client) -> clients[msg.sender]
REF_118(uint256) -> REF_117.Category
REF_119(Base.strCateg) -> REF_116[REF_118]
REF_120(mapping(uint256 => Base.strAmount)) -> REF_119.Amount
REF_121(Base.strAmount) -> REF_120[_amount]
REF_122(mapping(uint256 => Base.strInsta)) -> REF_121.Installment
REF_123(Base.strInsta) -> REF_122[_installment]
REF_124(uint256) -> REF_123.value
_value(uint256) := REF_124(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable

IRs:
REF_125(Base.Bank) -> banks[_bankAddress]
REF_126(mapping(uint256 => Base.strCateg)) -> REF_125.Category
REF_127(Base.Client) -> clients[msg.sender]
REF_128(uint256) -> REF_127.Category
REF_129(Base.strCateg) -> REF_126[REF_128]
REF_130(mapping(uint256 => Base.strAmount)) -> REF_129.Amount
REF_131(Base.strAmount) -> REF_130[_amount]
REF_132(mapping(uint256 => Base.strInsta)) -> REF_131.Installment
REF_133(Base.strInsta) -> REF_132[_installment]
REF_134(bool) -> REF_133.enable
_enable(bool) := REF_134(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-BankFunctions-getClientBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = clients[msg.sender].Tokens

IRs:
REF_142(Base.Client) -> clients[msg.sender]
REF_143(uint256) -> REF_142.Tokens
_value(uint256) := REF_143(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_value

IRs:
RETURN _value"];
}
// Function: 731.sol-BankFunctions-getClientCategory()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].Category

IRs:
REF_150(Base.Client) -> clients[msg.sender]
REF_151(uint256) -> REF_150.Category
RETURN REF_151"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-BankFunctions-getLoanIDbyClient(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID[_indexLoan]

IRs:
REF_147(Base.Client) -> clients[msg.sender]
REF_148(uint256[]) -> REF_147.LoansID
REF_149(uint256) -> REF_148[_indexLoan]
RETURN REF_149"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-BankFunctions-getLoansLengthByClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID.length

IRs:
REF_144(Base.Client) -> clients[msg.sender]
REF_145(uint256[]) -> REF_144.LoansID
REF_146 -> LENGTH REF_145
RETURN REF_146"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-BankFunctions-isBank()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_209(Base.Bank) -> banks[msg.sender]
REF_210(address) -> REF_209.Owner
TMP_75(bool) = REF_210 == msg.sender
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,you are not a bank)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-BankFunctions-isClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Owner == msg.sender,not a client)

IRs:
REF_207(Base.Client) -> clients[msg.sender]
REF_208(address) -> REF_207.Owner
TMP_73(bool) = REF_208 == msg.sender
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,not a client)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-BankFunctions-isLoanOwner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_211(Base.Bank) -> banks[msg.sender]
REF_212(address) -> REF_211.Owner
TMP_77(bool) = REF_212 == msg.sender
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,you are not a bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(loans[_id].Owner == msg.sender,not owner of loan)

IRs:
REF_213(Base.Loan) -> loans[_id]
REF_214(address) -> REF_213.Owner
TMP_79(bool) = REF_214 == msg.sender
TMP_80(None) = SOLIDITY_CALL require(bool,string)(TMP_79,not owner of loan)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 731.sol-BankFunctions-payOffClientDebt(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(loans[_loanId].Debt > 0)

IRs:
REF_161(Base.Loan) -> loans[_loanId]
REF_162(uint256) -> REF_161.Debt
TMP_61(bool) = REF_162 > 0
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_63(bool) = _value > 0
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(loans[_loanId].Debt >= _value)

IRs:
REF_163(Base.Loan) -> loans[_loanId]
REF_164(uint256) -> REF_163.Debt
TMP_65(bool) = REF_164 >= _value
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans[loans.length - 1].EndTime = now

IRs:
REF_165 -> LENGTH loans
TMP_67(uint256) = REF_165 - 1
REF_166(Base.Loan) -> loans[TMP_67]
REF_167(uint256) -> REF_166.EndTime
REF_167(uint256) (->loans) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[_loanId].Debt = loans[_loanId].Debt.sub(_value)

IRs:
REF_168(Base.Loan) -> loans[_loanId]
REF_169(uint256) -> REF_168.Debt
REF_170(Base.Loan) -> loans[_loanId]
REF_171(uint256) -> REF_170.Debt
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_171', '_value'] 
REF_169(uint256) (->loans) := TMP_68(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
6->1;
}
// Function: 731.sol-BankFunctions-removeBankToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_154(Base.Bank) -> banks[msg.sender]
REF_155(uint256) -> REF_154.Tokens
TMP_57(bool) = REF_155 >= _value
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_156(Base.Bank) -> banks[msg.sender]
REF_157(uint256) -> REF_156.Tokens
REF_158(Base.Bank) -> banks[msg.sender]
REF_159(uint256) -> REF_158.Tokens
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_159', '_value'] 
REF_157(uint256) (->banks) := TMP_59(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-BankFunctions-removeClientToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_135(Base.Client) -> clients[msg.sender]
REF_136(uint256) -> REF_135.Tokens
TMP_47(bool) = REF_136 >= _value
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[msg.sender].Tokens = clients[msg.sender].Tokens.sub(_value)

IRs:
REF_137(Base.Client) -> clients[msg.sender]
REF_138(uint256) -> REF_137.Tokens
REF_139(Base.Client) -> clients[msg.sender]
REF_140(uint256) -> REF_139.Tokens
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_140', '_value'] 
REF_138(uint256) (->clients) := TMP_49(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
}
// Function: 731.sol-Base-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(false,Should not go through this point)

IRs:
TMP_17(None) = SOLIDITY_CALL require(bool,string)(False,Should not go through this point)"];
}
// Function: 731.sol-ClientFunctions-askForALoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Owner == _bankAddress,not a valid bank)

IRs:
REF_0(Base.Bank) -> banks[_bankAddress]
REF_1(address) -> REF_0.Owner
TMP_19(bool) = REF_1 == _bankAddress
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,not a valid bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable,you not apply for that loan)

IRs:
REF_2(Base.Bank) -> banks[_bankAddress]
REF_3(mapping(uint256 => Base.strCateg)) -> REF_2.Category
REF_4(Base.Client) -> clients[msg.sender]
REF_5(uint256) -> REF_4.Category
REF_6(Base.strCateg) -> REF_3[REF_5]
REF_7(mapping(uint256 => Base.strAmount)) -> REF_6.Amount
REF_8(Base.strAmount) -> REF_7[_amount]
REF_9(mapping(uint256 => Base.strInsta)) -> REF_8.Installment
REF_10(Base.strInsta) -> REF_9[_installment]
REF_11(bool) -> REF_10.enable
TMP_21(None) = SOLIDITY_CALL require(bool,string)(REF_11,you not apply for that loan)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan.Debt = _amount

IRs:
REF_12(uint256) -> _loan.Debt
REF_12(uint256) (->_loan) := _amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan.Debt = _loan.Debt.add(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value)

IRs:
REF_13(uint256) -> _loan.Debt
REF_14(uint256) -> _loan.Debt
REF_16(Base.Bank) -> banks[_bankAddress]
REF_17(mapping(uint256 => Base.strCateg)) -> REF_16.Category
REF_18(Base.Client) -> clients[msg.sender]
REF_19(uint256) -> REF_18.Category
REF_20(Base.strCateg) -> REF_17[REF_19]
REF_21(mapping(uint256 => Base.strAmount)) -> REF_20.Amount
REF_22(Base.strAmount) -> REF_21[_amount]
REF_23(mapping(uint256 => Base.strInsta)) -> REF_22.Installment
REF_24(Base.strInsta) -> REF_23[_installment]
REF_25(uint256) -> REF_24.value
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', 'REF_25'] 
REF_13(uint256) (->_loan) := TMP_22(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_loan.Client = msg.sender

IRs:
REF_26(address) -> _loan.Client
REF_26(address) (->_loan) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_loan.Owner = _bankAddress

IRs:
REF_27(address) -> _loan.Owner
REF_27(address) (->_loan) := _bankAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loan.Installment = _installment

IRs:
REF_28(uint256) -> _loan.Installment
REF_28(uint256) (->_loan) := _installment(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_loan.Category = clients[msg.sender].Category

IRs:
REF_29(uint256) -> _loan.Category
REF_30(Base.Client) -> clients[msg.sender]
REF_31(uint256) -> REF_30.Category
REF_29(uint256) (->_loan) := REF_31(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_loan.Amount = _amount

IRs:
REF_32(uint256) -> _loan.Amount
REF_32(uint256) (->_loan) := _amount(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[_bankAddress].LoanPending.push(_loan)

IRs:
REF_33(Base.Bank) -> banks[_bankAddress]
REF_34(Base.Loan[]) -> REF_33.LoanPending
REF_36 -> LENGTH REF_34
TMP_24(uint256) := REF_36(uint256)
TMP_25(uint256) = TMP_24 + 1
REF_36(uint256) (->banks) := TMP_25(uint256)
REF_37(Base.Loan) -> REF_34[TMP_24]
REF_37(Base.Loan) (->banks) := _loan(Base.Loan)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
12->1;
}
// Function: 731.sol-ClientFunctions-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(false,Should not go through this point)

IRs:
TMP_18(None) = SOLIDITY_CALL require(bool,string)(False,Should not go through this point)"];
}
// Function: 731.sol-ClientFunctions-findOutInterestByClientCategory(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value

IRs:
REF_38(Base.Bank) -> banks[_bankAddress]
REF_39(mapping(uint256 => Base.strCateg)) -> REF_38.Category
REF_40(Base.Client) -> clients[msg.sender]
REF_41(uint256) -> REF_40.Category
REF_42(Base.strCateg) -> REF_39[REF_41]
REF_43(mapping(uint256 => Base.strAmount)) -> REF_42.Amount
REF_44(Base.strAmount) -> REF_43[_amount]
REF_45(mapping(uint256 => Base.strInsta)) -> REF_44.Installment
REF_46(Base.strInsta) -> REF_45[_installment]
REF_47(uint256) -> REF_46.value
_value(uint256) := REF_47(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable

IRs:
REF_48(Base.Bank) -> banks[_bankAddress]
REF_49(mapping(uint256 => Base.strCateg)) -> REF_48.Category
REF_50(Base.Client) -> clients[msg.sender]
REF_51(uint256) -> REF_50.Category
REF_52(Base.strCateg) -> REF_49[REF_51]
REF_53(mapping(uint256 => Base.strAmount)) -> REF_52.Amount
REF_54(Base.strAmount) -> REF_53[_amount]
REF_55(mapping(uint256 => Base.strInsta)) -> REF_54.Installment
REF_56(Base.strInsta) -> REF_55[_installment]
REF_57(bool) -> REF_56.enable
_enable(bool) := REF_57(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-ClientFunctions-getClientBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = clients[msg.sender].Tokens

IRs:
REF_65(Base.Client) -> clients[msg.sender]
REF_66(uint256) -> REF_65.Tokens
_value(uint256) := REF_66(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_value

IRs:
RETURN _value"];
}
// Function: 731.sol-ClientFunctions-getClientCategory()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].Category

IRs:
REF_73(Base.Client) -> clients[msg.sender]
REF_74(uint256) -> REF_73.Category
RETURN REF_74"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-ClientFunctions-getLoanIDbyClient(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID[_indexLoan]

IRs:
REF_70(Base.Client) -> clients[msg.sender]
REF_71(uint256[]) -> REF_70.LoansID
REF_72(uint256) -> REF_71[_indexLoan]
RETURN REF_72"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-ClientFunctions-getLoansLengthByClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID.length

IRs:
REF_67(Base.Client) -> clients[msg.sender]
REF_68(uint256[]) -> REF_67.LoansID
REF_69 -> LENGTH REF_68
RETURN REF_69"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-ClientFunctions-isClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Owner == msg.sender,not a client)

IRs:
REF_75(Base.Client) -> clients[msg.sender]
REF_76(address) -> REF_75.Owner
TMP_36(bool) = REF_76 == msg.sender
TMP_37(None) = SOLIDITY_CALL require(bool,string)(TMP_36,not a client)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-ClientFunctions-removeClientToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_58(Base.Client) -> clients[msg.sender]
REF_59(uint256) -> REF_58.Tokens
TMP_28(bool) = REF_59 >= _value
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[msg.sender].Tokens = clients[msg.sender].Tokens.sub(_value)

IRs:
REF_60(Base.Client) -> clients[msg.sender]
REF_61(uint256) -> REF_60.Tokens
REF_62(Base.Client) -> clients[msg.sender]
REF_63(uint256) -> REF_62.Tokens
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_63', '_value'] 
REF_61(uint256) (->clients) := TMP_30(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
}
// Function: 731.sol-Deploy-BuyLoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].ForSale > 0,not for sale)

IRs:
REF_1735(Base.Loan) -> loans[_loanId]
REF_1736(uint256) -> REF_1735.ForSale
TMP_597(bool) = REF_1736 > 0
TMP_598(None) = SOLIDITY_CALL require(bool,string)(TMP_597,not for sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,you dont have money)

IRs:
REF_1737(Base.Bank) -> banks[msg.sender]
REF_1738(uint256) -> REF_1737.Tokens
TMP_599(bool) = REF_1738 >= _value
TMP_600(None) = SOLIDITY_CALL require(bool,string)(TMP_599,you dont have money)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SwitchLoanOwner(_owner,_loanId)

IRs:
INTERNAL_CALL, LoansFunctions.SwitchLoanOwner(address,uint256)(_owner,_loanId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_1739(Base.Bank) -> banks[msg.sender]
REF_1740(uint256) -> REF_1739.Tokens
REF_1741(Base.Bank) -> banks[msg.sender]
REF_1742(uint256) -> REF_1741.Tokens
TMP_602(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1742', '_value'] 
REF_1740(uint256) (->banks) := TMP_602(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[_owner].Tokens = banks[_owner].Tokens.add(_value)

IRs:
REF_1744(Base.Bank) -> banks[_owner]
REF_1745(uint256) -> REF_1744.Tokens
REF_1746(Base.Bank) -> banks[_owner]
REF_1747(uint256) -> REF_1746.Tokens
TMP_603(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1747', '_value'] 
REF_1745(uint256) (->banks) := TMP_603(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
6->1;
}
// Function: 731.sol-Deploy-ChangeInterest(uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value = _value

IRs:
REF_1911(Base.Bank) -> banks[msg.sender]
REF_1912(mapping(uint256 => Base.strCateg)) -> REF_1911.Category
REF_1913(Base.strCateg) -> REF_1912[_category]
REF_1914(mapping(uint256 => Base.strAmount)) -> REF_1913.Amount
REF_1915(Base.strAmount) -> REF_1914[_amount]
REF_1916(mapping(uint256 => Base.strInsta)) -> REF_1915.Installment
REF_1917(Base.strInsta) -> REF_1916[_installment]
REF_1918(uint256) -> REF_1917.value
REF_1918(uint256) (->banks) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable = _enable

IRs:
REF_1919(Base.Bank) -> banks[msg.sender]
REF_1920(mapping(uint256 => Base.strCateg)) -> REF_1919.Category
REF_1921(Base.strCateg) -> REF_1920[_category]
REF_1922(mapping(uint256 => Base.strAmount)) -> REF_1921.Amount
REF_1923(Base.strAmount) -> REF_1922[_amount]
REF_1924(mapping(uint256 => Base.strInsta)) -> REF_1923.Installment
REF_1925(Base.strInsta) -> REF_1924[_installment]
REF_1926(bool) -> REF_1925.enable
REF_1926(bool) (->banks) := _enable(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-Deploy-GetBankBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Tokens

IRs:
REF_1927(Base.Bank) -> banks[msg.sender]
REF_1928(uint256) -> REF_1927.Tokens
RETURN REF_1928"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-Deploy-GetClientCategory(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[_client].Category

IRs:
REF_1890(Base.Client) -> clients[_client]
REF_1891(uint256) -> REF_1890.Category
RETURN REF_1891"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-Deploy-GetLoanIdFromPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_indexLoan]

IRs:
REF_1728(Base.Bank) -> banks[msg.sender]
REF_1729(Base.Portfolio[]) -> REF_1728.Portfolios
REF_1730(Base.Portfolio) -> REF_1729[_indexPortfolio]
REF_1731(uint256[]) -> REF_1730.idLoans
REF_1732(uint256) -> REF_1731[_indexLoan]
RETURN REF_1732"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_ID

IRs:
RETURN _ID"];
}
// Function: 731.sol-Deploy-GetLoanInfo(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_indexLoan < banks[msg.sender].LoanPending.length,null value)

IRs:
REF_1874(Base.Bank) -> banks[msg.sender]
REF_1875(Base.Loan[]) -> REF_1874.LoanPending
REF_1876 -> LENGTH REF_1875
TMP_644(bool) = _indexLoan < REF_1876
TMP_645(None) = SOLIDITY_CALL require(bool,string)(TMP_644,null value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan = banks[msg.sender].LoanPending[_indexLoan]

IRs:
REF_1877(Base.Bank) -> banks[msg.sender]
REF_1878(Base.Loan[]) -> REF_1877.LoanPending
REF_1879(Base.Loan) -> REF_1878[_indexLoan]
_loan(Base.Loan) := REF_1879(Base.Loan)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan = loans[_indexLoan]

IRs:
REF_1880(Base.Loan) -> loans[_indexLoan]
_loan(Base.Loan) := REF_1880(Base.Loan)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_debt = _loan.Debt

IRs:
REF_1881(uint256) -> _loan.Debt
_debt(uint256) := REF_1881(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_client = _loan.Client

IRs:
REF_1882(address) -> _loan.Client
_client(address) := REF_1882(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_installment = _loan.Installment

IRs:
REF_1883(uint256) -> _loan.Installment
_installment(uint256) := REF_1883(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_category = _loan.Category

IRs:
REF_1884(uint256) -> _loan.Category
_category(uint256) := REF_1884(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_amount = _loan.Amount

IRs:
REF_1885(uint256) -> _loan.Amount
_amount(uint256) := REF_1885(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_owner = _loan.Owner

IRs:
REF_1886(address) -> _loan.Owner
_owner(address) := REF_1886(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_forSale = _loan.ForSale

IRs:
REF_1887(uint256) -> _loan.ForSale
_forSale(uint256) := REF_1887(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_StartTime = _loan.StartTime

IRs:
REF_1888(uint256) -> _loan.StartTime
_StartTime(uint256) := REF_1888(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_EndTime = _loan.EndTime

IRs:
REF_1889(uint256) -> _loan.EndTime
_EndTime(uint256) := REF_1889(uint256)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime)

IRs:
RETURN _debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime"];
}
// Function: 731.sol-Deploy-GetLoansLenght(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
banks[msg.sender].LoanPending.length

IRs:
REF_1868(Base.Bank) -> banks[msg.sender]
REF_1869(Base.Loan[]) -> REF_1868.LoanPending
REF_1870 -> LENGTH REF_1869
RETURN REF_1870"];
3[label="Node Type: RETURN 3

EXPRESSION:
banks[msg.sender].LoansID.length

IRs:
REF_1871(Base.Bank) -> banks[msg.sender]
REF_1872(uint256[]) -> REF_1871.LoansID
REF_1873 -> LENGTH REF_1872
RETURN REF_1873"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
5->1;
}
// Function: 731.sol-Deploy-IsOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(owner == msg.sender,not the owner)

IRs:
TMP_690(bool) = owner == msg.sender
TMP_691(None) = SOLIDITY_CALL require(bool,string)(TMP_690,not the owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-Deploy-SellLoan(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
loans[_loanId].ForSale = _value

IRs:
REF_1733(Base.Loan) -> loans[_loanId]
REF_1734(uint256) -> REF_1733.ForSale
REF_1734(uint256) (->loans) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
2->1;
}
// Function: 731.sol-Deploy-SwitchLoanOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].Debt > 0,at least one of the loans is already paid)

IRs:
REF_1749(Base.Loan) -> loans[_loanId]
REF_1750(uint256) -> REF_1749.Debt
TMP_605(bool) = REF_1750 > 0
TMP_606(None) = SOLIDITY_CALL require(bool,string)(TMP_605,at least one of the loans is already paid)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(loans[_loanId].Owner == _owner)

IRs:
REF_1751(Base.Loan) -> loans[_loanId]
REF_1752(address) -> REF_1751.Owner
TMP_607(bool) = REF_1752 == _owner
TMP_608(None) = SOLIDITY_CALL require(bool)(TMP_607)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: NEW VARIABLE 6
"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < banks[_owner].LoansID.length

IRs:
REF_1753(Base.Bank) -> banks[_owner]
REF_1754(uint256[]) -> REF_1753.LoansID
REF_1755 -> LENGTH REF_1754
TMP_609(bool) = i < REF_1755
CONDITION TMP_609"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
banks[_owner].LoansID[i] == _loanId

IRs:
REF_1756(Base.Bank) -> banks[_owner]
REF_1757(uint256[]) -> REF_1756.LoansID
REF_1758(uint256) -> REF_1757[i]
TMP_610(bool) = REF_1758 == _loanId
CONDITION TMP_610"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_indexLoan = i

IRs:
_indexLoan(uint256) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i = banks[_owner].LoansID.length.add(1)

IRs:
REF_1759(Base.Bank) -> banks[_owner]
REF_1760(uint256[]) -> REF_1759.LoansID
REF_1761 -> LENGTH REF_1760
TMP_611(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1761', '1'] 
i(uint256) := TMP_611(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_612(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoansID.push(_loanId)

IRs:
REF_1763(Base.Bank) -> banks[msg.sender]
REF_1764(uint256[]) -> REF_1763.LoansID
REF_1766 -> LENGTH REF_1764
TMP_614(uint256) := REF_1766(uint256)
TMP_615(uint256) = TMP_614 + 1
REF_1766(uint256) (->banks) := TMP_615(uint256)
REF_1767(uint256) -> REF_1764[TMP_614]
REF_1767(uint256) (->banks) := _loanId(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_indexLoan != banks[_owner].LoansID.length - 1

IRs:
REF_1768(Base.Bank) -> banks[_owner]
REF_1769(uint256[]) -> REF_1768.LoansID
REF_1770 -> LENGTH REF_1769
TMP_616(uint256) = REF_1770 - 1
TMP_617(bool) = _indexLoan != TMP_616
CONDITION TMP_617"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
banks[_owner].LoansID[_indexLoan] = banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_1771(Base.Bank) -> banks[_owner]
REF_1772(uint256[]) -> REF_1771.LoansID
REF_1773(uint256) -> REF_1772[_indexLoan]
REF_1774(Base.Bank) -> banks[_owner]
REF_1775(uint256[]) -> REF_1774.LoansID
REF_1776(Base.Bank) -> banks[_owner]
REF_1777(uint256[]) -> REF_1776.LoansID
REF_1778 -> LENGTH REF_1777
TMP_618(uint256) = REF_1778 - 1
REF_1779(uint256) -> REF_1775[TMP_618]
REF_1773(uint256) (->banks) := REF_1779(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
delete banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_1780(Base.Bank) -> banks[_owner]
REF_1781(uint256[]) -> REF_1780.LoansID
REF_1782(Base.Bank) -> banks[_owner]
REF_1783(uint256[]) -> REF_1782.LoansID
REF_1784 -> LENGTH REF_1783
TMP_619(uint256) = REF_1784 - 1
REF_1785(uint256) -> REF_1781[TMP_619]
REF_1781 = delete REF_1785 "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
banks[_owner].LoansID.length --

IRs:
REF_1786(Base.Bank) -> banks[_owner]
REF_1787(uint256[]) -> REF_1786.LoansID
REF_1788 -> LENGTH REF_1787
TMP_620(uint256) := REF_1788(uint256)
REF_1788(-> banks) = REF_1788 - 1"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
loans[_loanId].ForSale = 0

IRs:
REF_1789(Base.Loan) -> loans[_loanId]
REF_1790(uint256) -> REF_1789.ForSale
REF_1790(uint256) (->loans) := 0(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
loans[_loanId].Owner = msg.sender

IRs:
REF_1791(Base.Loan) -> loans[_loanId]
REF_1792(address) -> REF_1791.Owner
REF_1792(address) (->loans) := msg.sender(address)"];
}
// Function: 731.sol-Deploy-addBank(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[_addressBank].Owner == 0)

IRs:
REF_1515(Base.Bank) -> banks[_addressBank]
REF_1516(address) -> REF_1515.Owner
TMP_513(bool) = REF_1516 == 0
TMP_514(None) = SOLIDITY_CALL require(bool)(TMP_513)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(clients[_addressBank].Owner == 0)

IRs:
REF_1517(Base.Client) -> clients[_addressBank]
REF_1518(address) -> REF_1517.Owner
TMP_515(bool) = REF_1518 == 0
TMP_516(None) = SOLIDITY_CALL require(bool)(TMP_515)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[_addressBank].Owner = _addressBank

IRs:
REF_1519(Base.Bank) -> banks[_addressBank]
REF_1520(address) -> REF_1519.Owner
REF_1520(address) (->banks) := _addressBank(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[_addressBank].Tokens = _tokens

IRs:
REF_1521(Base.Bank) -> banks[_addressBank]
REF_1522(uint256) -> REF_1521.Tokens
REF_1522(uint256) (->banks) := _tokens(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
5->1;
}
// Function: 731.sol-Deploy-addClient(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_addressClient].Owner != _addressClient,that addreess is a bank)

IRs:
REF_1523(Base.Bank) -> banks[_addressClient]
REF_1524(address) -> REF_1523.Owner
TMP_518(bool) = REF_1524 != _addressClient
TMP_519(None) = SOLIDITY_CALL require(bool,string)(TMP_518,that addreess is a bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(clients[_addressClient].Owner != _addressClient,that client already exists)

IRs:
REF_1525(Base.Client) -> clients[_addressClient]
REF_1526(address) -> REF_1525.Owner
TMP_520(bool) = REF_1526 != _addressClient
TMP_521(None) = SOLIDITY_CALL require(bool,string)(TMP_520,that client already exists)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_category > 0)

IRs:
TMP_522(bool) = _category > 0
TMP_523(None) = SOLIDITY_CALL require(bool)(TMP_522)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clients[_addressClient].Owner = _addressClient

IRs:
REF_1527(Base.Client) -> clients[_addressClient]
REF_1528(address) -> REF_1527.Owner
REF_1528(address) (->clients) := _addressClient(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
clients[_addressClient].Category = _category

IRs:
REF_1529(Base.Client) -> clients[_addressClient]
REF_1530(uint256) -> REF_1529.Category
REF_1530(uint256) (->clients) := _category(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
clients[_addressClient].Tokens = 0

IRs:
REF_1531(Base.Client) -> clients[_addressClient]
REF_1532(uint256) -> REF_1531.Tokens
REF_1532(uint256) (->clients) := 0(uint256)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
7->1;
}
// Function: 731.sol-Deploy-addLoanToPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3
"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1586(Base.Bank) -> banks[msg.sender]
REF_1587(Base.Portfolio[]) -> REF_1586.Portfolios
REF_1588(Base.Portfolio) -> REF_1587[_indexPortfolio]
REF_1589(uint256[]) -> REF_1588.idLoans
REF_1590 -> LENGTH REF_1589
TMP_548(bool) = i < REF_1590
CONDITION TMP_548"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i] == _idLoan

IRs:
REF_1591(Base.Bank) -> banks[msg.sender]
REF_1592(Base.Portfolio[]) -> REF_1591.Portfolios
REF_1593(Base.Portfolio) -> REF_1592[_indexPortfolio]
REF_1594(uint256[]) -> REF_1593.idLoans
REF_1595(uint256) -> REF_1594[i]
TMP_549(bool) = REF_1595 == _idLoan
CONDITION TMP_549"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(false,that loan already exists on the portfolio)

IRs:
TMP_550(None) = SOLIDITY_CALL require(bool,string)(False,that loan already exists on the portfolio)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_551(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.push(_idLoan)

IRs:
REF_1596(Base.Bank) -> banks[msg.sender]
REF_1597(Base.Portfolio[]) -> REF_1596.Portfolios
REF_1598(Base.Portfolio) -> REF_1597[_indexPortfolio]
REF_1599(uint256[]) -> REF_1598.idLoans
REF_1601 -> LENGTH REF_1599
TMP_553(uint256) := REF_1601(uint256)
TMP_554(uint256) = TMP_553 + 1
REF_1601(uint256) (->banks) := TMP_554(uint256)
REF_1602(uint256) -> REF_1599[TMP_553]
REF_1602(uint256) (->banks) := _idLoan(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
10->3;
}
// Function: 731.sol-Deploy-addTokensToBank(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bank].Owner == _bank,not a Bank)

IRs:
REF_1533(Base.Bank) -> banks[_bank]
REF_1534(address) -> REF_1533.Owner
TMP_525(bool) = REF_1534 == _bank
TMP_526(None) = SOLIDITY_CALL require(bool,string)(TMP_525,not a Bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[_bank].Tokens = banks[_bank].Tokens.add(_tokens)

IRs:
REF_1535(Base.Bank) -> banks[_bank]
REF_1536(uint256) -> REF_1535.Tokens
REF_1537(Base.Bank) -> banks[_bank]
REF_1538(uint256) -> REF_1537.Tokens
TMP_527(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1538', '_tokens'] 
REF_1536(uint256) (->banks) := TMP_527(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
3->1;
}
// Function: 731.sol-Deploy-aproveLoan(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].LoanPending[_loanIndex].Owner == msg.sender,you are not the owner)

IRs:
REF_1793(Base.Bank) -> banks[msg.sender]
REF_1794(Base.Loan[]) -> REF_1793.LoanPending
REF_1795(Base.Loan) -> REF_1794[_loanIndex]
REF_1796(address) -> REF_1795.Owner
TMP_621(bool) = REF_1796 == msg.sender
TMP_622(None) = SOLIDITY_CALL require(bool,string)(TMP_621,you are not the owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= banks[msg.sender].LoanPending[_loanIndex].Amount,the bank does not have that amount of tokens)

IRs:
REF_1797(Base.Bank) -> banks[msg.sender]
REF_1798(uint256) -> REF_1797.Tokens
REF_1799(Base.Bank) -> banks[msg.sender]
REF_1800(Base.Loan[]) -> REF_1799.LoanPending
REF_1801(Base.Loan) -> REF_1800[_loanIndex]
REF_1802(uint256) -> REF_1801.Amount
TMP_623(bool) = REF_1798 >= REF_1802
TMP_624(None) = SOLIDITY_CALL require(bool,string)(TMP_623,the bank does not have that amount of tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex].Id = loans.length

IRs:
REF_1803(Base.Bank) -> banks[msg.sender]
REF_1804(Base.Loan[]) -> REF_1803.LoanPending
REF_1805(Base.Loan) -> REF_1804[_loanIndex]
REF_1806(uint256) -> REF_1805.Id
REF_1807 -> LENGTH loans
REF_1806(uint256) (->banks) := REF_1807(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans.push(banks[msg.sender].LoanPending[_loanIndex])

IRs:
REF_1809(Base.Bank) -> banks[msg.sender]
REF_1810(Base.Loan[]) -> REF_1809.LoanPending
REF_1811(Base.Loan) -> REF_1810[_loanIndex]
REF_1812 -> LENGTH loans
TMP_626(uint256) := REF_1812(uint256)
TMP_627(uint256) = TMP_626 + 1
REF_1812(uint256) (->loans) := TMP_627(uint256)
REF_1813(Base.Loan) -> loans[TMP_626]
REF_1813(Base.Loan) (->loans) := REF_1811(Base.Loan)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[loans.length - 1].StartTime = now

IRs:
REF_1814 -> LENGTH loans
TMP_628(uint256) = REF_1814 - 1
REF_1815(Base.Loan) -> loans[TMP_628]
REF_1816(uint256) -> REF_1815.StartTime
REF_1816(uint256) (->loans) := now(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_client = banks[msg.sender].LoanPending[_loanIndex].Client

IRs:
REF_1817(Base.Bank) -> banks[msg.sender]
REF_1818(Base.Loan[]) -> REF_1817.LoanPending
REF_1819(Base.Loan) -> REF_1818[_loanIndex]
REF_1820(address) -> REF_1819.Client
_client(address) := REF_1820(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_amount = banks[msg.sender].LoanPending[_loanIndex].Amount

IRs:
REF_1821(Base.Bank) -> banks[msg.sender]
REF_1822(Base.Loan[]) -> REF_1821.LoanPending
REF_1823(Base.Loan) -> REF_1822[_loanIndex]
REF_1824(uint256) -> REF_1823.Amount
_amount(uint256) := REF_1824(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
banks[msg.sender].LoansID.push(loans.length - 1)

IRs:
REF_1825(Base.Bank) -> banks[msg.sender]
REF_1826(uint256[]) -> REF_1825.LoansID
REF_1828 -> LENGTH loans
TMP_629(uint256) = REF_1828 - 1
REF_1829 -> LENGTH REF_1826
TMP_631(uint256) := REF_1829(uint256)
TMP_632(uint256) = TMP_631 + 1
REF_1829(uint256) (->banks) := TMP_632(uint256)
REF_1830(uint256) -> REF_1826[TMP_631]
REF_1830(uint256) (->banks) := TMP_629(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
clients[_client].LoansID.push(loans.length - 1)

IRs:
REF_1831(Base.Client) -> clients[_client]
REF_1832(uint256[]) -> REF_1831.LoansID
REF_1834 -> LENGTH loans
TMP_633(uint256) = REF_1834 - 1
REF_1835 -> LENGTH REF_1832
TMP_635(uint256) := REF_1835(uint256)
TMP_636(uint256) = TMP_635 + 1
REF_1835(uint256) (->clients) := TMP_636(uint256)
REF_1836(uint256) -> REF_1832[TMP_635]
REF_1836(uint256) (->clients) := TMP_633(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
clients[_client].Tokens = clients[_client].Tokens.add(_amount)

IRs:
REF_1837(Base.Client) -> clients[_client]
REF_1838(uint256) -> REF_1837.Tokens
REF_1839(Base.Client) -> clients[_client]
REF_1840(uint256) -> REF_1839.Tokens
TMP_637(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1840', '_amount'] 
REF_1838(uint256) (->clients) := TMP_637(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_amount)

IRs:
REF_1842(Base.Bank) -> banks[msg.sender]
REF_1843(uint256) -> REF_1842.Tokens
REF_1844(Base.Bank) -> banks[msg.sender]
REF_1845(uint256) -> REF_1844.Tokens
TMP_638(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1845', '_amount'] 
REF_1843(uint256) (->banks) := TMP_638(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
banks[msg.sender].LoanPending.length != 1

IRs:
REF_1847(Base.Bank) -> banks[msg.sender]
REF_1848(Base.Loan[]) -> REF_1847.LoanPending
REF_1849 -> LENGTH REF_1848
TMP_639(bool) = REF_1849 != 1
CONDITION TMP_639"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex] = banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_1850(Base.Bank) -> banks[msg.sender]
REF_1851(Base.Loan[]) -> REF_1850.LoanPending
REF_1852(Base.Loan) -> REF_1851[_loanIndex]
REF_1853(Base.Bank) -> banks[msg.sender]
REF_1854(Base.Loan[]) -> REF_1853.LoanPending
REF_1855(Base.Bank) -> banks[msg.sender]
REF_1856(Base.Loan[]) -> REF_1855.LoanPending
REF_1857 -> LENGTH REF_1856
TMP_640(uint256) = REF_1857 - 1
REF_1858(Base.Loan) -> REF_1854[TMP_640]
REF_1852(Base.Loan) (->banks) := REF_1858(Base.Loan)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
delete banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_1859(Base.Bank) -> banks[msg.sender]
REF_1860(Base.Loan[]) -> REF_1859.LoanPending
REF_1861(Base.Bank) -> banks[msg.sender]
REF_1862(Base.Loan[]) -> REF_1861.LoanPending
REF_1863 -> LENGTH REF_1862
TMP_641(uint256) = REF_1863 - 1
REF_1864(Base.Loan) -> REF_1860[TMP_641]
REF_1860 = delete REF_1864 "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
banks[msg.sender].LoanPending.length --

IRs:
REF_1865(Base.Bank) -> banks[msg.sender]
REF_1866(Base.Loan[]) -> REF_1865.LoanPending
REF_1867 -> LENGTH REF_1866
TMP_642(uint256) := REF_1867(uint256)
REF_1867(-> banks) = REF_1867 - 1"];
}
// Function: 731.sol-Deploy-askForALoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Owner == _bankAddress,not a valid bank)

IRs:
REF_1945(Base.Bank) -> banks[_bankAddress]
REF_1946(address) -> REF_1945.Owner
TMP_663(bool) = REF_1946 == _bankAddress
TMP_664(None) = SOLIDITY_CALL require(bool,string)(TMP_663,not a valid bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable,you not apply for that loan)

IRs:
REF_1947(Base.Bank) -> banks[_bankAddress]
REF_1948(mapping(uint256 => Base.strCateg)) -> REF_1947.Category
REF_1949(Base.Client) -> clients[msg.sender]
REF_1950(uint256) -> REF_1949.Category
REF_1951(Base.strCateg) -> REF_1948[REF_1950]
REF_1952(mapping(uint256 => Base.strAmount)) -> REF_1951.Amount
REF_1953(Base.strAmount) -> REF_1952[_amount]
REF_1954(mapping(uint256 => Base.strInsta)) -> REF_1953.Installment
REF_1955(Base.strInsta) -> REF_1954[_installment]
REF_1956(bool) -> REF_1955.enable
TMP_665(None) = SOLIDITY_CALL require(bool,string)(REF_1956,you not apply for that loan)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan.Debt = _amount

IRs:
REF_1957(uint256) -> _loan.Debt
REF_1957(uint256) (->_loan) := _amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan.Debt = _loan.Debt.add(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value)

IRs:
REF_1958(uint256) -> _loan.Debt
REF_1959(uint256) -> _loan.Debt
REF_1961(Base.Bank) -> banks[_bankAddress]
REF_1962(mapping(uint256 => Base.strCateg)) -> REF_1961.Category
REF_1963(Base.Client) -> clients[msg.sender]
REF_1964(uint256) -> REF_1963.Category
REF_1965(Base.strCateg) -> REF_1962[REF_1964]
REF_1966(mapping(uint256 => Base.strAmount)) -> REF_1965.Amount
REF_1967(Base.strAmount) -> REF_1966[_amount]
REF_1968(mapping(uint256 => Base.strInsta)) -> REF_1967.Installment
REF_1969(Base.strInsta) -> REF_1968[_installment]
REF_1970(uint256) -> REF_1969.value
TMP_666(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1959', 'REF_1970'] 
REF_1958(uint256) (->_loan) := TMP_666(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_loan.Client = msg.sender

IRs:
REF_1971(address) -> _loan.Client
REF_1971(address) (->_loan) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_loan.Owner = _bankAddress

IRs:
REF_1972(address) -> _loan.Owner
REF_1972(address) (->_loan) := _bankAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loan.Installment = _installment

IRs:
REF_1973(uint256) -> _loan.Installment
REF_1973(uint256) (->_loan) := _installment(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_loan.Category = clients[msg.sender].Category

IRs:
REF_1974(uint256) -> _loan.Category
REF_1975(Base.Client) -> clients[msg.sender]
REF_1976(uint256) -> REF_1975.Category
REF_1974(uint256) (->_loan) := REF_1976(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_loan.Amount = _amount

IRs:
REF_1977(uint256) -> _loan.Amount
REF_1977(uint256) (->_loan) := _amount(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[_bankAddress].LoanPending.push(_loan)

IRs:
REF_1978(Base.Bank) -> banks[_bankAddress]
REF_1979(Base.Loan[]) -> REF_1978.LoanPending
REF_1981 -> LENGTH REF_1979
TMP_668(uint256) := REF_1981(uint256)
TMP_669(uint256) = TMP_668 + 1
REF_1981(uint256) (->banks) := TMP_669(uint256)
REF_1982(Base.Loan) -> REF_1979[TMP_668]
REF_1982(Base.Loan) (->banks) := _loan(Base.Loan)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
12->1;
}
// Function: 731.sol-Deploy-buyPortfolio(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[msg.sender].Tokens >= _value)

IRs:
REF_1669(Base.Bank) -> banks[msg.sender]
REF_1670(uint256) -> REF_1669.Tokens
TMP_575(bool) = REF_1670 >= _value
TMP_576(None) = SOLIDITY_CALL require(bool)(TMP_575)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].idLoans.length > 0)

IRs:
REF_1671(Base.Bank) -> banks[_owner]
REF_1672(Base.Portfolio[]) -> REF_1671.Portfolios
REF_1673(Base.Portfolio) -> REF_1672[_indexPortfolio]
REF_1674(uint256[]) -> REF_1673.idLoans
REF_1675 -> LENGTH REF_1674
TMP_577(bool) = REF_1675 > 0
TMP_578(None) = SOLIDITY_CALL require(bool)(TMP_577)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].forSale > 0)

IRs:
REF_1676(Base.Bank) -> banks[_owner]
REF_1677(Base.Portfolio[]) -> REF_1676.Portfolios
REF_1678(Base.Portfolio) -> REF_1677[_indexPortfolio]
REF_1679(uint256) -> REF_1678.forSale
TMP_579(bool) = REF_1679 > 0
TMP_580(None) = SOLIDITY_CALL require(bool)(TMP_579)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].forSale == _value)

IRs:
REF_1680(Base.Bank) -> banks[_owner]
REF_1681(Base.Portfolio[]) -> REF_1680.Portfolios
REF_1682(Base.Portfolio) -> REF_1681[_indexPortfolio]
REF_1683(uint256) -> REF_1682.forSale
TMP_581(bool) = REF_1683 == _value
TMP_582(None) = SOLIDITY_CALL require(bool)(TMP_581)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_1684(Base.Bank) -> banks[msg.sender]
REF_1685(uint256) -> REF_1684.Tokens
REF_1686(Base.Bank) -> banks[msg.sender]
REF_1687(uint256) -> REF_1686.Tokens
TMP_583(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1687', '_value'] 
REF_1685(uint256) (->banks) := TMP_583(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
banks[_owner].Tokens = banks[_owner].Tokens.add(_value)

IRs:
REF_1689(Base.Bank) -> banks[_owner]
REF_1690(uint256) -> REF_1689.Tokens
REF_1691(Base.Bank) -> banks[_owner]
REF_1692(uint256) -> REF_1691.Tokens
TMP_584(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1692', '_value'] 
REF_1690(uint256) (->banks) := TMP_584(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9
"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
a < banks[_owner].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1694(Base.Bank) -> banks[_owner]
REF_1695(Base.Portfolio[]) -> REF_1694.Portfolios
REF_1696(Base.Portfolio) -> REF_1695[_indexPortfolio]
REF_1697(uint256[]) -> REF_1696.idLoans
REF_1698 -> LENGTH REF_1697
TMP_585(bool) = a < REF_1698
CONDITION TMP_585"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
SwitchLoanOwner(_owner,banks[_owner].Portfolios[_indexPortfolio].idLoans[a])

IRs:
REF_1699(Base.Bank) -> banks[_owner]
REF_1700(Base.Portfolio[]) -> REF_1699.Portfolios
REF_1701(Base.Portfolio) -> REF_1700[_indexPortfolio]
REF_1702(uint256[]) -> REF_1701.idLoans
REF_1703(uint256) -> REF_1702[a]
INTERNAL_CALL, LoansFunctions.SwitchLoanOwner(address,uint256)(_owner,REF_1703)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
a ++

IRs:
TMP_587(uint256) := a(uint256)
a(uint256) = a + 1"];
12->10;
13[label="Node Type: IF 13

EXPRESSION:
_indexPortfolio != banks[_owner].Portfolios.length - 1

IRs:
REF_1704(Base.Bank) -> banks[_owner]
REF_1705(Base.Portfolio[]) -> REF_1704.Portfolios
REF_1706 -> LENGTH REF_1705
TMP_588(uint256) = REF_1706 - 1
TMP_589(bool) = _indexPortfolio != TMP_588
CONDITION TMP_589"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
banks[_owner].Portfolios[_indexPortfolio] = banks[_owner].Portfolios[banks[_owner].Portfolios.length - 1]

IRs:
REF_1707(Base.Bank) -> banks[_owner]
REF_1708(Base.Portfolio[]) -> REF_1707.Portfolios
REF_1709(Base.Portfolio) -> REF_1708[_indexPortfolio]
REF_1710(Base.Bank) -> banks[_owner]
REF_1711(Base.Portfolio[]) -> REF_1710.Portfolios
REF_1712(Base.Bank) -> banks[_owner]
REF_1713(Base.Portfolio[]) -> REF_1712.Portfolios
REF_1714 -> LENGTH REF_1713
TMP_590(uint256) = REF_1714 - 1
REF_1715(Base.Portfolio) -> REF_1711[TMP_590]
REF_1709(Base.Portfolio) (->banks) := REF_1715(Base.Portfolio)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
delete banks[_owner].Portfolios[banks[_owner].Portfolios.length - 1]

IRs:
REF_1716(Base.Bank) -> banks[_owner]
REF_1717(Base.Portfolio[]) -> REF_1716.Portfolios
REF_1718(Base.Bank) -> banks[_owner]
REF_1719(Base.Portfolio[]) -> REF_1718.Portfolios
REF_1720 -> LENGTH REF_1719
TMP_591(uint256) = REF_1720 - 1
REF_1721(Base.Portfolio) -> REF_1717[TMP_591]
REF_1717 = delete REF_1721 "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
banks[_owner].Portfolios.length --

IRs:
REF_1722(Base.Bank) -> banks[_owner]
REF_1723(Base.Portfolio[]) -> REF_1722.Portfolios
REF_1724 -> LENGTH REF_1723
TMP_592(uint256) := REF_1724(uint256)
REF_1724(-> banks) = REF_1724 - 1"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
18->1;
}
// Function: 731.sol-Deploy-changeClientCategory(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[_client].Owner == _client,not a client)

IRs:
REF_1540(Base.Client) -> clients[_client]
REF_1541(address) -> REF_1540.Owner
TMP_529(bool) = REF_1541 == _client
TMP_530(None) = SOLIDITY_CALL require(bool,string)(TMP_529,not a client)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[_client].Category = _category

IRs:
REF_1542(Base.Client) -> clients[_client]
REF_1543(uint256) -> REF_1542.Category
REF_1543(uint256) (->clients) := _category(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
3->1;
}
// Function: 731.sol-Deploy-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forTesting()

IRs:
INTERNAL_CALL, Deploy.forTesting()()"];
}
// Function: 731.sol-Deploy-countPortfolios(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_result = banks[_bankAddress].Portfolios.length

IRs:
REF_1725(Base.Bank) -> banks[_bankAddress]
REF_1726(Base.Portfolio[]) -> REF_1725.Portfolios
REF_1727 -> LENGTH REF_1726
_result(uint256) := REF_1727(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 731.sol-Deploy-createPortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == loans[_idLoan].Owner)

IRs:
REF_1544(Base.Loan) -> loans[_idLoan]
REF_1545(address) -> REF_1544.Owner
TMP_532(bool) = msg.sender == REF_1545
TMP_533(None) = SOLIDITY_CALL require(bool)(TMP_532)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[msg.sender].Portfolios.push(_portfolio)

IRs:
REF_1546(Base.Bank) -> banks[msg.sender]
REF_1547(Base.Portfolio[]) -> REF_1546.Portfolios
REF_1549 -> LENGTH REF_1547
TMP_535(uint256) := REF_1549(uint256)
TMP_536(uint256) = TMP_535 + 1
REF_1549(uint256) (->banks) := TMP_536(uint256)
REF_1550(Base.Portfolio) -> REF_1547[TMP_535]
REF_1550(Base.Portfolio) (->banks) := _portfolio(Base.Portfolio)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length - 1].idLoans.push(_idLoan)

IRs:
REF_1551(Base.Bank) -> banks[msg.sender]
REF_1552(Base.Portfolio[]) -> REF_1551.Portfolios
REF_1553(Base.Bank) -> banks[msg.sender]
REF_1554(Base.Portfolio[]) -> REF_1553.Portfolios
REF_1555 -> LENGTH REF_1554
TMP_537(uint256) = REF_1555 - 1
REF_1556(Base.Portfolio) -> REF_1552[TMP_537]
REF_1557(uint256[]) -> REF_1556.idLoans
REF_1559 -> LENGTH REF_1557
TMP_539(uint256) := REF_1559(uint256)
TMP_540(uint256) = TMP_539 + 1
REF_1559(uint256) (->banks) := TMP_540(uint256)
REF_1560(uint256) -> REF_1557[TMP_539]
REF_1560(uint256) (->banks) := _idLoan(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length - 1].Owner = msg.sender

IRs:
REF_1561(Base.Bank) -> banks[msg.sender]
REF_1562(Base.Portfolio[]) -> REF_1561.Portfolios
REF_1563(Base.Bank) -> banks[msg.sender]
REF_1564(Base.Portfolio[]) -> REF_1563.Portfolios
REF_1565 -> LENGTH REF_1564
TMP_541(uint256) = REF_1565 - 1
REF_1566(Base.Portfolio) -> REF_1562[TMP_541]
REF_1567(address) -> REF_1566.Owner
REF_1567(address) (->banks) := msg.sender(address)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
banks[msg.sender].Portfolios.length - 1

IRs:
REF_1568(Base.Bank) -> banks[msg.sender]
REF_1569(Base.Portfolio[]) -> REF_1568.Portfolios
REF_1570 -> LENGTH REF_1569
TMP_542(uint256) = REF_1570 - 1
RETURN TMP_542"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
7->1;
}
// Function: 731.sol-Deploy-deletePortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_PortfolioLength = banks[msg.sender].Portfolios.length

IRs:
REF_1571(Base.Bank) -> banks[msg.sender]
REF_1572(Base.Portfolio[]) -> REF_1571.Portfolios
REF_1573 -> LENGTH REF_1572
_PortfolioLength(uint256) := REF_1573(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio] = banks[msg.sender].Portfolios[_PortfolioLength - 1]

IRs:
REF_1574(Base.Bank) -> banks[msg.sender]
REF_1575(Base.Portfolio[]) -> REF_1574.Portfolios
REF_1576(Base.Portfolio) -> REF_1575[_indexPortfolio]
REF_1577(Base.Bank) -> banks[msg.sender]
REF_1578(Base.Portfolio[]) -> REF_1577.Portfolios
TMP_544(uint256) = _PortfolioLength - 1
REF_1579(Base.Portfolio) -> REF_1578[TMP_544]
REF_1576(Base.Portfolio) (->banks) := REF_1579(Base.Portfolio)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete banks[msg.sender].Portfolios[_PortfolioLength - 1]

IRs:
REF_1580(Base.Bank) -> banks[msg.sender]
REF_1581(Base.Portfolio[]) -> REF_1580.Portfolios
TMP_545(uint256) = _PortfolioLength - 1
REF_1582(Base.Portfolio) -> REF_1581[TMP_545]
REF_1581 = delete REF_1582 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Portfolios.length --

IRs:
REF_1583(Base.Bank) -> banks[msg.sender]
REF_1584(Base.Portfolio[]) -> REF_1583.Portfolios
REF_1585 -> LENGTH REF_1584
TMP_546(uint256) := REF_1585(uint256)
REF_1585(-> banks) = REF_1585 - 1"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
5->1;
}
// Function: 731.sol-Deploy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(false,Should not go through this point)

IRs:
TMP_680(None) = SOLIDITY_CALL require(bool,string)(False,Should not go through this point)"];
}
// Function: 731.sol-Deploy-findOutInterestByBank(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value

IRs:
REF_1929(Base.Bank) -> banks[msg.sender]
REF_1930(mapping(uint256 => Base.strCateg)) -> REF_1929.Category
REF_1931(Base.strCateg) -> REF_1930[_category]
REF_1932(mapping(uint256 => Base.strAmount)) -> REF_1931.Amount
REF_1933(Base.strAmount) -> REF_1932[_amount]
REF_1934(mapping(uint256 => Base.strInsta)) -> REF_1933.Installment
REF_1935(Base.strInsta) -> REF_1934[_installment]
REF_1936(uint256) -> REF_1935.value
_value(uint256) := REF_1936(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable

IRs:
REF_1937(Base.Bank) -> banks[msg.sender]
REF_1938(mapping(uint256 => Base.strCateg)) -> REF_1937.Category
REF_1939(Base.strCateg) -> REF_1938[_category]
REF_1940(mapping(uint256 => Base.strAmount)) -> REF_1939.Amount
REF_1941(Base.strAmount) -> REF_1940[_amount]
REF_1942(mapping(uint256 => Base.strInsta)) -> REF_1941.Installment
REF_1943(Base.strInsta) -> REF_1942[_installment]
REF_1944(bool) -> REF_1943.enable
_enable(bool) := REF_1944(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-Deploy-findOutInterestByClientCategory(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value

IRs:
REF_1983(Base.Bank) -> banks[_bankAddress]
REF_1984(mapping(uint256 => Base.strCateg)) -> REF_1983.Category
REF_1985(Base.Client) -> clients[msg.sender]
REF_1986(uint256) -> REF_1985.Category
REF_1987(Base.strCateg) -> REF_1984[REF_1986]
REF_1988(mapping(uint256 => Base.strAmount)) -> REF_1987.Amount
REF_1989(Base.strAmount) -> REF_1988[_amount]
REF_1990(mapping(uint256 => Base.strInsta)) -> REF_1989.Installment
REF_1991(Base.strInsta) -> REF_1990[_installment]
REF_1992(uint256) -> REF_1991.value
_value(uint256) := REF_1992(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable

IRs:
REF_1993(Base.Bank) -> banks[_bankAddress]
REF_1994(mapping(uint256 => Base.strCateg)) -> REF_1993.Category
REF_1995(Base.Client) -> clients[msg.sender]
REF_1996(uint256) -> REF_1995.Category
REF_1997(Base.strCateg) -> REF_1994[REF_1996]
REF_1998(mapping(uint256 => Base.strAmount)) -> REF_1997.Amount
REF_1999(Base.strAmount) -> REF_1998[_amount]
REF_2000(mapping(uint256 => Base.strInsta)) -> REF_1999.Installment
REF_2001(Base.strInsta) -> REF_2000[_installment]
REF_2002(bool) -> REF_2001.enable
_enable(bool) := REF_2002(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-Deploy-forTesting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addBank(0x14723a09acff6d2a60dcdf7aa4aff308fddc160c,1)

IRs:
INTERNAL_CALL, GobernanceFunctions.addBank(address,uint256)(116727156174188091019688739584752390716576765452,1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addBank(0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db,1)

IRs:
INTERNAL_CALL, GobernanceFunctions.addBank(address,uint256)(428365927726247537526132020791190998556166378203,1)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addTokensToBank(0x14723a09acff6d2a60dcdf7aa4aff308fddc160c,20000)

IRs:
INTERNAL_CALL, GobernanceFunctions.addTokensToBank(address,uint256)(116727156174188091019688739584752390716576765452,20000)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
addTokensToBank(0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db,40000)

IRs:
INTERNAL_CALL, GobernanceFunctions.addTokensToBank(address,uint256)(428365927726247537526132020791190998556166378203,40000)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addClient(0x583031d1113ad414f02576bd6afabfb302140225,1)

IRs:
INTERNAL_CALL, GobernanceFunctions.addClient(address,uint256)(503465963245955021447394431766750955009431831077,1)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addClient(0xdd870fa1b7c4700f2bd7f44238821c26f7392148,1)

IRs:
INTERNAL_CALL, GobernanceFunctions.addClient(address,uint256)(1264698922667888905899203841532120539430171255112,1)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
changeClientCategory(0x583031d1113ad414f02576bd6afabfb302140225,5)

IRs:
INTERNAL_CALL, GobernanceFunctions.changeClientCategory(address,uint256)(503465963245955021447394431766750955009431831077,5)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
changeClientCategory(0xdd870fa1b7c4700f2bd7f44238821c26f7392148,5)

IRs:
INTERNAL_CALL, GobernanceFunctions.changeClientCategory(address,uint256)(1264698922667888905899203841532120539430171255112,5)"];
}
// Function: 731.sol-Deploy-getClientBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = clients[msg.sender].Tokens

IRs:
REF_2010(Base.Client) -> clients[msg.sender]
REF_2011(uint256) -> REF_2010.Tokens
_value(uint256) := REF_2011(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_value

IRs:
RETURN _value"];
}
// Function: 731.sol-Deploy-getClientCategory()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].Category

IRs:
REF_2018(Base.Client) -> clients[msg.sender]
REF_2019(uint256) -> REF_2018.Category
RETURN REF_2019"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-Deploy-getLoanIDbyClient(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID[_indexLoan]

IRs:
REF_2015(Base.Client) -> clients[msg.sender]
REF_2016(uint256[]) -> REF_2015.LoansID
REF_2017(uint256) -> REF_2016[_indexLoan]
RETURN REF_2017"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-Deploy-getLoansLengthByClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID.length

IRs:
REF_2012(Base.Client) -> clients[msg.sender]
REF_2013(uint256[]) -> REF_2012.LoansID
REF_2014 -> LENGTH REF_2013
RETURN REF_2014"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-Deploy-getPortfolioInfo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Portfolios[_indexPortfolio].Owner == _bankAddress,not the owner of that portfolio)

IRs:
REF_1643(Base.Bank) -> banks[_bankAddress]
REF_1644(Base.Portfolio[]) -> REF_1643.Portfolios
REF_1645(Base.Portfolio) -> REF_1644[_indexPortfolio]
REF_1646(address) -> REF_1645.Owner
TMP_569(bool) = REF_1646 == _bankAddress
TMP_570(None) = SOLIDITY_CALL require(bool,string)(TMP_569,not the owner of that portfolio)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_LoansLength = banks[_bankAddress].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1647(Base.Bank) -> banks[_bankAddress]
REF_1648(Base.Portfolio[]) -> REF_1647.Portfolios
REF_1649(Base.Portfolio) -> REF_1648[_indexPortfolio]
REF_1650(uint256[]) -> REF_1649.idLoans
REF_1651 -> LENGTH REF_1650
_LoansLength(uint256) := REF_1651(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_forSale = banks[_bankAddress].Portfolios[_indexPortfolio].forSale

IRs:
REF_1652(Base.Bank) -> banks[_bankAddress]
REF_1653(Base.Portfolio[]) -> REF_1652.Portfolios
REF_1654(Base.Portfolio) -> REF_1653[_indexPortfolio]
REF_1655(uint256) -> REF_1654.forSale
_forSale(uint256) := REF_1655(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_owner = banks[_bankAddress].Portfolios[_indexPortfolio].Owner

IRs:
REF_1656(Base.Bank) -> banks[_bankAddress]
REF_1657(Base.Portfolio[]) -> REF_1656.Portfolios
REF_1658(Base.Portfolio) -> REF_1657[_indexPortfolio]
REF_1659(address) -> REF_1658.Owner
_owner(address) := REF_1659(address)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
(_LoansLength,_forSale,_owner)

IRs:
RETURN _LoansLength,_forSale,_owner"];
}
// Function: 731.sol-Deploy-isBank()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_2024(Base.Bank) -> banks[msg.sender]
REF_2025(address) -> REF_2024.Owner
TMP_694(bool) = REF_2025 == msg.sender
TMP_695(None) = SOLIDITY_CALL require(bool,string)(TMP_694,you are not a bank)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-Deploy-isClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Owner == msg.sender,not a client)

IRs:
REF_2030(Base.Client) -> clients[msg.sender]
REF_2031(address) -> REF_2030.Owner
TMP_700(bool) = REF_2031 == msg.sender
TMP_701(None) = SOLIDITY_CALL require(bool,string)(TMP_700,not a client)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-Deploy-isLoanOwner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_2026(Base.Bank) -> banks[msg.sender]
REF_2027(address) -> REF_2026.Owner
TMP_696(bool) = REF_2027 == msg.sender
TMP_697(None) = SOLIDITY_CALL require(bool,string)(TMP_696,you are not a bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(loans[_id].Owner == msg.sender,not owner of loan)

IRs:
REF_2028(Base.Loan) -> loans[_id]
REF_2029(address) -> REF_2028.Owner
TMP_698(bool) = REF_2029 == msg.sender
TMP_699(None) = SOLIDITY_CALL require(bool,string)(TMP_698,not owner of loan)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 731.sol-Deploy-isOwnerPortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Portfolios[_indexPortfolio].Owner == msg.sender,not the owner of portfolio)

IRs:
REF_2020(Base.Bank) -> banks[msg.sender]
REF_2021(Base.Portfolio[]) -> REF_2020.Portfolios
REF_2022(Base.Portfolio) -> REF_2021[_indexPortfolio]
REF_2023(address) -> REF_2022.Owner
TMP_692(bool) = REF_2023 == msg.sender
TMP_693(None) = SOLIDITY_CALL require(bool,string)(TMP_692,not the owner of portfolio)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-Deploy-payOffClientDebt(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(loans[_loanId].Debt > 0)

IRs:
REF_1899(Base.Loan) -> loans[_loanId]
REF_1900(uint256) -> REF_1899.Debt
TMP_651(bool) = REF_1900 > 0
TMP_652(None) = SOLIDITY_CALL require(bool)(TMP_651)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_653(bool) = _value > 0
TMP_654(None) = SOLIDITY_CALL require(bool)(TMP_653)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(loans[_loanId].Debt >= _value)

IRs:
REF_1901(Base.Loan) -> loans[_loanId]
REF_1902(uint256) -> REF_1901.Debt
TMP_655(bool) = REF_1902 >= _value
TMP_656(None) = SOLIDITY_CALL require(bool)(TMP_655)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans[loans.length - 1].EndTime = now

IRs:
REF_1903 -> LENGTH loans
TMP_657(uint256) = REF_1903 - 1
REF_1904(Base.Loan) -> loans[TMP_657]
REF_1905(uint256) -> REF_1904.EndTime
REF_1905(uint256) (->loans) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[_loanId].Debt = loans[_loanId].Debt.sub(_value)

IRs:
REF_1906(Base.Loan) -> loans[_loanId]
REF_1907(uint256) -> REF_1906.Debt
REF_1908(Base.Loan) -> loans[_loanId]
REF_1909(uint256) -> REF_1908.Debt
TMP_658(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1909', '_value'] 
REF_1907(uint256) (->loans) := TMP_658(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
6->1;
}
// Function: 731.sol-Deploy-removeBankToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_1892(Base.Bank) -> banks[msg.sender]
REF_1893(uint256) -> REF_1892.Tokens
TMP_647(bool) = REF_1893 >= _value
TMP_648(None) = SOLIDITY_CALL require(bool,string)(TMP_647,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_1894(Base.Bank) -> banks[msg.sender]
REF_1895(uint256) -> REF_1894.Tokens
REF_1896(Base.Bank) -> banks[msg.sender]
REF_1897(uint256) -> REF_1896.Tokens
TMP_649(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1897', '_value'] 
REF_1895(uint256) (->banks) := TMP_649(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-Deploy-removeClientToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_2003(Base.Client) -> clients[msg.sender]
REF_2004(uint256) -> REF_2003.Tokens
TMP_672(bool) = REF_2004 >= _value
TMP_673(None) = SOLIDITY_CALL require(bool,string)(TMP_672,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[msg.sender].Tokens = clients[msg.sender].Tokens.sub(_value)

IRs:
REF_2005(Base.Client) -> clients[msg.sender]
REF_2006(uint256) -> REF_2005.Tokens
REF_2007(Base.Client) -> clients[msg.sender]
REF_2008(uint256) -> REF_2007.Tokens
TMP_674(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2008', '_value'] 
REF_2006(uint256) (->clients) := TMP_674(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
}
// Function: 731.sol-Deploy-removeLoanFromPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
Loanslength = banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1603(Base.Bank) -> banks[msg.sender]
REF_1604(Base.Portfolio[]) -> REF_1603.Portfolios
REF_1605(Base.Portfolio) -> REF_1604[_indexPortfolio]
REF_1606(uint256[]) -> REF_1605.idLoans
REF_1607 -> LENGTH REF_1606
Loanslength(uint256) := REF_1607(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_loanIndex = Loanslength

IRs:
_loanIndex(uint256) := Loanslength(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5
"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < Loanslength

IRs:
TMP_556(bool) = i < Loanslength
CONDITION TMP_556"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
_idLoan == banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i]

IRs:
REF_1608(Base.Bank) -> banks[msg.sender]
REF_1609(Base.Portfolio[]) -> REF_1608.Portfolios
REF_1610(Base.Portfolio) -> REF_1609[_indexPortfolio]
REF_1611(uint256[]) -> REF_1610.idLoans
REF_1612(uint256) -> REF_1611[i]
TMP_557(bool) = _idLoan == REF_1612
CONDITION TMP_557"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loanIndex = i

IRs:
_loanIndex(uint256) := i(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i = Loanslength

IRs:
i(uint256) := Loanslength(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_558(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(_loanIndex < Loanslength,el Loan no se encuentra en el Portfolio)

IRs:
TMP_559(bool) = _loanIndex < Loanslength
TMP_560(None) = SOLIDITY_CALL require(bool,string)(TMP_559,el Loan no se encuentra en el Portfolio)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_loanIndex != banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length - 1

IRs:
REF_1613(Base.Bank) -> banks[msg.sender]
REF_1614(Base.Portfolio[]) -> REF_1613.Portfolios
REF_1615(Base.Portfolio) -> REF_1614[_indexPortfolio]
REF_1616(uint256[]) -> REF_1615.idLoans
REF_1617 -> LENGTH REF_1616
TMP_561(uint256) = REF_1617 - 1
TMP_562(bool) = _loanIndex != TMP_561
CONDITION TMP_562"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_loanIndex] = banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength - 1]

IRs:
REF_1618(Base.Bank) -> banks[msg.sender]
REF_1619(Base.Portfolio[]) -> REF_1618.Portfolios
REF_1620(Base.Portfolio) -> REF_1619[_indexPortfolio]
REF_1621(uint256[]) -> REF_1620.idLoans
REF_1622(uint256) -> REF_1621[_loanIndex]
REF_1623(Base.Bank) -> banks[msg.sender]
REF_1624(Base.Portfolio[]) -> REF_1623.Portfolios
REF_1625(Base.Portfolio) -> REF_1624[_indexPortfolio]
REF_1626(uint256[]) -> REF_1625.idLoans
TMP_563(uint256) = Loanslength - 1
REF_1627(uint256) -> REF_1626[TMP_563]
REF_1622(uint256) (->banks) := REF_1627(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
delete banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength - 1]

IRs:
REF_1628(Base.Bank) -> banks[msg.sender]
REF_1629(Base.Portfolio[]) -> REF_1628.Portfolios
REF_1630(Base.Portfolio) -> REF_1629[_indexPortfolio]
REF_1631(uint256[]) -> REF_1630.idLoans
TMP_564(uint256) = Loanslength - 1
REF_1632(uint256) -> REF_1631[TMP_564]
REF_1631 = delete REF_1632 "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length --

IRs:
REF_1633(Base.Bank) -> banks[msg.sender]
REF_1634(Base.Portfolio[]) -> REF_1633.Portfolios
REF_1635(Base.Portfolio) -> REF_1634[_indexPortfolio]
REF_1636(uint256[]) -> REF_1635.idLoans
REF_1637 -> LENGTH REF_1636
TMP_565(uint256) := REF_1637(uint256)
REF_1637(-> banks) = REF_1637 - 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length == 0

IRs:
REF_1638(Base.Bank) -> banks[msg.sender]
REF_1639(Base.Portfolio[]) -> REF_1638.Portfolios
REF_1640(Base.Portfolio) -> REF_1639[_indexPortfolio]
REF_1641(uint256[]) -> REF_1640.idLoans
REF_1642 -> LENGTH REF_1641
TMP_566(bool) = REF_1642 == 0
CONDITION TMP_566"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
deletePortfolio(_indexPortfolio)

IRs:
INTERNAL_CALL, PortfolioFunctions.deletePortfolio(uint256)(_indexPortfolio)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_result = true

IRs:
_result(bool) := True(bool)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
22->1;
23[label="Node Type: RETURN 23

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 731.sol-Deploy-sellPorftolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length > 0)

IRs:
REF_1660(Base.Bank) -> banks[msg.sender]
REF_1661(Base.Portfolio[]) -> REF_1660.Portfolios
REF_1662(Base.Portfolio) -> REF_1661[_indexPortfolio]
REF_1663(uint256[]) -> REF_1662.idLoans
REF_1664 -> LENGTH REF_1663
TMP_572(bool) = REF_1664 > 0
TMP_573(None) = SOLIDITY_CALL require(bool)(TMP_572)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].forSale = _value

IRs:
REF_1665(Base.Bank) -> banks[msg.sender]
REF_1666(Base.Portfolio[]) -> REF_1665.Portfolios
REF_1667(Base.Portfolio) -> REF_1666[_indexPortfolio]
REF_1668(uint256) -> REF_1667.forSale
REF_1668(uint256) (->banks) := _value(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
3->1;
}
// Function: 731.sol-GobernanceFunctions-BuyLoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].ForSale > 0,not for sale)

IRs:
REF_1189(Base.Loan) -> loans[_loanId]
REF_1190(uint256) -> REF_1189.ForSale
TMP_398(bool) = REF_1190 > 0
TMP_399(None) = SOLIDITY_CALL require(bool,string)(TMP_398,not for sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,you dont have money)

IRs:
REF_1191(Base.Bank) -> banks[msg.sender]
REF_1192(uint256) -> REF_1191.Tokens
TMP_400(bool) = REF_1192 >= _value
TMP_401(None) = SOLIDITY_CALL require(bool,string)(TMP_400,you dont have money)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SwitchLoanOwner(_owner,_loanId)

IRs:
INTERNAL_CALL, LoansFunctions.SwitchLoanOwner(address,uint256)(_owner,_loanId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_1193(Base.Bank) -> banks[msg.sender]
REF_1194(uint256) -> REF_1193.Tokens
REF_1195(Base.Bank) -> banks[msg.sender]
REF_1196(uint256) -> REF_1195.Tokens
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1196', '_value'] 
REF_1194(uint256) (->banks) := TMP_403(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[_owner].Tokens = banks[_owner].Tokens.add(_value)

IRs:
REF_1198(Base.Bank) -> banks[_owner]
REF_1199(uint256) -> REF_1198.Tokens
REF_1200(Base.Bank) -> banks[_owner]
REF_1201(uint256) -> REF_1200.Tokens
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1201', '_value'] 
REF_1199(uint256) (->banks) := TMP_404(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
6->1;
}
// Function: 731.sol-GobernanceFunctions-ChangeInterest(uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value = _value

IRs:
REF_1365(Base.Bank) -> banks[msg.sender]
REF_1366(mapping(uint256 => Base.strCateg)) -> REF_1365.Category
REF_1367(Base.strCateg) -> REF_1366[_category]
REF_1368(mapping(uint256 => Base.strAmount)) -> REF_1367.Amount
REF_1369(Base.strAmount) -> REF_1368[_amount]
REF_1370(mapping(uint256 => Base.strInsta)) -> REF_1369.Installment
REF_1371(Base.strInsta) -> REF_1370[_installment]
REF_1372(uint256) -> REF_1371.value
REF_1372(uint256) (->banks) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable = _enable

IRs:
REF_1373(Base.Bank) -> banks[msg.sender]
REF_1374(mapping(uint256 => Base.strCateg)) -> REF_1373.Category
REF_1375(Base.strCateg) -> REF_1374[_category]
REF_1376(mapping(uint256 => Base.strAmount)) -> REF_1375.Amount
REF_1377(Base.strAmount) -> REF_1376[_amount]
REF_1378(mapping(uint256 => Base.strInsta)) -> REF_1377.Installment
REF_1379(Base.strInsta) -> REF_1378[_installment]
REF_1380(bool) -> REF_1379.enable
REF_1380(bool) (->banks) := _enable(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-GobernanceFunctions-GetBankBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Tokens

IRs:
REF_1381(Base.Bank) -> banks[msg.sender]
REF_1382(uint256) -> REF_1381.Tokens
RETURN REF_1382"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-GobernanceFunctions-GetClientCategory(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[_client].Category

IRs:
REF_1344(Base.Client) -> clients[_client]
REF_1345(uint256) -> REF_1344.Category
RETURN REF_1345"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-GobernanceFunctions-GetLoanIdFromPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_indexLoan]

IRs:
REF_1182(Base.Bank) -> banks[msg.sender]
REF_1183(Base.Portfolio[]) -> REF_1182.Portfolios
REF_1184(Base.Portfolio) -> REF_1183[_indexPortfolio]
REF_1185(uint256[]) -> REF_1184.idLoans
REF_1186(uint256) -> REF_1185[_indexLoan]
RETURN REF_1186"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_ID

IRs:
RETURN _ID"];
}
// Function: 731.sol-GobernanceFunctions-GetLoanInfo(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_indexLoan < banks[msg.sender].LoanPending.length,null value)

IRs:
REF_1328(Base.Bank) -> banks[msg.sender]
REF_1329(Base.Loan[]) -> REF_1328.LoanPending
REF_1330 -> LENGTH REF_1329
TMP_445(bool) = _indexLoan < REF_1330
TMP_446(None) = SOLIDITY_CALL require(bool,string)(TMP_445,null value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan = banks[msg.sender].LoanPending[_indexLoan]

IRs:
REF_1331(Base.Bank) -> banks[msg.sender]
REF_1332(Base.Loan[]) -> REF_1331.LoanPending
REF_1333(Base.Loan) -> REF_1332[_indexLoan]
_loan(Base.Loan) := REF_1333(Base.Loan)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan = loans[_indexLoan]

IRs:
REF_1334(Base.Loan) -> loans[_indexLoan]
_loan(Base.Loan) := REF_1334(Base.Loan)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_debt = _loan.Debt

IRs:
REF_1335(uint256) -> _loan.Debt
_debt(uint256) := REF_1335(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_client = _loan.Client

IRs:
REF_1336(address) -> _loan.Client
_client(address) := REF_1336(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_installment = _loan.Installment

IRs:
REF_1337(uint256) -> _loan.Installment
_installment(uint256) := REF_1337(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_category = _loan.Category

IRs:
REF_1338(uint256) -> _loan.Category
_category(uint256) := REF_1338(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_amount = _loan.Amount

IRs:
REF_1339(uint256) -> _loan.Amount
_amount(uint256) := REF_1339(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_owner = _loan.Owner

IRs:
REF_1340(address) -> _loan.Owner
_owner(address) := REF_1340(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_forSale = _loan.ForSale

IRs:
REF_1341(uint256) -> _loan.ForSale
_forSale(uint256) := REF_1341(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_StartTime = _loan.StartTime

IRs:
REF_1342(uint256) -> _loan.StartTime
_StartTime(uint256) := REF_1342(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_EndTime = _loan.EndTime

IRs:
REF_1343(uint256) -> _loan.EndTime
_EndTime(uint256) := REF_1343(uint256)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime)

IRs:
RETURN _debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime"];
}
// Function: 731.sol-GobernanceFunctions-GetLoansLenght(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
banks[msg.sender].LoanPending.length

IRs:
REF_1322(Base.Bank) -> banks[msg.sender]
REF_1323(Base.Loan[]) -> REF_1322.LoanPending
REF_1324 -> LENGTH REF_1323
RETURN REF_1324"];
3[label="Node Type: RETURN 3

EXPRESSION:
banks[msg.sender].LoansID.length

IRs:
REF_1325(Base.Bank) -> banks[msg.sender]
REF_1326(uint256[]) -> REF_1325.LoansID
REF_1327 -> LENGTH REF_1326
RETURN REF_1327"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
5->1;
}
// Function: 731.sol-GobernanceFunctions-IsOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(owner == msg.sender,not the owner)

IRs:
TMP_511(bool) = owner == msg.sender
TMP_512(None) = SOLIDITY_CALL require(bool,string)(TMP_511,not the owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-GobernanceFunctions-SellLoan(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
loans[_loanId].ForSale = _value

IRs:
REF_1187(Base.Loan) -> loans[_loanId]
REF_1188(uint256) -> REF_1187.ForSale
REF_1188(uint256) (->loans) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
2->1;
}
// Function: 731.sol-GobernanceFunctions-SwitchLoanOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].Debt > 0,at least one of the loans is already paid)

IRs:
REF_1203(Base.Loan) -> loans[_loanId]
REF_1204(uint256) -> REF_1203.Debt
TMP_406(bool) = REF_1204 > 0
TMP_407(None) = SOLIDITY_CALL require(bool,string)(TMP_406,at least one of the loans is already paid)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(loans[_loanId].Owner == _owner)

IRs:
REF_1205(Base.Loan) -> loans[_loanId]
REF_1206(address) -> REF_1205.Owner
TMP_408(bool) = REF_1206 == _owner
TMP_409(None) = SOLIDITY_CALL require(bool)(TMP_408)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: NEW VARIABLE 6
"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < banks[_owner].LoansID.length

IRs:
REF_1207(Base.Bank) -> banks[_owner]
REF_1208(uint256[]) -> REF_1207.LoansID
REF_1209 -> LENGTH REF_1208
TMP_410(bool) = i < REF_1209
CONDITION TMP_410"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
banks[_owner].LoansID[i] == _loanId

IRs:
REF_1210(Base.Bank) -> banks[_owner]
REF_1211(uint256[]) -> REF_1210.LoansID
REF_1212(uint256) -> REF_1211[i]
TMP_411(bool) = REF_1212 == _loanId
CONDITION TMP_411"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_indexLoan = i

IRs:
_indexLoan(uint256) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i = banks[_owner].LoansID.length.add(1)

IRs:
REF_1213(Base.Bank) -> banks[_owner]
REF_1214(uint256[]) -> REF_1213.LoansID
REF_1215 -> LENGTH REF_1214
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1215', '1'] 
i(uint256) := TMP_412(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_413(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoansID.push(_loanId)

IRs:
REF_1217(Base.Bank) -> banks[msg.sender]
REF_1218(uint256[]) -> REF_1217.LoansID
REF_1220 -> LENGTH REF_1218
TMP_415(uint256) := REF_1220(uint256)
TMP_416(uint256) = TMP_415 + 1
REF_1220(uint256) (->banks) := TMP_416(uint256)
REF_1221(uint256) -> REF_1218[TMP_415]
REF_1221(uint256) (->banks) := _loanId(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_indexLoan != banks[_owner].LoansID.length - 1

IRs:
REF_1222(Base.Bank) -> banks[_owner]
REF_1223(uint256[]) -> REF_1222.LoansID
REF_1224 -> LENGTH REF_1223
TMP_417(uint256) = REF_1224 - 1
TMP_418(bool) = _indexLoan != TMP_417
CONDITION TMP_418"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
banks[_owner].LoansID[_indexLoan] = banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_1225(Base.Bank) -> banks[_owner]
REF_1226(uint256[]) -> REF_1225.LoansID
REF_1227(uint256) -> REF_1226[_indexLoan]
REF_1228(Base.Bank) -> banks[_owner]
REF_1229(uint256[]) -> REF_1228.LoansID
REF_1230(Base.Bank) -> banks[_owner]
REF_1231(uint256[]) -> REF_1230.LoansID
REF_1232 -> LENGTH REF_1231
TMP_419(uint256) = REF_1232 - 1
REF_1233(uint256) -> REF_1229[TMP_419]
REF_1227(uint256) (->banks) := REF_1233(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
delete banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_1234(Base.Bank) -> banks[_owner]
REF_1235(uint256[]) -> REF_1234.LoansID
REF_1236(Base.Bank) -> banks[_owner]
REF_1237(uint256[]) -> REF_1236.LoansID
REF_1238 -> LENGTH REF_1237
TMP_420(uint256) = REF_1238 - 1
REF_1239(uint256) -> REF_1235[TMP_420]
REF_1235 = delete REF_1239 "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
banks[_owner].LoansID.length --

IRs:
REF_1240(Base.Bank) -> banks[_owner]
REF_1241(uint256[]) -> REF_1240.LoansID
REF_1242 -> LENGTH REF_1241
TMP_421(uint256) := REF_1242(uint256)
REF_1242(-> banks) = REF_1242 - 1"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
loans[_loanId].ForSale = 0

IRs:
REF_1243(Base.Loan) -> loans[_loanId]
REF_1244(uint256) -> REF_1243.ForSale
REF_1244(uint256) (->loans) := 0(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
loans[_loanId].Owner = msg.sender

IRs:
REF_1245(Base.Loan) -> loans[_loanId]
REF_1246(address) -> REF_1245.Owner
REF_1246(address) (->loans) := msg.sender(address)"];
}
// Function: 731.sol-GobernanceFunctions-addBank(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[_addressBank].Owner == 0)

IRs:
REF_1474(Base.Bank) -> banks[_addressBank]
REF_1475(address) -> REF_1474.Owner
TMP_482(bool) = REF_1475 == 0
TMP_483(None) = SOLIDITY_CALL require(bool)(TMP_482)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(clients[_addressBank].Owner == 0)

IRs:
REF_1476(Base.Client) -> clients[_addressBank]
REF_1477(address) -> REF_1476.Owner
TMP_484(bool) = REF_1477 == 0
TMP_485(None) = SOLIDITY_CALL require(bool)(TMP_484)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[_addressBank].Owner = _addressBank

IRs:
REF_1478(Base.Bank) -> banks[_addressBank]
REF_1479(address) -> REF_1478.Owner
REF_1479(address) (->banks) := _addressBank(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[_addressBank].Tokens = _tokens

IRs:
REF_1480(Base.Bank) -> banks[_addressBank]
REF_1481(uint256) -> REF_1480.Tokens
REF_1481(uint256) (->banks) := _tokens(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
5->1;
}
// Function: 731.sol-GobernanceFunctions-addClient(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_addressClient].Owner != _addressClient,that addreess is a bank)

IRs:
REF_1482(Base.Bank) -> banks[_addressClient]
REF_1483(address) -> REF_1482.Owner
TMP_487(bool) = REF_1483 != _addressClient
TMP_488(None) = SOLIDITY_CALL require(bool,string)(TMP_487,that addreess is a bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(clients[_addressClient].Owner != _addressClient,that client already exists)

IRs:
REF_1484(Base.Client) -> clients[_addressClient]
REF_1485(address) -> REF_1484.Owner
TMP_489(bool) = REF_1485 != _addressClient
TMP_490(None) = SOLIDITY_CALL require(bool,string)(TMP_489,that client already exists)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_category > 0)

IRs:
TMP_491(bool) = _category > 0
TMP_492(None) = SOLIDITY_CALL require(bool)(TMP_491)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
clients[_addressClient].Owner = _addressClient

IRs:
REF_1486(Base.Client) -> clients[_addressClient]
REF_1487(address) -> REF_1486.Owner
REF_1487(address) (->clients) := _addressClient(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
clients[_addressClient].Category = _category

IRs:
REF_1488(Base.Client) -> clients[_addressClient]
REF_1489(uint256) -> REF_1488.Category
REF_1489(uint256) (->clients) := _category(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
clients[_addressClient].Tokens = 0

IRs:
REF_1490(Base.Client) -> clients[_addressClient]
REF_1491(uint256) -> REF_1490.Tokens
REF_1491(uint256) (->clients) := 0(uint256)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
7->1;
}
// Function: 731.sol-GobernanceFunctions-addLoanToPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3
"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1040(Base.Bank) -> banks[msg.sender]
REF_1041(Base.Portfolio[]) -> REF_1040.Portfolios
REF_1042(Base.Portfolio) -> REF_1041[_indexPortfolio]
REF_1043(uint256[]) -> REF_1042.idLoans
REF_1044 -> LENGTH REF_1043
TMP_349(bool) = i < REF_1044
CONDITION TMP_349"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i] == _idLoan

IRs:
REF_1045(Base.Bank) -> banks[msg.sender]
REF_1046(Base.Portfolio[]) -> REF_1045.Portfolios
REF_1047(Base.Portfolio) -> REF_1046[_indexPortfolio]
REF_1048(uint256[]) -> REF_1047.idLoans
REF_1049(uint256) -> REF_1048[i]
TMP_350(bool) = REF_1049 == _idLoan
CONDITION TMP_350"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(false,that loan already exists on the portfolio)

IRs:
TMP_351(None) = SOLIDITY_CALL require(bool,string)(False,that loan already exists on the portfolio)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_352(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.push(_idLoan)

IRs:
REF_1050(Base.Bank) -> banks[msg.sender]
REF_1051(Base.Portfolio[]) -> REF_1050.Portfolios
REF_1052(Base.Portfolio) -> REF_1051[_indexPortfolio]
REF_1053(uint256[]) -> REF_1052.idLoans
REF_1055 -> LENGTH REF_1053
TMP_354(uint256) := REF_1055(uint256)
TMP_355(uint256) = TMP_354 + 1
REF_1055(uint256) (->banks) := TMP_355(uint256)
REF_1056(uint256) -> REF_1053[TMP_354]
REF_1056(uint256) (->banks) := _idLoan(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
10->3;
}
// Function: 731.sol-GobernanceFunctions-addTokensToBank(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bank].Owner == _bank,not a Bank)

IRs:
REF_1492(Base.Bank) -> banks[_bank]
REF_1493(address) -> REF_1492.Owner
TMP_494(bool) = REF_1493 == _bank
TMP_495(None) = SOLIDITY_CALL require(bool,string)(TMP_494,not a Bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[_bank].Tokens = banks[_bank].Tokens.add(_tokens)

IRs:
REF_1494(Base.Bank) -> banks[_bank]
REF_1495(uint256) -> REF_1494.Tokens
REF_1496(Base.Bank) -> banks[_bank]
REF_1497(uint256) -> REF_1496.Tokens
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1497', '_tokens'] 
REF_1495(uint256) (->banks) := TMP_496(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
3->1;
}
// Function: 731.sol-GobernanceFunctions-aproveLoan(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].LoanPending[_loanIndex].Owner == msg.sender,you are not the owner)

IRs:
REF_1247(Base.Bank) -> banks[msg.sender]
REF_1248(Base.Loan[]) -> REF_1247.LoanPending
REF_1249(Base.Loan) -> REF_1248[_loanIndex]
REF_1250(address) -> REF_1249.Owner
TMP_422(bool) = REF_1250 == msg.sender
TMP_423(None) = SOLIDITY_CALL require(bool,string)(TMP_422,you are not the owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= banks[msg.sender].LoanPending[_loanIndex].Amount,the bank does not have that amount of tokens)

IRs:
REF_1251(Base.Bank) -> banks[msg.sender]
REF_1252(uint256) -> REF_1251.Tokens
REF_1253(Base.Bank) -> banks[msg.sender]
REF_1254(Base.Loan[]) -> REF_1253.LoanPending
REF_1255(Base.Loan) -> REF_1254[_loanIndex]
REF_1256(uint256) -> REF_1255.Amount
TMP_424(bool) = REF_1252 >= REF_1256
TMP_425(None) = SOLIDITY_CALL require(bool,string)(TMP_424,the bank does not have that amount of tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex].Id = loans.length

IRs:
REF_1257(Base.Bank) -> banks[msg.sender]
REF_1258(Base.Loan[]) -> REF_1257.LoanPending
REF_1259(Base.Loan) -> REF_1258[_loanIndex]
REF_1260(uint256) -> REF_1259.Id
REF_1261 -> LENGTH loans
REF_1260(uint256) (->banks) := REF_1261(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans.push(banks[msg.sender].LoanPending[_loanIndex])

IRs:
REF_1263(Base.Bank) -> banks[msg.sender]
REF_1264(Base.Loan[]) -> REF_1263.LoanPending
REF_1265(Base.Loan) -> REF_1264[_loanIndex]
REF_1266 -> LENGTH loans
TMP_427(uint256) := REF_1266(uint256)
TMP_428(uint256) = TMP_427 + 1
REF_1266(uint256) (->loans) := TMP_428(uint256)
REF_1267(Base.Loan) -> loans[TMP_427]
REF_1267(Base.Loan) (->loans) := REF_1265(Base.Loan)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[loans.length - 1].StartTime = now

IRs:
REF_1268 -> LENGTH loans
TMP_429(uint256) = REF_1268 - 1
REF_1269(Base.Loan) -> loans[TMP_429]
REF_1270(uint256) -> REF_1269.StartTime
REF_1270(uint256) (->loans) := now(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_client = banks[msg.sender].LoanPending[_loanIndex].Client

IRs:
REF_1271(Base.Bank) -> banks[msg.sender]
REF_1272(Base.Loan[]) -> REF_1271.LoanPending
REF_1273(Base.Loan) -> REF_1272[_loanIndex]
REF_1274(address) -> REF_1273.Client
_client(address) := REF_1274(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_amount = banks[msg.sender].LoanPending[_loanIndex].Amount

IRs:
REF_1275(Base.Bank) -> banks[msg.sender]
REF_1276(Base.Loan[]) -> REF_1275.LoanPending
REF_1277(Base.Loan) -> REF_1276[_loanIndex]
REF_1278(uint256) -> REF_1277.Amount
_amount(uint256) := REF_1278(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
banks[msg.sender].LoansID.push(loans.length - 1)

IRs:
REF_1279(Base.Bank) -> banks[msg.sender]
REF_1280(uint256[]) -> REF_1279.LoansID
REF_1282 -> LENGTH loans
TMP_430(uint256) = REF_1282 - 1
REF_1283 -> LENGTH REF_1280
TMP_432(uint256) := REF_1283(uint256)
TMP_433(uint256) = TMP_432 + 1
REF_1283(uint256) (->banks) := TMP_433(uint256)
REF_1284(uint256) -> REF_1280[TMP_432]
REF_1284(uint256) (->banks) := TMP_430(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
clients[_client].LoansID.push(loans.length - 1)

IRs:
REF_1285(Base.Client) -> clients[_client]
REF_1286(uint256[]) -> REF_1285.LoansID
REF_1288 -> LENGTH loans
TMP_434(uint256) = REF_1288 - 1
REF_1289 -> LENGTH REF_1286
TMP_436(uint256) := REF_1289(uint256)
TMP_437(uint256) = TMP_436 + 1
REF_1289(uint256) (->clients) := TMP_437(uint256)
REF_1290(uint256) -> REF_1286[TMP_436]
REF_1290(uint256) (->clients) := TMP_434(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
clients[_client].Tokens = clients[_client].Tokens.add(_amount)

IRs:
REF_1291(Base.Client) -> clients[_client]
REF_1292(uint256) -> REF_1291.Tokens
REF_1293(Base.Client) -> clients[_client]
REF_1294(uint256) -> REF_1293.Tokens
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1294', '_amount'] 
REF_1292(uint256) (->clients) := TMP_438(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_amount)

IRs:
REF_1296(Base.Bank) -> banks[msg.sender]
REF_1297(uint256) -> REF_1296.Tokens
REF_1298(Base.Bank) -> banks[msg.sender]
REF_1299(uint256) -> REF_1298.Tokens
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1299', '_amount'] 
REF_1297(uint256) (->banks) := TMP_439(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
banks[msg.sender].LoanPending.length != 1

IRs:
REF_1301(Base.Bank) -> banks[msg.sender]
REF_1302(Base.Loan[]) -> REF_1301.LoanPending
REF_1303 -> LENGTH REF_1302
TMP_440(bool) = REF_1303 != 1
CONDITION TMP_440"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex] = banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_1304(Base.Bank) -> banks[msg.sender]
REF_1305(Base.Loan[]) -> REF_1304.LoanPending
REF_1306(Base.Loan) -> REF_1305[_loanIndex]
REF_1307(Base.Bank) -> banks[msg.sender]
REF_1308(Base.Loan[]) -> REF_1307.LoanPending
REF_1309(Base.Bank) -> banks[msg.sender]
REF_1310(Base.Loan[]) -> REF_1309.LoanPending
REF_1311 -> LENGTH REF_1310
TMP_441(uint256) = REF_1311 - 1
REF_1312(Base.Loan) -> REF_1308[TMP_441]
REF_1306(Base.Loan) (->banks) := REF_1312(Base.Loan)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
delete banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_1313(Base.Bank) -> banks[msg.sender]
REF_1314(Base.Loan[]) -> REF_1313.LoanPending
REF_1315(Base.Bank) -> banks[msg.sender]
REF_1316(Base.Loan[]) -> REF_1315.LoanPending
REF_1317 -> LENGTH REF_1316
TMP_442(uint256) = REF_1317 - 1
REF_1318(Base.Loan) -> REF_1314[TMP_442]
REF_1314 = delete REF_1318 "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
banks[msg.sender].LoanPending.length --

IRs:
REF_1319(Base.Bank) -> banks[msg.sender]
REF_1320(Base.Loan[]) -> REF_1319.LoanPending
REF_1321 -> LENGTH REF_1320
TMP_443(uint256) := REF_1321(uint256)
REF_1321(-> banks) = REF_1321 - 1"];
}
// Function: 731.sol-GobernanceFunctions-askForALoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Owner == _bankAddress,not a valid bank)

IRs:
REF_1399(Base.Bank) -> banks[_bankAddress]
REF_1400(address) -> REF_1399.Owner
TMP_464(bool) = REF_1400 == _bankAddress
TMP_465(None) = SOLIDITY_CALL require(bool,string)(TMP_464,not a valid bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable,you not apply for that loan)

IRs:
REF_1401(Base.Bank) -> banks[_bankAddress]
REF_1402(mapping(uint256 => Base.strCateg)) -> REF_1401.Category
REF_1403(Base.Client) -> clients[msg.sender]
REF_1404(uint256) -> REF_1403.Category
REF_1405(Base.strCateg) -> REF_1402[REF_1404]
REF_1406(mapping(uint256 => Base.strAmount)) -> REF_1405.Amount
REF_1407(Base.strAmount) -> REF_1406[_amount]
REF_1408(mapping(uint256 => Base.strInsta)) -> REF_1407.Installment
REF_1409(Base.strInsta) -> REF_1408[_installment]
REF_1410(bool) -> REF_1409.enable
TMP_466(None) = SOLIDITY_CALL require(bool,string)(REF_1410,you not apply for that loan)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan.Debt = _amount

IRs:
REF_1411(uint256) -> _loan.Debt
REF_1411(uint256) (->_loan) := _amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan.Debt = _loan.Debt.add(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value)

IRs:
REF_1412(uint256) -> _loan.Debt
REF_1413(uint256) -> _loan.Debt
REF_1415(Base.Bank) -> banks[_bankAddress]
REF_1416(mapping(uint256 => Base.strCateg)) -> REF_1415.Category
REF_1417(Base.Client) -> clients[msg.sender]
REF_1418(uint256) -> REF_1417.Category
REF_1419(Base.strCateg) -> REF_1416[REF_1418]
REF_1420(mapping(uint256 => Base.strAmount)) -> REF_1419.Amount
REF_1421(Base.strAmount) -> REF_1420[_amount]
REF_1422(mapping(uint256 => Base.strInsta)) -> REF_1421.Installment
REF_1423(Base.strInsta) -> REF_1422[_installment]
REF_1424(uint256) -> REF_1423.value
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1413', 'REF_1424'] 
REF_1412(uint256) (->_loan) := TMP_467(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_loan.Client = msg.sender

IRs:
REF_1425(address) -> _loan.Client
REF_1425(address) (->_loan) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_loan.Owner = _bankAddress

IRs:
REF_1426(address) -> _loan.Owner
REF_1426(address) (->_loan) := _bankAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loan.Installment = _installment

IRs:
REF_1427(uint256) -> _loan.Installment
REF_1427(uint256) (->_loan) := _installment(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_loan.Category = clients[msg.sender].Category

IRs:
REF_1428(uint256) -> _loan.Category
REF_1429(Base.Client) -> clients[msg.sender]
REF_1430(uint256) -> REF_1429.Category
REF_1428(uint256) (->_loan) := REF_1430(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_loan.Amount = _amount

IRs:
REF_1431(uint256) -> _loan.Amount
REF_1431(uint256) (->_loan) := _amount(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[_bankAddress].LoanPending.push(_loan)

IRs:
REF_1432(Base.Bank) -> banks[_bankAddress]
REF_1433(Base.Loan[]) -> REF_1432.LoanPending
REF_1435 -> LENGTH REF_1433
TMP_469(uint256) := REF_1435(uint256)
TMP_470(uint256) = TMP_469 + 1
REF_1435(uint256) (->banks) := TMP_470(uint256)
REF_1436(Base.Loan) -> REF_1433[TMP_469]
REF_1436(Base.Loan) (->banks) := _loan(Base.Loan)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
12->1;
}
// Function: 731.sol-GobernanceFunctions-buyPortfolio(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[msg.sender].Tokens >= _value)

IRs:
REF_1123(Base.Bank) -> banks[msg.sender]
REF_1124(uint256) -> REF_1123.Tokens
TMP_376(bool) = REF_1124 >= _value
TMP_377(None) = SOLIDITY_CALL require(bool)(TMP_376)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].idLoans.length > 0)

IRs:
REF_1125(Base.Bank) -> banks[_owner]
REF_1126(Base.Portfolio[]) -> REF_1125.Portfolios
REF_1127(Base.Portfolio) -> REF_1126[_indexPortfolio]
REF_1128(uint256[]) -> REF_1127.idLoans
REF_1129 -> LENGTH REF_1128
TMP_378(bool) = REF_1129 > 0
TMP_379(None) = SOLIDITY_CALL require(bool)(TMP_378)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].forSale > 0)

IRs:
REF_1130(Base.Bank) -> banks[_owner]
REF_1131(Base.Portfolio[]) -> REF_1130.Portfolios
REF_1132(Base.Portfolio) -> REF_1131[_indexPortfolio]
REF_1133(uint256) -> REF_1132.forSale
TMP_380(bool) = REF_1133 > 0
TMP_381(None) = SOLIDITY_CALL require(bool)(TMP_380)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].forSale == _value)

IRs:
REF_1134(Base.Bank) -> banks[_owner]
REF_1135(Base.Portfolio[]) -> REF_1134.Portfolios
REF_1136(Base.Portfolio) -> REF_1135[_indexPortfolio]
REF_1137(uint256) -> REF_1136.forSale
TMP_382(bool) = REF_1137 == _value
TMP_383(None) = SOLIDITY_CALL require(bool)(TMP_382)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_1138(Base.Bank) -> banks[msg.sender]
REF_1139(uint256) -> REF_1138.Tokens
REF_1140(Base.Bank) -> banks[msg.sender]
REF_1141(uint256) -> REF_1140.Tokens
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1141', '_value'] 
REF_1139(uint256) (->banks) := TMP_384(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
banks[_owner].Tokens = banks[_owner].Tokens.add(_value)

IRs:
REF_1143(Base.Bank) -> banks[_owner]
REF_1144(uint256) -> REF_1143.Tokens
REF_1145(Base.Bank) -> banks[_owner]
REF_1146(uint256) -> REF_1145.Tokens
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1146', '_value'] 
REF_1144(uint256) (->banks) := TMP_385(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9
"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
a < banks[_owner].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1148(Base.Bank) -> banks[_owner]
REF_1149(Base.Portfolio[]) -> REF_1148.Portfolios
REF_1150(Base.Portfolio) -> REF_1149[_indexPortfolio]
REF_1151(uint256[]) -> REF_1150.idLoans
REF_1152 -> LENGTH REF_1151
TMP_386(bool) = a < REF_1152
CONDITION TMP_386"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
SwitchLoanOwner(_owner,banks[_owner].Portfolios[_indexPortfolio].idLoans[a])

IRs:
REF_1153(Base.Bank) -> banks[_owner]
REF_1154(Base.Portfolio[]) -> REF_1153.Portfolios
REF_1155(Base.Portfolio) -> REF_1154[_indexPortfolio]
REF_1156(uint256[]) -> REF_1155.idLoans
REF_1157(uint256) -> REF_1156[a]
INTERNAL_CALL, LoansFunctions.SwitchLoanOwner(address,uint256)(_owner,REF_1157)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
a ++

IRs:
TMP_388(uint256) := a(uint256)
a(uint256) = a + 1"];
12->10;
13[label="Node Type: IF 13

EXPRESSION:
_indexPortfolio != banks[_owner].Portfolios.length - 1

IRs:
REF_1158(Base.Bank) -> banks[_owner]
REF_1159(Base.Portfolio[]) -> REF_1158.Portfolios
REF_1160 -> LENGTH REF_1159
TMP_389(uint256) = REF_1160 - 1
TMP_390(bool) = _indexPortfolio != TMP_389
CONDITION TMP_390"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
banks[_owner].Portfolios[_indexPortfolio] = banks[_owner].Portfolios[banks[_owner].Portfolios.length - 1]

IRs:
REF_1161(Base.Bank) -> banks[_owner]
REF_1162(Base.Portfolio[]) -> REF_1161.Portfolios
REF_1163(Base.Portfolio) -> REF_1162[_indexPortfolio]
REF_1164(Base.Bank) -> banks[_owner]
REF_1165(Base.Portfolio[]) -> REF_1164.Portfolios
REF_1166(Base.Bank) -> banks[_owner]
REF_1167(Base.Portfolio[]) -> REF_1166.Portfolios
REF_1168 -> LENGTH REF_1167
TMP_391(uint256) = REF_1168 - 1
REF_1169(Base.Portfolio) -> REF_1165[TMP_391]
REF_1163(Base.Portfolio) (->banks) := REF_1169(Base.Portfolio)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
delete banks[_owner].Portfolios[banks[_owner].Portfolios.length - 1]

IRs:
REF_1170(Base.Bank) -> banks[_owner]
REF_1171(Base.Portfolio[]) -> REF_1170.Portfolios
REF_1172(Base.Bank) -> banks[_owner]
REF_1173(Base.Portfolio[]) -> REF_1172.Portfolios
REF_1174 -> LENGTH REF_1173
TMP_392(uint256) = REF_1174 - 1
REF_1175(Base.Portfolio) -> REF_1171[TMP_392]
REF_1171 = delete REF_1175 "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
banks[_owner].Portfolios.length --

IRs:
REF_1176(Base.Bank) -> banks[_owner]
REF_1177(Base.Portfolio[]) -> REF_1176.Portfolios
REF_1178 -> LENGTH REF_1177
TMP_393(uint256) := REF_1178(uint256)
REF_1178(-> banks) = REF_1178 - 1"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
18->1;
}
// Function: 731.sol-GobernanceFunctions-changeClientCategory(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[_client].Owner == _client,not a client)

IRs:
REF_1499(Base.Client) -> clients[_client]
REF_1500(address) -> REF_1499.Owner
TMP_498(bool) = REF_1500 == _client
TMP_499(None) = SOLIDITY_CALL require(bool,string)(TMP_498,not a client)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[_client].Category = _category

IRs:
REF_1501(Base.Client) -> clients[_client]
REF_1502(uint256) -> REF_1501.Category
REF_1502(uint256) (->clients) := _category(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
IsOwner()

IRs:
MODIFIER_CALL, GobernanceFunctions.IsOwner()()"];
3->1;
}
// Function: 731.sol-GobernanceFunctions-countPortfolios(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_result = banks[_bankAddress].Portfolios.length

IRs:
REF_1179(Base.Bank) -> banks[_bankAddress]
REF_1180(Base.Portfolio[]) -> REF_1179.Portfolios
REF_1181 -> LENGTH REF_1180
_result(uint256) := REF_1181(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 731.sol-GobernanceFunctions-createPortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == loans[_idLoan].Owner)

IRs:
REF_998(Base.Loan) -> loans[_idLoan]
REF_999(address) -> REF_998.Owner
TMP_333(bool) = msg.sender == REF_999
TMP_334(None) = SOLIDITY_CALL require(bool)(TMP_333)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[msg.sender].Portfolios.push(_portfolio)

IRs:
REF_1000(Base.Bank) -> banks[msg.sender]
REF_1001(Base.Portfolio[]) -> REF_1000.Portfolios
REF_1003 -> LENGTH REF_1001
TMP_336(uint256) := REF_1003(uint256)
TMP_337(uint256) = TMP_336 + 1
REF_1003(uint256) (->banks) := TMP_337(uint256)
REF_1004(Base.Portfolio) -> REF_1001[TMP_336]
REF_1004(Base.Portfolio) (->banks) := _portfolio(Base.Portfolio)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length - 1].idLoans.push(_idLoan)

IRs:
REF_1005(Base.Bank) -> banks[msg.sender]
REF_1006(Base.Portfolio[]) -> REF_1005.Portfolios
REF_1007(Base.Bank) -> banks[msg.sender]
REF_1008(Base.Portfolio[]) -> REF_1007.Portfolios
REF_1009 -> LENGTH REF_1008
TMP_338(uint256) = REF_1009 - 1
REF_1010(Base.Portfolio) -> REF_1006[TMP_338]
REF_1011(uint256[]) -> REF_1010.idLoans
REF_1013 -> LENGTH REF_1011
TMP_340(uint256) := REF_1013(uint256)
TMP_341(uint256) = TMP_340 + 1
REF_1013(uint256) (->banks) := TMP_341(uint256)
REF_1014(uint256) -> REF_1011[TMP_340]
REF_1014(uint256) (->banks) := _idLoan(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length - 1].Owner = msg.sender

IRs:
REF_1015(Base.Bank) -> banks[msg.sender]
REF_1016(Base.Portfolio[]) -> REF_1015.Portfolios
REF_1017(Base.Bank) -> banks[msg.sender]
REF_1018(Base.Portfolio[]) -> REF_1017.Portfolios
REF_1019 -> LENGTH REF_1018
TMP_342(uint256) = REF_1019 - 1
REF_1020(Base.Portfolio) -> REF_1016[TMP_342]
REF_1021(address) -> REF_1020.Owner
REF_1021(address) (->banks) := msg.sender(address)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
banks[msg.sender].Portfolios.length - 1

IRs:
REF_1022(Base.Bank) -> banks[msg.sender]
REF_1023(Base.Portfolio[]) -> REF_1022.Portfolios
REF_1024 -> LENGTH REF_1023
TMP_343(uint256) = REF_1024 - 1
RETURN TMP_343"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
7->1;
}
// Function: 731.sol-GobernanceFunctions-deletePortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_PortfolioLength = banks[msg.sender].Portfolios.length

IRs:
REF_1025(Base.Bank) -> banks[msg.sender]
REF_1026(Base.Portfolio[]) -> REF_1025.Portfolios
REF_1027 -> LENGTH REF_1026
_PortfolioLength(uint256) := REF_1027(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio] = banks[msg.sender].Portfolios[_PortfolioLength - 1]

IRs:
REF_1028(Base.Bank) -> banks[msg.sender]
REF_1029(Base.Portfolio[]) -> REF_1028.Portfolios
REF_1030(Base.Portfolio) -> REF_1029[_indexPortfolio]
REF_1031(Base.Bank) -> banks[msg.sender]
REF_1032(Base.Portfolio[]) -> REF_1031.Portfolios
TMP_345(uint256) = _PortfolioLength - 1
REF_1033(Base.Portfolio) -> REF_1032[TMP_345]
REF_1030(Base.Portfolio) (->banks) := REF_1033(Base.Portfolio)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete banks[msg.sender].Portfolios[_PortfolioLength - 1]

IRs:
REF_1034(Base.Bank) -> banks[msg.sender]
REF_1035(Base.Portfolio[]) -> REF_1034.Portfolios
TMP_346(uint256) = _PortfolioLength - 1
REF_1036(Base.Portfolio) -> REF_1035[TMP_346]
REF_1035 = delete REF_1036 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Portfolios.length --

IRs:
REF_1037(Base.Bank) -> banks[msg.sender]
REF_1038(Base.Portfolio[]) -> REF_1037.Portfolios
REF_1039 -> LENGTH REF_1038
TMP_347(uint256) := REF_1039(uint256)
REF_1039(-> banks) = REF_1039 - 1"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
5->1;
}
// Function: 731.sol-GobernanceFunctions-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(false,Should not go through this point)

IRs:
TMP_481(None) = SOLIDITY_CALL require(bool,string)(False,Should not go through this point)"];
}
// Function: 731.sol-GobernanceFunctions-findOutInterestByBank(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value

IRs:
REF_1383(Base.Bank) -> banks[msg.sender]
REF_1384(mapping(uint256 => Base.strCateg)) -> REF_1383.Category
REF_1385(Base.strCateg) -> REF_1384[_category]
REF_1386(mapping(uint256 => Base.strAmount)) -> REF_1385.Amount
REF_1387(Base.strAmount) -> REF_1386[_amount]
REF_1388(mapping(uint256 => Base.strInsta)) -> REF_1387.Installment
REF_1389(Base.strInsta) -> REF_1388[_installment]
REF_1390(uint256) -> REF_1389.value
_value(uint256) := REF_1390(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable

IRs:
REF_1391(Base.Bank) -> banks[msg.sender]
REF_1392(mapping(uint256 => Base.strCateg)) -> REF_1391.Category
REF_1393(Base.strCateg) -> REF_1392[_category]
REF_1394(mapping(uint256 => Base.strAmount)) -> REF_1393.Amount
REF_1395(Base.strAmount) -> REF_1394[_amount]
REF_1396(mapping(uint256 => Base.strInsta)) -> REF_1395.Installment
REF_1397(Base.strInsta) -> REF_1396[_installment]
REF_1398(bool) -> REF_1397.enable
_enable(bool) := REF_1398(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-GobernanceFunctions-findOutInterestByClientCategory(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value

IRs:
REF_1437(Base.Bank) -> banks[_bankAddress]
REF_1438(mapping(uint256 => Base.strCateg)) -> REF_1437.Category
REF_1439(Base.Client) -> clients[msg.sender]
REF_1440(uint256) -> REF_1439.Category
REF_1441(Base.strCateg) -> REF_1438[REF_1440]
REF_1442(mapping(uint256 => Base.strAmount)) -> REF_1441.Amount
REF_1443(Base.strAmount) -> REF_1442[_amount]
REF_1444(mapping(uint256 => Base.strInsta)) -> REF_1443.Installment
REF_1445(Base.strInsta) -> REF_1444[_installment]
REF_1446(uint256) -> REF_1445.value
_value(uint256) := REF_1446(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable

IRs:
REF_1447(Base.Bank) -> banks[_bankAddress]
REF_1448(mapping(uint256 => Base.strCateg)) -> REF_1447.Category
REF_1449(Base.Client) -> clients[msg.sender]
REF_1450(uint256) -> REF_1449.Category
REF_1451(Base.strCateg) -> REF_1448[REF_1450]
REF_1452(mapping(uint256 => Base.strAmount)) -> REF_1451.Amount
REF_1453(Base.strAmount) -> REF_1452[_amount]
REF_1454(mapping(uint256 => Base.strInsta)) -> REF_1453.Installment
REF_1455(Base.strInsta) -> REF_1454[_installment]
REF_1456(bool) -> REF_1455.enable
_enable(bool) := REF_1456(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-GobernanceFunctions-getClientBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = clients[msg.sender].Tokens

IRs:
REF_1464(Base.Client) -> clients[msg.sender]
REF_1465(uint256) -> REF_1464.Tokens
_value(uint256) := REF_1465(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_value

IRs:
RETURN _value"];
}
// Function: 731.sol-GobernanceFunctions-getClientCategory()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].Category

IRs:
REF_1472(Base.Client) -> clients[msg.sender]
REF_1473(uint256) -> REF_1472.Category
RETURN REF_1473"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-GobernanceFunctions-getLoanIDbyClient(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID[_indexLoan]

IRs:
REF_1469(Base.Client) -> clients[msg.sender]
REF_1470(uint256[]) -> REF_1469.LoansID
REF_1471(uint256) -> REF_1470[_indexLoan]
RETURN REF_1471"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-GobernanceFunctions-getLoansLengthByClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID.length

IRs:
REF_1466(Base.Client) -> clients[msg.sender]
REF_1467(uint256[]) -> REF_1466.LoansID
REF_1468 -> LENGTH REF_1467
RETURN REF_1468"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-GobernanceFunctions-getPortfolioInfo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Portfolios[_indexPortfolio].Owner == _bankAddress,not the owner of that portfolio)

IRs:
REF_1097(Base.Bank) -> banks[_bankAddress]
REF_1098(Base.Portfolio[]) -> REF_1097.Portfolios
REF_1099(Base.Portfolio) -> REF_1098[_indexPortfolio]
REF_1100(address) -> REF_1099.Owner
TMP_370(bool) = REF_1100 == _bankAddress
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,not the owner of that portfolio)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_LoansLength = banks[_bankAddress].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1101(Base.Bank) -> banks[_bankAddress]
REF_1102(Base.Portfolio[]) -> REF_1101.Portfolios
REF_1103(Base.Portfolio) -> REF_1102[_indexPortfolio]
REF_1104(uint256[]) -> REF_1103.idLoans
REF_1105 -> LENGTH REF_1104
_LoansLength(uint256) := REF_1105(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_forSale = banks[_bankAddress].Portfolios[_indexPortfolio].forSale

IRs:
REF_1106(Base.Bank) -> banks[_bankAddress]
REF_1107(Base.Portfolio[]) -> REF_1106.Portfolios
REF_1108(Base.Portfolio) -> REF_1107[_indexPortfolio]
REF_1109(uint256) -> REF_1108.forSale
_forSale(uint256) := REF_1109(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_owner = banks[_bankAddress].Portfolios[_indexPortfolio].Owner

IRs:
REF_1110(Base.Bank) -> banks[_bankAddress]
REF_1111(Base.Portfolio[]) -> REF_1110.Portfolios
REF_1112(Base.Portfolio) -> REF_1111[_indexPortfolio]
REF_1113(address) -> REF_1112.Owner
_owner(address) := REF_1113(address)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
(_LoansLength,_forSale,_owner)

IRs:
RETURN _LoansLength,_forSale,_owner"];
}
// Function: 731.sol-GobernanceFunctions-isBank()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_1507(Base.Bank) -> banks[msg.sender]
REF_1508(address) -> REF_1507.Owner
TMP_503(bool) = REF_1508 == msg.sender
TMP_504(None) = SOLIDITY_CALL require(bool,string)(TMP_503,you are not a bank)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-GobernanceFunctions-isClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Owner == msg.sender,not a client)

IRs:
REF_1513(Base.Client) -> clients[msg.sender]
REF_1514(address) -> REF_1513.Owner
TMP_509(bool) = REF_1514 == msg.sender
TMP_510(None) = SOLIDITY_CALL require(bool,string)(TMP_509,not a client)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-GobernanceFunctions-isLoanOwner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_1509(Base.Bank) -> banks[msg.sender]
REF_1510(address) -> REF_1509.Owner
TMP_505(bool) = REF_1510 == msg.sender
TMP_506(None) = SOLIDITY_CALL require(bool,string)(TMP_505,you are not a bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(loans[_id].Owner == msg.sender,not owner of loan)

IRs:
REF_1511(Base.Loan) -> loans[_id]
REF_1512(address) -> REF_1511.Owner
TMP_507(bool) = REF_1512 == msg.sender
TMP_508(None) = SOLIDITY_CALL require(bool,string)(TMP_507,not owner of loan)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 731.sol-GobernanceFunctions-isOwnerPortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Portfolios[_indexPortfolio].Owner == msg.sender,not the owner of portfolio)

IRs:
REF_1503(Base.Bank) -> banks[msg.sender]
REF_1504(Base.Portfolio[]) -> REF_1503.Portfolios
REF_1505(Base.Portfolio) -> REF_1504[_indexPortfolio]
REF_1506(address) -> REF_1505.Owner
TMP_501(bool) = REF_1506 == msg.sender
TMP_502(None) = SOLIDITY_CALL require(bool,string)(TMP_501,not the owner of portfolio)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-GobernanceFunctions-payOffClientDebt(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(loans[_loanId].Debt > 0)

IRs:
REF_1353(Base.Loan) -> loans[_loanId]
REF_1354(uint256) -> REF_1353.Debt
TMP_452(bool) = REF_1354 > 0
TMP_453(None) = SOLIDITY_CALL require(bool)(TMP_452)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_454(bool) = _value > 0
TMP_455(None) = SOLIDITY_CALL require(bool)(TMP_454)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(loans[_loanId].Debt >= _value)

IRs:
REF_1355(Base.Loan) -> loans[_loanId]
REF_1356(uint256) -> REF_1355.Debt
TMP_456(bool) = REF_1356 >= _value
TMP_457(None) = SOLIDITY_CALL require(bool)(TMP_456)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans[loans.length - 1].EndTime = now

IRs:
REF_1357 -> LENGTH loans
TMP_458(uint256) = REF_1357 - 1
REF_1358(Base.Loan) -> loans[TMP_458]
REF_1359(uint256) -> REF_1358.EndTime
REF_1359(uint256) (->loans) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[_loanId].Debt = loans[_loanId].Debt.sub(_value)

IRs:
REF_1360(Base.Loan) -> loans[_loanId]
REF_1361(uint256) -> REF_1360.Debt
REF_1362(Base.Loan) -> loans[_loanId]
REF_1363(uint256) -> REF_1362.Debt
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1363', '_value'] 
REF_1361(uint256) (->loans) := TMP_459(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
6->1;
}
// Function: 731.sol-GobernanceFunctions-removeBankToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_1346(Base.Bank) -> banks[msg.sender]
REF_1347(uint256) -> REF_1346.Tokens
TMP_448(bool) = REF_1347 >= _value
TMP_449(None) = SOLIDITY_CALL require(bool,string)(TMP_448,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_1348(Base.Bank) -> banks[msg.sender]
REF_1349(uint256) -> REF_1348.Tokens
REF_1350(Base.Bank) -> banks[msg.sender]
REF_1351(uint256) -> REF_1350.Tokens
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1351', '_value'] 
REF_1349(uint256) (->banks) := TMP_450(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-GobernanceFunctions-removeClientToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_1457(Base.Client) -> clients[msg.sender]
REF_1458(uint256) -> REF_1457.Tokens
TMP_473(bool) = REF_1458 >= _value
TMP_474(None) = SOLIDITY_CALL require(bool,string)(TMP_473,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[msg.sender].Tokens = clients[msg.sender].Tokens.sub(_value)

IRs:
REF_1459(Base.Client) -> clients[msg.sender]
REF_1460(uint256) -> REF_1459.Tokens
REF_1461(Base.Client) -> clients[msg.sender]
REF_1462(uint256) -> REF_1461.Tokens
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1462', '_value'] 
REF_1460(uint256) (->clients) := TMP_475(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
}
// Function: 731.sol-GobernanceFunctions-removeLoanFromPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
Loanslength = banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_1057(Base.Bank) -> banks[msg.sender]
REF_1058(Base.Portfolio[]) -> REF_1057.Portfolios
REF_1059(Base.Portfolio) -> REF_1058[_indexPortfolio]
REF_1060(uint256[]) -> REF_1059.idLoans
REF_1061 -> LENGTH REF_1060
Loanslength(uint256) := REF_1061(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_loanIndex = Loanslength

IRs:
_loanIndex(uint256) := Loanslength(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5
"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < Loanslength

IRs:
TMP_357(bool) = i < Loanslength
CONDITION TMP_357"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
_idLoan == banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i]

IRs:
REF_1062(Base.Bank) -> banks[msg.sender]
REF_1063(Base.Portfolio[]) -> REF_1062.Portfolios
REF_1064(Base.Portfolio) -> REF_1063[_indexPortfolio]
REF_1065(uint256[]) -> REF_1064.idLoans
REF_1066(uint256) -> REF_1065[i]
TMP_358(bool) = _idLoan == REF_1066
CONDITION TMP_358"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loanIndex = i

IRs:
_loanIndex(uint256) := i(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i = Loanslength

IRs:
i(uint256) := Loanslength(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_359(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(_loanIndex < Loanslength,el Loan no se encuentra en el Portfolio)

IRs:
TMP_360(bool) = _loanIndex < Loanslength
TMP_361(None) = SOLIDITY_CALL require(bool,string)(TMP_360,el Loan no se encuentra en el Portfolio)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_loanIndex != banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length - 1

IRs:
REF_1067(Base.Bank) -> banks[msg.sender]
REF_1068(Base.Portfolio[]) -> REF_1067.Portfolios
REF_1069(Base.Portfolio) -> REF_1068[_indexPortfolio]
REF_1070(uint256[]) -> REF_1069.idLoans
REF_1071 -> LENGTH REF_1070
TMP_362(uint256) = REF_1071 - 1
TMP_363(bool) = _loanIndex != TMP_362
CONDITION TMP_363"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_loanIndex] = banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength - 1]

IRs:
REF_1072(Base.Bank) -> banks[msg.sender]
REF_1073(Base.Portfolio[]) -> REF_1072.Portfolios
REF_1074(Base.Portfolio) -> REF_1073[_indexPortfolio]
REF_1075(uint256[]) -> REF_1074.idLoans
REF_1076(uint256) -> REF_1075[_loanIndex]
REF_1077(Base.Bank) -> banks[msg.sender]
REF_1078(Base.Portfolio[]) -> REF_1077.Portfolios
REF_1079(Base.Portfolio) -> REF_1078[_indexPortfolio]
REF_1080(uint256[]) -> REF_1079.idLoans
TMP_364(uint256) = Loanslength - 1
REF_1081(uint256) -> REF_1080[TMP_364]
REF_1076(uint256) (->banks) := REF_1081(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
delete banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength - 1]

IRs:
REF_1082(Base.Bank) -> banks[msg.sender]
REF_1083(Base.Portfolio[]) -> REF_1082.Portfolios
REF_1084(Base.Portfolio) -> REF_1083[_indexPortfolio]
REF_1085(uint256[]) -> REF_1084.idLoans
TMP_365(uint256) = Loanslength - 1
REF_1086(uint256) -> REF_1085[TMP_365]
REF_1085 = delete REF_1086 "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length --

IRs:
REF_1087(Base.Bank) -> banks[msg.sender]
REF_1088(Base.Portfolio[]) -> REF_1087.Portfolios
REF_1089(Base.Portfolio) -> REF_1088[_indexPortfolio]
REF_1090(uint256[]) -> REF_1089.idLoans
REF_1091 -> LENGTH REF_1090
TMP_366(uint256) := REF_1091(uint256)
REF_1091(-> banks) = REF_1091 - 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length == 0

IRs:
REF_1092(Base.Bank) -> banks[msg.sender]
REF_1093(Base.Portfolio[]) -> REF_1092.Portfolios
REF_1094(Base.Portfolio) -> REF_1093[_indexPortfolio]
REF_1095(uint256[]) -> REF_1094.idLoans
REF_1096 -> LENGTH REF_1095
TMP_367(bool) = REF_1096 == 0
CONDITION TMP_367"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
deletePortfolio(_indexPortfolio)

IRs:
INTERNAL_CALL, PortfolioFunctions.deletePortfolio(uint256)(_indexPortfolio)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_result = true

IRs:
_result(bool) := True(bool)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
22->1;
23[label="Node Type: RETURN 23

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 731.sol-GobernanceFunctions-sellPorftolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length > 0)

IRs:
REF_1114(Base.Bank) -> banks[msg.sender]
REF_1115(Base.Portfolio[]) -> REF_1114.Portfolios
REF_1116(Base.Portfolio) -> REF_1115[_indexPortfolio]
REF_1117(uint256[]) -> REF_1116.idLoans
REF_1118 -> LENGTH REF_1117
TMP_373(bool) = REF_1118 > 0
TMP_374(None) = SOLIDITY_CALL require(bool)(TMP_373)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].forSale = _value

IRs:
REF_1119(Base.Bank) -> banks[msg.sender]
REF_1120(Base.Portfolio[]) -> REF_1119.Portfolios
REF_1121(Base.Portfolio) -> REF_1120[_indexPortfolio]
REF_1122(uint256) -> REF_1121.forSale
REF_1122(uint256) (->banks) := _value(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
3->1;
}
// Function: 731.sol-LoansFunctions-BuyLoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].ForSale > 0,not for sale)

IRs:
REF_347(Base.Loan) -> loans[_loanId]
REF_348(uint256) -> REF_347.ForSale
TMP_117(bool) = REF_348 > 0
TMP_118(None) = SOLIDITY_CALL require(bool,string)(TMP_117,not for sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,you dont have money)

IRs:
REF_349(Base.Bank) -> banks[msg.sender]
REF_350(uint256) -> REF_349.Tokens
TMP_119(bool) = REF_350 >= _value
TMP_120(None) = SOLIDITY_CALL require(bool,string)(TMP_119,you dont have money)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SwitchLoanOwner(_owner,_loanId)

IRs:
INTERNAL_CALL, LoansFunctions.SwitchLoanOwner(address,uint256)(_owner,_loanId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_351(Base.Bank) -> banks[msg.sender]
REF_352(uint256) -> REF_351.Tokens
REF_353(Base.Bank) -> banks[msg.sender]
REF_354(uint256) -> REF_353.Tokens
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_354', '_value'] 
REF_352(uint256) (->banks) := TMP_122(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[_owner].Tokens = banks[_owner].Tokens.add(_value)

IRs:
REF_356(Base.Bank) -> banks[_owner]
REF_357(uint256) -> REF_356.Tokens
REF_358(Base.Bank) -> banks[_owner]
REF_359(uint256) -> REF_358.Tokens
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_359', '_value'] 
REF_357(uint256) (->banks) := TMP_123(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
6->1;
}
// Function: 731.sol-LoansFunctions-ChangeInterest(uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value = _value

IRs:
REF_236(Base.Bank) -> banks[msg.sender]
REF_237(mapping(uint256 => Base.strCateg)) -> REF_236.Category
REF_238(Base.strCateg) -> REF_237[_category]
REF_239(mapping(uint256 => Base.strAmount)) -> REF_238.Amount
REF_240(Base.strAmount) -> REF_239[_amount]
REF_241(mapping(uint256 => Base.strInsta)) -> REF_240.Installment
REF_242(Base.strInsta) -> REF_241[_installment]
REF_243(uint256) -> REF_242.value
REF_243(uint256) (->banks) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable = _enable

IRs:
REF_244(Base.Bank) -> banks[msg.sender]
REF_245(mapping(uint256 => Base.strCateg)) -> REF_244.Category
REF_246(Base.strCateg) -> REF_245[_category]
REF_247(mapping(uint256 => Base.strAmount)) -> REF_246.Amount
REF_248(Base.strAmount) -> REF_247[_amount]
REF_249(mapping(uint256 => Base.strInsta)) -> REF_248.Installment
REF_250(Base.strInsta) -> REF_249[_installment]
REF_251(bool) -> REF_250.enable
REF_251(bool) (->banks) := _enable(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-LoansFunctions-GetBankBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Tokens

IRs:
REF_252(Base.Bank) -> banks[msg.sender]
REF_253(uint256) -> REF_252.Tokens
RETURN REF_253"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-LoansFunctions-GetClientCategory(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[_client].Category

IRs:
REF_215(Base.Client) -> clients[_client]
REF_216(uint256) -> REF_215.Category
RETURN REF_216"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-LoansFunctions-GetLoanInfo(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_indexLoan < banks[msg.sender].LoanPending.length,null value)

IRs:
REF_486(Base.Bank) -> banks[msg.sender]
REF_487(Base.Loan[]) -> REF_486.LoanPending
REF_488 -> LENGTH REF_487
TMP_164(bool) = _indexLoan < REF_488
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,null value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan = banks[msg.sender].LoanPending[_indexLoan]

IRs:
REF_489(Base.Bank) -> banks[msg.sender]
REF_490(Base.Loan[]) -> REF_489.LoanPending
REF_491(Base.Loan) -> REF_490[_indexLoan]
_loan(Base.Loan) := REF_491(Base.Loan)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan = loans[_indexLoan]

IRs:
REF_492(Base.Loan) -> loans[_indexLoan]
_loan(Base.Loan) := REF_492(Base.Loan)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_debt = _loan.Debt

IRs:
REF_493(uint256) -> _loan.Debt
_debt(uint256) := REF_493(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_client = _loan.Client

IRs:
REF_494(address) -> _loan.Client
_client(address) := REF_494(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_installment = _loan.Installment

IRs:
REF_495(uint256) -> _loan.Installment
_installment(uint256) := REF_495(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_category = _loan.Category

IRs:
REF_496(uint256) -> _loan.Category
_category(uint256) := REF_496(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_amount = _loan.Amount

IRs:
REF_497(uint256) -> _loan.Amount
_amount(uint256) := REF_497(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_owner = _loan.Owner

IRs:
REF_498(address) -> _loan.Owner
_owner(address) := REF_498(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_forSale = _loan.ForSale

IRs:
REF_499(uint256) -> _loan.ForSale
_forSale(uint256) := REF_499(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_StartTime = _loan.StartTime

IRs:
REF_500(uint256) -> _loan.StartTime
_StartTime(uint256) := REF_500(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_EndTime = _loan.EndTime

IRs:
REF_501(uint256) -> _loan.EndTime
_EndTime(uint256) := REF_501(uint256)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime)

IRs:
RETURN _debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime"];
}
// Function: 731.sol-LoansFunctions-GetLoansLenght(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
banks[msg.sender].LoanPending.length

IRs:
REF_480(Base.Bank) -> banks[msg.sender]
REF_481(Base.Loan[]) -> REF_480.LoanPending
REF_482 -> LENGTH REF_481
RETURN REF_482"];
3[label="Node Type: RETURN 3

EXPRESSION:
banks[msg.sender].LoansID.length

IRs:
REF_483(Base.Bank) -> banks[msg.sender]
REF_484(uint256[]) -> REF_483.LoansID
REF_485 -> LENGTH REF_484
RETURN REF_485"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
5->1;
}
// Function: 731.sol-LoansFunctions-SellLoan(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
loans[_loanId].ForSale = _value

IRs:
REF_345(Base.Loan) -> loans[_loanId]
REF_346(uint256) -> REF_345.ForSale
REF_346(uint256) (->loans) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
2->1;
}
// Function: 731.sol-LoansFunctions-SwitchLoanOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].Debt > 0,at least one of the loans is already paid)

IRs:
REF_361(Base.Loan) -> loans[_loanId]
REF_362(uint256) -> REF_361.Debt
TMP_125(bool) = REF_362 > 0
TMP_126(None) = SOLIDITY_CALL require(bool,string)(TMP_125,at least one of the loans is already paid)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(loans[_loanId].Owner == _owner)

IRs:
REF_363(Base.Loan) -> loans[_loanId]
REF_364(address) -> REF_363.Owner
TMP_127(bool) = REF_364 == _owner
TMP_128(None) = SOLIDITY_CALL require(bool)(TMP_127)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: NEW VARIABLE 6
"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < banks[_owner].LoansID.length

IRs:
REF_365(Base.Bank) -> banks[_owner]
REF_366(uint256[]) -> REF_365.LoansID
REF_367 -> LENGTH REF_366
TMP_129(bool) = i < REF_367
CONDITION TMP_129"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
banks[_owner].LoansID[i] == _loanId

IRs:
REF_368(Base.Bank) -> banks[_owner]
REF_369(uint256[]) -> REF_368.LoansID
REF_370(uint256) -> REF_369[i]
TMP_130(bool) = REF_370 == _loanId
CONDITION TMP_130"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_indexLoan = i

IRs:
_indexLoan(uint256) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i = banks[_owner].LoansID.length.add(1)

IRs:
REF_371(Base.Bank) -> banks[_owner]
REF_372(uint256[]) -> REF_371.LoansID
REF_373 -> LENGTH REF_372
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_373', '1'] 
i(uint256) := TMP_131(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_132(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoansID.push(_loanId)

IRs:
REF_375(Base.Bank) -> banks[msg.sender]
REF_376(uint256[]) -> REF_375.LoansID
REF_378 -> LENGTH REF_376
TMP_134(uint256) := REF_378(uint256)
TMP_135(uint256) = TMP_134 + 1
REF_378(uint256) (->banks) := TMP_135(uint256)
REF_379(uint256) -> REF_376[TMP_134]
REF_379(uint256) (->banks) := _loanId(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_indexLoan != banks[_owner].LoansID.length - 1

IRs:
REF_380(Base.Bank) -> banks[_owner]
REF_381(uint256[]) -> REF_380.LoansID
REF_382 -> LENGTH REF_381
TMP_136(uint256) = REF_382 - 1
TMP_137(bool) = _indexLoan != TMP_136
CONDITION TMP_137"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
banks[_owner].LoansID[_indexLoan] = banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_383(Base.Bank) -> banks[_owner]
REF_384(uint256[]) -> REF_383.LoansID
REF_385(uint256) -> REF_384[_indexLoan]
REF_386(Base.Bank) -> banks[_owner]
REF_387(uint256[]) -> REF_386.LoansID
REF_388(Base.Bank) -> banks[_owner]
REF_389(uint256[]) -> REF_388.LoansID
REF_390 -> LENGTH REF_389
TMP_138(uint256) = REF_390 - 1
REF_391(uint256) -> REF_387[TMP_138]
REF_385(uint256) (->banks) := REF_391(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
delete banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_392(Base.Bank) -> banks[_owner]
REF_393(uint256[]) -> REF_392.LoansID
REF_394(Base.Bank) -> banks[_owner]
REF_395(uint256[]) -> REF_394.LoansID
REF_396 -> LENGTH REF_395
TMP_139(uint256) = REF_396 - 1
REF_397(uint256) -> REF_393[TMP_139]
REF_393 = delete REF_397 "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
banks[_owner].LoansID.length --

IRs:
REF_398(Base.Bank) -> banks[_owner]
REF_399(uint256[]) -> REF_398.LoansID
REF_400 -> LENGTH REF_399
TMP_140(uint256) := REF_400(uint256)
REF_400(-> banks) = REF_400 - 1"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
loans[_loanId].ForSale = 0

IRs:
REF_401(Base.Loan) -> loans[_loanId]
REF_402(uint256) -> REF_401.ForSale
REF_402(uint256) (->loans) := 0(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
loans[_loanId].Owner = msg.sender

IRs:
REF_403(Base.Loan) -> loans[_loanId]
REF_404(address) -> REF_403.Owner
REF_404(address) (->loans) := msg.sender(address)"];
}
// Function: 731.sol-LoansFunctions-aproveLoan(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].LoanPending[_loanIndex].Owner == msg.sender,you are not the owner)

IRs:
REF_405(Base.Bank) -> banks[msg.sender]
REF_406(Base.Loan[]) -> REF_405.LoanPending
REF_407(Base.Loan) -> REF_406[_loanIndex]
REF_408(address) -> REF_407.Owner
TMP_141(bool) = REF_408 == msg.sender
TMP_142(None) = SOLIDITY_CALL require(bool,string)(TMP_141,you are not the owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= banks[msg.sender].LoanPending[_loanIndex].Amount,the bank does not have that amount of tokens)

IRs:
REF_409(Base.Bank) -> banks[msg.sender]
REF_410(uint256) -> REF_409.Tokens
REF_411(Base.Bank) -> banks[msg.sender]
REF_412(Base.Loan[]) -> REF_411.LoanPending
REF_413(Base.Loan) -> REF_412[_loanIndex]
REF_414(uint256) -> REF_413.Amount
TMP_143(bool) = REF_410 >= REF_414
TMP_144(None) = SOLIDITY_CALL require(bool,string)(TMP_143,the bank does not have that amount of tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex].Id = loans.length

IRs:
REF_415(Base.Bank) -> banks[msg.sender]
REF_416(Base.Loan[]) -> REF_415.LoanPending
REF_417(Base.Loan) -> REF_416[_loanIndex]
REF_418(uint256) -> REF_417.Id
REF_419 -> LENGTH loans
REF_418(uint256) (->banks) := REF_419(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans.push(banks[msg.sender].LoanPending[_loanIndex])

IRs:
REF_421(Base.Bank) -> banks[msg.sender]
REF_422(Base.Loan[]) -> REF_421.LoanPending
REF_423(Base.Loan) -> REF_422[_loanIndex]
REF_424 -> LENGTH loans
TMP_146(uint256) := REF_424(uint256)
TMP_147(uint256) = TMP_146 + 1
REF_424(uint256) (->loans) := TMP_147(uint256)
REF_425(Base.Loan) -> loans[TMP_146]
REF_425(Base.Loan) (->loans) := REF_423(Base.Loan)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[loans.length - 1].StartTime = now

IRs:
REF_426 -> LENGTH loans
TMP_148(uint256) = REF_426 - 1
REF_427(Base.Loan) -> loans[TMP_148]
REF_428(uint256) -> REF_427.StartTime
REF_428(uint256) (->loans) := now(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_client = banks[msg.sender].LoanPending[_loanIndex].Client

IRs:
REF_429(Base.Bank) -> banks[msg.sender]
REF_430(Base.Loan[]) -> REF_429.LoanPending
REF_431(Base.Loan) -> REF_430[_loanIndex]
REF_432(address) -> REF_431.Client
_client(address) := REF_432(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_amount = banks[msg.sender].LoanPending[_loanIndex].Amount

IRs:
REF_433(Base.Bank) -> banks[msg.sender]
REF_434(Base.Loan[]) -> REF_433.LoanPending
REF_435(Base.Loan) -> REF_434[_loanIndex]
REF_436(uint256) -> REF_435.Amount
_amount(uint256) := REF_436(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
banks[msg.sender].LoansID.push(loans.length - 1)

IRs:
REF_437(Base.Bank) -> banks[msg.sender]
REF_438(uint256[]) -> REF_437.LoansID
REF_440 -> LENGTH loans
TMP_149(uint256) = REF_440 - 1
REF_441 -> LENGTH REF_438
TMP_151(uint256) := REF_441(uint256)
TMP_152(uint256) = TMP_151 + 1
REF_441(uint256) (->banks) := TMP_152(uint256)
REF_442(uint256) -> REF_438[TMP_151]
REF_442(uint256) (->banks) := TMP_149(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
clients[_client].LoansID.push(loans.length - 1)

IRs:
REF_443(Base.Client) -> clients[_client]
REF_444(uint256[]) -> REF_443.LoansID
REF_446 -> LENGTH loans
TMP_153(uint256) = REF_446 - 1
REF_447 -> LENGTH REF_444
TMP_155(uint256) := REF_447(uint256)
TMP_156(uint256) = TMP_155 + 1
REF_447(uint256) (->clients) := TMP_156(uint256)
REF_448(uint256) -> REF_444[TMP_155]
REF_448(uint256) (->clients) := TMP_153(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
clients[_client].Tokens = clients[_client].Tokens.add(_amount)

IRs:
REF_449(Base.Client) -> clients[_client]
REF_450(uint256) -> REF_449.Tokens
REF_451(Base.Client) -> clients[_client]
REF_452(uint256) -> REF_451.Tokens
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_452', '_amount'] 
REF_450(uint256) (->clients) := TMP_157(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_amount)

IRs:
REF_454(Base.Bank) -> banks[msg.sender]
REF_455(uint256) -> REF_454.Tokens
REF_456(Base.Bank) -> banks[msg.sender]
REF_457(uint256) -> REF_456.Tokens
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_457', '_amount'] 
REF_455(uint256) (->banks) := TMP_158(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
banks[msg.sender].LoanPending.length != 1

IRs:
REF_459(Base.Bank) -> banks[msg.sender]
REF_460(Base.Loan[]) -> REF_459.LoanPending
REF_461 -> LENGTH REF_460
TMP_159(bool) = REF_461 != 1
CONDITION TMP_159"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex] = banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_462(Base.Bank) -> banks[msg.sender]
REF_463(Base.Loan[]) -> REF_462.LoanPending
REF_464(Base.Loan) -> REF_463[_loanIndex]
REF_465(Base.Bank) -> banks[msg.sender]
REF_466(Base.Loan[]) -> REF_465.LoanPending
REF_467(Base.Bank) -> banks[msg.sender]
REF_468(Base.Loan[]) -> REF_467.LoanPending
REF_469 -> LENGTH REF_468
TMP_160(uint256) = REF_469 - 1
REF_470(Base.Loan) -> REF_466[TMP_160]
REF_464(Base.Loan) (->banks) := REF_470(Base.Loan)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
delete banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_471(Base.Bank) -> banks[msg.sender]
REF_472(Base.Loan[]) -> REF_471.LoanPending
REF_473(Base.Bank) -> banks[msg.sender]
REF_474(Base.Loan[]) -> REF_473.LoanPending
REF_475 -> LENGTH REF_474
TMP_161(uint256) = REF_475 - 1
REF_476(Base.Loan) -> REF_472[TMP_161]
REF_472 = delete REF_476 "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
banks[msg.sender].LoanPending.length --

IRs:
REF_477(Base.Bank) -> banks[msg.sender]
REF_478(Base.Loan[]) -> REF_477.LoanPending
REF_479 -> LENGTH REF_478
TMP_162(uint256) := REF_479(uint256)
REF_479(-> banks) = REF_479 - 1"];
}
// Function: 731.sol-LoansFunctions-askForALoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Owner == _bankAddress,not a valid bank)

IRs:
REF_270(Base.Bank) -> banks[_bankAddress]
REF_271(address) -> REF_270.Owner
TMP_98(bool) = REF_271 == _bankAddress
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,not a valid bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable,you not apply for that loan)

IRs:
REF_272(Base.Bank) -> banks[_bankAddress]
REF_273(mapping(uint256 => Base.strCateg)) -> REF_272.Category
REF_274(Base.Client) -> clients[msg.sender]
REF_275(uint256) -> REF_274.Category
REF_276(Base.strCateg) -> REF_273[REF_275]
REF_277(mapping(uint256 => Base.strAmount)) -> REF_276.Amount
REF_278(Base.strAmount) -> REF_277[_amount]
REF_279(mapping(uint256 => Base.strInsta)) -> REF_278.Installment
REF_280(Base.strInsta) -> REF_279[_installment]
REF_281(bool) -> REF_280.enable
TMP_100(None) = SOLIDITY_CALL require(bool,string)(REF_281,you not apply for that loan)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan.Debt = _amount

IRs:
REF_282(uint256) -> _loan.Debt
REF_282(uint256) (->_loan) := _amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan.Debt = _loan.Debt.add(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value)

IRs:
REF_283(uint256) -> _loan.Debt
REF_284(uint256) -> _loan.Debt
REF_286(Base.Bank) -> banks[_bankAddress]
REF_287(mapping(uint256 => Base.strCateg)) -> REF_286.Category
REF_288(Base.Client) -> clients[msg.sender]
REF_289(uint256) -> REF_288.Category
REF_290(Base.strCateg) -> REF_287[REF_289]
REF_291(mapping(uint256 => Base.strAmount)) -> REF_290.Amount
REF_292(Base.strAmount) -> REF_291[_amount]
REF_293(mapping(uint256 => Base.strInsta)) -> REF_292.Installment
REF_294(Base.strInsta) -> REF_293[_installment]
REF_295(uint256) -> REF_294.value
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_284', 'REF_295'] 
REF_283(uint256) (->_loan) := TMP_101(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_loan.Client = msg.sender

IRs:
REF_296(address) -> _loan.Client
REF_296(address) (->_loan) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_loan.Owner = _bankAddress

IRs:
REF_297(address) -> _loan.Owner
REF_297(address) (->_loan) := _bankAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loan.Installment = _installment

IRs:
REF_298(uint256) -> _loan.Installment
REF_298(uint256) (->_loan) := _installment(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_loan.Category = clients[msg.sender].Category

IRs:
REF_299(uint256) -> _loan.Category
REF_300(Base.Client) -> clients[msg.sender]
REF_301(uint256) -> REF_300.Category
REF_299(uint256) (->_loan) := REF_301(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_loan.Amount = _amount

IRs:
REF_302(uint256) -> _loan.Amount
REF_302(uint256) (->_loan) := _amount(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[_bankAddress].LoanPending.push(_loan)

IRs:
REF_303(Base.Bank) -> banks[_bankAddress]
REF_304(Base.Loan[]) -> REF_303.LoanPending
REF_306 -> LENGTH REF_304
TMP_103(uint256) := REF_306(uint256)
TMP_104(uint256) = TMP_103 + 1
REF_306(uint256) (->banks) := TMP_104(uint256)
REF_307(Base.Loan) -> REF_304[TMP_103]
REF_307(Base.Loan) (->banks) := _loan(Base.Loan)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
12->1;
}
// Function: 731.sol-LoansFunctions-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(false,Should not go through this point)

IRs:
TMP_115(None) = SOLIDITY_CALL require(bool,string)(False,Should not go through this point)"];
}
// Function: 731.sol-LoansFunctions-findOutInterestByBank(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value

IRs:
REF_254(Base.Bank) -> banks[msg.sender]
REF_255(mapping(uint256 => Base.strCateg)) -> REF_254.Category
REF_256(Base.strCateg) -> REF_255[_category]
REF_257(mapping(uint256 => Base.strAmount)) -> REF_256.Amount
REF_258(Base.strAmount) -> REF_257[_amount]
REF_259(mapping(uint256 => Base.strInsta)) -> REF_258.Installment
REF_260(Base.strInsta) -> REF_259[_installment]
REF_261(uint256) -> REF_260.value
_value(uint256) := REF_261(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable

IRs:
REF_262(Base.Bank) -> banks[msg.sender]
REF_263(mapping(uint256 => Base.strCateg)) -> REF_262.Category
REF_264(Base.strCateg) -> REF_263[_category]
REF_265(mapping(uint256 => Base.strAmount)) -> REF_264.Amount
REF_266(Base.strAmount) -> REF_265[_amount]
REF_267(mapping(uint256 => Base.strInsta)) -> REF_266.Installment
REF_268(Base.strInsta) -> REF_267[_installment]
REF_269(bool) -> REF_268.enable
_enable(bool) := REF_269(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-LoansFunctions-findOutInterestByClientCategory(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value

IRs:
REF_308(Base.Bank) -> banks[_bankAddress]
REF_309(mapping(uint256 => Base.strCateg)) -> REF_308.Category
REF_310(Base.Client) -> clients[msg.sender]
REF_311(uint256) -> REF_310.Category
REF_312(Base.strCateg) -> REF_309[REF_311]
REF_313(mapping(uint256 => Base.strAmount)) -> REF_312.Amount
REF_314(Base.strAmount) -> REF_313[_amount]
REF_315(mapping(uint256 => Base.strInsta)) -> REF_314.Installment
REF_316(Base.strInsta) -> REF_315[_installment]
REF_317(uint256) -> REF_316.value
_value(uint256) := REF_317(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable

IRs:
REF_318(Base.Bank) -> banks[_bankAddress]
REF_319(mapping(uint256 => Base.strCateg)) -> REF_318.Category
REF_320(Base.Client) -> clients[msg.sender]
REF_321(uint256) -> REF_320.Category
REF_322(Base.strCateg) -> REF_319[REF_321]
REF_323(mapping(uint256 => Base.strAmount)) -> REF_322.Amount
REF_324(Base.strAmount) -> REF_323[_amount]
REF_325(mapping(uint256 => Base.strInsta)) -> REF_324.Installment
REF_326(Base.strInsta) -> REF_325[_installment]
REF_327(bool) -> REF_326.enable
_enable(bool) := REF_327(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-LoansFunctions-getClientBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = clients[msg.sender].Tokens

IRs:
REF_335(Base.Client) -> clients[msg.sender]
REF_336(uint256) -> REF_335.Tokens
_value(uint256) := REF_336(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_value

IRs:
RETURN _value"];
}
// Function: 731.sol-LoansFunctions-getClientCategory()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].Category

IRs:
REF_343(Base.Client) -> clients[msg.sender]
REF_344(uint256) -> REF_343.Category
RETURN REF_344"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-LoansFunctions-getLoanIDbyClient(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID[_indexLoan]

IRs:
REF_340(Base.Client) -> clients[msg.sender]
REF_341(uint256[]) -> REF_340.LoansID
REF_342(uint256) -> REF_341[_indexLoan]
RETURN REF_342"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-LoansFunctions-getLoansLengthByClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID.length

IRs:
REF_337(Base.Client) -> clients[msg.sender]
REF_338(uint256[]) -> REF_337.LoansID
REF_339 -> LENGTH REF_338
RETURN REF_339"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-LoansFunctions-isBank()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_502(Base.Bank) -> banks[msg.sender]
REF_503(address) -> REF_502.Owner
TMP_166(bool) = REF_503 == msg.sender
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,you are not a bank)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-LoansFunctions-isClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Owner == msg.sender,not a client)

IRs:
REF_508(Base.Client) -> clients[msg.sender]
REF_509(address) -> REF_508.Owner
TMP_172(bool) = REF_509 == msg.sender
TMP_173(None) = SOLIDITY_CALL require(bool,string)(TMP_172,not a client)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-LoansFunctions-isLoanOwner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_504(Base.Bank) -> banks[msg.sender]
REF_505(address) -> REF_504.Owner
TMP_168(bool) = REF_505 == msg.sender
TMP_169(None) = SOLIDITY_CALL require(bool,string)(TMP_168,you are not a bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(loans[_id].Owner == msg.sender,not owner of loan)

IRs:
REF_506(Base.Loan) -> loans[_id]
REF_507(address) -> REF_506.Owner
TMP_170(bool) = REF_507 == msg.sender
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,not owner of loan)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 731.sol-LoansFunctions-payOffClientDebt(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(loans[_loanId].Debt > 0)

IRs:
REF_224(Base.Loan) -> loans[_loanId]
REF_225(uint256) -> REF_224.Debt
TMP_86(bool) = REF_225 > 0
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_88(bool) = _value > 0
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(loans[_loanId].Debt >= _value)

IRs:
REF_226(Base.Loan) -> loans[_loanId]
REF_227(uint256) -> REF_226.Debt
TMP_90(bool) = REF_227 >= _value
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans[loans.length - 1].EndTime = now

IRs:
REF_228 -> LENGTH loans
TMP_92(uint256) = REF_228 - 1
REF_229(Base.Loan) -> loans[TMP_92]
REF_230(uint256) -> REF_229.EndTime
REF_230(uint256) (->loans) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[_loanId].Debt = loans[_loanId].Debt.sub(_value)

IRs:
REF_231(Base.Loan) -> loans[_loanId]
REF_232(uint256) -> REF_231.Debt
REF_233(Base.Loan) -> loans[_loanId]
REF_234(uint256) -> REF_233.Debt
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_234', '_value'] 
REF_232(uint256) (->loans) := TMP_93(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
6->1;
}
// Function: 731.sol-LoansFunctions-removeBankToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_217(Base.Bank) -> banks[msg.sender]
REF_218(uint256) -> REF_217.Tokens
TMP_82(bool) = REF_218 >= _value
TMP_83(None) = SOLIDITY_CALL require(bool,string)(TMP_82,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_219(Base.Bank) -> banks[msg.sender]
REF_220(uint256) -> REF_219.Tokens
REF_221(Base.Bank) -> banks[msg.sender]
REF_222(uint256) -> REF_221.Tokens
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_222', '_value'] 
REF_220(uint256) (->banks) := TMP_84(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-LoansFunctions-removeClientToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_328(Base.Client) -> clients[msg.sender]
REF_329(uint256) -> REF_328.Tokens
TMP_107(bool) = REF_329 >= _value
TMP_108(None) = SOLIDITY_CALL require(bool,string)(TMP_107,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[msg.sender].Tokens = clients[msg.sender].Tokens.sub(_value)

IRs:
REF_330(Base.Client) -> clients[msg.sender]
REF_331(uint256) -> REF_330.Tokens
REF_332(Base.Client) -> clients[msg.sender]
REF_333(uint256) -> REF_332.Tokens
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_333', '_value'] 
REF_331(uint256) (->clients) := TMP_109(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
}
// Function: 731.sol-PortfolioFunctions-BuyLoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].ForSale > 0,not for sale)

IRs:
REF_512(Base.Loan) -> loans[_loanId]
REF_513(uint256) -> REF_512.ForSale
TMP_175(bool) = REF_513 > 0
TMP_176(None) = SOLIDITY_CALL require(bool,string)(TMP_175,not for sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,you dont have money)

IRs:
REF_514(Base.Bank) -> banks[msg.sender]
REF_515(uint256) -> REF_514.Tokens
TMP_177(bool) = REF_515 >= _value
TMP_178(None) = SOLIDITY_CALL require(bool,string)(TMP_177,you dont have money)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SwitchLoanOwner(_owner,_loanId)

IRs:
INTERNAL_CALL, LoansFunctions.SwitchLoanOwner(address,uint256)(_owner,_loanId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_516(Base.Bank) -> banks[msg.sender]
REF_517(uint256) -> REF_516.Tokens
REF_518(Base.Bank) -> banks[msg.sender]
REF_519(uint256) -> REF_518.Tokens
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_519', '_value'] 
REF_517(uint256) (->banks) := TMP_180(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[_owner].Tokens = banks[_owner].Tokens.add(_value)

IRs:
REF_521(Base.Bank) -> banks[_owner]
REF_522(uint256) -> REF_521.Tokens
REF_523(Base.Bank) -> banks[_owner]
REF_524(uint256) -> REF_523.Tokens
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_524', '_value'] 
REF_522(uint256) (->banks) := TMP_181(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
6->1;
}
// Function: 731.sol-PortfolioFunctions-ChangeInterest(uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value = _value

IRs:
REF_688(Base.Bank) -> banks[msg.sender]
REF_689(mapping(uint256 => Base.strCateg)) -> REF_688.Category
REF_690(Base.strCateg) -> REF_689[_category]
REF_691(mapping(uint256 => Base.strAmount)) -> REF_690.Amount
REF_692(Base.strAmount) -> REF_691[_amount]
REF_693(mapping(uint256 => Base.strInsta)) -> REF_692.Installment
REF_694(Base.strInsta) -> REF_693[_installment]
REF_695(uint256) -> REF_694.value
REF_695(uint256) (->banks) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable = _enable

IRs:
REF_696(Base.Bank) -> banks[msg.sender]
REF_697(mapping(uint256 => Base.strCateg)) -> REF_696.Category
REF_698(Base.strCateg) -> REF_697[_category]
REF_699(mapping(uint256 => Base.strAmount)) -> REF_698.Amount
REF_700(Base.strAmount) -> REF_699[_amount]
REF_701(mapping(uint256 => Base.strInsta)) -> REF_700.Installment
REF_702(Base.strInsta) -> REF_701[_installment]
REF_703(bool) -> REF_702.enable
REF_703(bool) (->banks) := _enable(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-PortfolioFunctions-GetBankBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Tokens

IRs:
REF_704(Base.Bank) -> banks[msg.sender]
REF_705(uint256) -> REF_704.Tokens
RETURN REF_705"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-PortfolioFunctions-GetClientCategory(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[_client].Category

IRs:
REF_667(Base.Client) -> clients[_client]
REF_668(uint256) -> REF_667.Category
RETURN REF_668"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
}
// Function: 731.sol-PortfolioFunctions-GetLoanIdFromPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_indexLoan]

IRs:
REF_981(Base.Bank) -> banks[msg.sender]
REF_982(Base.Portfolio[]) -> REF_981.Portfolios
REF_983(Base.Portfolio) -> REF_982[_indexPortfolio]
REF_984(uint256[]) -> REF_983.idLoans
REF_985(uint256) -> REF_984[_indexLoan]
RETURN REF_985"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_ID

IRs:
RETURN _ID"];
}
// Function: 731.sol-PortfolioFunctions-GetLoanInfo(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_indexLoan < banks[msg.sender].LoanPending.length,null value)

IRs:
REF_651(Base.Bank) -> banks[msg.sender]
REF_652(Base.Loan[]) -> REF_651.LoanPending
REF_653 -> LENGTH REF_652
TMP_222(bool) = _indexLoan < REF_653
TMP_223(None) = SOLIDITY_CALL require(bool,string)(TMP_222,null value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan = banks[msg.sender].LoanPending[_indexLoan]

IRs:
REF_654(Base.Bank) -> banks[msg.sender]
REF_655(Base.Loan[]) -> REF_654.LoanPending
REF_656(Base.Loan) -> REF_655[_indexLoan]
_loan(Base.Loan) := REF_656(Base.Loan)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan = loans[_indexLoan]

IRs:
REF_657(Base.Loan) -> loans[_indexLoan]
_loan(Base.Loan) := REF_657(Base.Loan)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_debt = _loan.Debt

IRs:
REF_658(uint256) -> _loan.Debt
_debt(uint256) := REF_658(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_client = _loan.Client

IRs:
REF_659(address) -> _loan.Client
_client(address) := REF_659(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_installment = _loan.Installment

IRs:
REF_660(uint256) -> _loan.Installment
_installment(uint256) := REF_660(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_category = _loan.Category

IRs:
REF_661(uint256) -> _loan.Category
_category(uint256) := REF_661(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_amount = _loan.Amount

IRs:
REF_662(uint256) -> _loan.Amount
_amount(uint256) := REF_662(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_owner = _loan.Owner

IRs:
REF_663(address) -> _loan.Owner
_owner(address) := REF_663(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_forSale = _loan.ForSale

IRs:
REF_664(uint256) -> _loan.ForSale
_forSale(uint256) := REF_664(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_StartTime = _loan.StartTime

IRs:
REF_665(uint256) -> _loan.StartTime
_StartTime(uint256) := REF_665(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_EndTime = _loan.EndTime

IRs:
REF_666(uint256) -> _loan.EndTime
_EndTime(uint256) := REF_666(uint256)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime)

IRs:
RETURN _debt,_client,_installment,_category,_amount,_owner,_forSale,_StartTime,_EndTime"];
}
// Function: 731.sol-PortfolioFunctions-GetLoansLenght(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_pending

IRs:
CONDITION _pending"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
banks[msg.sender].LoanPending.length

IRs:
REF_645(Base.Bank) -> banks[msg.sender]
REF_646(Base.Loan[]) -> REF_645.LoanPending
REF_647 -> LENGTH REF_646
RETURN REF_647"];
3[label="Node Type: RETURN 3

EXPRESSION:
banks[msg.sender].LoansID.length

IRs:
REF_648(Base.Bank) -> banks[msg.sender]
REF_649(uint256[]) -> REF_648.LoansID
REF_650 -> LENGTH REF_649
RETURN REF_650"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
5->1;
}
// Function: 731.sol-PortfolioFunctions-SellLoan(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
loans[_loanId].ForSale = _value

IRs:
REF_510(Base.Loan) -> loans[_loanId]
REF_511(uint256) -> REF_510.ForSale
REF_511(uint256) (->loans) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
2->1;
}
// Function: 731.sol-PortfolioFunctions-SwitchLoanOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(loans[_loanId].Debt > 0,at least one of the loans is already paid)

IRs:
REF_526(Base.Loan) -> loans[_loanId]
REF_527(uint256) -> REF_526.Debt
TMP_183(bool) = REF_527 > 0
TMP_184(None) = SOLIDITY_CALL require(bool,string)(TMP_183,at least one of the loans is already paid)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(loans[_loanId].Owner == _owner)

IRs:
REF_528(Base.Loan) -> loans[_loanId]
REF_529(address) -> REF_528.Owner
TMP_185(bool) = REF_529 == _owner
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: NEW VARIABLE 6
"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < banks[_owner].LoansID.length

IRs:
REF_530(Base.Bank) -> banks[_owner]
REF_531(uint256[]) -> REF_530.LoansID
REF_532 -> LENGTH REF_531
TMP_187(bool) = i < REF_532
CONDITION TMP_187"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
banks[_owner].LoansID[i] == _loanId

IRs:
REF_533(Base.Bank) -> banks[_owner]
REF_534(uint256[]) -> REF_533.LoansID
REF_535(uint256) -> REF_534[i]
TMP_188(bool) = REF_535 == _loanId
CONDITION TMP_188"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_indexLoan = i

IRs:
_indexLoan(uint256) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i = banks[_owner].LoansID.length.add(1)

IRs:
REF_536(Base.Bank) -> banks[_owner]
REF_537(uint256[]) -> REF_536.LoansID
REF_538 -> LENGTH REF_537
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_538', '1'] 
i(uint256) := TMP_189(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_190(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoansID.push(_loanId)

IRs:
REF_540(Base.Bank) -> banks[msg.sender]
REF_541(uint256[]) -> REF_540.LoansID
REF_543 -> LENGTH REF_541
TMP_192(uint256) := REF_543(uint256)
TMP_193(uint256) = TMP_192 + 1
REF_543(uint256) (->banks) := TMP_193(uint256)
REF_544(uint256) -> REF_541[TMP_192]
REF_544(uint256) (->banks) := _loanId(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_indexLoan != banks[_owner].LoansID.length - 1

IRs:
REF_545(Base.Bank) -> banks[_owner]
REF_546(uint256[]) -> REF_545.LoansID
REF_547 -> LENGTH REF_546
TMP_194(uint256) = REF_547 - 1
TMP_195(bool) = _indexLoan != TMP_194
CONDITION TMP_195"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
banks[_owner].LoansID[_indexLoan] = banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_548(Base.Bank) -> banks[_owner]
REF_549(uint256[]) -> REF_548.LoansID
REF_550(uint256) -> REF_549[_indexLoan]
REF_551(Base.Bank) -> banks[_owner]
REF_552(uint256[]) -> REF_551.LoansID
REF_553(Base.Bank) -> banks[_owner]
REF_554(uint256[]) -> REF_553.LoansID
REF_555 -> LENGTH REF_554
TMP_196(uint256) = REF_555 - 1
REF_556(uint256) -> REF_552[TMP_196]
REF_550(uint256) (->banks) := REF_556(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
delete banks[_owner].LoansID[banks[_owner].LoansID.length - 1]

IRs:
REF_557(Base.Bank) -> banks[_owner]
REF_558(uint256[]) -> REF_557.LoansID
REF_559(Base.Bank) -> banks[_owner]
REF_560(uint256[]) -> REF_559.LoansID
REF_561 -> LENGTH REF_560
TMP_197(uint256) = REF_561 - 1
REF_562(uint256) -> REF_558[TMP_197]
REF_558 = delete REF_562 "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
banks[_owner].LoansID.length --

IRs:
REF_563(Base.Bank) -> banks[_owner]
REF_564(uint256[]) -> REF_563.LoansID
REF_565 -> LENGTH REF_564
TMP_198(uint256) := REF_565(uint256)
REF_565(-> banks) = REF_565 - 1"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
loans[_loanId].ForSale = 0

IRs:
REF_566(Base.Loan) -> loans[_loanId]
REF_567(uint256) -> REF_566.ForSale
REF_567(uint256) (->loans) := 0(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
loans[_loanId].Owner = msg.sender

IRs:
REF_568(Base.Loan) -> loans[_loanId]
REF_569(address) -> REF_568.Owner
REF_569(address) (->loans) := msg.sender(address)"];
}
// Function: 731.sol-PortfolioFunctions-addLoanToPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3
"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_839(Base.Bank) -> banks[msg.sender]
REF_840(Base.Portfolio[]) -> REF_839.Portfolios
REF_841(Base.Portfolio) -> REF_840[_indexPortfolio]
REF_842(uint256[]) -> REF_841.idLoans
REF_843 -> LENGTH REF_842
TMP_275(bool) = i < REF_843
CONDITION TMP_275"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i] == _idLoan

IRs:
REF_844(Base.Bank) -> banks[msg.sender]
REF_845(Base.Portfolio[]) -> REF_844.Portfolios
REF_846(Base.Portfolio) -> REF_845[_indexPortfolio]
REF_847(uint256[]) -> REF_846.idLoans
REF_848(uint256) -> REF_847[i]
TMP_276(bool) = REF_848 == _idLoan
CONDITION TMP_276"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(false,that loan already exists on the portfolio)

IRs:
TMP_277(None) = SOLIDITY_CALL require(bool,string)(False,that loan already exists on the portfolio)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_278(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.push(_idLoan)

IRs:
REF_849(Base.Bank) -> banks[msg.sender]
REF_850(Base.Portfolio[]) -> REF_849.Portfolios
REF_851(Base.Portfolio) -> REF_850[_indexPortfolio]
REF_852(uint256[]) -> REF_851.idLoans
REF_854 -> LENGTH REF_852
TMP_280(uint256) := REF_854(uint256)
TMP_281(uint256) = TMP_280 + 1
REF_854(uint256) (->banks) := TMP_281(uint256)
REF_855(uint256) -> REF_852[TMP_280]
REF_855(uint256) (->banks) := _idLoan(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
10->3;
}
// Function: 731.sol-PortfolioFunctions-aproveLoan(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].LoanPending[_loanIndex].Owner == msg.sender,you are not the owner)

IRs:
REF_570(Base.Bank) -> banks[msg.sender]
REF_571(Base.Loan[]) -> REF_570.LoanPending
REF_572(Base.Loan) -> REF_571[_loanIndex]
REF_573(address) -> REF_572.Owner
TMP_199(bool) = REF_573 == msg.sender
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,you are not the owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= banks[msg.sender].LoanPending[_loanIndex].Amount,the bank does not have that amount of tokens)

IRs:
REF_574(Base.Bank) -> banks[msg.sender]
REF_575(uint256) -> REF_574.Tokens
REF_576(Base.Bank) -> banks[msg.sender]
REF_577(Base.Loan[]) -> REF_576.LoanPending
REF_578(Base.Loan) -> REF_577[_loanIndex]
REF_579(uint256) -> REF_578.Amount
TMP_201(bool) = REF_575 >= REF_579
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,the bank does not have that amount of tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex].Id = loans.length

IRs:
REF_580(Base.Bank) -> banks[msg.sender]
REF_581(Base.Loan[]) -> REF_580.LoanPending
REF_582(Base.Loan) -> REF_581[_loanIndex]
REF_583(uint256) -> REF_582.Id
REF_584 -> LENGTH loans
REF_583(uint256) (->banks) := REF_584(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans.push(banks[msg.sender].LoanPending[_loanIndex])

IRs:
REF_586(Base.Bank) -> banks[msg.sender]
REF_587(Base.Loan[]) -> REF_586.LoanPending
REF_588(Base.Loan) -> REF_587[_loanIndex]
REF_589 -> LENGTH loans
TMP_204(uint256) := REF_589(uint256)
TMP_205(uint256) = TMP_204 + 1
REF_589(uint256) (->loans) := TMP_205(uint256)
REF_590(Base.Loan) -> loans[TMP_204]
REF_590(Base.Loan) (->loans) := REF_588(Base.Loan)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[loans.length - 1].StartTime = now

IRs:
REF_591 -> LENGTH loans
TMP_206(uint256) = REF_591 - 1
REF_592(Base.Loan) -> loans[TMP_206]
REF_593(uint256) -> REF_592.StartTime
REF_593(uint256) (->loans) := now(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_client = banks[msg.sender].LoanPending[_loanIndex].Client

IRs:
REF_594(Base.Bank) -> banks[msg.sender]
REF_595(Base.Loan[]) -> REF_594.LoanPending
REF_596(Base.Loan) -> REF_595[_loanIndex]
REF_597(address) -> REF_596.Client
_client(address) := REF_597(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_amount = banks[msg.sender].LoanPending[_loanIndex].Amount

IRs:
REF_598(Base.Bank) -> banks[msg.sender]
REF_599(Base.Loan[]) -> REF_598.LoanPending
REF_600(Base.Loan) -> REF_599[_loanIndex]
REF_601(uint256) -> REF_600.Amount
_amount(uint256) := REF_601(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
banks[msg.sender].LoansID.push(loans.length - 1)

IRs:
REF_602(Base.Bank) -> banks[msg.sender]
REF_603(uint256[]) -> REF_602.LoansID
REF_605 -> LENGTH loans
TMP_207(uint256) = REF_605 - 1
REF_606 -> LENGTH REF_603
TMP_209(uint256) := REF_606(uint256)
TMP_210(uint256) = TMP_209 + 1
REF_606(uint256) (->banks) := TMP_210(uint256)
REF_607(uint256) -> REF_603[TMP_209]
REF_607(uint256) (->banks) := TMP_207(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
clients[_client].LoansID.push(loans.length - 1)

IRs:
REF_608(Base.Client) -> clients[_client]
REF_609(uint256[]) -> REF_608.LoansID
REF_611 -> LENGTH loans
TMP_211(uint256) = REF_611 - 1
REF_612 -> LENGTH REF_609
TMP_213(uint256) := REF_612(uint256)
TMP_214(uint256) = TMP_213 + 1
REF_612(uint256) (->clients) := TMP_214(uint256)
REF_613(uint256) -> REF_609[TMP_213]
REF_613(uint256) (->clients) := TMP_211(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
clients[_client].Tokens = clients[_client].Tokens.add(_amount)

IRs:
REF_614(Base.Client) -> clients[_client]
REF_615(uint256) -> REF_614.Tokens
REF_616(Base.Client) -> clients[_client]
REF_617(uint256) -> REF_616.Tokens
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_617', '_amount'] 
REF_615(uint256) (->clients) := TMP_215(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_amount)

IRs:
REF_619(Base.Bank) -> banks[msg.sender]
REF_620(uint256) -> REF_619.Tokens
REF_621(Base.Bank) -> banks[msg.sender]
REF_622(uint256) -> REF_621.Tokens
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_622', '_amount'] 
REF_620(uint256) (->banks) := TMP_216(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
banks[msg.sender].LoanPending.length != 1

IRs:
REF_624(Base.Bank) -> banks[msg.sender]
REF_625(Base.Loan[]) -> REF_624.LoanPending
REF_626 -> LENGTH REF_625
TMP_217(bool) = REF_626 != 1
CONDITION TMP_217"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
banks[msg.sender].LoanPending[_loanIndex] = banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_627(Base.Bank) -> banks[msg.sender]
REF_628(Base.Loan[]) -> REF_627.LoanPending
REF_629(Base.Loan) -> REF_628[_loanIndex]
REF_630(Base.Bank) -> banks[msg.sender]
REF_631(Base.Loan[]) -> REF_630.LoanPending
REF_632(Base.Bank) -> banks[msg.sender]
REF_633(Base.Loan[]) -> REF_632.LoanPending
REF_634 -> LENGTH REF_633
TMP_218(uint256) = REF_634 - 1
REF_635(Base.Loan) -> REF_631[TMP_218]
REF_629(Base.Loan) (->banks) := REF_635(Base.Loan)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
delete banks[msg.sender].LoanPending[banks[msg.sender].LoanPending.length - 1]

IRs:
REF_636(Base.Bank) -> banks[msg.sender]
REF_637(Base.Loan[]) -> REF_636.LoanPending
REF_638(Base.Bank) -> banks[msg.sender]
REF_639(Base.Loan[]) -> REF_638.LoanPending
REF_640 -> LENGTH REF_639
TMP_219(uint256) = REF_640 - 1
REF_641(Base.Loan) -> REF_637[TMP_219]
REF_637 = delete REF_641 "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
banks[msg.sender].LoanPending.length --

IRs:
REF_642(Base.Bank) -> banks[msg.sender]
REF_643(Base.Loan[]) -> REF_642.LoanPending
REF_644 -> LENGTH REF_643
TMP_220(uint256) := REF_644(uint256)
REF_644(-> banks) = REF_644 - 1"];
}
// Function: 731.sol-PortfolioFunctions-askForALoan(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Owner == _bankAddress,not a valid bank)

IRs:
REF_722(Base.Bank) -> banks[_bankAddress]
REF_723(address) -> REF_722.Owner
TMP_241(bool) = REF_723 == _bankAddress
TMP_242(None) = SOLIDITY_CALL require(bool,string)(TMP_241,not a valid bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable,you not apply for that loan)

IRs:
REF_724(Base.Bank) -> banks[_bankAddress]
REF_725(mapping(uint256 => Base.strCateg)) -> REF_724.Category
REF_726(Base.Client) -> clients[msg.sender]
REF_727(uint256) -> REF_726.Category
REF_728(Base.strCateg) -> REF_725[REF_727]
REF_729(mapping(uint256 => Base.strAmount)) -> REF_728.Amount
REF_730(Base.strAmount) -> REF_729[_amount]
REF_731(mapping(uint256 => Base.strInsta)) -> REF_730.Installment
REF_732(Base.strInsta) -> REF_731[_installment]
REF_733(bool) -> REF_732.enable
TMP_243(None) = SOLIDITY_CALL require(bool,string)(REF_733,you not apply for that loan)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_loan.Debt = _amount

IRs:
REF_734(uint256) -> _loan.Debt
REF_734(uint256) (->_loan) := _amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_loan.Debt = _loan.Debt.add(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value)

IRs:
REF_735(uint256) -> _loan.Debt
REF_736(uint256) -> _loan.Debt
REF_738(Base.Bank) -> banks[_bankAddress]
REF_739(mapping(uint256 => Base.strCateg)) -> REF_738.Category
REF_740(Base.Client) -> clients[msg.sender]
REF_741(uint256) -> REF_740.Category
REF_742(Base.strCateg) -> REF_739[REF_741]
REF_743(mapping(uint256 => Base.strAmount)) -> REF_742.Amount
REF_744(Base.strAmount) -> REF_743[_amount]
REF_745(mapping(uint256 => Base.strInsta)) -> REF_744.Installment
REF_746(Base.strInsta) -> REF_745[_installment]
REF_747(uint256) -> REF_746.value
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_736', 'REF_747'] 
REF_735(uint256) (->_loan) := TMP_244(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_loan.Client = msg.sender

IRs:
REF_748(address) -> _loan.Client
REF_748(address) (->_loan) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_loan.Owner = _bankAddress

IRs:
REF_749(address) -> _loan.Owner
REF_749(address) (->_loan) := _bankAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loan.Installment = _installment

IRs:
REF_750(uint256) -> _loan.Installment
REF_750(uint256) (->_loan) := _installment(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_loan.Category = clients[msg.sender].Category

IRs:
REF_751(uint256) -> _loan.Category
REF_752(Base.Client) -> clients[msg.sender]
REF_753(uint256) -> REF_752.Category
REF_751(uint256) (->_loan) := REF_753(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_loan.Amount = _amount

IRs:
REF_754(uint256) -> _loan.Amount
REF_754(uint256) (->_loan) := _amount(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
banks[_bankAddress].LoanPending.push(_loan)

IRs:
REF_755(Base.Bank) -> banks[_bankAddress]
REF_756(Base.Loan[]) -> REF_755.LoanPending
REF_758 -> LENGTH REF_756
TMP_246(uint256) := REF_758(uint256)
TMP_247(uint256) = TMP_246 + 1
REF_758(uint256) (->banks) := TMP_247(uint256)
REF_759(Base.Loan) -> REF_756[TMP_246]
REF_759(Base.Loan) (->banks) := _loan(Base.Loan)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
12->1;
}
// Function: 731.sol-PortfolioFunctions-buyPortfolio(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[msg.sender].Tokens >= _value)

IRs:
REF_922(Base.Bank) -> banks[msg.sender]
REF_923(uint256) -> REF_922.Tokens
TMP_302(bool) = REF_923 >= _value
TMP_303(None) = SOLIDITY_CALL require(bool)(TMP_302)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].idLoans.length > 0)

IRs:
REF_924(Base.Bank) -> banks[_owner]
REF_925(Base.Portfolio[]) -> REF_924.Portfolios
REF_926(Base.Portfolio) -> REF_925[_indexPortfolio]
REF_927(uint256[]) -> REF_926.idLoans
REF_928 -> LENGTH REF_927
TMP_304(bool) = REF_928 > 0
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].forSale > 0)

IRs:
REF_929(Base.Bank) -> banks[_owner]
REF_930(Base.Portfolio[]) -> REF_929.Portfolios
REF_931(Base.Portfolio) -> REF_930[_indexPortfolio]
REF_932(uint256) -> REF_931.forSale
TMP_306(bool) = REF_932 > 0
TMP_307(None) = SOLIDITY_CALL require(bool)(TMP_306)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(banks[_owner].Portfolios[_indexPortfolio].forSale == _value)

IRs:
REF_933(Base.Bank) -> banks[_owner]
REF_934(Base.Portfolio[]) -> REF_933.Portfolios
REF_935(Base.Portfolio) -> REF_934[_indexPortfolio]
REF_936(uint256) -> REF_935.forSale
TMP_308(bool) = REF_936 == _value
TMP_309(None) = SOLIDITY_CALL require(bool)(TMP_308)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_937(Base.Bank) -> banks[msg.sender]
REF_938(uint256) -> REF_937.Tokens
REF_939(Base.Bank) -> banks[msg.sender]
REF_940(uint256) -> REF_939.Tokens
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_940', '_value'] 
REF_938(uint256) (->banks) := TMP_310(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
banks[_owner].Tokens = banks[_owner].Tokens.add(_value)

IRs:
REF_942(Base.Bank) -> banks[_owner]
REF_943(uint256) -> REF_942.Tokens
REF_944(Base.Bank) -> banks[_owner]
REF_945(uint256) -> REF_944.Tokens
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_945', '_value'] 
REF_943(uint256) (->banks) := TMP_311(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9
"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
a < banks[_owner].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_947(Base.Bank) -> banks[_owner]
REF_948(Base.Portfolio[]) -> REF_947.Portfolios
REF_949(Base.Portfolio) -> REF_948[_indexPortfolio]
REF_950(uint256[]) -> REF_949.idLoans
REF_951 -> LENGTH REF_950
TMP_312(bool) = a < REF_951
CONDITION TMP_312"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
SwitchLoanOwner(_owner,banks[_owner].Portfolios[_indexPortfolio].idLoans[a])

IRs:
REF_952(Base.Bank) -> banks[_owner]
REF_953(Base.Portfolio[]) -> REF_952.Portfolios
REF_954(Base.Portfolio) -> REF_953[_indexPortfolio]
REF_955(uint256[]) -> REF_954.idLoans
REF_956(uint256) -> REF_955[a]
INTERNAL_CALL, LoansFunctions.SwitchLoanOwner(address,uint256)(_owner,REF_956)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
a ++

IRs:
TMP_314(uint256) := a(uint256)
a(uint256) = a + 1"];
12->10;
13[label="Node Type: IF 13

EXPRESSION:
_indexPortfolio != banks[_owner].Portfolios.length - 1

IRs:
REF_957(Base.Bank) -> banks[_owner]
REF_958(Base.Portfolio[]) -> REF_957.Portfolios
REF_959 -> LENGTH REF_958
TMP_315(uint256) = REF_959 - 1
TMP_316(bool) = _indexPortfolio != TMP_315
CONDITION TMP_316"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
banks[_owner].Portfolios[_indexPortfolio] = banks[_owner].Portfolios[banks[_owner].Portfolios.length - 1]

IRs:
REF_960(Base.Bank) -> banks[_owner]
REF_961(Base.Portfolio[]) -> REF_960.Portfolios
REF_962(Base.Portfolio) -> REF_961[_indexPortfolio]
REF_963(Base.Bank) -> banks[_owner]
REF_964(Base.Portfolio[]) -> REF_963.Portfolios
REF_965(Base.Bank) -> banks[_owner]
REF_966(Base.Portfolio[]) -> REF_965.Portfolios
REF_967 -> LENGTH REF_966
TMP_317(uint256) = REF_967 - 1
REF_968(Base.Portfolio) -> REF_964[TMP_317]
REF_962(Base.Portfolio) (->banks) := REF_968(Base.Portfolio)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
delete banks[_owner].Portfolios[banks[_owner].Portfolios.length - 1]

IRs:
REF_969(Base.Bank) -> banks[_owner]
REF_970(Base.Portfolio[]) -> REF_969.Portfolios
REF_971(Base.Bank) -> banks[_owner]
REF_972(Base.Portfolio[]) -> REF_971.Portfolios
REF_973 -> LENGTH REF_972
TMP_318(uint256) = REF_973 - 1
REF_974(Base.Portfolio) -> REF_970[TMP_318]
REF_970 = delete REF_974 "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
banks[_owner].Portfolios.length --

IRs:
REF_975(Base.Bank) -> banks[_owner]
REF_976(Base.Portfolio[]) -> REF_975.Portfolios
REF_977 -> LENGTH REF_976
TMP_319(uint256) := REF_977(uint256)
REF_977(-> banks) = REF_977 - 1"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
18->1;
}
// Function: 731.sol-PortfolioFunctions-countPortfolios(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_result = banks[_bankAddress].Portfolios.length

IRs:
REF_978(Base.Bank) -> banks[_bankAddress]
REF_979(Base.Portfolio[]) -> REF_978.Portfolios
REF_980 -> LENGTH REF_979
_result(uint256) := REF_980(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 731.sol-PortfolioFunctions-createPortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == loans[_idLoan].Owner)

IRs:
REF_797(Base.Loan) -> loans[_idLoan]
REF_798(address) -> REF_797.Owner
TMP_259(bool) = msg.sender == REF_798
TMP_260(None) = SOLIDITY_CALL require(bool)(TMP_259)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
banks[msg.sender].Portfolios.push(_portfolio)

IRs:
REF_799(Base.Bank) -> banks[msg.sender]
REF_800(Base.Portfolio[]) -> REF_799.Portfolios
REF_802 -> LENGTH REF_800
TMP_262(uint256) := REF_802(uint256)
TMP_263(uint256) = TMP_262 + 1
REF_802(uint256) (->banks) := TMP_263(uint256)
REF_803(Base.Portfolio) -> REF_800[TMP_262]
REF_803(Base.Portfolio) (->banks) := _portfolio(Base.Portfolio)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length - 1].idLoans.push(_idLoan)

IRs:
REF_804(Base.Bank) -> banks[msg.sender]
REF_805(Base.Portfolio[]) -> REF_804.Portfolios
REF_806(Base.Bank) -> banks[msg.sender]
REF_807(Base.Portfolio[]) -> REF_806.Portfolios
REF_808 -> LENGTH REF_807
TMP_264(uint256) = REF_808 - 1
REF_809(Base.Portfolio) -> REF_805[TMP_264]
REF_810(uint256[]) -> REF_809.idLoans
REF_812 -> LENGTH REF_810
TMP_266(uint256) := REF_812(uint256)
TMP_267(uint256) = TMP_266 + 1
REF_812(uint256) (->banks) := TMP_267(uint256)
REF_813(uint256) -> REF_810[TMP_266]
REF_813(uint256) (->banks) := _idLoan(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length - 1].Owner = msg.sender

IRs:
REF_814(Base.Bank) -> banks[msg.sender]
REF_815(Base.Portfolio[]) -> REF_814.Portfolios
REF_816(Base.Bank) -> banks[msg.sender]
REF_817(Base.Portfolio[]) -> REF_816.Portfolios
REF_818 -> LENGTH REF_817
TMP_268(uint256) = REF_818 - 1
REF_819(Base.Portfolio) -> REF_815[TMP_268]
REF_820(address) -> REF_819.Owner
REF_820(address) (->banks) := msg.sender(address)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
banks[msg.sender].Portfolios.length - 1

IRs:
REF_821(Base.Bank) -> banks[msg.sender]
REF_822(Base.Portfolio[]) -> REF_821.Portfolios
REF_823 -> LENGTH REF_822
TMP_269(uint256) = REF_823 - 1
RETURN TMP_269"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
7->1;
}
// Function: 731.sol-PortfolioFunctions-deletePortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_PortfolioLength = banks[msg.sender].Portfolios.length

IRs:
REF_824(Base.Bank) -> banks[msg.sender]
REF_825(Base.Portfolio[]) -> REF_824.Portfolios
REF_826 -> LENGTH REF_825
_PortfolioLength(uint256) := REF_826(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio] = banks[msg.sender].Portfolios[_PortfolioLength - 1]

IRs:
REF_827(Base.Bank) -> banks[msg.sender]
REF_828(Base.Portfolio[]) -> REF_827.Portfolios
REF_829(Base.Portfolio) -> REF_828[_indexPortfolio]
REF_830(Base.Bank) -> banks[msg.sender]
REF_831(Base.Portfolio[]) -> REF_830.Portfolios
TMP_271(uint256) = _PortfolioLength - 1
REF_832(Base.Portfolio) -> REF_831[TMP_271]
REF_829(Base.Portfolio) (->banks) := REF_832(Base.Portfolio)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete banks[msg.sender].Portfolios[_PortfolioLength - 1]

IRs:
REF_833(Base.Bank) -> banks[msg.sender]
REF_834(Base.Portfolio[]) -> REF_833.Portfolios
TMP_272(uint256) = _PortfolioLength - 1
REF_835(Base.Portfolio) -> REF_834[TMP_272]
REF_834 = delete REF_835 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
banks[msg.sender].Portfolios.length --

IRs:
REF_836(Base.Bank) -> banks[msg.sender]
REF_837(Base.Portfolio[]) -> REF_836.Portfolios
REF_838 -> LENGTH REF_837
TMP_273(uint256) := REF_838(uint256)
REF_838(-> banks) = REF_838 - 1"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
5->1;
}
// Function: 731.sol-PortfolioFunctions-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(false,Should not go through this point)

IRs:
TMP_258(None) = SOLIDITY_CALL require(bool,string)(False,Should not go through this point)"];
}
// Function: 731.sol-PortfolioFunctions-findOutInterestByBank(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value

IRs:
REF_706(Base.Bank) -> banks[msg.sender]
REF_707(mapping(uint256 => Base.strCateg)) -> REF_706.Category
REF_708(Base.strCateg) -> REF_707[_category]
REF_709(mapping(uint256 => Base.strAmount)) -> REF_708.Amount
REF_710(Base.strAmount) -> REF_709[_amount]
REF_711(mapping(uint256 => Base.strInsta)) -> REF_710.Installment
REF_712(Base.strInsta) -> REF_711[_installment]
REF_713(uint256) -> REF_712.value
_value(uint256) := REF_713(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable

IRs:
REF_714(Base.Bank) -> banks[msg.sender]
REF_715(mapping(uint256 => Base.strCateg)) -> REF_714.Category
REF_716(Base.strCateg) -> REF_715[_category]
REF_717(mapping(uint256 => Base.strAmount)) -> REF_716.Amount
REF_718(Base.strAmount) -> REF_717[_amount]
REF_719(mapping(uint256 => Base.strInsta)) -> REF_718.Installment
REF_720(Base.strInsta) -> REF_719[_installment]
REF_721(bool) -> REF_720.enable
_enable(bool) := REF_721(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-PortfolioFunctions-findOutInterestByClientCategory(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value

IRs:
REF_760(Base.Bank) -> banks[_bankAddress]
REF_761(mapping(uint256 => Base.strCateg)) -> REF_760.Category
REF_762(Base.Client) -> clients[msg.sender]
REF_763(uint256) -> REF_762.Category
REF_764(Base.strCateg) -> REF_761[REF_763]
REF_765(mapping(uint256 => Base.strAmount)) -> REF_764.Amount
REF_766(Base.strAmount) -> REF_765[_amount]
REF_767(mapping(uint256 => Base.strInsta)) -> REF_766.Installment
REF_768(Base.strInsta) -> REF_767[_installment]
REF_769(uint256) -> REF_768.value
_value(uint256) := REF_769(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_enable = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable

IRs:
REF_770(Base.Bank) -> banks[_bankAddress]
REF_771(mapping(uint256 => Base.strCateg)) -> REF_770.Category
REF_772(Base.Client) -> clients[msg.sender]
REF_773(uint256) -> REF_772.Category
REF_774(Base.strCateg) -> REF_771[REF_773]
REF_775(mapping(uint256 => Base.strAmount)) -> REF_774.Amount
REF_776(Base.strAmount) -> REF_775[_amount]
REF_777(mapping(uint256 => Base.strInsta)) -> REF_776.Installment
REF_778(Base.strInsta) -> REF_777[_installment]
REF_779(bool) -> REF_778.enable
_enable(bool) := REF_779(bool)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
(_value,_enable)

IRs:
RETURN _value,_enable"];
}
// Function: 731.sol-PortfolioFunctions-getClientBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_value = clients[msg.sender].Tokens

IRs:
REF_787(Base.Client) -> clients[msg.sender]
REF_788(uint256) -> REF_787.Tokens
_value(uint256) := REF_788(uint256)"];
1->3;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
_value

IRs:
RETURN _value"];
}
// Function: 731.sol-PortfolioFunctions-getClientCategory()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].Category

IRs:
REF_795(Base.Client) -> clients[msg.sender]
REF_796(uint256) -> REF_795.Category
RETURN REF_796"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-PortfolioFunctions-getLoanIDbyClient(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID[_indexLoan]

IRs:
REF_792(Base.Client) -> clients[msg.sender]
REF_793(uint256[]) -> REF_792.LoansID
REF_794(uint256) -> REF_793[_indexLoan]
RETURN REF_794"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-PortfolioFunctions-getLoansLengthByClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
clients[msg.sender].LoansID.length

IRs:
REF_789(Base.Client) -> clients[msg.sender]
REF_790(uint256[]) -> REF_789.LoansID
REF_791 -> LENGTH REF_790
RETURN REF_791"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
2->1;
}
// Function: 731.sol-PortfolioFunctions-getPortfolioInfo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[_bankAddress].Portfolios[_indexPortfolio].Owner == _bankAddress,not the owner of that portfolio)

IRs:
REF_896(Base.Bank) -> banks[_bankAddress]
REF_897(Base.Portfolio[]) -> REF_896.Portfolios
REF_898(Base.Portfolio) -> REF_897[_indexPortfolio]
REF_899(address) -> REF_898.Owner
TMP_296(bool) = REF_899 == _bankAddress
TMP_297(None) = SOLIDITY_CALL require(bool,string)(TMP_296,not the owner of that portfolio)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_LoansLength = banks[_bankAddress].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_900(Base.Bank) -> banks[_bankAddress]
REF_901(Base.Portfolio[]) -> REF_900.Portfolios
REF_902(Base.Portfolio) -> REF_901[_indexPortfolio]
REF_903(uint256[]) -> REF_902.idLoans
REF_904 -> LENGTH REF_903
_LoansLength(uint256) := REF_904(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_forSale = banks[_bankAddress].Portfolios[_indexPortfolio].forSale

IRs:
REF_905(Base.Bank) -> banks[_bankAddress]
REF_906(Base.Portfolio[]) -> REF_905.Portfolios
REF_907(Base.Portfolio) -> REF_906[_indexPortfolio]
REF_908(uint256) -> REF_907.forSale
_forSale(uint256) := REF_908(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_owner = banks[_bankAddress].Portfolios[_indexPortfolio].Owner

IRs:
REF_909(Base.Bank) -> banks[_bankAddress]
REF_910(Base.Portfolio[]) -> REF_909.Portfolios
REF_911(Base.Portfolio) -> REF_910[_indexPortfolio]
REF_912(address) -> REF_911.Owner
_owner(address) := REF_912(address)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
(_LoansLength,_forSale,_owner)

IRs:
RETURN _LoansLength,_forSale,_owner"];
}
// Function: 731.sol-PortfolioFunctions-isBank()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_986(Base.Bank) -> banks[msg.sender]
REF_987(address) -> REF_986.Owner
TMP_323(bool) = REF_987 == msg.sender
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,you are not a bank)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-PortfolioFunctions-isClient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Owner == msg.sender,not a client)

IRs:
REF_992(Base.Client) -> clients[msg.sender]
REF_993(address) -> REF_992.Owner
TMP_329(bool) = REF_993 == msg.sender
TMP_330(None) = SOLIDITY_CALL require(bool,string)(TMP_329,not a client)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-PortfolioFunctions-isLoanOwner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Owner == msg.sender,you are not a bank)

IRs:
REF_988(Base.Bank) -> banks[msg.sender]
REF_989(address) -> REF_988.Owner
TMP_325(bool) = REF_989 == msg.sender
TMP_326(None) = SOLIDITY_CALL require(bool,string)(TMP_325,you are not a bank)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(loans[_id].Owner == msg.sender,not owner of loan)

IRs:
REF_990(Base.Loan) -> loans[_id]
REF_991(address) -> REF_990.Owner
TMP_327(bool) = REF_991 == msg.sender
TMP_328(None) = SOLIDITY_CALL require(bool,string)(TMP_327,not owner of loan)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 731.sol-PortfolioFunctions-isOwnerPortfolio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Portfolios[_indexPortfolio].Owner == msg.sender,not the owner of portfolio)

IRs:
REF_994(Base.Bank) -> banks[msg.sender]
REF_995(Base.Portfolio[]) -> REF_994.Portfolios
REF_996(Base.Portfolio) -> REF_995[_indexPortfolio]
REF_997(address) -> REF_996.Owner
TMP_331(bool) = REF_997 == msg.sender
TMP_332(None) = SOLIDITY_CALL require(bool,string)(TMP_331,not the owner of portfolio)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 731.sol-PortfolioFunctions-payOffClientDebt(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(loans[_loanId].Debt > 0)

IRs:
REF_676(Base.Loan) -> loans[_loanId]
REF_677(uint256) -> REF_676.Debt
TMP_229(bool) = REF_677 > 0
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_231(bool) = _value > 0
TMP_232(None) = SOLIDITY_CALL require(bool)(TMP_231)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(loans[_loanId].Debt >= _value)

IRs:
REF_678(Base.Loan) -> loans[_loanId]
REF_679(uint256) -> REF_678.Debt
TMP_233(bool) = REF_679 >= _value
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
loans[loans.length - 1].EndTime = now

IRs:
REF_680 -> LENGTH loans
TMP_235(uint256) = REF_680 - 1
REF_681(Base.Loan) -> loans[TMP_235]
REF_682(uint256) -> REF_681.EndTime
REF_682(uint256) (->loans) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
loans[_loanId].Debt = loans[_loanId].Debt.sub(_value)

IRs:
REF_683(Base.Loan) -> loans[_loanId]
REF_684(uint256) -> REF_683.Debt
REF_685(Base.Loan) -> loans[_loanId]
REF_686(uint256) -> REF_685.Debt
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_686', '_value'] 
REF_684(uint256) (->loans) := TMP_236(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isLoanOwner(_loanId)

IRs:
MODIFIER_CALL, BankFunctions.isLoanOwner(uint256)(_loanId)"];
6->1;
}
// Function: 731.sol-PortfolioFunctions-removeBankToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(banks[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_669(Base.Bank) -> banks[msg.sender]
REF_670(uint256) -> REF_669.Tokens
TMP_225(bool) = REF_670 >= _value
TMP_226(None) = SOLIDITY_CALL require(bool,string)(TMP_225,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value)

IRs:
REF_671(Base.Bank) -> banks[msg.sender]
REF_672(uint256) -> REF_671.Tokens
REF_673(Base.Bank) -> banks[msg.sender]
REF_674(uint256) -> REF_673.Tokens
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_674', '_value'] 
REF_672(uint256) (->banks) := TMP_227(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isBank()

IRs:
MODIFIER_CALL, BankFunctions.isBank()()"];
3->1;
}
// Function: 731.sol-PortfolioFunctions-removeClientToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(clients[msg.sender].Tokens >= _value,You don't have that many tokens)

IRs:
REF_780(Base.Client) -> clients[msg.sender]
REF_781(uint256) -> REF_780.Tokens
TMP_250(bool) = REF_781 >= _value
TMP_251(None) = SOLIDITY_CALL require(bool,string)(TMP_250,You don't have that many tokens)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
clients[msg.sender].Tokens = clients[msg.sender].Tokens.sub(_value)

IRs:
REF_782(Base.Client) -> clients[msg.sender]
REF_783(uint256) -> REF_782.Tokens
REF_784(Base.Client) -> clients[msg.sender]
REF_785(uint256) -> REF_784.Tokens
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_785', '_value'] 
REF_783(uint256) (->clients) := TMP_252(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isClient()

IRs:
MODIFIER_CALL, ClientFunctions.isClient()()"];
3->1;
}
// Function: 731.sol-PortfolioFunctions-removeLoanFromPortfolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
Loanslength = banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length

IRs:
REF_856(Base.Bank) -> banks[msg.sender]
REF_857(Base.Portfolio[]) -> REF_856.Portfolios
REF_858(Base.Portfolio) -> REF_857[_indexPortfolio]
REF_859(uint256[]) -> REF_858.idLoans
REF_860 -> LENGTH REF_859
Loanslength(uint256) := REF_860(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_loanIndex = Loanslength

IRs:
_loanIndex(uint256) := Loanslength(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5
"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < Loanslength

IRs:
TMP_283(bool) = i < Loanslength
CONDITION TMP_283"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
_idLoan == banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i]

IRs:
REF_861(Base.Bank) -> banks[msg.sender]
REF_862(Base.Portfolio[]) -> REF_861.Portfolios
REF_863(Base.Portfolio) -> REF_862[_indexPortfolio]
REF_864(uint256[]) -> REF_863.idLoans
REF_865(uint256) -> REF_864[i]
TMP_284(bool) = _idLoan == REF_865
CONDITION TMP_284"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_loanIndex = i

IRs:
_loanIndex(uint256) := i(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i = Loanslength

IRs:
i(uint256) := Loanslength(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_285(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(_loanIndex < Loanslength,el Loan no se encuentra en el Portfolio)

IRs:
TMP_286(bool) = _loanIndex < Loanslength
TMP_287(None) = SOLIDITY_CALL require(bool,string)(TMP_286,el Loan no se encuentra en el Portfolio)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_loanIndex != banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length - 1

IRs:
REF_866(Base.Bank) -> banks[msg.sender]
REF_867(Base.Portfolio[]) -> REF_866.Portfolios
REF_868(Base.Portfolio) -> REF_867[_indexPortfolio]
REF_869(uint256[]) -> REF_868.idLoans
REF_870 -> LENGTH REF_869
TMP_288(uint256) = REF_870 - 1
TMP_289(bool) = _loanIndex != TMP_288
CONDITION TMP_289"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_loanIndex] = banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength - 1]

IRs:
REF_871(Base.Bank) -> banks[msg.sender]
REF_872(Base.Portfolio[]) -> REF_871.Portfolios
REF_873(Base.Portfolio) -> REF_872[_indexPortfolio]
REF_874(uint256[]) -> REF_873.idLoans
REF_875(uint256) -> REF_874[_loanIndex]
REF_876(Base.Bank) -> banks[msg.sender]
REF_877(Base.Portfolio[]) -> REF_876.Portfolios
REF_878(Base.Portfolio) -> REF_877[_indexPortfolio]
REF_879(uint256[]) -> REF_878.idLoans
TMP_290(uint256) = Loanslength - 1
REF_880(uint256) -> REF_879[TMP_290]
REF_875(uint256) (->banks) := REF_880(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
delete banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength - 1]

IRs:
REF_881(Base.Bank) -> banks[msg.sender]
REF_882(Base.Portfolio[]) -> REF_881.Portfolios
REF_883(Base.Portfolio) -> REF_882[_indexPortfolio]
REF_884(uint256[]) -> REF_883.idLoans
TMP_291(uint256) = Loanslength - 1
REF_885(uint256) -> REF_884[TMP_291]
REF_884 = delete REF_885 "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length --

IRs:
REF_886(Base.Bank) -> banks[msg.sender]
REF_887(Base.Portfolio[]) -> REF_886.Portfolios
REF_888(Base.Portfolio) -> REF_887[_indexPortfolio]
REF_889(uint256[]) -> REF_888.idLoans
REF_890 -> LENGTH REF_889
TMP_292(uint256) := REF_890(uint256)
REF_890(-> banks) = REF_890 - 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length == 0

IRs:
REF_891(Base.Bank) -> banks[msg.sender]
REF_892(Base.Portfolio[]) -> REF_891.Portfolios
REF_893(Base.Portfolio) -> REF_892[_indexPortfolio]
REF_894(uint256[]) -> REF_893.idLoans
REF_895 -> LENGTH REF_894
TMP_293(bool) = REF_895 == 0
CONDITION TMP_293"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
deletePortfolio(_indexPortfolio)

IRs:
INTERNAL_CALL, PortfolioFunctions.deletePortfolio(uint256)(_indexPortfolio)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_result = true

IRs:
_result(bool) := True(bool)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
22->1;
23[label="Node Type: RETURN 23

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 731.sol-PortfolioFunctions-sellPorftolio(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length > 0)

IRs:
REF_913(Base.Bank) -> banks[msg.sender]
REF_914(Base.Portfolio[]) -> REF_913.Portfolios
REF_915(Base.Portfolio) -> REF_914[_indexPortfolio]
REF_916(uint256[]) -> REF_915.idLoans
REF_917 -> LENGTH REF_916
TMP_299(bool) = REF_917 > 0
TMP_300(None) = SOLIDITY_CALL require(bool)(TMP_299)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
banks[msg.sender].Portfolios[_indexPortfolio].forSale = _value

IRs:
REF_918(Base.Bank) -> banks[msg.sender]
REF_919(Base.Portfolio[]) -> REF_918.Portfolios
REF_920(Base.Portfolio) -> REF_919[_indexPortfolio]
REF_921(uint256) -> REF_920.forSale
REF_921(uint256) (->banks) := _value(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isOwnerPortfolio(_indexPortfolio)

IRs:
MODIFIER_CALL, PortfolioFunctions.isOwnerPortfolio(uint256)(_indexPortfolio)"];
3->1;
}
// Function: 731.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_11(uint256) = _a + _b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= _a)

IRs:
TMP_12(bool) = c >= _a
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 731.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b > 0)

IRs:
TMP_5(bool) = _b > 0
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a / _b

IRs:
TMP_7(uint256) = _a / _b
c(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 731.sol-SafeMath-mod(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b != 0)

IRs:
TMP_14(bool) = b != 0
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a % b

IRs:
TMP_16(uint256) = a % b
RETURN TMP_16"];
}
// Function: 731.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 731.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b <= _a)

IRs:
TMP_8(bool) = _b <= _a
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a - _b

IRs:
TMP_10(uint256) = _a - _b
c(uint256) := TMP_10(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
