digraph G {
// Function: 769.sol-MCBA-MCBA(uint256,string,string,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply * 10 ** uint256(decimals)

IRs:
TMP_42 = CONVERT decimals to uint256
TMP_43(uint256) = 10 ** TMP_42
TMP_44(uint256) = initialSupply * TMP_43
totalSupply(uint256) := TMP_44(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[holder] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[holder]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = tokenName

IRs:
name(string) := tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = tokenSymbol

IRs:
symbol(string) := tokenSymbol(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner = holder

IRs:
owner(address) := holder(address)"];
}
// Function: 769.sol-MCBA-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_57(bool) = _value > 0
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_10(mapping(address => uint256)) -> allowance[msg.sender]
REF_11(uint256) -> REF_10[_spender]
REF_11(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 769.sol-MCBA-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_28(uint256) -> balanceOf[msg.sender]
TMP_74(bool) = REF_28 >= _value
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_76(bool) = _value > 0
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_29(uint256) -> balanceOf[msg.sender]
REF_31(uint256) -> balanceOf[msg.sender]
TMP_78(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_31,_value)
REF_29(uint256) (->balanceOf) := TMP_78(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = SafeMath.safeSub(totalSupply,_value)

IRs:
TMP_79(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,_value)
totalSupply(uint256) := TMP_79(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 769.sol-MCBA-freeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_33(uint256) -> balanceOf[msg.sender]
TMP_81(bool) = REF_33 >= _value
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_83(bool) = _value > 0
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_34(uint256) -> balanceOf[msg.sender]
REF_36(uint256) -> balanceOf[msg.sender]
TMP_85(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_36,_value)
REF_34(uint256) (->balanceOf) := TMP_85(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender],_value)

IRs:
REF_37(uint256) -> freezeOf[msg.sender]
REF_39(uint256) -> freezeOf[msg.sender]
TMP_86(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_39,_value)
REF_37(uint256) (->freezeOf) := TMP_86(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Freeze(msg.sender,_value)

IRs:
Emit Freeze(msg.sender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 769.sol-MCBA-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_37(uint256) = a + b
c(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_38(bool) = c >= a
TMP_39(bool) = c >= b
TMP_40(bool) = TMP_38 && TMP_39
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 769.sol-MCBA-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_26(bool) = b > 0
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_28(uint256) = a / b
c(uint256) := TMP_28(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_29(uint256) = b * c
TMP_30(uint256) = a % b
TMP_31(uint256) = TMP_29 + TMP_30
TMP_32(bool) = a == TMP_31
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 769.sol-MCBA-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_21(bool) = a == 0
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_22(uint256) = a * b
c(uint256) := TMP_22(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_23(uint256) = c / a
TMP_24(bool) = TMP_23 == b
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 769.sol-MCBA-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_34(bool) = b <= a
TMP_35(None) = SOLIDITY_CALL assert(bool)(TMP_34)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_36(uint256) = a - b
RETURN TMP_36"];
}
// Function: 769.sol-MCBA-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 769.sol-MCBA-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_45(bool) = _to != 0
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_47(bool) = _value > 0
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_49(bool) = REF_1 >= _value
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_51(uint256) = REF_2 + _value
REF_3(uint256) -> balanceOf[_to]
TMP_52(bool) = TMP_51 >= REF_3
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_4(uint256) -> balanceOf[msg.sender]
REF_6(uint256) -> balanceOf[msg.sender]
TMP_54(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_6,_value)
REF_4(uint256) (->balanceOf) := TMP_54(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value)

IRs:
REF_7(uint256) -> balanceOf[_to]
REF_9(uint256) -> balanceOf[_to]
TMP_55(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_9,_value)
REF_7(uint256) (->balanceOf) := TMP_55(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
}
// Function: 769.sol-MCBA-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_59(bool) = _to != 0
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_61(bool) = _value > 0
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_12(uint256) -> balanceOf[_from]
TMP_63(bool) = REF_12 >= _value
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_13(uint256) -> balanceOf[_to]
TMP_65(uint256) = REF_13 + _value
REF_14(uint256) -> balanceOf[_to]
TMP_66(bool) = TMP_65 >= REF_14
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_15(mapping(address => uint256)) -> allowance[_from]
REF_16(uint256) -> REF_15[msg.sender]
TMP_68(bool) = _value <= REF_16
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_from] = SafeMath.safeSub(balanceOf[_from],_value)

IRs:
REF_17(uint256) -> balanceOf[_from]
REF_19(uint256) -> balanceOf[_from]
TMP_70(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_19,_value)
REF_17(uint256) (->balanceOf) := TMP_70(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value)

IRs:
REF_20(uint256) -> balanceOf[_to]
REF_22(uint256) -> balanceOf[_to]
TMP_71(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_22,_value)
REF_20(uint256) (->balanceOf) := TMP_71(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender],_value)

IRs:
REF_23(mapping(address => uint256)) -> allowance[_from]
REF_24(uint256) -> REF_23[msg.sender]
REF_26(mapping(address => uint256)) -> allowance[_from]
REF_27(uint256) -> REF_26[msg.sender]
TMP_72(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_27,_value)
REF_24(uint256) (->allowance) := TMP_72(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 769.sol-MCBA-unfreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezeOf[msg.sender] >= _value)

IRs:
REF_40(uint256) -> freezeOf[msg.sender]
TMP_88(bool) = REF_40 >= _value
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_90(bool) = _value > 0
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender],_value)

IRs:
REF_41(uint256) -> freezeOf[msg.sender]
REF_43(uint256) -> freezeOf[msg.sender]
TMP_92(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_43,_value)
REF_41(uint256) (->freezeOf) := TMP_92(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],_value)

IRs:
REF_44(uint256) -> balanceOf[msg.sender]
REF_46(uint256) -> balanceOf[msg.sender]
TMP_93(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_46,_value)
REF_44(uint256) (->balanceOf) := TMP_93(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Unfreeze(msg.sender,_value)

IRs:
Emit Unfreeze(msg.sender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 769.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_16(uint256) = a + b
c(uint256) := TMP_16(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_17(bool) = c >= a
TMP_18(bool) = c >= b
TMP_19(bool) = TMP_17 && TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 769.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_5(bool) = b > 0
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_7(uint256) = a / b
c(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_8(uint256) = b * c
TMP_9(uint256) = a % b
TMP_10(uint256) = TMP_8 + TMP_9
TMP_11(bool) = a == TMP_10
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 769.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 769.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_13(bool) = b <= a
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_15(uint256) = a - b
RETURN TMP_15"];
}
}
