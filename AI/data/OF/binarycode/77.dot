digraph G {
// Function: 77.sol-BlocktekUniversity-BlocktekUniversity(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = adr

IRs:
owner(address) := adr(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = BKU

IRs:
symbol(string) := BKU(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = Blocktek University Credits

IRs:
name(string) := Blocktek University Credits(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 150000000 * 10 ** 18

IRs:
TMP_0(uint256) = 10 ** 18
TMP_1(uint256) = 150000000 * TMP_0
_totalSupply(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = _totalSupply

IRs:
REF_0(uint256) -> balances[owner]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 77.sol-BlocktekUniversity-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_18(mapping(address => uint256)) -> allowed[_owner]
REF_19(uint256) -> REF_18[_spender]
RETURN REF_19"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 77.sol-BlocktekUniversity-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _amount

IRs:
REF_16(mapping(address => uint256)) -> allowed[msg.sender]
REF_17(uint256) -> REF_16[_spender]
REF_17(uint256) (->allowed) := _amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_amount)

IRs:
Emit Approval(msg.sender,_spender,_amount)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 77.sol-BlocktekUniversity-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 77.sol-BlocktekUniversity-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 77.sol-BlocktekUniversity-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = 

IRs:
symbol(string) := (string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 

IRs:
name(string) := (string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
_totalSupply = 0

IRs:
_totalSupply(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
owner = 0

IRs:
owner(address) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
certificateAuthoirty = 0xC3334De449a1dD1B0FEc7304339371646be8a0c9

IRs:
certificateAuthoirty(address) := 1114397323644044260561776723157053768564946280649(address)"];
}
// Function: 77.sol-BlocktekUniversity-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 77.sol-BlocktekUniversity-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_2(bool) = REF_2 >= _amount
TMP_3(bool) = _amount > 0
TMP_4(bool) = TMP_2 && TMP_3
REF_3(uint256) -> balances[_to]
TMP_5(uint256) = REF_3 + _amount
REF_4(uint256) -> balances[_to]
TMP_6(bool) = TMP_5 > REF_4
TMP_7(bool) = TMP_4 && TMP_6
CONDITION TMP_7"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _amount

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 77.sol-BlocktekUniversity-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]

IRs:
REF_7(uint256) -> balances[_from]
TMP_9(bool) = REF_7 >= _amount
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
TMP_10(bool) = REF_9 >= _amount
TMP_11(bool) = TMP_9 && TMP_10
TMP_12(bool) = _amount > 0
TMP_13(bool) = TMP_11 && TMP_12
REF_10(uint256) -> balances[_to]
TMP_14(uint256) = REF_10 + _amount
REF_11(uint256) -> balances[_to]
TMP_15(bool) = TMP_14 > REF_11
TMP_16(bool) = TMP_13 && TMP_15
CONDITION TMP_16"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] -= _amount

IRs:
REF_12(uint256) -> balances[_from]
REF_12(-> balances) = REF_12 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] -= _amount

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
REF_14(-> allowed) = REF_14 - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _amount

IRs:
REF_15(uint256) -> balances[_to]
REF_15(-> balances) = REF_15 + _amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
}
