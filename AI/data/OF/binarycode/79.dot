digraph G {
// Function: 79.sol-DappleAirdrops-DappleAirdrops()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rate = 10000

IRs:
rate(uint256) := 10000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dropUnitPrice = 1e14

IRs:
dropUnitPrice(uint256) := 100000000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bonus = 20

IRs:
bonus(uint256) := 20(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
maxDropsPerTx = 1000000

IRs:
maxDropsPerTx(uint256) := 1000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
maxTrialDrops = 1000000

IRs:
maxTrialDrops(uint256) := 1000000(uint256)"];
}
// Function: 79.sol-DappleAirdrops-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 79.sol-DappleAirdrops-banToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! tokenIsBanned[_tokenAddr])

IRs:
REF_17(bool) -> tokenIsBanned[_tokenAddr]
TMP_68 = UnaryType.BANG REF_17 
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenIsBanned[_tokenAddr] = true

IRs:
REF_18(bool) -> tokenIsBanned[_tokenAddr]
REF_18(bool) (->tokenIsBanned) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TokenBanned(_tokenAddr)

IRs:
Emit TokenBanned(_tokenAddr)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 79.sol-DappleAirdrops-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].add(msg.value)

IRs:
REF_22(uint256) -> ethBalanceOf[msg.sender]
REF_23(uint256) -> ethBalanceOf[msg.sender]
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', 'msg.value'] 
REF_22(uint256) (->ethBalanceOf) := TMP_78(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
CreditPurchased(msg.sender,msg.value,msg.value.mul(rate))

IRs:
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'rate'] 
Emit CreditPurchased(msg.sender,msg.value,TMP_79)"];
}
// Function: 79.sol-DappleAirdrops-getBonusDropsOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bonusDropsOf[_addr]

IRs:
REF_14(uint256) -> bonusDropsOf[_addr]
RETURN REF_14"];
}
// Function: 79.sol-DappleAirdrops-getDropsOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(ethBalanceOf[_addr].mul(rate)).div(10 ** 18)

IRs:
REF_11(uint256) -> ethBalanceOf[_addr]
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_11', 'rate'] 
TMP_63(uint256) = 10 ** 18
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_62', 'TMP_63'] 
RETURN TMP_64"];
}
// Function: 79.sol-DappleAirdrops-getEthBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ethBalanceOf[_addr]

IRs:
REF_16(uint256) -> ethBalanceOf[_addr]
RETURN REF_16"];
}
// Function: 79.sol-DappleAirdrops-getMaxDropsPerTx()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxDropsPerTx

IRs:
RETURN maxDropsPerTx"];
}
// Function: 79.sol-DappleAirdrops-getRate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rate

IRs:
RETURN rate"];
}
// Function: 79.sol-DappleAirdrops-getRemainingTrialDrops(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokenHasFreeTrial(_addressOfToken)

IRs:
TMP_29(bool) = INTERNAL_CALL, DappleAirdrops.tokenHasFreeTrial(address)(_addressOfToken)
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
maxTrialDrops.sub(trialDrops[_addressOfToken])

IRs:
REF_2(uint256) -> trialDrops[_addressOfToken]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['maxTrialDrops', 'REF_2'] 
RETURN TMP_30"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 79.sol-DappleAirdrops-getTokenAllowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERCInterface(_addressOfToken)

IRs:
TMP_75 = CONVERT _addressOfToken to ERCInterface
token(ERCInterface) := TMP_75(ERCInterface)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token.allowance(_addr,address(this))

IRs:
TMP_76 = CONVERT this to address
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:token(ERCInterface), function:allowance, arguments:['_addr', 'TMP_76']  
RETURN TMP_77"];
}
// Function: 79.sol-DappleAirdrops-getTotalDropsOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getDropsOf(_addr).add(getBonusDropsOf(_addr))

IRs:
TMP_65(uint256) = INTERNAL_CALL, DappleAirdrops.getDropsOf(address)(_addr)
TMP_66(uint256) = INTERNAL_CALL, DappleAirdrops.getBonusDropsOf(address)(_addr)
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_65', 'TMP_66'] 
RETURN TMP_67"];
}
// Function: 79.sol-DappleAirdrops-grantBonusDrops(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != address(0) && _bonusDrops > 0)

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = _addr != TMP_46
TMP_48(bool) = _bonusDrops > 0
TMP_49(bool) = TMP_47 && TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bonusDropsOf[_addr] = bonusDropsOf[_addr].add(_bonusDrops)

IRs:
REF_4(uint256) -> bonusDropsOf[_addr]
REF_5(uint256) -> bonusDropsOf[_addr]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_bonusDrops'] 
REF_4(uint256) (->bonusDropsOf) := TMP_51(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
BonusCreditGranted(_addr,_bonusDrops)

IRs:
Emit BonusCreditGranted(_addr,_bonusDrops)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 79.sol-DappleAirdrops-issueRefunds(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addrs.length <= maxDropsPerTx)

IRs:
REF_31 -> LENGTH _addrs
TMP_88(bool) = REF_31 <= maxDropsPerTx
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _addrs.length

IRs:
REF_32 -> LENGTH _addrs
TMP_90(bool) = i < REF_32
CONDITION TMP_90"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_addrs[i] != address(0) && ethBalanceOf[_addrs[i]] > 0

IRs:
REF_33(address) -> _addrs[i]
TMP_91 = CONVERT 0 to address
TMP_92(bool) = REF_33 != TMP_91
REF_34(address) -> _addrs[i]
REF_35(uint256) -> ethBalanceOf[REF_34]
TMP_93(bool) = REF_35 > 0
TMP_94(bool) = TMP_92 && TMP_93
CONDITION TMP_94"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
toRefund = ethBalanceOf[_addrs[i]]

IRs:
REF_36(address) -> _addrs[i]
REF_37(uint256) -> ethBalanceOf[REF_36]
toRefund(uint256) := REF_37(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ethBalanceOf[_addrs[i]] = 0

IRs:
REF_38(address) -> _addrs[i]
REF_39(uint256) -> ethBalanceOf[REF_38]
REF_39(uint256) (->ethBalanceOf) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_addrs[i].transfer(toRefund)

IRs:
REF_40(address) -> _addrs[i]
Transfer dest:REF_40 value:toRefund"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
RefundIssued(_addrs[i],toRefund)

IRs:
REF_42(address) -> _addrs[i]
Emit RefundIssued(REF_42,toRefund)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_97(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
13->1;
}
// Function: 79.sol-DappleAirdrops-multiValueAirdrop(address,address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERCInterface(_addressOfToken)

IRs:
TMP_118 = CONVERT _addressOfToken to ERCInterface
token(ERCInterface) := TMP_118(ERCInterface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_recipients.length <= maxDropsPerTx && _recipients.length == _values.length && (getTotalDropsOf(msg.sender) >= _recipients.length || tokenHasFreeTrial(_addressOfToken)) && ! tokenIsBanned[_addressOfToken])

IRs:
REF_56 -> LENGTH _recipients
TMP_119(bool) = REF_56 <= maxDropsPerTx
REF_57 -> LENGTH _recipients
REF_58 -> LENGTH _values
TMP_120(bool) = REF_57 == REF_58
TMP_121(bool) = TMP_119 && TMP_120
TMP_122(uint256) = INTERNAL_CALL, DappleAirdrops.getTotalDropsOf(address)(msg.sender)
REF_59 -> LENGTH _recipients
TMP_123(bool) = TMP_122 >= REF_59
TMP_124(bool) = INTERNAL_CALL, DappleAirdrops.tokenHasFreeTrial(address)(_addressOfToken)
TMP_125(bool) = TMP_123 || TMP_124
TMP_126(bool) = TMP_121 && TMP_125
REF_60(bool) -> tokenIsBanned[_addressOfToken]
TMP_127 = UnaryType.BANG REF_60 
TMP_128(bool) = TMP_126 && TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _recipients.length

IRs:
REF_61 -> LENGTH _recipients
TMP_130(bool) = i < REF_61
CONDITION TMP_130"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
_recipients[i] != address(0) && _values[i] > 0

IRs:
REF_62(address) -> _recipients[i]
TMP_131 = CONVERT 0 to address
TMP_132(bool) = REF_62 != TMP_131
REF_63(uint256) -> _values[i]
TMP_133(bool) = REF_63 > 0
TMP_134(bool) = TMP_132 && TMP_133
CONDITION TMP_134"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token.transferFrom(msg.sender,_recipients[i],_values[i])

IRs:
REF_65(address) -> _recipients[i]
REF_66(uint256) -> _values[i]
HIGH_LEVEL_CALL, dest:token(ERCInterface), function:transferFrom, arguments:['msg.sender', 'REF_65', 'REF_66']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_136(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: IF 11

EXPRESSION:
tokenHasFreeTrial(_addressOfToken)

IRs:
TMP_137(bool) = INTERNAL_CALL, DappleAirdrops.tokenHasFreeTrial(address)(_addressOfToken)
CONDITION TMP_137"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length)

IRs:
REF_67(uint256) -> trialDrops[_addressOfToken]
REF_68(uint256) -> trialDrops[_addressOfToken]
REF_70 -> LENGTH _recipients
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_68', 'REF_70'] 
REF_67(uint256) (->trialDrops) := TMP_138(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateMsgSenderBonusDrops(_recipients.length)

IRs:
REF_71 -> LENGTH _recipients
INTERNAL_CALL, DappleAirdrops.updateMsgSenderBonusDrops(uint256)(REF_71)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
AirdropInvoked(msg.sender,_recipients.length)

IRs:
REF_72 -> LENGTH _recipients
Emit AirdropInvoked(msg.sender,REF_72)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 79.sol-DappleAirdrops-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_171(bool) = msg.sender == owner
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 79.sol-DappleAirdrops-revokeBonusCreditOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != address(0) && bonusDropsOf[_addr] >= _bonusDrops)

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _addr != TMP_54
REF_7(uint256) -> bonusDropsOf[_addr]
TMP_56(bool) = REF_7 >= _bonusDrops
TMP_57(bool) = TMP_55 && TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bonusDropsOf[_addr] = bonusDropsOf[_addr].sub(_bonusDrops)

IRs:
REF_8(uint256) -> bonusDropsOf[_addr]
REF_9(uint256) -> bonusDropsOf[_addr]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_9', '_bonusDrops'] 
REF_8(uint256) (->bonusDropsOf) := TMP_59(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
BonusCreditRevoked(_addr,_bonusDrops)

IRs:
Emit BonusCreditRevoked(_addr,_bonusDrops)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 79.sol-DappleAirdrops-setBonus(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bonus != _newBonus)

IRs:
TMP_42(bool) = bonus != _newBonus
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
BonustChanged(bonus,_newBonus)

IRs:
Emit BonustChanged(bonus,_newBonus)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bonus = _newBonus

IRs:
bonus(uint256) := _newBonus(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 79.sol-DappleAirdrops-setMaxDrops(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_maxDrops >= 1000000)

IRs:
TMP_38(bool) = _maxDrops >= 1000000
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MaxDropsChanged(maxDropsPerTx,_maxDrops)

IRs:
Emit MaxDropsChanged(maxDropsPerTx,_maxDrops)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
maxDropsPerTx = _maxDrops

IRs:
maxDropsPerTx(uint256) := _maxDrops(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 79.sol-DappleAirdrops-setRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newRate != rate && _newRate > 0)

IRs:
TMP_31(bool) = _newRate != rate
TMP_32(bool) = _newRate > 0
TMP_33(bool) = TMP_31 && TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RateChanged(rate,_newRate)

IRs:
Emit RateChanged(rate,_newRate)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rate = _newRate

IRs:
rate(uint256) := _newRate(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
eth = 1000000000000000000

IRs:
eth(uint256) := 1000000000000000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dropUnitPrice = eth.div(rate)

IRs:
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['eth', 'rate'] 
dropUnitPrice(uint256) := TMP_36(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 79.sol-DappleAirdrops-singleValueAirdrop(address,address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERCInterface(_addressOfToken)

IRs:
TMP_99 = CONVERT _addressOfToken to ERCInterface
token(ERCInterface) := TMP_99(ERCInterface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_recipients.length <= maxDropsPerTx && (getTotalDropsOf(msg.sender) >= _recipients.length || tokenHasFreeTrial(_addressOfToken)) && ! tokenIsBanned[_addressOfToken])

IRs:
REF_43 -> LENGTH _recipients
TMP_100(bool) = REF_43 <= maxDropsPerTx
TMP_101(uint256) = INTERNAL_CALL, DappleAirdrops.getTotalDropsOf(address)(msg.sender)
REF_44 -> LENGTH _recipients
TMP_102(bool) = TMP_101 >= REF_44
TMP_103(bool) = INTERNAL_CALL, DappleAirdrops.tokenHasFreeTrial(address)(_addressOfToken)
TMP_104(bool) = TMP_102 || TMP_103
TMP_105(bool) = TMP_100 && TMP_104
REF_45(bool) -> tokenIsBanned[_addressOfToken]
TMP_106 = UnaryType.BANG REF_45 
TMP_107(bool) = TMP_105 && TMP_106
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _recipients.length

IRs:
REF_46 -> LENGTH _recipients
TMP_109(bool) = i < REF_46
CONDITION TMP_109"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
_recipients[i] != address(0)

IRs:
REF_47(address) -> _recipients[i]
TMP_110 = CONVERT 0 to address
TMP_111(bool) = REF_47 != TMP_110
CONDITION TMP_111"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token.transferFrom(msg.sender,_recipients[i],_value)

IRs:
REF_49(address) -> _recipients[i]
HIGH_LEVEL_CALL, dest:token(ERCInterface), function:transferFrom, arguments:['msg.sender', 'REF_49', '_value']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_113(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: IF 11

EXPRESSION:
tokenHasFreeTrial(_addressOfToken)

IRs:
TMP_114(bool) = INTERNAL_CALL, DappleAirdrops.tokenHasFreeTrial(address)(_addressOfToken)
CONDITION TMP_114"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length)

IRs:
REF_50(uint256) -> trialDrops[_addressOfToken]
REF_51(uint256) -> trialDrops[_addressOfToken]
REF_53 -> LENGTH _recipients
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_51', 'REF_53'] 
REF_50(uint256) (->trialDrops) := TMP_115(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateMsgSenderBonusDrops(_recipients.length)

IRs:
REF_54 -> LENGTH _recipients
INTERNAL_CALL, DappleAirdrops.updateMsgSenderBonusDrops(uint256)(REF_54)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
AirdropInvoked(msg.sender,_recipients.length)

IRs:
REF_55 -> LENGTH _recipients
Emit AirdropInvoked(msg.sender,REF_55)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 79.sol-DappleAirdrops-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
website = www.dappleairdrops.com

IRs:
website(string) := www.dappleairdrops.com(string)"];
}
// Function: 79.sol-DappleAirdrops-tokenHasFreeTrial(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
trialDrops[_addressOfToken] < maxTrialDrops

IRs:
REF_0(uint256) -> trialDrops[_addressOfToken]
TMP_28(bool) = REF_0 < maxTrialDrops
RETURN TMP_28"];
}
// Function: 79.sol-DappleAirdrops-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0) && _newOwner != owner)

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _newOwner != TMP_21
TMP_23(bool) = _newOwner != owner
TMP_24(bool) = TMP_22 && TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 79.sol-DappleAirdrops-unbanToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenIsBanned[_tokenAddr])

IRs:
REF_19(bool) -> tokenIsBanned[_tokenAddr]
TMP_72(None) = SOLIDITY_CALL require(bool)(REF_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenIsBanned[_tokenAddr] = false

IRs:
REF_20(bool) -> tokenIsBanned[_tokenAddr]
REF_20(bool) (->tokenIsBanned) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TokenUnbanned(_tokenAddr)

IRs:
Emit TokenUnbanned(_tokenAddr)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 79.sol-DappleAirdrops-updateMsgSenderBonusDrops(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_drops <= getDropsOf(msg.sender)

IRs:
TMP_141(uint256) = INTERNAL_CALL, DappleAirdrops.getDropsOf(address)(msg.sender)
TMP_142(bool) = _drops <= TMP_141
CONDITION TMP_142"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(_drops.mul(bonus).div(100))

IRs:
REF_73(uint256) -> bonusDropsOf[msg.sender]
REF_74(uint256) -> bonusDropsOf[msg.sender]
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_drops', 'bonus'] 
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_143', '100'] 
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_74', 'TMP_144'] 
REF_73(uint256) (->bonusDropsOf) := TMP_145(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_drops.mul(dropUnitPrice))

IRs:
REF_78(uint256) -> ethBalanceOf[msg.sender]
REF_79(uint256) -> ethBalanceOf[msg.sender]
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_drops', 'dropUnitPrice'] 
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_79', 'TMP_146'] 
REF_78(uint256) (->ethBalanceOf) := TMP_147(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner.transfer(_drops.mul(dropUnitPrice))

IRs:
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_drops', 'dropUnitPrice'] 
Transfer dest:owner value:TMP_148"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
remainder = _drops.sub(getDropsOf(msg.sender))

IRs:
TMP_150(uint256) = INTERNAL_CALL, DappleAirdrops.getDropsOf(address)(msg.sender)
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_drops', 'TMP_150'] 
remainder(uint256) := TMP_151(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
ethBalanceOf[msg.sender] > 0

IRs:
REF_85(uint256) -> ethBalanceOf[msg.sender]
TMP_152(bool) = REF_85 > 0
CONDITION TMP_152"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(getDropsOf(msg.sender).mul(bonus).div(100))

IRs:
REF_86(uint256) -> bonusDropsOf[msg.sender]
REF_87(uint256) -> bonusDropsOf[msg.sender]
TMP_153(uint256) = INTERNAL_CALL, DappleAirdrops.getDropsOf(address)(msg.sender)
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_153', 'bonus'] 
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_154', '100'] 
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_87', 'TMP_155'] 
REF_86(uint256) (->bonusDropsOf) := TMP_156(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
owner.transfer(ethBalanceOf[msg.sender])

IRs:
REF_92(uint256) -> ethBalanceOf[msg.sender]
Transfer dest:owner value:REF_92"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ethBalanceOf[msg.sender] = 0

IRs:
REF_93(uint256) -> ethBalanceOf[msg.sender]
REF_93(uint256) (->ethBalanceOf) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].sub(remainder)

IRs:
REF_94(uint256) -> bonusDropsOf[msg.sender]
REF_95(uint256) -> bonusDropsOf[msg.sender]
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_95', 'remainder'] 
REF_94(uint256) (->bonusDropsOf) := TMP_158(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
}
// Function: 79.sol-DappleAirdrops-withdrawERC20Tokens(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addressOfToken != address(0) && _recipient != address(0) && _value > 0)

IRs:
TMP_159 = CONVERT 0 to address
TMP_160(bool) = _addressOfToken != TMP_159
TMP_161 = CONVERT 0 to address
TMP_162(bool) = _recipient != TMP_161
TMP_163(bool) = TMP_160 && TMP_162
TMP_164(bool) = _value > 0
TMP_165(bool) = TMP_163 && TMP_164
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
token = ERCInterface(_addressOfToken)

IRs:
TMP_167 = CONVERT _addressOfToken to ERCInterface
token(ERCInterface) := TMP_167(ERCInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.transfer(_recipient,_value)

IRs:
TMP_168(bool) = HIGH_LEVEL_CALL, dest:token(ERCInterface), function:transfer, arguments:['_recipient', '_value']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ERC20TokensWithdrawn(_addressOfToken,_recipient,_value)

IRs:
Emit ERC20TokensWithdrawn(_addressOfToken,_recipient,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 79.sol-DappleAirdrops-withdrawEth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ethBalanceOf[msg.sender] >= _eth && _eth > 0)

IRs:
REF_26(uint256) -> ethBalanceOf[msg.sender]
TMP_81(bool) = REF_26 >= _eth
TMP_82(bool) = _eth > 0
TMP_83(bool) = TMP_81 && TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
toTransfer = _eth

IRs:
toTransfer(uint256) := _eth(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_eth)

IRs:
REF_27(uint256) -> ethBalanceOf[msg.sender]
REF_28(uint256) -> ethBalanceOf[msg.sender]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_eth'] 
REF_27(uint256) (->ethBalanceOf) := TMP_85(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(toTransfer)

IRs:
Transfer dest:msg.sender value:toTransfer"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
EthWithdrawn(msg.sender,toTransfer)

IRs:
Emit EthWithdrawn(msg.sender,toTransfer)"];
}
// Function: 79.sol-ERCInterface-allowance(address,address)
digraph{
}
// Function: 79.sol-ERCInterface-balanceOf(address)
digraph{
}
// Function: 79.sol-ERCInterface-transfer(address,uint256)
digraph{
}
// Function: 79.sol-ERCInterface-transferFrom(address,address,uint256)
digraph{
}
// Function: 79.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 79.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_19(bool) = msg.sender == owner
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 79.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0) && _newOwner != owner)

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _newOwner != TMP_12
TMP_14(bool) = _newOwner != owner
TMP_15(bool) = TMP_13 && TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 79.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 79.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 79.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 79.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
